multiline_comment|/* &n; * Copyright (C) 2000, 2001 Jeff Dike (jdike@karaya.com)&n; * Licensed under the GPL&n; */
macro_line|#ifndef __TT_UACCESS_H
DECL|macro|__TT_UACCESS_H
mdefine_line|#define __TT_UACCESS_H
macro_line|#include &quot;linux/string.h&quot;
macro_line|#include &quot;linux/sched.h&quot;
macro_line|#include &quot;asm/processor.h&quot;
macro_line|#include &quot;asm/errno.h&quot;
macro_line|#include &quot;asm/current.h&quot;
macro_line|#include &quot;asm/a.out.h&quot;
DECL|macro|ABOVE_KMEM
mdefine_line|#define ABOVE_KMEM (16 * 1024 * 1024)
r_extern
r_int
r_int
id|end_vm
suffix:semicolon
r_extern
r_int
r_int
id|uml_physmem
suffix:semicolon
DECL|macro|under_task_size
mdefine_line|#define under_task_size(addr, size) &bslash;&n;&t;(((unsigned long) (addr) &lt; TASK_SIZE) &amp;&amp; &bslash;&n;         (((unsigned long) (addr) + (size)) &lt; TASK_SIZE))
DECL|macro|is_stack
mdefine_line|#define is_stack(addr, size) &bslash;&n;&t;(((unsigned long) (addr) &lt; STACK_TOP) &amp;&amp; &bslash;&n;&t; ((unsigned long) (addr) &gt;= STACK_TOP - ABOVE_KMEM) &amp;&amp; &bslash;&n;&t; (((unsigned long) (addr) + (size)) &lt;= STACK_TOP))
DECL|macro|access_ok_tt
mdefine_line|#define access_ok_tt(type, addr, size) &bslash;&n;&t;((type == VERIFY_READ) || (segment_eq(get_fs(), KERNEL_DS)) || &bslash;&n;         (((unsigned long) (addr) &lt;= ((unsigned long) (addr) + (size))) &amp;&amp; &bslash;&n;          (under_task_size(addr, size) || is_stack(addr, size))))
DECL|function|verify_area_tt
r_static
r_inline
r_int
id|verify_area_tt
c_func
(paren
r_int
id|type
comma
r_const
r_void
op_star
id|addr
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|access_ok_tt
c_func
(paren
id|type
comma
id|addr
comma
id|size
)paren
ques
c_cond
l_int|0
suffix:colon
op_minus
id|EFAULT
suffix:semicolon
)brace
r_extern
r_int
r_int
id|get_fault_addr
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|__do_copy_from_user
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
id|n
comma
r_void
op_star
op_star
id|fault_addr
comma
r_void
op_star
op_star
id|fault_catcher
)paren
suffix:semicolon
DECL|function|copy_from_user_tt
r_static
r_inline
r_int
id|copy_from_user_tt
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
id|n
)paren
(brace
r_return
id|access_ok_tt
c_func
(paren
id|VERIFY_READ
comma
id|from
comma
id|n
)paren
ques
c_cond
id|__do_copy_from_user
c_func
(paren
id|to
comma
id|from
comma
id|n
comma
op_amp
id|current-&gt;thread.fault_addr
comma
op_amp
id|current-&gt;thread.fault_catcher
)paren
suffix:colon
id|n
suffix:semicolon
)brace
r_extern
r_int
id|__do_copy_to_user
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
id|n
comma
r_void
op_star
op_star
id|fault_addr
comma
r_void
op_star
op_star
id|fault_catcher
)paren
suffix:semicolon
DECL|function|copy_to_user_tt
r_static
r_inline
r_int
id|copy_to_user_tt
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
id|n
)paren
(brace
r_return
id|access_ok_tt
c_func
(paren
id|VERIFY_WRITE
comma
id|to
comma
id|n
)paren
ques
c_cond
id|__do_copy_to_user
c_func
(paren
id|to
comma
id|from
comma
id|n
comma
op_amp
id|current-&gt;thread.fault_addr
comma
op_amp
id|current-&gt;thread.fault_catcher
)paren
suffix:colon
id|n
suffix:semicolon
)brace
r_extern
r_int
id|__do_strncpy_from_user
c_func
(paren
r_char
op_star
id|dst
comma
r_const
r_char
op_star
id|src
comma
r_int
id|n
comma
r_void
op_star
op_star
id|fault_addr
comma
r_void
op_star
op_star
id|fault_catcher
)paren
suffix:semicolon
DECL|function|strncpy_from_user_tt
r_static
r_inline
r_int
id|strncpy_from_user_tt
c_func
(paren
r_char
op_star
id|dst
comma
r_const
r_char
op_star
id|src
comma
r_int
id|count
)paren
(brace
r_int
id|n
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|access_ok_tt
c_func
(paren
id|VERIFY_READ
comma
id|src
comma
l_int|1
)paren
)paren
(brace
r_return
op_minus
id|EFAULT
suffix:semicolon
)brace
id|n
op_assign
id|__do_strncpy_from_user
c_func
(paren
id|dst
comma
id|src
comma
id|count
comma
op_amp
id|current-&gt;thread.fault_addr
comma
op_amp
id|current-&gt;thread.fault_catcher
)paren
suffix:semicolon
r_if
c_cond
(paren
id|n
OL
l_int|0
)paren
(brace
r_return
op_minus
id|EFAULT
suffix:semicolon
)brace
r_return
id|n
suffix:semicolon
)brace
r_extern
r_int
id|__do_clear_user
c_func
(paren
r_void
op_star
id|mem
comma
r_int
id|len
comma
r_void
op_star
op_star
id|fault_addr
comma
r_void
op_star
op_star
id|fault_catcher
)paren
suffix:semicolon
DECL|function|__clear_user_tt
r_static
r_inline
r_int
id|__clear_user_tt
c_func
(paren
r_void
op_star
id|mem
comma
r_int
id|len
)paren
(brace
r_return
id|__do_clear_user
c_func
(paren
id|mem
comma
id|len
comma
op_amp
id|current-&gt;thread.fault_addr
comma
op_amp
id|current-&gt;thread.fault_catcher
)paren
suffix:semicolon
)brace
DECL|function|clear_user_tt
r_static
r_inline
r_int
id|clear_user_tt
c_func
(paren
r_void
op_star
id|mem
comma
r_int
id|len
)paren
(brace
r_return
id|access_ok_tt
c_func
(paren
id|VERIFY_WRITE
comma
id|mem
comma
id|len
)paren
ques
c_cond
id|__do_clear_user
c_func
(paren
id|mem
comma
id|len
comma
op_amp
id|current-&gt;thread.fault_addr
comma
op_amp
id|current-&gt;thread.fault_catcher
)paren
suffix:colon
id|len
suffix:semicolon
)brace
r_extern
r_int
id|__do_strnlen_user
c_func
(paren
r_const
r_char
op_star
id|str
comma
r_int
r_int
id|n
comma
r_void
op_star
op_star
id|fault_addr
comma
r_void
op_star
op_star
id|fault_catcher
)paren
suffix:semicolon
DECL|function|strnlen_user_tt
r_static
r_inline
r_int
id|strnlen_user_tt
c_func
(paren
r_const
r_void
op_star
id|str
comma
r_int
id|len
)paren
(brace
r_return
id|__do_strnlen_user
c_func
(paren
id|str
comma
id|len
comma
op_amp
id|current-&gt;thread.fault_addr
comma
op_amp
id|current-&gt;thread.fault_catcher
)paren
suffix:semicolon
)brace
macro_line|#endif
multiline_comment|/*&n; * Overrides for Emacs so that we follow Linus&squot;s tabbing style.&n; * Emacs will notice this stuff at the end of the file and automatically&n; * adjust the settings for this buffer only.  This must remain at the end&n; * of the file.&n; * ---------------------------------------------------------------------------&n; * Local variables:&n; * c-file-style: &quot;linux&quot;&n; * End:&n; */
eof
