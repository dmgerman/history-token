multiline_comment|/* &n; * Copyright (C) 2002 Jeff Dike (jdike@karaya.com)&n; * Licensed under the GPL&n; */
macro_line|#ifndef __SKAS_UACCESS_H
DECL|macro|__SKAS_UACCESS_H
mdefine_line|#define __SKAS_UACCESS_H
macro_line|#include &quot;linux/string.h&quot;
macro_line|#include &quot;linux/sched.h&quot;
macro_line|#include &quot;linux/err.h&quot;
macro_line|#include &quot;asm/processor.h&quot;
macro_line|#include &quot;asm/pgtable.h&quot;
macro_line|#include &quot;asm/errno.h&quot;
macro_line|#include &quot;asm/current.h&quot;
macro_line|#include &quot;asm/a.out.h&quot;
macro_line|#include &quot;kern_util.h&quot;
DECL|macro|access_ok_skas
mdefine_line|#define access_ok_skas(type, addr, size) &bslash;&n;&t;((segment_eq(get_fs(), KERNEL_DS)) || &bslash;&n;&t; (((unsigned long) (addr) &lt; TASK_SIZE) &amp;&amp; &bslash;&n;&t;  ((unsigned long) (addr) + (size) &lt; TASK_SIZE)))
DECL|function|verify_area_skas
r_static
r_inline
r_int
id|verify_area_skas
c_func
(paren
r_int
id|type
comma
r_const
r_void
op_star
id|addr
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|access_ok_skas
c_func
(paren
id|type
comma
id|addr
comma
id|size
)paren
ques
c_cond
l_int|0
suffix:colon
op_minus
id|EFAULT
suffix:semicolon
)brace
r_extern
r_void
op_star
id|um_virt_to_phys
c_func
(paren
r_struct
id|task_struct
op_star
id|task
comma
r_int
r_int
id|virt
comma
id|pte_t
op_star
id|pte_out
)paren
suffix:semicolon
DECL|function|maybe_map
r_static
r_inline
r_int
r_int
id|maybe_map
c_func
(paren
r_int
r_int
id|virt
comma
r_int
id|is_write
)paren
(brace
id|pte_t
id|pte
suffix:semicolon
r_void
op_star
id|phys
op_assign
id|um_virt_to_phys
c_func
(paren
id|current
comma
id|virt
comma
op_amp
id|pte
)paren
suffix:semicolon
r_int
id|dummy_code
suffix:semicolon
r_if
c_cond
(paren
id|IS_ERR
c_func
(paren
id|phys
)paren
op_logical_or
(paren
id|is_write
op_logical_and
op_logical_neg
id|pte_write
c_func
(paren
id|pte
)paren
)paren
)paren
(brace
r_if
c_cond
(paren
id|handle_page_fault
c_func
(paren
id|virt
comma
l_int|0
comma
id|is_write
comma
l_int|0
comma
op_amp
id|dummy_code
)paren
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
id|phys
op_assign
id|um_virt_to_phys
c_func
(paren
id|current
comma
id|virt
comma
l_int|NULL
)paren
suffix:semicolon
)brace
r_return
(paren
r_int
r_int
)paren
id|__va
c_func
(paren
(paren
r_int
r_int
)paren
id|phys
)paren
suffix:semicolon
)brace
DECL|function|buffer_op
r_static
r_inline
r_int
id|buffer_op
c_func
(paren
r_int
r_int
id|addr
comma
r_int
id|len
comma
r_int
(paren
op_star
id|op
)paren
(paren
r_int
r_int
id|addr
comma
r_int
id|len
comma
r_void
op_star
id|arg
)paren
comma
r_void
op_star
id|arg
)paren
(brace
r_int
id|size
op_assign
id|min
c_func
(paren
id|PAGE_ALIGN
c_func
(paren
id|addr
)paren
op_minus
id|addr
comma
(paren
r_int
r_int
)paren
id|len
)paren
suffix:semicolon
r_int
id|remain
op_assign
id|len
comma
id|n
suffix:semicolon
id|n
op_assign
(paren
op_star
id|op
)paren
(paren
id|addr
comma
id|size
comma
id|arg
)paren
suffix:semicolon
r_if
c_cond
(paren
id|n
op_ne
l_int|0
)paren
(brace
r_return
id|n
OL
l_int|0
ques
c_cond
id|remain
suffix:colon
l_int|0
suffix:semicolon
)brace
id|addr
op_add_assign
id|size
suffix:semicolon
id|remain
op_sub_assign
id|size
suffix:semicolon
r_if
c_cond
(paren
id|remain
op_eq
l_int|0
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
r_while
c_loop
(paren
id|addr
OL
(paren
(paren
id|addr
op_plus
id|remain
)paren
op_amp
id|PAGE_MASK
)paren
)paren
(brace
id|n
op_assign
(paren
op_star
id|op
)paren
(paren
id|addr
comma
id|PAGE_SIZE
comma
id|arg
)paren
suffix:semicolon
r_if
c_cond
(paren
id|n
op_ne
l_int|0
)paren
(brace
r_return
id|n
OL
l_int|0
ques
c_cond
id|remain
suffix:colon
l_int|0
suffix:semicolon
)brace
id|addr
op_add_assign
id|PAGE_SIZE
suffix:semicolon
id|remain
op_sub_assign
id|PAGE_SIZE
suffix:semicolon
)brace
r_if
c_cond
(paren
id|remain
op_eq
l_int|0
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
id|n
op_assign
(paren
op_star
id|op
)paren
(paren
id|addr
comma
id|remain
comma
id|arg
)paren
suffix:semicolon
r_if
c_cond
(paren
id|n
op_ne
l_int|0
)paren
(brace
r_return
id|n
OL
l_int|0
ques
c_cond
id|remain
suffix:colon
l_int|0
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|copy_chunk_from_user
r_static
r_inline
r_int
id|copy_chunk_from_user
c_func
(paren
r_int
r_int
id|from
comma
r_int
id|len
comma
r_void
op_star
id|arg
)paren
(brace
r_int
r_int
op_star
id|to_ptr
op_assign
id|arg
comma
id|to
op_assign
op_star
id|to_ptr
suffix:semicolon
id|from
op_assign
id|maybe_map
c_func
(paren
id|from
comma
l_int|0
)paren
suffix:semicolon
r_if
c_cond
(paren
id|from
op_eq
l_int|0
)paren
(brace
r_return
op_minus
l_int|1
suffix:semicolon
)brace
id|memcpy
c_func
(paren
(paren
r_void
op_star
)paren
id|to
comma
(paren
r_void
op_star
)paren
id|from
comma
id|len
)paren
suffix:semicolon
op_star
id|to_ptr
op_add_assign
id|len
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|copy_from_user_skas
r_static
r_inline
r_int
id|copy_from_user_skas
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
id|n
)paren
(brace
r_if
c_cond
(paren
id|segment_eq
c_func
(paren
id|get_fs
c_func
(paren
)paren
comma
id|KERNEL_DS
)paren
)paren
(brace
id|memcpy
c_func
(paren
id|to
comma
id|from
comma
id|n
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
r_return
id|access_ok_skas
c_func
(paren
id|VERIFY_READ
comma
id|from
comma
id|n
)paren
ques
c_cond
id|buffer_op
c_func
(paren
(paren
r_int
r_int
)paren
id|from
comma
id|n
comma
id|copy_chunk_from_user
comma
op_amp
id|to
)paren
suffix:colon
id|n
suffix:semicolon
)brace
DECL|function|copy_chunk_to_user
r_static
r_inline
r_int
id|copy_chunk_to_user
c_func
(paren
r_int
r_int
id|to
comma
r_int
id|len
comma
r_void
op_star
id|arg
)paren
(brace
r_int
r_int
op_star
id|from_ptr
op_assign
id|arg
comma
id|from
op_assign
op_star
id|from_ptr
suffix:semicolon
id|to
op_assign
id|maybe_map
c_func
(paren
id|to
comma
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|to
op_eq
l_int|0
)paren
(brace
r_return
op_minus
l_int|1
suffix:semicolon
)brace
id|memcpy
c_func
(paren
(paren
r_void
op_star
)paren
id|to
comma
(paren
r_void
op_star
)paren
id|from
comma
id|len
)paren
suffix:semicolon
op_star
id|from_ptr
op_add_assign
id|len
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|copy_to_user_skas
r_static
r_inline
r_int
id|copy_to_user_skas
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
id|n
)paren
(brace
r_if
c_cond
(paren
id|segment_eq
c_func
(paren
id|get_fs
c_func
(paren
)paren
comma
id|KERNEL_DS
)paren
)paren
(brace
id|memcpy
c_func
(paren
id|to
comma
id|from
comma
id|n
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
r_return
id|access_ok_skas
c_func
(paren
id|VERIFY_WRITE
comma
id|to
comma
id|n
)paren
ques
c_cond
id|buffer_op
c_func
(paren
(paren
r_int
r_int
)paren
id|to
comma
id|n
comma
id|copy_chunk_to_user
comma
op_amp
id|from
)paren
suffix:colon
id|n
suffix:semicolon
)brace
DECL|function|strncpy_chunk_from_user
r_static
r_inline
r_int
id|strncpy_chunk_from_user
c_func
(paren
r_int
r_int
id|from
comma
r_int
id|len
comma
r_void
op_star
id|arg
)paren
(brace
r_char
op_star
op_star
id|to_ptr
op_assign
id|arg
comma
op_star
id|to
op_assign
op_star
id|to_ptr
suffix:semicolon
r_int
id|n
suffix:semicolon
id|from
op_assign
id|maybe_map
c_func
(paren
id|from
comma
l_int|0
)paren
suffix:semicolon
r_if
c_cond
(paren
id|from
op_eq
l_int|0
)paren
(brace
r_return
op_minus
l_int|1
suffix:semicolon
)brace
id|strncpy
c_func
(paren
id|to
comma
(paren
r_void
op_star
)paren
id|from
comma
id|len
)paren
suffix:semicolon
id|n
op_assign
id|strnlen
c_func
(paren
id|to
comma
id|len
)paren
suffix:semicolon
op_star
id|to_ptr
op_add_assign
id|n
suffix:semicolon
r_if
c_cond
(paren
id|n
OL
id|len
)paren
(brace
r_return
l_int|1
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|strncpy_from_user_skas
r_static
r_inline
r_int
id|strncpy_from_user_skas
c_func
(paren
r_char
op_star
id|dst
comma
r_const
r_char
op_star
id|src
comma
r_int
id|count
)paren
(brace
r_int
id|n
suffix:semicolon
r_char
op_star
id|ptr
op_assign
id|dst
suffix:semicolon
r_if
c_cond
(paren
id|segment_eq
c_func
(paren
id|get_fs
c_func
(paren
)paren
comma
id|KERNEL_DS
)paren
)paren
(brace
id|strncpy
c_func
(paren
id|dst
comma
id|src
comma
id|count
)paren
suffix:semicolon
r_return
id|strnlen
c_func
(paren
id|dst
comma
id|count
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|access_ok_skas
c_func
(paren
id|VERIFY_READ
comma
id|src
comma
l_int|1
)paren
)paren
(brace
r_return
op_minus
id|EFAULT
suffix:semicolon
)brace
id|n
op_assign
id|buffer_op
c_func
(paren
(paren
r_int
r_int
)paren
id|src
comma
id|count
comma
id|strncpy_chunk_from_user
comma
op_amp
id|ptr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|n
op_ne
l_int|0
)paren
(brace
r_return
op_minus
id|EFAULT
suffix:semicolon
)brace
r_return
id|strnlen
c_func
(paren
id|dst
comma
id|count
)paren
suffix:semicolon
)brace
DECL|function|clear_chunk
r_static
r_inline
r_int
id|clear_chunk
c_func
(paren
r_int
r_int
id|addr
comma
r_int
id|len
comma
r_void
op_star
id|unused
)paren
(brace
id|addr
op_assign
id|maybe_map
c_func
(paren
id|addr
comma
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|addr
op_eq
l_int|0
)paren
(brace
r_return
op_minus
l_int|1
suffix:semicolon
)brace
id|memset
c_func
(paren
(paren
r_void
op_star
)paren
id|addr
comma
l_int|0
comma
id|len
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|__clear_user_skas
r_static
r_inline
r_int
id|__clear_user_skas
c_func
(paren
r_void
op_star
id|mem
comma
r_int
id|len
)paren
(brace
r_return
id|buffer_op
c_func
(paren
(paren
r_int
r_int
)paren
id|mem
comma
id|len
comma
id|clear_chunk
comma
l_int|NULL
)paren
suffix:semicolon
)brace
DECL|function|clear_user_skas
r_static
r_inline
r_int
id|clear_user_skas
c_func
(paren
r_void
op_star
id|mem
comma
r_int
id|len
)paren
(brace
r_if
c_cond
(paren
id|segment_eq
c_func
(paren
id|get_fs
c_func
(paren
)paren
comma
id|KERNEL_DS
)paren
)paren
(brace
id|memset
c_func
(paren
id|mem
comma
l_int|0
comma
id|len
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
r_return
id|access_ok_skas
c_func
(paren
id|VERIFY_WRITE
comma
id|mem
comma
id|len
)paren
ques
c_cond
id|buffer_op
c_func
(paren
(paren
r_int
r_int
)paren
id|mem
comma
id|len
comma
id|clear_chunk
comma
l_int|NULL
)paren
suffix:colon
id|len
suffix:semicolon
)brace
DECL|function|strnlen_chunk
r_static
r_inline
r_int
id|strnlen_chunk
c_func
(paren
r_int
r_int
id|str
comma
r_int
id|len
comma
r_void
op_star
id|arg
)paren
(brace
r_int
op_star
id|len_ptr
op_assign
id|arg
comma
id|n
suffix:semicolon
id|str
op_assign
id|maybe_map
c_func
(paren
id|str
comma
l_int|0
)paren
suffix:semicolon
r_if
c_cond
(paren
id|str
op_eq
l_int|0
)paren
(brace
r_return
op_minus
l_int|1
suffix:semicolon
)brace
id|n
op_assign
id|strnlen
c_func
(paren
(paren
r_void
op_star
)paren
id|str
comma
id|len
)paren
suffix:semicolon
op_star
id|len_ptr
op_add_assign
id|n
suffix:semicolon
r_if
c_cond
(paren
id|n
OL
id|len
)paren
(brace
r_return
l_int|1
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|strnlen_user_skas
r_static
r_inline
r_int
id|strnlen_user_skas
c_func
(paren
r_const
r_void
op_star
id|str
comma
r_int
id|len
)paren
(brace
r_int
id|count
op_assign
l_int|0
comma
id|n
suffix:semicolon
r_if
c_cond
(paren
id|segment_eq
c_func
(paren
id|get_fs
c_func
(paren
)paren
comma
id|KERNEL_DS
)paren
)paren
(brace
r_return
id|strnlen
c_func
(paren
id|str
comma
id|len
)paren
op_plus
l_int|1
suffix:semicolon
)brace
id|n
op_assign
id|buffer_op
c_func
(paren
(paren
r_int
r_int
)paren
id|str
comma
id|len
comma
id|strnlen_chunk
comma
op_amp
id|count
)paren
suffix:semicolon
r_if
c_cond
(paren
id|n
op_eq
l_int|0
)paren
(brace
r_return
id|count
op_plus
l_int|1
suffix:semicolon
)brace
r_return
op_minus
id|EFAULT
suffix:semicolon
)brace
macro_line|#endif
multiline_comment|/*&n; * Overrides for Emacs so that we follow Linus&squot;s tabbing style.&n; * Emacs will notice this stuff at the end of the file and automatically&n; * adjust the settings for this buffer only.  This must remain at the end&n; * of the file.&n; * ---------------------------------------------------------------------------&n; * Local variables:&n; * c-file-style: &quot;linux&quot;&n; * End:&n; */
eof
