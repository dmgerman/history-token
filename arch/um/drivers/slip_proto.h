multiline_comment|/* &n; * Copyright (C) 2002 Jeff Dike (jdike@karaya.com)&n; * Licensed under the GPL&n; */
macro_line|#ifndef __UM_SLIP_PROTO_H__
DECL|macro|__UM_SLIP_PROTO_H__
mdefine_line|#define __UM_SLIP_PROTO_H__
multiline_comment|/* SLIP protocol characters. */
DECL|macro|SLIP_END
mdefine_line|#define SLIP_END             0300&t;/* indicates end of frame&t;*/
DECL|macro|SLIP_ESC
mdefine_line|#define SLIP_ESC             0333&t;/* indicates byte stuffing&t;*/
DECL|macro|SLIP_ESC_END
mdefine_line|#define SLIP_ESC_END         0334&t;/* ESC ESC_END means END &squot;data&squot;&t;*/
DECL|macro|SLIP_ESC_ESC
mdefine_line|#define SLIP_ESC_ESC         0335&t;/* ESC ESC_ESC means ESC &squot;data&squot;&t;*/
DECL|function|slip_unesc
r_static
r_inline
r_int
id|slip_unesc
c_func
(paren
r_int
r_char
id|c
comma
r_char
op_star
id|buf
comma
r_int
op_star
id|pos
comma
r_int
op_star
id|esc
)paren
(brace
r_int
id|ret
suffix:semicolon
r_switch
c_cond
(paren
id|c
)paren
(brace
r_case
id|SLIP_END
suffix:colon
op_star
id|esc
op_assign
l_int|0
suffix:semicolon
id|ret
op_assign
op_star
id|pos
suffix:semicolon
op_star
id|pos
op_assign
l_int|0
suffix:semicolon
r_return
id|ret
suffix:semicolon
r_case
id|SLIP_ESC
suffix:colon
op_star
id|esc
op_assign
l_int|1
suffix:semicolon
r_return
l_int|0
suffix:semicolon
r_case
id|SLIP_ESC_ESC
suffix:colon
r_if
c_cond
(paren
op_star
id|esc
)paren
(brace
op_star
id|esc
op_assign
l_int|0
suffix:semicolon
id|c
op_assign
id|SLIP_ESC
suffix:semicolon
)brace
r_break
suffix:semicolon
r_case
id|SLIP_ESC_END
suffix:colon
r_if
c_cond
(paren
op_star
id|esc
)paren
(brace
op_star
id|esc
op_assign
l_int|0
suffix:semicolon
id|c
op_assign
id|SLIP_END
suffix:semicolon
)brace
r_break
suffix:semicolon
)brace
id|buf
(braket
(paren
op_star
id|pos
)paren
op_increment
)braket
op_assign
id|c
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|slip_esc
r_static
r_inline
r_int
id|slip_esc
c_func
(paren
r_int
r_char
op_star
id|s
comma
r_int
r_char
op_star
id|d
comma
r_int
id|len
)paren
(brace
r_int
r_char
op_star
id|ptr
op_assign
id|d
suffix:semicolon
r_int
r_char
id|c
suffix:semicolon
multiline_comment|/*&n;&t; * Send an initial END character to flush out any&n;&t; * data that may have accumulated in the receiver&n;&t; * due to line noise.&n;&t; */
op_star
id|ptr
op_increment
op_assign
id|SLIP_END
suffix:semicolon
multiline_comment|/*&n;&t; * For each byte in the packet, send the appropriate&n;&t; * character sequence, according to the SLIP protocol.&n;&t; */
r_while
c_loop
(paren
id|len
op_decrement
OG
l_int|0
)paren
(brace
r_switch
c_cond
(paren
id|c
op_assign
op_star
id|s
op_increment
)paren
(brace
r_case
id|SLIP_END
suffix:colon
op_star
id|ptr
op_increment
op_assign
id|SLIP_ESC
suffix:semicolon
op_star
id|ptr
op_increment
op_assign
id|SLIP_ESC_END
suffix:semicolon
r_break
suffix:semicolon
r_case
id|SLIP_ESC
suffix:colon
op_star
id|ptr
op_increment
op_assign
id|SLIP_ESC
suffix:semicolon
op_star
id|ptr
op_increment
op_assign
id|SLIP_ESC_ESC
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
op_star
id|ptr
op_increment
op_assign
id|c
suffix:semicolon
r_break
suffix:semicolon
)brace
)brace
op_star
id|ptr
op_increment
op_assign
id|SLIP_END
suffix:semicolon
r_return
(paren
id|ptr
op_minus
id|d
)paren
suffix:semicolon
)brace
macro_line|#endif
multiline_comment|/*&n; * Overrides for Emacs so that we follow Linus&squot;s tabbing style.&n; * Emacs will notice this stuff at the end of the file and automatically&n; * adjust the settings for this buffer only.  This must remain at the end&n; * of the file.&n; * ---------------------------------------------------------------------------&n; * Local variables:&n; * c-file-style: &quot;linux&quot;&n; * End:&n; */
eof
