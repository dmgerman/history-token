multiline_comment|/*&n; * arch/um/include/mem_user.h&n; *&n; * BRIEF MODULE DESCRIPTION&n; * user side memory interface for support IO memory inside user mode linux&n; *&n; * Copyright (C) 2001 RidgeRun, Inc.&n; * Author: RidgeRun, Inc.&n; *         Greg Lonnon glonnon@ridgerun.com or info@ridgerun.com&n; *&n; *  This program is free software; you can redistribute  it and/or modify it&n; *  under  the terms of  the GNU General  Public License as published by the&n; *  Free Software Foundation;  either version 2 of the  License, or (at your&n; *  option) any later version.&n; *&n; *  THIS  SOFTWARE  IS PROVIDED   ``AS  IS&squot;&squot; AND   ANY  EXPRESS OR IMPLIED&n; *  WARRANTIES,   INCLUDING, BUT NOT  LIMITED  TO, THE IMPLIED WARRANTIES OF&n; *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN&n; *  NO  EVENT  SHALL   THE AUTHOR  BE    LIABLE FOR ANY   DIRECT, INDIRECT,&n; *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT&n; *  NOT LIMITED   TO, PROCUREMENT OF  SUBSTITUTE GOODS  OR SERVICES; LOSS OF&n; *  USE, DATA,  OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON&n; *  ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT&n; *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF&n; *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&n; *&n; *  You should have received a copy of the  GNU General Public License along&n; *  with this program; if not, write  to the Free Software Foundation, Inc.,&n; *  675 Mass Ave, Cambridge, MA 02139, USA.&n; */
macro_line|#ifndef _MEM_USER_H
DECL|macro|_MEM_USER_H
mdefine_line|#define _MEM_USER_H
DECL|struct|mem_region
r_struct
id|mem_region
(brace
DECL|member|driver
r_char
op_star
id|driver
suffix:semicolon
DECL|member|start
r_int
r_int
id|start
suffix:semicolon
DECL|member|len
r_int
r_int
id|len
suffix:semicolon
DECL|member|mem_map
r_void
op_star
id|mem_map
suffix:semicolon
DECL|member|fd
r_int
id|fd
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|mem_region
op_star
id|regions
(braket
)braket
suffix:semicolon
r_extern
r_struct
id|mem_region
id|physmem_region
suffix:semicolon
DECL|macro|ROUND_4M
mdefine_line|#define ROUND_4M(n) ((((unsigned long) (n)) + (1 &lt;&lt; 22)) &amp; ~((1 &lt;&lt; 22) - 1))
r_extern
r_int
r_int
id|host_task_size
suffix:semicolon
r_extern
r_int
r_int
id|task_size
suffix:semicolon
r_extern
r_int
id|init_mem_user
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|create_mem_file
c_func
(paren
r_int
r_int
id|len
)paren
suffix:semicolon
r_extern
r_void
id|setup_range
c_func
(paren
r_int
id|fd
comma
r_char
op_star
id|driver
comma
r_int
r_int
id|start
comma
r_int
r_int
id|total
comma
r_int
id|need_vm
comma
r_struct
id|mem_region
op_star
id|region
comma
r_void
op_star
id|reserved
)paren
suffix:semicolon
r_extern
r_void
id|map
c_func
(paren
r_int
r_int
id|virt
comma
r_int
r_int
id|p
comma
r_int
r_int
id|len
comma
r_int
id|r
comma
r_int
id|w
comma
r_int
id|x
)paren
suffix:semicolon
r_extern
r_int
id|unmap
c_func
(paren
r_void
op_star
id|addr
comma
r_int
id|len
)paren
suffix:semicolon
r_extern
r_int
id|protect
c_func
(paren
r_int
r_int
id|addr
comma
r_int
r_int
id|len
comma
r_int
id|r
comma
r_int
id|w
comma
r_int
id|x
comma
r_int
id|must_succeed
)paren
suffix:semicolon
r_extern
r_void
id|setup_memory
c_func
(paren
r_void
op_star
id|entry
)paren
suffix:semicolon
r_extern
r_int
r_int
id|find_iomem
c_func
(paren
r_char
op_star
id|driver
comma
r_int
r_int
op_star
id|len_out
)paren
suffix:semicolon
r_extern
r_int
id|init_maps
c_func
(paren
r_struct
id|mem_region
op_star
id|region
)paren
suffix:semicolon
r_extern
r_int
id|nregions
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|init_range
c_func
(paren
r_int
id|n
comma
r_int
id|fd
comma
r_char
op_star
id|driver
comma
r_int
r_int
id|start
comma
r_int
r_int
id|len
comma
r_struct
id|mem_region
op_star
id|region
)paren
suffix:semicolon
r_extern
r_int
id|reserve_vm
c_func
(paren
r_int
r_int
id|start
comma
r_int
r_int
id|end
comma
r_void
op_star
id|e
)paren
suffix:semicolon
r_extern
r_int
r_int
id|get_vm
c_func
(paren
r_int
r_int
id|len
)paren
suffix:semicolon
r_extern
r_void
id|setup_physmem
c_func
(paren
r_int
r_int
id|start
comma
r_int
r_int
id|usable
comma
r_int
r_int
id|len
)paren
suffix:semicolon
r_extern
r_int
id|setup_region
c_func
(paren
r_struct
id|mem_region
op_star
id|region
comma
r_void
op_star
id|entry
)paren
suffix:semicolon
r_extern
r_void
id|add_iomem
c_func
(paren
r_char
op_star
id|name
comma
r_int
id|fd
comma
r_int
id|size
)paren
suffix:semicolon
r_extern
r_struct
id|mem_region
op_star
id|phys_region
c_func
(paren
r_int
r_int
id|phys
)paren
suffix:semicolon
r_extern
r_int
r_int
id|phys_offset
c_func
(paren
r_int
r_int
id|phys
)paren
suffix:semicolon
r_extern
r_void
id|unmap_physmem
c_func
(paren
r_void
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/*&n; * Overrides for Emacs so that we follow Linus&squot;s tabbing style.&n; * Emacs will notice this stuff at the end of the file and automatically&n; * adjust the settings for this buffer only.  This must remain at the end&n; * of the file.&n; * ---------------------------------------------------------------------------&n; * Local variables:&n; * c-file-style: &quot;linux&quot;&n; * End:&n; */
eof
