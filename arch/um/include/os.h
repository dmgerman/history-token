multiline_comment|/* &n; * Copyright (C) 2002 Jeff Dike (jdike@karaya.com)&n; * Licensed under the GPL&n; */
macro_line|#ifndef __OS_H__
DECL|macro|__OS_H__
mdefine_line|#define __OS_H__
macro_line|#include &quot;asm/types.h&quot;
macro_line|#include &quot;../os/include/file.h&quot;
DECL|macro|OS_TYPE_FILE
mdefine_line|#define OS_TYPE_FILE 1 
DECL|macro|OS_TYPE_DIR
mdefine_line|#define OS_TYPE_DIR 2 
DECL|macro|OS_TYPE_SYMLINK
mdefine_line|#define OS_TYPE_SYMLINK 3 
DECL|macro|OS_TYPE_CHARDEV
mdefine_line|#define OS_TYPE_CHARDEV 4
DECL|macro|OS_TYPE_BLOCKDEV
mdefine_line|#define OS_TYPE_BLOCKDEV 5
DECL|macro|OS_TYPE_FIFO
mdefine_line|#define OS_TYPE_FIFO 6
DECL|macro|OS_TYPE_SOCK
mdefine_line|#define OS_TYPE_SOCK 7
DECL|struct|openflags
r_struct
id|openflags
(brace
DECL|member|r
r_int
r_int
id|r
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w
r_int
r_int
id|w
suffix:colon
l_int|1
suffix:semicolon
DECL|member|s
r_int
r_int
id|s
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* O_SYNC */
DECL|member|c
r_int
r_int
id|c
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* O_CREAT */
DECL|member|t
r_int
r_int
id|t
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* O_TRUNC */
DECL|member|a
r_int
r_int
id|a
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* O_APPEND */
DECL|member|e
r_int
r_int
id|e
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* O_EXCL */
)brace
suffix:semicolon
DECL|macro|OPENFLAGS
mdefine_line|#define OPENFLAGS() ((struct openflags) { r : 0, w : 0, c : 0, s : 0 })
DECL|function|of_read
r_static
r_inline
r_struct
id|openflags
id|of_read
c_func
(paren
r_struct
id|openflags
id|flags
)paren
(brace
id|flags.r
op_assign
l_int|1
suffix:semicolon
r_return
id|flags
suffix:semicolon
)brace
DECL|function|of_write
r_static
r_inline
r_struct
id|openflags
id|of_write
c_func
(paren
r_struct
id|openflags
id|flags
)paren
(brace
id|flags.w
op_assign
l_int|1
suffix:semicolon
r_return
id|flags
suffix:semicolon
)brace
DECL|function|of_rdwr
r_static
r_inline
r_struct
id|openflags
id|of_rdwr
c_func
(paren
r_struct
id|openflags
id|flags
)paren
(brace
r_return
id|of_read
c_func
(paren
id|of_write
c_func
(paren
id|flags
)paren
)paren
suffix:semicolon
)brace
DECL|function|of_set_rw
r_static
r_inline
r_struct
id|openflags
id|of_set_rw
c_func
(paren
r_struct
id|openflags
id|flags
comma
r_int
id|r
comma
r_int
id|w
)paren
(brace
id|flags.r
op_assign
id|r
suffix:semicolon
id|flags.w
op_assign
id|w
suffix:semicolon
r_return
id|flags
suffix:semicolon
)brace
DECL|function|of_sync
r_static
r_inline
r_struct
id|openflags
id|of_sync
c_func
(paren
r_struct
id|openflags
id|flags
)paren
(brace
id|flags.s
op_assign
l_int|1
suffix:semicolon
r_return
id|flags
suffix:semicolon
)brace
DECL|function|of_create
r_static
r_inline
r_struct
id|openflags
id|of_create
c_func
(paren
r_struct
id|openflags
id|flags
)paren
(brace
id|flags.c
op_assign
l_int|1
suffix:semicolon
r_return
id|flags
suffix:semicolon
)brace
DECL|function|of_trunc
r_static
r_inline
r_struct
id|openflags
id|of_trunc
c_func
(paren
r_struct
id|openflags
id|flags
)paren
(brace
id|flags.t
op_assign
l_int|1
suffix:semicolon
r_return
id|flags
suffix:semicolon
)brace
DECL|function|of_append
r_static
r_inline
r_struct
id|openflags
id|of_append
c_func
(paren
r_struct
id|openflags
id|flags
)paren
(brace
id|flags.a
op_assign
l_int|1
suffix:semicolon
r_return
id|flags
suffix:semicolon
)brace
DECL|function|of_excl
r_static
r_inline
r_struct
id|openflags
id|of_excl
c_func
(paren
r_struct
id|openflags
id|flags
)paren
(brace
id|flags.e
op_assign
l_int|1
suffix:semicolon
r_return
id|flags
suffix:semicolon
)brace
r_extern
r_int
id|os_seek_file
c_func
(paren
r_int
id|fd
comma
id|__u64
id|offset
)paren
suffix:semicolon
r_extern
r_int
id|os_open_file
c_func
(paren
r_char
op_star
id|file
comma
r_struct
id|openflags
id|flags
comma
r_int
id|mode
)paren
suffix:semicolon
r_extern
r_int
id|os_read_file
c_func
(paren
r_int
id|fd
comma
r_char
op_star
id|buf
comma
r_int
id|len
)paren
suffix:semicolon
r_extern
r_int
id|os_file_size
c_func
(paren
r_char
op_star
id|file
comma
r_int
r_int
op_star
id|size_out
)paren
suffix:semicolon
r_extern
r_int
id|os_pipe
c_func
(paren
r_int
op_star
id|fd
comma
r_int
id|stream
comma
r_int
id|close_on_exec
)paren
suffix:semicolon
r_extern
r_int
id|os_set_fd_async
c_func
(paren
r_int
id|fd
comma
r_int
id|owner
)paren
suffix:semicolon
r_extern
r_int
id|os_set_fd_block
c_func
(paren
r_int
id|fd
comma
r_int
id|blocking
)paren
suffix:semicolon
r_extern
r_int
id|os_accept_connection
c_func
(paren
r_int
id|fd
)paren
suffix:semicolon
r_extern
r_int
id|os_shutdown_socket
c_func
(paren
r_int
id|fd
comma
r_int
id|r
comma
r_int
id|w
)paren
suffix:semicolon
r_extern
r_void
id|os_close_file
c_func
(paren
r_int
id|fd
)paren
suffix:semicolon
r_extern
r_int
id|os_rcv_fd
c_func
(paren
r_int
id|fd
comma
r_int
op_star
id|helper_pid_out
)paren
suffix:semicolon
r_extern
r_int
id|create_unix_socket
c_func
(paren
r_char
op_star
id|file
comma
r_int
id|len
)paren
suffix:semicolon
r_extern
r_int
id|os_connect_socket
c_func
(paren
r_char
op_star
id|name
)paren
suffix:semicolon
r_extern
r_int
id|os_file_type
c_func
(paren
r_char
op_star
id|file
)paren
suffix:semicolon
r_extern
r_int
id|os_file_mode
c_func
(paren
r_char
op_star
id|file
comma
r_struct
id|openflags
op_star
id|mode_out
)paren
suffix:semicolon
r_extern
r_int
id|os_write_file
c_func
(paren
r_int
id|fd
comma
r_char
op_star
id|buf
comma
r_int
id|count
)paren
suffix:semicolon
r_extern
r_int
r_int
id|os_process_pc
c_func
(paren
r_int
id|pid
)paren
suffix:semicolon
r_extern
r_int
id|os_process_parent
c_func
(paren
r_int
id|pid
)paren
suffix:semicolon
r_extern
r_void
id|os_stop_process
c_func
(paren
r_int
id|pid
)paren
suffix:semicolon
r_extern
r_void
id|os_kill_process
c_func
(paren
r_int
id|pid
comma
r_int
id|reap_child
)paren
suffix:semicolon
r_extern
r_void
id|os_usr1_process
c_func
(paren
r_int
id|pid
)paren
suffix:semicolon
r_extern
r_int
id|os_getpid
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|os_map_memory
c_func
(paren
r_void
op_star
id|virt
comma
r_int
id|fd
comma
r_int
r_int
id|off
comma
r_int
r_int
id|len
comma
r_int
id|r
comma
r_int
id|w
comma
r_int
id|x
)paren
suffix:semicolon
r_extern
r_int
id|os_protect_memory
c_func
(paren
r_void
op_star
id|addr
comma
r_int
r_int
id|len
comma
r_int
id|r
comma
r_int
id|w
comma
r_int
id|x
)paren
suffix:semicolon
r_extern
r_int
id|os_unmap_memory
c_func
(paren
r_void
op_star
id|addr
comma
r_int
id|len
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/*&n; * Overrides for Emacs so that we follow Linus&squot;s tabbing style.&n; * Emacs will notice this stuff at the end of the file and automatically&n; * adjust the settings for this buffer only.  This must remain at the end&n; * of the file.&n; * ---------------------------------------------------------------------------&n; * Local variables:&n; * c-file-style: &quot;linux&quot;&n; * End:&n; */
eof
