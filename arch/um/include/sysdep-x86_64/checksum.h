multiline_comment|/*&n; * Licensed under the GPL&n; */
macro_line|#ifndef __UM_SYSDEP_CHECKSUM_H
DECL|macro|__UM_SYSDEP_CHECKSUM_H
mdefine_line|#define __UM_SYSDEP_CHECKSUM_H
macro_line|#include &quot;linux/string.h&quot;
macro_line|#include &quot;linux/in6.h&quot;
macro_line|#include &quot;asm/uaccess.h&quot;
r_extern
r_int
r_int
id|csum_partial_copy_from
c_func
(paren
r_const
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
id|sum
comma
r_int
op_star
id|err_ptr
)paren
suffix:semicolon
r_extern
r_int
id|csum_partial
c_func
(paren
r_const
r_int
r_char
op_star
id|buff
comma
r_int
id|len
comma
r_int
id|sum
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;Note: when you get a NULL pointer exception here this means someone&n; *&t;passed in an incorrect kernel address to one of these functions.&n; *&n; *&t;If you use these functions directly please don&squot;t forget the&n; *&t;verify_area().&n; */
r_static
id|__inline__
DECL|function|csum_partial_copy_nocheck
r_int
r_int
id|csum_partial_copy_nocheck
c_func
(paren
r_const
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
id|sum
)paren
(brace
id|memcpy
c_func
(paren
id|dst
comma
id|src
comma
id|len
)paren
suffix:semicolon
r_return
id|csum_partial
c_func
(paren
id|dst
comma
id|len
comma
id|sum
)paren
suffix:semicolon
)brace
r_static
id|__inline__
DECL|function|csum_partial_copy_from_user
r_int
r_int
id|csum_partial_copy_from_user
c_func
(paren
r_const
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
id|sum
comma
r_int
op_star
id|err_ptr
)paren
(brace
r_return
id|csum_partial_copy_from
c_func
(paren
id|src
comma
id|dst
comma
id|len
comma
id|sum
comma
id|err_ptr
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * csum_fold - Fold and invert a 32bit checksum.&n; * sum: 32bit unfolded sum&n; *&n; * Fold a 32bit running checksum to 16bit and invert it. This is usually&n; * the last step before putting a checksum into a packet.&n; * Make sure not to mix with 64bit checksums.&n; */
DECL|function|csum_fold
r_static
r_inline
r_int
r_int
id|csum_fold
c_func
(paren
r_int
r_int
id|sum
)paren
(brace
id|__asm__
c_func
(paren
l_string|&quot;  addl %1,%0&bslash;n&quot;
l_string|&quot;  adcl $0xffff,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|sum
op_lshift
l_int|16
)paren
comma
l_string|&quot;0&quot;
(paren
id|sum
op_amp
l_int|0xffff0000
)paren
)paren
suffix:semicolon
r_return
(paren
op_complement
id|sum
)paren
op_rshift
l_int|16
suffix:semicolon
)brace
multiline_comment|/**&n; * csum_tcpup_nofold - Compute an IPv4 pseudo header checksum.&n; * @saddr: source address&n; * @daddr: destination address&n; * @len: length of packet&n; * @proto: ip protocol of packet&n; * @sum: initial sum to be added in (32bit unfolded)&n; *&n; * Returns the pseudo header checksum the input data. Result is&n; * 32bit unfolded.&n; */
r_static
r_inline
r_int
r_int
DECL|function|csum_tcpudp_nofold
id|csum_tcpudp_nofold
c_func
(paren
r_int
id|saddr
comma
r_int
id|daddr
comma
r_int
r_int
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
id|asm
c_func
(paren
l_string|&quot;  addl %1, %0&bslash;n&quot;
l_string|&quot;  adcl %2, %0&bslash;n&quot;
l_string|&quot;  adcl %3, %0&bslash;n&quot;
l_string|&quot;  adcl $0, %0&bslash;n&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|daddr
)paren
comma
l_string|&quot;g&quot;
(paren
id|saddr
)paren
comma
l_string|&quot;g&quot;
(paren
(paren
id|ntohs
c_func
(paren
id|len
)paren
op_lshift
l_int|16
)paren
op_plus
id|proto
op_star
l_int|256
)paren
comma
l_string|&quot;0&quot;
(paren
id|sum
)paren
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
multiline_comment|/*&n; * computes the checksum of the TCP/UDP pseudo-header&n; * returns a 16-bit checksum, already complemented&n; */
DECL|function|csum_tcpudp_magic
r_static
r_inline
r_int
r_int
r_int
id|csum_tcpudp_magic
c_func
(paren
r_int
r_int
id|saddr
comma
r_int
r_int
id|daddr
comma
r_int
r_int
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
r_return
id|csum_fold
c_func
(paren
id|csum_tcpudp_nofold
c_func
(paren
id|saddr
comma
id|daddr
comma
id|len
comma
id|proto
comma
id|sum
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * ip_fast_csum - Compute the IPv4 header checksum efficiently.&n; * iph: ipv4 header&n; * ihl: length of header / 4&n; */
DECL|function|ip_fast_csum
r_static
r_inline
r_int
r_int
id|ip_fast_csum
c_func
(paren
r_int
r_char
op_star
id|iph
comma
r_int
r_int
id|ihl
)paren
(brace
r_int
r_int
id|sum
suffix:semicolon
id|asm
c_func
(paren
l_string|&quot;  movl (%1), %0&bslash;n&quot;
l_string|&quot;  subl $4, %2&bslash;n&quot;
l_string|&quot;  jbe 2f&bslash;n&quot;
l_string|&quot;  addl 4(%1), %0&bslash;n&quot;
l_string|&quot;  adcl 8(%1), %0&bslash;n&quot;
l_string|&quot;  adcl 12(%1), %0&bslash;n&quot;
l_string|&quot;1: adcl 16(%1), %0&bslash;n&quot;
l_string|&quot;  lea 4(%1), %1&bslash;n&quot;
l_string|&quot;  decl %2&bslash;n&quot;
l_string|&quot;  jne&t;1b&bslash;n&quot;
l_string|&quot;  adcl $0, %0&bslash;n&quot;
l_string|&quot;  movl %0, %2&bslash;n&quot;
l_string|&quot;  shrl $16, %0&bslash;n&quot;
l_string|&quot;  addw %w2, %w0&bslash;n&quot;
l_string|&quot;  adcl $0, %0&bslash;n&quot;
l_string|&quot;  notl %0&bslash;n&quot;
l_string|&quot;2:&quot;
multiline_comment|/* Since the input registers which are loaded with iph and ipl&n;&t;   are modified, we must also specify them as outputs, or gcc&n;&t;   will assume they contain their original values. */
suffix:colon
l_string|&quot;=r&quot;
(paren
id|sum
)paren
comma
l_string|&quot;=r&quot;
(paren
id|iph
)paren
comma
l_string|&quot;=r&quot;
(paren
id|ihl
)paren
suffix:colon
l_string|&quot;1&quot;
(paren
id|iph
)paren
comma
l_string|&quot;2&quot;
(paren
id|ihl
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
DECL|function|add32_with_carry
r_static
r_inline
r_int
id|add32_with_carry
c_func
(paren
r_int
id|a
comma
r_int
id|b
)paren
(brace
id|asm
c_func
(paren
l_string|&quot;addl %2,%0&bslash;n&bslash;t&quot;
l_string|&quot;adcl $0,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|a
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|a
)paren
comma
l_string|&quot;r&quot;
(paren
id|b
)paren
)paren
suffix:semicolon
r_return
id|a
suffix:semicolon
)brace
macro_line|#endif
multiline_comment|/*&n; * Overrides for Emacs so that we follow Linus&squot;s tabbing style.&n; * Emacs will notice this stuff at the end of the file and automatically&n; * adjust the settings for this buffer only.  This must remain at the end&n; * of the file.&n; * ---------------------------------------------------------------------------&n; * Local variables:&n; * c-file-style: &quot;linux&quot;&n; * End:&n; */
eof
