multiline_comment|/*&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 1991, 1992  Linus Torvalds&n; * Copyright (C) 1994 - 2000  Ralf Baechle&n; * Copyright (C) 1999, 2000 Silicon Graphics, Inc.&n; */
r_static
r_inline
r_int
DECL|function|setup_sigcontext
id|setup_sigcontext
c_func
(paren
r_struct
id|pt_regs
op_star
id|regs
comma
r_struct
id|sigcontext
op_star
id|sc
)paren
(brace
r_int
id|err
op_assign
l_int|0
suffix:semicolon
id|err
op_or_assign
id|__put_user
c_func
(paren
id|regs-&gt;cp0_epc
comma
op_amp
id|sc-&gt;sc_pc
)paren
suffix:semicolon
id|err
op_or_assign
id|__put_user
c_func
(paren
id|regs-&gt;cp0_status
comma
op_amp
id|sc-&gt;sc_status
)paren
suffix:semicolon
DECL|macro|save_gp_reg
mdefine_line|#define save_gp_reg(i) do {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;err |= __put_user(regs-&gt;regs[i], &amp;sc-&gt;sc_regs[i]);&t;&t;&bslash;&n;} while(0)
id|__put_user
c_func
(paren
l_int|0
comma
op_amp
id|sc-&gt;sc_regs
(braket
l_int|0
)braket
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|1
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|2
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|3
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|4
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|5
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|6
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|7
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|8
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|9
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|10
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|11
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|12
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|13
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|14
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|15
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|16
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|17
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|18
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|19
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|20
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|21
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|22
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|23
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|24
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|25
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|26
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|27
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|28
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|29
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|30
)paren
suffix:semicolon
id|save_gp_reg
c_func
(paren
l_int|31
)paren
suffix:semicolon
DECL|macro|save_gp_reg
macro_line|#undef save_gp_reg
id|err
op_or_assign
id|__put_user
c_func
(paren
id|regs-&gt;hi
comma
op_amp
id|sc-&gt;sc_mdhi
)paren
suffix:semicolon
id|err
op_or_assign
id|__put_user
c_func
(paren
id|regs-&gt;lo
comma
op_amp
id|sc-&gt;sc_mdlo
)paren
suffix:semicolon
id|err
op_or_assign
id|__put_user
c_func
(paren
id|regs-&gt;cp0_cause
comma
op_amp
id|sc-&gt;sc_cause
)paren
suffix:semicolon
id|err
op_or_assign
id|__put_user
c_func
(paren
id|regs-&gt;cp0_badvaddr
comma
op_amp
id|sc-&gt;sc_badvaddr
)paren
suffix:semicolon
id|err
op_or_assign
id|__put_user
c_func
(paren
op_logical_neg
op_logical_neg
id|used_math
c_func
(paren
)paren
comma
op_amp
id|sc-&gt;sc_used_math
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|used_math
c_func
(paren
)paren
)paren
r_goto
id|out
suffix:semicolon
multiline_comment|/*&n;&t; * Save FPU state to signal context.  Signal handler will &quot;inherit&quot;&n;&t; * current FPU state.&n;&t; */
id|preempt_disable
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|is_fpu_owner
c_func
(paren
)paren
)paren
(brace
id|own_fpu
c_func
(paren
)paren
suffix:semicolon
id|restore_fp
c_func
(paren
id|current
)paren
suffix:semicolon
)brace
id|err
op_or_assign
id|save_fp_context
c_func
(paren
id|sc
)paren
suffix:semicolon
id|preempt_enable
c_func
(paren
)paren
suffix:semicolon
id|out
suffix:colon
r_return
id|err
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|restore_sigcontext
id|restore_sigcontext
c_func
(paren
r_struct
id|pt_regs
op_star
id|regs
comma
r_struct
id|sigcontext
op_star
id|sc
)paren
(brace
r_int
id|err
op_assign
l_int|0
suffix:semicolon
r_int
r_int
id|used_math
suffix:semicolon
multiline_comment|/* Always make any pending restarted system calls return -EINTR */
id|current_thread_info
c_func
(paren
)paren
op_member_access_from_pointer
id|restart_block.fn
op_assign
id|do_no_restart_syscall
suffix:semicolon
id|err
op_or_assign
id|__get_user
c_func
(paren
id|regs-&gt;cp0_epc
comma
op_amp
id|sc-&gt;sc_pc
)paren
suffix:semicolon
id|err
op_or_assign
id|__get_user
c_func
(paren
id|regs-&gt;hi
comma
op_amp
id|sc-&gt;sc_mdhi
)paren
suffix:semicolon
id|err
op_or_assign
id|__get_user
c_func
(paren
id|regs-&gt;lo
comma
op_amp
id|sc-&gt;sc_mdlo
)paren
suffix:semicolon
DECL|macro|restore_gp_reg
mdefine_line|#define restore_gp_reg(i) do {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;err |= __get_user(regs-&gt;regs[i], &amp;sc-&gt;sc_regs[i]);&t;&t;&bslash;&n;} while(0)
id|restore_gp_reg
c_func
(paren
l_int|1
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|2
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|3
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|4
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|5
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|6
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|7
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|8
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|9
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|10
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|11
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|12
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|13
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|14
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|15
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|16
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|17
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|18
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|19
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|20
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|21
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|22
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|23
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|24
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|25
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|26
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|27
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|28
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|29
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|30
)paren
suffix:semicolon
id|restore_gp_reg
c_func
(paren
l_int|31
)paren
suffix:semicolon
DECL|macro|restore_gp_reg
macro_line|#undef restore_gp_reg
id|err
op_or_assign
id|__get_user
c_func
(paren
id|used_math
comma
op_amp
id|sc-&gt;sc_used_math
)paren
suffix:semicolon
id|conditional_used_math
c_func
(paren
id|used_math
)paren
suffix:semicolon
id|preempt_disable
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|used_math
c_func
(paren
)paren
)paren
(brace
multiline_comment|/* restore fpu context if we have used it before */
id|own_fpu
c_func
(paren
)paren
suffix:semicolon
id|err
op_or_assign
id|restore_fp_context
c_func
(paren
id|sc
)paren
suffix:semicolon
)brace
r_else
(brace
multiline_comment|/* signal handler may have used FPU.  Give it up. */
id|lose_fpu
c_func
(paren
)paren
suffix:semicolon
)brace
id|preempt_enable
c_func
(paren
)paren
suffix:semicolon
r_return
id|err
suffix:semicolon
)brace
multiline_comment|/*&n; * Determine which stack to use..&n; */
r_static
r_inline
r_void
op_star
DECL|function|get_sigframe
id|get_sigframe
c_func
(paren
r_struct
id|k_sigaction
op_star
id|ka
comma
r_struct
id|pt_regs
op_star
id|regs
comma
r_int
id|frame_size
)paren
(brace
r_int
r_int
id|sp
comma
id|almask
suffix:semicolon
multiline_comment|/* Default to using normal stack */
id|sp
op_assign
id|regs-&gt;regs
(braket
l_int|29
)braket
suffix:semicolon
multiline_comment|/*&n; &t; * FPU emulator may have it&squot;s own trampoline active just&n; &t; * above the user stack, 16-bytes before the next lowest&n; &t; * 16 byte boundary.  Try to avoid trashing it.&n; &t; */
id|sp
op_sub_assign
l_int|32
suffix:semicolon
multiline_comment|/* This is the X/Open sanctioned signal stack switching.  */
r_if
c_cond
(paren
(paren
id|ka-&gt;sa.sa_flags
op_amp
id|SA_ONSTACK
)paren
op_logical_and
(paren
id|sas_ss_flags
(paren
id|sp
)paren
op_eq
l_int|0
)paren
)paren
id|sp
op_assign
id|current-&gt;sas_ss_sp
op_plus
id|current-&gt;sas_ss_size
suffix:semicolon
r_if
c_cond
(paren
id|PLAT_TRAMPOLINE_STUFF_LINE
)paren
id|almask
op_assign
op_complement
(paren
id|PLAT_TRAMPOLINE_STUFF_LINE
op_minus
l_int|1
)paren
suffix:semicolon
r_else
id|almask
op_assign
id|ALMASK
suffix:semicolon
r_return
(paren
r_void
op_star
)paren
(paren
(paren
id|sp
op_minus
id|frame_size
)paren
op_amp
id|almask
)paren
suffix:semicolon
)brace
eof
