multiline_comment|/*&n; * IEEE754 floating point&n; * double precision internal header file&n; */
multiline_comment|/*&n; * MIPS floating point support&n; * Copyright (C) 1994-2000 Algorithmics Ltd.  All rights reserved.&n; * http://www.algor.co.uk&n; *&n; * ########################################################################&n; *&n; *  This program is free software; you can distribute it and/or modify it&n; *  under the terms of the GNU General Public License (Version 2) as&n; *  published by the Free Software Foundation.&n; *&n; *  This program is distributed in the hope it will be useful, but WITHOUT&n; *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or&n; *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License&n; *  for more details.&n; *&n; *  You should have received a copy of the GNU General Public License along&n; *  with this program; if not, write to the Free Software Foundation, Inc.,&n; *  59 Temple Place - Suite 330, Boston MA 02111-1307, USA.&n; *&n; * ########################################################################&n; */
macro_line|#include &quot;ieee754int.h&quot;
DECL|macro|assert
mdefine_line|#define assert(expr) ((void)0)
multiline_comment|/* 3bit extended double precision sticky right shift */
DECL|macro|XDPSRS
mdefine_line|#define XDPSRS(v,rs)&t;&bslash;&n;  ((rs &gt; (DP_MBITS+3))?1:((v) &gt;&gt; (rs)) | ((v) &lt;&lt; (64-(rs)) != 0))
DECL|macro|XDPSRSX1
mdefine_line|#define XDPSRSX1() &bslash;&n;  (xe++, (xm = (xm &gt;&gt; 1) | (xm &amp; 1)))
DECL|macro|XDPSRS1
mdefine_line|#define XDPSRS1(v)&t;&bslash;&n;  (((v) &gt;&gt; 1) | ((v) &amp; 1))
multiline_comment|/* convert denormal to normalized with extended exponent */
DECL|macro|DPDNORMx
mdefine_line|#define DPDNORMx(m,e) &bslash;&n;  while( (m &gt;&gt; DP_MBITS) == 0) { m &lt;&lt;= 1; e--; }
DECL|macro|DPDNORMX
mdefine_line|#define DPDNORMX&t;DPDNORMx(xm,xe)
DECL|macro|DPDNORMY
mdefine_line|#define DPDNORMY&t;DPDNORMx(ym,ye)
DECL|function|builddp
r_static
id|__inline
id|ieee754dp
id|builddp
c_func
(paren
r_int
id|s
comma
r_int
id|bx
comma
id|u64
id|m
)paren
(brace
id|ieee754dp
id|r
suffix:semicolon
m_assert
(paren
(paren
id|s
)paren
op_eq
l_int|0
op_logical_or
(paren
id|s
)paren
op_eq
l_int|1
)paren
suffix:semicolon
m_assert
(paren
(paren
id|bx
)paren
op_ge
id|DP_EMIN
op_minus
l_int|1
op_plus
id|DP_EBIAS
op_logical_and
(paren
id|bx
)paren
op_le
id|DP_EMAX
op_plus
l_int|1
op_plus
id|DP_EBIAS
)paren
suffix:semicolon
m_assert
(paren
(paren
(paren
id|m
)paren
op_rshift
id|DP_MBITS
)paren
op_eq
l_int|0
)paren
suffix:semicolon
id|r.parts.sign
op_assign
id|s
suffix:semicolon
id|r.parts.bexp
op_assign
id|bx
suffix:semicolon
id|r.parts.mant
op_assign
id|m
suffix:semicolon
r_return
id|r
suffix:semicolon
)brace
r_extern
r_int
id|ieee754dp_isnan
c_func
(paren
id|ieee754dp
)paren
suffix:semicolon
r_extern
r_int
id|ieee754dp_issnan
c_func
(paren
id|ieee754dp
)paren
suffix:semicolon
r_extern
r_int
id|ieee754si_xcpt
c_func
(paren
r_int
comma
r_const
r_char
op_star
comma
dot
dot
dot
)paren
suffix:semicolon
r_extern
id|s64
id|ieee754di_xcpt
c_func
(paren
id|s64
comma
r_const
r_char
op_star
comma
dot
dot
dot
)paren
suffix:semicolon
r_extern
id|ieee754dp
id|ieee754dp_xcpt
c_func
(paren
id|ieee754dp
comma
r_const
r_char
op_star
comma
dot
dot
dot
)paren
suffix:semicolon
r_extern
id|ieee754dp
id|ieee754dp_nanxcpt
c_func
(paren
id|ieee754dp
comma
r_const
r_char
op_star
comma
dot
dot
dot
)paren
suffix:semicolon
r_extern
id|ieee754dp
id|ieee754dp_bestnan
c_func
(paren
id|ieee754dp
comma
id|ieee754dp
)paren
suffix:semicolon
r_extern
id|ieee754dp
id|ieee754dp_format
c_func
(paren
r_int
comma
r_int
comma
id|u64
)paren
suffix:semicolon
DECL|macro|DPNORMRET2
mdefine_line|#define DPNORMRET2(s,e,m,name,a0,a1) &bslash;&n;{ &bslash;&n;    ieee754dp V = ieee754dp_format(s,e,m); &bslash;&n;    if(TSTX()) &bslash;&n;      return ieee754dp_xcpt(V,name,a0,a1); &bslash;&n;    else &bslash;&n;      return V; &bslash;&n;}
DECL|macro|DPNORMRET1
mdefine_line|#define DPNORMRET1(s,e,m,name,a0)  DPNORMRET2(s,e,m,name,a0,a0)
eof
