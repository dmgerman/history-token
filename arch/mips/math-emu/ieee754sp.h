multiline_comment|/* &n; * IEEE754 floating point&n; * double precision internal header file&n; */
multiline_comment|/*&n; * MIPS floating point support&n; * Copyright (C) 1994-2000 Algorithmics Ltd.  All rights reserved.&n; * http://www.algor.co.uk&n; *&n; * ########################################################################&n; *&n; *  This program is free software; you can distribute it and/or modify it&n; *  under the terms of the GNU General Public License (Version 2) as&n; *  published by the Free Software Foundation.&n; *&n; *  This program is distributed in the hope it will be useful, but WITHOUT&n; *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or&n; *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License&n; *  for more details.&n; *&n; *  You should have received a copy of the GNU General Public License along&n; *  with this program; if not, write to the Free Software Foundation, Inc.,&n; *  59 Temple Place - Suite 330, Boston MA 02111-1307, USA.&n; *&n; * ########################################################################&n; */
macro_line|#include &quot;ieee754int.h&quot;
DECL|macro|assert
mdefine_line|#define assert(expr) ((void)0)
multiline_comment|/* 3bit extended single precision sticky right shift */
DECL|macro|SPXSRSXn
mdefine_line|#define SPXSRSXn(rs) &bslash;&n;  (xe += rs, &bslash;&n;   xm = (rs &gt; (SP_MBITS+3))?1:((xm) &gt;&gt; (rs)) | ((xm) &lt;&lt; (32-(rs)) != 0))
DECL|macro|SPXSRSX1
mdefine_line|#define SPXSRSX1() &bslash;&n;  (xe++, (xm = (xm &gt;&gt; 1) | (xm &amp; 1)))
DECL|macro|SPXSRSYn
mdefine_line|#define SPXSRSYn(rs) &bslash;&n;   (ye+=rs, &bslash;&n;    ym = (rs &gt; (SP_MBITS+3))?1:((ym) &gt;&gt; (rs)) | ((ym) &lt;&lt; (32-(rs)) != 0))
DECL|macro|SPXSRSY1
mdefine_line|#define SPXSRSY1() &bslash;&n;   (ye++, (ym = (ym &gt;&gt; 1) | (ym &amp; 1)))
multiline_comment|/* convert denormal to normalized with extended exponent */
DECL|macro|SPDNORMx
mdefine_line|#define SPDNORMx(m,e) &bslash;&n;  while( (m &gt;&gt; SP_MBITS) == 0) { m &lt;&lt;= 1; e--; }
DECL|macro|SPDNORMX
mdefine_line|#define SPDNORMX&t;SPDNORMx(xm,xe)
DECL|macro|SPDNORMY
mdefine_line|#define SPDNORMY&t;SPDNORMx(ym,ye)
DECL|function|buildsp
r_static
id|__inline
id|ieee754sp
id|buildsp
c_func
(paren
r_int
id|s
comma
r_int
id|bx
comma
r_int
id|m
)paren
(brace
id|ieee754sp
id|r
suffix:semicolon
m_assert
(paren
(paren
id|s
)paren
op_eq
l_int|0
op_logical_or
(paren
id|s
)paren
op_eq
l_int|1
)paren
suffix:semicolon
m_assert
(paren
(paren
id|bx
)paren
op_ge
id|SP_EMIN
op_minus
l_int|1
op_plus
id|SP_EBIAS
op_logical_and
(paren
id|bx
)paren
op_le
id|SP_EMAX
op_plus
l_int|1
op_plus
id|SP_EBIAS
)paren
suffix:semicolon
m_assert
(paren
(paren
(paren
id|m
)paren
op_rshift
id|SP_MBITS
)paren
op_eq
l_int|0
)paren
suffix:semicolon
id|r.parts.sign
op_assign
id|s
suffix:semicolon
id|r.parts.bexp
op_assign
id|bx
suffix:semicolon
id|r.parts.mant
op_assign
id|m
suffix:semicolon
r_return
id|r
suffix:semicolon
)brace
r_extern
r_int
id|ieee754sp_isnan
c_func
(paren
id|ieee754sp
)paren
suffix:semicolon
r_extern
r_int
id|ieee754sp_issnan
c_func
(paren
id|ieee754sp
)paren
suffix:semicolon
r_extern
r_int
id|ieee754si_xcpt
c_func
(paren
r_int
comma
r_const
r_char
op_star
comma
dot
dot
dot
)paren
suffix:semicolon
r_extern
r_int
r_int
id|ieee754di_xcpt
c_func
(paren
r_int
r_int
comma
r_const
r_char
op_star
comma
dot
dot
dot
)paren
suffix:semicolon
r_extern
id|ieee754sp
id|ieee754sp_xcpt
c_func
(paren
id|ieee754sp
comma
r_const
r_char
op_star
comma
dot
dot
dot
)paren
suffix:semicolon
r_extern
id|ieee754sp
id|ieee754sp_nanxcpt
c_func
(paren
id|ieee754sp
comma
r_const
r_char
op_star
comma
dot
dot
dot
)paren
suffix:semicolon
r_extern
id|ieee754sp
id|ieee754sp_bestnan
c_func
(paren
id|ieee754sp
comma
id|ieee754sp
)paren
suffix:semicolon
r_extern
id|ieee754sp
id|ieee754sp_format
c_func
(paren
r_int
comma
r_int
comma
r_int
)paren
suffix:semicolon
DECL|macro|SPNORMRET2
mdefine_line|#define SPNORMRET2(s,e,m,name,a0,a1) &bslash;&n;{ &bslash;&n;    ieee754sp V = ieee754sp_format(s,e,m); &bslash;&n;    if(TSTX()) &bslash;&n;      return ieee754sp_xcpt(V,name,a0,a1); &bslash;&n;    else &bslash;&n;      return V; &bslash;&n;}
DECL|macro|SPNORMRET1
mdefine_line|#define SPNORMRET1(s,e,m,name,a0)  SPNORMRET2(s,e,m,name,a0,a0)
eof
