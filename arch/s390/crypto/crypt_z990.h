multiline_comment|/*&n; * Cryptographic API.&n; *&n; * Support for z990 cryptographic instructions.&n; *&n; *   Copyright (C) 2003 IBM Deutschland GmbH, IBM Corporation&n; *   Author(s): Thomas Spatzier (tspat@de.ibm.com)&n; *&n; * This program is free software; you can redistribute it and/or modify it&n; * under the terms of the GNU General Public License as published by the Free&n; * Software Foundation; either version 2 of the License, or (at your option)&n; * any later version.&n; *&n; */
macro_line|#ifndef _CRYPTO_ARCH_S390_CRYPT_Z990_H
DECL|macro|_CRYPTO_ARCH_S390_CRYPT_Z990_H
mdefine_line|#define _CRYPTO_ARCH_S390_CRYPT_Z990_H
macro_line|#include &lt;asm/errno.h&gt;
DECL|macro|CRYPT_Z990_OP_MASK
mdefine_line|#define CRYPT_Z990_OP_MASK 0xFF00
DECL|macro|CRYPT_Z990_FUNC_MASK
mdefine_line|#define CRYPT_Z990_FUNC_MASK 0x00FF
multiline_comment|/*z990 cryptographic operations*/
DECL|enum|crypt_z990_operations
r_enum
id|crypt_z990_operations
(brace
DECL|enumerator|CRYPT_Z990_KM
id|CRYPT_Z990_KM
op_assign
l_int|0x0100
comma
DECL|enumerator|CRYPT_Z990_KMC
id|CRYPT_Z990_KMC
op_assign
l_int|0x0200
comma
DECL|enumerator|CRYPT_Z990_KIMD
id|CRYPT_Z990_KIMD
op_assign
l_int|0x0300
comma
DECL|enumerator|CRYPT_Z990_KLMD
id|CRYPT_Z990_KLMD
op_assign
l_int|0x0400
comma
DECL|enumerator|CRYPT_Z990_KMAC
id|CRYPT_Z990_KMAC
op_assign
l_int|0x0500
)brace
suffix:semicolon
multiline_comment|/*function codes for KM (CIPHER MESSAGE) instruction*/
DECL|enum|crypt_z990_km_func
r_enum
id|crypt_z990_km_func
(brace
DECL|enumerator|KM_QUERY
id|KM_QUERY
op_assign
id|CRYPT_Z990_KM
op_or
l_int|0
comma
DECL|enumerator|KM_DEA_ENCRYPT
id|KM_DEA_ENCRYPT
op_assign
id|CRYPT_Z990_KM
op_or
l_int|1
comma
DECL|enumerator|KM_DEA_DECRYPT
id|KM_DEA_DECRYPT
op_assign
id|CRYPT_Z990_KM
op_or
l_int|1
op_or
l_int|0x80
comma
singleline_comment|//modifier bit-&gt;decipher
DECL|enumerator|KM_TDEA_128_ENCRYPT
id|KM_TDEA_128_ENCRYPT
op_assign
id|CRYPT_Z990_KM
op_or
l_int|2
comma
DECL|enumerator|KM_TDEA_128_DECRYPT
id|KM_TDEA_128_DECRYPT
op_assign
id|CRYPT_Z990_KM
op_or
l_int|2
op_or
l_int|0x80
comma
DECL|enumerator|KM_TDEA_192_ENCRYPT
id|KM_TDEA_192_ENCRYPT
op_assign
id|CRYPT_Z990_KM
op_or
l_int|3
comma
DECL|enumerator|KM_TDEA_192_DECRYPT
id|KM_TDEA_192_DECRYPT
op_assign
id|CRYPT_Z990_KM
op_or
l_int|3
op_or
l_int|0x80
comma
)brace
suffix:semicolon
multiline_comment|/*function codes for KMC (CIPHER MESSAGE WITH CHAINING) instruction*/
DECL|enum|crypt_z990_kmc_func
r_enum
id|crypt_z990_kmc_func
(brace
DECL|enumerator|KMC_QUERY
id|KMC_QUERY
op_assign
id|CRYPT_Z990_KMC
op_or
l_int|0
comma
DECL|enumerator|KMC_DEA_ENCRYPT
id|KMC_DEA_ENCRYPT
op_assign
id|CRYPT_Z990_KMC
op_or
l_int|1
comma
DECL|enumerator|KMC_DEA_DECRYPT
id|KMC_DEA_DECRYPT
op_assign
id|CRYPT_Z990_KMC
op_or
l_int|1
op_or
l_int|0x80
comma
singleline_comment|//modifier bit-&gt;decipher
DECL|enumerator|KMC_TDEA_128_ENCRYPT
id|KMC_TDEA_128_ENCRYPT
op_assign
id|CRYPT_Z990_KMC
op_or
l_int|2
comma
DECL|enumerator|KMC_TDEA_128_DECRYPT
id|KMC_TDEA_128_DECRYPT
op_assign
id|CRYPT_Z990_KMC
op_or
l_int|2
op_or
l_int|0x80
comma
DECL|enumerator|KMC_TDEA_192_ENCRYPT
id|KMC_TDEA_192_ENCRYPT
op_assign
id|CRYPT_Z990_KMC
op_or
l_int|3
comma
DECL|enumerator|KMC_TDEA_192_DECRYPT
id|KMC_TDEA_192_DECRYPT
op_assign
id|CRYPT_Z990_KMC
op_or
l_int|3
op_or
l_int|0x80
comma
)brace
suffix:semicolon
multiline_comment|/*function codes for KIMD (COMPUTE INTERMEDIATE MESSAGE DIGEST) instruction*/
DECL|enum|crypt_z990_kimd_func
r_enum
id|crypt_z990_kimd_func
(brace
DECL|enumerator|KIMD_QUERY
id|KIMD_QUERY
op_assign
id|CRYPT_Z990_KIMD
op_or
l_int|0
comma
DECL|enumerator|KIMD_SHA_1
id|KIMD_SHA_1
op_assign
id|CRYPT_Z990_KIMD
op_or
l_int|1
comma
)brace
suffix:semicolon
multiline_comment|/*function codes for KLMD (COMPUTE LAST MESSAGE DIGEST) instruction*/
DECL|enum|crypt_z990_klmd_func
r_enum
id|crypt_z990_klmd_func
(brace
DECL|enumerator|KLMD_QUERY
id|KLMD_QUERY
op_assign
id|CRYPT_Z990_KLMD
op_or
l_int|0
comma
DECL|enumerator|KLMD_SHA_1
id|KLMD_SHA_1
op_assign
id|CRYPT_Z990_KLMD
op_or
l_int|1
comma
)brace
suffix:semicolon
multiline_comment|/*function codes for KMAC (COMPUTE MESSAGE AUTHENTICATION CODE) instruction*/
DECL|enum|crypt_z990_kmac_func
r_enum
id|crypt_z990_kmac_func
(brace
DECL|enumerator|KMAC_QUERY
id|KMAC_QUERY
op_assign
id|CRYPT_Z990_KMAC
op_or
l_int|0
comma
DECL|enumerator|KMAC_DEA
id|KMAC_DEA
op_assign
id|CRYPT_Z990_KMAC
op_or
l_int|1
comma
DECL|enumerator|KMAC_TDEA_128
id|KMAC_TDEA_128
op_assign
id|CRYPT_Z990_KMAC
op_or
l_int|2
comma
DECL|enumerator|KMAC_TDEA_192
id|KMAC_TDEA_192
op_assign
id|CRYPT_Z990_KMAC
op_or
l_int|3
)brace
suffix:semicolon
multiline_comment|/*status word for z990 crypto instructions&squot; QUERY functions*/
DECL|struct|crypt_z990_query_status
r_struct
id|crypt_z990_query_status
(brace
DECL|member|high
id|u64
id|high
suffix:semicolon
DECL|member|low
id|u64
id|low
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * Standard fixup and ex_table sections for crypt_z990 inline functions.&n; * label 0: the z990 crypto operation&n; * label 1: just after 1 to catch illegal operation exception on non-z990&n; * label 6: the return point after fixup&n; * label 7: set error value if exception _in_ crypto operation&n; * label 8: set error value if illegal operation exception&n; * [ret] is the variable to receive the error code&n; * [ERR] is the error code value&n; */
macro_line|#ifndef __s390x__
DECL|macro|__crypt_z990_fixup
mdefine_line|#define __crypt_z990_fixup &bslash;&n;&t;&quot;.section .fixup,&bslash;&quot;ax&bslash;&quot; &bslash;n&quot;&t;&bslash;&n;&t;&quot;7:&t;lhi&t;%0,%h[e1] &bslash;n&quot;&t;&bslash;&n;&t;&quot;&t;bras&t;1,9f &bslash;n&quot;&t;&bslash;&n;&t;&quot;&t;.long&t;6b &bslash;n&quot;&t;&t;&bslash;&n;&t;&quot;8:&t;lhi&t;%0,%h[e2] &bslash;n&quot;&t;&bslash;&n;&t;&quot;&t;bras&t;1,9f &bslash;n&quot;&t;&bslash;&n;&t;&quot;&t;.long&t;6b &bslash;n&quot;&t;&t;&bslash;&n;&t;&quot;9:&t;l&t;1,0(1) &bslash;n&quot;&t;&bslash;&n;&t;&quot;&t;br&t;1 &bslash;n&quot;&t;&t;&bslash;&n;&t;&quot;.previous &bslash;n&quot;&t;&t;&t;&bslash;&n;&t;&quot;.section __ex_table,&bslash;&quot;a&bslash;&quot; &bslash;n&quot;&t;&bslash;&n;&t;&quot;&t;.align&t;4 &bslash;n&quot;&t;&t;&bslash;&n;&t;&quot;&t;.long&t;0b,7b &bslash;n&quot;&t;&bslash;&n;&t;&quot;&t;.long&t;1b,8b &bslash;n&quot;&t;&bslash;&n;&t;&quot;.previous&quot;
macro_line|#else /* __s390x__ */
DECL|macro|__crypt_z990_fixup
mdefine_line|#define __crypt_z990_fixup &bslash;&n;&t;&quot;.section .fixup,&bslash;&quot;ax&bslash;&quot; &bslash;n&quot;&t;&bslash;&n;&t;&quot;7:&t;lhi&t;%0,%h[e1] &bslash;n&quot;&t;&bslash;&n;&t;&quot;&t;jg&t;6b &bslash;n&quot;&t;&t;&bslash;&n;&t;&quot;8:&t;lhi&t;%0,%h[e2] &bslash;n&quot;&t;&bslash;&n;&t;&quot;&t;jg&t;6b &bslash;n&quot;&t;&t;&bslash;&n;&t;&quot;.previous&bslash;n&quot;&t;&t;&t;&bslash;&n;&t;&quot;.section __ex_table,&bslash;&quot;a&bslash;&quot; &bslash;n&quot;&t;&bslash;&n;&t;&quot;&t;.align&t;8 &bslash;n&quot;&t;&t;&bslash;&n;&t;&quot;&t;.quad&t;0b,7b &bslash;n&quot;&t;&bslash;&n;&t;&quot;&t;.quad&t;1b,8b &bslash;n&quot;&t;&bslash;&n;&t;&quot;.previous&quot;
macro_line|#endif /* __s390x__ */
multiline_comment|/*&n; * Standard code for setting the result of z990 crypto instructions.&n; * %0: the register which will receive the result&n; * [result]: the register containing the result (e.g. second operand length&n; * to compute number of processed bytes].&n; */
macro_line|#ifndef __s390x__
DECL|macro|__crypt_z990_set_result
mdefine_line|#define __crypt_z990_set_result &bslash;&n;&t;&quot;&t;lr&t;%0,%[result] &bslash;n&quot;
macro_line|#else /* __s390x__ */
DECL|macro|__crypt_z990_set_result
mdefine_line|#define __crypt_z990_set_result &bslash;&n;&t;&quot;&t;lgr&t;%0,%[result] &bslash;n&quot;
macro_line|#endif
multiline_comment|/*&n; * Executes the KM (CIPHER MESSAGE) operation of the z990 CPU.&n; * @param func: the function code passed to KM; see crypt_z990_km_func&n; * @param param: address of parameter block; see POP for details on each func&n; * @param dest: address of destination memory area&n; * @param src: address of source memory area&n; * @param src_len: length of src operand in bytes&n; * @returns &lt; zero for failure, 0 for the query func, number of processed bytes&n; * &t;for encryption/decryption funcs&n; */
r_static
r_inline
r_int
DECL|function|crypt_z990_km
id|crypt_z990_km
c_func
(paren
r_int
id|func
comma
r_void
op_star
id|param
comma
id|u8
op_star
id|dest
comma
r_const
id|u8
op_star
id|src
comma
r_int
id|src_len
)paren
(brace
r_register
r_int
id|__func
id|asm
c_func
(paren
l_string|&quot;0&quot;
)paren
op_assign
id|func
op_amp
id|CRYPT_Z990_FUNC_MASK
suffix:semicolon
r_register
r_void
op_star
id|__param
id|asm
c_func
(paren
l_string|&quot;1&quot;
)paren
op_assign
id|param
suffix:semicolon
r_register
id|u8
op_star
id|__dest
id|asm
c_func
(paren
l_string|&quot;4&quot;
)paren
op_assign
id|dest
suffix:semicolon
r_register
r_const
id|u8
op_star
id|__src
id|asm
c_func
(paren
l_string|&quot;2&quot;
)paren
op_assign
id|src
suffix:semicolon
r_register
r_int
id|__src_len
id|asm
c_func
(paren
l_string|&quot;3&quot;
)paren
op_assign
id|src_len
suffix:semicolon
r_int
id|ret
suffix:semicolon
id|ret
op_assign
l_int|0
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;0:&t;.insn&t;rre,0xB92E0000,%1,%2 &bslash;n&quot;
singleline_comment|//KM opcode
l_string|&quot;1:&t;brc&t;1,0b &bslash;n&quot;
singleline_comment|//handle partial completion
id|__crypt_z990_set_result
l_string|&quot;6:&t;&bslash;n&quot;
id|__crypt_z990_fixup
suffix:colon
l_string|&quot;+d&quot;
(paren
id|ret
)paren
comma
l_string|&quot;+a&quot;
(paren
id|__dest
)paren
comma
l_string|&quot;+a&quot;
(paren
id|__src
)paren
comma
(braket
id|result
)braket
l_string|&quot;+d&quot;
(paren
id|__src_len
)paren
suffix:colon
(braket
id|e1
)braket
l_string|&quot;K&quot;
(paren
op_minus
id|EFAULT
)paren
comma
(braket
id|e2
)braket
l_string|&quot;K&quot;
(paren
op_minus
id|ENOSYS
)paren
comma
l_string|&quot;d&quot;
(paren
id|__func
)paren
comma
l_string|&quot;a&quot;
(paren
id|__param
)paren
suffix:colon
l_string|&quot;cc&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ret
op_ge
l_int|0
op_logical_and
id|func
op_amp
id|CRYPT_Z990_FUNC_MASK
)paren
(brace
id|ret
op_assign
id|src_len
op_minus
id|ret
suffix:semicolon
)brace
r_return
id|ret
suffix:semicolon
)brace
multiline_comment|/*&n; * Executes the KMC (CIPHER MESSAGE WITH CHAINING) operation of the z990 CPU.&n; * @param func: the function code passed to KM; see crypt_z990_kmc_func&n; * @param param: address of parameter block; see POP for details on each func&n; * @param dest: address of destination memory area&n; * @param src: address of source memory area&n; * @param src_len: length of src operand in bytes&n; * @returns &lt; zero for failure, 0 for the query func, number of processed bytes&n; * &t;for encryption/decryption funcs&n; */
r_static
r_inline
r_int
DECL|function|crypt_z990_kmc
id|crypt_z990_kmc
c_func
(paren
r_int
id|func
comma
r_void
op_star
id|param
comma
id|u8
op_star
id|dest
comma
r_const
id|u8
op_star
id|src
comma
r_int
id|src_len
)paren
(brace
r_register
r_int
id|__func
id|asm
c_func
(paren
l_string|&quot;0&quot;
)paren
op_assign
id|func
op_amp
id|CRYPT_Z990_FUNC_MASK
suffix:semicolon
r_register
r_void
op_star
id|__param
id|asm
c_func
(paren
l_string|&quot;1&quot;
)paren
op_assign
id|param
suffix:semicolon
r_register
id|u8
op_star
id|__dest
id|asm
c_func
(paren
l_string|&quot;4&quot;
)paren
op_assign
id|dest
suffix:semicolon
r_register
r_const
id|u8
op_star
id|__src
id|asm
c_func
(paren
l_string|&quot;2&quot;
)paren
op_assign
id|src
suffix:semicolon
r_register
r_int
id|__src_len
id|asm
c_func
(paren
l_string|&quot;3&quot;
)paren
op_assign
id|src_len
suffix:semicolon
r_int
id|ret
suffix:semicolon
id|ret
op_assign
l_int|0
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;0:&t;.insn&t;rre,0xB92F0000,%1,%2 &bslash;n&quot;
singleline_comment|//KMC opcode
l_string|&quot;1:&t;brc&t;1,0b &bslash;n&quot;
singleline_comment|//handle partial completion
id|__crypt_z990_set_result
l_string|&quot;6:&t;&bslash;n&quot;
id|__crypt_z990_fixup
suffix:colon
l_string|&quot;+d&quot;
(paren
id|ret
)paren
comma
l_string|&quot;+a&quot;
(paren
id|__dest
)paren
comma
l_string|&quot;+a&quot;
(paren
id|__src
)paren
comma
(braket
id|result
)braket
l_string|&quot;+d&quot;
(paren
id|__src_len
)paren
suffix:colon
(braket
id|e1
)braket
l_string|&quot;K&quot;
(paren
op_minus
id|EFAULT
)paren
comma
(braket
id|e2
)braket
l_string|&quot;K&quot;
(paren
op_minus
id|ENOSYS
)paren
comma
l_string|&quot;d&quot;
(paren
id|__func
)paren
comma
l_string|&quot;a&quot;
(paren
id|__param
)paren
suffix:colon
l_string|&quot;cc&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ret
op_ge
l_int|0
op_logical_and
id|func
op_amp
id|CRYPT_Z990_FUNC_MASK
)paren
(brace
id|ret
op_assign
id|src_len
op_minus
id|ret
suffix:semicolon
)brace
r_return
id|ret
suffix:semicolon
)brace
multiline_comment|/*&n; * Executes the KIMD (COMPUTE INTERMEDIATE MESSAGE DIGEST) operation&n; * of the z990 CPU.&n; * @param func: the function code passed to KM; see crypt_z990_kimd_func&n; * @param param: address of parameter block; see POP for details on each func&n; * @param src: address of source memory area&n; * @param src_len: length of src operand in bytes&n; * @returns &lt; zero for failure, 0 for the query func, number of processed bytes&n; * &t;for digest funcs&n; */
r_static
r_inline
r_int
DECL|function|crypt_z990_kimd
id|crypt_z990_kimd
c_func
(paren
r_int
id|func
comma
r_void
op_star
id|param
comma
r_const
id|u8
op_star
id|src
comma
r_int
id|src_len
)paren
(brace
r_register
r_int
id|__func
id|asm
c_func
(paren
l_string|&quot;0&quot;
)paren
op_assign
id|func
op_amp
id|CRYPT_Z990_FUNC_MASK
suffix:semicolon
r_register
r_void
op_star
id|__param
id|asm
c_func
(paren
l_string|&quot;1&quot;
)paren
op_assign
id|param
suffix:semicolon
r_register
r_const
id|u8
op_star
id|__src
id|asm
c_func
(paren
l_string|&quot;2&quot;
)paren
op_assign
id|src
suffix:semicolon
r_register
r_int
id|__src_len
id|asm
c_func
(paren
l_string|&quot;3&quot;
)paren
op_assign
id|src_len
suffix:semicolon
r_int
id|ret
suffix:semicolon
id|ret
op_assign
l_int|0
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;0:&t;.insn&t;rre,0xB93E0000,%1,%1 &bslash;n&quot;
singleline_comment|//KIMD opcode
l_string|&quot;1:&t;brc&t;1,0b &bslash;n&quot;
multiline_comment|/*handle partical completion of kimd*/
id|__crypt_z990_set_result
l_string|&quot;6:&t;&bslash;n&quot;
id|__crypt_z990_fixup
suffix:colon
l_string|&quot;+d&quot;
(paren
id|ret
)paren
comma
l_string|&quot;+a&quot;
(paren
id|__src
)paren
comma
(braket
id|result
)braket
l_string|&quot;+d&quot;
(paren
id|__src_len
)paren
suffix:colon
(braket
id|e1
)braket
l_string|&quot;K&quot;
(paren
op_minus
id|EFAULT
)paren
comma
(braket
id|e2
)braket
l_string|&quot;K&quot;
(paren
op_minus
id|ENOSYS
)paren
comma
l_string|&quot;d&quot;
(paren
id|__func
)paren
comma
l_string|&quot;a&quot;
(paren
id|__param
)paren
suffix:colon
l_string|&quot;cc&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ret
op_ge
l_int|0
op_logical_and
(paren
id|func
op_amp
id|CRYPT_Z990_FUNC_MASK
)paren
)paren
(brace
id|ret
op_assign
id|src_len
op_minus
id|ret
suffix:semicolon
)brace
r_return
id|ret
suffix:semicolon
)brace
multiline_comment|/*&n; * Executes the KLMD (COMPUTE LAST MESSAGE DIGEST) operation of the z990 CPU.&n; * @param func: the function code passed to KM; see crypt_z990_klmd_func&n; * @param param: address of parameter block; see POP for details on each func&n; * @param src: address of source memory area&n; * @param src_len: length of src operand in bytes&n; * @returns &lt; zero for failure, 0 for the query func, number of processed bytes&n; * &t;for digest funcs&n; */
r_static
r_inline
r_int
DECL|function|crypt_z990_klmd
id|crypt_z990_klmd
c_func
(paren
r_int
id|func
comma
r_void
op_star
id|param
comma
r_const
id|u8
op_star
id|src
comma
r_int
id|src_len
)paren
(brace
r_register
r_int
id|__func
id|asm
c_func
(paren
l_string|&quot;0&quot;
)paren
op_assign
id|func
op_amp
id|CRYPT_Z990_FUNC_MASK
suffix:semicolon
r_register
r_void
op_star
id|__param
id|asm
c_func
(paren
l_string|&quot;1&quot;
)paren
op_assign
id|param
suffix:semicolon
r_register
r_const
id|u8
op_star
id|__src
id|asm
c_func
(paren
l_string|&quot;2&quot;
)paren
op_assign
id|src
suffix:semicolon
r_register
r_int
id|__src_len
id|asm
c_func
(paren
l_string|&quot;3&quot;
)paren
op_assign
id|src_len
suffix:semicolon
r_int
id|ret
suffix:semicolon
id|ret
op_assign
l_int|0
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;0:&t;.insn&t;rre,0xB93F0000,%1,%1 &bslash;n&quot;
singleline_comment|//KLMD opcode
l_string|&quot;1:&t;brc&t;1,0b &bslash;n&quot;
multiline_comment|/*handle partical completion of klmd*/
id|__crypt_z990_set_result
l_string|&quot;6:&t;&bslash;n&quot;
id|__crypt_z990_fixup
suffix:colon
l_string|&quot;+d&quot;
(paren
id|ret
)paren
comma
l_string|&quot;+a&quot;
(paren
id|__src
)paren
comma
(braket
id|result
)braket
l_string|&quot;+d&quot;
(paren
id|__src_len
)paren
suffix:colon
(braket
id|e1
)braket
l_string|&quot;K&quot;
(paren
op_minus
id|EFAULT
)paren
comma
(braket
id|e2
)braket
l_string|&quot;K&quot;
(paren
op_minus
id|ENOSYS
)paren
comma
l_string|&quot;d&quot;
(paren
id|__func
)paren
comma
l_string|&quot;a&quot;
(paren
id|__param
)paren
suffix:colon
l_string|&quot;cc&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ret
op_ge
l_int|0
op_logical_and
id|func
op_amp
id|CRYPT_Z990_FUNC_MASK
)paren
(brace
id|ret
op_assign
id|src_len
op_minus
id|ret
suffix:semicolon
)brace
r_return
id|ret
suffix:semicolon
)brace
multiline_comment|/*&n; * Executes the KMAC (COMPUTE MESSAGE AUTHENTICATION CODE) operation&n; * of the z990 CPU.&n; * @param func: the function code passed to KM; see crypt_z990_klmd_func&n; * @param param: address of parameter block; see POP for details on each func&n; * @param src: address of source memory area&n; * @param src_len: length of src operand in bytes&n; * @returns &lt; zero for failure, 0 for the query func, number of processed bytes&n; * &t;for digest funcs&n; */
r_static
r_inline
r_int
DECL|function|crypt_z990_kmac
id|crypt_z990_kmac
c_func
(paren
r_int
id|func
comma
r_void
op_star
id|param
comma
r_const
id|u8
op_star
id|src
comma
r_int
id|src_len
)paren
(brace
r_register
r_int
id|__func
id|asm
c_func
(paren
l_string|&quot;0&quot;
)paren
op_assign
id|func
op_amp
id|CRYPT_Z990_FUNC_MASK
suffix:semicolon
r_register
r_void
op_star
id|__param
id|asm
c_func
(paren
l_string|&quot;1&quot;
)paren
op_assign
id|param
suffix:semicolon
r_register
r_const
id|u8
op_star
id|__src
id|asm
c_func
(paren
l_string|&quot;2&quot;
)paren
op_assign
id|src
suffix:semicolon
r_register
r_int
id|__src_len
id|asm
c_func
(paren
l_string|&quot;3&quot;
)paren
op_assign
id|src_len
suffix:semicolon
r_int
id|ret
suffix:semicolon
id|ret
op_assign
l_int|0
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;0:&t;.insn&t;rre,0xB91E0000,%5,%5 &bslash;n&quot;
singleline_comment|//KMAC opcode
l_string|&quot;1:&t;brc&t;1,0b &bslash;n&quot;
multiline_comment|/*handle partical completion of klmd*/
id|__crypt_z990_set_result
l_string|&quot;6:&t;&bslash;n&quot;
id|__crypt_z990_fixup
suffix:colon
l_string|&quot;+d&quot;
(paren
id|ret
)paren
comma
l_string|&quot;+a&quot;
(paren
id|__src
)paren
comma
(braket
id|result
)braket
l_string|&quot;+d&quot;
(paren
id|__src_len
)paren
suffix:colon
(braket
id|e1
)braket
l_string|&quot;K&quot;
(paren
op_minus
id|EFAULT
)paren
comma
(braket
id|e2
)braket
l_string|&quot;K&quot;
(paren
op_minus
id|ENOSYS
)paren
comma
l_string|&quot;d&quot;
(paren
id|__func
)paren
comma
l_string|&quot;a&quot;
(paren
id|__param
)paren
suffix:colon
l_string|&quot;cc&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ret
op_ge
l_int|0
op_logical_and
id|func
op_amp
id|CRYPT_Z990_FUNC_MASK
)paren
(brace
id|ret
op_assign
id|src_len
op_minus
id|ret
suffix:semicolon
)brace
r_return
id|ret
suffix:semicolon
)brace
multiline_comment|/**&n; * Tests if a specific z990 crypto function is implemented on the machine.&n; * @param func:&t;the function code of the specific function; 0 if op in general&n; * @return&t;1 if func available; 0 if func or op in general not available&n; */
r_static
r_inline
r_int
DECL|function|crypt_z990_func_available
id|crypt_z990_func_available
c_func
(paren
r_int
id|func
)paren
(brace
r_int
id|ret
suffix:semicolon
r_struct
id|crypt_z990_query_status
id|status
op_assign
(brace
dot
id|high
op_assign
l_int|0
comma
dot
id|low
op_assign
l_int|0
)brace
suffix:semicolon
r_switch
c_cond
(paren
id|func
op_amp
id|CRYPT_Z990_OP_MASK
)paren
(brace
r_case
id|CRYPT_Z990_KM
suffix:colon
id|ret
op_assign
id|crypt_z990_km
c_func
(paren
id|KM_QUERY
comma
op_amp
id|status
comma
l_int|NULL
comma
l_int|NULL
comma
l_int|0
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|CRYPT_Z990_KMC
suffix:colon
id|ret
op_assign
id|crypt_z990_kmc
c_func
(paren
id|KMC_QUERY
comma
op_amp
id|status
comma
l_int|NULL
comma
l_int|NULL
comma
l_int|0
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|CRYPT_Z990_KIMD
suffix:colon
id|ret
op_assign
id|crypt_z990_kimd
c_func
(paren
id|KIMD_QUERY
comma
op_amp
id|status
comma
l_int|NULL
comma
l_int|0
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|CRYPT_Z990_KLMD
suffix:colon
id|ret
op_assign
id|crypt_z990_klmd
c_func
(paren
id|KLMD_QUERY
comma
op_amp
id|status
comma
l_int|NULL
comma
l_int|0
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|CRYPT_Z990_KMAC
suffix:colon
id|ret
op_assign
id|crypt_z990_kmac
c_func
(paren
id|KMAC_QUERY
comma
op_amp
id|status
comma
l_int|NULL
comma
l_int|0
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|ret
op_assign
l_int|0
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
r_if
c_cond
(paren
id|ret
op_ge
l_int|0
)paren
(brace
id|func
op_and_assign
id|CRYPT_Z990_FUNC_MASK
suffix:semicolon
id|func
op_and_assign
l_int|0x7f
suffix:semicolon
singleline_comment|//mask modifier bit
r_if
c_cond
(paren
id|func
OL
l_int|64
)paren
(brace
id|ret
op_assign
(paren
id|status.high
op_rshift
(paren
l_int|64
op_minus
id|func
op_minus
l_int|1
)paren
)paren
op_amp
l_int|0x1
suffix:semicolon
)brace
r_else
(brace
id|ret
op_assign
(paren
id|status.low
op_rshift
(paren
l_int|128
op_minus
id|func
op_minus
l_int|1
)paren
)paren
op_amp
l_int|0x1
suffix:semicolon
)brace
)brace
r_else
(brace
id|ret
op_assign
l_int|0
suffix:semicolon
)brace
r_return
id|ret
suffix:semicolon
)brace
macro_line|#endif 
singleline_comment|// _CRYPTO_ARCH_S390_CRYPT_Z990_H
eof
