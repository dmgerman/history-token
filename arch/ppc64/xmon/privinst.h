multiline_comment|/*&n; * Copyright (C) 1996 Paul Mackerras.&n; *&n; *      This program is free software; you can redistribute it and/or&n; *      modify it under the terms of the GNU General Public License&n; *      as published by the Free Software Foundation; either version&n; *      2 of the License, or (at your option) any later version.&n; */
DECL|macro|GETREG
mdefine_line|#define GETREG(reg)&t;&t;&bslash;&n;    static inline unsigned long get_ ## reg (void)&t;&bslash;&n;&t;{ unsigned long ret; asm volatile (&quot;mf&quot; #reg &quot; %0&quot; : &quot;=r&quot; (ret) :); return ret; }
DECL|macro|SETREG
mdefine_line|#define SETREG(reg)&t;&t;&bslash;&n;    static inline void set_ ## reg (unsigned long val)&t;&bslash;&n;&t;{ asm volatile (&quot;mt&quot; #reg &quot; %0&quot; : : &quot;r&quot; (val)); }
id|GETREG
c_func
(paren
id|msr
)paren
id|SETREG
c_func
(paren
id|msrd
)paren
id|GETREG
c_func
(paren
id|cr
)paren
DECL|macro|GSETSPR
mdefine_line|#define GSETSPR(n, name)&t;&bslash;&n;    static inline long get_ ## name (void) &bslash;&n;&t;{ long ret; asm volatile (&quot;mfspr %0,&quot; #n : &quot;=r&quot; (ret) : ); return ret; } &bslash;&n;    static inline void set_ ## name (long val) &bslash;&n;&t;{ asm volatile (&quot;mtspr &quot; #n &quot;,%0&quot; : : &quot;r&quot; (val)); }
id|GSETSPR
c_func
(paren
l_int|0
comma
id|mq
)paren
id|GSETSPR
c_func
(paren
l_int|1
comma
id|xer
)paren
id|GSETSPR
c_func
(paren
l_int|4
comma
id|rtcu
)paren
id|GSETSPR
c_func
(paren
l_int|5
comma
id|rtcl
)paren
id|GSETSPR
c_func
(paren
l_int|8
comma
id|lr
)paren
id|GSETSPR
c_func
(paren
l_int|9
comma
id|ctr
)paren
id|GSETSPR
c_func
(paren
l_int|18
comma
id|dsisr
)paren
id|GSETSPR
c_func
(paren
l_int|19
comma
id|dar
)paren
id|GSETSPR
c_func
(paren
l_int|22
comma
id|dec
)paren
id|GSETSPR
c_func
(paren
l_int|25
comma
id|sdr1
)paren
id|GSETSPR
c_func
(paren
l_int|26
comma
id|srr0
)paren
id|GSETSPR
c_func
(paren
l_int|27
comma
id|srr1
)paren
id|GSETSPR
c_func
(paren
l_int|272
comma
id|sprg0
)paren
id|GSETSPR
c_func
(paren
l_int|273
comma
id|sprg1
)paren
id|GSETSPR
c_func
(paren
l_int|274
comma
id|sprg2
)paren
id|GSETSPR
c_func
(paren
l_int|275
comma
id|sprg3
)paren
id|GSETSPR
c_func
(paren
l_int|282
comma
id|ear
)paren
id|GSETSPR
c_func
(paren
l_int|287
comma
id|pvr
)paren
id|GSETSPR
c_func
(paren
l_int|1008
comma
id|hid0
)paren
id|GSETSPR
c_func
(paren
l_int|1009
comma
id|hid1
)paren
id|GSETSPR
c_func
(paren
l_int|1010
comma
id|iabr
)paren
id|GSETSPR
c_func
(paren
l_int|1013
comma
id|dabr
)paren
id|GSETSPR
c_func
(paren
l_int|1023
comma
id|pir
)paren
DECL|function|store_inst
r_static
r_inline
r_void
id|store_inst
c_func
(paren
r_void
op_star
id|p
)paren
(brace
id|asm
r_volatile
(paren
l_string|&quot;dcbst 0,%0; sync; icbi 0,%0; isync&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|p
)paren
)paren
suffix:semicolon
)brace
DECL|function|cflush
r_static
r_inline
r_void
id|cflush
c_func
(paren
r_void
op_star
id|p
)paren
(brace
id|asm
r_volatile
(paren
l_string|&quot;dcbf 0,%0; icbi 0,%0&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|p
)paren
)paren
suffix:semicolon
)brace
DECL|function|cinval
r_static
r_inline
r_void
id|cinval
c_func
(paren
r_void
op_star
id|p
)paren
(brace
id|asm
r_volatile
(paren
l_string|&quot;dcbi 0,%0; icbi 0,%0&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|p
)paren
)paren
suffix:semicolon
)brace
eof
