multiline_comment|/*&n; * Copyright (C) 2004 Anton Blanchard &lt;anton@au.ibm.com&gt;, IBM&n; *&n; * Based on alpha version.&n; *&n; * This program is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License&n; * as published by the Free Software Foundation; either version&n; * 2 of the License, or (at your option) any later version.&n; */
macro_line|#ifndef OP_IMPL_H
DECL|macro|OP_IMPL_H
mdefine_line|#define OP_IMPL_H 1
DECL|macro|OP_MAX_COUNTER
mdefine_line|#define OP_MAX_COUNTER 8
DECL|macro|MSR_PMM
mdefine_line|#define MSR_PMM&t;&t;(1UL &lt;&lt; (63 - 61))
multiline_comment|/* freeze counters. set to 1 on a perfmon exception */
DECL|macro|MMCR0_FC
mdefine_line|#define MMCR0_FC&t;(1UL &lt;&lt; (31 - 0))
multiline_comment|/* freeze in supervisor state */
DECL|macro|MMCR0_KERNEL_DISABLE
mdefine_line|#define MMCR0_KERNEL_DISABLE (1UL &lt;&lt; (31 - 1))
multiline_comment|/* freeze in problem state */
DECL|macro|MMCR0_PROBLEM_DISABLE
mdefine_line|#define MMCR0_PROBLEM_DISABLE (1UL &lt;&lt; (31 - 2))
multiline_comment|/* freeze counters while MSR mark = 1 */
DECL|macro|MMCR0_FCM1
mdefine_line|#define MMCR0_FCM1&t;(1UL &lt;&lt; (31 - 3))
multiline_comment|/* performance monitor exception enable */
DECL|macro|MMCR0_PMXE
mdefine_line|#define MMCR0_PMXE&t;(1UL &lt;&lt; (31 - 5))
multiline_comment|/* freeze counters on enabled condition or event */
DECL|macro|MMCR0_FCECE
mdefine_line|#define MMCR0_FCECE&t;(1UL &lt;&lt; (31 - 6))
multiline_comment|/* PMC1 count enable*/
DECL|macro|MMCR0_PMC1INTCONTROL
mdefine_line|#define MMCR0_PMC1INTCONTROL&t;(1UL &lt;&lt; (31 - 16))
multiline_comment|/* PMCn count enable*/
DECL|macro|MMCR0_PMCNINTCONTROL
mdefine_line|#define MMCR0_PMCNINTCONTROL&t;(1UL &lt;&lt; (31 - 17))
multiline_comment|/* performance monitor alert has occurred, set to 0 after handling exception */
DECL|macro|MMCR0_PMAO
mdefine_line|#define MMCR0_PMAO&t;(1UL &lt;&lt; (31 - 24))
multiline_comment|/* state of MSR HV when SIAR set */
DECL|macro|MMCRA_SIHV
mdefine_line|#define MMCRA_SIHV&t;(1UL &lt;&lt; (63 - 35))
multiline_comment|/* state of MSR PR when SIAR set */
DECL|macro|MMCRA_SIPR
mdefine_line|#define MMCRA_SIPR&t;(1UL &lt;&lt; (63 - 36))
multiline_comment|/* enable sampling */
DECL|macro|MMCRA_SAMPLE_ENABLE
mdefine_line|#define MMCRA_SAMPLE_ENABLE&t;(1UL &lt;&lt; (63 - 63))
multiline_comment|/* Per-counter configuration as set via oprofilefs.  */
DECL|struct|op_counter_config
r_struct
id|op_counter_config
(brace
DECL|member|valid
r_int
r_int
id|valid
suffix:semicolon
DECL|member|enabled
r_int
r_int
id|enabled
suffix:semicolon
DECL|member|event
r_int
r_int
id|event
suffix:semicolon
DECL|member|count
r_int
r_int
id|count
suffix:semicolon
DECL|member|kernel
r_int
r_int
id|kernel
suffix:semicolon
multiline_comment|/* We dont support per counter user/kernel selection */
DECL|member|user
r_int
r_int
id|user
suffix:semicolon
DECL|member|unit_mask
r_int
r_int
id|unit_mask
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* System-wide configuration as set via oprofilefs.  */
DECL|struct|op_system_config
r_struct
id|op_system_config
(brace
DECL|member|mmcr0
r_int
r_int
id|mmcr0
suffix:semicolon
DECL|member|mmcr1
r_int
r_int
id|mmcr1
suffix:semicolon
DECL|member|mmcra
r_int
r_int
id|mmcra
suffix:semicolon
DECL|member|enable_kernel
r_int
r_int
id|enable_kernel
suffix:semicolon
DECL|member|enable_user
r_int
r_int
id|enable_user
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Per-arch configuration */
DECL|struct|op_ppc64_model
r_struct
id|op_ppc64_model
(brace
DECL|member|reg_setup
r_void
(paren
op_star
id|reg_setup
)paren
(paren
r_struct
id|op_counter_config
op_star
comma
r_struct
id|op_system_config
op_star
comma
r_int
id|num_counters
)paren
suffix:semicolon
DECL|member|cpu_setup
r_void
(paren
op_star
id|cpu_setup
)paren
(paren
r_void
op_star
)paren
suffix:semicolon
DECL|member|start
r_void
(paren
op_star
id|start
)paren
(paren
r_struct
id|op_counter_config
op_star
)paren
suffix:semicolon
DECL|member|stop
r_void
(paren
op_star
id|stop
)paren
(paren
r_void
)paren
suffix:semicolon
DECL|member|handle_interrupt
r_void
(paren
op_star
id|handle_interrupt
)paren
(paren
r_struct
id|pt_regs
op_star
comma
r_struct
id|op_counter_config
op_star
)paren
suffix:semicolon
DECL|member|num_counters
r_int
id|num_counters
suffix:semicolon
)brace
suffix:semicolon
DECL|function|ctr_read
r_static
r_inline
r_int
r_int
id|ctr_read
c_func
(paren
r_int
r_int
id|i
)paren
(brace
r_switch
c_cond
(paren
id|i
)paren
(brace
r_case
l_int|0
suffix:colon
r_return
id|mfspr
c_func
(paren
id|SPRN_PMC1
)paren
suffix:semicolon
r_case
l_int|1
suffix:colon
r_return
id|mfspr
c_func
(paren
id|SPRN_PMC2
)paren
suffix:semicolon
r_case
l_int|2
suffix:colon
r_return
id|mfspr
c_func
(paren
id|SPRN_PMC3
)paren
suffix:semicolon
r_case
l_int|3
suffix:colon
r_return
id|mfspr
c_func
(paren
id|SPRN_PMC4
)paren
suffix:semicolon
r_case
l_int|4
suffix:colon
r_return
id|mfspr
c_func
(paren
id|SPRN_PMC5
)paren
suffix:semicolon
r_case
l_int|5
suffix:colon
r_return
id|mfspr
c_func
(paren
id|SPRN_PMC6
)paren
suffix:semicolon
r_case
l_int|6
suffix:colon
r_return
id|mfspr
c_func
(paren
id|SPRN_PMC7
)paren
suffix:semicolon
r_case
l_int|7
suffix:colon
r_return
id|mfspr
c_func
(paren
id|SPRN_PMC8
)paren
suffix:semicolon
r_default
suffix:colon
r_return
l_int|0
suffix:semicolon
)brace
)brace
DECL|function|ctr_write
r_static
r_inline
r_void
id|ctr_write
c_func
(paren
r_int
r_int
id|i
comma
r_int
r_int
id|val
)paren
(brace
r_switch
c_cond
(paren
id|i
)paren
(brace
r_case
l_int|0
suffix:colon
id|mtspr
c_func
(paren
id|SPRN_PMC1
comma
id|val
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
id|mtspr
c_func
(paren
id|SPRN_PMC2
comma
id|val
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|mtspr
c_func
(paren
id|SPRN_PMC3
comma
id|val
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|3
suffix:colon
id|mtspr
c_func
(paren
id|SPRN_PMC4
comma
id|val
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|4
suffix:colon
id|mtspr
c_func
(paren
id|SPRN_PMC5
comma
id|val
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|5
suffix:colon
id|mtspr
c_func
(paren
id|SPRN_PMC6
comma
id|val
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|6
suffix:colon
id|mtspr
c_func
(paren
id|SPRN_PMC7
comma
id|val
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|7
suffix:colon
id|mtspr
c_func
(paren
id|SPRN_PMC8
comma
id|val
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
r_break
suffix:semicolon
)brace
)brace
macro_line|#endif
eof
