multiline_comment|/*&n; * This file contains the Itanium PMU register description tables&n; * and pmc checker used by perfmon.c.&n; *&n; * Copyright (C) 2002-2003  Hewlett Packard Co&n; *               Stephane Eranian &lt;eranian@hpl.hp.com&gt;&n; */
DECL|macro|RDEP
mdefine_line|#define RDEP(x)&t;(1UL&lt;&lt;(x))
macro_line|#ifndef CONFIG_ITANIUM
macro_line|#error &quot;This file is only valid when CONFIG_ITANIUM is defined&quot;
macro_line|#endif
r_static
r_int
id|pfm_ita_pmc_check
c_func
(paren
r_struct
id|task_struct
op_star
id|task
comma
id|pfm_context_t
op_star
id|ctx
comma
r_int
r_int
id|cnum
comma
r_int
r_int
op_star
id|val
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
r_static
r_int
id|pfm_write_ibr_dbr
c_func
(paren
r_int
id|mode
comma
id|pfm_context_t
op_star
id|ctx
comma
r_void
op_star
id|arg
comma
r_int
id|count
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
DECL|variable|pfm_ita_pmc_desc
r_static
id|pfm_reg_desc_t
id|pfm_ita_pmc_desc
(braket
id|PMU_MAX_PMCS
)braket
op_assign
initialization_block
suffix:semicolon
DECL|variable|pfm_ita_pmd_desc
r_static
id|pfm_reg_desc_t
id|pfm_ita_pmd_desc
(braket
id|PMU_MAX_PMDS
)braket
op_assign
initialization_block
suffix:semicolon
multiline_comment|/*&n; * impl_pmcs, impl_pmds are computed at runtime to minimize errors!&n; */
DECL|variable|pmu_conf
r_static
id|pmu_config_t
id|pmu_conf
op_assign
initialization_block
suffix:semicolon
r_static
r_int
DECL|function|pfm_ita_pmc_check
id|pfm_ita_pmc_check
c_func
(paren
r_struct
id|task_struct
op_star
id|task
comma
id|pfm_context_t
op_star
id|ctx
comma
r_int
r_int
id|cnum
comma
r_int
r_int
op_star
id|val
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
(brace
r_int
id|ret
suffix:semicolon
multiline_comment|/*&n;&t; * we must clear the (instruction) debug registers if pmc13.ta bit is cleared&n;&t; * before they are written (fl_using_dbreg==0) to avoid picking up stale information.&n;&t; */
r_if
c_cond
(paren
id|cnum
op_eq
l_int|13
op_logical_and
(paren
(paren
op_star
id|val
op_amp
l_int|0x1
)paren
op_eq
l_int|0UL
)paren
op_logical_and
id|ctx-&gt;ctx_fl_using_dbreg
op_eq
l_int|0
)paren
(brace
multiline_comment|/* don&squot;t mix debug with perfmon */
r_if
c_cond
(paren
id|task
op_logical_and
(paren
id|task-&gt;thread.flags
op_amp
id|IA64_THREAD_DBG_VALID
)paren
op_ne
l_int|0
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
multiline_comment|/*&n;&t;&t; * a count of 0 will mark the debug registers as in use and also&n;&t;&t; * ensure that they are properly cleared.&n;&t;&t; */
id|ret
op_assign
id|pfm_write_ibr_dbr
c_func
(paren
l_int|1
comma
id|ctx
comma
l_int|NULL
comma
l_int|0
comma
id|regs
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ret
)paren
r_return
id|ret
suffix:semicolon
)brace
multiline_comment|/*&n;&t; * we must clear the (data) debug registers if pmc11.pt bit is cleared&n;&t; * before they are written (fl_using_dbreg==0) to avoid picking up stale information.&n;&t; */
r_if
c_cond
(paren
id|cnum
op_eq
l_int|11
op_logical_and
(paren
(paren
op_star
id|val
op_rshift
l_int|28
)paren
op_amp
l_int|0x1
)paren
op_eq
l_int|0
op_logical_and
id|ctx-&gt;ctx_fl_using_dbreg
op_eq
l_int|0
)paren
(brace
multiline_comment|/* don&squot;t mix debug with perfmon */
r_if
c_cond
(paren
id|task
op_logical_and
(paren
id|task-&gt;thread.flags
op_amp
id|IA64_THREAD_DBG_VALID
)paren
op_ne
l_int|0
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
multiline_comment|/*&n;&t;&t; * a count of 0 will mark the debug registers as in use and also&n;&t;&t; * ensure that they are properly cleared.&n;&t;&t; */
id|ret
op_assign
id|pfm_write_ibr_dbr
c_func
(paren
l_int|0
comma
id|ctx
comma
l_int|NULL
comma
l_int|0
comma
id|regs
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ret
)paren
r_return
id|ret
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
eof
