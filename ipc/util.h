multiline_comment|/*&n; * linux/ipc/util.h&n; * Copyright (C) 1999 Christoph Rohland&n; *&n; * ipc helper functions (c) 1999 Manfred Spraul &lt;manfreds@colorfullife.com&gt;&n; */
DECL|macro|USHRT_MAX
mdefine_line|#define USHRT_MAX 0xffff
DECL|macro|SEQ_MULTIPLIER
mdefine_line|#define SEQ_MULTIPLIER&t;(IPCMNI)
r_void
id|sem_init
(paren
r_void
)paren
suffix:semicolon
r_void
id|msg_init
(paren
r_void
)paren
suffix:semicolon
r_void
id|shm_init
(paren
r_void
)paren
suffix:semicolon
DECL|struct|ipc_ids
r_struct
id|ipc_ids
(brace
DECL|member|size
r_int
id|size
suffix:semicolon
DECL|member|in_use
r_int
id|in_use
suffix:semicolon
DECL|member|max_id
r_int
id|max_id
suffix:semicolon
DECL|member|seq
r_int
r_int
id|seq
suffix:semicolon
DECL|member|seq_max
r_int
r_int
id|seq_max
suffix:semicolon
DECL|member|sem
r_struct
id|semaphore
id|sem
suffix:semicolon
DECL|member|entries
r_struct
id|ipc_id
op_star
id|entries
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ipc_id
r_struct
id|ipc_id
(brace
DECL|member|p
r_struct
id|kern_ipc_perm
op_star
id|p
suffix:semicolon
)brace
suffix:semicolon
r_void
id|__init
id|ipc_init_ids
c_func
(paren
r_struct
id|ipc_ids
op_star
id|ids
comma
r_int
id|size
)paren
suffix:semicolon
multiline_comment|/* must be called with ids-&gt;sem acquired.*/
r_int
id|ipc_findkey
c_func
(paren
r_struct
id|ipc_ids
op_star
id|ids
comma
id|key_t
id|key
)paren
suffix:semicolon
r_int
id|ipc_addid
c_func
(paren
r_struct
id|ipc_ids
op_star
id|ids
comma
r_struct
id|kern_ipc_perm
op_star
r_new
comma
r_int
id|size
)paren
suffix:semicolon
multiline_comment|/* must be called with both locks acquired. */
r_struct
id|kern_ipc_perm
op_star
id|ipc_rmid
c_func
(paren
r_struct
id|ipc_ids
op_star
id|ids
comma
r_int
id|id
)paren
suffix:semicolon
r_int
id|ipcperms
(paren
r_struct
id|kern_ipc_perm
op_star
id|ipcp
comma
r_int
id|flg
)paren
suffix:semicolon
multiline_comment|/* for rare, potentially huge allocations.&n; * both function can sleep&n; */
r_void
op_star
id|ipc_alloc
c_func
(paren
r_int
id|size
)paren
suffix:semicolon
r_void
id|ipc_free
c_func
(paren
r_void
op_star
id|ptr
comma
r_int
id|size
)paren
suffix:semicolon
multiline_comment|/* for allocation that need to be freed by RCU&n; * both function can sleep&n; */
r_void
op_star
id|ipc_rcu_alloc
c_func
(paren
r_int
id|size
)paren
suffix:semicolon
r_void
id|ipc_rcu_free
c_func
(paren
r_void
op_star
id|arg
comma
r_int
id|size
)paren
suffix:semicolon
r_struct
id|kern_ipc_perm
op_star
id|ipc_get
c_func
(paren
r_struct
id|ipc_ids
op_star
id|ids
comma
r_int
id|id
)paren
suffix:semicolon
r_struct
id|kern_ipc_perm
op_star
id|ipc_lock
c_func
(paren
r_struct
id|ipc_ids
op_star
id|ids
comma
r_int
id|id
)paren
suffix:semicolon
r_void
id|ipc_unlock
c_func
(paren
r_struct
id|kern_ipc_perm
op_star
id|perm
)paren
suffix:semicolon
r_int
id|ipc_buildid
c_func
(paren
r_struct
id|ipc_ids
op_star
id|ids
comma
r_int
id|id
comma
r_int
id|seq
)paren
suffix:semicolon
r_int
id|ipc_checkid
c_func
(paren
r_struct
id|ipc_ids
op_star
id|ids
comma
r_struct
id|kern_ipc_perm
op_star
id|ipcp
comma
r_int
id|uid
)paren
suffix:semicolon
r_void
id|kernel_to_ipc64_perm
c_func
(paren
r_struct
id|kern_ipc_perm
op_star
id|in
comma
r_struct
id|ipc64_perm
op_star
id|out
)paren
suffix:semicolon
r_void
id|ipc64_perm_to_ipc_perm
c_func
(paren
r_struct
id|ipc64_perm
op_star
id|in
comma
r_struct
id|ipc_perm
op_star
id|out
)paren
suffix:semicolon
macro_line|#if defined(__ia64__) || defined(__x86_64__) || defined(__hppa__)
multiline_comment|/* On IA-64, we always use the &quot;64-bit version&quot; of the IPC structures.  */
DECL|macro|ipc_parse_version
macro_line|# define ipc_parse_version(cmd)&t;IPC_64
macro_line|#else
r_int
id|ipc_parse_version
(paren
r_int
op_star
id|cmd
)paren
suffix:semicolon
macro_line|#endif
eof
