multiline_comment|/* Generate kernel symbol version hashes.&n;   Copyright 1996, 1997 Linux International.&n;&n;   New implementation contributed by Richard Henderson &lt;rth@tamu.edu&gt;&n;   Based on original work by Bjorn Ekwall &lt;bj0rn@blox.se&gt;&n;&n;   This file is part of the Linux modutils.&n;&n;   This program is free software; you can redistribute it and/or modify it&n;   under the terms of the GNU General Public License as published by the&n;   Free Software Foundation; either version 2 of the License, or (at your&n;   option) any later version.&n;&n;   This program is distributed in the hope that it will be useful, but&n;   WITHOUT ANY WARRANTY; without even the implied warranty of&n;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU&n;   General Public License for more details.&n;&n;   You should have received a copy of the GNU General Public License&n;   along with this program; if not, write to the Free Software Foundation,&n;   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
macro_line|#ifndef MODUTILS_GENKSYMS_H
DECL|macro|MODUTILS_GENKSYMS_H
mdefine_line|#define MODUTILS_GENKSYMS_H 1
macro_line|#include &lt;stdio.h&gt;
DECL|enum|symbol_type
r_enum
id|symbol_type
(brace
DECL|enumerator|SYM_NORMAL
DECL|enumerator|SYM_TYPEDEF
DECL|enumerator|SYM_ENUM
DECL|enumerator|SYM_STRUCT
DECL|enumerator|SYM_UNION
id|SYM_NORMAL
comma
id|SYM_TYPEDEF
comma
id|SYM_ENUM
comma
id|SYM_STRUCT
comma
id|SYM_UNION
)brace
suffix:semicolon
DECL|struct|string_list
r_struct
id|string_list
(brace
DECL|member|next
r_struct
id|string_list
op_star
id|next
suffix:semicolon
DECL|member|tag
r_enum
id|symbol_type
id|tag
suffix:semicolon
DECL|member|string
r_char
op_star
id|string
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|symbol
r_struct
id|symbol
(brace
DECL|member|hash_next
r_struct
id|symbol
op_star
id|hash_next
suffix:semicolon
DECL|member|name
r_const
r_char
op_star
id|name
suffix:semicolon
DECL|member|type
r_enum
id|symbol_type
id|type
suffix:semicolon
DECL|member|defn
r_struct
id|string_list
op_star
id|defn
suffix:semicolon
DECL|member|expansion_trail
r_struct
id|symbol
op_star
id|expansion_trail
suffix:semicolon
DECL|member|is_extern
r_int
id|is_extern
suffix:semicolon
)brace
suffix:semicolon
DECL|typedef|yystype
r_typedef
r_struct
id|string_list
op_star
op_star
id|yystype
suffix:semicolon
DECL|macro|YYSTYPE
mdefine_line|#define YYSTYPE yystype
r_extern
id|FILE
op_star
id|outfile
comma
op_star
id|debugfile
suffix:semicolon
r_extern
r_int
id|cur_line
suffix:semicolon
r_extern
r_char
op_star
id|cur_filename
comma
op_star
id|output_directory
suffix:semicolon
r_extern
r_int
id|flag_debug
comma
id|flag_dump_defs
comma
id|flag_warnings
suffix:semicolon
r_extern
r_int
id|checksum_version
comma
id|kernel_version
suffix:semicolon
r_extern
r_int
id|want_brace_phrase
comma
id|want_exp_phrase
comma
id|discard_phrase_contents
suffix:semicolon
r_extern
r_struct
id|string_list
op_star
id|current_list
comma
op_star
id|next_list
suffix:semicolon
r_struct
id|symbol
op_star
id|find_symbol
c_func
(paren
r_const
r_char
op_star
id|name
comma
r_enum
id|symbol_type
id|ns
)paren
suffix:semicolon
r_struct
id|symbol
op_star
id|add_symbol
c_func
(paren
r_const
r_char
op_star
id|name
comma
r_enum
id|symbol_type
id|type
comma
r_struct
id|string_list
op_star
id|defn
comma
r_int
id|is_extern
)paren
suffix:semicolon
r_void
id|export_symbol
c_func
(paren
r_const
r_char
op_star
)paren
suffix:semicolon
r_struct
id|string_list
op_star
id|reset_list
c_func
(paren
r_void
)paren
suffix:semicolon
r_void
id|free_list
c_func
(paren
r_struct
id|string_list
op_star
id|s
comma
r_struct
id|string_list
op_star
id|e
)paren
suffix:semicolon
r_void
id|free_node
c_func
(paren
r_struct
id|string_list
op_star
id|list
)paren
suffix:semicolon
r_struct
id|string_list
op_star
id|copy_node
c_func
(paren
r_struct
id|string_list
op_star
)paren
suffix:semicolon
r_struct
id|string_list
op_star
id|copy_list
c_func
(paren
r_struct
id|string_list
op_star
id|s
comma
r_struct
id|string_list
op_star
id|e
)paren
suffix:semicolon
r_int
id|equal_list
c_func
(paren
r_struct
id|string_list
op_star
id|a
comma
r_struct
id|string_list
op_star
id|b
)paren
suffix:semicolon
r_void
id|print_list
c_func
(paren
id|FILE
op_star
comma
r_struct
id|string_list
op_star
id|list
)paren
suffix:semicolon
r_int
id|yylex
c_func
(paren
r_void
)paren
suffix:semicolon
r_int
id|yyparse
c_func
(paren
r_void
)paren
suffix:semicolon
r_void
id|error_with_pos
c_func
(paren
r_const
r_char
op_star
comma
dot
dot
dot
)paren
suffix:semicolon
DECL|macro|version
mdefine_line|#define version(a,b,c)  ((a &lt;&lt; 16) | (b &lt;&lt; 8) | (c))
multiline_comment|/*----------------------------------------------------------------------*/
DECL|macro|MODUTILS_VERSION
mdefine_line|#define MODUTILS_VERSION &quot;&lt;in-kernel&gt;&quot;
DECL|macro|xmalloc
mdefine_line|#define xmalloc(size) ({ void *__ptr = malloc(size);&t;&t;&bslash;&n;&t;if(!__ptr &amp;&amp; size != 0) {&t;&t;&t;&t;&bslash;&n;&t;&t;fprintf(stderr, &quot;out of memory&bslash;n&quot;);&t;&t;&bslash;&n;&t;&t;exit(1);&t;&t;&t;&t;&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;__ptr; })
DECL|macro|xstrdup
mdefine_line|#define xstrdup(str)  ({ char *__str = strdup(str);&t;&t;&bslash;&n;&t;if (!__str) {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;fprintf(stderr, &quot;out of memory&bslash;n&quot;);&t;&t;&bslash;&n;&t;&t;exit(1);&t;&t;&t;&t;&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;__str; })
macro_line|#endif /* genksyms.h */
eof
