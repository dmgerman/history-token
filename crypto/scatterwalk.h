multiline_comment|/*&n; * Cryptographic API.&n; *&n; * Copyright (c) 2002 James Morris &lt;jmorris@intercode.com.au&gt;&n; * Copyright (c) 2002 Adam J. Richter &lt;adam@yggdrasil.com&gt;&n; * Copyright (c) 2004 Jean-Luc Cooke &lt;jlcooke@certainkey.com&gt;&n; *&n; * This program is free software; you can redistribute it and/or modify it&n; * under the terms of the GNU General Public License as published by the Free&n; * Software Foundation; either version 2 of the License, or (at your option)&n; * any later version.&n; *&n; */
macro_line|#ifndef _CRYPTO_SCATTERWALK_H
DECL|macro|_CRYPTO_SCATTERWALK_H
mdefine_line|#define _CRYPTO_SCATTERWALK_H
macro_line|#include &lt;linux/mm.h&gt;
macro_line|#include &lt;asm/scatterlist.h&gt;
DECL|struct|scatter_walk
r_struct
id|scatter_walk
(brace
DECL|member|sg
r_struct
id|scatterlist
op_star
id|sg
suffix:semicolon
DECL|member|page
r_struct
id|page
op_star
id|page
suffix:semicolon
DECL|member|data
r_void
op_star
id|data
suffix:semicolon
DECL|member|len_this_page
r_int
r_int
id|len_this_page
suffix:semicolon
DECL|member|len_this_segment
r_int
r_int
id|len_this_segment
suffix:semicolon
DECL|member|offset
r_int
r_int
id|offset
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Define sg_next is an inline routine now in case we want to change&n;   scatterlist to a linked list later. */
DECL|function|sg_next
r_static
r_inline
r_struct
id|scatterlist
op_star
id|sg_next
c_func
(paren
r_struct
id|scatterlist
op_star
id|sg
)paren
(brace
r_return
id|sg
op_plus
l_int|1
suffix:semicolon
)brace
DECL|function|scatterwalk_samebuf
r_static
r_inline
r_int
id|scatterwalk_samebuf
c_func
(paren
r_struct
id|scatter_walk
op_star
id|walk_in
comma
r_struct
id|scatter_walk
op_star
id|walk_out
comma
r_void
op_star
id|src_p
comma
r_void
op_star
id|dst_p
)paren
(brace
r_return
id|walk_in-&gt;page
op_eq
id|walk_out-&gt;page
op_logical_and
id|walk_in-&gt;offset
op_eq
id|walk_out-&gt;offset
op_logical_and
id|walk_in-&gt;data
op_eq
id|src_p
op_logical_and
id|walk_out-&gt;data
op_eq
id|dst_p
suffix:semicolon
)brace
DECL|function|scatterwalk_across_pages
r_static
r_inline
r_int
id|scatterwalk_across_pages
c_func
(paren
r_struct
id|scatter_walk
op_star
id|walk
comma
r_int
r_int
id|nbytes
)paren
(brace
r_return
id|nbytes
OG
id|walk-&gt;len_this_page
suffix:semicolon
)brace
r_void
id|scatterwalk_start
c_func
(paren
r_struct
id|scatter_walk
op_star
id|walk
comma
r_struct
id|scatterlist
op_star
id|sg
)paren
suffix:semicolon
r_int
id|scatterwalk_copychunks
c_func
(paren
r_void
op_star
id|buf
comma
r_struct
id|scatter_walk
op_star
id|walk
comma
r_int
id|nbytes
comma
r_int
id|out
)paren
suffix:semicolon
r_void
id|scatterwalk_map
c_func
(paren
r_struct
id|scatter_walk
op_star
id|walk
comma
r_int
id|out
)paren
suffix:semicolon
r_void
id|scatterwalk_done
c_func
(paren
r_struct
id|scatter_walk
op_star
id|walk
comma
r_int
id|out
comma
r_int
id|more
)paren
suffix:semicolon
macro_line|#endif  /* _CRYPTO_SCATTERWALK_H */
eof
