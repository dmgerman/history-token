multiline_comment|/*&n; * A security context is a set of security attributes&n; * associated with each subject and object controlled&n; * by the security policy.  Security contexts are&n;  * externally represented as variable-length strings&n; * that can be interpreted by a user or application&n; * with an understanding of the security policy.&n; * Internally, the security server uses a simple&n; * structure.  This structure is private to the&n; * security server and can be changed without affecting&n; * clients of the security server.&n; *&n; * Author : Stephen Smalley, &lt;sds@epoch.ncsc.mil&gt;&n; */
macro_line|#ifndef _SS_CONTEXT_H_
DECL|macro|_SS_CONTEXT_H_
mdefine_line|#define _SS_CONTEXT_H_
macro_line|#include &quot;ebitmap.h&quot;
macro_line|#include &quot;mls_types.h&quot;
multiline_comment|/*&n; * A security context consists of an authenticated user&n; * identity, a role, a type and a MLS range.&n; */
DECL|struct|context
r_struct
id|context
(brace
DECL|member|user
id|u32
id|user
suffix:semicolon
DECL|member|role
id|u32
id|role
suffix:semicolon
DECL|member|type
id|u32
id|type
suffix:semicolon
macro_line|#ifdef CONFIG_SECURITY_SELINUX_MLS
DECL|member|range
r_struct
id|mls_range
id|range
suffix:semicolon
macro_line|#endif
)brace
suffix:semicolon
macro_line|#ifdef CONFIG_SECURITY_SELINUX_MLS
DECL|function|mls_context_init
r_static
r_inline
r_void
id|mls_context_init
c_func
(paren
r_struct
id|context
op_star
id|c
)paren
(brace
id|memset
c_func
(paren
op_amp
id|c-&gt;range
comma
l_int|0
comma
r_sizeof
(paren
id|c-&gt;range
)paren
)paren
suffix:semicolon
)brace
DECL|function|mls_context_cpy
r_static
r_inline
r_int
id|mls_context_cpy
c_func
(paren
r_struct
id|context
op_star
id|dst
comma
r_struct
id|context
op_star
id|src
)paren
(brace
r_int
id|rc
suffix:semicolon
id|dst-&gt;range.level
(braket
l_int|0
)braket
dot
id|sens
op_assign
id|src-&gt;range.level
(braket
l_int|0
)braket
dot
id|sens
suffix:semicolon
id|rc
op_assign
id|ebitmap_cpy
c_func
(paren
op_amp
id|dst-&gt;range.level
(braket
l_int|0
)braket
dot
id|cat
comma
op_amp
id|src-&gt;range.level
(braket
l_int|0
)braket
dot
id|cat
)paren
suffix:semicolon
r_if
c_cond
(paren
id|rc
)paren
r_goto
id|out
suffix:semicolon
id|dst-&gt;range.level
(braket
l_int|1
)braket
dot
id|sens
op_assign
id|src-&gt;range.level
(braket
l_int|1
)braket
dot
id|sens
suffix:semicolon
id|rc
op_assign
id|ebitmap_cpy
c_func
(paren
op_amp
id|dst-&gt;range.level
(braket
l_int|1
)braket
dot
id|cat
comma
op_amp
id|src-&gt;range.level
(braket
l_int|1
)braket
dot
id|cat
)paren
suffix:semicolon
r_if
c_cond
(paren
id|rc
)paren
id|ebitmap_destroy
c_func
(paren
op_amp
id|dst-&gt;range.level
(braket
l_int|0
)braket
dot
id|cat
)paren
suffix:semicolon
id|out
suffix:colon
r_return
id|rc
suffix:semicolon
)brace
DECL|function|mls_context_cmp
r_static
r_inline
r_int
id|mls_context_cmp
c_func
(paren
r_struct
id|context
op_star
id|c1
comma
r_struct
id|context
op_star
id|c2
)paren
(brace
r_return
(paren
(paren
id|c1-&gt;range.level
(braket
l_int|0
)braket
dot
id|sens
op_eq
id|c2-&gt;range.level
(braket
l_int|0
)braket
dot
id|sens
)paren
op_logical_and
id|ebitmap_cmp
c_func
(paren
op_amp
id|c1-&gt;range.level
(braket
l_int|0
)braket
dot
id|cat
comma
op_amp
id|c2-&gt;range.level
(braket
l_int|0
)braket
dot
id|cat
)paren
op_logical_and
(paren
id|c1-&gt;range.level
(braket
l_int|1
)braket
dot
id|sens
op_eq
id|c2-&gt;range.level
(braket
l_int|1
)braket
dot
id|sens
)paren
op_logical_and
id|ebitmap_cmp
c_func
(paren
op_amp
id|c1-&gt;range.level
(braket
l_int|1
)braket
dot
id|cat
comma
op_amp
id|c2-&gt;range.level
(braket
l_int|1
)braket
dot
id|cat
)paren
)paren
suffix:semicolon
)brace
DECL|function|mls_context_destroy
r_static
r_inline
r_void
id|mls_context_destroy
c_func
(paren
r_struct
id|context
op_star
id|c
)paren
(brace
id|ebitmap_destroy
c_func
(paren
op_amp
id|c-&gt;range.level
(braket
l_int|0
)braket
dot
id|cat
)paren
suffix:semicolon
id|ebitmap_destroy
c_func
(paren
op_amp
id|c-&gt;range.level
(braket
l_int|1
)braket
dot
id|cat
)paren
suffix:semicolon
id|mls_context_init
c_func
(paren
id|c
)paren
suffix:semicolon
)brace
macro_line|#else
DECL|function|mls_context_init
r_static
r_inline
r_void
id|mls_context_init
c_func
(paren
r_struct
id|context
op_star
id|c
)paren
(brace
)brace
DECL|function|mls_context_cpy
r_static
r_inline
r_int
id|mls_context_cpy
c_func
(paren
r_struct
id|context
op_star
id|dst
comma
r_struct
id|context
op_star
id|src
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|mls_context_cmp
r_static
r_inline
r_int
id|mls_context_cmp
c_func
(paren
r_struct
id|context
op_star
id|c1
comma
r_struct
id|context
op_star
id|c2
)paren
(brace
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|mls_context_destroy
r_static
r_inline
r_void
id|mls_context_destroy
c_func
(paren
r_struct
id|context
op_star
id|c
)paren
(brace
)brace
macro_line|#endif
DECL|function|context_init
r_static
r_inline
r_void
id|context_init
c_func
(paren
r_struct
id|context
op_star
id|c
)paren
(brace
id|memset
c_func
(paren
id|c
comma
l_int|0
comma
r_sizeof
(paren
op_star
id|c
)paren
)paren
suffix:semicolon
)brace
DECL|function|context_cpy
r_static
r_inline
r_int
id|context_cpy
c_func
(paren
r_struct
id|context
op_star
id|dst
comma
r_struct
id|context
op_star
id|src
)paren
(brace
id|dst-&gt;user
op_assign
id|src-&gt;user
suffix:semicolon
id|dst-&gt;role
op_assign
id|src-&gt;role
suffix:semicolon
id|dst-&gt;type
op_assign
id|src-&gt;type
suffix:semicolon
r_return
id|mls_context_cpy
c_func
(paren
id|dst
comma
id|src
)paren
suffix:semicolon
)brace
DECL|function|context_destroy
r_static
r_inline
r_void
id|context_destroy
c_func
(paren
r_struct
id|context
op_star
id|c
)paren
(brace
id|c-&gt;user
op_assign
id|c-&gt;role
op_assign
id|c-&gt;type
op_assign
l_int|0
suffix:semicolon
id|mls_context_destroy
c_func
(paren
id|c
)paren
suffix:semicolon
)brace
DECL|function|context_cmp
r_static
r_inline
r_int
id|context_cmp
c_func
(paren
r_struct
id|context
op_star
id|c1
comma
r_struct
id|context
op_star
id|c2
)paren
(brace
r_return
(paren
(paren
id|c1-&gt;user
op_eq
id|c2-&gt;user
)paren
op_logical_and
(paren
id|c1-&gt;role
op_eq
id|c2-&gt;role
)paren
op_logical_and
(paren
id|c1-&gt;type
op_eq
id|c2-&gt;type
)paren
op_logical_and
id|mls_context_cmp
c_func
(paren
id|c1
comma
id|c2
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif&t;/* _SS_CONTEXT_H_ */
eof
