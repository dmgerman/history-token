multiline_comment|/*&n; * An extensible bitmap is a bitmap that supports an&n; * arbitrary number of bits.  Extensible bitmaps are&n; * used to represent sets of values, such as types,&n; * roles, categories, and classes.&n; *&n; * Each extensible bitmap is implemented as a linked&n; * list of bitmap nodes, where each bitmap node has&n; * an explicitly specified starting bit position within&n; * the total bitmap.&n; *&n; * Author : Stephen Smalley, &lt;sds@epoch.ncsc.mil&gt;&n; */
macro_line|#ifndef _SS_EBITMAP_H_
DECL|macro|_SS_EBITMAP_H_
mdefine_line|#define _SS_EBITMAP_H_
DECL|macro|MAPTYPE
mdefine_line|#define MAPTYPE u64&t;&t;&t;/* portion of bitmap in each node */
DECL|macro|MAPSIZE
mdefine_line|#define MAPSIZE (sizeof(MAPTYPE) * 8)&t;/* number of bits in node bitmap */
DECL|macro|MAPBIT
mdefine_line|#define MAPBIT  1ULL&t;&t;&t;/* a bit in the node bitmap */
DECL|struct|ebitmap_node
r_struct
id|ebitmap_node
(brace
DECL|member|startbit
id|u32
id|startbit
suffix:semicolon
multiline_comment|/* starting position in the total bitmap */
DECL|member|map
id|MAPTYPE
id|map
suffix:semicolon
multiline_comment|/* this node&squot;s portion of the bitmap */
DECL|member|next
r_struct
id|ebitmap_node
op_star
id|next
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ebitmap
r_struct
id|ebitmap
(brace
DECL|member|node
r_struct
id|ebitmap_node
op_star
id|node
suffix:semicolon
multiline_comment|/* first node in the bitmap */
DECL|member|highbit
id|u32
id|highbit
suffix:semicolon
multiline_comment|/* highest position in the total bitmap */
)brace
suffix:semicolon
DECL|macro|ebitmap_length
mdefine_line|#define ebitmap_length(e) ((e)-&gt;highbit)
DECL|macro|ebitmap_startbit
mdefine_line|#define ebitmap_startbit(e) ((e)-&gt;node ? (e)-&gt;node-&gt;startbit : 0)
DECL|function|ebitmap_init
r_static
r_inline
r_void
id|ebitmap_init
c_func
(paren
r_struct
id|ebitmap
op_star
id|e
)paren
(brace
id|memset
c_func
(paren
id|e
comma
l_int|0
comma
r_sizeof
(paren
op_star
id|e
)paren
)paren
suffix:semicolon
)brace
r_int
id|ebitmap_cmp
c_func
(paren
r_struct
id|ebitmap
op_star
id|e1
comma
r_struct
id|ebitmap
op_star
id|e2
)paren
suffix:semicolon
r_int
id|ebitmap_cpy
c_func
(paren
r_struct
id|ebitmap
op_star
id|dst
comma
r_struct
id|ebitmap
op_star
id|src
)paren
suffix:semicolon
r_int
id|ebitmap_contains
c_func
(paren
r_struct
id|ebitmap
op_star
id|e1
comma
r_struct
id|ebitmap
op_star
id|e2
)paren
suffix:semicolon
r_int
id|ebitmap_get_bit
c_func
(paren
r_struct
id|ebitmap
op_star
id|e
comma
r_int
r_int
id|bit
)paren
suffix:semicolon
r_int
id|ebitmap_set_bit
c_func
(paren
r_struct
id|ebitmap
op_star
id|e
comma
r_int
r_int
id|bit
comma
r_int
id|value
)paren
suffix:semicolon
r_void
id|ebitmap_destroy
c_func
(paren
r_struct
id|ebitmap
op_star
id|e
)paren
suffix:semicolon
r_int
id|ebitmap_read
c_func
(paren
r_struct
id|ebitmap
op_star
id|e
comma
r_void
op_star
id|fp
)paren
suffix:semicolon
macro_line|#endif&t;/* _SS_EBITMAP_H_ */
eof
