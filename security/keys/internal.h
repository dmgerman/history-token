multiline_comment|/* internal.h: authentication token and access key management internal defs&n; *&n; * Copyright (C) 2003 Red Hat, Inc. All Rights Reserved.&n; * Written by David Howells (dhowells@redhat.com)&n; *&n; * This program is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License&n; * as published by the Free Software Foundation; either version&n; * 2 of the License, or (at your option) any later version.&n; */
macro_line|#ifndef _INTERNAL_H
DECL|macro|_INTERNAL_H
mdefine_line|#define _INTERNAL_H
macro_line|#include &lt;linux/key.h&gt;
macro_line|#include &lt;linux/key-ui.h&gt;
r_extern
r_struct
id|key_type
id|key_type_dead
suffix:semicolon
r_extern
r_struct
id|key_type
id|key_type_user
suffix:semicolon
multiline_comment|/*****************************************************************************/
multiline_comment|/*&n; * keep track of keys for a user&n; * - this needs to be separate to user_struct to avoid a refcount-loop&n; *   (user_struct pins some keyrings which pin this struct)&n; * - this also keeps track of keys under request from userspace for this UID&n; */
DECL|struct|key_user
r_struct
id|key_user
(brace
DECL|member|node
r_struct
id|rb_node
id|node
suffix:semicolon
DECL|member|consq
r_struct
id|list_head
id|consq
suffix:semicolon
multiline_comment|/* construction queue */
DECL|member|lock
id|spinlock_t
id|lock
suffix:semicolon
DECL|member|usage
id|atomic_t
id|usage
suffix:semicolon
multiline_comment|/* for accessing qnkeys &amp; qnbytes */
DECL|member|nkeys
id|atomic_t
id|nkeys
suffix:semicolon
multiline_comment|/* number of keys */
DECL|member|nikeys
id|atomic_t
id|nikeys
suffix:semicolon
multiline_comment|/* number of instantiated keys */
DECL|member|uid
id|uid_t
id|uid
suffix:semicolon
DECL|member|qnkeys
r_int
id|qnkeys
suffix:semicolon
multiline_comment|/* number of keys allocated to this user */
DECL|member|qnbytes
r_int
id|qnbytes
suffix:semicolon
multiline_comment|/* number of bytes allocated to this user */
)brace
suffix:semicolon
DECL|macro|KEYQUOTA_MAX_KEYS
mdefine_line|#define KEYQUOTA_MAX_KEYS&t;100
DECL|macro|KEYQUOTA_MAX_BYTES
mdefine_line|#define KEYQUOTA_MAX_BYTES&t;10000
DECL|macro|KEYQUOTA_LINK_BYTES
mdefine_line|#define KEYQUOTA_LINK_BYTES&t;4&t;&t;/* a link in a keyring is worth 4 bytes */
r_extern
r_struct
id|rb_root
id|key_user_tree
suffix:semicolon
r_extern
id|spinlock_t
id|key_user_lock
suffix:semicolon
r_extern
r_struct
id|key_user
id|root_key_user
suffix:semicolon
r_extern
r_struct
id|key_user
op_star
id|key_user_lookup
c_func
(paren
id|uid_t
id|uid
)paren
suffix:semicolon
r_extern
r_void
id|key_user_put
c_func
(paren
r_struct
id|key_user
op_star
id|user
)paren
suffix:semicolon
r_extern
r_struct
id|rb_root
id|key_serial_tree
suffix:semicolon
r_extern
id|spinlock_t
id|key_serial_lock
suffix:semicolon
r_extern
r_struct
id|semaphore
id|key_alloc_sem
suffix:semicolon
r_extern
r_struct
id|rw_semaphore
id|key_construction_sem
suffix:semicolon
r_extern
id|wait_queue_head_t
id|request_key_conswq
suffix:semicolon
r_extern
r_void
id|keyring_publish_name
c_func
(paren
r_struct
id|key
op_star
id|keyring
)paren
suffix:semicolon
r_extern
r_int
id|__key_link
c_func
(paren
r_struct
id|key
op_star
id|keyring
comma
r_struct
id|key
op_star
id|key
)paren
suffix:semicolon
r_extern
r_struct
id|key
op_star
id|__keyring_search_one
c_func
(paren
r_struct
id|key
op_star
id|keyring
comma
r_const
r_struct
id|key_type
op_star
id|type
comma
r_const
r_char
op_star
id|description
comma
id|key_perm_t
id|perm
)paren
suffix:semicolon
DECL|typedef|key_match_func_t
r_typedef
r_int
(paren
op_star
id|key_match_func_t
)paren
(paren
r_const
r_struct
id|key
op_star
comma
r_const
r_void
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|key
op_star
id|keyring_search_aux
c_func
(paren
r_struct
id|key
op_star
id|keyring
comma
r_struct
id|key_type
op_star
id|type
comma
r_const
r_void
op_star
id|description
comma
id|key_match_func_t
id|match
)paren
suffix:semicolon
r_extern
r_struct
id|key
op_star
id|search_process_keyrings_aux
c_func
(paren
r_struct
id|key_type
op_star
id|type
comma
r_const
r_void
op_star
id|description
comma
id|key_match_func_t
id|match
)paren
suffix:semicolon
r_extern
r_struct
id|key
op_star
id|find_keyring_by_name
c_func
(paren
r_const
r_char
op_star
id|name
comma
id|key_serial_t
id|bound
)paren
suffix:semicolon
r_extern
r_int
id|install_thread_keyring
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
)paren
suffix:semicolon
multiline_comment|/*&n; * keyctl functions&n; */
r_extern
r_int
id|keyctl_get_keyring_ID
c_func
(paren
id|key_serial_t
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|keyctl_join_session_keyring
c_func
(paren
r_const
r_char
id|__user
op_star
)paren
suffix:semicolon
r_extern
r_int
id|keyctl_update_key
c_func
(paren
id|key_serial_t
comma
r_const
r_void
id|__user
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|keyctl_revoke_key
c_func
(paren
id|key_serial_t
)paren
suffix:semicolon
r_extern
r_int
id|keyctl_keyring_clear
c_func
(paren
id|key_serial_t
)paren
suffix:semicolon
r_extern
r_int
id|keyctl_keyring_link
c_func
(paren
id|key_serial_t
comma
id|key_serial_t
)paren
suffix:semicolon
r_extern
r_int
id|keyctl_keyring_unlink
c_func
(paren
id|key_serial_t
comma
id|key_serial_t
)paren
suffix:semicolon
r_extern
r_int
id|keyctl_describe_key
c_func
(paren
id|key_serial_t
comma
r_char
id|__user
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|keyctl_keyring_search
c_func
(paren
id|key_serial_t
comma
r_const
r_char
id|__user
op_star
comma
r_const
r_char
id|__user
op_star
comma
id|key_serial_t
)paren
suffix:semicolon
r_extern
r_int
id|keyctl_read_key
c_func
(paren
id|key_serial_t
comma
r_char
id|__user
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|keyctl_chown_key
c_func
(paren
id|key_serial_t
comma
id|uid_t
comma
id|gid_t
)paren
suffix:semicolon
r_extern
r_int
id|keyctl_setperm_key
c_func
(paren
id|key_serial_t
comma
id|key_perm_t
)paren
suffix:semicolon
r_extern
r_int
id|keyctl_instantiate_key
c_func
(paren
id|key_serial_t
comma
r_const
r_void
id|__user
op_star
comma
r_int
comma
id|key_serial_t
)paren
suffix:semicolon
r_extern
r_int
id|keyctl_negate_key
c_func
(paren
id|key_serial_t
comma
r_int
comma
id|key_serial_t
)paren
suffix:semicolon
multiline_comment|/*&n; * debugging key validation&n; */
macro_line|#ifdef KEY_DEBUGGING
DECL|function|__key_check
r_static
r_void
id|__key_check
c_func
(paren
r_const
r_struct
id|key
op_star
id|key
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;__key_check: key %p {%08x} should be {%08x}&bslash;n&quot;
comma
id|key
comma
id|key-&gt;magic
comma
id|KEY_DEBUG_MAGIC
)paren
suffix:semicolon
id|BUG
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|key_check
r_static
r_inline
r_void
id|key_check
c_func
(paren
r_const
r_struct
id|key
op_star
id|key
)paren
(brace
r_if
c_cond
(paren
id|key
op_logical_and
(paren
id|IS_ERR
c_func
(paren
id|key
)paren
op_logical_or
id|key-&gt;magic
op_ne
id|KEY_DEBUG_MAGIC
)paren
)paren
id|__key_check
c_func
(paren
id|key
)paren
suffix:semicolon
)brace
macro_line|#else
DECL|macro|key_check
mdefine_line|#define key_check(key) do {} while(0)
macro_line|#endif
macro_line|#endif /* _INTERNAL_H */
eof
