multiline_comment|/*&n; *&t;linux/drivers/video/bt431.h&n; *&n; *&t;Copyright 2003  Thiemo Seufer &lt;seufer@csv.ica.uni-stuttgart.de&gt;&n; *&n; *&t;This file is subject to the terms and conditions of the GNU General&n; *&t;Public License. See the file COPYING in the main directory of this&n; *&t;archive for more details.&n; */
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;asm/system.h&gt;
multiline_comment|/*&n; * Bt431 cursor generator registers, 32-bit aligned.&n; * Two twin Bt431 are used on the DECstation&squot;s PMAG-AA.&n; */
DECL|struct|bt431_regs
r_struct
id|bt431_regs
(brace
DECL|member|addr_lo
r_volatile
id|u16
id|addr_lo
suffix:semicolon
DECL|member|pad0
id|u16
id|pad0
suffix:semicolon
DECL|member|addr_hi
r_volatile
id|u16
id|addr_hi
suffix:semicolon
DECL|member|pad1
id|u16
id|pad1
suffix:semicolon
DECL|member|addr_cmap
r_volatile
id|u16
id|addr_cmap
suffix:semicolon
DECL|member|pad2
id|u16
id|pad2
suffix:semicolon
DECL|member|addr_reg
r_volatile
id|u16
id|addr_reg
suffix:semicolon
DECL|member|pad3
id|u16
id|pad3
suffix:semicolon
)brace
suffix:semicolon
DECL|function|bt431_set_value
r_static
r_inline
id|u16
id|bt431_set_value
c_func
(paren
id|u8
id|val
)paren
(brace
r_return
(paren
(paren
id|val
op_lshift
l_int|8
)paren
op_or
(paren
id|val
op_amp
l_int|0xff
)paren
)paren
op_amp
l_int|0xffff
suffix:semicolon
)brace
DECL|function|bt431_get_value
r_static
r_inline
id|u8
id|bt431_get_value
c_func
(paren
id|u16
id|val
)paren
(brace
r_return
id|val
op_amp
l_int|0xff
suffix:semicolon
)brace
multiline_comment|/*&n; * Additional registers addressed indirectly.&n; */
DECL|macro|BT431_REG_CMD
mdefine_line|#define BT431_REG_CMD&t;&t;0x0000
DECL|macro|BT431_REG_CXLO
mdefine_line|#define BT431_REG_CXLO&t;&t;0x0001
DECL|macro|BT431_REG_CXHI
mdefine_line|#define BT431_REG_CXHI&t;&t;0x0002
DECL|macro|BT431_REG_CYLO
mdefine_line|#define BT431_REG_CYLO&t;&t;0x0003
DECL|macro|BT431_REG_CYHI
mdefine_line|#define BT431_REG_CYHI&t;&t;0x0004
DECL|macro|BT431_REG_WXLO
mdefine_line|#define BT431_REG_WXLO&t;&t;0x0005
DECL|macro|BT431_REG_WXHI
mdefine_line|#define BT431_REG_WXHI&t;&t;0x0006
DECL|macro|BT431_REG_WYLO
mdefine_line|#define BT431_REG_WYLO&t;&t;0x0007
DECL|macro|BT431_REG_WYHI
mdefine_line|#define BT431_REG_WYHI&t;&t;0x0008
DECL|macro|BT431_REG_WWLO
mdefine_line|#define BT431_REG_WWLO&t;&t;0x0009
DECL|macro|BT431_REG_WWHI
mdefine_line|#define BT431_REG_WWHI&t;&t;0x000a
DECL|macro|BT431_REG_WHLO
mdefine_line|#define BT431_REG_WHLO&t;&t;0x000b
DECL|macro|BT431_REG_WHHI
mdefine_line|#define BT431_REG_WHHI&t;&t;0x000c
DECL|macro|BT431_REG_CRAM_BASE
mdefine_line|#define BT431_REG_CRAM_BASE&t;0x0000
DECL|macro|BT431_REG_CRAM_END
mdefine_line|#define BT431_REG_CRAM_END&t;0x01ff
multiline_comment|/*&n; * Command register.&n; */
DECL|macro|BT431_CMD_CURS_ENABLE
mdefine_line|#define BT431_CMD_CURS_ENABLE&t;0x40
DECL|macro|BT431_CMD_XHAIR_ENABLE
mdefine_line|#define BT431_CMD_XHAIR_ENABLE&t;0x20
DECL|macro|BT431_CMD_OR_CURSORS
mdefine_line|#define BT431_CMD_OR_CURSORS&t;0x10
DECL|macro|BT431_CMD_AND_CURSORS
mdefine_line|#define BT431_CMD_AND_CURSORS&t;0x00
DECL|macro|BT431_CMD_1_1_MUX
mdefine_line|#define BT431_CMD_1_1_MUX&t;0x00
DECL|macro|BT431_CMD_4_1_MUX
mdefine_line|#define BT431_CMD_4_1_MUX&t;0x04
DECL|macro|BT431_CMD_5_1_MUX
mdefine_line|#define BT431_CMD_5_1_MUX&t;0x08
DECL|macro|BT431_CMD_xxx_MUX
mdefine_line|#define BT431_CMD_xxx_MUX&t;0x0c
DECL|macro|BT431_CMD_THICK_1
mdefine_line|#define BT431_CMD_THICK_1&t;0x00
DECL|macro|BT431_CMD_THICK_3
mdefine_line|#define BT431_CMD_THICK_3&t;0x01
DECL|macro|BT431_CMD_THICK_5
mdefine_line|#define BT431_CMD_THICK_5&t;0x02
DECL|macro|BT431_CMD_THICK_7
mdefine_line|#define BT431_CMD_THICK_7&t;0x03
DECL|function|bt431_select_reg
r_static
r_inline
r_void
id|bt431_select_reg
c_func
(paren
r_struct
id|bt431_regs
op_star
id|regs
comma
r_int
id|ir
)paren
(brace
multiline_comment|/*&n;&t; * The compiler splits the write in two bytes without these&n;&t; * helper variables.&n;&t; */
r_volatile
id|u16
op_star
id|lo
op_assign
op_amp
(paren
id|regs-&gt;addr_lo
)paren
suffix:semicolon
r_volatile
id|u16
op_star
id|hi
op_assign
op_amp
(paren
id|regs-&gt;addr_hi
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
op_star
id|lo
op_assign
id|bt431_set_value
c_func
(paren
id|ir
op_amp
l_int|0xff
)paren
suffix:semicolon
id|wmb
c_func
(paren
)paren
suffix:semicolon
op_star
id|hi
op_assign
id|bt431_set_value
c_func
(paren
(paren
id|ir
op_rshift
l_int|8
)paren
op_amp
l_int|0xff
)paren
suffix:semicolon
)brace
multiline_comment|/* Autoincrement read/write. */
DECL|function|bt431_read_reg_inc
r_static
r_inline
id|u8
id|bt431_read_reg_inc
c_func
(paren
r_struct
id|bt431_regs
op_star
id|regs
)paren
(brace
multiline_comment|/*&n;&t; * The compiler splits the write in two bytes without the&n;&t; * helper variable.&n;&t; */
r_volatile
id|u16
op_star
id|r
op_assign
op_amp
(paren
id|regs-&gt;addr_reg
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
r_return
id|bt431_get_value
c_func
(paren
op_star
id|r
)paren
suffix:semicolon
)brace
DECL|function|bt431_write_reg_inc
r_static
r_inline
r_void
id|bt431_write_reg_inc
c_func
(paren
r_struct
id|bt431_regs
op_star
id|regs
comma
id|u8
id|value
)paren
(brace
multiline_comment|/*&n;&t; * The compiler splits the write in two bytes without the&n;&t; * helper variable.&n;&t; */
r_volatile
id|u16
op_star
id|r
op_assign
op_amp
(paren
id|regs-&gt;addr_reg
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
op_star
id|r
op_assign
id|bt431_set_value
c_func
(paren
id|value
)paren
suffix:semicolon
)brace
DECL|function|bt431_read_reg
r_static
r_inline
id|u8
id|bt431_read_reg
c_func
(paren
r_struct
id|bt431_regs
op_star
id|regs
comma
r_int
id|ir
)paren
(brace
id|bt431_select_reg
c_func
(paren
id|regs
comma
id|ir
)paren
suffix:semicolon
r_return
id|bt431_read_reg_inc
c_func
(paren
id|regs
)paren
suffix:semicolon
)brace
DECL|function|bt431_write_reg
r_static
r_inline
r_void
id|bt431_write_reg
c_func
(paren
r_struct
id|bt431_regs
op_star
id|regs
comma
r_int
id|ir
comma
id|u8
id|value
)paren
(brace
id|bt431_select_reg
c_func
(paren
id|regs
comma
id|ir
)paren
suffix:semicolon
id|bt431_write_reg_inc
c_func
(paren
id|regs
comma
id|value
)paren
suffix:semicolon
)brace
multiline_comment|/* Autoincremented read/write for the cursor map. */
DECL|function|bt431_read_cmap_inc
r_static
r_inline
id|u16
id|bt431_read_cmap_inc
c_func
(paren
r_struct
id|bt431_regs
op_star
id|regs
)paren
(brace
multiline_comment|/*&n;&t; * The compiler splits the write in two bytes without the&n;&t; * helper variable.&n;&t; */
r_volatile
id|u16
op_star
id|r
op_assign
op_amp
(paren
id|regs-&gt;addr_cmap
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
r_return
op_star
id|r
suffix:semicolon
)brace
DECL|function|bt431_write_cmap_inc
r_static
r_inline
r_void
id|bt431_write_cmap_inc
c_func
(paren
r_struct
id|bt431_regs
op_star
id|regs
comma
id|u16
id|value
)paren
(brace
multiline_comment|/*&n;&t; * The compiler splits the write in two bytes without the&n;&t; * helper variable.&n;&t; */
r_volatile
id|u16
op_star
id|r
op_assign
op_amp
(paren
id|regs-&gt;addr_cmap
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
op_star
id|r
op_assign
id|value
suffix:semicolon
)brace
DECL|function|bt431_read_cmap
r_static
r_inline
id|u16
id|bt431_read_cmap
c_func
(paren
r_struct
id|bt431_regs
op_star
id|regs
comma
r_int
id|cr
)paren
(brace
id|bt431_select_reg
c_func
(paren
id|regs
comma
id|cr
)paren
suffix:semicolon
r_return
id|bt431_read_cmap_inc
c_func
(paren
id|regs
)paren
suffix:semicolon
)brace
DECL|function|bt431_write_cmap
r_static
r_inline
r_void
id|bt431_write_cmap
c_func
(paren
r_struct
id|bt431_regs
op_star
id|regs
comma
r_int
id|cr
comma
id|u16
id|value
)paren
(brace
id|bt431_select_reg
c_func
(paren
id|regs
comma
id|cr
)paren
suffix:semicolon
id|bt431_write_cmap_inc
c_func
(paren
id|regs
comma
id|value
)paren
suffix:semicolon
)brace
DECL|function|bt431_enable_cursor
r_static
r_inline
r_void
id|bt431_enable_cursor
c_func
(paren
r_struct
id|bt431_regs
op_star
id|regs
)paren
(brace
id|bt431_write_reg
c_func
(paren
id|regs
comma
id|BT431_REG_CMD
comma
id|BT431_CMD_CURS_ENABLE
op_or
id|BT431_CMD_OR_CURSORS
op_or
id|BT431_CMD_4_1_MUX
op_or
id|BT431_CMD_THICK_1
)paren
suffix:semicolon
)brace
DECL|function|bt431_erase_cursor
r_static
r_inline
r_void
id|bt431_erase_cursor
c_func
(paren
r_struct
id|bt431_regs
op_star
id|regs
)paren
(brace
id|bt431_write_reg
c_func
(paren
id|regs
comma
id|BT431_REG_CMD
comma
id|BT431_CMD_4_1_MUX
)paren
suffix:semicolon
)brace
DECL|function|bt431_position_cursor
r_static
r_inline
r_void
id|bt431_position_cursor
c_func
(paren
r_struct
id|bt431_regs
op_star
id|regs
comma
id|u16
id|x
comma
id|u16
id|y
)paren
(brace
multiline_comment|/*&n;&t; * Magic from the MACH sources.&n;&t; *&n;&t; * Cx = x + D + H - P&n;&t; *  P = 37 if 1:1, 52 if 4:1, 57 if 5:1&n;&t; *  D = pixel skew between outdata and external data&n;&t; *  H = pixels between HSYNCH falling and active video&n;&t; *&n;&t; * Cy = y + V - 32&n;&t; *  V = scanlines between HSYNCH falling, two or more&n;&t; *      clocks after VSYNCH falling, and active video&n;&t; */
id|x
op_add_assign
l_int|412
op_minus
l_int|52
suffix:semicolon
id|y
op_add_assign
l_int|68
op_minus
l_int|32
suffix:semicolon
multiline_comment|/* Use autoincrement. */
id|bt431_select_reg
c_func
(paren
id|regs
comma
id|BT431_REG_CXLO
)paren
suffix:semicolon
id|bt431_write_reg_inc
c_func
(paren
id|regs
comma
id|x
op_amp
l_int|0xff
)paren
suffix:semicolon
multiline_comment|/* BT431_REG_CXLO */
id|bt431_write_reg_inc
c_func
(paren
id|regs
comma
(paren
id|x
op_rshift
l_int|8
)paren
op_amp
l_int|0x0f
)paren
suffix:semicolon
multiline_comment|/* BT431_REG_CXHI */
id|bt431_write_reg_inc
c_func
(paren
id|regs
comma
id|y
op_amp
l_int|0xff
)paren
suffix:semicolon
multiline_comment|/* BT431_REG_CYLO */
id|bt431_write_reg_inc
c_func
(paren
id|regs
comma
(paren
id|y
op_rshift
l_int|8
)paren
op_amp
l_int|0x0f
)paren
suffix:semicolon
multiline_comment|/* BT431_REG_CYHI */
)brace
DECL|function|bt431_set_font
r_static
r_inline
r_void
id|bt431_set_font
c_func
(paren
r_struct
id|bt431_regs
op_star
id|regs
comma
id|u8
id|fgc
comma
id|u16
id|width
comma
id|u16
id|height
)paren
(brace
r_int
id|i
suffix:semicolon
id|u16
id|fgp
op_assign
id|fgc
ques
c_cond
l_int|0xffff
suffix:colon
l_int|0x0000
suffix:semicolon
id|u16
id|bgp
op_assign
id|fgc
ques
c_cond
l_int|0x0000
suffix:colon
l_int|0xffff
suffix:semicolon
id|bt431_select_reg
c_func
(paren
id|regs
comma
id|BT431_REG_CRAM_BASE
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
id|BT431_REG_CRAM_BASE
suffix:semicolon
id|i
op_le
id|BT431_REG_CRAM_END
suffix:semicolon
id|i
op_increment
)paren
(brace
id|u16
id|value
suffix:semicolon
r_if
c_cond
(paren
id|height
op_lshift
l_int|6
op_le
id|i
op_lshift
l_int|3
)paren
id|value
op_assign
id|bgp
suffix:semicolon
r_else
r_if
c_cond
(paren
id|width
op_le
id|i
op_mod
l_int|8
op_lshift
l_int|3
)paren
id|value
op_assign
id|bgp
suffix:semicolon
r_else
r_if
c_cond
(paren
(paren
(paren
id|width
op_rshift
l_int|3
)paren
op_amp
l_int|0xffff
)paren
OG
id|i
op_mod
l_int|8
)paren
id|value
op_assign
id|fgp
suffix:semicolon
r_else
id|value
op_assign
id|fgp
op_amp
op_complement
(paren
id|bgp
op_lshift
(paren
id|width
op_mod
l_int|8
op_lshift
l_int|1
)paren
)paren
suffix:semicolon
id|bt431_write_cmap_inc
c_func
(paren
id|regs
comma
id|value
)paren
suffix:semicolon
)brace
)brace
DECL|function|bt431_init_cursor
r_static
r_inline
r_void
id|bt431_init_cursor
c_func
(paren
r_struct
id|bt431_regs
op_star
id|regs
)paren
(brace
multiline_comment|/* no crosshair window */
id|bt431_select_reg
c_func
(paren
id|regs
comma
id|BT431_REG_WXLO
)paren
suffix:semicolon
id|bt431_write_reg_inc
c_func
(paren
id|regs
comma
l_int|0x00
)paren
suffix:semicolon
multiline_comment|/* BT431_REG_WXLO */
id|bt431_write_reg_inc
c_func
(paren
id|regs
comma
l_int|0x00
)paren
suffix:semicolon
multiline_comment|/* BT431_REG_WXHI */
id|bt431_write_reg_inc
c_func
(paren
id|regs
comma
l_int|0x00
)paren
suffix:semicolon
multiline_comment|/* BT431_REG_WYLO */
id|bt431_write_reg_inc
c_func
(paren
id|regs
comma
l_int|0x00
)paren
suffix:semicolon
multiline_comment|/* BT431_REG_WYHI */
id|bt431_write_reg_inc
c_func
(paren
id|regs
comma
l_int|0x00
)paren
suffix:semicolon
multiline_comment|/* BT431_REG_WWLO */
id|bt431_write_reg_inc
c_func
(paren
id|regs
comma
l_int|0x00
)paren
suffix:semicolon
multiline_comment|/* BT431_REG_WWHI */
id|bt431_write_reg_inc
c_func
(paren
id|regs
comma
l_int|0x00
)paren
suffix:semicolon
multiline_comment|/* BT431_REG_WHLO */
id|bt431_write_reg_inc
c_func
(paren
id|regs
comma
l_int|0x00
)paren
suffix:semicolon
multiline_comment|/* BT431_REG_WHHI */
)brace
eof
