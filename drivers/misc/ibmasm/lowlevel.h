multiline_comment|/*&n; * IBM ASM Service Processor Device Driver&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2 of the License, or&n; * (at your option) any later version.&n; *&n; * This program is distributed in the hope that it will be useful,&n; * but WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; * GNU General Public License for more details.&n; *&n; * You should have received a copy of the GNU General Public License&n; * along with this program; if not, write to the Free Software&n; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&n; *&n; * Copyright (C) IBM Corporation, 2004&n; *&n; * Author: Max Asb&#xfffd;ck &lt;amax@us.ibm.com&gt; &n; *&n; */
multiline_comment|/* Condor service processor specific hardware definitions */
macro_line|#ifndef __IBMASM_CONDOR_H__
DECL|macro|__IBMASM_CONDOR_H__
mdefine_line|#define __IBMASM_CONDOR_H__
macro_line|#include &lt;asm/io.h&gt;
DECL|macro|VENDORID_IBM
mdefine_line|#define VENDORID_IBM&t;0x1014
DECL|macro|DEVICEID_RSA
mdefine_line|#define DEVICEID_RSA&t;0x010F
DECL|macro|GET_MFA_ADDR
mdefine_line|#define GET_MFA_ADDR(x)  (x &amp; 0xFFFFFF00)
DECL|macro|MAILBOX_FULL
mdefine_line|#define MAILBOX_FULL(x)  (x &amp; 0x00000001)
DECL|macro|NO_MFAS_AVAILABLE
mdefine_line|#define NO_MFAS_AVAILABLE     0xFFFFFFFF
DECL|macro|INBOUND_QUEUE_PORT
mdefine_line|#define INBOUND_QUEUE_PORT   0x40  /* contains address of next free MFA */
DECL|macro|OUTBOUND_QUEUE_PORT
mdefine_line|#define OUTBOUND_QUEUE_PORT  0x44  /* contains address of posted MFA    */
DECL|macro|SP_INTR_MASK
mdefine_line|#define SP_INTR_MASK&t;0x00000008
DECL|macro|UART_INTR_MASK
mdefine_line|#define UART_INTR_MASK&t;0x00000010
DECL|macro|INTR_STATUS_REGISTER
mdefine_line|#define INTR_STATUS_REGISTER   0x13A0
DECL|macro|INTR_CONTROL_REGISTER
mdefine_line|#define INTR_CONTROL_REGISTER  0x13A4
DECL|macro|SCOUT_COM_A_BASE
mdefine_line|#define SCOUT_COM_A_BASE         0x0000
DECL|macro|SCOUT_COM_B_BASE
mdefine_line|#define SCOUT_COM_B_BASE         0x0100   
DECL|macro|SCOUT_COM_C_BASE
mdefine_line|#define SCOUT_COM_C_BASE         0x0200   
DECL|macro|SCOUT_COM_D_BASE
mdefine_line|#define SCOUT_COM_D_BASE         0x0300   
DECL|function|sp_interrupt_pending
r_static
r_inline
r_int
id|sp_interrupt_pending
c_func
(paren
r_void
op_star
id|base_address
)paren
(brace
r_return
id|SP_INTR_MASK
op_amp
id|readl
c_func
(paren
id|base_address
op_plus
id|INTR_STATUS_REGISTER
)paren
suffix:semicolon
)brace
DECL|function|uart_interrupt_pending
r_static
r_inline
r_int
id|uart_interrupt_pending
c_func
(paren
r_void
op_star
id|base_address
)paren
(brace
r_return
id|UART_INTR_MASK
op_amp
id|readl
c_func
(paren
id|base_address
op_plus
id|INTR_STATUS_REGISTER
)paren
suffix:semicolon
)brace
DECL|function|ibmasm_enable_interrupts
r_static
r_inline
r_void
id|ibmasm_enable_interrupts
c_func
(paren
r_void
op_star
id|base_address
comma
r_int
id|mask
)paren
(brace
r_void
op_star
id|ctrl_reg
op_assign
id|base_address
op_plus
id|INTR_CONTROL_REGISTER
suffix:semicolon
id|writel
c_func
(paren
id|readl
c_func
(paren
id|ctrl_reg
)paren
op_amp
op_complement
id|mask
comma
id|ctrl_reg
)paren
suffix:semicolon
)brace
DECL|function|ibmasm_disable_interrupts
r_static
r_inline
r_void
id|ibmasm_disable_interrupts
c_func
(paren
r_void
op_star
id|base_address
comma
r_int
id|mask
)paren
(brace
r_void
op_star
id|ctrl_reg
op_assign
id|base_address
op_plus
id|INTR_CONTROL_REGISTER
suffix:semicolon
id|writel
c_func
(paren
id|readl
c_func
(paren
id|ctrl_reg
)paren
op_or
id|mask
comma
id|ctrl_reg
)paren
suffix:semicolon
)brace
DECL|function|enable_sp_interrupts
r_static
r_inline
r_void
id|enable_sp_interrupts
c_func
(paren
r_void
op_star
id|base_address
)paren
(brace
id|ibmasm_enable_interrupts
c_func
(paren
id|base_address
comma
id|SP_INTR_MASK
)paren
suffix:semicolon
)brace
DECL|function|disable_sp_interrupts
r_static
r_inline
r_void
id|disable_sp_interrupts
c_func
(paren
r_void
op_star
id|base_address
)paren
(brace
id|ibmasm_disable_interrupts
c_func
(paren
id|base_address
comma
id|SP_INTR_MASK
)paren
suffix:semicolon
)brace
DECL|function|enable_uart_interrupts
r_static
r_inline
r_void
id|enable_uart_interrupts
c_func
(paren
r_void
op_star
id|base_address
)paren
(brace
id|ibmasm_enable_interrupts
c_func
(paren
id|base_address
comma
id|UART_INTR_MASK
)paren
suffix:semicolon
)brace
DECL|function|disable_uart_interrupts
r_static
r_inline
r_void
id|disable_uart_interrupts
c_func
(paren
r_void
op_star
id|base_address
)paren
(brace
id|ibmasm_disable_interrupts
c_func
(paren
id|base_address
comma
id|UART_INTR_MASK
)paren
suffix:semicolon
)brace
DECL|macro|valid_mfa
mdefine_line|#define valid_mfa(mfa)&t;( (mfa) != NO_MFAS_AVAILABLE )
DECL|function|get_mfa_outbound
r_static
r_inline
id|u32
id|get_mfa_outbound
c_func
(paren
r_void
op_star
id|base_address
)paren
(brace
r_int
id|retry
suffix:semicolon
id|u32
id|mfa
suffix:semicolon
r_for
c_loop
(paren
id|retry
op_assign
l_int|0
suffix:semicolon
id|retry
op_le
l_int|10
suffix:semicolon
id|retry
op_increment
)paren
(brace
id|mfa
op_assign
id|readl
c_func
(paren
id|base_address
op_plus
id|OUTBOUND_QUEUE_PORT
)paren
suffix:semicolon
r_if
c_cond
(paren
id|valid_mfa
c_func
(paren
id|mfa
)paren
)paren
r_break
suffix:semicolon
)brace
r_return
id|mfa
suffix:semicolon
)brace
DECL|function|set_mfa_outbound
r_static
r_inline
r_void
id|set_mfa_outbound
c_func
(paren
r_void
op_star
id|base_address
comma
id|u32
id|mfa
)paren
(brace
id|writel
c_func
(paren
id|mfa
comma
id|base_address
op_plus
id|OUTBOUND_QUEUE_PORT
)paren
suffix:semicolon
)brace
DECL|function|get_mfa_inbound
r_static
r_inline
id|u32
id|get_mfa_inbound
c_func
(paren
r_void
op_star
id|base_address
)paren
(brace
id|u32
id|mfa
op_assign
id|readl
c_func
(paren
id|base_address
op_plus
id|INBOUND_QUEUE_PORT
)paren
suffix:semicolon
r_if
c_cond
(paren
id|MAILBOX_FULL
c_func
(paren
id|mfa
)paren
)paren
r_return
l_int|0
suffix:semicolon
r_return
id|mfa
suffix:semicolon
)brace
DECL|function|set_mfa_inbound
r_static
r_inline
r_void
id|set_mfa_inbound
c_func
(paren
r_void
op_star
id|base_address
comma
id|u32
id|mfa
)paren
(brace
id|writel
c_func
(paren
id|mfa
comma
id|base_address
op_plus
id|INBOUND_QUEUE_PORT
)paren
suffix:semicolon
)brace
DECL|function|get_i2o_message
r_static
r_inline
r_struct
id|i2o_message
op_star
id|get_i2o_message
c_func
(paren
r_void
op_star
id|base_address
comma
id|u32
id|mfa
)paren
(brace
r_return
(paren
r_struct
id|i2o_message
op_star
)paren
(paren
id|GET_MFA_ADDR
c_func
(paren
id|mfa
)paren
op_plus
id|base_address
)paren
suffix:semicolon
)brace
macro_line|#endif /* __IBMASM_CONDOR_H__ */
eof
