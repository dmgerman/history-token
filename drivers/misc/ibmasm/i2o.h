multiline_comment|/*&n; * IBM ASM Service Processor Device Driver&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2 of the License, or&n; * (at your option) any later version.&n; *&n; * This program is distributed in the hope that it will be useful,&n; * but WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; * GNU General Public License for more details.&n; *&n; * You should have received a copy of the GNU General Public License&n; * along with this program; if not, write to the Free Software&n; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&n; *&n; * Copyright (C) IBM Corporation, 2004&n; *&n; * Author: Max Asb&#xfffd;ck &lt;amax@us.ibm.com&gt; &n; *&n; */
macro_line|#pragma pack(1)
DECL|struct|i2o_header
r_struct
id|i2o_header
(brace
DECL|member|version
id|u8
id|version
suffix:semicolon
DECL|member|message_flags
id|u8
id|message_flags
suffix:semicolon
DECL|member|message_size
id|u16
id|message_size
suffix:semicolon
DECL|member|target
id|u8
id|target
suffix:semicolon
DECL|member|initiator_and_target
id|u8
id|initiator_and_target
suffix:semicolon
DECL|member|initiator
id|u8
id|initiator
suffix:semicolon
DECL|member|function
id|u8
id|function
suffix:semicolon
DECL|member|initiator_context
id|u32
id|initiator_context
suffix:semicolon
)brace
suffix:semicolon
macro_line|#pragma pack()
DECL|macro|I2O_HEADER_TEMPLATE
mdefine_line|#define I2O_HEADER_TEMPLATE &bslash;&n;      { .version              = 0x01, &bslash;&n;&t;.message_flags        = 0x00, &bslash;&n;&t;.function             = 0xFF, &bslash;&n;&t;.initiator            = 0x00, &bslash;&n;&t;.initiator_and_target = 0x40, &bslash;&n;&t;.target               = 0x00, &bslash;&n;&t;.initiator_context    = 0x0 }
DECL|macro|I2O_MESSAGE_SIZE
mdefine_line|#define I2O_MESSAGE_SIZE&t;0x1000
DECL|macro|I2O_COMMAND_SIZE
mdefine_line|#define I2O_COMMAND_SIZE&t;(I2O_MESSAGE_SIZE - sizeof(struct i2o_header))
macro_line|#pragma pack(1)
DECL|struct|i2o_message
r_struct
id|i2o_message
(brace
DECL|member|header
r_struct
id|i2o_header
id|header
suffix:semicolon
DECL|member|data
r_void
op_star
id|data
suffix:semicolon
)brace
suffix:semicolon
macro_line|#pragma pack()
DECL|function|outgoing_message_size
r_static
r_inline
r_int
r_int
id|outgoing_message_size
c_func
(paren
r_int
r_int
id|data_size
)paren
(brace
r_int
r_int
id|size
suffix:semicolon
r_int
r_int
id|i2o_size
suffix:semicolon
r_if
c_cond
(paren
id|data_size
OG
id|I2O_COMMAND_SIZE
)paren
id|data_size
op_assign
id|I2O_COMMAND_SIZE
suffix:semicolon
id|size
op_assign
r_sizeof
(paren
r_struct
id|i2o_header
)paren
op_plus
id|data_size
suffix:semicolon
id|i2o_size
op_assign
id|size
op_div
r_sizeof
(paren
id|u32
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
op_mod
r_sizeof
(paren
id|u32
)paren
)paren
id|i2o_size
op_increment
suffix:semicolon
r_return
id|i2o_size
suffix:semicolon
)brace
DECL|function|incoming_data_size
r_static
r_inline
id|u32
id|incoming_data_size
c_func
(paren
r_struct
id|i2o_message
op_star
id|i2o_message
)paren
(brace
r_return
(paren
r_sizeof
(paren
id|u32
)paren
op_star
id|i2o_message-&gt;header.message_size
)paren
suffix:semicolon
)brace
eof
