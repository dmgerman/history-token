multiline_comment|/*&n; * Copyright (c) 2004 Topspin Communications.  All rights reserved.&n; *&n; * This software is available to you under a choice of one of two&n; * licenses.  You may choose to be licensed under the terms of the GNU&n; * General Public License (GPL) Version 2, available from the file&n; * COPYING in the main directory of this source tree, or the&n; * OpenIB.org BSD license below:&n; *&n; *     Redistribution and use in source and binary forms, with or&n; *     without modification, are permitted provided that the following&n; *     conditions are met:&n; *&n; *      - Redistributions of source code must retain the above&n; *        copyright notice, this list of conditions and the following&n; *        disclaimer.&n; *&n; *      - Redistributions in binary form must reproduce the above&n; *        copyright notice, this list of conditions and the following&n; *        disclaimer in the documentation and/or other materials&n; *        provided with the distribution.&n; *&n; * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,&n; * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF&n; * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND&n; * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS&n; * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN&n; * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN&n; * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&n; * SOFTWARE.&n; *&n; * $Id$&n; */
macro_line|#ifndef MTHCA_MEMFREE_H
DECL|macro|MTHCA_MEMFREE_H
mdefine_line|#define MTHCA_MEMFREE_H
macro_line|#include &lt;linux/list.h&gt;
macro_line|#include &lt;linux/pci.h&gt;
DECL|macro|MTHCA_ICM_CHUNK_LEN
mdefine_line|#define MTHCA_ICM_CHUNK_LEN &bslash;&n;&t;((512 - sizeof (struct list_head) - 2 * sizeof (int)) /&t;&t;&bslash;&n;&t; (sizeof (struct scatterlist)))
DECL|struct|mthca_icm_chunk
r_struct
id|mthca_icm_chunk
(brace
DECL|member|list
r_struct
id|list_head
id|list
suffix:semicolon
DECL|member|npages
r_int
id|npages
suffix:semicolon
DECL|member|nsg
r_int
id|nsg
suffix:semicolon
DECL|member|mem
r_struct
id|scatterlist
id|mem
(braket
id|MTHCA_ICM_CHUNK_LEN
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|mthca_icm
r_struct
id|mthca_icm
(brace
DECL|member|chunk_list
r_struct
id|list_head
id|chunk_list
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|mthca_icm_iter
r_struct
id|mthca_icm_iter
(brace
DECL|member|icm
r_struct
id|mthca_icm
op_star
id|icm
suffix:semicolon
DECL|member|chunk
r_struct
id|mthca_icm_chunk
op_star
id|chunk
suffix:semicolon
DECL|member|page_idx
r_int
id|page_idx
suffix:semicolon
)brace
suffix:semicolon
r_struct
id|mthca_dev
suffix:semicolon
r_struct
id|mthca_icm
op_star
id|mthca_alloc_icm
c_func
(paren
r_struct
id|mthca_dev
op_star
id|dev
comma
r_int
id|npages
comma
r_int
r_int
id|gfp_mask
)paren
suffix:semicolon
r_void
id|mthca_free_icm
c_func
(paren
r_struct
id|mthca_dev
op_star
id|dev
comma
r_struct
id|mthca_icm
op_star
id|icm
)paren
suffix:semicolon
DECL|function|mthca_icm_first
r_static
r_inline
r_void
id|mthca_icm_first
c_func
(paren
r_struct
id|mthca_icm
op_star
id|icm
comma
r_struct
id|mthca_icm_iter
op_star
id|iter
)paren
(brace
id|iter-&gt;icm
op_assign
id|icm
suffix:semicolon
id|iter-&gt;chunk
op_assign
id|list_empty
c_func
(paren
op_amp
id|icm-&gt;chunk_list
)paren
ques
c_cond
l_int|NULL
suffix:colon
id|list_entry
c_func
(paren
id|icm-&gt;chunk_list.next
comma
r_struct
id|mthca_icm_chunk
comma
id|list
)paren
suffix:semicolon
id|iter-&gt;page_idx
op_assign
l_int|0
suffix:semicolon
)brace
DECL|function|mthca_icm_last
r_static
r_inline
r_int
id|mthca_icm_last
c_func
(paren
r_struct
id|mthca_icm_iter
op_star
id|iter
)paren
(brace
r_return
op_logical_neg
id|iter-&gt;chunk
suffix:semicolon
)brace
DECL|function|mthca_icm_next
r_static
r_inline
r_void
id|mthca_icm_next
c_func
(paren
r_struct
id|mthca_icm_iter
op_star
id|iter
)paren
(brace
r_if
c_cond
(paren
op_increment
id|iter-&gt;page_idx
op_ge
id|iter-&gt;chunk-&gt;nsg
)paren
(brace
r_if
c_cond
(paren
id|iter-&gt;chunk-&gt;list.next
op_eq
op_amp
id|iter-&gt;icm-&gt;chunk_list
)paren
(brace
id|iter-&gt;chunk
op_assign
l_int|NULL
suffix:semicolon
r_return
suffix:semicolon
)brace
id|iter-&gt;chunk
op_assign
id|list_entry
c_func
(paren
id|iter-&gt;chunk-&gt;list.next
comma
r_struct
id|mthca_icm_chunk
comma
id|list
)paren
suffix:semicolon
id|iter-&gt;page_idx
op_assign
l_int|0
suffix:semicolon
)brace
)brace
DECL|function|mthca_icm_addr
r_static
r_inline
id|dma_addr_t
id|mthca_icm_addr
c_func
(paren
r_struct
id|mthca_icm_iter
op_star
id|iter
)paren
(brace
r_return
id|sg_dma_address
c_func
(paren
op_amp
id|iter-&gt;chunk-&gt;mem
(braket
id|iter-&gt;page_idx
)braket
)paren
suffix:semicolon
)brace
DECL|function|mthca_icm_size
r_static
r_inline
r_int
r_int
id|mthca_icm_size
c_func
(paren
r_struct
id|mthca_icm_iter
op_star
id|iter
)paren
(brace
r_return
id|sg_dma_len
c_func
(paren
op_amp
id|iter-&gt;chunk-&gt;mem
(braket
id|iter-&gt;page_idx
)braket
)paren
suffix:semicolon
)brace
macro_line|#endif /* MTHCA_MEMFREE_H */
eof
