multiline_comment|/*&n; * Copyright (c) 2004 Mellanox Technologies Ltd.  All rights reserved.&n; * Copyright (c) 2004 Infinicon Corporation.  All rights reserved.&n; * Copyright (c) 2004 Intel Corporation.  All rights reserved.&n; * Copyright (c) 2004 Topspin Corporation.  All rights reserved.&n; * Copyright (c) 2004 Voltaire Corporation.  All rights reserved.&n; *&n; * This software is available to you under a choice of one of two&n; * licenses.  You may choose to be licensed under the terms of the GNU&n; * General Public License (GPL) Version 2, available from the file&n; * COPYING in the main directory of this source tree, or the&n; * OpenIB.org BSD license below:&n; *&n; *     Redistribution and use in source and binary forms, with or&n; *     without modification, are permitted provided that the following&n; *     conditions are met:&n; *&n; *      - Redistributions of source code must retain the above&n; *        copyright notice, this list of conditions and the following&n; *        disclaimer.&n; *&n; *      - Redistributions in binary form must reproduce the above&n; *        copyright notice, this list of conditions and the following&n; *        disclaimer in the documentation and/or other materials&n; *        provided with the distribution.&n; *&n; * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,&n; * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF&n; * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND&n; * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS&n; * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN&n; * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN&n; * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&n; * SOFTWARE.&n; *&n; * $Id: ib_verbs.h 1349 2004-12-16 21:09:43Z roland $&n; */
macro_line|#if !defined(IB_VERBS_H)
DECL|macro|IB_VERBS_H
mdefine_line|#define IB_VERBS_H
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/device.h&gt;
macro_line|#include &lt;asm/atomic.h&gt;
DECL|union|ib_gid
r_union
id|ib_gid
(brace
DECL|member|raw
id|u8
id|raw
(braket
l_int|16
)braket
suffix:semicolon
r_struct
(brace
DECL|member|subnet_prefix
id|u64
id|subnet_prefix
suffix:semicolon
DECL|member|interface_id
id|u64
id|interface_id
suffix:semicolon
DECL|member|global
)brace
id|global
suffix:semicolon
)brace
suffix:semicolon
DECL|enum|ib_node_type
r_enum
id|ib_node_type
(brace
DECL|enumerator|IB_NODE_CA
id|IB_NODE_CA
op_assign
l_int|1
comma
DECL|enumerator|IB_NODE_SWITCH
id|IB_NODE_SWITCH
comma
DECL|enumerator|IB_NODE_ROUTER
id|IB_NODE_ROUTER
)brace
suffix:semicolon
DECL|enum|ib_device_cap_flags
r_enum
id|ib_device_cap_flags
(brace
DECL|enumerator|IB_DEVICE_RESIZE_MAX_WR
id|IB_DEVICE_RESIZE_MAX_WR
op_assign
l_int|1
comma
DECL|enumerator|IB_DEVICE_BAD_PKEY_CNTR
id|IB_DEVICE_BAD_PKEY_CNTR
op_assign
(paren
l_int|1
op_lshift
l_int|1
)paren
comma
DECL|enumerator|IB_DEVICE_BAD_QKEY_CNTR
id|IB_DEVICE_BAD_QKEY_CNTR
op_assign
(paren
l_int|1
op_lshift
l_int|2
)paren
comma
DECL|enumerator|IB_DEVICE_RAW_MULTI
id|IB_DEVICE_RAW_MULTI
op_assign
(paren
l_int|1
op_lshift
l_int|3
)paren
comma
DECL|enumerator|IB_DEVICE_AUTO_PATH_MIG
id|IB_DEVICE_AUTO_PATH_MIG
op_assign
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
DECL|enumerator|IB_DEVICE_CHANGE_PHY_PORT
id|IB_DEVICE_CHANGE_PHY_PORT
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
comma
DECL|enumerator|IB_DEVICE_UD_AV_PORT_ENFORCE
id|IB_DEVICE_UD_AV_PORT_ENFORCE
op_assign
(paren
l_int|1
op_lshift
l_int|6
)paren
comma
DECL|enumerator|IB_DEVICE_CURR_QP_STATE_MOD
id|IB_DEVICE_CURR_QP_STATE_MOD
op_assign
(paren
l_int|1
op_lshift
l_int|7
)paren
comma
DECL|enumerator|IB_DEVICE_SHUTDOWN_PORT
id|IB_DEVICE_SHUTDOWN_PORT
op_assign
(paren
l_int|1
op_lshift
l_int|8
)paren
comma
DECL|enumerator|IB_DEVICE_INIT_TYPE
id|IB_DEVICE_INIT_TYPE
op_assign
(paren
l_int|1
op_lshift
l_int|9
)paren
comma
DECL|enumerator|IB_DEVICE_PORT_ACTIVE_EVENT
id|IB_DEVICE_PORT_ACTIVE_EVENT
op_assign
(paren
l_int|1
op_lshift
l_int|10
)paren
comma
DECL|enumerator|IB_DEVICE_SYS_IMAGE_GUID
id|IB_DEVICE_SYS_IMAGE_GUID
op_assign
(paren
l_int|1
op_lshift
l_int|11
)paren
comma
DECL|enumerator|IB_DEVICE_RC_RNR_NAK_GEN
id|IB_DEVICE_RC_RNR_NAK_GEN
op_assign
(paren
l_int|1
op_lshift
l_int|12
)paren
comma
DECL|enumerator|IB_DEVICE_SRQ_RESIZE
id|IB_DEVICE_SRQ_RESIZE
op_assign
(paren
l_int|1
op_lshift
l_int|13
)paren
comma
DECL|enumerator|IB_DEVICE_N_NOTIFY_CQ
id|IB_DEVICE_N_NOTIFY_CQ
op_assign
(paren
l_int|1
op_lshift
l_int|14
)paren
comma
)brace
suffix:semicolon
DECL|enum|ib_atomic_cap
r_enum
id|ib_atomic_cap
(brace
DECL|enumerator|IB_ATOMIC_NONE
id|IB_ATOMIC_NONE
comma
DECL|enumerator|IB_ATOMIC_HCA
id|IB_ATOMIC_HCA
comma
DECL|enumerator|IB_ATOMIC_GLOB
id|IB_ATOMIC_GLOB
)brace
suffix:semicolon
DECL|struct|ib_device_attr
r_struct
id|ib_device_attr
(brace
DECL|member|fw_ver
id|u64
id|fw_ver
suffix:semicolon
DECL|member|node_guid
id|u64
id|node_guid
suffix:semicolon
DECL|member|sys_image_guid
id|u64
id|sys_image_guid
suffix:semicolon
DECL|member|max_mr_size
id|u64
id|max_mr_size
suffix:semicolon
DECL|member|page_size_cap
id|u64
id|page_size_cap
suffix:semicolon
DECL|member|vendor_id
id|u32
id|vendor_id
suffix:semicolon
DECL|member|vendor_part_id
id|u32
id|vendor_part_id
suffix:semicolon
DECL|member|hw_ver
id|u32
id|hw_ver
suffix:semicolon
DECL|member|max_qp
r_int
id|max_qp
suffix:semicolon
DECL|member|max_qp_wr
r_int
id|max_qp_wr
suffix:semicolon
DECL|member|device_cap_flags
r_int
id|device_cap_flags
suffix:semicolon
DECL|member|max_sge
r_int
id|max_sge
suffix:semicolon
DECL|member|max_sge_rd
r_int
id|max_sge_rd
suffix:semicolon
DECL|member|max_cq
r_int
id|max_cq
suffix:semicolon
DECL|member|max_cqe
r_int
id|max_cqe
suffix:semicolon
DECL|member|max_mr
r_int
id|max_mr
suffix:semicolon
DECL|member|max_pd
r_int
id|max_pd
suffix:semicolon
DECL|member|max_qp_rd_atom
r_int
id|max_qp_rd_atom
suffix:semicolon
DECL|member|max_ee_rd_atom
r_int
id|max_ee_rd_atom
suffix:semicolon
DECL|member|max_res_rd_atom
r_int
id|max_res_rd_atom
suffix:semicolon
DECL|member|max_qp_init_rd_atom
r_int
id|max_qp_init_rd_atom
suffix:semicolon
DECL|member|max_ee_init_rd_atom
r_int
id|max_ee_init_rd_atom
suffix:semicolon
DECL|member|atomic_cap
r_enum
id|ib_atomic_cap
id|atomic_cap
suffix:semicolon
DECL|member|max_ee
r_int
id|max_ee
suffix:semicolon
DECL|member|max_rdd
r_int
id|max_rdd
suffix:semicolon
DECL|member|max_mw
r_int
id|max_mw
suffix:semicolon
DECL|member|max_raw_ipv6_qp
r_int
id|max_raw_ipv6_qp
suffix:semicolon
DECL|member|max_raw_ethy_qp
r_int
id|max_raw_ethy_qp
suffix:semicolon
DECL|member|max_mcast_grp
r_int
id|max_mcast_grp
suffix:semicolon
DECL|member|max_mcast_qp_attach
r_int
id|max_mcast_qp_attach
suffix:semicolon
DECL|member|max_total_mcast_qp_attach
r_int
id|max_total_mcast_qp_attach
suffix:semicolon
DECL|member|max_ah
r_int
id|max_ah
suffix:semicolon
DECL|member|max_fmr
r_int
id|max_fmr
suffix:semicolon
DECL|member|max_map_per_fmr
r_int
id|max_map_per_fmr
suffix:semicolon
DECL|member|max_srq
r_int
id|max_srq
suffix:semicolon
DECL|member|max_srq_wr
r_int
id|max_srq_wr
suffix:semicolon
DECL|member|max_srq_sge
r_int
id|max_srq_sge
suffix:semicolon
DECL|member|max_pkeys
id|u16
id|max_pkeys
suffix:semicolon
DECL|member|local_ca_ack_delay
id|u8
id|local_ca_ack_delay
suffix:semicolon
)brace
suffix:semicolon
DECL|enum|ib_mtu
r_enum
id|ib_mtu
(brace
DECL|enumerator|IB_MTU_256
id|IB_MTU_256
op_assign
l_int|1
comma
DECL|enumerator|IB_MTU_512
id|IB_MTU_512
op_assign
l_int|2
comma
DECL|enumerator|IB_MTU_1024
id|IB_MTU_1024
op_assign
l_int|3
comma
DECL|enumerator|IB_MTU_2048
id|IB_MTU_2048
op_assign
l_int|4
comma
DECL|enumerator|IB_MTU_4096
id|IB_MTU_4096
op_assign
l_int|5
)brace
suffix:semicolon
DECL|function|ib_mtu_enum_to_int
r_static
r_inline
r_int
id|ib_mtu_enum_to_int
c_func
(paren
r_enum
id|ib_mtu
id|mtu
)paren
(brace
r_switch
c_cond
(paren
id|mtu
)paren
(brace
r_case
id|IB_MTU_256
suffix:colon
r_return
l_int|256
suffix:semicolon
r_case
id|IB_MTU_512
suffix:colon
r_return
l_int|512
suffix:semicolon
r_case
id|IB_MTU_1024
suffix:colon
r_return
l_int|1024
suffix:semicolon
r_case
id|IB_MTU_2048
suffix:colon
r_return
l_int|2048
suffix:semicolon
r_case
id|IB_MTU_4096
suffix:colon
r_return
l_int|4096
suffix:semicolon
r_default
suffix:colon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
)brace
DECL|enum|ib_port_state
r_enum
id|ib_port_state
(brace
DECL|enumerator|IB_PORT_NOP
id|IB_PORT_NOP
op_assign
l_int|0
comma
DECL|enumerator|IB_PORT_DOWN
id|IB_PORT_DOWN
op_assign
l_int|1
comma
DECL|enumerator|IB_PORT_INIT
id|IB_PORT_INIT
op_assign
l_int|2
comma
DECL|enumerator|IB_PORT_ARMED
id|IB_PORT_ARMED
op_assign
l_int|3
comma
DECL|enumerator|IB_PORT_ACTIVE
id|IB_PORT_ACTIVE
op_assign
l_int|4
comma
DECL|enumerator|IB_PORT_ACTIVE_DEFER
id|IB_PORT_ACTIVE_DEFER
op_assign
l_int|5
)brace
suffix:semicolon
DECL|enum|ib_port_cap_flags
r_enum
id|ib_port_cap_flags
(brace
DECL|enumerator|IB_PORT_SM
id|IB_PORT_SM
op_assign
l_int|1
op_lshift
l_int|1
comma
DECL|enumerator|IB_PORT_NOTICE_SUP
id|IB_PORT_NOTICE_SUP
op_assign
l_int|1
op_lshift
l_int|2
comma
DECL|enumerator|IB_PORT_TRAP_SUP
id|IB_PORT_TRAP_SUP
op_assign
l_int|1
op_lshift
l_int|3
comma
DECL|enumerator|IB_PORT_OPT_IPD_SUP
id|IB_PORT_OPT_IPD_SUP
op_assign
l_int|1
op_lshift
l_int|4
comma
DECL|enumerator|IB_PORT_AUTO_MIGR_SUP
id|IB_PORT_AUTO_MIGR_SUP
op_assign
l_int|1
op_lshift
l_int|5
comma
DECL|enumerator|IB_PORT_SL_MAP_SUP
id|IB_PORT_SL_MAP_SUP
op_assign
l_int|1
op_lshift
l_int|6
comma
DECL|enumerator|IB_PORT_MKEY_NVRAM
id|IB_PORT_MKEY_NVRAM
op_assign
l_int|1
op_lshift
l_int|7
comma
DECL|enumerator|IB_PORT_PKEY_NVRAM
id|IB_PORT_PKEY_NVRAM
op_assign
l_int|1
op_lshift
l_int|8
comma
DECL|enumerator|IB_PORT_LED_INFO_SUP
id|IB_PORT_LED_INFO_SUP
op_assign
l_int|1
op_lshift
l_int|9
comma
DECL|enumerator|IB_PORT_SM_DISABLED
id|IB_PORT_SM_DISABLED
op_assign
l_int|1
op_lshift
l_int|10
comma
DECL|enumerator|IB_PORT_SYS_IMAGE_GUID_SUP
id|IB_PORT_SYS_IMAGE_GUID_SUP
op_assign
l_int|1
op_lshift
l_int|11
comma
DECL|enumerator|IB_PORT_PKEY_SW_EXT_PORT_TRAP_SUP
id|IB_PORT_PKEY_SW_EXT_PORT_TRAP_SUP
op_assign
l_int|1
op_lshift
l_int|12
comma
DECL|enumerator|IB_PORT_CM_SUP
id|IB_PORT_CM_SUP
op_assign
l_int|1
op_lshift
l_int|16
comma
DECL|enumerator|IB_PORT_SNMP_TUNNEL_SUP
id|IB_PORT_SNMP_TUNNEL_SUP
op_assign
l_int|1
op_lshift
l_int|17
comma
DECL|enumerator|IB_PORT_REINIT_SUP
id|IB_PORT_REINIT_SUP
op_assign
l_int|1
op_lshift
l_int|18
comma
DECL|enumerator|IB_PORT_DEVICE_MGMT_SUP
id|IB_PORT_DEVICE_MGMT_SUP
op_assign
l_int|1
op_lshift
l_int|19
comma
DECL|enumerator|IB_PORT_VENDOR_CLASS_SUP
id|IB_PORT_VENDOR_CLASS_SUP
op_assign
l_int|1
op_lshift
l_int|20
comma
DECL|enumerator|IB_PORT_DR_NOTICE_SUP
id|IB_PORT_DR_NOTICE_SUP
op_assign
l_int|1
op_lshift
l_int|21
comma
DECL|enumerator|IB_PORT_CAP_MASK_NOTICE_SUP
id|IB_PORT_CAP_MASK_NOTICE_SUP
op_assign
l_int|1
op_lshift
l_int|22
comma
DECL|enumerator|IB_PORT_BOOT_MGMT_SUP
id|IB_PORT_BOOT_MGMT_SUP
op_assign
l_int|1
op_lshift
l_int|23
comma
DECL|enumerator|IB_PORT_LINK_LATENCY_SUP
id|IB_PORT_LINK_LATENCY_SUP
op_assign
l_int|1
op_lshift
l_int|24
comma
DECL|enumerator|IB_PORT_CLIENT_REG_SUP
id|IB_PORT_CLIENT_REG_SUP
op_assign
l_int|1
op_lshift
l_int|25
)brace
suffix:semicolon
DECL|enum|ib_port_width
r_enum
id|ib_port_width
(brace
DECL|enumerator|IB_WIDTH_1X
id|IB_WIDTH_1X
op_assign
l_int|1
comma
DECL|enumerator|IB_WIDTH_4X
id|IB_WIDTH_4X
op_assign
l_int|2
comma
DECL|enumerator|IB_WIDTH_8X
id|IB_WIDTH_8X
op_assign
l_int|4
comma
DECL|enumerator|IB_WIDTH_12X
id|IB_WIDTH_12X
op_assign
l_int|8
)brace
suffix:semicolon
DECL|function|ib_width_enum_to_int
r_static
r_inline
r_int
id|ib_width_enum_to_int
c_func
(paren
r_enum
id|ib_port_width
id|width
)paren
(brace
r_switch
c_cond
(paren
id|width
)paren
(brace
r_case
id|IB_WIDTH_1X
suffix:colon
r_return
l_int|1
suffix:semicolon
r_case
id|IB_WIDTH_4X
suffix:colon
r_return
l_int|4
suffix:semicolon
r_case
id|IB_WIDTH_8X
suffix:colon
r_return
l_int|8
suffix:semicolon
r_case
id|IB_WIDTH_12X
suffix:colon
r_return
l_int|12
suffix:semicolon
r_default
suffix:colon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
)brace
DECL|struct|ib_port_attr
r_struct
id|ib_port_attr
(brace
DECL|member|state
r_enum
id|ib_port_state
id|state
suffix:semicolon
DECL|member|max_mtu
r_enum
id|ib_mtu
id|max_mtu
suffix:semicolon
DECL|member|active_mtu
r_enum
id|ib_mtu
id|active_mtu
suffix:semicolon
DECL|member|gid_tbl_len
r_int
id|gid_tbl_len
suffix:semicolon
DECL|member|port_cap_flags
id|u32
id|port_cap_flags
suffix:semicolon
DECL|member|max_msg_sz
id|u32
id|max_msg_sz
suffix:semicolon
DECL|member|bad_pkey_cntr
id|u32
id|bad_pkey_cntr
suffix:semicolon
DECL|member|qkey_viol_cntr
id|u32
id|qkey_viol_cntr
suffix:semicolon
DECL|member|pkey_tbl_len
id|u16
id|pkey_tbl_len
suffix:semicolon
DECL|member|lid
id|u16
id|lid
suffix:semicolon
DECL|member|sm_lid
id|u16
id|sm_lid
suffix:semicolon
DECL|member|lmc
id|u8
id|lmc
suffix:semicolon
DECL|member|max_vl_num
id|u8
id|max_vl_num
suffix:semicolon
DECL|member|sm_sl
id|u8
id|sm_sl
suffix:semicolon
DECL|member|subnet_timeout
id|u8
id|subnet_timeout
suffix:semicolon
DECL|member|init_type_reply
id|u8
id|init_type_reply
suffix:semicolon
DECL|member|active_width
id|u8
id|active_width
suffix:semicolon
DECL|member|active_speed
id|u8
id|active_speed
suffix:semicolon
DECL|member|phys_state
id|u8
id|phys_state
suffix:semicolon
)brace
suffix:semicolon
DECL|enum|ib_device_modify_flags
r_enum
id|ib_device_modify_flags
(brace
DECL|enumerator|IB_DEVICE_MODIFY_SYS_IMAGE_GUID
id|IB_DEVICE_MODIFY_SYS_IMAGE_GUID
op_assign
l_int|1
)brace
suffix:semicolon
DECL|struct|ib_device_modify
r_struct
id|ib_device_modify
(brace
DECL|member|sys_image_guid
id|u64
id|sys_image_guid
suffix:semicolon
)brace
suffix:semicolon
DECL|enum|ib_port_modify_flags
r_enum
id|ib_port_modify_flags
(brace
DECL|enumerator|IB_PORT_SHUTDOWN
id|IB_PORT_SHUTDOWN
op_assign
l_int|1
comma
DECL|enumerator|IB_PORT_INIT_TYPE
id|IB_PORT_INIT_TYPE
op_assign
(paren
l_int|1
op_lshift
l_int|2
)paren
comma
DECL|enumerator|IB_PORT_RESET_QKEY_CNTR
id|IB_PORT_RESET_QKEY_CNTR
op_assign
(paren
l_int|1
op_lshift
l_int|3
)paren
)brace
suffix:semicolon
DECL|struct|ib_port_modify
r_struct
id|ib_port_modify
(brace
DECL|member|set_port_cap_mask
id|u32
id|set_port_cap_mask
suffix:semicolon
DECL|member|clr_port_cap_mask
id|u32
id|clr_port_cap_mask
suffix:semicolon
DECL|member|init_type
id|u8
id|init_type
suffix:semicolon
)brace
suffix:semicolon
DECL|enum|ib_event_type
r_enum
id|ib_event_type
(brace
DECL|enumerator|IB_EVENT_CQ_ERR
id|IB_EVENT_CQ_ERR
comma
DECL|enumerator|IB_EVENT_QP_FATAL
id|IB_EVENT_QP_FATAL
comma
DECL|enumerator|IB_EVENT_QP_REQ_ERR
id|IB_EVENT_QP_REQ_ERR
comma
DECL|enumerator|IB_EVENT_QP_ACCESS_ERR
id|IB_EVENT_QP_ACCESS_ERR
comma
DECL|enumerator|IB_EVENT_COMM_EST
id|IB_EVENT_COMM_EST
comma
DECL|enumerator|IB_EVENT_SQ_DRAINED
id|IB_EVENT_SQ_DRAINED
comma
DECL|enumerator|IB_EVENT_PATH_MIG
id|IB_EVENT_PATH_MIG
comma
DECL|enumerator|IB_EVENT_PATH_MIG_ERR
id|IB_EVENT_PATH_MIG_ERR
comma
DECL|enumerator|IB_EVENT_DEVICE_FATAL
id|IB_EVENT_DEVICE_FATAL
comma
DECL|enumerator|IB_EVENT_PORT_ACTIVE
id|IB_EVENT_PORT_ACTIVE
comma
DECL|enumerator|IB_EVENT_PORT_ERR
id|IB_EVENT_PORT_ERR
comma
DECL|enumerator|IB_EVENT_LID_CHANGE
id|IB_EVENT_LID_CHANGE
comma
DECL|enumerator|IB_EVENT_PKEY_CHANGE
id|IB_EVENT_PKEY_CHANGE
comma
DECL|enumerator|IB_EVENT_SM_CHANGE
id|IB_EVENT_SM_CHANGE
)brace
suffix:semicolon
DECL|struct|ib_event
r_struct
id|ib_event
(brace
DECL|member|device
r_struct
id|ib_device
op_star
id|device
suffix:semicolon
r_union
(brace
DECL|member|cq
r_struct
id|ib_cq
op_star
id|cq
suffix:semicolon
DECL|member|qp
r_struct
id|ib_qp
op_star
id|qp
suffix:semicolon
DECL|member|port_num
id|u8
id|port_num
suffix:semicolon
DECL|member|element
)brace
id|element
suffix:semicolon
DECL|member|event
r_enum
id|ib_event_type
id|event
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ib_event_handler
r_struct
id|ib_event_handler
(brace
DECL|member|device
r_struct
id|ib_device
op_star
id|device
suffix:semicolon
DECL|member|handler
r_void
(paren
op_star
id|handler
)paren
(paren
r_struct
id|ib_event_handler
op_star
comma
r_struct
id|ib_event
op_star
)paren
suffix:semicolon
DECL|member|list
r_struct
id|list_head
id|list
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|INIT_IB_EVENT_HANDLER
mdefine_line|#define INIT_IB_EVENT_HANDLER(_ptr, _device, _handler)&t;&t;&bslash;&n;&t;do {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;(_ptr)-&gt;device  = _device;&t;&t;&t;&bslash;&n;&t;&t;(_ptr)-&gt;handler = _handler;&t;&t;&t;&bslash;&n;&t;&t;INIT_LIST_HEAD(&amp;(_ptr)-&gt;list);&t;&t;&t;&bslash;&n;&t;} while (0)
DECL|struct|ib_global_route
r_struct
id|ib_global_route
(brace
DECL|member|dgid
r_union
id|ib_gid
id|dgid
suffix:semicolon
DECL|member|flow_label
id|u32
id|flow_label
suffix:semicolon
DECL|member|sgid_index
id|u8
id|sgid_index
suffix:semicolon
DECL|member|hop_limit
id|u8
id|hop_limit
suffix:semicolon
DECL|member|traffic_class
id|u8
id|traffic_class
suffix:semicolon
)brace
suffix:semicolon
r_enum
(brace
DECL|enumerator|IB_MULTICAST_QPN
id|IB_MULTICAST_QPN
op_assign
l_int|0xffffff
)brace
suffix:semicolon
DECL|enum|ib_ah_flags
r_enum
id|ib_ah_flags
(brace
DECL|enumerator|IB_AH_GRH
id|IB_AH_GRH
op_assign
l_int|1
)brace
suffix:semicolon
DECL|struct|ib_ah_attr
r_struct
id|ib_ah_attr
(brace
DECL|member|grh
r_struct
id|ib_global_route
id|grh
suffix:semicolon
DECL|member|dlid
id|u16
id|dlid
suffix:semicolon
DECL|member|sl
id|u8
id|sl
suffix:semicolon
DECL|member|src_path_bits
id|u8
id|src_path_bits
suffix:semicolon
DECL|member|static_rate
id|u8
id|static_rate
suffix:semicolon
DECL|member|ah_flags
id|u8
id|ah_flags
suffix:semicolon
DECL|member|port_num
id|u8
id|port_num
suffix:semicolon
)brace
suffix:semicolon
DECL|enum|ib_wc_status
r_enum
id|ib_wc_status
(brace
DECL|enumerator|IB_WC_SUCCESS
id|IB_WC_SUCCESS
comma
DECL|enumerator|IB_WC_LOC_LEN_ERR
id|IB_WC_LOC_LEN_ERR
comma
DECL|enumerator|IB_WC_LOC_QP_OP_ERR
id|IB_WC_LOC_QP_OP_ERR
comma
DECL|enumerator|IB_WC_LOC_EEC_OP_ERR
id|IB_WC_LOC_EEC_OP_ERR
comma
DECL|enumerator|IB_WC_LOC_PROT_ERR
id|IB_WC_LOC_PROT_ERR
comma
DECL|enumerator|IB_WC_WR_FLUSH_ERR
id|IB_WC_WR_FLUSH_ERR
comma
DECL|enumerator|IB_WC_MW_BIND_ERR
id|IB_WC_MW_BIND_ERR
comma
DECL|enumerator|IB_WC_BAD_RESP_ERR
id|IB_WC_BAD_RESP_ERR
comma
DECL|enumerator|IB_WC_LOC_ACCESS_ERR
id|IB_WC_LOC_ACCESS_ERR
comma
DECL|enumerator|IB_WC_REM_INV_REQ_ERR
id|IB_WC_REM_INV_REQ_ERR
comma
DECL|enumerator|IB_WC_REM_ACCESS_ERR
id|IB_WC_REM_ACCESS_ERR
comma
DECL|enumerator|IB_WC_REM_OP_ERR
id|IB_WC_REM_OP_ERR
comma
DECL|enumerator|IB_WC_RETRY_EXC_ERR
id|IB_WC_RETRY_EXC_ERR
comma
DECL|enumerator|IB_WC_RNR_RETRY_EXC_ERR
id|IB_WC_RNR_RETRY_EXC_ERR
comma
DECL|enumerator|IB_WC_LOC_RDD_VIOL_ERR
id|IB_WC_LOC_RDD_VIOL_ERR
comma
DECL|enumerator|IB_WC_REM_INV_RD_REQ_ERR
id|IB_WC_REM_INV_RD_REQ_ERR
comma
DECL|enumerator|IB_WC_REM_ABORT_ERR
id|IB_WC_REM_ABORT_ERR
comma
DECL|enumerator|IB_WC_INV_EECN_ERR
id|IB_WC_INV_EECN_ERR
comma
DECL|enumerator|IB_WC_INV_EEC_STATE_ERR
id|IB_WC_INV_EEC_STATE_ERR
comma
DECL|enumerator|IB_WC_FATAL_ERR
id|IB_WC_FATAL_ERR
comma
DECL|enumerator|IB_WC_RESP_TIMEOUT_ERR
id|IB_WC_RESP_TIMEOUT_ERR
comma
DECL|enumerator|IB_WC_GENERAL_ERR
id|IB_WC_GENERAL_ERR
)brace
suffix:semicolon
DECL|enum|ib_wc_opcode
r_enum
id|ib_wc_opcode
(brace
DECL|enumerator|IB_WC_SEND
id|IB_WC_SEND
comma
DECL|enumerator|IB_WC_RDMA_WRITE
id|IB_WC_RDMA_WRITE
comma
DECL|enumerator|IB_WC_RDMA_READ
id|IB_WC_RDMA_READ
comma
DECL|enumerator|IB_WC_COMP_SWAP
id|IB_WC_COMP_SWAP
comma
DECL|enumerator|IB_WC_FETCH_ADD
id|IB_WC_FETCH_ADD
comma
DECL|enumerator|IB_WC_BIND_MW
id|IB_WC_BIND_MW
comma
multiline_comment|/*&n; * Set value of IB_WC_RECV so consumers can test if a completion is a&n; * receive by testing (opcode &amp; IB_WC_RECV).&n; */
DECL|enumerator|IB_WC_RECV
id|IB_WC_RECV
op_assign
l_int|1
op_lshift
l_int|7
comma
DECL|enumerator|IB_WC_RECV_RDMA_WITH_IMM
id|IB_WC_RECV_RDMA_WITH_IMM
)brace
suffix:semicolon
DECL|enum|ib_wc_flags
r_enum
id|ib_wc_flags
(brace
DECL|enumerator|IB_WC_GRH
id|IB_WC_GRH
op_assign
l_int|1
comma
DECL|enumerator|IB_WC_WITH_IMM
id|IB_WC_WITH_IMM
op_assign
(paren
l_int|1
op_lshift
l_int|1
)paren
)brace
suffix:semicolon
DECL|struct|ib_wc
r_struct
id|ib_wc
(brace
DECL|member|wr_id
id|u64
id|wr_id
suffix:semicolon
DECL|member|status
r_enum
id|ib_wc_status
id|status
suffix:semicolon
DECL|member|opcode
r_enum
id|ib_wc_opcode
id|opcode
suffix:semicolon
DECL|member|vendor_err
id|u32
id|vendor_err
suffix:semicolon
DECL|member|byte_len
id|u32
id|byte_len
suffix:semicolon
DECL|member|imm_data
id|__be32
id|imm_data
suffix:semicolon
DECL|member|qp_num
id|u32
id|qp_num
suffix:semicolon
DECL|member|src_qp
id|u32
id|src_qp
suffix:semicolon
DECL|member|wc_flags
r_int
id|wc_flags
suffix:semicolon
DECL|member|pkey_index
id|u16
id|pkey_index
suffix:semicolon
DECL|member|slid
id|u16
id|slid
suffix:semicolon
DECL|member|sl
id|u8
id|sl
suffix:semicolon
DECL|member|dlid_path_bits
id|u8
id|dlid_path_bits
suffix:semicolon
DECL|member|port_num
id|u8
id|port_num
suffix:semicolon
multiline_comment|/* valid only for DR SMPs on switches */
)brace
suffix:semicolon
DECL|enum|ib_cq_notify
r_enum
id|ib_cq_notify
(brace
DECL|enumerator|IB_CQ_SOLICITED
id|IB_CQ_SOLICITED
comma
DECL|enumerator|IB_CQ_NEXT_COMP
id|IB_CQ_NEXT_COMP
)brace
suffix:semicolon
DECL|struct|ib_qp_cap
r_struct
id|ib_qp_cap
(brace
DECL|member|max_send_wr
id|u32
id|max_send_wr
suffix:semicolon
DECL|member|max_recv_wr
id|u32
id|max_recv_wr
suffix:semicolon
DECL|member|max_send_sge
id|u32
id|max_send_sge
suffix:semicolon
DECL|member|max_recv_sge
id|u32
id|max_recv_sge
suffix:semicolon
DECL|member|max_inline_data
id|u32
id|max_inline_data
suffix:semicolon
)brace
suffix:semicolon
DECL|enum|ib_sig_type
r_enum
id|ib_sig_type
(brace
DECL|enumerator|IB_SIGNAL_ALL_WR
id|IB_SIGNAL_ALL_WR
comma
DECL|enumerator|IB_SIGNAL_REQ_WR
id|IB_SIGNAL_REQ_WR
)brace
suffix:semicolon
DECL|enum|ib_qp_type
r_enum
id|ib_qp_type
(brace
multiline_comment|/*&n;&t; * IB_QPT_SMI and IB_QPT_GSI have to be the first two entries&n;&t; * here (and in that order) since the MAD layer uses them as&n;&t; * indices into a 2-entry table.&n;&t; */
DECL|enumerator|IB_QPT_SMI
id|IB_QPT_SMI
comma
DECL|enumerator|IB_QPT_GSI
id|IB_QPT_GSI
comma
DECL|enumerator|IB_QPT_RC
id|IB_QPT_RC
comma
DECL|enumerator|IB_QPT_UC
id|IB_QPT_UC
comma
DECL|enumerator|IB_QPT_UD
id|IB_QPT_UD
comma
DECL|enumerator|IB_QPT_RAW_IPV6
id|IB_QPT_RAW_IPV6
comma
DECL|enumerator|IB_QPT_RAW_ETY
id|IB_QPT_RAW_ETY
)brace
suffix:semicolon
DECL|struct|ib_qp_init_attr
r_struct
id|ib_qp_init_attr
(brace
DECL|member|event_handler
r_void
(paren
op_star
id|event_handler
)paren
(paren
r_struct
id|ib_event
op_star
comma
r_void
op_star
)paren
suffix:semicolon
DECL|member|qp_context
r_void
op_star
id|qp_context
suffix:semicolon
DECL|member|send_cq
r_struct
id|ib_cq
op_star
id|send_cq
suffix:semicolon
DECL|member|recv_cq
r_struct
id|ib_cq
op_star
id|recv_cq
suffix:semicolon
DECL|member|srq
r_struct
id|ib_srq
op_star
id|srq
suffix:semicolon
DECL|member|cap
r_struct
id|ib_qp_cap
id|cap
suffix:semicolon
DECL|member|sq_sig_type
r_enum
id|ib_sig_type
id|sq_sig_type
suffix:semicolon
DECL|member|qp_type
r_enum
id|ib_qp_type
id|qp_type
suffix:semicolon
DECL|member|port_num
id|u8
id|port_num
suffix:semicolon
multiline_comment|/* special QP types only */
)brace
suffix:semicolon
DECL|enum|ib_rnr_timeout
r_enum
id|ib_rnr_timeout
(brace
DECL|enumerator|IB_RNR_TIMER_655_36
id|IB_RNR_TIMER_655_36
op_assign
l_int|0
comma
DECL|enumerator|IB_RNR_TIMER_000_01
id|IB_RNR_TIMER_000_01
op_assign
l_int|1
comma
DECL|enumerator|IB_RNR_TIMER_000_02
id|IB_RNR_TIMER_000_02
op_assign
l_int|2
comma
DECL|enumerator|IB_RNR_TIMER_000_03
id|IB_RNR_TIMER_000_03
op_assign
l_int|3
comma
DECL|enumerator|IB_RNR_TIMER_000_04
id|IB_RNR_TIMER_000_04
op_assign
l_int|4
comma
DECL|enumerator|IB_RNR_TIMER_000_06
id|IB_RNR_TIMER_000_06
op_assign
l_int|5
comma
DECL|enumerator|IB_RNR_TIMER_000_08
id|IB_RNR_TIMER_000_08
op_assign
l_int|6
comma
DECL|enumerator|IB_RNR_TIMER_000_12
id|IB_RNR_TIMER_000_12
op_assign
l_int|7
comma
DECL|enumerator|IB_RNR_TIMER_000_16
id|IB_RNR_TIMER_000_16
op_assign
l_int|8
comma
DECL|enumerator|IB_RNR_TIMER_000_24
id|IB_RNR_TIMER_000_24
op_assign
l_int|9
comma
DECL|enumerator|IB_RNR_TIMER_000_32
id|IB_RNR_TIMER_000_32
op_assign
l_int|10
comma
DECL|enumerator|IB_RNR_TIMER_000_48
id|IB_RNR_TIMER_000_48
op_assign
l_int|11
comma
DECL|enumerator|IB_RNR_TIMER_000_64
id|IB_RNR_TIMER_000_64
op_assign
l_int|12
comma
DECL|enumerator|IB_RNR_TIMER_000_96
id|IB_RNR_TIMER_000_96
op_assign
l_int|13
comma
DECL|enumerator|IB_RNR_TIMER_001_28
id|IB_RNR_TIMER_001_28
op_assign
l_int|14
comma
DECL|enumerator|IB_RNR_TIMER_001_92
id|IB_RNR_TIMER_001_92
op_assign
l_int|15
comma
DECL|enumerator|IB_RNR_TIMER_002_56
id|IB_RNR_TIMER_002_56
op_assign
l_int|16
comma
DECL|enumerator|IB_RNR_TIMER_003_84
id|IB_RNR_TIMER_003_84
op_assign
l_int|17
comma
DECL|enumerator|IB_RNR_TIMER_005_12
id|IB_RNR_TIMER_005_12
op_assign
l_int|18
comma
DECL|enumerator|IB_RNR_TIMER_007_68
id|IB_RNR_TIMER_007_68
op_assign
l_int|19
comma
DECL|enumerator|IB_RNR_TIMER_010_24
id|IB_RNR_TIMER_010_24
op_assign
l_int|20
comma
DECL|enumerator|IB_RNR_TIMER_015_36
id|IB_RNR_TIMER_015_36
op_assign
l_int|21
comma
DECL|enumerator|IB_RNR_TIMER_020_48
id|IB_RNR_TIMER_020_48
op_assign
l_int|22
comma
DECL|enumerator|IB_RNR_TIMER_030_72
id|IB_RNR_TIMER_030_72
op_assign
l_int|23
comma
DECL|enumerator|IB_RNR_TIMER_040_96
id|IB_RNR_TIMER_040_96
op_assign
l_int|24
comma
DECL|enumerator|IB_RNR_TIMER_061_44
id|IB_RNR_TIMER_061_44
op_assign
l_int|25
comma
DECL|enumerator|IB_RNR_TIMER_081_92
id|IB_RNR_TIMER_081_92
op_assign
l_int|26
comma
DECL|enumerator|IB_RNR_TIMER_122_88
id|IB_RNR_TIMER_122_88
op_assign
l_int|27
comma
DECL|enumerator|IB_RNR_TIMER_163_84
id|IB_RNR_TIMER_163_84
op_assign
l_int|28
comma
DECL|enumerator|IB_RNR_TIMER_245_76
id|IB_RNR_TIMER_245_76
op_assign
l_int|29
comma
DECL|enumerator|IB_RNR_TIMER_327_68
id|IB_RNR_TIMER_327_68
op_assign
l_int|30
comma
DECL|enumerator|IB_RNR_TIMER_491_52
id|IB_RNR_TIMER_491_52
op_assign
l_int|31
)brace
suffix:semicolon
DECL|enum|ib_qp_attr_mask
r_enum
id|ib_qp_attr_mask
(brace
DECL|enumerator|IB_QP_STATE
id|IB_QP_STATE
op_assign
l_int|1
comma
DECL|enumerator|IB_QP_CUR_STATE
id|IB_QP_CUR_STATE
op_assign
(paren
l_int|1
op_lshift
l_int|1
)paren
comma
DECL|enumerator|IB_QP_EN_SQD_ASYNC_NOTIFY
id|IB_QP_EN_SQD_ASYNC_NOTIFY
op_assign
(paren
l_int|1
op_lshift
l_int|2
)paren
comma
DECL|enumerator|IB_QP_ACCESS_FLAGS
id|IB_QP_ACCESS_FLAGS
op_assign
(paren
l_int|1
op_lshift
l_int|3
)paren
comma
DECL|enumerator|IB_QP_PKEY_INDEX
id|IB_QP_PKEY_INDEX
op_assign
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
DECL|enumerator|IB_QP_PORT
id|IB_QP_PORT
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
comma
DECL|enumerator|IB_QP_QKEY
id|IB_QP_QKEY
op_assign
(paren
l_int|1
op_lshift
l_int|6
)paren
comma
DECL|enumerator|IB_QP_AV
id|IB_QP_AV
op_assign
(paren
l_int|1
op_lshift
l_int|7
)paren
comma
DECL|enumerator|IB_QP_PATH_MTU
id|IB_QP_PATH_MTU
op_assign
(paren
l_int|1
op_lshift
l_int|8
)paren
comma
DECL|enumerator|IB_QP_TIMEOUT
id|IB_QP_TIMEOUT
op_assign
(paren
l_int|1
op_lshift
l_int|9
)paren
comma
DECL|enumerator|IB_QP_RETRY_CNT
id|IB_QP_RETRY_CNT
op_assign
(paren
l_int|1
op_lshift
l_int|10
)paren
comma
DECL|enumerator|IB_QP_RNR_RETRY
id|IB_QP_RNR_RETRY
op_assign
(paren
l_int|1
op_lshift
l_int|11
)paren
comma
DECL|enumerator|IB_QP_RQ_PSN
id|IB_QP_RQ_PSN
op_assign
(paren
l_int|1
op_lshift
l_int|12
)paren
comma
DECL|enumerator|IB_QP_MAX_QP_RD_ATOMIC
id|IB_QP_MAX_QP_RD_ATOMIC
op_assign
(paren
l_int|1
op_lshift
l_int|13
)paren
comma
DECL|enumerator|IB_QP_ALT_PATH
id|IB_QP_ALT_PATH
op_assign
(paren
l_int|1
op_lshift
l_int|14
)paren
comma
DECL|enumerator|IB_QP_MIN_RNR_TIMER
id|IB_QP_MIN_RNR_TIMER
op_assign
(paren
l_int|1
op_lshift
l_int|15
)paren
comma
DECL|enumerator|IB_QP_SQ_PSN
id|IB_QP_SQ_PSN
op_assign
(paren
l_int|1
op_lshift
l_int|16
)paren
comma
DECL|enumerator|IB_QP_MAX_DEST_RD_ATOMIC
id|IB_QP_MAX_DEST_RD_ATOMIC
op_assign
(paren
l_int|1
op_lshift
l_int|17
)paren
comma
DECL|enumerator|IB_QP_PATH_MIG_STATE
id|IB_QP_PATH_MIG_STATE
op_assign
(paren
l_int|1
op_lshift
l_int|18
)paren
comma
DECL|enumerator|IB_QP_CAP
id|IB_QP_CAP
op_assign
(paren
l_int|1
op_lshift
l_int|19
)paren
comma
DECL|enumerator|IB_QP_DEST_QPN
id|IB_QP_DEST_QPN
op_assign
(paren
l_int|1
op_lshift
l_int|20
)paren
)brace
suffix:semicolon
DECL|enum|ib_qp_state
r_enum
id|ib_qp_state
(brace
DECL|enumerator|IB_QPS_RESET
id|IB_QPS_RESET
comma
DECL|enumerator|IB_QPS_INIT
id|IB_QPS_INIT
comma
DECL|enumerator|IB_QPS_RTR
id|IB_QPS_RTR
comma
DECL|enumerator|IB_QPS_RTS
id|IB_QPS_RTS
comma
DECL|enumerator|IB_QPS_SQD
id|IB_QPS_SQD
comma
DECL|enumerator|IB_QPS_SQE
id|IB_QPS_SQE
comma
DECL|enumerator|IB_QPS_ERR
id|IB_QPS_ERR
)brace
suffix:semicolon
DECL|enum|ib_mig_state
r_enum
id|ib_mig_state
(brace
DECL|enumerator|IB_MIG_MIGRATED
id|IB_MIG_MIGRATED
comma
DECL|enumerator|IB_MIG_REARM
id|IB_MIG_REARM
comma
DECL|enumerator|IB_MIG_ARMED
id|IB_MIG_ARMED
)brace
suffix:semicolon
DECL|struct|ib_qp_attr
r_struct
id|ib_qp_attr
(brace
DECL|member|qp_state
r_enum
id|ib_qp_state
id|qp_state
suffix:semicolon
DECL|member|cur_qp_state
r_enum
id|ib_qp_state
id|cur_qp_state
suffix:semicolon
DECL|member|path_mtu
r_enum
id|ib_mtu
id|path_mtu
suffix:semicolon
DECL|member|path_mig_state
r_enum
id|ib_mig_state
id|path_mig_state
suffix:semicolon
DECL|member|qkey
id|u32
id|qkey
suffix:semicolon
DECL|member|rq_psn
id|u32
id|rq_psn
suffix:semicolon
DECL|member|sq_psn
id|u32
id|sq_psn
suffix:semicolon
DECL|member|dest_qp_num
id|u32
id|dest_qp_num
suffix:semicolon
DECL|member|qp_access_flags
r_int
id|qp_access_flags
suffix:semicolon
DECL|member|cap
r_struct
id|ib_qp_cap
id|cap
suffix:semicolon
DECL|member|ah_attr
r_struct
id|ib_ah_attr
id|ah_attr
suffix:semicolon
DECL|member|alt_ah_attr
r_struct
id|ib_ah_attr
id|alt_ah_attr
suffix:semicolon
DECL|member|pkey_index
id|u16
id|pkey_index
suffix:semicolon
DECL|member|alt_pkey_index
id|u16
id|alt_pkey_index
suffix:semicolon
DECL|member|en_sqd_async_notify
id|u8
id|en_sqd_async_notify
suffix:semicolon
DECL|member|sq_draining
id|u8
id|sq_draining
suffix:semicolon
DECL|member|max_rd_atomic
id|u8
id|max_rd_atomic
suffix:semicolon
DECL|member|max_dest_rd_atomic
id|u8
id|max_dest_rd_atomic
suffix:semicolon
DECL|member|min_rnr_timer
id|u8
id|min_rnr_timer
suffix:semicolon
DECL|member|port_num
id|u8
id|port_num
suffix:semicolon
DECL|member|timeout
id|u8
id|timeout
suffix:semicolon
DECL|member|retry_cnt
id|u8
id|retry_cnt
suffix:semicolon
DECL|member|rnr_retry
id|u8
id|rnr_retry
suffix:semicolon
DECL|member|alt_port_num
id|u8
id|alt_port_num
suffix:semicolon
DECL|member|alt_timeout
id|u8
id|alt_timeout
suffix:semicolon
)brace
suffix:semicolon
DECL|enum|ib_wr_opcode
r_enum
id|ib_wr_opcode
(brace
DECL|enumerator|IB_WR_RDMA_WRITE
id|IB_WR_RDMA_WRITE
comma
DECL|enumerator|IB_WR_RDMA_WRITE_WITH_IMM
id|IB_WR_RDMA_WRITE_WITH_IMM
comma
DECL|enumerator|IB_WR_SEND
id|IB_WR_SEND
comma
DECL|enumerator|IB_WR_SEND_WITH_IMM
id|IB_WR_SEND_WITH_IMM
comma
DECL|enumerator|IB_WR_RDMA_READ
id|IB_WR_RDMA_READ
comma
DECL|enumerator|IB_WR_ATOMIC_CMP_AND_SWP
id|IB_WR_ATOMIC_CMP_AND_SWP
comma
DECL|enumerator|IB_WR_ATOMIC_FETCH_AND_ADD
id|IB_WR_ATOMIC_FETCH_AND_ADD
)brace
suffix:semicolon
DECL|enum|ib_send_flags
r_enum
id|ib_send_flags
(brace
DECL|enumerator|IB_SEND_FENCE
id|IB_SEND_FENCE
op_assign
l_int|1
comma
DECL|enumerator|IB_SEND_SIGNALED
id|IB_SEND_SIGNALED
op_assign
(paren
l_int|1
op_lshift
l_int|1
)paren
comma
DECL|enumerator|IB_SEND_SOLICITED
id|IB_SEND_SOLICITED
op_assign
(paren
l_int|1
op_lshift
l_int|2
)paren
comma
DECL|enumerator|IB_SEND_INLINE
id|IB_SEND_INLINE
op_assign
(paren
l_int|1
op_lshift
l_int|3
)paren
)brace
suffix:semicolon
DECL|struct|ib_sge
r_struct
id|ib_sge
(brace
DECL|member|addr
id|u64
id|addr
suffix:semicolon
DECL|member|length
id|u32
id|length
suffix:semicolon
DECL|member|lkey
id|u32
id|lkey
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ib_send_wr
r_struct
id|ib_send_wr
(brace
DECL|member|next
r_struct
id|ib_send_wr
op_star
id|next
suffix:semicolon
DECL|member|wr_id
id|u64
id|wr_id
suffix:semicolon
DECL|member|sg_list
r_struct
id|ib_sge
op_star
id|sg_list
suffix:semicolon
DECL|member|num_sge
r_int
id|num_sge
suffix:semicolon
DECL|member|opcode
r_enum
id|ib_wr_opcode
id|opcode
suffix:semicolon
DECL|member|send_flags
r_int
id|send_flags
suffix:semicolon
DECL|member|imm_data
id|u32
id|imm_data
suffix:semicolon
r_union
(brace
r_struct
(brace
DECL|member|remote_addr
id|u64
id|remote_addr
suffix:semicolon
DECL|member|rkey
id|u32
id|rkey
suffix:semicolon
DECL|member|rdma
)brace
id|rdma
suffix:semicolon
r_struct
(brace
DECL|member|remote_addr
id|u64
id|remote_addr
suffix:semicolon
DECL|member|compare_add
id|u64
id|compare_add
suffix:semicolon
DECL|member|swap
id|u64
id|swap
suffix:semicolon
DECL|member|rkey
id|u32
id|rkey
suffix:semicolon
DECL|member|atomic
)brace
id|atomic
suffix:semicolon
r_struct
(brace
DECL|member|ah
r_struct
id|ib_ah
op_star
id|ah
suffix:semicolon
DECL|member|mad_hdr
r_struct
id|ib_mad_hdr
op_star
id|mad_hdr
suffix:semicolon
DECL|member|remote_qpn
id|u32
id|remote_qpn
suffix:semicolon
DECL|member|remote_qkey
id|u32
id|remote_qkey
suffix:semicolon
DECL|member|timeout_ms
r_int
id|timeout_ms
suffix:semicolon
multiline_comment|/* valid for MADs only */
DECL|member|pkey_index
id|u16
id|pkey_index
suffix:semicolon
multiline_comment|/* valid for GSI only */
DECL|member|port_num
id|u8
id|port_num
suffix:semicolon
multiline_comment|/* valid for DR SMPs on switch only */
DECL|member|ud
)brace
id|ud
suffix:semicolon
DECL|member|wr
)brace
id|wr
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ib_recv_wr
r_struct
id|ib_recv_wr
(brace
DECL|member|next
r_struct
id|ib_recv_wr
op_star
id|next
suffix:semicolon
DECL|member|wr_id
id|u64
id|wr_id
suffix:semicolon
DECL|member|sg_list
r_struct
id|ib_sge
op_star
id|sg_list
suffix:semicolon
DECL|member|num_sge
r_int
id|num_sge
suffix:semicolon
)brace
suffix:semicolon
DECL|enum|ib_access_flags
r_enum
id|ib_access_flags
(brace
DECL|enumerator|IB_ACCESS_LOCAL_WRITE
id|IB_ACCESS_LOCAL_WRITE
op_assign
l_int|1
comma
DECL|enumerator|IB_ACCESS_REMOTE_WRITE
id|IB_ACCESS_REMOTE_WRITE
op_assign
(paren
l_int|1
op_lshift
l_int|1
)paren
comma
DECL|enumerator|IB_ACCESS_REMOTE_READ
id|IB_ACCESS_REMOTE_READ
op_assign
(paren
l_int|1
op_lshift
l_int|2
)paren
comma
DECL|enumerator|IB_ACCESS_REMOTE_ATOMIC
id|IB_ACCESS_REMOTE_ATOMIC
op_assign
(paren
l_int|1
op_lshift
l_int|3
)paren
comma
DECL|enumerator|IB_ACCESS_MW_BIND
id|IB_ACCESS_MW_BIND
op_assign
(paren
l_int|1
op_lshift
l_int|4
)paren
)brace
suffix:semicolon
DECL|struct|ib_phys_buf
r_struct
id|ib_phys_buf
(brace
DECL|member|addr
id|u64
id|addr
suffix:semicolon
DECL|member|size
id|u64
id|size
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ib_mr_attr
r_struct
id|ib_mr_attr
(brace
DECL|member|pd
r_struct
id|ib_pd
op_star
id|pd
suffix:semicolon
DECL|member|device_virt_addr
id|u64
id|device_virt_addr
suffix:semicolon
DECL|member|size
id|u64
id|size
suffix:semicolon
DECL|member|mr_access_flags
r_int
id|mr_access_flags
suffix:semicolon
DECL|member|lkey
id|u32
id|lkey
suffix:semicolon
DECL|member|rkey
id|u32
id|rkey
suffix:semicolon
)brace
suffix:semicolon
DECL|enum|ib_mr_rereg_flags
r_enum
id|ib_mr_rereg_flags
(brace
DECL|enumerator|IB_MR_REREG_TRANS
id|IB_MR_REREG_TRANS
op_assign
l_int|1
comma
DECL|enumerator|IB_MR_REREG_PD
id|IB_MR_REREG_PD
op_assign
(paren
l_int|1
op_lshift
l_int|1
)paren
comma
DECL|enumerator|IB_MR_REREG_ACCESS
id|IB_MR_REREG_ACCESS
op_assign
(paren
l_int|1
op_lshift
l_int|2
)paren
)brace
suffix:semicolon
DECL|struct|ib_mw_bind
r_struct
id|ib_mw_bind
(brace
DECL|member|mr
r_struct
id|ib_mr
op_star
id|mr
suffix:semicolon
DECL|member|wr_id
id|u64
id|wr_id
suffix:semicolon
DECL|member|addr
id|u64
id|addr
suffix:semicolon
DECL|member|length
id|u32
id|length
suffix:semicolon
DECL|member|send_flags
r_int
id|send_flags
suffix:semicolon
DECL|member|mw_access_flags
r_int
id|mw_access_flags
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ib_fmr_attr
r_struct
id|ib_fmr_attr
(brace
DECL|member|max_pages
r_int
id|max_pages
suffix:semicolon
DECL|member|max_maps
r_int
id|max_maps
suffix:semicolon
DECL|member|page_size
id|u8
id|page_size
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ib_pd
r_struct
id|ib_pd
(brace
DECL|member|device
r_struct
id|ib_device
op_star
id|device
suffix:semicolon
DECL|member|usecnt
id|atomic_t
id|usecnt
suffix:semicolon
multiline_comment|/* count all resources */
)brace
suffix:semicolon
DECL|struct|ib_ah
r_struct
id|ib_ah
(brace
DECL|member|device
r_struct
id|ib_device
op_star
id|device
suffix:semicolon
DECL|member|pd
r_struct
id|ib_pd
op_star
id|pd
suffix:semicolon
)brace
suffix:semicolon
DECL|typedef|ib_comp_handler
r_typedef
r_void
(paren
op_star
id|ib_comp_handler
)paren
(paren
r_struct
id|ib_cq
op_star
id|cq
comma
r_void
op_star
id|cq_context
)paren
suffix:semicolon
DECL|struct|ib_cq
r_struct
id|ib_cq
(brace
DECL|member|device
r_struct
id|ib_device
op_star
id|device
suffix:semicolon
DECL|member|comp_handler
id|ib_comp_handler
id|comp_handler
suffix:semicolon
DECL|member|event_handler
r_void
(paren
op_star
id|event_handler
)paren
(paren
r_struct
id|ib_event
op_star
comma
r_void
op_star
)paren
suffix:semicolon
DECL|member|cq_context
r_void
op_star
id|cq_context
suffix:semicolon
DECL|member|cqe
r_int
id|cqe
suffix:semicolon
DECL|member|usecnt
id|atomic_t
id|usecnt
suffix:semicolon
multiline_comment|/* count number of work queues */
)brace
suffix:semicolon
DECL|struct|ib_srq
r_struct
id|ib_srq
(brace
DECL|member|device
r_struct
id|ib_device
op_star
id|device
suffix:semicolon
DECL|member|pd
r_struct
id|ib_pd
op_star
id|pd
suffix:semicolon
DECL|member|srq_context
r_void
op_star
id|srq_context
suffix:semicolon
DECL|member|usecnt
id|atomic_t
id|usecnt
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ib_qp
r_struct
id|ib_qp
(brace
DECL|member|device
r_struct
id|ib_device
op_star
id|device
suffix:semicolon
DECL|member|pd
r_struct
id|ib_pd
op_star
id|pd
suffix:semicolon
DECL|member|send_cq
r_struct
id|ib_cq
op_star
id|send_cq
suffix:semicolon
DECL|member|recv_cq
r_struct
id|ib_cq
op_star
id|recv_cq
suffix:semicolon
DECL|member|srq
r_struct
id|ib_srq
op_star
id|srq
suffix:semicolon
DECL|member|event_handler
r_void
(paren
op_star
id|event_handler
)paren
(paren
r_struct
id|ib_event
op_star
comma
r_void
op_star
)paren
suffix:semicolon
DECL|member|qp_context
r_void
op_star
id|qp_context
suffix:semicolon
DECL|member|qp_num
id|u32
id|qp_num
suffix:semicolon
DECL|member|qp_type
r_enum
id|ib_qp_type
id|qp_type
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ib_mr
r_struct
id|ib_mr
(brace
DECL|member|device
r_struct
id|ib_device
op_star
id|device
suffix:semicolon
DECL|member|pd
r_struct
id|ib_pd
op_star
id|pd
suffix:semicolon
DECL|member|lkey
id|u32
id|lkey
suffix:semicolon
DECL|member|rkey
id|u32
id|rkey
suffix:semicolon
DECL|member|usecnt
id|atomic_t
id|usecnt
suffix:semicolon
multiline_comment|/* count number of MWs */
)brace
suffix:semicolon
DECL|struct|ib_mw
r_struct
id|ib_mw
(brace
DECL|member|device
r_struct
id|ib_device
op_star
id|device
suffix:semicolon
DECL|member|pd
r_struct
id|ib_pd
op_star
id|pd
suffix:semicolon
DECL|member|rkey
id|u32
id|rkey
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ib_fmr
r_struct
id|ib_fmr
(brace
DECL|member|device
r_struct
id|ib_device
op_star
id|device
suffix:semicolon
DECL|member|pd
r_struct
id|ib_pd
op_star
id|pd
suffix:semicolon
DECL|member|list
r_struct
id|list_head
id|list
suffix:semicolon
DECL|member|lkey
id|u32
id|lkey
suffix:semicolon
DECL|member|rkey
id|u32
id|rkey
suffix:semicolon
)brace
suffix:semicolon
r_struct
id|ib_mad
suffix:semicolon
r_struct
id|ib_grh
suffix:semicolon
DECL|enum|ib_process_mad_flags
r_enum
id|ib_process_mad_flags
(brace
DECL|enumerator|IB_MAD_IGNORE_MKEY
id|IB_MAD_IGNORE_MKEY
op_assign
l_int|1
comma
DECL|enumerator|IB_MAD_IGNORE_BKEY
id|IB_MAD_IGNORE_BKEY
op_assign
l_int|2
comma
DECL|enumerator|IB_MAD_IGNORE_ALL
id|IB_MAD_IGNORE_ALL
op_assign
id|IB_MAD_IGNORE_MKEY
op_or
id|IB_MAD_IGNORE_BKEY
)brace
suffix:semicolon
DECL|enum|ib_mad_result
r_enum
id|ib_mad_result
(brace
DECL|enumerator|IB_MAD_RESULT_FAILURE
id|IB_MAD_RESULT_FAILURE
op_assign
l_int|0
comma
multiline_comment|/* (!SUCCESS is the important flag) */
DECL|enumerator|IB_MAD_RESULT_SUCCESS
id|IB_MAD_RESULT_SUCCESS
op_assign
l_int|1
op_lshift
l_int|0
comma
multiline_comment|/* MAD was successfully processed   */
DECL|enumerator|IB_MAD_RESULT_REPLY
id|IB_MAD_RESULT_REPLY
op_assign
l_int|1
op_lshift
l_int|1
comma
multiline_comment|/* Reply packet needs to be sent    */
DECL|enumerator|IB_MAD_RESULT_CONSUMED
id|IB_MAD_RESULT_CONSUMED
op_assign
l_int|1
op_lshift
l_int|2
multiline_comment|/* Packet consumed: stop processing */
)brace
suffix:semicolon
DECL|macro|IB_DEVICE_NAME_MAX
mdefine_line|#define IB_DEVICE_NAME_MAX 64
DECL|struct|ib_cache
r_struct
id|ib_cache
(brace
DECL|member|lock
id|rwlock_t
id|lock
suffix:semicolon
DECL|member|event_handler
r_struct
id|ib_event_handler
id|event_handler
suffix:semicolon
DECL|member|pkey_cache
r_struct
id|ib_pkey_cache
op_star
op_star
id|pkey_cache
suffix:semicolon
DECL|member|gid_cache
r_struct
id|ib_gid_cache
op_star
op_star
id|gid_cache
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ib_device
r_struct
id|ib_device
(brace
DECL|member|dma_device
r_struct
id|device
op_star
id|dma_device
suffix:semicolon
DECL|member|name
r_char
id|name
(braket
id|IB_DEVICE_NAME_MAX
)braket
suffix:semicolon
DECL|member|event_handler_list
r_struct
id|list_head
id|event_handler_list
suffix:semicolon
DECL|member|event_handler_lock
id|spinlock_t
id|event_handler_lock
suffix:semicolon
DECL|member|core_list
r_struct
id|list_head
id|core_list
suffix:semicolon
DECL|member|client_data_list
r_struct
id|list_head
id|client_data_list
suffix:semicolon
DECL|member|client_data_lock
id|spinlock_t
id|client_data_lock
suffix:semicolon
DECL|member|cache
r_struct
id|ib_cache
id|cache
suffix:semicolon
DECL|member|flags
id|u32
id|flags
suffix:semicolon
DECL|member|query_device
r_int
(paren
op_star
id|query_device
)paren
(paren
r_struct
id|ib_device
op_star
id|device
comma
r_struct
id|ib_device_attr
op_star
id|device_attr
)paren
suffix:semicolon
DECL|member|query_port
r_int
(paren
op_star
id|query_port
)paren
(paren
r_struct
id|ib_device
op_star
id|device
comma
id|u8
id|port_num
comma
r_struct
id|ib_port_attr
op_star
id|port_attr
)paren
suffix:semicolon
DECL|member|query_gid
r_int
(paren
op_star
id|query_gid
)paren
(paren
r_struct
id|ib_device
op_star
id|device
comma
id|u8
id|port_num
comma
r_int
id|index
comma
r_union
id|ib_gid
op_star
id|gid
)paren
suffix:semicolon
DECL|member|query_pkey
r_int
(paren
op_star
id|query_pkey
)paren
(paren
r_struct
id|ib_device
op_star
id|device
comma
id|u8
id|port_num
comma
id|u16
id|index
comma
id|u16
op_star
id|pkey
)paren
suffix:semicolon
DECL|member|modify_device
r_int
(paren
op_star
id|modify_device
)paren
(paren
r_struct
id|ib_device
op_star
id|device
comma
r_int
id|device_modify_mask
comma
r_struct
id|ib_device_modify
op_star
id|device_modify
)paren
suffix:semicolon
DECL|member|modify_port
r_int
(paren
op_star
id|modify_port
)paren
(paren
r_struct
id|ib_device
op_star
id|device
comma
id|u8
id|port_num
comma
r_int
id|port_modify_mask
comma
r_struct
id|ib_port_modify
op_star
id|port_modify
)paren
suffix:semicolon
DECL|member|alloc_pd
r_struct
id|ib_pd
op_star
(paren
op_star
id|alloc_pd
)paren
(paren
r_struct
id|ib_device
op_star
id|device
)paren
suffix:semicolon
DECL|member|dealloc_pd
r_int
(paren
op_star
id|dealloc_pd
)paren
(paren
r_struct
id|ib_pd
op_star
id|pd
)paren
suffix:semicolon
DECL|member|create_ah
r_struct
id|ib_ah
op_star
(paren
op_star
id|create_ah
)paren
(paren
r_struct
id|ib_pd
op_star
id|pd
comma
r_struct
id|ib_ah_attr
op_star
id|ah_attr
)paren
suffix:semicolon
DECL|member|modify_ah
r_int
(paren
op_star
id|modify_ah
)paren
(paren
r_struct
id|ib_ah
op_star
id|ah
comma
r_struct
id|ib_ah_attr
op_star
id|ah_attr
)paren
suffix:semicolon
DECL|member|query_ah
r_int
(paren
op_star
id|query_ah
)paren
(paren
r_struct
id|ib_ah
op_star
id|ah
comma
r_struct
id|ib_ah_attr
op_star
id|ah_attr
)paren
suffix:semicolon
DECL|member|destroy_ah
r_int
(paren
op_star
id|destroy_ah
)paren
(paren
r_struct
id|ib_ah
op_star
id|ah
)paren
suffix:semicolon
DECL|member|create_qp
r_struct
id|ib_qp
op_star
(paren
op_star
id|create_qp
)paren
(paren
r_struct
id|ib_pd
op_star
id|pd
comma
r_struct
id|ib_qp_init_attr
op_star
id|qp_init_attr
)paren
suffix:semicolon
DECL|member|modify_qp
r_int
(paren
op_star
id|modify_qp
)paren
(paren
r_struct
id|ib_qp
op_star
id|qp
comma
r_struct
id|ib_qp_attr
op_star
id|qp_attr
comma
r_int
id|qp_attr_mask
)paren
suffix:semicolon
DECL|member|query_qp
r_int
(paren
op_star
id|query_qp
)paren
(paren
r_struct
id|ib_qp
op_star
id|qp
comma
r_struct
id|ib_qp_attr
op_star
id|qp_attr
comma
r_int
id|qp_attr_mask
comma
r_struct
id|ib_qp_init_attr
op_star
id|qp_init_attr
)paren
suffix:semicolon
DECL|member|destroy_qp
r_int
(paren
op_star
id|destroy_qp
)paren
(paren
r_struct
id|ib_qp
op_star
id|qp
)paren
suffix:semicolon
DECL|member|post_send
r_int
(paren
op_star
id|post_send
)paren
(paren
r_struct
id|ib_qp
op_star
id|qp
comma
r_struct
id|ib_send_wr
op_star
id|send_wr
comma
r_struct
id|ib_send_wr
op_star
op_star
id|bad_send_wr
)paren
suffix:semicolon
DECL|member|post_recv
r_int
(paren
op_star
id|post_recv
)paren
(paren
r_struct
id|ib_qp
op_star
id|qp
comma
r_struct
id|ib_recv_wr
op_star
id|recv_wr
comma
r_struct
id|ib_recv_wr
op_star
op_star
id|bad_recv_wr
)paren
suffix:semicolon
DECL|member|create_cq
r_struct
id|ib_cq
op_star
(paren
op_star
id|create_cq
)paren
(paren
r_struct
id|ib_device
op_star
id|device
comma
r_int
id|cqe
)paren
suffix:semicolon
DECL|member|destroy_cq
r_int
(paren
op_star
id|destroy_cq
)paren
(paren
r_struct
id|ib_cq
op_star
id|cq
)paren
suffix:semicolon
DECL|member|resize_cq
r_int
(paren
op_star
id|resize_cq
)paren
(paren
r_struct
id|ib_cq
op_star
id|cq
comma
r_int
op_star
id|cqe
)paren
suffix:semicolon
DECL|member|poll_cq
r_int
(paren
op_star
id|poll_cq
)paren
(paren
r_struct
id|ib_cq
op_star
id|cq
comma
r_int
id|num_entries
comma
r_struct
id|ib_wc
op_star
id|wc
)paren
suffix:semicolon
DECL|member|peek_cq
r_int
(paren
op_star
id|peek_cq
)paren
(paren
r_struct
id|ib_cq
op_star
id|cq
comma
r_int
id|wc_cnt
)paren
suffix:semicolon
DECL|member|req_notify_cq
r_int
(paren
op_star
id|req_notify_cq
)paren
(paren
r_struct
id|ib_cq
op_star
id|cq
comma
r_enum
id|ib_cq_notify
id|cq_notify
)paren
suffix:semicolon
DECL|member|req_ncomp_notif
r_int
(paren
op_star
id|req_ncomp_notif
)paren
(paren
r_struct
id|ib_cq
op_star
id|cq
comma
r_int
id|wc_cnt
)paren
suffix:semicolon
DECL|member|get_dma_mr
r_struct
id|ib_mr
op_star
(paren
op_star
id|get_dma_mr
)paren
(paren
r_struct
id|ib_pd
op_star
id|pd
comma
r_int
id|mr_access_flags
)paren
suffix:semicolon
DECL|member|reg_phys_mr
r_struct
id|ib_mr
op_star
(paren
op_star
id|reg_phys_mr
)paren
(paren
r_struct
id|ib_pd
op_star
id|pd
comma
r_struct
id|ib_phys_buf
op_star
id|phys_buf_array
comma
r_int
id|num_phys_buf
comma
r_int
id|mr_access_flags
comma
id|u64
op_star
id|iova_start
)paren
suffix:semicolon
DECL|member|query_mr
r_int
(paren
op_star
id|query_mr
)paren
(paren
r_struct
id|ib_mr
op_star
id|mr
comma
r_struct
id|ib_mr_attr
op_star
id|mr_attr
)paren
suffix:semicolon
DECL|member|dereg_mr
r_int
(paren
op_star
id|dereg_mr
)paren
(paren
r_struct
id|ib_mr
op_star
id|mr
)paren
suffix:semicolon
DECL|member|rereg_phys_mr
r_int
(paren
op_star
id|rereg_phys_mr
)paren
(paren
r_struct
id|ib_mr
op_star
id|mr
comma
r_int
id|mr_rereg_mask
comma
r_struct
id|ib_pd
op_star
id|pd
comma
r_struct
id|ib_phys_buf
op_star
id|phys_buf_array
comma
r_int
id|num_phys_buf
comma
r_int
id|mr_access_flags
comma
id|u64
op_star
id|iova_start
)paren
suffix:semicolon
DECL|member|alloc_mw
r_struct
id|ib_mw
op_star
(paren
op_star
id|alloc_mw
)paren
(paren
r_struct
id|ib_pd
op_star
id|pd
)paren
suffix:semicolon
DECL|member|bind_mw
r_int
(paren
op_star
id|bind_mw
)paren
(paren
r_struct
id|ib_qp
op_star
id|qp
comma
r_struct
id|ib_mw
op_star
id|mw
comma
r_struct
id|ib_mw_bind
op_star
id|mw_bind
)paren
suffix:semicolon
DECL|member|dealloc_mw
r_int
(paren
op_star
id|dealloc_mw
)paren
(paren
r_struct
id|ib_mw
op_star
id|mw
)paren
suffix:semicolon
DECL|member|alloc_fmr
r_struct
id|ib_fmr
op_star
(paren
op_star
id|alloc_fmr
)paren
(paren
r_struct
id|ib_pd
op_star
id|pd
comma
r_int
id|mr_access_flags
comma
r_struct
id|ib_fmr_attr
op_star
id|fmr_attr
)paren
suffix:semicolon
DECL|member|map_phys_fmr
r_int
(paren
op_star
id|map_phys_fmr
)paren
(paren
r_struct
id|ib_fmr
op_star
id|fmr
comma
id|u64
op_star
id|page_list
comma
r_int
id|list_len
comma
id|u64
id|iova
)paren
suffix:semicolon
DECL|member|unmap_fmr
r_int
(paren
op_star
id|unmap_fmr
)paren
(paren
r_struct
id|list_head
op_star
id|fmr_list
)paren
suffix:semicolon
DECL|member|dealloc_fmr
r_int
(paren
op_star
id|dealloc_fmr
)paren
(paren
r_struct
id|ib_fmr
op_star
id|fmr
)paren
suffix:semicolon
DECL|member|attach_mcast
r_int
(paren
op_star
id|attach_mcast
)paren
(paren
r_struct
id|ib_qp
op_star
id|qp
comma
r_union
id|ib_gid
op_star
id|gid
comma
id|u16
id|lid
)paren
suffix:semicolon
DECL|member|detach_mcast
r_int
(paren
op_star
id|detach_mcast
)paren
(paren
r_struct
id|ib_qp
op_star
id|qp
comma
r_union
id|ib_gid
op_star
id|gid
comma
id|u16
id|lid
)paren
suffix:semicolon
DECL|member|process_mad
r_int
(paren
op_star
id|process_mad
)paren
(paren
r_struct
id|ib_device
op_star
id|device
comma
r_int
id|process_mad_flags
comma
id|u8
id|port_num
comma
r_struct
id|ib_wc
op_star
id|in_wc
comma
r_struct
id|ib_grh
op_star
id|in_grh
comma
r_struct
id|ib_mad
op_star
id|in_mad
comma
r_struct
id|ib_mad
op_star
id|out_mad
)paren
suffix:semicolon
DECL|member|class_dev
r_struct
id|class_device
id|class_dev
suffix:semicolon
DECL|member|ports_parent
r_struct
id|kobject
id|ports_parent
suffix:semicolon
DECL|member|port_list
r_struct
id|list_head
id|port_list
suffix:semicolon
r_enum
(brace
DECL|enumerator|IB_DEV_UNINITIALIZED
id|IB_DEV_UNINITIALIZED
comma
DECL|enumerator|IB_DEV_REGISTERED
id|IB_DEV_REGISTERED
comma
DECL|enumerator|IB_DEV_UNREGISTERED
id|IB_DEV_UNREGISTERED
DECL|member|reg_state
)brace
id|reg_state
suffix:semicolon
DECL|member|node_type
id|u8
id|node_type
suffix:semicolon
DECL|member|phys_port_cnt
id|u8
id|phys_port_cnt
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ib_client
r_struct
id|ib_client
(brace
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|add
r_void
(paren
op_star
id|add
)paren
(paren
r_struct
id|ib_device
op_star
)paren
suffix:semicolon
DECL|member|remove
r_void
(paren
op_star
id|remove
)paren
(paren
r_struct
id|ib_device
op_star
)paren
suffix:semicolon
DECL|member|list
r_struct
id|list_head
id|list
suffix:semicolon
)brace
suffix:semicolon
r_struct
id|ib_device
op_star
id|ib_alloc_device
c_func
(paren
r_int
id|size
)paren
suffix:semicolon
r_void
id|ib_dealloc_device
c_func
(paren
r_struct
id|ib_device
op_star
id|device
)paren
suffix:semicolon
r_int
id|ib_register_device
(paren
r_struct
id|ib_device
op_star
id|device
)paren
suffix:semicolon
r_void
id|ib_unregister_device
c_func
(paren
r_struct
id|ib_device
op_star
id|device
)paren
suffix:semicolon
r_int
id|ib_register_client
(paren
r_struct
id|ib_client
op_star
id|client
)paren
suffix:semicolon
r_void
id|ib_unregister_client
c_func
(paren
r_struct
id|ib_client
op_star
id|client
)paren
suffix:semicolon
r_void
op_star
id|ib_get_client_data
c_func
(paren
r_struct
id|ib_device
op_star
id|device
comma
r_struct
id|ib_client
op_star
id|client
)paren
suffix:semicolon
r_void
id|ib_set_client_data
c_func
(paren
r_struct
id|ib_device
op_star
id|device
comma
r_struct
id|ib_client
op_star
id|client
comma
r_void
op_star
id|data
)paren
suffix:semicolon
r_int
id|ib_register_event_handler
(paren
r_struct
id|ib_event_handler
op_star
id|event_handler
)paren
suffix:semicolon
r_int
id|ib_unregister_event_handler
c_func
(paren
r_struct
id|ib_event_handler
op_star
id|event_handler
)paren
suffix:semicolon
r_void
id|ib_dispatch_event
c_func
(paren
r_struct
id|ib_event
op_star
id|event
)paren
suffix:semicolon
r_int
id|ib_query_device
c_func
(paren
r_struct
id|ib_device
op_star
id|device
comma
r_struct
id|ib_device_attr
op_star
id|device_attr
)paren
suffix:semicolon
r_int
id|ib_query_port
c_func
(paren
r_struct
id|ib_device
op_star
id|device
comma
id|u8
id|port_num
comma
r_struct
id|ib_port_attr
op_star
id|port_attr
)paren
suffix:semicolon
r_int
id|ib_query_gid
c_func
(paren
r_struct
id|ib_device
op_star
id|device
comma
id|u8
id|port_num
comma
r_int
id|index
comma
r_union
id|ib_gid
op_star
id|gid
)paren
suffix:semicolon
r_int
id|ib_query_pkey
c_func
(paren
r_struct
id|ib_device
op_star
id|device
comma
id|u8
id|port_num
comma
id|u16
id|index
comma
id|u16
op_star
id|pkey
)paren
suffix:semicolon
r_int
id|ib_modify_device
c_func
(paren
r_struct
id|ib_device
op_star
id|device
comma
r_int
id|device_modify_mask
comma
r_struct
id|ib_device_modify
op_star
id|device_modify
)paren
suffix:semicolon
r_int
id|ib_modify_port
c_func
(paren
r_struct
id|ib_device
op_star
id|device
comma
id|u8
id|port_num
comma
r_int
id|port_modify_mask
comma
r_struct
id|ib_port_modify
op_star
id|port_modify
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_alloc_pd - Allocates an unused protection domain.&n; * @device: The device on which to allocate the protection domain.&n; *&n; * A protection domain object provides an association between QPs, shared&n; * receive queues, address handles, memory regions, and memory windows.&n; */
r_struct
id|ib_pd
op_star
id|ib_alloc_pd
c_func
(paren
r_struct
id|ib_device
op_star
id|device
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_dealloc_pd - Deallocates a protection domain.&n; * @pd: The protection domain to deallocate.&n; */
r_int
id|ib_dealloc_pd
c_func
(paren
r_struct
id|ib_pd
op_star
id|pd
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_create_ah - Creates an address handle for the given address vector.&n; * @pd: The protection domain associated with the address handle.&n; * @ah_attr: The attributes of the address vector.&n; *&n; * The address handle is used to reference a local or global destination&n; * in all UD QP post sends.&n; */
r_struct
id|ib_ah
op_star
id|ib_create_ah
c_func
(paren
r_struct
id|ib_pd
op_star
id|pd
comma
r_struct
id|ib_ah_attr
op_star
id|ah_attr
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_modify_ah - Modifies the address vector associated with an address&n; *   handle.&n; * @ah: The address handle to modify.&n; * @ah_attr: The new address vector attributes to associate with the&n; *   address handle.&n; */
r_int
id|ib_modify_ah
c_func
(paren
r_struct
id|ib_ah
op_star
id|ah
comma
r_struct
id|ib_ah_attr
op_star
id|ah_attr
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_query_ah - Queries the address vector associated with an address&n; *   handle.&n; * @ah: The address handle to query.&n; * @ah_attr: The address vector attributes associated with the address&n; *   handle.&n; */
r_int
id|ib_query_ah
c_func
(paren
r_struct
id|ib_ah
op_star
id|ah
comma
r_struct
id|ib_ah_attr
op_star
id|ah_attr
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_destroy_ah - Destroys an address handle.&n; * @ah: The address handle to destroy.&n; */
r_int
id|ib_destroy_ah
c_func
(paren
r_struct
id|ib_ah
op_star
id|ah
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_create_qp - Creates a QP associated with the specified protection&n; *   domain.&n; * @pd: The protection domain associated with the QP.&n; * @qp_init_attr: A list of initial attributes required to create the QP.&n; */
r_struct
id|ib_qp
op_star
id|ib_create_qp
c_func
(paren
r_struct
id|ib_pd
op_star
id|pd
comma
r_struct
id|ib_qp_init_attr
op_star
id|qp_init_attr
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_modify_qp - Modifies the attributes for the specified QP and then&n; *   transitions the QP to the given state.&n; * @qp: The QP to modify.&n; * @qp_attr: On input, specifies the QP attributes to modify.  On output,&n; *   the current values of selected QP attributes are returned.&n; * @qp_attr_mask: A bit-mask used to specify which attributes of the QP&n; *   are being modified.&n; */
r_int
id|ib_modify_qp
c_func
(paren
r_struct
id|ib_qp
op_star
id|qp
comma
r_struct
id|ib_qp_attr
op_star
id|qp_attr
comma
r_int
id|qp_attr_mask
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_query_qp - Returns the attribute list and current values for the&n; *   specified QP.&n; * @qp: The QP to query.&n; * @qp_attr: The attributes of the specified QP.&n; * @qp_attr_mask: A bit-mask used to select specific attributes to query.&n; * @qp_init_attr: Additional attributes of the selected QP.&n; *&n; * The qp_attr_mask may be used to limit the query to gathering only the&n; * selected attributes.&n; */
r_int
id|ib_query_qp
c_func
(paren
r_struct
id|ib_qp
op_star
id|qp
comma
r_struct
id|ib_qp_attr
op_star
id|qp_attr
comma
r_int
id|qp_attr_mask
comma
r_struct
id|ib_qp_init_attr
op_star
id|qp_init_attr
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_destroy_qp - Destroys the specified QP.&n; * @qp: The QP to destroy.&n; */
r_int
id|ib_destroy_qp
c_func
(paren
r_struct
id|ib_qp
op_star
id|qp
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_post_send - Posts a list of work requests to the send queue of&n; *   the specified QP.&n; * @qp: The QP to post the work request on.&n; * @send_wr: A list of work requests to post on the send queue.&n; * @bad_send_wr: On an immediate failure, this parameter will reference&n; *   the work request that failed to be posted on the QP.&n; */
DECL|function|ib_post_send
r_static
r_inline
r_int
id|ib_post_send
c_func
(paren
r_struct
id|ib_qp
op_star
id|qp
comma
r_struct
id|ib_send_wr
op_star
id|send_wr
comma
r_struct
id|ib_send_wr
op_star
op_star
id|bad_send_wr
)paren
(brace
r_return
id|qp-&gt;device
op_member_access_from_pointer
id|post_send
c_func
(paren
id|qp
comma
id|send_wr
comma
id|bad_send_wr
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * ib_post_recv - Posts a list of work requests to the receive queue of&n; *   the specified QP.&n; * @qp: The QP to post the work request on.&n; * @recv_wr: A list of work requests to post on the receive queue.&n; * @bad_recv_wr: On an immediate failure, this parameter will reference&n; *   the work request that failed to be posted on the QP.&n; */
DECL|function|ib_post_recv
r_static
r_inline
r_int
id|ib_post_recv
c_func
(paren
r_struct
id|ib_qp
op_star
id|qp
comma
r_struct
id|ib_recv_wr
op_star
id|recv_wr
comma
r_struct
id|ib_recv_wr
op_star
op_star
id|bad_recv_wr
)paren
(brace
r_return
id|qp-&gt;device
op_member_access_from_pointer
id|post_recv
c_func
(paren
id|qp
comma
id|recv_wr
comma
id|bad_recv_wr
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * ib_create_cq - Creates a CQ on the specified device.&n; * @device: The device on which to create the CQ.&n; * @comp_handler: A user-specified callback that is invoked when a&n; *   completion event occurs on the CQ.&n; * @event_handler: A user-specified callback that is invoked when an&n; *   asynchronous event not associated with a completion occurs on the CQ.&n; * @cq_context: Context associated with the CQ returned to the user via&n; *   the associated completion and event handlers.&n; * @cqe: The minimum size of the CQ.&n; *&n; * Users can examine the cq structure to determine the actual CQ size.&n; */
r_struct
id|ib_cq
op_star
id|ib_create_cq
c_func
(paren
r_struct
id|ib_device
op_star
id|device
comma
id|ib_comp_handler
id|comp_handler
comma
r_void
(paren
op_star
id|event_handler
)paren
(paren
r_struct
id|ib_event
op_star
comma
r_void
op_star
)paren
comma
r_void
op_star
id|cq_context
comma
r_int
id|cqe
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_resize_cq - Modifies the capacity of the CQ.&n; * @cq: The CQ to resize.&n; * @cqe: The minimum size of the CQ.&n; *&n; * Users can examine the cq structure to determine the actual CQ size.&n; */
r_int
id|ib_resize_cq
c_func
(paren
r_struct
id|ib_cq
op_star
id|cq
comma
r_int
id|cqe
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_destroy_cq - Destroys the specified CQ.&n; * @cq: The CQ to destroy.&n; */
r_int
id|ib_destroy_cq
c_func
(paren
r_struct
id|ib_cq
op_star
id|cq
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_poll_cq - poll a CQ for completion(s)&n; * @cq:the CQ being polled&n; * @num_entries:maximum number of completions to return&n; * @wc:array of at least @num_entries &amp;struct ib_wc where completions&n; *   will be returned&n; *&n; * Poll a CQ for (possibly multiple) completions.  If the return value&n; * is &lt; 0, an error occurred.  If the return value is &gt;= 0, it is the&n; * number of completions returned.  If the return value is&n; * non-negative and &lt; num_entries, then the CQ was emptied.&n; */
DECL|function|ib_poll_cq
r_static
r_inline
r_int
id|ib_poll_cq
c_func
(paren
r_struct
id|ib_cq
op_star
id|cq
comma
r_int
id|num_entries
comma
r_struct
id|ib_wc
op_star
id|wc
)paren
(brace
r_return
id|cq-&gt;device
op_member_access_from_pointer
id|poll_cq
c_func
(paren
id|cq
comma
id|num_entries
comma
id|wc
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * ib_peek_cq - Returns the number of unreaped completions currently&n; *   on the specified CQ.&n; * @cq: The CQ to peek.&n; * @wc_cnt: A minimum number of unreaped completions to check for.&n; *&n; * If the number of unreaped completions is greater than or equal to wc_cnt,&n; * this function returns wc_cnt, otherwise, it returns the actual number of&n; * unreaped completions.&n; */
r_int
id|ib_peek_cq
c_func
(paren
r_struct
id|ib_cq
op_star
id|cq
comma
r_int
id|wc_cnt
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_req_notify_cq - Request completion notification on a CQ.&n; * @cq: The CQ to generate an event for.&n; * @cq_notify: If set to %IB_CQ_SOLICITED, completion notification will&n; *   occur on the next solicited event. If set to %IB_CQ_NEXT_COMP,&n; *   notification will occur on the next completion.&n; */
DECL|function|ib_req_notify_cq
r_static
r_inline
r_int
id|ib_req_notify_cq
c_func
(paren
r_struct
id|ib_cq
op_star
id|cq
comma
r_enum
id|ib_cq_notify
id|cq_notify
)paren
(brace
r_return
id|cq-&gt;device
op_member_access_from_pointer
id|req_notify_cq
c_func
(paren
id|cq
comma
id|cq_notify
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * ib_req_ncomp_notif - Request completion notification when there are&n; *   at least the specified number of unreaped completions on the CQ.&n; * @cq: The CQ to generate an event for.&n; * @wc_cnt: The number of unreaped completions that should be on the&n; *   CQ before an event is generated.&n; */
DECL|function|ib_req_ncomp_notif
r_static
r_inline
r_int
id|ib_req_ncomp_notif
c_func
(paren
r_struct
id|ib_cq
op_star
id|cq
comma
r_int
id|wc_cnt
)paren
(brace
r_return
id|cq-&gt;device-&gt;req_ncomp_notif
ques
c_cond
id|cq-&gt;device
op_member_access_from_pointer
id|req_ncomp_notif
c_func
(paren
id|cq
comma
id|wc_cnt
)paren
suffix:colon
op_minus
id|ENOSYS
suffix:semicolon
)brace
multiline_comment|/**&n; * ib_get_dma_mr - Returns a memory region for system memory that is&n; *   usable for DMA.&n; * @pd: The protection domain associated with the memory region.&n; * @mr_access_flags: Specifies the memory access rights.&n; */
r_struct
id|ib_mr
op_star
id|ib_get_dma_mr
c_func
(paren
r_struct
id|ib_pd
op_star
id|pd
comma
r_int
id|mr_access_flags
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_reg_phys_mr - Prepares a virtually addressed memory region for use&n; *   by an HCA.&n; * @pd: The protection domain associated assigned to the registered region.&n; * @phys_buf_array: Specifies a list of physical buffers to use in the&n; *   memory region.&n; * @num_phys_buf: Specifies the size of the phys_buf_array.&n; * @mr_access_flags: Specifies the memory access rights.&n; * @iova_start: The offset of the region&squot;s starting I/O virtual address.&n; */
r_struct
id|ib_mr
op_star
id|ib_reg_phys_mr
c_func
(paren
r_struct
id|ib_pd
op_star
id|pd
comma
r_struct
id|ib_phys_buf
op_star
id|phys_buf_array
comma
r_int
id|num_phys_buf
comma
r_int
id|mr_access_flags
comma
id|u64
op_star
id|iova_start
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_rereg_phys_mr - Modifies the attributes of an existing memory region.&n; *   Conceptually, this call performs the functions deregister memory region&n; *   followed by register physical memory region.  Where possible,&n; *   resources are reused instead of deallocated and reallocated.&n; * @mr: The memory region to modify.&n; * @mr_rereg_mask: A bit-mask used to indicate which of the following&n; *   properties of the memory region are being modified.&n; * @pd: If %IB_MR_REREG_PD is set in mr_rereg_mask, this field specifies&n; *   the new protection domain to associated with the memory region,&n; *   otherwise, this parameter is ignored.&n; * @phys_buf_array: If %IB_MR_REREG_TRANS is set in mr_rereg_mask, this&n; *   field specifies a list of physical buffers to use in the new&n; *   translation, otherwise, this parameter is ignored.&n; * @num_phys_buf: If %IB_MR_REREG_TRANS is set in mr_rereg_mask, this&n; *   field specifies the size of the phys_buf_array, otherwise, this&n; *   parameter is ignored.&n; * @mr_access_flags: If %IB_MR_REREG_ACCESS is set in mr_rereg_mask, this&n; *   field specifies the new memory access rights, otherwise, this&n; *   parameter is ignored.&n; * @iova_start: The offset of the region&squot;s starting I/O virtual address.&n; */
r_int
id|ib_rereg_phys_mr
c_func
(paren
r_struct
id|ib_mr
op_star
id|mr
comma
r_int
id|mr_rereg_mask
comma
r_struct
id|ib_pd
op_star
id|pd
comma
r_struct
id|ib_phys_buf
op_star
id|phys_buf_array
comma
r_int
id|num_phys_buf
comma
r_int
id|mr_access_flags
comma
id|u64
op_star
id|iova_start
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_query_mr - Retrieves information about a specific memory region.&n; * @mr: The memory region to retrieve information about.&n; * @mr_attr: The attributes of the specified memory region.&n; */
r_int
id|ib_query_mr
c_func
(paren
r_struct
id|ib_mr
op_star
id|mr
comma
r_struct
id|ib_mr_attr
op_star
id|mr_attr
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_dereg_mr - Deregisters a memory region and removes it from the&n; *   HCA translation table.&n; * @mr: The memory region to deregister.&n; */
r_int
id|ib_dereg_mr
c_func
(paren
r_struct
id|ib_mr
op_star
id|mr
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_alloc_mw - Allocates a memory window.&n; * @pd: The protection domain associated with the memory window.&n; */
r_struct
id|ib_mw
op_star
id|ib_alloc_mw
c_func
(paren
r_struct
id|ib_pd
op_star
id|pd
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_bind_mw - Posts a work request to the send queue of the specified&n; *   QP, which binds the memory window to the given address range and&n; *   remote access attributes.&n; * @qp: QP to post the bind work request on.&n; * @mw: The memory window to bind.&n; * @mw_bind: Specifies information about the memory window, including&n; *   its address range, remote access rights, and associated memory region.&n; */
DECL|function|ib_bind_mw
r_static
r_inline
r_int
id|ib_bind_mw
c_func
(paren
r_struct
id|ib_qp
op_star
id|qp
comma
r_struct
id|ib_mw
op_star
id|mw
comma
r_struct
id|ib_mw_bind
op_star
id|mw_bind
)paren
(brace
multiline_comment|/* XXX reference counting in corresponding MR? */
r_return
id|mw-&gt;device-&gt;bind_mw
ques
c_cond
id|mw-&gt;device
op_member_access_from_pointer
id|bind_mw
c_func
(paren
id|qp
comma
id|mw
comma
id|mw_bind
)paren
suffix:colon
op_minus
id|ENOSYS
suffix:semicolon
)brace
multiline_comment|/**&n; * ib_dealloc_mw - Deallocates a memory window.&n; * @mw: The memory window to deallocate.&n; */
r_int
id|ib_dealloc_mw
c_func
(paren
r_struct
id|ib_mw
op_star
id|mw
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_alloc_fmr - Allocates a unmapped fast memory region.&n; * @pd: The protection domain associated with the unmapped region.&n; * @mr_access_flags: Specifies the memory access rights.&n; * @fmr_attr: Attributes of the unmapped region.&n; *&n; * A fast memory region must be mapped before it can be used as part of&n; * a work request.&n; */
r_struct
id|ib_fmr
op_star
id|ib_alloc_fmr
c_func
(paren
r_struct
id|ib_pd
op_star
id|pd
comma
r_int
id|mr_access_flags
comma
r_struct
id|ib_fmr_attr
op_star
id|fmr_attr
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_map_phys_fmr - Maps a list of physical pages to a fast memory region.&n; * @fmr: The fast memory region to associate with the pages.&n; * @page_list: An array of physical pages to map to the fast memory region.&n; * @list_len: The number of pages in page_list.&n; * @iova: The I/O virtual address to use with the mapped region.&n; */
DECL|function|ib_map_phys_fmr
r_static
r_inline
r_int
id|ib_map_phys_fmr
c_func
(paren
r_struct
id|ib_fmr
op_star
id|fmr
comma
id|u64
op_star
id|page_list
comma
r_int
id|list_len
comma
id|u64
id|iova
)paren
(brace
r_return
id|fmr-&gt;device
op_member_access_from_pointer
id|map_phys_fmr
c_func
(paren
id|fmr
comma
id|page_list
comma
id|list_len
comma
id|iova
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * ib_unmap_fmr - Removes the mapping from a list of fast memory regions.&n; * @fmr_list: A linked list of fast memory regions to unmap.&n; */
r_int
id|ib_unmap_fmr
c_func
(paren
r_struct
id|list_head
op_star
id|fmr_list
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_dealloc_fmr - Deallocates a fast memory region.&n; * @fmr: The fast memory region to deallocate.&n; */
r_int
id|ib_dealloc_fmr
c_func
(paren
r_struct
id|ib_fmr
op_star
id|fmr
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_attach_mcast - Attaches the specified QP to a multicast group.&n; * @qp: QP to attach to the multicast group.  The QP must be type&n; *   IB_QPT_UD.&n; * @gid: Multicast group GID.&n; * @lid: Multicast group LID in host byte order.&n; *&n; * In order to send and receive multicast packets, subnet&n; * administration must have created the multicast group and configured&n; * the fabric appropriately.  The port associated with the specified&n; * QP must also be a member of the multicast group.&n; */
r_int
id|ib_attach_mcast
c_func
(paren
r_struct
id|ib_qp
op_star
id|qp
comma
r_union
id|ib_gid
op_star
id|gid
comma
id|u16
id|lid
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_detach_mcast - Detaches the specified QP from a multicast group.&n; * @qp: QP to detach from the multicast group.&n; * @gid: Multicast group GID.&n; * @lid: Multicast group LID in host byte order.&n; */
r_int
id|ib_detach_mcast
c_func
(paren
r_struct
id|ib_qp
op_star
id|qp
comma
r_union
id|ib_gid
op_star
id|gid
comma
id|u16
id|lid
)paren
suffix:semicolon
macro_line|#endif /* IB_VERBS_H */
eof
