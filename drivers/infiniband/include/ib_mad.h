multiline_comment|/*&n; * Copyright (c) 2004 Mellanox Technologies Ltd.  All rights reserved.&n; * Copyright (c) 2004 Infinicon Corporation.  All rights reserved.&n; * Copyright (c) 2004 Intel Corporation.  All rights reserved.&n; * Copyright (c) 2004 Topspin Corporation.  All rights reserved.&n; * Copyright (c) 2004 Voltaire Corporation.  All rights reserved.&n; *&n; * This software is available to you under a choice of one of two&n; * licenses.  You may choose to be licensed under the terms of the GNU&n; * General Public License (GPL) Version 2, available from the file&n; * COPYING in the main directory of this source tree, or the&n; * OpenIB.org BSD license below:&n; *&n; *     Redistribution and use in source and binary forms, with or&n; *     without modification, are permitted provided that the following&n; *     conditions are met:&n; *&n; *      - Redistributions of source code must retain the above&n; *        copyright notice, this list of conditions and the following&n; *        disclaimer.&n; *&n; *      - Redistributions in binary form must reproduce the above&n; *        copyright notice, this list of conditions and the following&n; *        disclaimer in the documentation and/or other materials&n; *        provided with the distribution.&n; *&n; * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,&n; * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF&n; * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND&n; * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS&n; * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN&n; * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN&n; * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&n; * SOFTWARE.&n; *&n; * $Id: ib_mad.h 1389 2004-12-27 22:56:47Z roland $&n; */
macro_line|#if !defined( IB_MAD_H )
DECL|macro|IB_MAD_H
mdefine_line|#define IB_MAD_H
macro_line|#include &lt;ib_verbs.h&gt;
multiline_comment|/* Management base version */
DECL|macro|IB_MGMT_BASE_VERSION
mdefine_line|#define IB_MGMT_BASE_VERSION&t;&t;&t;1
multiline_comment|/* Management classes */
DECL|macro|IB_MGMT_CLASS_SUBN_LID_ROUTED
mdefine_line|#define IB_MGMT_CLASS_SUBN_LID_ROUTED&t;&t;0x01
DECL|macro|IB_MGMT_CLASS_SUBN_DIRECTED_ROUTE
mdefine_line|#define IB_MGMT_CLASS_SUBN_DIRECTED_ROUTE&t;0x81
DECL|macro|IB_MGMT_CLASS_SUBN_ADM
mdefine_line|#define IB_MGMT_CLASS_SUBN_ADM&t;&t;&t;0x03
DECL|macro|IB_MGMT_CLASS_PERF_MGMT
mdefine_line|#define IB_MGMT_CLASS_PERF_MGMT&t;&t;&t;0x04
DECL|macro|IB_MGMT_CLASS_BM
mdefine_line|#define IB_MGMT_CLASS_BM&t;&t;&t;0x05
DECL|macro|IB_MGMT_CLASS_DEVICE_MGMT
mdefine_line|#define IB_MGMT_CLASS_DEVICE_MGMT&t;&t;0x06
DECL|macro|IB_MGMT_CLASS_CM
mdefine_line|#define IB_MGMT_CLASS_CM&t;&t;&t;0x07
DECL|macro|IB_MGMT_CLASS_SNMP
mdefine_line|#define IB_MGMT_CLASS_SNMP&t;&t;&t;0x08
DECL|macro|IB_MGMT_CLASS_VENDOR_RANGE2_START
mdefine_line|#define IB_MGMT_CLASS_VENDOR_RANGE2_START&t;0x30
DECL|macro|IB_MGMT_CLASS_VENDOR_RANGE2_END
mdefine_line|#define IB_MGMT_CLASS_VENDOR_RANGE2_END&t;&t;0x4F
multiline_comment|/* Management methods */
DECL|macro|IB_MGMT_METHOD_GET
mdefine_line|#define IB_MGMT_METHOD_GET&t;&t;&t;0x01
DECL|macro|IB_MGMT_METHOD_SET
mdefine_line|#define IB_MGMT_METHOD_SET&t;&t;&t;0x02
DECL|macro|IB_MGMT_METHOD_GET_RESP
mdefine_line|#define IB_MGMT_METHOD_GET_RESP&t;&t;&t;0x81
DECL|macro|IB_MGMT_METHOD_SEND
mdefine_line|#define IB_MGMT_METHOD_SEND&t;&t;&t;0x03
DECL|macro|IB_MGMT_METHOD_TRAP
mdefine_line|#define IB_MGMT_METHOD_TRAP&t;&t;&t;0x05
DECL|macro|IB_MGMT_METHOD_REPORT
mdefine_line|#define IB_MGMT_METHOD_REPORT&t;&t;&t;0x06
DECL|macro|IB_MGMT_METHOD_REPORT_RESP
mdefine_line|#define IB_MGMT_METHOD_REPORT_RESP&t;&t;0x86
DECL|macro|IB_MGMT_METHOD_TRAP_REPRESS
mdefine_line|#define IB_MGMT_METHOD_TRAP_REPRESS&t;&t;0x07
DECL|macro|IB_MGMT_METHOD_RESP
mdefine_line|#define IB_MGMT_METHOD_RESP&t;&t;&t;0x80
DECL|macro|IB_MGMT_MAX_METHODS
mdefine_line|#define IB_MGMT_MAX_METHODS&t;&t;&t;128
DECL|macro|IB_QP0
mdefine_line|#define IB_QP0&t;&t;0
DECL|macro|IB_QP1
mdefine_line|#define IB_QP1&t;&t;__constant_htonl(1)
DECL|macro|IB_QP1_QKEY
mdefine_line|#define IB_QP1_QKEY&t;0x80010000
DECL|struct|ib_grh
r_struct
id|ib_grh
(brace
DECL|member|version_tclass_flow
id|u32
id|version_tclass_flow
suffix:semicolon
DECL|member|paylen
id|u16
id|paylen
suffix:semicolon
DECL|member|next_hdr
id|u8
id|next_hdr
suffix:semicolon
DECL|member|hop_limit
id|u8
id|hop_limit
suffix:semicolon
DECL|member|sgid
r_union
id|ib_gid
id|sgid
suffix:semicolon
DECL|member|dgid
r_union
id|ib_gid
id|dgid
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|struct|ib_mad_hdr
r_struct
id|ib_mad_hdr
(brace
DECL|member|base_version
id|u8
id|base_version
suffix:semicolon
DECL|member|mgmt_class
id|u8
id|mgmt_class
suffix:semicolon
DECL|member|class_version
id|u8
id|class_version
suffix:semicolon
DECL|member|method
id|u8
id|method
suffix:semicolon
DECL|member|status
id|u16
id|status
suffix:semicolon
DECL|member|class_specific
id|u16
id|class_specific
suffix:semicolon
DECL|member|tid
id|u64
id|tid
suffix:semicolon
DECL|member|attr_id
id|u16
id|attr_id
suffix:semicolon
DECL|member|resv
id|u16
id|resv
suffix:semicolon
DECL|member|attr_mod
id|u32
id|attr_mod
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|struct|ib_rmpp_hdr
r_struct
id|ib_rmpp_hdr
(brace
DECL|member|rmpp_version
id|u8
id|rmpp_version
suffix:semicolon
DECL|member|rmpp_type
id|u8
id|rmpp_type
suffix:semicolon
DECL|member|rmpp_rtime_flags
id|u8
id|rmpp_rtime_flags
suffix:semicolon
DECL|member|rmpp_status
id|u8
id|rmpp_status
suffix:semicolon
DECL|member|seg_num
id|u32
id|seg_num
suffix:semicolon
DECL|member|paylen_newwin
id|u32
id|paylen_newwin
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|struct|ib_mad
r_struct
id|ib_mad
(brace
DECL|member|mad_hdr
r_struct
id|ib_mad_hdr
id|mad_hdr
suffix:semicolon
DECL|member|data
id|u8
id|data
(braket
l_int|232
)braket
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|struct|ib_rmpp_mad
r_struct
id|ib_rmpp_mad
(brace
DECL|member|mad_hdr
r_struct
id|ib_mad_hdr
id|mad_hdr
suffix:semicolon
DECL|member|rmpp_hdr
r_struct
id|ib_rmpp_hdr
id|rmpp_hdr
suffix:semicolon
DECL|member|data
id|u8
id|data
(braket
l_int|220
)braket
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|struct|ib_vendor_mad
r_struct
id|ib_vendor_mad
(brace
DECL|member|mad_hdr
r_struct
id|ib_mad_hdr
id|mad_hdr
suffix:semicolon
DECL|member|rmpp_hdr
r_struct
id|ib_rmpp_hdr
id|rmpp_hdr
suffix:semicolon
DECL|member|reserved
id|u8
id|reserved
suffix:semicolon
DECL|member|oui
id|u8
id|oui
(braket
l_int|3
)braket
suffix:semicolon
DECL|member|data
id|u8
id|data
(braket
l_int|216
)braket
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
r_struct
id|ib_mad_agent
suffix:semicolon
r_struct
id|ib_mad_send_wc
suffix:semicolon
r_struct
id|ib_mad_recv_wc
suffix:semicolon
multiline_comment|/**&n; * ib_mad_send_handler - callback handler for a sent MAD.&n; * @mad_agent: MAD agent that sent the MAD.&n; * @mad_send_wc: Send work completion information on the sent MAD.&n; */
DECL|typedef|ib_mad_send_handler
r_typedef
r_void
(paren
op_star
id|ib_mad_send_handler
)paren
(paren
r_struct
id|ib_mad_agent
op_star
id|mad_agent
comma
r_struct
id|ib_mad_send_wc
op_star
id|mad_send_wc
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_mad_snoop_handler - Callback handler for snooping sent MADs.&n; * @mad_agent: MAD agent that snooped the MAD.&n; * @send_wr: Work request information on the sent MAD.&n; * @mad_send_wc: Work completion information on the sent MAD.  Valid&n; *   only for snooping that occurs on a send completion.&n; *&n; * Clients snooping MADs should not modify data referenced by the @send_wr&n; * or @mad_send_wc.&n; */
DECL|typedef|ib_mad_snoop_handler
r_typedef
r_void
(paren
op_star
id|ib_mad_snoop_handler
)paren
(paren
r_struct
id|ib_mad_agent
op_star
id|mad_agent
comma
r_struct
id|ib_send_wr
op_star
id|send_wr
comma
r_struct
id|ib_mad_send_wc
op_star
id|mad_send_wc
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_mad_recv_handler - callback handler for a received MAD.&n; * @mad_agent: MAD agent requesting the received MAD.&n; * @mad_recv_wc: Received work completion information on the received MAD.&n; *&n; * MADs received in response to a send request operation will be handed to&n; * the user after the send operation completes.  All data buffers given&n; * to registered agents through this routine are owned by the receiving&n; * client, except for snooping agents.  Clients snooping MADs should not&n; * modify the data referenced by @mad_recv_wc.&n; */
DECL|typedef|ib_mad_recv_handler
r_typedef
r_void
(paren
op_star
id|ib_mad_recv_handler
)paren
(paren
r_struct
id|ib_mad_agent
op_star
id|mad_agent
comma
r_struct
id|ib_mad_recv_wc
op_star
id|mad_recv_wc
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_mad_agent - Used to track MAD registration with the access layer.&n; * @device: Reference to device registration is on.&n; * @qp: Reference to QP used for sending and receiving MADs.&n; * @recv_handler: Callback handler for a received MAD.&n; * @send_handler: Callback handler for a sent MAD.&n; * @snoop_handler: Callback handler for snooped sent MADs.&n; * @context: User-specified context associated with this registration.&n; * @hi_tid: Access layer assigned transaction ID for this client.&n; *   Unsolicited MADs sent by this client will have the upper 32-bits&n; *   of their TID set to this value.&n; * @port_num: Port number on which QP is registered&n; */
DECL|struct|ib_mad_agent
r_struct
id|ib_mad_agent
(brace
DECL|member|device
r_struct
id|ib_device
op_star
id|device
suffix:semicolon
DECL|member|qp
r_struct
id|ib_qp
op_star
id|qp
suffix:semicolon
DECL|member|recv_handler
id|ib_mad_recv_handler
id|recv_handler
suffix:semicolon
DECL|member|send_handler
id|ib_mad_send_handler
id|send_handler
suffix:semicolon
DECL|member|snoop_handler
id|ib_mad_snoop_handler
id|snoop_handler
suffix:semicolon
DECL|member|context
r_void
op_star
id|context
suffix:semicolon
DECL|member|hi_tid
id|u32
id|hi_tid
suffix:semicolon
DECL|member|port_num
id|u8
id|port_num
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/**&n; * ib_mad_send_wc - MAD send completion information.&n; * @wr_id: Work request identifier associated with the send MAD request.&n; * @status: Completion status.&n; * @vendor_err: Optional vendor error information returned with a failed&n; *   request.&n; */
DECL|struct|ib_mad_send_wc
r_struct
id|ib_mad_send_wc
(brace
DECL|member|wr_id
id|u64
id|wr_id
suffix:semicolon
DECL|member|status
r_enum
id|ib_wc_status
id|status
suffix:semicolon
DECL|member|vendor_err
id|u32
id|vendor_err
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/**&n; * ib_mad_recv_buf - received MAD buffer information.&n; * @list: Reference to next data buffer for a received RMPP MAD.&n; * @grh: References a data buffer containing the global route header.&n; *   The data refereced by this buffer is only valid if the GRH is&n; *   valid.&n; * @mad: References the start of the received MAD.&n; */
DECL|struct|ib_mad_recv_buf
r_struct
id|ib_mad_recv_buf
(brace
DECL|member|list
r_struct
id|list_head
id|list
suffix:semicolon
DECL|member|grh
r_struct
id|ib_grh
op_star
id|grh
suffix:semicolon
DECL|member|mad
r_struct
id|ib_mad
op_star
id|mad
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/**&n; * ib_mad_recv_wc - received MAD information.&n; * @wc: Completion information for the received data.&n; * @recv_buf: Specifies the location of the received data buffer(s).&n; * @mad_len: The length of the received MAD, without duplicated headers.&n; *&n; * For received response, the wr_id field of the wc is set to the wr_id&n; *   for the corresponding send request.&n; */
DECL|struct|ib_mad_recv_wc
r_struct
id|ib_mad_recv_wc
(brace
DECL|member|wc
r_struct
id|ib_wc
op_star
id|wc
suffix:semicolon
DECL|member|recv_buf
r_struct
id|ib_mad_recv_buf
id|recv_buf
suffix:semicolon
DECL|member|mad_len
r_int
id|mad_len
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/**&n; * ib_mad_reg_req - MAD registration request&n; * @mgmt_class: Indicates which management class of MADs should be receive&n; *   by the caller.  This field is only required if the user wishes to&n; *   receive unsolicited MADs, otherwise it should be 0.&n; * @mgmt_class_version: Indicates which version of MADs for the given&n; *   management class to receive.&n; * @oui: Indicates IEEE OUI when mgmt_class is a vendor class&n; *   in the range from 0x30 to 0x4f. Otherwise not used.&n; * @method_mask: The caller will receive unsolicited MADs for any method&n; *   where @method_mask = 1.&n; */
DECL|struct|ib_mad_reg_req
r_struct
id|ib_mad_reg_req
(brace
DECL|member|mgmt_class
id|u8
id|mgmt_class
suffix:semicolon
DECL|member|mgmt_class_version
id|u8
id|mgmt_class_version
suffix:semicolon
DECL|member|oui
id|u8
id|oui
(braket
l_int|3
)braket
suffix:semicolon
id|DECLARE_BITMAP
c_func
(paren
id|method_mask
comma
id|IB_MGMT_MAX_METHODS
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/**&n; * ib_register_mad_agent - Register to send/receive MADs.&n; * @device: The device to register with.&n; * @port_num: The port on the specified device to use.&n; * @qp_type: Specifies which QP to access.  Must be either&n; *   IB_QPT_SMI or IB_QPT_GSI.&n; * @mad_reg_req: Specifies which unsolicited MADs should be received&n; *   by the caller.  This parameter may be NULL if the caller only&n; *   wishes to receive solicited responses.&n; * @rmpp_version: If set, indicates that the client will send&n; *   and receive MADs that contain the RMPP header for the given version.&n; *   If set to 0, indicates that RMPP is not used by this client.&n; * @send_handler: The completion callback routine invoked after a send&n; *   request has completed.&n; * @recv_handler: The completion callback routine invoked for a received&n; *   MAD.&n; * @context: User specified context associated with the registration.&n; */
r_struct
id|ib_mad_agent
op_star
id|ib_register_mad_agent
c_func
(paren
r_struct
id|ib_device
op_star
id|device
comma
id|u8
id|port_num
comma
r_enum
id|ib_qp_type
id|qp_type
comma
r_struct
id|ib_mad_reg_req
op_star
id|mad_reg_req
comma
id|u8
id|rmpp_version
comma
id|ib_mad_send_handler
id|send_handler
comma
id|ib_mad_recv_handler
id|recv_handler
comma
r_void
op_star
id|context
)paren
suffix:semicolon
DECL|enum|ib_mad_snoop_flags
r_enum
id|ib_mad_snoop_flags
(brace
multiline_comment|/*IB_MAD_SNOOP_POSTED_SENDS&t;   = 1,*/
multiline_comment|/*IB_MAD_SNOOP_RMPP_SENDS&t;   = (1&lt;&lt;1),*/
DECL|enumerator|IB_MAD_SNOOP_SEND_COMPLETIONS
id|IB_MAD_SNOOP_SEND_COMPLETIONS
op_assign
(paren
l_int|1
op_lshift
l_int|2
)paren
comma
multiline_comment|/*IB_MAD_SNOOP_RMPP_SEND_COMPLETIONS = (1&lt;&lt;3),*/
DECL|enumerator|IB_MAD_SNOOP_RECVS
id|IB_MAD_SNOOP_RECVS
op_assign
(paren
l_int|1
op_lshift
l_int|4
)paren
multiline_comment|/*IB_MAD_SNOOP_RMPP_RECVS&t;   = (1&lt;&lt;5),*/
multiline_comment|/*IB_MAD_SNOOP_REDIRECTED_QPS&t;   = (1&lt;&lt;6)*/
)brace
suffix:semicolon
multiline_comment|/**&n; * ib_register_mad_snoop - Register to snoop sent and received MADs.&n; * @device: The device to register with.&n; * @port_num: The port on the specified device to use.&n; * @qp_type: Specifies which QP traffic to snoop.  Must be either&n; *   IB_QPT_SMI or IB_QPT_GSI.&n; * @mad_snoop_flags: Specifies information where snooping occurs.&n; * @send_handler: The callback routine invoked for a snooped send.&n; * @recv_handler: The callback routine invoked for a snooped receive.&n; * @context: User specified context associated with the registration.&n; */
r_struct
id|ib_mad_agent
op_star
id|ib_register_mad_snoop
c_func
(paren
r_struct
id|ib_device
op_star
id|device
comma
id|u8
id|port_num
comma
r_enum
id|ib_qp_type
id|qp_type
comma
r_int
id|mad_snoop_flags
comma
id|ib_mad_snoop_handler
id|snoop_handler
comma
id|ib_mad_recv_handler
id|recv_handler
comma
r_void
op_star
id|context
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_unregister_mad_agent - Unregisters a client from using MAD services.&n; * @mad_agent: Corresponding MAD registration request to deregister.&n; *&n; * After invoking this routine, MAD services are no longer usable by the&n; * client on the associated QP.&n; */
r_int
id|ib_unregister_mad_agent
c_func
(paren
r_struct
id|ib_mad_agent
op_star
id|mad_agent
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_post_send_mad - Posts MAD(s) to the send queue of the QP associated&n; *   with the registered client.&n; * @mad_agent: Specifies the associated registration to post the send to.&n; * @send_wr: Specifies the information needed to send the MAD(s).&n; * @bad_send_wr: Specifies the MAD on which an error was encountered.&n; *&n; * Sent MADs are not guaranteed to complete in the order that they were posted.&n; */
r_int
id|ib_post_send_mad
c_func
(paren
r_struct
id|ib_mad_agent
op_star
id|mad_agent
comma
r_struct
id|ib_send_wr
op_star
id|send_wr
comma
r_struct
id|ib_send_wr
op_star
op_star
id|bad_send_wr
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_coalesce_recv_mad - Coalesces received MAD data into a single buffer.&n; * @mad_recv_wc: Work completion information for a received MAD.&n; * @buf: User-provided data buffer to receive the coalesced buffers.  The&n; *   referenced buffer should be at least the size of the mad_len specified&n; *   by @mad_recv_wc.&n; *&n; * This call copies a chain of received RMPP MADs into a single data buffer,&n; * removing duplicated headers.&n; */
r_void
id|ib_coalesce_recv_mad
c_func
(paren
r_struct
id|ib_mad_recv_wc
op_star
id|mad_recv_wc
comma
r_void
op_star
id|buf
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_free_recv_mad - Returns data buffers used to receive a MAD to the&n; *   access layer.&n; * @mad_recv_wc: Work completion information for a received MAD.&n; *&n; * Clients receiving MADs through their ib_mad_recv_handler must call this&n; * routine to return the work completion buffers to the access layer.&n; */
r_void
id|ib_free_recv_mad
c_func
(paren
r_struct
id|ib_mad_recv_wc
op_star
id|mad_recv_wc
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_cancel_mad - Cancels an outstanding send MAD operation.&n; * @mad_agent: Specifies the registration associated with sent MAD.&n; * @wr_id: Indicates the work request identifier of the MAD to cancel.&n; *&n; * MADs will be returned to the user through the corresponding&n; * ib_mad_send_handler.&n; */
r_void
id|ib_cancel_mad
c_func
(paren
r_struct
id|ib_mad_agent
op_star
id|mad_agent
comma
id|u64
id|wr_id
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_redirect_mad_qp - Registers a QP for MAD services.&n; * @qp: Reference to a QP that requires MAD services.&n; * @rmpp_version: If set, indicates that the client will send&n; *   and receive MADs that contain the RMPP header for the given version.&n; *   If set to 0, indicates that RMPP is not used by this client.&n; * @send_handler: The completion callback routine invoked after a send&n; *   request has completed.&n; * @recv_handler: The completion callback routine invoked for a received&n; *   MAD.&n; * @context: User specified context associated with the registration.&n; *&n; * Use of this call allows clients to use MAD services, such as RMPP,&n; * on user-owned QPs.  After calling this routine, users may send&n; * MADs on the specified QP by calling ib_mad_post_send.&n; */
r_struct
id|ib_mad_agent
op_star
id|ib_redirect_mad_qp
c_func
(paren
r_struct
id|ib_qp
op_star
id|qp
comma
id|u8
id|rmpp_version
comma
id|ib_mad_send_handler
id|send_handler
comma
id|ib_mad_recv_handler
id|recv_handler
comma
r_void
op_star
id|context
)paren
suffix:semicolon
multiline_comment|/**&n; * ib_process_mad_wc - Processes a work completion associated with a&n; *   MAD sent or received on a redirected QP.&n; * @mad_agent: Specifies the registered MAD service using the redirected QP.&n; * @wc: References a work completion associated with a sent or received&n; *   MAD segment.&n; *&n; * This routine is used to complete or continue processing on a MAD request.&n; * If the work completion is associated with a send operation, calling&n; * this routine is required to continue an RMPP transfer or to wait for a&n; * corresponding response, if it is a request.  If the work completion is&n; * associated with a receive operation, calling this routine is required to&n; * process an inbound or outbound RMPP transfer, or to match a response MAD&n; * with its corresponding request.&n; */
r_int
id|ib_process_mad_wc
c_func
(paren
r_struct
id|ib_mad_agent
op_star
id|mad_agent
comma
r_struct
id|ib_wc
op_star
id|wc
)paren
suffix:semicolon
macro_line|#endif /* IB_MAD_H */
eof
