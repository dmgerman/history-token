multiline_comment|/*&n; * Compaq Hot Plug Controller Driver&n; *&n; * Copyright (c) 1995,2001 Compaq Computer Corporation&n; * Copyright (c) 2001 Greg Kroah-Hartman (greg@kroah.com)&n; * Copyright (c) 2001 IBM&n; *&n; * All rights reserved.&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2 of the License, or (at&n; * your option) any later version.&n; *&n; * This program is distributed in the hope that it will be useful, but&n; * WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or&n; * NON INFRINGEMENT.  See the GNU General Public License for more&n; * details.&n; *&n; * You should have received a copy of the GNU General Public License&n; * along with this program; if not, write to the Free Software&n; * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.&n; *&n; * Send feedback to &lt;greg@kroah.com&gt;&n; *&n; */
macro_line|#ifndef _CPQPHP_H
DECL|macro|_CPQPHP_H
mdefine_line|#define _CPQPHP_H
macro_line|#include &quot;pci_hotplug.h&quot;
macro_line|#include &lt;asm/io.h&gt;&t;&t;/* for read? and write? functions */
macro_line|#include &lt;linux/delay.h&gt;&t;/* for delays */
macro_line|#if !defined(CONFIG_HOTPLUG_PCI_COMPAQ_MODULE)
DECL|macro|MY_NAME
mdefine_line|#define MY_NAME&t;&quot;cpqphp.o&quot;
macro_line|#else
DECL|macro|MY_NAME
mdefine_line|#define MY_NAME&t;THIS_MODULE-&gt;name
macro_line|#endif
DECL|macro|dbg
mdefine_line|#define dbg(fmt, arg...) do { if (cpqhp_debug) printk(KERN_DEBUG &quot;%s: &quot; fmt , MY_NAME , ## arg); } while (0)
DECL|macro|err
mdefine_line|#define err(format, arg...) printk(KERN_ERR &quot;%s: &quot; format , MY_NAME , ## arg)
DECL|macro|info
mdefine_line|#define info(format, arg...) printk(KERN_INFO &quot;%s: &quot; format , MY_NAME , ## arg)
DECL|macro|warn
mdefine_line|#define warn(format, arg...) printk(KERN_WARNING &quot;%s: &quot; format , MY_NAME , ## arg)
DECL|struct|smbios_system_slot
r_struct
id|smbios_system_slot
(brace
DECL|member|type
id|u8
id|type
suffix:semicolon
DECL|member|length
id|u8
id|length
suffix:semicolon
DECL|member|handle
id|u16
id|handle
suffix:semicolon
DECL|member|name_string_num
id|u8
id|name_string_num
suffix:semicolon
DECL|member|slot_type
id|u8
id|slot_type
suffix:semicolon
DECL|member|slot_width
id|u8
id|slot_width
suffix:semicolon
DECL|member|slot_current_usage
id|u8
id|slot_current_usage
suffix:semicolon
DECL|member|slot_length
id|u8
id|slot_length
suffix:semicolon
DECL|member|slot_number
id|u16
id|slot_number
suffix:semicolon
DECL|member|properties1
id|u8
id|properties1
suffix:semicolon
DECL|member|properties2
id|u8
id|properties2
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* offsets to the smbios generic type based on the above structure layout */
DECL|enum|smbios_system_slot_offsets
r_enum
id|smbios_system_slot_offsets
(brace
DECL|enumerator|SMBIOS_SLOT_GENERIC_TYPE
id|SMBIOS_SLOT_GENERIC_TYPE
op_assign
m_offsetof
(paren
r_struct
id|smbios_system_slot
comma
id|type
)paren
comma
DECL|enumerator|SMBIOS_SLOT_GENERIC_LENGTH
id|SMBIOS_SLOT_GENERIC_LENGTH
op_assign
m_offsetof
(paren
r_struct
id|smbios_system_slot
comma
id|length
)paren
comma
DECL|enumerator|SMBIOS_SLOT_GENERIC_HANDLE
id|SMBIOS_SLOT_GENERIC_HANDLE
op_assign
m_offsetof
(paren
r_struct
id|smbios_system_slot
comma
id|handle
)paren
comma
DECL|enumerator|SMBIOS_SLOT_NAME_STRING_NUM
id|SMBIOS_SLOT_NAME_STRING_NUM
op_assign
m_offsetof
(paren
r_struct
id|smbios_system_slot
comma
id|name_string_num
)paren
comma
DECL|enumerator|SMBIOS_SLOT_TYPE
id|SMBIOS_SLOT_TYPE
op_assign
m_offsetof
(paren
r_struct
id|smbios_system_slot
comma
id|slot_type
)paren
comma
DECL|enumerator|SMBIOS_SLOT_WIDTH
id|SMBIOS_SLOT_WIDTH
op_assign
m_offsetof
(paren
r_struct
id|smbios_system_slot
comma
id|slot_width
)paren
comma
DECL|enumerator|SMBIOS_SLOT_CURRENT_USAGE
id|SMBIOS_SLOT_CURRENT_USAGE
op_assign
m_offsetof
(paren
r_struct
id|smbios_system_slot
comma
id|slot_current_usage
)paren
comma
DECL|enumerator|SMBIOS_SLOT_LENGTH
id|SMBIOS_SLOT_LENGTH
op_assign
m_offsetof
(paren
r_struct
id|smbios_system_slot
comma
id|slot_length
)paren
comma
DECL|enumerator|SMBIOS_SLOT_NUMBER
id|SMBIOS_SLOT_NUMBER
op_assign
m_offsetof
(paren
r_struct
id|smbios_system_slot
comma
id|slot_number
)paren
comma
DECL|enumerator|SMBIOS_SLOT_PROPERTIES1
id|SMBIOS_SLOT_PROPERTIES1
op_assign
m_offsetof
(paren
r_struct
id|smbios_system_slot
comma
id|properties1
)paren
comma
DECL|enumerator|SMBIOS_SLOT_PROPERTIES2
id|SMBIOS_SLOT_PROPERTIES2
op_assign
m_offsetof
(paren
r_struct
id|smbios_system_slot
comma
id|properties2
)paren
comma
)brace
suffix:semicolon
DECL|struct|smbios_generic
r_struct
id|smbios_generic
(brace
DECL|member|type
id|u8
id|type
suffix:semicolon
DECL|member|length
id|u8
id|length
suffix:semicolon
DECL|member|handle
id|u16
id|handle
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* offsets to the smbios generic type based on the above structure layout */
DECL|enum|smbios_generic_offsets
r_enum
id|smbios_generic_offsets
(brace
DECL|enumerator|SMBIOS_GENERIC_TYPE
id|SMBIOS_GENERIC_TYPE
op_assign
m_offsetof
(paren
r_struct
id|smbios_generic
comma
id|type
)paren
comma
DECL|enumerator|SMBIOS_GENERIC_LENGTH
id|SMBIOS_GENERIC_LENGTH
op_assign
m_offsetof
(paren
r_struct
id|smbios_generic
comma
id|length
)paren
comma
DECL|enumerator|SMBIOS_GENERIC_HANDLE
id|SMBIOS_GENERIC_HANDLE
op_assign
m_offsetof
(paren
r_struct
id|smbios_generic
comma
id|handle
)paren
comma
)brace
suffix:semicolon
DECL|struct|smbios_entry_point
r_struct
id|smbios_entry_point
(brace
DECL|member|anchor
r_char
id|anchor
(braket
l_int|4
)braket
suffix:semicolon
DECL|member|ep_checksum
id|u8
id|ep_checksum
suffix:semicolon
DECL|member|ep_length
id|u8
id|ep_length
suffix:semicolon
DECL|member|major_version
id|u8
id|major_version
suffix:semicolon
DECL|member|minor_version
id|u8
id|minor_version
suffix:semicolon
DECL|member|max_size_entry
id|u16
id|max_size_entry
suffix:semicolon
DECL|member|ep_rev
id|u8
id|ep_rev
suffix:semicolon
DECL|member|reserved
id|u8
id|reserved
(braket
l_int|5
)braket
suffix:semicolon
DECL|member|int_anchor
r_char
id|int_anchor
(braket
l_int|5
)braket
suffix:semicolon
DECL|member|int_checksum
id|u8
id|int_checksum
suffix:semicolon
DECL|member|st_length
id|u16
id|st_length
suffix:semicolon
DECL|member|st_address
id|u32
id|st_address
suffix:semicolon
DECL|member|number_of_entrys
id|u16
id|number_of_entrys
suffix:semicolon
DECL|member|bcd_rev
id|u8
id|bcd_rev
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* offsets to the smbios entry point based on the above structure layout */
DECL|enum|smbios_entry_point_offsets
r_enum
id|smbios_entry_point_offsets
(brace
DECL|enumerator|ANCHOR
id|ANCHOR
op_assign
m_offsetof
(paren
r_struct
id|smbios_entry_point
comma
id|anchor
(braket
l_int|0
)braket
)paren
comma
DECL|enumerator|EP_CHECKSUM
id|EP_CHECKSUM
op_assign
m_offsetof
(paren
r_struct
id|smbios_entry_point
comma
id|ep_checksum
)paren
comma
DECL|enumerator|EP_LENGTH
id|EP_LENGTH
op_assign
m_offsetof
(paren
r_struct
id|smbios_entry_point
comma
id|ep_length
)paren
comma
DECL|enumerator|MAJOR_VERSION
id|MAJOR_VERSION
op_assign
m_offsetof
(paren
r_struct
id|smbios_entry_point
comma
id|major_version
)paren
comma
DECL|enumerator|MINOR_VERSION
id|MINOR_VERSION
op_assign
m_offsetof
(paren
r_struct
id|smbios_entry_point
comma
id|minor_version
)paren
comma
DECL|enumerator|MAX_SIZE_ENTRY
id|MAX_SIZE_ENTRY
op_assign
m_offsetof
(paren
r_struct
id|smbios_entry_point
comma
id|max_size_entry
)paren
comma
DECL|enumerator|EP_REV
id|EP_REV
op_assign
m_offsetof
(paren
r_struct
id|smbios_entry_point
comma
id|ep_rev
)paren
comma
DECL|enumerator|INT_ANCHOR
id|INT_ANCHOR
op_assign
m_offsetof
(paren
r_struct
id|smbios_entry_point
comma
id|int_anchor
(braket
l_int|0
)braket
)paren
comma
DECL|enumerator|INT_CHECKSUM
id|INT_CHECKSUM
op_assign
m_offsetof
(paren
r_struct
id|smbios_entry_point
comma
id|int_checksum
)paren
comma
DECL|enumerator|ST_LENGTH
id|ST_LENGTH
op_assign
m_offsetof
(paren
r_struct
id|smbios_entry_point
comma
id|st_length
)paren
comma
DECL|enumerator|ST_ADDRESS
id|ST_ADDRESS
op_assign
m_offsetof
(paren
r_struct
id|smbios_entry_point
comma
id|st_address
)paren
comma
DECL|enumerator|NUMBER_OF_ENTRYS
id|NUMBER_OF_ENTRYS
op_assign
m_offsetof
(paren
r_struct
id|smbios_entry_point
comma
id|number_of_entrys
)paren
comma
DECL|enumerator|BCD_REV
id|BCD_REV
op_assign
m_offsetof
(paren
r_struct
id|smbios_entry_point
comma
id|bcd_rev
)paren
comma
)brace
suffix:semicolon
DECL|struct|ctrl_reg
r_struct
id|ctrl_reg
(brace
multiline_comment|/* offset */
DECL|member|slot_RST
id|u8
id|slot_RST
suffix:semicolon
multiline_comment|/* 0x00 */
DECL|member|slot_enable
id|u8
id|slot_enable
suffix:semicolon
multiline_comment|/* 0x01 */
DECL|member|misc
id|u16
id|misc
suffix:semicolon
multiline_comment|/* 0x02 */
DECL|member|led_control
id|u32
id|led_control
suffix:semicolon
multiline_comment|/* 0x04 */
DECL|member|int_input_clear
id|u32
id|int_input_clear
suffix:semicolon
multiline_comment|/* 0x08 */
DECL|member|int_mask
id|u32
id|int_mask
suffix:semicolon
multiline_comment|/* 0x0a */
DECL|member|reserved0
id|u8
id|reserved0
suffix:semicolon
multiline_comment|/* 0x10 */
DECL|member|reserved1
id|u8
id|reserved1
suffix:semicolon
multiline_comment|/* 0x11 */
DECL|member|reserved2
id|u8
id|reserved2
suffix:semicolon
multiline_comment|/* 0x12 */
DECL|member|gen_output_AB
id|u8
id|gen_output_AB
suffix:semicolon
multiline_comment|/* 0x13 */
DECL|member|non_int_input
id|u32
id|non_int_input
suffix:semicolon
multiline_comment|/* 0x14 */
DECL|member|reserved3
id|u32
id|reserved3
suffix:semicolon
multiline_comment|/* 0x18 */
DECL|member|reserved4
id|u32
id|reserved4
suffix:semicolon
multiline_comment|/* 0x1a */
DECL|member|reserved5
id|u32
id|reserved5
suffix:semicolon
multiline_comment|/* 0x20 */
DECL|member|reserved6
id|u8
id|reserved6
suffix:semicolon
multiline_comment|/* 0x24 */
DECL|member|reserved7
id|u8
id|reserved7
suffix:semicolon
multiline_comment|/* 0x25 */
DECL|member|reserved8
id|u16
id|reserved8
suffix:semicolon
multiline_comment|/* 0x26 */
DECL|member|slot_mask
id|u8
id|slot_mask
suffix:semicolon
multiline_comment|/* 0x28 */
DECL|member|reserved9
id|u8
id|reserved9
suffix:semicolon
multiline_comment|/* 0x29 */
DECL|member|reserved10
id|u8
id|reserved10
suffix:semicolon
multiline_comment|/* 0x2a */
DECL|member|reserved11
id|u8
id|reserved11
suffix:semicolon
multiline_comment|/* 0x2b */
DECL|member|slot_SERR
id|u8
id|slot_SERR
suffix:semicolon
multiline_comment|/* 0x2c */
DECL|member|slot_power
id|u8
id|slot_power
suffix:semicolon
multiline_comment|/* 0x2d */
DECL|member|reserved12
id|u8
id|reserved12
suffix:semicolon
multiline_comment|/* 0x2e */
DECL|member|reserved13
id|u8
id|reserved13
suffix:semicolon
multiline_comment|/* 0x2f */
DECL|member|next_curr_freq
id|u8
id|next_curr_freq
suffix:semicolon
multiline_comment|/* 0x30 */
DECL|member|reset_freq_mode
id|u8
id|reset_freq_mode
suffix:semicolon
multiline_comment|/* 0x31 */
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* offsets to the controller registers based on the above structure layout */
DECL|enum|ctrl_offsets
r_enum
id|ctrl_offsets
(brace
DECL|enumerator|SLOT_RST
id|SLOT_RST
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|slot_RST
)paren
comma
DECL|enumerator|SLOT_ENABLE
id|SLOT_ENABLE
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|slot_enable
)paren
comma
DECL|enumerator|MISC
id|MISC
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|misc
)paren
comma
DECL|enumerator|LED_CONTROL
id|LED_CONTROL
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|led_control
)paren
comma
DECL|enumerator|INT_INPUT_CLEAR
id|INT_INPUT_CLEAR
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|int_input_clear
)paren
comma
DECL|enumerator|INT_MASK
id|INT_MASK
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|int_mask
)paren
comma
DECL|enumerator|CTRL_RESERVED0
id|CTRL_RESERVED0
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|reserved0
)paren
comma
DECL|enumerator|CTRL_RESERVED1
id|CTRL_RESERVED1
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|reserved1
)paren
comma
DECL|enumerator|CTRL_RESERVED2
id|CTRL_RESERVED2
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|reserved1
)paren
comma
DECL|enumerator|GEN_OUTPUT_AB
id|GEN_OUTPUT_AB
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|gen_output_AB
)paren
comma
DECL|enumerator|NON_INT_INPUT
id|NON_INT_INPUT
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|non_int_input
)paren
comma
DECL|enumerator|CTRL_RESERVED3
id|CTRL_RESERVED3
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|reserved3
)paren
comma
DECL|enumerator|CTRL_RESERVED4
id|CTRL_RESERVED4
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|reserved4
)paren
comma
DECL|enumerator|CTRL_RESERVED5
id|CTRL_RESERVED5
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|reserved5
)paren
comma
DECL|enumerator|CTRL_RESERVED6
id|CTRL_RESERVED6
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|reserved6
)paren
comma
DECL|enumerator|CTRL_RESERVED7
id|CTRL_RESERVED7
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|reserved7
)paren
comma
DECL|enumerator|CTRL_RESERVED8
id|CTRL_RESERVED8
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|reserved8
)paren
comma
DECL|enumerator|SLOT_MASK
id|SLOT_MASK
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|slot_mask
)paren
comma
DECL|enumerator|CTRL_RESERVED9
id|CTRL_RESERVED9
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|reserved9
)paren
comma
DECL|enumerator|CTRL_RESERVED10
id|CTRL_RESERVED10
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|reserved10
)paren
comma
DECL|enumerator|CTRL_RESERVED11
id|CTRL_RESERVED11
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|reserved11
)paren
comma
DECL|enumerator|SLOT_SERR
id|SLOT_SERR
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|slot_SERR
)paren
comma
DECL|enumerator|SLOT_POWER
id|SLOT_POWER
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|slot_power
)paren
comma
DECL|enumerator|NEXT_CURR_FREQ
id|NEXT_CURR_FREQ
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|next_curr_freq
)paren
comma
DECL|enumerator|RESET_FREQ_MODE
id|RESET_FREQ_MODE
op_assign
m_offsetof
(paren
r_struct
id|ctrl_reg
comma
id|reset_freq_mode
)paren
comma
)brace
suffix:semicolon
DECL|struct|hrt
r_struct
id|hrt
(brace
DECL|member|sig0
r_char
id|sig0
suffix:semicolon
DECL|member|sig1
r_char
id|sig1
suffix:semicolon
DECL|member|sig2
r_char
id|sig2
suffix:semicolon
DECL|member|sig3
r_char
id|sig3
suffix:semicolon
DECL|member|unused_IRQ
id|u16
id|unused_IRQ
suffix:semicolon
DECL|member|PCIIRQ
id|u16
id|PCIIRQ
suffix:semicolon
DECL|member|number_of_entries
id|u8
id|number_of_entries
suffix:semicolon
DECL|member|revision
id|u8
id|revision
suffix:semicolon
DECL|member|reserved1
id|u16
id|reserved1
suffix:semicolon
DECL|member|reserved2
id|u32
id|reserved2
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* offsets to the hotplug resource table registers based on the above structure layout */
DECL|enum|hrt_offsets
r_enum
id|hrt_offsets
(brace
DECL|enumerator|SIG0
id|SIG0
op_assign
m_offsetof
(paren
r_struct
id|hrt
comma
id|sig0
)paren
comma
DECL|enumerator|SIG1
id|SIG1
op_assign
m_offsetof
(paren
r_struct
id|hrt
comma
id|sig1
)paren
comma
DECL|enumerator|SIG2
id|SIG2
op_assign
m_offsetof
(paren
r_struct
id|hrt
comma
id|sig2
)paren
comma
DECL|enumerator|SIG3
id|SIG3
op_assign
m_offsetof
(paren
r_struct
id|hrt
comma
id|sig3
)paren
comma
DECL|enumerator|UNUSED_IRQ
id|UNUSED_IRQ
op_assign
m_offsetof
(paren
r_struct
id|hrt
comma
id|unused_IRQ
)paren
comma
DECL|enumerator|PCIIRQ
id|PCIIRQ
op_assign
m_offsetof
(paren
r_struct
id|hrt
comma
id|PCIIRQ
)paren
comma
DECL|enumerator|NUMBER_OF_ENTRIES
id|NUMBER_OF_ENTRIES
op_assign
m_offsetof
(paren
r_struct
id|hrt
comma
id|number_of_entries
)paren
comma
DECL|enumerator|REVISION
id|REVISION
op_assign
m_offsetof
(paren
r_struct
id|hrt
comma
id|revision
)paren
comma
DECL|enumerator|HRT_RESERVED1
id|HRT_RESERVED1
op_assign
m_offsetof
(paren
r_struct
id|hrt
comma
id|reserved1
)paren
comma
DECL|enumerator|HRT_RESERVED2
id|HRT_RESERVED2
op_assign
m_offsetof
(paren
r_struct
id|hrt
comma
id|reserved2
)paren
comma
)brace
suffix:semicolon
DECL|struct|slot_rt
r_struct
id|slot_rt
(brace
DECL|member|dev_func
id|u8
id|dev_func
suffix:semicolon
DECL|member|primary_bus
id|u8
id|primary_bus
suffix:semicolon
DECL|member|secondary_bus
id|u8
id|secondary_bus
suffix:semicolon
DECL|member|max_bus
id|u8
id|max_bus
suffix:semicolon
DECL|member|io_base
id|u16
id|io_base
suffix:semicolon
DECL|member|io_length
id|u16
id|io_length
suffix:semicolon
DECL|member|mem_base
id|u16
id|mem_base
suffix:semicolon
DECL|member|mem_length
id|u16
id|mem_length
suffix:semicolon
DECL|member|pre_mem_base
id|u16
id|pre_mem_base
suffix:semicolon
DECL|member|pre_mem_length
id|u16
id|pre_mem_length
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* offsets to the hotplug slot resource table registers based on the above structure layout */
DECL|enum|slot_rt_offsets
r_enum
id|slot_rt_offsets
(brace
DECL|enumerator|DEV_FUNC
id|DEV_FUNC
op_assign
m_offsetof
(paren
r_struct
id|slot_rt
comma
id|dev_func
)paren
comma
DECL|enumerator|PRIMARY_BUS
id|PRIMARY_BUS
op_assign
m_offsetof
(paren
r_struct
id|slot_rt
comma
id|primary_bus
)paren
comma
DECL|enumerator|SECONDARY_BUS
id|SECONDARY_BUS
op_assign
m_offsetof
(paren
r_struct
id|slot_rt
comma
id|secondary_bus
)paren
comma
DECL|enumerator|MAX_BUS
id|MAX_BUS
op_assign
m_offsetof
(paren
r_struct
id|slot_rt
comma
id|max_bus
)paren
comma
DECL|enumerator|IO_BASE
id|IO_BASE
op_assign
m_offsetof
(paren
r_struct
id|slot_rt
comma
id|io_base
)paren
comma
DECL|enumerator|IO_LENGTH
id|IO_LENGTH
op_assign
m_offsetof
(paren
r_struct
id|slot_rt
comma
id|io_length
)paren
comma
DECL|enumerator|MEM_BASE
id|MEM_BASE
op_assign
m_offsetof
(paren
r_struct
id|slot_rt
comma
id|mem_base
)paren
comma
DECL|enumerator|MEM_LENGTH
id|MEM_LENGTH
op_assign
m_offsetof
(paren
r_struct
id|slot_rt
comma
id|mem_length
)paren
comma
DECL|enumerator|PRE_MEM_BASE
id|PRE_MEM_BASE
op_assign
m_offsetof
(paren
r_struct
id|slot_rt
comma
id|pre_mem_base
)paren
comma
DECL|enumerator|PRE_MEM_LENGTH
id|PRE_MEM_LENGTH
op_assign
m_offsetof
(paren
r_struct
id|slot_rt
comma
id|pre_mem_length
)paren
comma
)brace
suffix:semicolon
DECL|struct|pci_func
r_struct
id|pci_func
(brace
DECL|member|next
r_struct
id|pci_func
op_star
id|next
suffix:semicolon
DECL|member|bus
id|u8
id|bus
suffix:semicolon
DECL|member|device
id|u8
id|device
suffix:semicolon
DECL|member|function
id|u8
id|function
suffix:semicolon
DECL|member|is_a_board
id|u8
id|is_a_board
suffix:semicolon
DECL|member|status
id|u16
id|status
suffix:semicolon
DECL|member|configured
id|u8
id|configured
suffix:semicolon
DECL|member|switch_save
id|u8
id|switch_save
suffix:semicolon
DECL|member|presence_save
id|u8
id|presence_save
suffix:semicolon
DECL|member|base_length
id|u32
id|base_length
(braket
l_int|0x06
)braket
suffix:semicolon
DECL|member|base_type
id|u8
id|base_type
(braket
l_int|0x06
)braket
suffix:semicolon
DECL|member|reserved2
id|u16
id|reserved2
suffix:semicolon
DECL|member|config_space
id|u32
id|config_space
(braket
l_int|0x20
)braket
suffix:semicolon
DECL|member|mem_head
r_struct
id|pci_resource
op_star
id|mem_head
suffix:semicolon
DECL|member|p_mem_head
r_struct
id|pci_resource
op_star
id|p_mem_head
suffix:semicolon
DECL|member|io_head
r_struct
id|pci_resource
op_star
id|io_head
suffix:semicolon
DECL|member|bus_head
r_struct
id|pci_resource
op_star
id|bus_head
suffix:semicolon
DECL|member|p_task_event
r_struct
id|timer_list
op_star
id|p_task_event
suffix:semicolon
DECL|member|pci_dev
r_struct
id|pci_dev
op_star
id|pci_dev
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|SLOT_MAGIC
mdefine_line|#define SLOT_MAGIC&t;0x67267321
DECL|struct|slot
r_struct
id|slot
(brace
DECL|member|magic
id|u32
id|magic
suffix:semicolon
DECL|member|next
r_struct
id|slot
op_star
id|next
suffix:semicolon
DECL|member|bus
id|u8
id|bus
suffix:semicolon
DECL|member|device
id|u8
id|device
suffix:semicolon
DECL|member|number
id|u8
id|number
suffix:semicolon
DECL|member|is_a_board
id|u8
id|is_a_board
suffix:semicolon
DECL|member|configured
id|u8
id|configured
suffix:semicolon
DECL|member|state
id|u8
id|state
suffix:semicolon
DECL|member|switch_save
id|u8
id|switch_save
suffix:semicolon
DECL|member|presence_save
id|u8
id|presence_save
suffix:semicolon
DECL|member|capabilities
id|u32
id|capabilities
suffix:semicolon
DECL|member|reserved2
id|u16
id|reserved2
suffix:semicolon
DECL|member|task_event
r_struct
id|timer_list
id|task_event
suffix:semicolon
DECL|member|hp_slot
id|u8
id|hp_slot
suffix:semicolon
DECL|member|ctrl
r_struct
id|controller
op_star
id|ctrl
suffix:semicolon
DECL|member|p_sm_slot
r_void
op_star
id|p_sm_slot
suffix:semicolon
DECL|member|hotplug_slot
r_struct
id|hotplug_slot
op_star
id|hotplug_slot
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|pci_resource
r_struct
id|pci_resource
(brace
DECL|member|next
r_struct
id|pci_resource
op_star
id|next
suffix:semicolon
DECL|member|base
id|u32
id|base
suffix:semicolon
DECL|member|length
id|u32
id|length
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|event_info
r_struct
id|event_info
(brace
DECL|member|event_type
id|u32
id|event_type
suffix:semicolon
DECL|member|hp_slot
id|u8
id|hp_slot
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|controller
r_struct
id|controller
(brace
DECL|member|next
r_struct
id|controller
op_star
id|next
suffix:semicolon
DECL|member|ctrl_int_comp
id|u32
id|ctrl_int_comp
suffix:semicolon
DECL|member|crit_sect
r_struct
id|semaphore
id|crit_sect
suffix:semicolon
multiline_comment|/* critical section semaphore */
DECL|member|hpc_reg
r_void
op_star
id|hpc_reg
suffix:semicolon
multiline_comment|/* cookie for our pci controller location */
DECL|member|mem_head
r_struct
id|pci_resource
op_star
id|mem_head
suffix:semicolon
DECL|member|p_mem_head
r_struct
id|pci_resource
op_star
id|p_mem_head
suffix:semicolon
DECL|member|io_head
r_struct
id|pci_resource
op_star
id|io_head
suffix:semicolon
DECL|member|bus_head
r_struct
id|pci_resource
op_star
id|bus_head
suffix:semicolon
DECL|member|pci_dev
r_struct
id|pci_dev
op_star
id|pci_dev
suffix:semicolon
DECL|member|pci_bus
r_struct
id|pci_bus
op_star
id|pci_bus
suffix:semicolon
DECL|member|event_queue
r_struct
id|event_info
id|event_queue
(braket
l_int|10
)braket
suffix:semicolon
DECL|member|slot
r_struct
id|slot
op_star
id|slot
suffix:semicolon
DECL|member|next_event
id|u8
id|next_event
suffix:semicolon
DECL|member|interrupt
id|u8
id|interrupt
suffix:semicolon
DECL|member|cfgspc_irq
id|u8
id|cfgspc_irq
suffix:semicolon
DECL|member|bus
id|u8
id|bus
suffix:semicolon
multiline_comment|/* bus number for the pci hotplug controller */
DECL|member|rev
id|u8
id|rev
suffix:semicolon
DECL|member|slot_device_offset
id|u8
id|slot_device_offset
suffix:semicolon
DECL|member|first_slot
id|u8
id|first_slot
suffix:semicolon
DECL|member|add_support
id|u8
id|add_support
suffix:semicolon
DECL|member|push_flag
id|u8
id|push_flag
suffix:semicolon
DECL|member|speed
r_enum
id|pci_bus_speed
id|speed
suffix:semicolon
DECL|member|speed_capability
r_enum
id|pci_bus_speed
id|speed_capability
suffix:semicolon
DECL|member|push_button
id|u8
id|push_button
suffix:semicolon
multiline_comment|/* 0 = no pushbutton, 1 = pushbutton present */
DECL|member|slot_switch_type
id|u8
id|slot_switch_type
suffix:semicolon
multiline_comment|/* 0 = no switch, 1 = switch present */
DECL|member|defeature_PHP
id|u8
id|defeature_PHP
suffix:semicolon
multiline_comment|/* 0 = PHP not supported, 1 = PHP supported */
DECL|member|alternate_base_address
id|u8
id|alternate_base_address
suffix:semicolon
multiline_comment|/* 0 = not supported, 1 = supported */
DECL|member|pci_config_space
id|u8
id|pci_config_space
suffix:semicolon
multiline_comment|/* Index/data access to working registers 0 = not supported, 1 = supported */
DECL|member|pcix_speed_capability
id|u8
id|pcix_speed_capability
suffix:semicolon
multiline_comment|/* PCI-X */
DECL|member|pcix_support
id|u8
id|pcix_support
suffix:semicolon
multiline_comment|/* PCI-X */
DECL|member|vendor_id
id|u16
id|vendor_id
suffix:semicolon
DECL|member|int_task_event
r_struct
id|work_struct
id|int_task_event
suffix:semicolon
DECL|member|queue
id|wait_queue_head_t
id|queue
suffix:semicolon
multiline_comment|/* sleep &amp; wake process */
)brace
suffix:semicolon
DECL|struct|irq_mapping
r_struct
id|irq_mapping
(brace
DECL|member|barber_pole
id|u8
id|barber_pole
suffix:semicolon
DECL|member|valid_INT
id|u8
id|valid_INT
suffix:semicolon
DECL|member|interrupt
id|u8
id|interrupt
(braket
l_int|4
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|resource_lists
r_struct
id|resource_lists
(brace
DECL|member|mem_head
r_struct
id|pci_resource
op_star
id|mem_head
suffix:semicolon
DECL|member|p_mem_head
r_struct
id|pci_resource
op_star
id|p_mem_head
suffix:semicolon
DECL|member|io_head
r_struct
id|pci_resource
op_star
id|io_head
suffix:semicolon
DECL|member|bus_head
r_struct
id|pci_resource
op_star
id|bus_head
suffix:semicolon
DECL|member|irqs
r_struct
id|irq_mapping
op_star
id|irqs
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|ROM_PHY_ADDR
mdefine_line|#define ROM_PHY_ADDR&t;&t;&t;0x0F0000
DECL|macro|ROM_PHY_LEN
mdefine_line|#define ROM_PHY_LEN&t;&t;&t;0x00ffff
DECL|macro|PCI_HPC_ID
mdefine_line|#define PCI_HPC_ID&t;&t;&t;0xA0F7
DECL|macro|PCI_SUB_HPC_ID
mdefine_line|#define PCI_SUB_HPC_ID&t;&t;&t;0xA2F7
DECL|macro|PCI_SUB_HPC_ID2
mdefine_line|#define PCI_SUB_HPC_ID2&t;&t;&t;0xA2F8
DECL|macro|PCI_SUB_HPC_ID3
mdefine_line|#define PCI_SUB_HPC_ID3&t;&t;&t;0xA2F9
DECL|macro|PCI_SUB_HPC_ID_INTC
mdefine_line|#define PCI_SUB_HPC_ID_INTC&t;&t;0xA2FA
DECL|macro|PCI_SUB_HPC_ID4
mdefine_line|#define PCI_SUB_HPC_ID4&t;&t;&t;0xA2FD
DECL|macro|INT_BUTTON_IGNORE
mdefine_line|#define INT_BUTTON_IGNORE&t;&t;0
DECL|macro|INT_PRESENCE_ON
mdefine_line|#define INT_PRESENCE_ON&t;&t;&t;1
DECL|macro|INT_PRESENCE_OFF
mdefine_line|#define INT_PRESENCE_OFF&t;&t;2
DECL|macro|INT_SWITCH_CLOSE
mdefine_line|#define INT_SWITCH_CLOSE&t;&t;3
DECL|macro|INT_SWITCH_OPEN
mdefine_line|#define INT_SWITCH_OPEN&t;&t;&t;4
DECL|macro|INT_POWER_FAULT
mdefine_line|#define INT_POWER_FAULT&t;&t;&t;5
DECL|macro|INT_POWER_FAULT_CLEAR
mdefine_line|#define INT_POWER_FAULT_CLEAR&t;&t;6
DECL|macro|INT_BUTTON_PRESS
mdefine_line|#define INT_BUTTON_PRESS&t;&t;7
DECL|macro|INT_BUTTON_RELEASE
mdefine_line|#define INT_BUTTON_RELEASE&t;&t;8
DECL|macro|INT_BUTTON_CANCEL
mdefine_line|#define INT_BUTTON_CANCEL&t;&t;9
DECL|macro|STATIC_STATE
mdefine_line|#define STATIC_STATE&t;&t;&t;0
DECL|macro|BLINKINGON_STATE
mdefine_line|#define BLINKINGON_STATE&t;&t;1
DECL|macro|BLINKINGOFF_STATE
mdefine_line|#define BLINKINGOFF_STATE&t;&t;2
DECL|macro|POWERON_STATE
mdefine_line|#define POWERON_STATE&t;&t;&t;3
DECL|macro|POWEROFF_STATE
mdefine_line|#define POWEROFF_STATE&t;&t;&t;4
DECL|macro|PCISLOT_INTERLOCK_CLOSED
mdefine_line|#define PCISLOT_INTERLOCK_CLOSED&t;0x00000001
DECL|macro|PCISLOT_ADAPTER_PRESENT
mdefine_line|#define PCISLOT_ADAPTER_PRESENT&t;&t;0x00000002
DECL|macro|PCISLOT_POWERED
mdefine_line|#define PCISLOT_POWERED&t;&t;&t;0x00000004
DECL|macro|PCISLOT_66_MHZ_OPERATION
mdefine_line|#define PCISLOT_66_MHZ_OPERATION&t;0x00000008
DECL|macro|PCISLOT_64_BIT_OPERATION
mdefine_line|#define PCISLOT_64_BIT_OPERATION&t;0x00000010
DECL|macro|PCISLOT_REPLACE_SUPPORTED
mdefine_line|#define PCISLOT_REPLACE_SUPPORTED&t;0x00000020
DECL|macro|PCISLOT_ADD_SUPPORTED
mdefine_line|#define PCISLOT_ADD_SUPPORTED&t;&t;0x00000040
DECL|macro|PCISLOT_INTERLOCK_SUPPORTED
mdefine_line|#define PCISLOT_INTERLOCK_SUPPORTED&t;0x00000080
DECL|macro|PCISLOT_66_MHZ_SUPPORTED
mdefine_line|#define PCISLOT_66_MHZ_SUPPORTED&t;0x00000100
DECL|macro|PCISLOT_64_BIT_SUPPORTED
mdefine_line|#define PCISLOT_64_BIT_SUPPORTED&t;0x00000200
DECL|macro|PCI_TO_PCI_BRIDGE_CLASS
mdefine_line|#define PCI_TO_PCI_BRIDGE_CLASS&t;&t;0x00060400
DECL|macro|INTERLOCK_OPEN
mdefine_line|#define INTERLOCK_OPEN&t;&t;&t;0x00000002
DECL|macro|ADD_NOT_SUPPORTED
mdefine_line|#define ADD_NOT_SUPPORTED&t;&t;0x00000003
DECL|macro|CARD_FUNCTIONING
mdefine_line|#define CARD_FUNCTIONING&t;&t;0x00000005
DECL|macro|ADAPTER_NOT_SAME
mdefine_line|#define ADAPTER_NOT_SAME&t;&t;0x00000006
DECL|macro|NO_ADAPTER_PRESENT
mdefine_line|#define NO_ADAPTER_PRESENT&t;&t;0x00000009
DECL|macro|NOT_ENOUGH_RESOURCES
mdefine_line|#define NOT_ENOUGH_RESOURCES&t;&t;0x0000000B
DECL|macro|DEVICE_TYPE_NOT_SUPPORTED
mdefine_line|#define DEVICE_TYPE_NOT_SUPPORTED&t;0x0000000C
DECL|macro|POWER_FAILURE
mdefine_line|#define POWER_FAILURE&t;&t;&t;0x0000000E
DECL|macro|REMOVE_NOT_SUPPORTED
mdefine_line|#define REMOVE_NOT_SUPPORTED&t;&t;0x00000003
multiline_comment|/*&n; * error Messages&n; */
DECL|macro|msg_initialization_err
mdefine_line|#define msg_initialization_err&t;&quot;Initialization failure, error=%d&bslash;n&quot;
DECL|macro|msg_HPC_rev_error
mdefine_line|#define msg_HPC_rev_error&t;&quot;Unsupported revision of the PCI hot plug controller found.&bslash;n&quot;
DECL|macro|msg_HPC_non_compaq_or_intel
mdefine_line|#define msg_HPC_non_compaq_or_intel&t;&quot;The PCI hot plug controller is not supported by this driver.&bslash;n&quot;
DECL|macro|msg_HPC_not_supported
mdefine_line|#define msg_HPC_not_supported&t;&quot;this system is not supported by this version of cpqphpd. Upgrade to a newer version of cpqphpd&bslash;n&quot;
DECL|macro|msg_unable_to_save
mdefine_line|#define msg_unable_to_save&t;&quot;unable to store PCI hot plug add resource information. This system must be rebooted before adding any PCI devices.&bslash;n&quot;
DECL|macro|msg_button_on
mdefine_line|#define msg_button_on&t;&t;&quot;PCI slot #%d - powering on due to button press.&bslash;n&quot;
DECL|macro|msg_button_off
mdefine_line|#define msg_button_off&t;&t;&quot;PCI slot #%d - powering off due to button press.&bslash;n&quot;
DECL|macro|msg_button_cancel
mdefine_line|#define msg_button_cancel&t;&quot;PCI slot #%d - action canceled due to button press.&bslash;n&quot;
DECL|macro|msg_button_ignore
mdefine_line|#define msg_button_ignore&t;&quot;PCI slot #%d - button press ignored.  (action in progress...)&bslash;n&quot;
multiline_comment|/* sysfs functions for the hotplug controller info */
r_extern
r_void
id|cpqhp_create_ctrl_files
(paren
r_struct
id|controller
op_star
id|ctrl
)paren
suffix:semicolon
multiline_comment|/* controller functions */
r_extern
r_void
id|cpqhp_pushbutton_thread
(paren
r_int
r_int
id|event_pointer
)paren
suffix:semicolon
r_extern
r_void
id|cpqhp_ctrl_intr
(paren
r_int
id|IRQ
comma
r_struct
id|controller
op_star
id|ctrl_input
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
r_extern
r_int
id|cpqhp_find_available_resources
(paren
r_struct
id|controller
op_star
id|ctrl
comma
r_void
op_star
id|rom_start
)paren
suffix:semicolon
r_extern
r_int
id|cpqhp_event_start_thread
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|cpqhp_event_stop_thread
(paren
r_void
)paren
suffix:semicolon
r_extern
r_struct
id|pci_func
op_star
id|cpqhp_slot_create
(paren
r_int
r_char
id|busnumber
)paren
suffix:semicolon
r_extern
r_struct
id|pci_func
op_star
id|cpqhp_slot_find
(paren
r_int
r_char
id|bus
comma
r_int
r_char
id|device
comma
r_int
r_char
id|index
)paren
suffix:semicolon
r_extern
r_int
id|cpqhp_process_SI
(paren
r_struct
id|controller
op_star
id|ctrl
comma
r_struct
id|pci_func
op_star
id|func
)paren
suffix:semicolon
r_extern
r_int
id|cpqhp_process_SS
(paren
r_struct
id|controller
op_star
id|ctrl
comma
r_struct
id|pci_func
op_star
id|func
)paren
suffix:semicolon
r_extern
r_int
id|cpqhp_hardware_test
(paren
r_struct
id|controller
op_star
id|ctrl
comma
r_int
id|test_num
)paren
suffix:semicolon
multiline_comment|/* resource functions */
r_extern
r_int
id|cpqhp_resource_sort_and_combine
(paren
r_struct
id|pci_resource
op_star
op_star
id|head
)paren
suffix:semicolon
multiline_comment|/* pci functions */
r_extern
r_int
id|cpqhp_set_irq
(paren
id|u8
id|bus_num
comma
id|u8
id|dev_num
comma
id|u8
id|int_pin
comma
id|u8
id|irq_num
)paren
suffix:semicolon
r_extern
r_int
id|cpqhp_get_bus_dev
(paren
r_struct
id|controller
op_star
id|ctrl
comma
id|u8
op_star
id|bus_num
comma
id|u8
op_star
id|dev_num
comma
id|u8
id|slot
)paren
suffix:semicolon
r_extern
r_int
id|cpqhp_save_config
(paren
r_struct
id|controller
op_star
id|ctrl
comma
r_int
id|busnumber
comma
r_int
id|is_hot_plug
)paren
suffix:semicolon
r_extern
r_int
id|cpqhp_save_base_addr_length
(paren
r_struct
id|controller
op_star
id|ctrl
comma
r_struct
id|pci_func
op_star
id|func
)paren
suffix:semicolon
r_extern
r_int
id|cpqhp_save_used_resources
(paren
r_struct
id|controller
op_star
id|ctrl
comma
r_struct
id|pci_func
op_star
id|func
)paren
suffix:semicolon
r_extern
r_int
id|cpqhp_configure_board
(paren
r_struct
id|controller
op_star
id|ctrl
comma
r_struct
id|pci_func
op_star
id|func
)paren
suffix:semicolon
r_extern
r_int
id|cpqhp_save_slot_config
(paren
r_struct
id|controller
op_star
id|ctrl
comma
r_struct
id|pci_func
op_star
id|new_slot
)paren
suffix:semicolon
r_extern
r_int
id|cpqhp_valid_replace
(paren
r_struct
id|controller
op_star
id|ctrl
comma
r_struct
id|pci_func
op_star
id|func
)paren
suffix:semicolon
r_extern
r_void
id|cpqhp_destroy_board_resources
(paren
r_struct
id|pci_func
op_star
id|func
)paren
suffix:semicolon
r_extern
r_int
id|cpqhp_return_board_resources
(paren
r_struct
id|pci_func
op_star
id|func
comma
r_struct
id|resource_lists
op_star
id|resources
)paren
suffix:semicolon
r_extern
r_void
id|cpqhp_destroy_resource_list
(paren
r_struct
id|resource_lists
op_star
id|resources
)paren
suffix:semicolon
r_extern
r_int
id|cpqhp_configure_device
(paren
r_struct
id|controller
op_star
id|ctrl
comma
r_struct
id|pci_func
op_star
id|func
)paren
suffix:semicolon
r_extern
r_int
id|cpqhp_unconfigure_device
(paren
r_struct
id|pci_func
op_star
id|func
)paren
suffix:semicolon
r_extern
r_struct
id|slot
op_star
id|cpqhp_find_slot
(paren
r_struct
id|controller
op_star
id|ctrl
comma
id|u8
id|device
)paren
suffix:semicolon
multiline_comment|/* Global variables */
r_extern
r_int
id|cpqhp_debug
suffix:semicolon
r_extern
r_struct
id|controller
op_star
id|cpqhp_ctrl_list
suffix:semicolon
r_extern
r_struct
id|pci_func
op_star
id|cpqhp_slot_list
(braket
l_int|256
)braket
suffix:semicolon
multiline_comment|/* these can be gotten rid of, but for debugging they are purty */
r_extern
id|u8
id|cpqhp_nic_irq
suffix:semicolon
r_extern
id|u8
id|cpqhp_disk_irq
suffix:semicolon
multiline_comment|/* inline functions */
multiline_comment|/* Inline functions to check the sanity of a pointer that is passed to us */
DECL|function|slot_paranoia_check
r_static
r_inline
r_int
id|slot_paranoia_check
(paren
r_struct
id|slot
op_star
id|slot
comma
r_const
r_char
op_star
id|function
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|slot
)paren
(brace
id|dbg
c_func
(paren
l_string|&quot;%s - slot == NULL&quot;
comma
id|function
)paren
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
r_if
c_cond
(paren
id|slot-&gt;magic
op_ne
id|SLOT_MAGIC
)paren
(brace
id|dbg
c_func
(paren
l_string|&quot;%s - bad magic number for slot&quot;
comma
id|function
)paren
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|slot-&gt;hotplug_slot
)paren
(brace
id|dbg
c_func
(paren
l_string|&quot;%s - slot-&gt;hotplug_slot == NULL!&quot;
comma
id|function
)paren
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|get_slot
r_static
r_inline
r_struct
id|slot
op_star
id|get_slot
(paren
r_struct
id|hotplug_slot
op_star
id|hotplug_slot
comma
r_const
r_char
op_star
id|function
)paren
(brace
r_struct
id|slot
op_star
id|slot
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|hotplug_slot
)paren
(brace
id|dbg
c_func
(paren
l_string|&quot;%s - hotplug_slot == NULL&bslash;n&quot;
comma
id|function
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
id|slot
op_assign
(paren
r_struct
id|slot
op_star
)paren
id|hotplug_slot
op_member_access_from_pointer
r_private
suffix:semicolon
r_if
c_cond
(paren
id|slot_paranoia_check
(paren
id|slot
comma
id|function
)paren
)paren
r_return
l_int|NULL
suffix:semicolon
r_return
id|slot
suffix:semicolon
)brace
multiline_comment|/*&n; * return_resource&n; *&n; * Puts node back in the resource list pointed to by head&n; *&n; */
DECL|function|return_resource
r_static
r_inline
r_void
id|return_resource
(paren
r_struct
id|pci_resource
op_star
op_star
id|head
comma
r_struct
id|pci_resource
op_star
id|node
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|node
op_logical_or
op_logical_neg
id|head
)paren
r_return
suffix:semicolon
id|node-&gt;next
op_assign
op_star
id|head
suffix:semicolon
op_star
id|head
op_assign
id|node
suffix:semicolon
)brace
DECL|function|set_SOGO
r_static
r_inline
r_void
id|set_SOGO
(paren
r_struct
id|controller
op_star
id|ctrl
)paren
(brace
id|u16
id|misc
suffix:semicolon
id|misc
op_assign
id|readw
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|MISC
)paren
suffix:semicolon
id|misc
op_assign
(paren
id|misc
op_or
l_int|0x0001
)paren
op_amp
l_int|0xFFFB
suffix:semicolon
id|writew
c_func
(paren
id|misc
comma
id|ctrl-&gt;hpc_reg
op_plus
id|MISC
)paren
suffix:semicolon
)brace
DECL|function|amber_LED_on
r_static
r_inline
r_void
id|amber_LED_on
(paren
r_struct
id|controller
op_star
id|ctrl
comma
id|u8
id|slot
)paren
(brace
id|u32
id|led_control
suffix:semicolon
id|led_control
op_assign
id|readl
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|LED_CONTROL
)paren
suffix:semicolon
id|led_control
op_or_assign
(paren
l_int|0x01010000L
op_lshift
id|slot
)paren
suffix:semicolon
id|writel
c_func
(paren
id|led_control
comma
id|ctrl-&gt;hpc_reg
op_plus
id|LED_CONTROL
)paren
suffix:semicolon
)brace
DECL|function|amber_LED_off
r_static
r_inline
r_void
id|amber_LED_off
(paren
r_struct
id|controller
op_star
id|ctrl
comma
id|u8
id|slot
)paren
(brace
id|u32
id|led_control
suffix:semicolon
id|led_control
op_assign
id|readl
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|LED_CONTROL
)paren
suffix:semicolon
id|led_control
op_and_assign
op_complement
(paren
l_int|0x01010000L
op_lshift
id|slot
)paren
suffix:semicolon
id|writel
c_func
(paren
id|led_control
comma
id|ctrl-&gt;hpc_reg
op_plus
id|LED_CONTROL
)paren
suffix:semicolon
)brace
DECL|function|read_amber_LED
r_static
r_inline
r_int
id|read_amber_LED
(paren
r_struct
id|controller
op_star
id|ctrl
comma
id|u8
id|slot
)paren
(brace
id|u32
id|led_control
suffix:semicolon
id|led_control
op_assign
id|readl
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|LED_CONTROL
)paren
suffix:semicolon
id|led_control
op_and_assign
(paren
l_int|0x01010000L
op_lshift
id|slot
)paren
suffix:semicolon
r_return
id|led_control
ques
c_cond
l_int|1
suffix:colon
l_int|0
suffix:semicolon
)brace
DECL|function|green_LED_on
r_static
r_inline
r_void
id|green_LED_on
(paren
r_struct
id|controller
op_star
id|ctrl
comma
id|u8
id|slot
)paren
(brace
id|u32
id|led_control
suffix:semicolon
id|led_control
op_assign
id|readl
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|LED_CONTROL
)paren
suffix:semicolon
id|led_control
op_or_assign
l_int|0x0101L
op_lshift
id|slot
suffix:semicolon
id|writel
c_func
(paren
id|led_control
comma
id|ctrl-&gt;hpc_reg
op_plus
id|LED_CONTROL
)paren
suffix:semicolon
)brace
DECL|function|green_LED_off
r_static
r_inline
r_void
id|green_LED_off
(paren
r_struct
id|controller
op_star
id|ctrl
comma
id|u8
id|slot
)paren
(brace
id|u32
id|led_control
suffix:semicolon
id|led_control
op_assign
id|readl
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|LED_CONTROL
)paren
suffix:semicolon
id|led_control
op_and_assign
op_complement
(paren
l_int|0x0101L
op_lshift
id|slot
)paren
suffix:semicolon
id|writel
c_func
(paren
id|led_control
comma
id|ctrl-&gt;hpc_reg
op_plus
id|LED_CONTROL
)paren
suffix:semicolon
)brace
DECL|function|green_LED_blink
r_static
r_inline
r_void
id|green_LED_blink
(paren
r_struct
id|controller
op_star
id|ctrl
comma
id|u8
id|slot
)paren
(brace
id|u32
id|led_control
suffix:semicolon
id|led_control
op_assign
id|readl
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|LED_CONTROL
)paren
suffix:semicolon
id|led_control
op_and_assign
op_complement
(paren
l_int|0x0101L
op_lshift
id|slot
)paren
suffix:semicolon
id|led_control
op_or_assign
(paren
l_int|0x0001L
op_lshift
id|slot
)paren
suffix:semicolon
id|writel
c_func
(paren
id|led_control
comma
id|ctrl-&gt;hpc_reg
op_plus
id|LED_CONTROL
)paren
suffix:semicolon
)brace
DECL|function|slot_disable
r_static
r_inline
r_void
id|slot_disable
(paren
r_struct
id|controller
op_star
id|ctrl
comma
id|u8
id|slot
)paren
(brace
id|u8
id|slot_enable
suffix:semicolon
id|slot_enable
op_assign
id|readb
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|SLOT_ENABLE
)paren
suffix:semicolon
id|slot_enable
op_and_assign
op_complement
(paren
l_int|0x01
op_lshift
id|slot
)paren
suffix:semicolon
id|writeb
c_func
(paren
id|slot_enable
comma
id|ctrl-&gt;hpc_reg
op_plus
id|SLOT_ENABLE
)paren
suffix:semicolon
)brace
DECL|function|slot_enable
r_static
r_inline
r_void
id|slot_enable
(paren
r_struct
id|controller
op_star
id|ctrl
comma
id|u8
id|slot
)paren
(brace
id|u8
id|slot_enable
suffix:semicolon
id|slot_enable
op_assign
id|readb
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|SLOT_ENABLE
)paren
suffix:semicolon
id|slot_enable
op_or_assign
(paren
l_int|0x01
op_lshift
id|slot
)paren
suffix:semicolon
id|writeb
c_func
(paren
id|slot_enable
comma
id|ctrl-&gt;hpc_reg
op_plus
id|SLOT_ENABLE
)paren
suffix:semicolon
)brace
DECL|function|is_slot_enabled
r_static
r_inline
id|u8
id|is_slot_enabled
(paren
r_struct
id|controller
op_star
id|ctrl
comma
id|u8
id|slot
)paren
(brace
id|u8
id|slot_enable
suffix:semicolon
id|slot_enable
op_assign
id|readb
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|SLOT_ENABLE
)paren
suffix:semicolon
id|slot_enable
op_and_assign
(paren
l_int|0x01
op_lshift
id|slot
)paren
suffix:semicolon
r_return
id|slot_enable
ques
c_cond
l_int|1
suffix:colon
l_int|0
suffix:semicolon
)brace
DECL|function|read_slot_enable
r_static
r_inline
id|u8
id|read_slot_enable
(paren
r_struct
id|controller
op_star
id|ctrl
)paren
(brace
r_return
id|readb
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|SLOT_ENABLE
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * get_controller_speed - find the current frequency/mode of controller.&n; *&n; * @ctrl: controller to get frequency/mode for.&n; *&n; * Returns controller speed.&n; *&n; */
DECL|function|get_controller_speed
r_static
r_inline
id|u8
id|get_controller_speed
(paren
r_struct
id|controller
op_star
id|ctrl
)paren
(brace
id|u8
id|curr_freq
suffix:semicolon
id|u16
id|misc
suffix:semicolon
r_if
c_cond
(paren
id|ctrl-&gt;pcix_support
)paren
(brace
id|curr_freq
op_assign
id|readb
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|NEXT_CURR_FREQ
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|curr_freq
op_amp
l_int|0xB0
)paren
op_eq
l_int|0xB0
)paren
r_return
id|PCI_SPEED_133MHz_PCIX
suffix:semicolon
r_if
c_cond
(paren
(paren
id|curr_freq
op_amp
l_int|0xA0
)paren
op_eq
l_int|0xA0
)paren
r_return
id|PCI_SPEED_100MHz_PCIX
suffix:semicolon
r_if
c_cond
(paren
(paren
id|curr_freq
op_amp
l_int|0x90
)paren
op_eq
l_int|0x90
)paren
r_return
id|PCI_SPEED_66MHz_PCIX
suffix:semicolon
r_if
c_cond
(paren
id|curr_freq
op_amp
l_int|0x10
)paren
r_return
id|PCI_SPEED_66MHz
suffix:semicolon
r_return
id|PCI_SPEED_33MHz
suffix:semicolon
)brace
id|misc
op_assign
id|readw
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|MISC
)paren
suffix:semicolon
r_return
(paren
id|misc
op_amp
l_int|0x0800
)paren
ques
c_cond
id|PCI_SPEED_66MHz
suffix:colon
id|PCI_SPEED_33MHz
suffix:semicolon
)brace
multiline_comment|/*&n; * get_adapter_speed - find the max supported frequency/mode of adapter.&n; *&n; * @ctrl: hotplug controller.&n; * @hp_slot: hotplug slot where adapter is installed.&n; *&n; * Returns adapter speed.&n; *&n; */
DECL|function|get_adapter_speed
r_static
r_inline
id|u8
id|get_adapter_speed
(paren
r_struct
id|controller
op_star
id|ctrl
comma
id|u8
id|hp_slot
)paren
(brace
id|u32
id|temp_dword
op_assign
id|readl
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|NON_INT_INPUT
)paren
suffix:semicolon
id|dbg
c_func
(paren
l_string|&quot;slot: %d, PCIXCAP: %8x&bslash;n&quot;
comma
id|hp_slot
comma
id|temp_dword
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ctrl-&gt;pcix_support
)paren
(brace
r_if
c_cond
(paren
id|temp_dword
op_amp
(paren
l_int|0x10000
op_lshift
id|hp_slot
)paren
)paren
r_return
id|PCI_SPEED_133MHz_PCIX
suffix:semicolon
r_if
c_cond
(paren
id|temp_dword
op_amp
(paren
l_int|0x100
op_lshift
id|hp_slot
)paren
)paren
r_return
id|PCI_SPEED_66MHz_PCIX
suffix:semicolon
)brace
r_if
c_cond
(paren
id|temp_dword
op_amp
(paren
l_int|0x01
op_lshift
id|hp_slot
)paren
)paren
r_return
id|PCI_SPEED_66MHz
suffix:semicolon
r_return
id|PCI_SPEED_33MHz
suffix:semicolon
)brace
DECL|function|enable_slot_power
r_static
r_inline
r_void
id|enable_slot_power
(paren
r_struct
id|controller
op_star
id|ctrl
comma
id|u8
id|slot
)paren
(brace
id|u8
id|slot_power
suffix:semicolon
id|slot_power
op_assign
id|readb
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|SLOT_POWER
)paren
suffix:semicolon
id|slot_power
op_or_assign
(paren
l_int|0x01
op_lshift
id|slot
)paren
suffix:semicolon
id|writeb
c_func
(paren
id|slot_power
comma
id|ctrl-&gt;hpc_reg
op_plus
id|SLOT_POWER
)paren
suffix:semicolon
)brace
DECL|function|disable_slot_power
r_static
r_inline
r_void
id|disable_slot_power
(paren
r_struct
id|controller
op_star
id|ctrl
comma
id|u8
id|slot
)paren
(brace
id|u8
id|slot_power
suffix:semicolon
id|slot_power
op_assign
id|readb
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|SLOT_POWER
)paren
suffix:semicolon
id|slot_power
op_and_assign
op_complement
(paren
l_int|0x01
op_lshift
id|slot
)paren
suffix:semicolon
id|writeb
c_func
(paren
id|slot_power
comma
id|ctrl-&gt;hpc_reg
op_plus
id|SLOT_POWER
)paren
suffix:semicolon
)brace
DECL|function|cpq_get_attention_status
r_static
r_inline
r_int
id|cpq_get_attention_status
(paren
r_struct
id|controller
op_star
id|ctrl
comma
r_struct
id|slot
op_star
id|slot
)paren
(brace
id|u8
id|hp_slot
suffix:semicolon
r_if
c_cond
(paren
id|slot
op_eq
l_int|NULL
)paren
r_return
l_int|1
suffix:semicolon
id|hp_slot
op_assign
id|slot-&gt;device
op_minus
id|ctrl-&gt;slot_device_offset
suffix:semicolon
r_return
id|read_amber_LED
(paren
id|ctrl
comma
id|hp_slot
)paren
suffix:semicolon
)brace
DECL|function|get_slot_enabled
r_static
r_inline
r_int
id|get_slot_enabled
(paren
r_struct
id|controller
op_star
id|ctrl
comma
r_struct
id|slot
op_star
id|slot
)paren
(brace
id|u8
id|hp_slot
suffix:semicolon
r_if
c_cond
(paren
id|slot
op_eq
l_int|NULL
)paren
r_return
l_int|1
suffix:semicolon
id|hp_slot
op_assign
id|slot-&gt;device
op_minus
id|ctrl-&gt;slot_device_offset
suffix:semicolon
r_return
id|is_slot_enabled
(paren
id|ctrl
comma
id|hp_slot
)paren
suffix:semicolon
)brace
DECL|function|cpq_get_latch_status
r_static
r_inline
r_int
id|cpq_get_latch_status
(paren
r_struct
id|controller
op_star
id|ctrl
comma
r_struct
id|slot
op_star
id|slot
)paren
(brace
id|u32
id|status
suffix:semicolon
id|u8
id|hp_slot
suffix:semicolon
r_if
c_cond
(paren
id|slot
op_eq
l_int|NULL
)paren
r_return
l_int|1
suffix:semicolon
id|hp_slot
op_assign
id|slot-&gt;device
op_minus
id|ctrl-&gt;slot_device_offset
suffix:semicolon
id|dbg
c_func
(paren
l_string|&quot;%s: slot-&gt;device = %d, ctrl-&gt;slot_device_offset = %d &bslash;n&quot;
comma
id|__FUNCTION__
comma
id|slot-&gt;device
comma
id|ctrl-&gt;slot_device_offset
)paren
suffix:semicolon
id|status
op_assign
(paren
id|readl
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|INT_INPUT_CLEAR
)paren
op_amp
(paren
l_int|0x01L
op_lshift
id|hp_slot
)paren
)paren
suffix:semicolon
r_return
(paren
id|status
op_eq
l_int|0
)paren
ques
c_cond
l_int|1
suffix:colon
l_int|0
suffix:semicolon
)brace
DECL|function|get_presence_status
r_static
r_inline
r_int
id|get_presence_status
(paren
r_struct
id|controller
op_star
id|ctrl
comma
r_struct
id|slot
op_star
id|slot
)paren
(brace
r_int
id|presence_save
op_assign
l_int|0
suffix:semicolon
id|u8
id|hp_slot
suffix:semicolon
id|u32
id|tempdword
suffix:semicolon
r_if
c_cond
(paren
id|slot
op_eq
l_int|NULL
)paren
r_return
l_int|0
suffix:semicolon
id|hp_slot
op_assign
id|slot-&gt;device
op_minus
id|ctrl-&gt;slot_device_offset
suffix:semicolon
id|tempdword
op_assign
id|readl
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|INT_INPUT_CLEAR
)paren
suffix:semicolon
id|presence_save
op_assign
(paren
r_int
)paren
(paren
(paren
(paren
(paren
op_complement
id|tempdword
)paren
op_rshift
l_int|23
)paren
op_or
(paren
(paren
op_complement
id|tempdword
)paren
op_rshift
l_int|15
)paren
)paren
op_rshift
id|hp_slot
)paren
op_amp
l_int|0x02
suffix:semicolon
r_return
id|presence_save
suffix:semicolon
)brace
DECL|macro|SLOT_NAME_SIZE
mdefine_line|#define SLOT_NAME_SIZE 10
DECL|function|make_slot_name
r_static
r_inline
r_void
id|make_slot_name
(paren
r_char
op_star
id|buffer
comma
r_int
id|buffer_size
comma
r_struct
id|slot
op_star
id|slot
)paren
(brace
id|snprintf
(paren
id|buffer
comma
id|buffer_size
comma
l_string|&quot;%d&quot;
comma
id|slot-&gt;number
)paren
suffix:semicolon
)brace
DECL|function|wait_for_ctrl_irq
r_static
r_inline
r_int
id|wait_for_ctrl_irq
(paren
r_struct
id|controller
op_star
id|ctrl
)paren
(brace
id|DECLARE_WAITQUEUE
c_func
(paren
id|wait
comma
id|current
)paren
suffix:semicolon
r_int
id|retval
op_assign
l_int|0
suffix:semicolon
id|dbg
c_func
(paren
l_string|&quot;%s - start&bslash;n&quot;
comma
id|__FUNCTION__
)paren
suffix:semicolon
id|add_wait_queue
c_func
(paren
op_amp
id|ctrl-&gt;queue
comma
op_amp
id|wait
)paren
suffix:semicolon
id|set_current_state
c_func
(paren
id|TASK_INTERRUPTIBLE
)paren
suffix:semicolon
multiline_comment|/* Sleep for up to 1 second to wait for the LED to change. */
id|schedule_timeout
c_func
(paren
l_int|1
op_star
id|HZ
)paren
suffix:semicolon
id|set_current_state
c_func
(paren
id|TASK_RUNNING
)paren
suffix:semicolon
id|remove_wait_queue
c_func
(paren
op_amp
id|ctrl-&gt;queue
comma
op_amp
id|wait
)paren
suffix:semicolon
r_if
c_cond
(paren
id|signal_pending
c_func
(paren
id|current
)paren
)paren
id|retval
op_assign
op_minus
id|EINTR
suffix:semicolon
id|dbg
c_func
(paren
l_string|&quot;%s - end&bslash;n&quot;
comma
id|__FUNCTION__
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
multiline_comment|/**&n; * set_controller_speed - set the frequency and/or mode of a specific&n; * controller segment.&n; *&n; * @ctrl: controller to change frequency/mode for.&n; * @adapter_speed: the speed of the adapter we want to match.&n; * @hp_slot: the slot number where the adapter is installed.&n; *&n; * Returns 0 if we successfully change frequency and/or mode to match the&n; * adapter speed.&n; * &n; */
DECL|function|set_controller_speed
r_static
r_inline
id|u8
id|set_controller_speed
c_func
(paren
r_struct
id|controller
op_star
id|ctrl
comma
id|u8
id|adapter_speed
comma
id|u8
id|hp_slot
)paren
(brace
r_struct
id|slot
op_star
id|slot
suffix:semicolon
id|u8
id|reg
suffix:semicolon
id|u8
id|slot_power
op_assign
id|readb
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|SLOT_POWER
)paren
suffix:semicolon
id|u16
id|reg16
suffix:semicolon
id|u32
id|leds
op_assign
id|readl
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|LED_CONTROL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ctrl-&gt;speed
op_eq
id|adapter_speed
)paren
r_return
l_int|0
suffix:semicolon
multiline_comment|/* We don&squot;t allow freq/mode changes if we find another adapter running&n;&t; * in another slot on this controller */
r_for
c_loop
(paren
id|slot
op_assign
id|ctrl-&gt;slot
suffix:semicolon
id|slot
suffix:semicolon
id|slot
op_assign
id|slot-&gt;next
)paren
(brace
r_if
c_cond
(paren
id|slot-&gt;device
op_eq
(paren
id|hp_slot
op_plus
id|ctrl-&gt;slot_device_offset
)paren
)paren
r_continue
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|slot-&gt;hotplug_slot
op_logical_and
op_logical_neg
id|slot-&gt;hotplug_slot-&gt;info
)paren
r_continue
suffix:semicolon
r_if
c_cond
(paren
id|slot-&gt;hotplug_slot-&gt;info-&gt;adapter_status
op_eq
l_int|0
)paren
r_continue
suffix:semicolon
multiline_comment|/* If another adapter is running on the same segment but at a&n;&t;&t; * lower speed/mode, we allow the new adapter to function at&n;&t;&t; * this rate if supported */
r_if
c_cond
(paren
id|ctrl-&gt;speed
OL
id|adapter_speed
)paren
r_return
l_int|0
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
multiline_comment|/* If the controller doesn&squot;t support freq/mode changes and the&n;&t; * controller is running at a higher mode, we bail */
r_if
c_cond
(paren
(paren
id|ctrl-&gt;speed
OG
id|adapter_speed
)paren
op_logical_and
(paren
op_logical_neg
id|ctrl-&gt;pcix_speed_capability
)paren
)paren
r_return
l_int|1
suffix:semicolon
multiline_comment|/* But we allow the adapter to run at a lower rate if possible */
r_if
c_cond
(paren
(paren
id|ctrl-&gt;speed
OL
id|adapter_speed
)paren
op_logical_and
(paren
op_logical_neg
id|ctrl-&gt;pcix_speed_capability
)paren
)paren
r_return
l_int|0
suffix:semicolon
multiline_comment|/* We try to set the max speed supported by both the adapter and&n;&t; * controller */
r_if
c_cond
(paren
id|ctrl-&gt;speed_capability
OL
id|adapter_speed
)paren
(brace
r_if
c_cond
(paren
id|ctrl-&gt;speed
op_eq
id|ctrl-&gt;speed_capability
)paren
r_return
l_int|0
suffix:semicolon
id|adapter_speed
op_assign
id|ctrl-&gt;speed_capability
suffix:semicolon
)brace
id|writel
c_func
(paren
l_int|0x0L
comma
id|ctrl-&gt;hpc_reg
op_plus
id|LED_CONTROL
)paren
suffix:semicolon
id|writeb
c_func
(paren
l_int|0x00
comma
id|ctrl-&gt;hpc_reg
op_plus
id|SLOT_ENABLE
)paren
suffix:semicolon
id|set_SOGO
c_func
(paren
id|ctrl
)paren
suffix:semicolon
id|wait_for_ctrl_irq
c_func
(paren
id|ctrl
)paren
suffix:semicolon
r_if
c_cond
(paren
id|adapter_speed
op_ne
id|PCI_SPEED_133MHz_PCIX
)paren
id|reg
op_assign
l_int|0xF5
suffix:semicolon
r_else
id|reg
op_assign
l_int|0xF4
suffix:semicolon
id|pci_write_config_byte
c_func
(paren
id|ctrl-&gt;pci_dev
comma
l_int|0x41
comma
id|reg
)paren
suffix:semicolon
id|reg16
op_assign
id|readw
c_func
(paren
id|ctrl-&gt;hpc_reg
op_plus
id|NEXT_CURR_FREQ
)paren
suffix:semicolon
id|reg16
op_and_assign
op_complement
l_int|0x000F
suffix:semicolon
r_switch
c_cond
(paren
id|adapter_speed
)paren
(brace
r_case
(paren
id|PCI_SPEED_133MHz_PCIX
)paren
suffix:colon
id|reg
op_assign
l_int|0x75
suffix:semicolon
id|reg16
op_or_assign
l_int|0xB
suffix:semicolon
r_break
suffix:semicolon
r_case
(paren
id|PCI_SPEED_100MHz_PCIX
)paren
suffix:colon
id|reg
op_assign
l_int|0x74
suffix:semicolon
id|reg16
op_or_assign
l_int|0xA
suffix:semicolon
r_break
suffix:semicolon
r_case
(paren
id|PCI_SPEED_66MHz_PCIX
)paren
suffix:colon
id|reg
op_assign
l_int|0x73
suffix:semicolon
id|reg16
op_or_assign
l_int|0x9
suffix:semicolon
r_break
suffix:semicolon
r_case
(paren
id|PCI_SPEED_66MHz
)paren
suffix:colon
id|reg
op_assign
l_int|0x73
suffix:semicolon
id|reg16
op_or_assign
l_int|0x1
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
multiline_comment|/* 33MHz PCI 2.2 */
id|reg
op_assign
l_int|0x71
suffix:semicolon
r_break
suffix:semicolon
)brace
id|reg16
op_or_assign
l_int|0xB
op_lshift
l_int|12
suffix:semicolon
id|writew
c_func
(paren
id|reg16
comma
id|ctrl-&gt;hpc_reg
op_plus
id|NEXT_CURR_FREQ
)paren
suffix:semicolon
id|mdelay
c_func
(paren
l_int|5
)paren
suffix:semicolon
multiline_comment|/* Reenable interrupts */
id|writel
c_func
(paren
l_int|0
comma
id|ctrl-&gt;hpc_reg
op_plus
id|INT_MASK
)paren
suffix:semicolon
id|pci_write_config_byte
c_func
(paren
id|ctrl-&gt;pci_dev
comma
l_int|0x41
comma
id|reg
)paren
suffix:semicolon
multiline_comment|/* Restart state machine */
id|reg
op_assign
op_complement
l_int|0xF
suffix:semicolon
id|pci_read_config_byte
c_func
(paren
id|ctrl-&gt;pci_dev
comma
l_int|0x43
comma
op_amp
id|reg
)paren
suffix:semicolon
id|pci_write_config_byte
c_func
(paren
id|ctrl-&gt;pci_dev
comma
l_int|0x43
comma
id|reg
)paren
suffix:semicolon
multiline_comment|/* Only if mode change...*/
r_if
c_cond
(paren
(paren
(paren
id|ctrl-&gt;speed
op_eq
id|PCI_SPEED_66MHz
)paren
op_logical_and
(paren
id|adapter_speed
op_eq
id|PCI_SPEED_66MHz_PCIX
)paren
)paren
op_logical_or
(paren
(paren
id|ctrl-&gt;speed
op_eq
id|PCI_SPEED_66MHz_PCIX
)paren
op_logical_and
(paren
id|adapter_speed
op_eq
id|PCI_SPEED_66MHz
)paren
)paren
)paren
id|set_SOGO
c_func
(paren
id|ctrl
)paren
suffix:semicolon
id|wait_for_ctrl_irq
c_func
(paren
id|ctrl
)paren
suffix:semicolon
id|mdelay
c_func
(paren
l_int|1100
)paren
suffix:semicolon
multiline_comment|/* Restore LED/Slot state */
id|writel
c_func
(paren
id|leds
comma
id|ctrl-&gt;hpc_reg
op_plus
id|LED_CONTROL
)paren
suffix:semicolon
id|writeb
c_func
(paren
id|slot_power
comma
id|ctrl-&gt;hpc_reg
op_plus
id|SLOT_ENABLE
)paren
suffix:semicolon
id|set_SOGO
c_func
(paren
id|ctrl
)paren
suffix:semicolon
id|wait_for_ctrl_irq
c_func
(paren
id|ctrl
)paren
suffix:semicolon
id|ctrl-&gt;speed
op_assign
id|adapter_speed
suffix:semicolon
id|slot
op_assign
id|cpqhp_find_slot
c_func
(paren
id|ctrl
comma
id|hp_slot
op_plus
id|ctrl-&gt;slot_device_offset
)paren
suffix:semicolon
id|info
c_func
(paren
l_string|&quot;Successfully changed frequency/mode for adapter in slot %d&bslash;n&quot;
comma
id|slot-&gt;number
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
macro_line|#endif
eof
