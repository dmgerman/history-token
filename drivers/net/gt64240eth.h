multiline_comment|/*&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 2001 Patton Electronics Company&n; * Copyright (C) 2002 Momentum Computer&n; *&n; * Copyright 2000 MontaVista Software Inc.&n; * Author: MontaVista Software, Inc.&n; *         &t;stevel@mvista.com or support@mvista.com&n; *&n; *  This program is free software; you can distribute it and/or modify it&n; *  under the terms of the GNU General Public License (Version 2) as&n; *  published by the Free Software Foundation.&n; *&n; *  This program is distributed in the hope it will be useful, but WITHOUT&n; *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or&n; *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License&n; *  for more details.&n; *&n; *  You should have received a copy of the GNU General Public License along&n; *  with this program; if not, write to the Free Software Foundation, Inc.,&n; *  59 Temple Place - Suite 330, Boston MA 02111-1307, USA.&n; *&n; * Ethernet driver definitions for the MIPS GT96100 Advanced&n; * Communication Controller.&n; * &n; * Modified for the Marvellous GT64240 Retarded Communication Controller.&n; */
macro_line|#ifndef _GT64240ETH_H
DECL|macro|_GT64240ETH_H
mdefine_line|#define _GT64240ETH_H
macro_line|#include &lt;asm/gt64240.h&gt;
DECL|macro|ETHERNET_PORTS_DIFFERENCE_OFFSETS
mdefine_line|#define ETHERNET_PORTS_DIFFERENCE_OFFSETS&t;0x400
multiline_comment|/* Translate those weanie names from Galileo/VxWorks header files: */
DECL|macro|GT64240_MRR
mdefine_line|#define GT64240_MRR                    MAIN_ROUTING_REGISTER
DECL|macro|GT64240_CIU_ARBITER_CONFIG
mdefine_line|#define GT64240_CIU_ARBITER_CONFIG     COMM_UNIT_ARBITER_CONFIGURATION_REGISTER
DECL|macro|GT64240_CIU_ARBITER_CONTROL
mdefine_line|#define GT64240_CIU_ARBITER_CONTROL    COMM_UNIT_ARBITER_CONTROL
DECL|macro|GT64240_MAIN_LOW_CAUSE
mdefine_line|#define GT64240_MAIN_LOW_CAUSE         LOW_INTERRUPT_CAUSE_REGISTER
DECL|macro|GT64240_MAIN_HIGH_CAUSE
mdefine_line|#define GT64240_MAIN_HIGH_CAUSE        HIGH_INTERRUPT_CAUSE_REGISTER
DECL|macro|GT64240_CPU_LOW_MASK
mdefine_line|#define GT64240_CPU_LOW_MASK           CPU_INTERRUPT_MASK_REGISTER_LOW
DECL|macro|GT64240_CPU_HIGH_MASK
mdefine_line|#define GT64240_CPU_HIGH_MASK          CPU_INTERRUPT_MASK_REGISTER_HIGH
DECL|macro|GT64240_CPU_SELECT_CAUSE
mdefine_line|#define GT64240_CPU_SELECT_CAUSE       CPU_SELECT_CAUSE_REGISTER
DECL|macro|GT64240_ETH_PHY_ADDR_REG
mdefine_line|#define GT64240_ETH_PHY_ADDR_REG       ETHERNET_PHY_ADDRESS_REGISTER
DECL|macro|GT64240_ETH_PORT_CONFIG
mdefine_line|#define GT64240_ETH_PORT_CONFIG        ETHERNET0_PORT_CONFIGURATION_REGISTER
DECL|macro|GT64240_ETH_PORT_CONFIG_EXT
mdefine_line|#define GT64240_ETH_PORT_CONFIG_EXT    ETHERNET0_PORT_CONFIGURATION_EXTEND_REGISTER
DECL|macro|GT64240_ETH_PORT_COMMAND
mdefine_line|#define GT64240_ETH_PORT_COMMAND       ETHERNET0_PORT_COMMAND_REGISTER
DECL|macro|GT64240_ETH_PORT_STATUS
mdefine_line|#define GT64240_ETH_PORT_STATUS        ETHERNET0_PORT_STATUS_REGISTER
DECL|macro|GT64240_ETH_IO_SIZE
mdefine_line|#define GT64240_ETH_IO_SIZE            ETHERNET_PORTS_DIFFERENCE_OFFSETS
DECL|macro|GT64240_ETH_SMI_REG
mdefine_line|#define GT64240_ETH_SMI_REG            ETHERNET_SMI_REGISTER
DECL|macro|GT64240_ETH_MIB_COUNT_BASE
mdefine_line|#define GT64240_ETH_MIB_COUNT_BASE     ETHERNET0_MIB_COUNTER_BASE
DECL|macro|GT64240_ETH_SDMA_CONFIG
mdefine_line|#define GT64240_ETH_SDMA_CONFIG        ETHERNET0_SDMA_CONFIGURATION_REGISTER
DECL|macro|GT64240_ETH_SDMA_COMM
mdefine_line|#define GT64240_ETH_SDMA_COMM          ETHERNET0_SDMA_COMMAND_REGISTER
DECL|macro|GT64240_ETH_INT_MASK
mdefine_line|#define GT64240_ETH_INT_MASK           ETHERNET0_INTERRUPT_MASK_REGISTER
DECL|macro|GT64240_ETH_INT_CAUSE
mdefine_line|#define GT64240_ETH_INT_CAUSE          ETHERNET0_INTERRUPT_CAUSE_REGISTER
DECL|macro|GT64240_ETH_CURR_TX_DESC_PTR0
mdefine_line|#define GT64240_ETH_CURR_TX_DESC_PTR0  ETHERNET0_CURRENT_TX_DESCRIPTOR_POINTER0
DECL|macro|GT64240_ETH_CURR_TX_DESC_PTR1
mdefine_line|#define GT64240_ETH_CURR_TX_DESC_PTR1  ETHERNET0_CURRENT_TX_DESCRIPTOR_POINTER1
DECL|macro|GT64240_ETH_1ST_RX_DESC_PTR0
mdefine_line|#define GT64240_ETH_1ST_RX_DESC_PTR0   ETHERNET0_FIRST_RX_DESCRIPTOR_POINTER0
DECL|macro|GT64240_ETH_CURR_RX_DESC_PTR0
mdefine_line|#define GT64240_ETH_CURR_RX_DESC_PTR0  ETHERNET0_CURRENT_RX_DESCRIPTOR_POINTER0
DECL|macro|GT64240_ETH_HASH_TBL_PTR
mdefine_line|#define GT64240_ETH_HASH_TBL_PTR       ETHERNET0_HASH_TABLE_POINTER_REGISTER
multiline_comment|/* Turn on NAPI by default */
DECL|macro|GT64240_NAPI
mdefine_line|#define&t;GT64240_NAPI&t;&t;&t;1
multiline_comment|/* Some 64240 settings that SHOULD eventually be setup in PROM monitor: */
multiline_comment|/* (Board-specific to the DSL3224 Rev A board ONLY!)                    */
DECL|macro|D3224_MPP_CTRL0_SETTING
mdefine_line|#define D3224_MPP_CTRL0_SETTING&t;&t;0x66669900
DECL|macro|D3224_MPP_CTRL1_SETTING
mdefine_line|#define D3224_MPP_CTRL1_SETTING&t;&t;0x00000000
DECL|macro|D3224_MPP_CTRL2_SETTING
mdefine_line|#define D3224_MPP_CTRL2_SETTING&t;&t;0x00887700
DECL|macro|D3224_MPP_CTRL3_SETTING
mdefine_line|#define D3224_MPP_CTRL3_SETTING&t;&t;0x00000044
DECL|macro|D3224_GPP_IO_CTRL_SETTING
mdefine_line|#define D3224_GPP_IO_CTRL_SETTING&t;0x0000e800
DECL|macro|D3224_GPP_LEVEL_CTRL_SETTING
mdefine_line|#define D3224_GPP_LEVEL_CTRL_SETTING&t;0xf001f703
DECL|macro|D3224_GPP_VALUE_SETTING
mdefine_line|#define D3224_GPP_VALUE_SETTING&t;&t;0x00000000
multiline_comment|/* Keep the ring sizes a power of two for efficiency. */
singleline_comment|//-#define TX_RING_SIZE 16
DECL|macro|TX_RING_SIZE
mdefine_line|#define TX_RING_SIZE&t;64&t;/* TESTING !!! */
DECL|macro|RX_RING_SIZE
mdefine_line|#define RX_RING_SIZE&t;32
DECL|macro|PKT_BUF_SZ
mdefine_line|#define PKT_BUF_SZ&t;1536&t;/* Size of each temporary Rx buffer. */
DECL|macro|RX_HASH_TABLE_SIZE
mdefine_line|#define RX_HASH_TABLE_SIZE 16384
DECL|macro|HASH_HOP_NUMBER
mdefine_line|#define HASH_HOP_NUMBER 12
DECL|macro|NUM_INTERFACES
mdefine_line|#define NUM_INTERFACES 3
DECL|macro|GT64240ETH_TX_TIMEOUT
mdefine_line|#define GT64240ETH_TX_TIMEOUT HZ/4
DECL|macro|MIPS_GT64240_BASE
mdefine_line|#define MIPS_GT64240_BASE 0xf4000000
DECL|macro|GT64240_ETH0_BASE
mdefine_line|#define GT64240_ETH0_BASE (MIPS_GT64240_BASE + GT64240_ETH_PORT_CONFIG)
DECL|macro|GT64240_ETH1_BASE
mdefine_line|#define GT64240_ETH1_BASE (GT64240_ETH0_BASE + GT64240_ETH_IO_SIZE)
DECL|macro|GT64240_ETH2_BASE
mdefine_line|#define GT64240_ETH2_BASE (GT64240_ETH1_BASE + GT64240_ETH_IO_SIZE)
macro_line|#if defined(CONFIG_MIPS_DSL3224)
DECL|macro|GT64240_ETHER0_IRQ
mdefine_line|#define GT64240_ETHER0_IRQ 4
DECL|macro|GT64240_ETHER1_IRQ
mdefine_line|#define GT64240_ETHER1_IRQ 4
macro_line|#else
DECL|macro|GT64240_ETHER0_IRQ
mdefine_line|#define GT64240_ETHER0_IRQ -1
DECL|macro|GT64240_ETHER1_IRQ
mdefine_line|#define GT64240_ETHER1_IRQ -1
macro_line|#endif
DECL|macro|REV_GT64240
mdefine_line|#define REV_GT64240  0x1
DECL|macro|REV_GT64240A
mdefine_line|#define REV_GT64240A 0x10
DECL|macro|GT64240ETH_READ
mdefine_line|#define GT64240ETH_READ(gp, offset)&t;&t;&t;&t;&t;&bslash;&n;&t;GT_READ((gp)-&gt;port_offset + (offset))
DECL|macro|GT64240ETH_WRITE
mdefine_line|#define GT64240ETH_WRITE(gp, offset, data)&t;&t;&t;&t;&bslash;&n;&t;GT_WRITE((gp)-&gt;port_offset + (offset), (data))
DECL|macro|GT64240ETH_SETBIT
mdefine_line|#define GT64240ETH_SETBIT(gp, offset, bits)&t;&t;&t;&t;&bslash;&n;&t;GT64240ETH_WRITE((gp), (offset),&t;&t;&t;&t;&bslash;&n;&t;                 GT64240ETH_READ((gp), (offset)) | (bits))
DECL|macro|GT64240ETH_CLRBIT
mdefine_line|#define GT64240ETH_CLRBIT(gp, offset, bits)&t;&t;&t;&t;&bslash;&n;&t;GT64240ETH_WRITE((gp), (offset),&t;&t;&t;&t;&bslash;&n;&t;                 GT64240ETH_READ((gp), (offset)) &amp; ~(bits))
DECL|macro|GT64240_READ
mdefine_line|#define GT64240_READ(ofs)&t;&t;GT_READ(ofs)
DECL|macro|GT64240_WRITE
mdefine_line|#define GT64240_WRITE(ofs, data)&t;GT_WRITE((ofs), (data))
multiline_comment|/* Bit definitions of the SMI Reg */
r_enum
(brace
DECL|enumerator|smirDataMask
id|smirDataMask
op_assign
l_int|0xffff
comma
DECL|enumerator|smirPhyAdMask
id|smirPhyAdMask
op_assign
l_int|0x1f
op_lshift
l_int|16
comma
DECL|enumerator|smirPhyAdBit
id|smirPhyAdBit
op_assign
l_int|16
comma
DECL|enumerator|smirRegAdMask
id|smirRegAdMask
op_assign
l_int|0x1f
op_lshift
l_int|21
comma
DECL|enumerator|smirRegAdBit
id|smirRegAdBit
op_assign
l_int|21
comma
DECL|enumerator|smirOpCode
id|smirOpCode
op_assign
l_int|1
op_lshift
l_int|26
comma
DECL|enumerator|smirReadValid
id|smirReadValid
op_assign
l_int|1
op_lshift
l_int|27
comma
DECL|enumerator|smirBusy
id|smirBusy
op_assign
l_int|1
op_lshift
l_int|28
)brace
suffix:semicolon
multiline_comment|/* Bit definitions of the Port Config Reg */
DECL|enum|pcr_bits
r_enum
id|pcr_bits
(brace
DECL|enumerator|pcrPM
id|pcrPM
op_assign
l_int|1
op_lshift
l_int|0
comma
DECL|enumerator|pcrRBM
id|pcrRBM
op_assign
l_int|1
op_lshift
l_int|1
comma
DECL|enumerator|pcrPBF
id|pcrPBF
op_assign
l_int|1
op_lshift
l_int|2
comma
DECL|enumerator|pcrEN
id|pcrEN
op_assign
l_int|1
op_lshift
l_int|7
comma
DECL|enumerator|pcrLPBKMask
id|pcrLPBKMask
op_assign
l_int|0x3
op_lshift
l_int|8
comma
DECL|enumerator|pcrLPBKBit
id|pcrLPBKBit
op_assign
l_int|1
op_lshift
l_int|8
comma
DECL|enumerator|pcrFC
id|pcrFC
op_assign
l_int|1
op_lshift
l_int|10
comma
DECL|enumerator|pcrHS
id|pcrHS
op_assign
l_int|1
op_lshift
l_int|12
comma
DECL|enumerator|pcrHM
id|pcrHM
op_assign
l_int|1
op_lshift
l_int|13
comma
DECL|enumerator|pcrHDM
id|pcrHDM
op_assign
l_int|1
op_lshift
l_int|14
comma
DECL|enumerator|pcrHD
id|pcrHD
op_assign
l_int|1
op_lshift
l_int|15
comma
DECL|enumerator|pcrISLMask
id|pcrISLMask
op_assign
l_int|0x7
op_lshift
l_int|28
comma
DECL|enumerator|pcrISLBit
id|pcrISLBit
op_assign
l_int|28
comma
DECL|enumerator|pcrACCS
id|pcrACCS
op_assign
l_int|1
op_lshift
l_int|31
)brace
suffix:semicolon
multiline_comment|/* Bit definitions of the Port Config Extend Reg */
DECL|enum|pcxr_bits
r_enum
id|pcxr_bits
(brace
DECL|enumerator|pcxrIGMP
id|pcxrIGMP
op_assign
l_int|1
comma
DECL|enumerator|pcxrSPAN
id|pcxrSPAN
op_assign
l_int|2
comma
DECL|enumerator|pcxrPAR
id|pcxrPAR
op_assign
l_int|4
comma
DECL|enumerator|pcxrPRIOtxMask
id|pcxrPRIOtxMask
op_assign
l_int|0x7
op_lshift
l_int|3
comma
DECL|enumerator|pcxrPRIOtxBit
id|pcxrPRIOtxBit
op_assign
l_int|3
comma
DECL|enumerator|pcxrPRIOrxMask
id|pcxrPRIOrxMask
op_assign
l_int|0x3
op_lshift
l_int|6
comma
DECL|enumerator|pcxrPRIOrxBit
id|pcxrPRIOrxBit
op_assign
l_int|6
comma
DECL|enumerator|pcxrPRIOrxOverride
id|pcxrPRIOrxOverride
op_assign
l_int|1
op_lshift
l_int|8
comma
DECL|enumerator|pcxrDPLXen
id|pcxrDPLXen
op_assign
l_int|1
op_lshift
l_int|9
comma
DECL|enumerator|pcxrFCTLen
id|pcxrFCTLen
op_assign
l_int|1
op_lshift
l_int|10
comma
DECL|enumerator|pcxrFLP
id|pcxrFLP
op_assign
l_int|1
op_lshift
l_int|11
comma
DECL|enumerator|pcxrFCTL
id|pcxrFCTL
op_assign
l_int|1
op_lshift
l_int|12
comma
DECL|enumerator|pcxrMFLMask
id|pcxrMFLMask
op_assign
l_int|0x3
op_lshift
l_int|14
comma
DECL|enumerator|pcxrMFLBit
id|pcxrMFLBit
op_assign
l_int|14
comma
DECL|enumerator|pcxrMIBclrMode
id|pcxrMIBclrMode
op_assign
l_int|1
op_lshift
l_int|16
comma
DECL|enumerator|pcxrSpeed
id|pcxrSpeed
op_assign
l_int|1
op_lshift
l_int|18
comma
DECL|enumerator|pcxrSpeeden
id|pcxrSpeeden
op_assign
l_int|1
op_lshift
l_int|19
comma
DECL|enumerator|pcxrRMIIen
id|pcxrRMIIen
op_assign
l_int|1
op_lshift
l_int|20
comma
DECL|enumerator|pcxrDSCPen
id|pcxrDSCPen
op_assign
l_int|1
op_lshift
l_int|21
)brace
suffix:semicolon
multiline_comment|/* Bit definitions of the Port Command Reg */
DECL|enum|pcmr_bits
r_enum
id|pcmr_bits
(brace
DECL|enumerator|pcmrFJ
id|pcmrFJ
op_assign
l_int|1
op_lshift
l_int|15
)brace
suffix:semicolon
multiline_comment|/* Bit definitions of the Port Status Reg */
DECL|enum|psr_bits
r_enum
id|psr_bits
(brace
DECL|enumerator|psrSpeed
id|psrSpeed
op_assign
l_int|1
comma
DECL|enumerator|psrDuplex
id|psrDuplex
op_assign
l_int|2
comma
DECL|enumerator|psrFctl
id|psrFctl
op_assign
l_int|4
comma
DECL|enumerator|psrLink
id|psrLink
op_assign
l_int|8
comma
DECL|enumerator|psrPause
id|psrPause
op_assign
l_int|1
op_lshift
l_int|4
comma
DECL|enumerator|psrTxLow
id|psrTxLow
op_assign
l_int|1
op_lshift
l_int|5
comma
DECL|enumerator|psrTxHigh
id|psrTxHigh
op_assign
l_int|1
op_lshift
l_int|6
comma
DECL|enumerator|psrTxInProg
id|psrTxInProg
op_assign
l_int|1
op_lshift
l_int|7
)brace
suffix:semicolon
multiline_comment|/* Bit definitions of the SDMA Config Reg */
DECL|enum|sdcr_bits
r_enum
id|sdcr_bits
(brace
DECL|enumerator|sdcrRCMask
id|sdcrRCMask
op_assign
l_int|0xf
op_lshift
l_int|2
comma
DECL|enumerator|sdcrRCBit
id|sdcrRCBit
op_assign
l_int|2
comma
DECL|enumerator|sdcrBLMR
id|sdcrBLMR
op_assign
l_int|1
op_lshift
l_int|6
comma
DECL|enumerator|sdcrBLMT
id|sdcrBLMT
op_assign
l_int|1
op_lshift
l_int|7
comma
DECL|enumerator|sdcrPOVR
id|sdcrPOVR
op_assign
l_int|1
op_lshift
l_int|8
comma
DECL|enumerator|sdcrRIFB
id|sdcrRIFB
op_assign
l_int|1
op_lshift
l_int|9
comma
DECL|enumerator|sdcrBSZMask
id|sdcrBSZMask
op_assign
l_int|0x3
op_lshift
l_int|12
comma
DECL|enumerator|sdcrBSZBit
id|sdcrBSZBit
op_assign
l_int|12
)brace
suffix:semicolon
multiline_comment|/* Bit definitions of the SDMA Command Reg */
DECL|enum|sdcmr_bits
r_enum
id|sdcmr_bits
(brace
DECL|enumerator|sdcmrERD
id|sdcmrERD
op_assign
l_int|1
op_lshift
l_int|7
comma
DECL|enumerator|sdcmrAR
id|sdcmrAR
op_assign
l_int|1
op_lshift
l_int|15
comma
DECL|enumerator|sdcmrSTDH
id|sdcmrSTDH
op_assign
l_int|1
op_lshift
l_int|16
comma
DECL|enumerator|sdcmrSTDL
id|sdcmrSTDL
op_assign
l_int|1
op_lshift
l_int|17
comma
DECL|enumerator|sdcmrTXDH
id|sdcmrTXDH
op_assign
l_int|1
op_lshift
l_int|23
comma
DECL|enumerator|sdcmrTXDL
id|sdcmrTXDL
op_assign
l_int|1
op_lshift
l_int|24
comma
DECL|enumerator|sdcmrAT
id|sdcmrAT
op_assign
l_int|1
op_lshift
l_int|31
)brace
suffix:semicolon
multiline_comment|/* Bit definitions of the Interrupt Cause Reg */
DECL|enum|icr_bits
r_enum
id|icr_bits
(brace
DECL|enumerator|icrRxBuffer
id|icrRxBuffer
op_assign
l_int|1
comma
DECL|enumerator|icrTxBufferHigh
id|icrTxBufferHigh
op_assign
l_int|1
op_lshift
l_int|2
comma
DECL|enumerator|icrTxBufferLow
id|icrTxBufferLow
op_assign
l_int|1
op_lshift
l_int|3
comma
DECL|enumerator|icrTxEndHigh
id|icrTxEndHigh
op_assign
l_int|1
op_lshift
l_int|6
comma
DECL|enumerator|icrTxEndLow
id|icrTxEndLow
op_assign
l_int|1
op_lshift
l_int|7
comma
DECL|enumerator|icrRxError
id|icrRxError
op_assign
l_int|1
op_lshift
l_int|8
comma
DECL|enumerator|icrTxErrorHigh
id|icrTxErrorHigh
op_assign
l_int|1
op_lshift
l_int|10
comma
DECL|enumerator|icrTxErrorLow
id|icrTxErrorLow
op_assign
l_int|1
op_lshift
l_int|11
comma
DECL|enumerator|icrRxOVR
id|icrRxOVR
op_assign
l_int|1
op_lshift
l_int|12
comma
DECL|enumerator|icrTxUdr
id|icrTxUdr
op_assign
l_int|1
op_lshift
l_int|13
comma
DECL|enumerator|icrRxBufferQ0
id|icrRxBufferQ0
op_assign
l_int|1
op_lshift
l_int|16
comma
DECL|enumerator|icrRxBufferQ1
id|icrRxBufferQ1
op_assign
l_int|1
op_lshift
l_int|17
comma
DECL|enumerator|icrRxBufferQ2
id|icrRxBufferQ2
op_assign
l_int|1
op_lshift
l_int|18
comma
DECL|enumerator|icrRxBufferQ3
id|icrRxBufferQ3
op_assign
l_int|1
op_lshift
l_int|19
comma
DECL|enumerator|icrRxErrorQ0
id|icrRxErrorQ0
op_assign
l_int|1
op_lshift
l_int|20
comma
DECL|enumerator|icrRxErrorQ1
id|icrRxErrorQ1
op_assign
l_int|1
op_lshift
l_int|21
comma
DECL|enumerator|icrRxErrorQ2
id|icrRxErrorQ2
op_assign
l_int|1
op_lshift
l_int|22
comma
DECL|enumerator|icrRxErrorQ3
id|icrRxErrorQ3
op_assign
l_int|1
op_lshift
l_int|23
comma
DECL|enumerator|icrMIIPhySTC
id|icrMIIPhySTC
op_assign
l_int|1
op_lshift
l_int|28
comma
DECL|enumerator|icrSMIdone
id|icrSMIdone
op_assign
l_int|1
op_lshift
l_int|29
comma
DECL|enumerator|icrEtherIntSum
id|icrEtherIntSum
op_assign
l_int|1
op_lshift
l_int|31
)brace
suffix:semicolon
multiline_comment|/* The Rx and Tx descriptor lists. */
macro_line|#ifdef __LITTLE_ENDIAN
r_typedef
r_struct
(brace
DECL|member|cmdstat
id|u32
id|cmdstat
suffix:semicolon
DECL|member|reserved
id|u16
id|reserved
suffix:semicolon
singleline_comment|//-prk21aug01    u32 reserved:16;
DECL|member|byte_cnt
id|u16
id|byte_cnt
suffix:semicolon
singleline_comment|//-prk21aug01    u32 byte_cnt:16;
DECL|member|buff_ptr
id|u32
id|buff_ptr
suffix:semicolon
DECL|member|next
id|u32
id|next
suffix:semicolon
DECL|typedef|gt64240_td_t
)brace
id|gt64240_td_t
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|cmdstat
id|u32
id|cmdstat
suffix:semicolon
DECL|member|byte_cnt
id|u16
id|byte_cnt
suffix:semicolon
singleline_comment|//-prk21aug01    u32 byte_cnt:16;
DECL|member|buff_sz
id|u16
id|buff_sz
suffix:semicolon
singleline_comment|//-prk21aug01    u32 buff_sz:16;
DECL|member|buff_ptr
id|u32
id|buff_ptr
suffix:semicolon
DECL|member|next
id|u32
id|next
suffix:semicolon
DECL|typedef|gt64240_rd_t
)brace
id|gt64240_rd_t
suffix:semicolon
macro_line|#elif defined(__BIG_ENDIAN)
r_typedef
r_struct
(brace
DECL|member|byte_cnt
id|u16
id|byte_cnt
suffix:semicolon
singleline_comment|//-prk21aug01    u32 byte_cnt:16;
DECL|member|reserved
id|u16
id|reserved
suffix:semicolon
singleline_comment|//-prk21aug01    u32 reserved:16;
DECL|member|cmdstat
id|u32
id|cmdstat
suffix:semicolon
DECL|member|next
id|u32
id|next
suffix:semicolon
DECL|member|buff_ptr
id|u32
id|buff_ptr
suffix:semicolon
DECL|typedef|gt64240_td_t
)brace
id|gt64240_td_t
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|buff_sz
id|u16
id|buff_sz
suffix:semicolon
singleline_comment|//-prk21aug01    u32 buff_sz:16;
DECL|member|byte_cnt
id|u16
id|byte_cnt
suffix:semicolon
singleline_comment|//-prk21aug01    u32 byte_cnt:16;
DECL|member|cmdstat
id|u32
id|cmdstat
suffix:semicolon
DECL|member|next
id|u32
id|next
suffix:semicolon
DECL|member|buff_ptr
id|u32
id|buff_ptr
suffix:semicolon
DECL|typedef|gt64240_rd_t
)brace
id|gt64240_rd_t
suffix:semicolon
macro_line|#else
macro_line|#error Either __BIG_ENDIAN or __LITTLE_ENDIAN must be defined!
macro_line|#endif
multiline_comment|/* Values for the Tx command-status descriptor entry. */
DECL|enum|td_cmdstat
r_enum
id|td_cmdstat
(brace
DECL|enumerator|txOwn
id|txOwn
op_assign
l_int|1
op_lshift
l_int|31
comma
DECL|enumerator|txAutoMode
id|txAutoMode
op_assign
l_int|1
op_lshift
l_int|30
comma
DECL|enumerator|txEI
id|txEI
op_assign
l_int|1
op_lshift
l_int|23
comma
DECL|enumerator|txGenCRC
id|txGenCRC
op_assign
l_int|1
op_lshift
l_int|22
comma
DECL|enumerator|txPad
id|txPad
op_assign
l_int|1
op_lshift
l_int|18
comma
DECL|enumerator|txFirst
id|txFirst
op_assign
l_int|1
op_lshift
l_int|17
comma
DECL|enumerator|txLast
id|txLast
op_assign
l_int|1
op_lshift
l_int|16
comma
DECL|enumerator|txErrorSummary
id|txErrorSummary
op_assign
l_int|1
op_lshift
l_int|15
comma
DECL|enumerator|txReTxCntMask
id|txReTxCntMask
op_assign
l_int|0x0f
op_lshift
l_int|10
comma
DECL|enumerator|txReTxCntBit
id|txReTxCntBit
op_assign
l_int|10
comma
DECL|enumerator|txCollision
id|txCollision
op_assign
l_int|1
op_lshift
l_int|9
comma
DECL|enumerator|txReTxLimit
id|txReTxLimit
op_assign
l_int|1
op_lshift
l_int|8
comma
DECL|enumerator|txUnderrun
id|txUnderrun
op_assign
l_int|1
op_lshift
l_int|6
comma
DECL|enumerator|txLateCollision
id|txLateCollision
op_assign
l_int|1
op_lshift
l_int|5
)brace
suffix:semicolon
multiline_comment|/* Values for the Rx command-status descriptor entry. */
DECL|enum|rd_cmdstat
r_enum
id|rd_cmdstat
(brace
DECL|enumerator|rxOwn
id|rxOwn
op_assign
l_int|1
op_lshift
l_int|31
comma
DECL|enumerator|rxAutoMode
id|rxAutoMode
op_assign
l_int|1
op_lshift
l_int|30
comma
DECL|enumerator|rxEI
id|rxEI
op_assign
l_int|1
op_lshift
l_int|23
comma
DECL|enumerator|rxFirst
id|rxFirst
op_assign
l_int|1
op_lshift
l_int|17
comma
DECL|enumerator|rxLast
id|rxLast
op_assign
l_int|1
op_lshift
l_int|16
comma
DECL|enumerator|rxErrorSummary
id|rxErrorSummary
op_assign
l_int|1
op_lshift
l_int|15
comma
DECL|enumerator|rxIGMP
id|rxIGMP
op_assign
l_int|1
op_lshift
l_int|14
comma
DECL|enumerator|rxHashExpired
id|rxHashExpired
op_assign
l_int|1
op_lshift
l_int|13
comma
DECL|enumerator|rxMissedFrame
id|rxMissedFrame
op_assign
l_int|1
op_lshift
l_int|12
comma
DECL|enumerator|rxFrameType
id|rxFrameType
op_assign
l_int|1
op_lshift
l_int|11
comma
DECL|enumerator|rxShortFrame
id|rxShortFrame
op_assign
l_int|1
op_lshift
l_int|8
comma
DECL|enumerator|rxMaxFrameLen
id|rxMaxFrameLen
op_assign
l_int|1
op_lshift
l_int|7
comma
DECL|enumerator|rxOverrun
id|rxOverrun
op_assign
l_int|1
op_lshift
l_int|6
comma
DECL|enumerator|rxCollision
id|rxCollision
op_assign
l_int|1
op_lshift
l_int|4
comma
DECL|enumerator|rxCRCError
id|rxCRCError
op_assign
l_int|1
)brace
suffix:semicolon
multiline_comment|/* Bit fields of a Hash Table Entry */
DECL|enum|hash_table_entry
r_enum
id|hash_table_entry
(brace
DECL|enumerator|hteValid
id|hteValid
op_assign
l_int|1
comma
DECL|enumerator|hteSkip
id|hteSkip
op_assign
l_int|2
comma
DECL|enumerator|hteRD
id|hteRD
op_assign
l_int|4
)brace
suffix:semicolon
singleline_comment|// The MIB counters
r_typedef
r_struct
(brace
DECL|member|byteReceived
id|u32
id|byteReceived
suffix:semicolon
DECL|member|byteSent
id|u32
id|byteSent
suffix:semicolon
DECL|member|framesReceived
id|u32
id|framesReceived
suffix:semicolon
DECL|member|framesSent
id|u32
id|framesSent
suffix:semicolon
DECL|member|totalByteReceived
id|u32
id|totalByteReceived
suffix:semicolon
DECL|member|totalFramesReceived
id|u32
id|totalFramesReceived
suffix:semicolon
DECL|member|broadcastFramesReceived
id|u32
id|broadcastFramesReceived
suffix:semicolon
DECL|member|multicastFramesReceived
id|u32
id|multicastFramesReceived
suffix:semicolon
DECL|member|cRCError
id|u32
id|cRCError
suffix:semicolon
DECL|member|oversizeFrames
id|u32
id|oversizeFrames
suffix:semicolon
DECL|member|fragments
id|u32
id|fragments
suffix:semicolon
DECL|member|jabber
id|u32
id|jabber
suffix:semicolon
DECL|member|collision
id|u32
id|collision
suffix:semicolon
DECL|member|lateCollision
id|u32
id|lateCollision
suffix:semicolon
DECL|member|frames64
id|u32
id|frames64
suffix:semicolon
DECL|member|frames65_127
id|u32
id|frames65_127
suffix:semicolon
DECL|member|frames128_255
id|u32
id|frames128_255
suffix:semicolon
DECL|member|frames256_511
id|u32
id|frames256_511
suffix:semicolon
DECL|member|frames512_1023
id|u32
id|frames512_1023
suffix:semicolon
DECL|member|frames1024_MaxSize
id|u32
id|frames1024_MaxSize
suffix:semicolon
DECL|member|macRxError
id|u32
id|macRxError
suffix:semicolon
DECL|member|droppedFrames
id|u32
id|droppedFrames
suffix:semicolon
DECL|member|outMulticastFrames
id|u32
id|outMulticastFrames
suffix:semicolon
DECL|member|outBroadcastFrames
id|u32
id|outBroadcastFrames
suffix:semicolon
DECL|member|undersizeFrames
id|u32
id|undersizeFrames
suffix:semicolon
DECL|typedef|mib_counters_t
)brace
id|mib_counters_t
suffix:semicolon
DECL|struct|gt64240_private
r_struct
id|gt64240_private
(brace
DECL|member|rx_ring
id|gt64240_rd_t
op_star
id|rx_ring
suffix:semicolon
DECL|member|tx_ring
id|gt64240_td_t
op_star
id|tx_ring
suffix:semicolon
singleline_comment|// The Rx and Tx rings must be 16-byte aligned
DECL|member|rx_ring_dma
id|dma_addr_t
id|rx_ring_dma
suffix:semicolon
DECL|member|tx_ring_dma
id|dma_addr_t
id|tx_ring_dma
suffix:semicolon
DECL|member|hash_table
r_char
op_star
id|hash_table
suffix:semicolon
singleline_comment|// The Hash Table must be 8-byte aligned
DECL|member|hash_table_dma
id|dma_addr_t
id|hash_table_dma
suffix:semicolon
DECL|member|hash_mode
r_int
id|hash_mode
suffix:semicolon
singleline_comment|// The Rx buffers must be 8-byte aligned
DECL|member|rx_buff
r_char
op_star
id|rx_buff
suffix:semicolon
DECL|member|rx_buff_dma
id|dma_addr_t
id|rx_buff_dma
suffix:semicolon
singleline_comment|// Tx buffers (tx_skbuff[i]-&gt;data) with less than 8 bytes
singleline_comment|// of payload must be 8-byte aligned
DECL|member|tx_skbuff
r_struct
id|sk_buff
op_star
id|tx_skbuff
(braket
id|TX_RING_SIZE
)braket
suffix:semicolon
DECL|member|rx_next_out
r_int
id|rx_next_out
suffix:semicolon
multiline_comment|/* The next free ring entry to receive */
DECL|member|tx_next_in
r_int
id|tx_next_in
suffix:semicolon
multiline_comment|/* The next free ring entry to send */
DECL|member|tx_next_out
r_int
id|tx_next_out
suffix:semicolon
multiline_comment|/* The last ring entry the ISR processed */
DECL|member|tx_count
r_int
id|tx_count
suffix:semicolon
multiline_comment|/* current # of pkts waiting to be sent in Tx ring */
DECL|member|intr_work_done
r_int
id|intr_work_done
suffix:semicolon
multiline_comment|/* number of Rx and Tx pkts processed in the isr */
DECL|member|tx_full
r_int
id|tx_full
suffix:semicolon
multiline_comment|/* Tx ring is full */
DECL|member|mib
id|mib_counters_t
id|mib
suffix:semicolon
DECL|member|stats
r_struct
id|net_device_stats
id|stats
suffix:semicolon
DECL|member|io_size
r_int
id|io_size
suffix:semicolon
DECL|member|port_num
r_int
id|port_num
suffix:semicolon
singleline_comment|// 0 or 1
DECL|member|port_offset
id|u32
id|port_offset
suffix:semicolon
DECL|member|phy_addr
r_int
id|phy_addr
suffix:semicolon
singleline_comment|// PHY address
DECL|member|last_psr
id|u32
id|last_psr
suffix:semicolon
singleline_comment|// last value of the port status register
DECL|member|options
r_int
id|options
suffix:semicolon
multiline_comment|/* User-settable misc. driver options. */
DECL|member|drv_flags
r_int
id|drv_flags
suffix:semicolon
DECL|member|lock
id|spinlock_t
id|lock
suffix:semicolon
multiline_comment|/* Serialise access to device */
DECL|member|mii_if
r_struct
id|mii_if_info
id|mii_if
suffix:semicolon
DECL|member|msg_enable
id|u32
id|msg_enable
suffix:semicolon
)brace
suffix:semicolon
macro_line|#endif /* _GT64240ETH_H */
eof
