multiline_comment|/*&n; * Advanced  Micro Devices Inc. AMD8111E Linux Network Driver &n; * Copyright (C) 2003 Advanced Micro Devices &n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2 of the License, or&n; * (at your option) any later version.&n; *&n; * This program is distributed in the hope that it will be useful,&n; * but WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; * GNU General Public License for more details.&n; *&n; * You should have received a copy of the GNU General Public License&n; * along with this program; if not, write to the Free Software&n; * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 &n; * USA&n;&n;Module Name:&n;&n;    amd8111e.h&n;&n;Abstract:&n;&t;&n; &t; AMD8111 based 10/100 Ethernet Controller driver definitions. &n;&n;Environment:&n;    &n;&t;Kernel Mode&n;&n;Revision History:&n; &t;3.0.0&n;&t;   Initial Revision.&n;&t;3.0.1&n;*/
macro_line|#ifndef _AMD811E_H
DECL|macro|_AMD811E_H
mdefine_line|#define _AMD811E_H
multiline_comment|/* Command style register access&n;&n;Registers CMD0, CMD2, CMD3,CMD7 and INTEN0 uses a write access technique called command style access. It allows the write to selected bits of this register without altering the bits that are not selected. Command style registers are divided into 4 bytes that can be written independently. Higher order bit of each byte is the  value bit that specifies the value that will be written into the selected bits of register. &n;&n;eg., if the value 10011010b is written into the least significant byte of a command style register, bits 1,3 and 4 of the register will be set to 1, and the other bits will not be altered. If the value 00011010b is written into the same byte, bits 1,3 and 4 will be cleared to 0 and the other bits will not be altered.&n;&n;*/
multiline_comment|/*  Offset for Memory Mapped Registers. */
multiline_comment|/* 32 bit registers */
DECL|macro|ASF_STAT
mdefine_line|#define  ASF_STAT&t;&t;0x00&t;/* ASF status register */
DECL|macro|CHIPID
mdefine_line|#define CHIPID&t;&t;&t;0x04&t;/* Chip ID regsiter */
DECL|macro|MIB_DATA
mdefine_line|#define&t;MIB_DATA&t;&t;0x10&t;/* MIB data register */
DECL|macro|MIB_ADDR
mdefine_line|#define MIB_ADDR&t;&t;0x14&t;/* MIB address register */
DECL|macro|STAT0
mdefine_line|#define STAT0&t;&t;&t;0x30&t;/* Status0 register */
DECL|macro|INT0
mdefine_line|#define INT0&t;&t;&t;0x38&t;/* Interrupt0 register */
DECL|macro|INTEN0
mdefine_line|#define INTEN0&t;&t;&t;0x40&t;/* Interrupt0  enable register*/
DECL|macro|CMD0
mdefine_line|#define CMD0&t;&t;&t;0x48&t;/* Command0 register */
DECL|macro|CMD2
mdefine_line|#define CMD2&t;&t;&t;0x50&t;/* Command2 register */
DECL|macro|CMD3
mdefine_line|#define CMD3&t;&t;&t;0x54&t;/* Command3 resiter */
DECL|macro|CMD7
mdefine_line|#define CMD7&t;&t;&t;0x64&t;/* Command7 register */
DECL|macro|CTRL1
mdefine_line|#define CTRL1 &t;&t;&t;0x6C&t;/* Control1 register */
DECL|macro|CTRL2
mdefine_line|#define CTRL2 &t;&t;&t;0x70&t;/* Control2 register */
DECL|macro|XMT_RING_LIMIT
mdefine_line|#define XMT_RING_LIMIT&t;&t;0x7C&t;/* Transmit ring limit register */
DECL|macro|AUTOPOLL0
mdefine_line|#define AUTOPOLL0&t;&t;0x88&t;/* Auto-poll0 register */
DECL|macro|AUTOPOLL1
mdefine_line|#define AUTOPOLL1&t;&t;0x8A&t;/* Auto-poll1 register */
DECL|macro|AUTOPOLL2
mdefine_line|#define AUTOPOLL2&t;&t;0x8C&t;/* Auto-poll2 register */
DECL|macro|AUTOPOLL3
mdefine_line|#define AUTOPOLL3&t;&t;0x8E&t;/* Auto-poll3 register */
DECL|macro|AUTOPOLL4
mdefine_line|#define AUTOPOLL4&t;&t;0x90&t;/* Auto-poll4 register */
DECL|macro|AUTOPOLL5
mdefine_line|#define&t;AUTOPOLL5&t;&t;0x92&t;/* Auto-poll5 register */
DECL|macro|AP_VALUE
mdefine_line|#define AP_VALUE&t;&t;0x98&t;/* Auto-poll value register */
DECL|macro|DLY_INT_A
mdefine_line|#define DLY_INT_A&t;&t;0xA8&t;/* Group A delayed interrupt register */
DECL|macro|DLY_INT_B
mdefine_line|#define DLY_INT_B&t;&t;0xAC&t;/* Group B delayed interrupt register */
DECL|macro|FLOW_CONTROL
mdefine_line|#define FLOW_CONTROL&t;&t;0xC8&t;/* Flow control register */
DECL|macro|PHY_ACCESS
mdefine_line|#define PHY_ACCESS&t;&t;0xD0&t;/* PHY access register */
DECL|macro|STVAL
mdefine_line|#define STVAL&t;&t;&t;0xD8&t;/* Software timer value register */
DECL|macro|XMT_RING_BASE_ADDR0
mdefine_line|#define XMT_RING_BASE_ADDR0&t;0x100&t;/* Transmit ring0 base addr register */
DECL|macro|XMT_RING_BASE_ADDR1
mdefine_line|#define XMT_RING_BASE_ADDR1&t;0x108&t;/* Transmit ring1 base addr register */
DECL|macro|XMT_RING_BASE_ADDR2
mdefine_line|#define XMT_RING_BASE_ADDR2&t;0x110&t;/* Transmit ring2 base addr register */
DECL|macro|XMT_RING_BASE_ADDR3
mdefine_line|#define XMT_RING_BASE_ADDR3&t;0x118&t;/* Transmit ring2 base addr register */
DECL|macro|RCV_RING_BASE_ADDR0
mdefine_line|#define RCV_RING_BASE_ADDR0&t;0x120&t;/* Transmit ring0 base addr register */
DECL|macro|PMAT0
mdefine_line|#define PMAT0&t;&t;&t;0x190&t;/* OnNow pattern register0 */
DECL|macro|PMAT1
mdefine_line|#define PMAT1&t;&t;&t;0x194&t;/* OnNow pattern register1 */
multiline_comment|/* 16bit registers */
DECL|macro|XMT_RING_LEN0
mdefine_line|#define XMT_RING_LEN0&t;&t;0x140&t;/* Transmit Ring0 length register */
DECL|macro|XMT_RING_LEN1
mdefine_line|#define XMT_RING_LEN1&t;&t;0x144&t;/* Transmit Ring1 length register */
DECL|macro|XMT_RING_LEN2
mdefine_line|#define XMT_RING_LEN2&t;&t;0x148 &t;/* Transmit Ring2 length register */
DECL|macro|XMT_RING_LEN3
mdefine_line|#define XMT_RING_LEN3&t;&t;0x14C&t;/* Transmit Ring3 length register */
DECL|macro|RCV_RING_LEN0
mdefine_line|#define RCV_RING_LEN0&t;&t;0x150&t;/* Receive Ring0 length register */
DECL|macro|SRAM_SIZE
mdefine_line|#define SRAM_SIZE&t;&t;0x178&t;/* SRAM size register */
DECL|macro|SRAM_BOUNDARY
mdefine_line|#define SRAM_BOUNDARY&t;&t;0x17A&t;/* SRAM boundary register */
multiline_comment|/* 48bit register */
DECL|macro|PADR
mdefine_line|#define PADR&t;&t;&t;0x160&t;/* Physical address register */
DECL|macro|IFS1
mdefine_line|#define IFS1&t;&t;&t;0x18C&t;/* Inter-frame spacing Part1 register */
DECL|macro|IFS
mdefine_line|#define IFS&t;&t;&t;0x18D&t;/* Inter-frame spacing register */
DECL|macro|IPG
mdefine_line|#define IPG&t;&t;&t;0x18E&t;/* Inter-frame gap register */
multiline_comment|/* 64bit register */
DECL|macro|LADRF
mdefine_line|#define LADRF&t;&t;&t;0x168&t;/* Logical address filter register */
multiline_comment|/* Register Bit Definitions */
r_typedef
r_enum
(brace
DECL|enumerator|ASF_INIT_DONE
id|ASF_INIT_DONE
op_assign
(paren
l_int|1
op_lshift
l_int|1
)paren
comma
DECL|enumerator|ASF_INIT_PRESENT
id|ASF_INIT_PRESENT
op_assign
(paren
l_int|1
op_lshift
l_int|0
)paren
comma
DECL|typedef|STAT_ASF_BITS
)brace
id|STAT_ASF_BITS
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|MIB_CMD_ACTIVE
id|MIB_CMD_ACTIVE
op_assign
(paren
l_int|1
op_lshift
l_int|15
)paren
comma
DECL|enumerator|MIB_RD_CMD
id|MIB_RD_CMD
op_assign
(paren
l_int|1
op_lshift
l_int|13
)paren
comma
DECL|enumerator|MIB_CLEAR
id|MIB_CLEAR
op_assign
(paren
l_int|1
op_lshift
l_int|12
)paren
comma
DECL|enumerator|MIB_ADDRESS
id|MIB_ADDRESS
op_assign
(paren
l_int|1
op_lshift
l_int|0
)paren
op_or
(paren
l_int|1
op_lshift
l_int|1
)paren
op_or
(paren
l_int|1
op_lshift
l_int|2
)paren
op_or
(paren
l_int|1
op_lshift
l_int|3
)paren
op_or
(paren
l_int|1
op_lshift
l_int|4
)paren
op_or
(paren
l_int|1
op_lshift
l_int|5
)paren
comma
DECL|typedef|MIB_ADDR_BITS
)brace
id|MIB_ADDR_BITS
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|PMAT_DET
id|PMAT_DET
op_assign
(paren
l_int|1
op_lshift
l_int|12
)paren
comma
DECL|enumerator|MP_DET
id|MP_DET
op_assign
(paren
l_int|1
op_lshift
l_int|11
)paren
comma
DECL|enumerator|LC_DET
id|LC_DET
op_assign
(paren
l_int|1
op_lshift
l_int|10
)paren
comma
DECL|enumerator|SPEED_MASK
id|SPEED_MASK
op_assign
(paren
l_int|1
op_lshift
l_int|9
)paren
op_or
(paren
l_int|1
op_lshift
l_int|8
)paren
op_or
(paren
l_int|1
op_lshift
l_int|7
)paren
comma
DECL|enumerator|FULL_DPLX
id|FULL_DPLX
op_assign
(paren
l_int|1
op_lshift
l_int|6
)paren
comma
DECL|enumerator|LINK_STATS
id|LINK_STATS
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
comma
DECL|enumerator|AUTONEG_COMPLETE
id|AUTONEG_COMPLETE
op_assign
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
DECL|enumerator|MIIPD
id|MIIPD
op_assign
(paren
l_int|1
op_lshift
l_int|3
)paren
comma
DECL|enumerator|RX_SUSPENDED
id|RX_SUSPENDED
op_assign
(paren
l_int|1
op_lshift
l_int|2
)paren
comma
DECL|enumerator|TX_SUSPENDED
id|TX_SUSPENDED
op_assign
(paren
l_int|1
op_lshift
l_int|1
)paren
comma
DECL|enumerator|RUNNING
id|RUNNING
op_assign
(paren
l_int|1
op_lshift
l_int|0
)paren
comma
DECL|typedef|STAT0_BITS
)brace
id|STAT0_BITS
suffix:semicolon
DECL|macro|PHY_SPEED_10
mdefine_line|#define PHY_SPEED_10&t;&t;0x2
DECL|macro|PHY_SPEED_100
mdefine_line|#define PHY_SPEED_100&t;&t;0x3
multiline_comment|/* INT0&t;&t;&t;&t;0x38, 32bit register */
r_typedef
r_enum
(brace
DECL|enumerator|INTR
id|INTR
op_assign
(paren
l_int|1
op_lshift
l_int|31
)paren
comma
DECL|enumerator|PCSINT
id|PCSINT
op_assign
(paren
l_int|1
op_lshift
l_int|28
)paren
comma
DECL|enumerator|LCINT
id|LCINT
op_assign
(paren
l_int|1
op_lshift
l_int|27
)paren
comma
DECL|enumerator|APINT5
id|APINT5
op_assign
(paren
l_int|1
op_lshift
l_int|26
)paren
comma
DECL|enumerator|APINT4
id|APINT4
op_assign
(paren
l_int|1
op_lshift
l_int|25
)paren
comma
DECL|enumerator|APINT3
id|APINT3
op_assign
(paren
l_int|1
op_lshift
l_int|24
)paren
comma
DECL|enumerator|TINT_SUM
id|TINT_SUM
op_assign
(paren
l_int|1
op_lshift
l_int|23
)paren
comma
DECL|enumerator|APINT2
id|APINT2
op_assign
(paren
l_int|1
op_lshift
l_int|22
)paren
comma
DECL|enumerator|APINT1
id|APINT1
op_assign
(paren
l_int|1
op_lshift
l_int|21
)paren
comma
DECL|enumerator|APINT0
id|APINT0
op_assign
(paren
l_int|1
op_lshift
l_int|20
)paren
comma
DECL|enumerator|MIIPDTINT
id|MIIPDTINT
op_assign
(paren
l_int|1
op_lshift
l_int|19
)paren
comma
DECL|enumerator|MCCINT
id|MCCINT
op_assign
(paren
l_int|1
op_lshift
l_int|17
)paren
comma
DECL|enumerator|MREINT
id|MREINT
op_assign
(paren
l_int|1
op_lshift
l_int|16
)paren
comma
DECL|enumerator|RINT_SUM
id|RINT_SUM
op_assign
(paren
l_int|1
op_lshift
l_int|15
)paren
comma
DECL|enumerator|SPNDINT
id|SPNDINT
op_assign
(paren
l_int|1
op_lshift
l_int|14
)paren
comma
DECL|enumerator|MPINT
id|MPINT
op_assign
(paren
l_int|1
op_lshift
l_int|13
)paren
comma
DECL|enumerator|SINT
id|SINT
op_assign
(paren
l_int|1
op_lshift
l_int|12
)paren
comma
DECL|enumerator|TINT3
id|TINT3
op_assign
(paren
l_int|1
op_lshift
l_int|11
)paren
comma
DECL|enumerator|TINT2
id|TINT2
op_assign
(paren
l_int|1
op_lshift
l_int|10
)paren
comma
DECL|enumerator|TINT1
id|TINT1
op_assign
(paren
l_int|1
op_lshift
l_int|9
)paren
comma
DECL|enumerator|TINT0
id|TINT0
op_assign
(paren
l_int|1
op_lshift
l_int|8
)paren
comma
DECL|enumerator|UINT
id|UINT
op_assign
(paren
l_int|1
op_lshift
l_int|7
)paren
comma
DECL|enumerator|STINT
id|STINT
op_assign
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
DECL|enumerator|RINT0
id|RINT0
op_assign
(paren
l_int|1
op_lshift
l_int|0
)paren
comma
DECL|typedef|INT0_BITS
)brace
id|INT0_BITS
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|VAL3
id|VAL3
op_assign
(paren
l_int|1
op_lshift
l_int|31
)paren
comma
multiline_comment|/* VAL bit for byte 3 */
DECL|enumerator|VAL2
id|VAL2
op_assign
(paren
l_int|1
op_lshift
l_int|23
)paren
comma
multiline_comment|/* VAL bit for byte 2 */
DECL|enumerator|VAL1
id|VAL1
op_assign
(paren
l_int|1
op_lshift
l_int|15
)paren
comma
multiline_comment|/* VAL bit for byte 1 */
DECL|enumerator|VAL0
id|VAL0
op_assign
(paren
l_int|1
op_lshift
l_int|7
)paren
comma
multiline_comment|/* VAL bit for byte 0 */
DECL|typedef|VAL_BITS
)brace
id|VAL_BITS
suffix:semicolon
r_typedef
r_enum
(brace
multiline_comment|/* VAL3 */
DECL|enumerator|LCINTEN
id|LCINTEN
op_assign
(paren
l_int|1
op_lshift
l_int|27
)paren
comma
DECL|enumerator|APINT5EN
id|APINT5EN
op_assign
(paren
l_int|1
op_lshift
l_int|26
)paren
comma
DECL|enumerator|APINT4EN
id|APINT4EN
op_assign
(paren
l_int|1
op_lshift
l_int|25
)paren
comma
DECL|enumerator|APINT3EN
id|APINT3EN
op_assign
(paren
l_int|1
op_lshift
l_int|24
)paren
comma
multiline_comment|/* VAL2 */
DECL|enumerator|APINT2EN
id|APINT2EN
op_assign
(paren
l_int|1
op_lshift
l_int|22
)paren
comma
DECL|enumerator|APINT1EN
id|APINT1EN
op_assign
(paren
l_int|1
op_lshift
l_int|21
)paren
comma
DECL|enumerator|APINT0EN
id|APINT0EN
op_assign
(paren
l_int|1
op_lshift
l_int|20
)paren
comma
DECL|enumerator|MIIPDTINTEN
id|MIIPDTINTEN
op_assign
(paren
l_int|1
op_lshift
l_int|19
)paren
comma
DECL|enumerator|MCCIINTEN
id|MCCIINTEN
op_assign
(paren
l_int|1
op_lshift
l_int|18
)paren
comma
DECL|enumerator|MCCINTEN
id|MCCINTEN
op_assign
(paren
l_int|1
op_lshift
l_int|17
)paren
comma
DECL|enumerator|MREINTEN
id|MREINTEN
op_assign
(paren
l_int|1
op_lshift
l_int|16
)paren
comma
multiline_comment|/* VAL1 */
DECL|enumerator|SPNDINTEN
id|SPNDINTEN
op_assign
(paren
l_int|1
op_lshift
l_int|14
)paren
comma
DECL|enumerator|MPINTEN
id|MPINTEN
op_assign
(paren
l_int|1
op_lshift
l_int|13
)paren
comma
DECL|enumerator|TINTEN3
id|TINTEN3
op_assign
(paren
l_int|1
op_lshift
l_int|11
)paren
comma
DECL|enumerator|SINTEN
id|SINTEN
op_assign
(paren
l_int|1
op_lshift
l_int|12
)paren
comma
DECL|enumerator|TINTEN2
id|TINTEN2
op_assign
(paren
l_int|1
op_lshift
l_int|10
)paren
comma
DECL|enumerator|TINTEN1
id|TINTEN1
op_assign
(paren
l_int|1
op_lshift
l_int|9
)paren
comma
DECL|enumerator|TINTEN0
id|TINTEN0
op_assign
(paren
l_int|1
op_lshift
l_int|8
)paren
comma
multiline_comment|/* VAL0 */
DECL|enumerator|STINTEN
id|STINTEN
op_assign
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
DECL|enumerator|RINTEN0
id|RINTEN0
op_assign
(paren
l_int|1
op_lshift
l_int|0
)paren
comma
DECL|enumerator|INTEN0_CLEAR
id|INTEN0_CLEAR
op_assign
l_int|0x1F7F7F1F
comma
multiline_comment|/* Command style register */
DECL|typedef|INTEN0_BITS
)brace
id|INTEN0_BITS
suffix:semicolon
r_typedef
r_enum
(brace
multiline_comment|/* VAL2 */
DECL|enumerator|RDMD0
id|RDMD0
op_assign
(paren
l_int|1
op_lshift
l_int|16
)paren
comma
multiline_comment|/* VAL1 */
DECL|enumerator|TDMD3
id|TDMD3
op_assign
(paren
l_int|1
op_lshift
l_int|11
)paren
comma
DECL|enumerator|TDMD2
id|TDMD2
op_assign
(paren
l_int|1
op_lshift
l_int|10
)paren
comma
DECL|enumerator|TDMD1
id|TDMD1
op_assign
(paren
l_int|1
op_lshift
l_int|9
)paren
comma
DECL|enumerator|TDMD0
id|TDMD0
op_assign
(paren
l_int|1
op_lshift
l_int|8
)paren
comma
multiline_comment|/* VAL0 */
DECL|enumerator|UINTCMD
id|UINTCMD
op_assign
(paren
l_int|1
op_lshift
l_int|6
)paren
comma
DECL|enumerator|RX_FAST_SPND
id|RX_FAST_SPND
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
comma
DECL|enumerator|TX_FAST_SPND
id|TX_FAST_SPND
op_assign
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
DECL|enumerator|RX_SPND
id|RX_SPND
op_assign
(paren
l_int|1
op_lshift
l_int|3
)paren
comma
DECL|enumerator|TX_SPND
id|TX_SPND
op_assign
(paren
l_int|1
op_lshift
l_int|2
)paren
comma
DECL|enumerator|INTREN
id|INTREN
op_assign
(paren
l_int|1
op_lshift
l_int|1
)paren
comma
DECL|enumerator|RUN
id|RUN
op_assign
(paren
l_int|1
op_lshift
l_int|0
)paren
comma
DECL|enumerator|CMD0_CLEAR
id|CMD0_CLEAR
op_assign
l_int|0x000F0F7F
comma
multiline_comment|/* Command style register */
DECL|typedef|CMD0_BITS
)brace
id|CMD0_BITS
suffix:semicolon
r_typedef
r_enum
(brace
multiline_comment|/* VAL3 */
DECL|enumerator|CONDUIT_MODE
id|CONDUIT_MODE
op_assign
(paren
l_int|1
op_lshift
l_int|29
)paren
comma
multiline_comment|/* VAL2 */
DECL|enumerator|RPA
id|RPA
op_assign
(paren
l_int|1
op_lshift
l_int|19
)paren
comma
DECL|enumerator|DRCVPA
id|DRCVPA
op_assign
(paren
l_int|1
op_lshift
l_int|18
)paren
comma
DECL|enumerator|DRCVBC
id|DRCVBC
op_assign
(paren
l_int|1
op_lshift
l_int|17
)paren
comma
DECL|enumerator|PROM
id|PROM
op_assign
(paren
l_int|1
op_lshift
l_int|16
)paren
comma
multiline_comment|/* VAL1 */
DECL|enumerator|ASTRP_RCV
id|ASTRP_RCV
op_assign
(paren
l_int|1
op_lshift
l_int|13
)paren
comma
DECL|enumerator|RCV_DROP0
id|RCV_DROP0
op_assign
(paren
l_int|1
op_lshift
l_int|12
)paren
comma
DECL|enumerator|EMBA
id|EMBA
op_assign
(paren
l_int|1
op_lshift
l_int|11
)paren
comma
DECL|enumerator|DXMT2PD
id|DXMT2PD
op_assign
(paren
l_int|1
op_lshift
l_int|10
)paren
comma
DECL|enumerator|LTINTEN
id|LTINTEN
op_assign
(paren
l_int|1
op_lshift
l_int|9
)paren
comma
DECL|enumerator|DXMTFCS
id|DXMTFCS
op_assign
(paren
l_int|1
op_lshift
l_int|8
)paren
comma
multiline_comment|/* VAL0 */
DECL|enumerator|APAD_XMT
id|APAD_XMT
op_assign
(paren
l_int|1
op_lshift
l_int|6
)paren
comma
DECL|enumerator|DRTY
id|DRTY
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
comma
DECL|enumerator|INLOOP
id|INLOOP
op_assign
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
DECL|enumerator|EXLOOP
id|EXLOOP
op_assign
(paren
l_int|1
op_lshift
l_int|3
)paren
comma
DECL|enumerator|REX_RTRY
id|REX_RTRY
op_assign
(paren
l_int|1
op_lshift
l_int|2
)paren
comma
DECL|enumerator|REX_UFLO
id|REX_UFLO
op_assign
(paren
l_int|1
op_lshift
l_int|1
)paren
comma
DECL|enumerator|REX_LCOL
id|REX_LCOL
op_assign
(paren
l_int|1
op_lshift
l_int|0
)paren
comma
DECL|enumerator|CMD2_CLEAR
id|CMD2_CLEAR
op_assign
l_int|0x3F7F3F7F
comma
multiline_comment|/* Command style register */
DECL|typedef|CMD2_BITS
)brace
id|CMD2_BITS
suffix:semicolon
r_typedef
r_enum
(brace
multiline_comment|/* VAL3 */
DECL|enumerator|ASF_INIT_DONE_ALIAS
id|ASF_INIT_DONE_ALIAS
op_assign
(paren
l_int|1
op_lshift
l_int|29
)paren
comma
multiline_comment|/* VAL2 */
DECL|enumerator|JUMBO
id|JUMBO
op_assign
(paren
l_int|1
op_lshift
l_int|21
)paren
comma
DECL|enumerator|VSIZE
id|VSIZE
op_assign
(paren
l_int|1
op_lshift
l_int|20
)paren
comma
DECL|enumerator|VLONLY
id|VLONLY
op_assign
(paren
l_int|1
op_lshift
l_int|19
)paren
comma
DECL|enumerator|VL_TAG_DEL
id|VL_TAG_DEL
op_assign
(paren
l_int|1
op_lshift
l_int|18
)paren
comma
multiline_comment|/* VAL1 */
DECL|enumerator|EN_PMGR
id|EN_PMGR
op_assign
(paren
l_int|1
op_lshift
l_int|14
)paren
comma
DECL|enumerator|INTLEVEL
id|INTLEVEL
op_assign
(paren
l_int|1
op_lshift
l_int|13
)paren
comma
DECL|enumerator|FORCE_FULL_DUPLEX
id|FORCE_FULL_DUPLEX
op_assign
(paren
l_int|1
op_lshift
l_int|12
)paren
comma
DECL|enumerator|FORCE_LINK_STATUS
id|FORCE_LINK_STATUS
op_assign
(paren
l_int|1
op_lshift
l_int|11
)paren
comma
DECL|enumerator|APEP
id|APEP
op_assign
(paren
l_int|1
op_lshift
l_int|10
)paren
comma
DECL|enumerator|MPPLBA
id|MPPLBA
op_assign
(paren
l_int|1
op_lshift
l_int|9
)paren
comma
multiline_comment|/* VAL0 */
DECL|enumerator|RESET_PHY_PULSE
id|RESET_PHY_PULSE
op_assign
(paren
l_int|1
op_lshift
l_int|2
)paren
comma
DECL|enumerator|RESET_PHY
id|RESET_PHY
op_assign
(paren
l_int|1
op_lshift
l_int|1
)paren
comma
DECL|enumerator|PHY_RST_POL
id|PHY_RST_POL
op_assign
(paren
l_int|1
op_lshift
l_int|0
)paren
comma
DECL|typedef|CMD3_BITS
)brace
id|CMD3_BITS
suffix:semicolon
r_typedef
r_enum
(brace
multiline_comment|/* VAL0 */
DECL|enumerator|PMAT_SAVE_MATCH
id|PMAT_SAVE_MATCH
op_assign
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
DECL|enumerator|PMAT_MODE
id|PMAT_MODE
op_assign
(paren
l_int|1
op_lshift
l_int|3
)paren
comma
DECL|enumerator|MPEN_SW
id|MPEN_SW
op_assign
(paren
l_int|1
op_lshift
l_int|1
)paren
comma
DECL|enumerator|LCMODE_SW
id|LCMODE_SW
op_assign
(paren
l_int|1
op_lshift
l_int|0
)paren
comma
DECL|enumerator|CMD7_CLEAR
id|CMD7_CLEAR
op_assign
l_int|0x0000001B
multiline_comment|/* Command style register */
DECL|typedef|CMD7_BITS
)brace
id|CMD7_BITS
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|RESET_PHY_WIDTH
id|RESET_PHY_WIDTH
op_assign
(paren
l_int|0xF
op_lshift
l_int|16
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|20
)paren
comma
multiline_comment|/* 0x00FF0000 */
DECL|enumerator|XMTSP_MASK
id|XMTSP_MASK
op_assign
(paren
l_int|1
op_lshift
l_int|9
)paren
op_or
(paren
l_int|1
op_lshift
l_int|8
)paren
comma
multiline_comment|/* 9:8 */
DECL|enumerator|XMTSP_128
id|XMTSP_128
op_assign
(paren
l_int|1
op_lshift
l_int|9
)paren
comma
multiline_comment|/* 9 */
DECL|enumerator|XMTSP_64
id|XMTSP_64
op_assign
(paren
l_int|1
op_lshift
l_int|8
)paren
comma
DECL|enumerator|CACHE_ALIGN
id|CACHE_ALIGN
op_assign
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
DECL|enumerator|BURST_LIMIT_MASK
id|BURST_LIMIT_MASK
op_assign
(paren
l_int|0xF
op_lshift
l_int|0
)paren
comma
DECL|enumerator|CTRL1_DEFAULT
id|CTRL1_DEFAULT
op_assign
l_int|0x00010111
comma
DECL|typedef|CTRL1_BITS
)brace
id|CTRL1_BITS
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|FMDC_MASK
id|FMDC_MASK
op_assign
(paren
l_int|1
op_lshift
l_int|9
)paren
op_or
(paren
l_int|1
op_lshift
l_int|8
)paren
comma
multiline_comment|/* 9:8 */
DECL|enumerator|XPHYRST
id|XPHYRST
op_assign
(paren
l_int|1
op_lshift
l_int|7
)paren
comma
DECL|enumerator|XPHYANE
id|XPHYANE
op_assign
(paren
l_int|1
op_lshift
l_int|6
)paren
comma
DECL|enumerator|XPHYFD
id|XPHYFD
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
comma
DECL|enumerator|XPHYSP
id|XPHYSP
op_assign
(paren
l_int|1
op_lshift
l_int|4
)paren
op_or
(paren
l_int|1
op_lshift
l_int|3
)paren
comma
multiline_comment|/* 4:3 */
DECL|enumerator|APDW_MASK
id|APDW_MASK
op_assign
(paren
l_int|1
op_lshift
l_int|2
)paren
op_or
(paren
l_int|1
op_lshift
l_int|1
)paren
op_or
(paren
l_int|1
op_lshift
l_int|0
)paren
comma
multiline_comment|/* 2:0 */
DECL|typedef|CTRL2_BITS
)brace
id|CTRL2_BITS
suffix:semicolon
multiline_comment|/* XMT_RING_LIMIT&t;&t;0x7C, 32bit register */
r_typedef
r_enum
(brace
DECL|enumerator|XMT_RING2_LIMIT
id|XMT_RING2_LIMIT
op_assign
(paren
l_int|0xFF
op_lshift
l_int|16
)paren
comma
multiline_comment|/* 23:16 */
DECL|enumerator|XMT_RING1_LIMIT
id|XMT_RING1_LIMIT
op_assign
(paren
l_int|0xFF
op_lshift
l_int|8
)paren
comma
multiline_comment|/* 15:8 */
DECL|enumerator|XMT_RING0_LIMIT
id|XMT_RING0_LIMIT
op_assign
(paren
l_int|0xFF
op_lshift
l_int|0
)paren
comma
multiline_comment|/* 7:0 */
DECL|typedef|XMT_RING_LIMIT_BITS
)brace
id|XMT_RING_LIMIT_BITS
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|AP_REG0_EN
id|AP_REG0_EN
op_assign
(paren
l_int|1
op_lshift
l_int|15
)paren
comma
DECL|enumerator|AP_REG0_ADDR_MASK
id|AP_REG0_ADDR_MASK
op_assign
(paren
l_int|0xF
op_lshift
l_int|8
)paren
op_or
(paren
l_int|1
op_lshift
l_int|12
)paren
comma
multiline_comment|/* 12:8 */
DECL|enumerator|AP_PHY0_ADDR_MASK
id|AP_PHY0_ADDR_MASK
op_assign
(paren
l_int|0xF
op_lshift
l_int|0
)paren
op_or
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
multiline_comment|/* 4:0 */
DECL|typedef|AUTOPOLL0_BITS
)brace
id|AUTOPOLL0_BITS
suffix:semicolon
multiline_comment|/* AUTOPOLL1&t;&t;&t;0x8A, 16bit register */
r_typedef
r_enum
(brace
DECL|enumerator|AP_REG1_EN
id|AP_REG1_EN
op_assign
(paren
l_int|1
op_lshift
l_int|15
)paren
comma
DECL|enumerator|AP_REG1_ADDR_MASK
id|AP_REG1_ADDR_MASK
op_assign
(paren
l_int|0xF
op_lshift
l_int|8
)paren
op_or
(paren
l_int|1
op_lshift
l_int|12
)paren
comma
multiline_comment|/* 12:8 */
DECL|enumerator|AP_PRE_SUP1
id|AP_PRE_SUP1
op_assign
(paren
l_int|1
op_lshift
l_int|6
)paren
comma
DECL|enumerator|AP_PHY1_DFLT
id|AP_PHY1_DFLT
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
comma
DECL|enumerator|AP_PHY1_ADDR_MASK
id|AP_PHY1_ADDR_MASK
op_assign
(paren
l_int|0xF
op_lshift
l_int|0
)paren
op_or
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
multiline_comment|/* 4:0 */
DECL|typedef|AUTOPOLL1_BITS
)brace
id|AUTOPOLL1_BITS
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|AP_REG2_EN
id|AP_REG2_EN
op_assign
(paren
l_int|1
op_lshift
l_int|15
)paren
comma
DECL|enumerator|AP_REG2_ADDR_MASK
id|AP_REG2_ADDR_MASK
op_assign
(paren
l_int|0xF
op_lshift
l_int|8
)paren
op_or
(paren
l_int|1
op_lshift
l_int|12
)paren
comma
multiline_comment|/* 12:8 */
DECL|enumerator|AP_PRE_SUP2
id|AP_PRE_SUP2
op_assign
(paren
l_int|1
op_lshift
l_int|6
)paren
comma
DECL|enumerator|AP_PHY2_DFLT
id|AP_PHY2_DFLT
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
comma
DECL|enumerator|AP_PHY2_ADDR_MASK
id|AP_PHY2_ADDR_MASK
op_assign
(paren
l_int|0xF
op_lshift
l_int|0
)paren
op_or
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
multiline_comment|/* 4:0 */
DECL|typedef|AUTOPOLL2_BITS
)brace
id|AUTOPOLL2_BITS
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|AP_REG3_EN
id|AP_REG3_EN
op_assign
(paren
l_int|1
op_lshift
l_int|15
)paren
comma
DECL|enumerator|AP_REG3_ADDR_MASK
id|AP_REG3_ADDR_MASK
op_assign
(paren
l_int|0xF
op_lshift
l_int|8
)paren
op_or
(paren
l_int|1
op_lshift
l_int|12
)paren
comma
multiline_comment|/* 12:8 */
DECL|enumerator|AP_PRE_SUP3
id|AP_PRE_SUP3
op_assign
(paren
l_int|1
op_lshift
l_int|6
)paren
comma
DECL|enumerator|AP_PHY3_DFLT
id|AP_PHY3_DFLT
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
comma
DECL|enumerator|AP_PHY3_ADDR_MASK
id|AP_PHY3_ADDR_MASK
op_assign
(paren
l_int|0xF
op_lshift
l_int|0
)paren
op_or
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
multiline_comment|/* 4:0 */
DECL|typedef|AUTOPOLL3_BITS
)brace
id|AUTOPOLL3_BITS
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|AP_REG4_EN
id|AP_REG4_EN
op_assign
(paren
l_int|1
op_lshift
l_int|15
)paren
comma
DECL|enumerator|AP_REG4_ADDR_MASK
id|AP_REG4_ADDR_MASK
op_assign
(paren
l_int|0xF
op_lshift
l_int|8
)paren
op_or
(paren
l_int|1
op_lshift
l_int|12
)paren
comma
multiline_comment|/* 12:8 */
DECL|enumerator|AP_PRE_SUP4
id|AP_PRE_SUP4
op_assign
(paren
l_int|1
op_lshift
l_int|6
)paren
comma
DECL|enumerator|AP_PHY4_DFLT
id|AP_PHY4_DFLT
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
comma
DECL|enumerator|AP_PHY4_ADDR_MASK
id|AP_PHY4_ADDR_MASK
op_assign
(paren
l_int|0xF
op_lshift
l_int|0
)paren
op_or
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
multiline_comment|/* 4:0 */
DECL|typedef|AUTOPOLL4_BITS
)brace
id|AUTOPOLL4_BITS
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|AP_REG5_EN
id|AP_REG5_EN
op_assign
(paren
l_int|1
op_lshift
l_int|15
)paren
comma
DECL|enumerator|AP_REG5_ADDR_MASK
id|AP_REG5_ADDR_MASK
op_assign
(paren
l_int|0xF
op_lshift
l_int|8
)paren
op_or
(paren
l_int|1
op_lshift
l_int|12
)paren
comma
multiline_comment|/* 12:8 */
DECL|enumerator|AP_PRE_SUP5
id|AP_PRE_SUP5
op_assign
(paren
l_int|1
op_lshift
l_int|6
)paren
comma
DECL|enumerator|AP_PHY5_DFLT
id|AP_PHY5_DFLT
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
comma
DECL|enumerator|AP_PHY5_ADDR_MASK
id|AP_PHY5_ADDR_MASK
op_assign
(paren
l_int|0xF
op_lshift
l_int|0
)paren
op_or
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
multiline_comment|/* 4:0 */
DECL|typedef|AUTOPOLL5_BITS
)brace
id|AUTOPOLL5_BITS
suffix:semicolon
multiline_comment|/* AP_VALUE &t;&t;&t;0x98, 32bit ragister */
r_typedef
r_enum
(brace
DECL|enumerator|AP_VAL_ACTIVE
id|AP_VAL_ACTIVE
op_assign
(paren
l_int|1
op_lshift
l_int|31
)paren
comma
DECL|enumerator|AP_VAL_RD_CMD
id|AP_VAL_RD_CMD
op_assign
(paren
l_int|1
op_lshift
l_int|29
)paren
comma
DECL|enumerator|AP_ADDR
id|AP_ADDR
op_assign
(paren
l_int|1
op_lshift
l_int|18
)paren
op_or
(paren
l_int|1
op_lshift
l_int|17
)paren
op_or
(paren
l_int|1
op_lshift
l_int|16
)paren
comma
multiline_comment|/* 18:16 */
DECL|enumerator|AP_VAL
id|AP_VAL
op_assign
(paren
l_int|0xF
op_lshift
l_int|0
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|4
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|8
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|12
)paren
comma
multiline_comment|/* 15:0 */
DECL|typedef|AP_VALUE_BITS
)brace
id|AP_VALUE_BITS
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|DLY_INT_A_R3
id|DLY_INT_A_R3
op_assign
(paren
l_int|1
op_lshift
l_int|31
)paren
comma
DECL|enumerator|DLY_INT_A_R2
id|DLY_INT_A_R2
op_assign
(paren
l_int|1
op_lshift
l_int|30
)paren
comma
DECL|enumerator|DLY_INT_A_R1
id|DLY_INT_A_R1
op_assign
(paren
l_int|1
op_lshift
l_int|29
)paren
comma
DECL|enumerator|DLY_INT_A_R0
id|DLY_INT_A_R0
op_assign
(paren
l_int|1
op_lshift
l_int|28
)paren
comma
DECL|enumerator|DLY_INT_A_T3
id|DLY_INT_A_T3
op_assign
(paren
l_int|1
op_lshift
l_int|27
)paren
comma
DECL|enumerator|DLY_INT_A_T2
id|DLY_INT_A_T2
op_assign
(paren
l_int|1
op_lshift
l_int|26
)paren
comma
DECL|enumerator|DLY_INT_A_T1
id|DLY_INT_A_T1
op_assign
(paren
l_int|1
op_lshift
l_int|25
)paren
comma
DECL|enumerator|DLY_INT_A_T0
id|DLY_INT_A_T0
op_assign
(paren
l_int|1
op_lshift
l_int|24
)paren
comma
DECL|enumerator|EVENT_COUNT_A
id|EVENT_COUNT_A
op_assign
(paren
l_int|0xF
op_lshift
l_int|16
)paren
op_or
(paren
l_int|0x1
op_lshift
l_int|20
)paren
comma
multiline_comment|/* 20:16 */
DECL|enumerator|MAX_DELAY_TIME_A
id|MAX_DELAY_TIME_A
op_assign
(paren
l_int|0xF
op_lshift
l_int|0
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|4
)paren
op_or
(paren
l_int|1
op_lshift
l_int|8
)paren
op_or
(paren
l_int|1
op_lshift
l_int|9
)paren
op_or
(paren
l_int|1
op_lshift
l_int|10
)paren
comma
multiline_comment|/* 10:0 */
DECL|typedef|DLY_INT_A_BITS
)brace
id|DLY_INT_A_BITS
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|DLY_INT_B_R3
id|DLY_INT_B_R3
op_assign
(paren
l_int|1
op_lshift
l_int|31
)paren
comma
DECL|enumerator|DLY_INT_B_R2
id|DLY_INT_B_R2
op_assign
(paren
l_int|1
op_lshift
l_int|30
)paren
comma
DECL|enumerator|DLY_INT_B_R1
id|DLY_INT_B_R1
op_assign
(paren
l_int|1
op_lshift
l_int|29
)paren
comma
DECL|enumerator|DLY_INT_B_R0
id|DLY_INT_B_R0
op_assign
(paren
l_int|1
op_lshift
l_int|28
)paren
comma
DECL|enumerator|DLY_INT_B_T3
id|DLY_INT_B_T3
op_assign
(paren
l_int|1
op_lshift
l_int|27
)paren
comma
DECL|enumerator|DLY_INT_B_T2
id|DLY_INT_B_T2
op_assign
(paren
l_int|1
op_lshift
l_int|26
)paren
comma
DECL|enumerator|DLY_INT_B_T1
id|DLY_INT_B_T1
op_assign
(paren
l_int|1
op_lshift
l_int|25
)paren
comma
DECL|enumerator|DLY_INT_B_T0
id|DLY_INT_B_T0
op_assign
(paren
l_int|1
op_lshift
l_int|24
)paren
comma
DECL|enumerator|EVENT_COUNT_B
id|EVENT_COUNT_B
op_assign
(paren
l_int|0xF
op_lshift
l_int|16
)paren
op_or
(paren
l_int|0x1
op_lshift
l_int|20
)paren
comma
multiline_comment|/* 20:16 */
DECL|enumerator|MAX_DELAY_TIME_B
id|MAX_DELAY_TIME_B
op_assign
(paren
l_int|0xF
op_lshift
l_int|0
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|4
)paren
op_or
(paren
l_int|1
op_lshift
l_int|8
)paren
op_or
(paren
l_int|1
op_lshift
l_int|9
)paren
op_or
(paren
l_int|1
op_lshift
l_int|10
)paren
comma
multiline_comment|/* 10:0 */
DECL|typedef|DLY_INT_B_BITS
)brace
id|DLY_INT_B_BITS
suffix:semicolon
multiline_comment|/* FLOW_CONTROL &t;&t;0xC8, 32bit register */
r_typedef
r_enum
(brace
DECL|enumerator|PAUSE_LEN_CHG
id|PAUSE_LEN_CHG
op_assign
(paren
l_int|1
op_lshift
l_int|30
)paren
comma
DECL|enumerator|FTPE
id|FTPE
op_assign
(paren
l_int|1
op_lshift
l_int|22
)paren
comma
DECL|enumerator|FRPE
id|FRPE
op_assign
(paren
l_int|1
op_lshift
l_int|21
)paren
comma
DECL|enumerator|NAPA
id|NAPA
op_assign
(paren
l_int|1
op_lshift
l_int|20
)paren
comma
DECL|enumerator|NPA
id|NPA
op_assign
(paren
l_int|1
op_lshift
l_int|19
)paren
comma
DECL|enumerator|FIXP
id|FIXP
op_assign
(paren
l_int|1
op_lshift
l_int|18
)paren
comma
DECL|enumerator|FCCMD
id|FCCMD
op_assign
(paren
l_int|1
op_lshift
l_int|16
)paren
comma
DECL|enumerator|PAUSE_LEN
id|PAUSE_LEN
op_assign
(paren
l_int|0xF
op_lshift
l_int|0
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|4
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|8
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|12
)paren
comma
multiline_comment|/* 15:0 */
DECL|typedef|FLOW_CONTROL_BITS
)brace
id|FLOW_CONTROL_BITS
suffix:semicolon
multiline_comment|/* PHY_ ACCESS&t;&t;&t;0xD0, 32bit register */
r_typedef
r_enum
(brace
DECL|enumerator|PHY_CMD_ACTIVE
id|PHY_CMD_ACTIVE
op_assign
(paren
l_int|1
op_lshift
l_int|31
)paren
comma
DECL|enumerator|PHY_WR_CMD
id|PHY_WR_CMD
op_assign
(paren
l_int|1
op_lshift
l_int|30
)paren
comma
DECL|enumerator|PHY_RD_CMD
id|PHY_RD_CMD
op_assign
(paren
l_int|1
op_lshift
l_int|29
)paren
comma
DECL|enumerator|PHY_RD_ERR
id|PHY_RD_ERR
op_assign
(paren
l_int|1
op_lshift
l_int|28
)paren
comma
DECL|enumerator|PHY_PRE_SUP
id|PHY_PRE_SUP
op_assign
(paren
l_int|1
op_lshift
l_int|27
)paren
comma
DECL|enumerator|PHY_ADDR
id|PHY_ADDR
op_assign
(paren
l_int|1
op_lshift
l_int|21
)paren
op_or
(paren
l_int|1
op_lshift
l_int|22
)paren
op_or
(paren
l_int|1
op_lshift
l_int|23
)paren
op_or
(paren
l_int|1
op_lshift
l_int|24
)paren
op_or
(paren
l_int|1
op_lshift
l_int|25
)paren
comma
multiline_comment|/* 25:21 */
DECL|enumerator|PHY_REG_ADDR
id|PHY_REG_ADDR
op_assign
(paren
l_int|1
op_lshift
l_int|16
)paren
op_or
(paren
l_int|1
op_lshift
l_int|17
)paren
op_or
(paren
l_int|1
op_lshift
l_int|18
)paren
op_or
(paren
l_int|1
op_lshift
l_int|19
)paren
op_or
(paren
l_int|1
op_lshift
l_int|20
)paren
comma
multiline_comment|/* 20:16 */
DECL|enumerator|PHY_DATA
id|PHY_DATA
op_assign
(paren
l_int|0xF
op_lshift
l_int|0
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|4
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|8
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|12
)paren
comma
multiline_comment|/* 15:0 */
DECL|typedef|PHY_ACCESS_BITS
)brace
id|PHY_ACCESS_BITS
suffix:semicolon
multiline_comment|/* PMAT0&t;&t;&t;0x190,&t; 32bit register */
r_typedef
r_enum
(brace
DECL|enumerator|PMR_ACTIVE
id|PMR_ACTIVE
op_assign
(paren
l_int|1
op_lshift
l_int|31
)paren
comma
DECL|enumerator|PMR_WR_CMD
id|PMR_WR_CMD
op_assign
(paren
l_int|1
op_lshift
l_int|30
)paren
comma
DECL|enumerator|PMR_RD_CMD
id|PMR_RD_CMD
op_assign
(paren
l_int|1
op_lshift
l_int|29
)paren
comma
DECL|enumerator|PMR_BANK
id|PMR_BANK
op_assign
(paren
l_int|1
op_lshift
l_int|28
)paren
comma
DECL|enumerator|PMR_ADDR
id|PMR_ADDR
op_assign
(paren
l_int|0xF
op_lshift
l_int|16
)paren
op_or
(paren
l_int|1
op_lshift
l_int|20
)paren
op_or
(paren
l_int|1
op_lshift
l_int|21
)paren
op_or
(paren
l_int|1
op_lshift
l_int|22
)paren
comma
multiline_comment|/* 22:16 */
DECL|enumerator|PMR_B4
id|PMR_B4
op_assign
(paren
l_int|0xF
op_lshift
l_int|0
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|4
)paren
comma
multiline_comment|/* 15:0 */
DECL|typedef|PMAT0_BITS
)brace
id|PMAT0_BITS
suffix:semicolon
multiline_comment|/* PMAT1&t;&t;&t;0x194,&t; 32bit register */
r_typedef
r_enum
(brace
DECL|enumerator|PMR_B3
id|PMR_B3
op_assign
(paren
l_int|0xF
op_lshift
l_int|24
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|28
)paren
comma
multiline_comment|/* 31:24 */
DECL|enumerator|PMR_B2
id|PMR_B2
op_assign
(paren
l_int|0xF
op_lshift
l_int|16
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|20
)paren
comma
multiline_comment|/* 23:16 */
DECL|enumerator|PMR_B1
id|PMR_B1
op_assign
(paren
l_int|0xF
op_lshift
l_int|8
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|12
)paren
comma
multiline_comment|/* 15:8 */
DECL|enumerator|PMR_B0
id|PMR_B0
op_assign
(paren
l_int|0xF
op_lshift
l_int|0
)paren
op_or
(paren
l_int|0xF
op_lshift
l_int|4
)paren
comma
multiline_comment|/* 7:0 */
DECL|typedef|PMAT1_BITS
)brace
id|PMAT1_BITS
suffix:semicolon
multiline_comment|/************************************************************************/
multiline_comment|/*                                                                      */
multiline_comment|/*                      MIB counter definitions                         */
multiline_comment|/*                                                                      */
multiline_comment|/************************************************************************/
DECL|macro|rcv_miss_pkts
mdefine_line|#define rcv_miss_pkts&t;&t;&t;&t;0x00
DECL|macro|rcv_octets
mdefine_line|#define rcv_octets&t;&t;&t;&t;0x01
DECL|macro|rcv_broadcast_pkts
mdefine_line|#define rcv_broadcast_pkts&t;&t;&t;0x02
DECL|macro|rcv_multicast_pkts
mdefine_line|#define rcv_multicast_pkts&t;&t;&t;0x03
DECL|macro|rcv_undersize_pkts
mdefine_line|#define rcv_undersize_pkts&t;&t;&t;0x04
DECL|macro|rcv_oversize_pkts
mdefine_line|#define rcv_oversize_pkts&t;&t;&t;0x05
DECL|macro|rcv_fragments
mdefine_line|#define rcv_fragments&t;&t;&t;&t;0x06
DECL|macro|rcv_jabbers
mdefine_line|#define rcv_jabbers&t;&t;&t;&t;0x07
DECL|macro|rcv_unicast_pkts
mdefine_line|#define rcv_unicast_pkts&t;&t;&t;0x08
DECL|macro|rcv_alignment_errors
mdefine_line|#define rcv_alignment_errors&t;&t;&t;0x09
DECL|macro|rcv_fcs_errors
mdefine_line|#define rcv_fcs_errors&t;&t;&t;&t;0x0A
DECL|macro|rcv_good_octets
mdefine_line|#define rcv_good_octets&t;&t;&t;&t;0x0B
DECL|macro|rcv_mac_ctrl
mdefine_line|#define rcv_mac_ctrl&t;&t;&t;&t;0x0C
DECL|macro|rcv_flow_ctrl
mdefine_line|#define rcv_flow_ctrl&t;&t;&t;&t;0x0D
DECL|macro|rcv_pkts_64_octets
mdefine_line|#define rcv_pkts_64_octets&t;&t;&t;0x0E
DECL|macro|rcv_pkts_65to127_octets
mdefine_line|#define rcv_pkts_65to127_octets&t;&t;&t;0x0F
DECL|macro|rcv_pkts_128to255_octets
mdefine_line|#define rcv_pkts_128to255_octets&t;&t;0x10
DECL|macro|rcv_pkts_256to511_octets
mdefine_line|#define rcv_pkts_256to511_octets&t;&t;0x11
DECL|macro|rcv_pkts_512to1023_octets
mdefine_line|#define rcv_pkts_512to1023_octets&t;&t;0x12
DECL|macro|rcv_pkts_1024to1518_octets
mdefine_line|#define rcv_pkts_1024to1518_octets&t;&t;0x13
DECL|macro|rcv_unsupported_opcode
mdefine_line|#define rcv_unsupported_opcode&t;&t;&t;0x14
DECL|macro|rcv_symbol_errors
mdefine_line|#define rcv_symbol_errors&t;&t;&t;0x15
DECL|macro|rcv_drop_pkts_ring1
mdefine_line|#define rcv_drop_pkts_ring1&t;&t;&t;0x16
DECL|macro|rcv_drop_pkts_ring2
mdefine_line|#define rcv_drop_pkts_ring2&t;&t;&t;0x17
DECL|macro|rcv_drop_pkts_ring3
mdefine_line|#define rcv_drop_pkts_ring3&t;&t;&t;0x18
DECL|macro|rcv_drop_pkts_ring4
mdefine_line|#define rcv_drop_pkts_ring4&t;&t;&t;0x19
DECL|macro|rcv_jumbo_pkts
mdefine_line|#define rcv_jumbo_pkts&t;&t;&t;&t;0x1A
DECL|macro|xmt_underrun_pkts
mdefine_line|#define xmt_underrun_pkts&t;&t;&t;0x20
DECL|macro|xmt_octets
mdefine_line|#define xmt_octets&t;&t;&t;&t;0x21
DECL|macro|xmt_packets
mdefine_line|#define xmt_packets&t;&t;&t;&t;0x22
DECL|macro|xmt_broadcast_pkts
mdefine_line|#define xmt_broadcast_pkts&t;&t;&t;0x23
DECL|macro|xmt_multicast_pkts
mdefine_line|#define xmt_multicast_pkts&t;&t;&t;0x24
DECL|macro|xmt_collisions
mdefine_line|#define xmt_collisions&t;&t;&t;&t;0x25
DECL|macro|xmt_unicast_pkts
mdefine_line|#define xmt_unicast_pkts&t;&t;&t;0x26
DECL|macro|xmt_one_collision
mdefine_line|#define xmt_one_collision&t;&t;&t;0x27
DECL|macro|xmt_multiple_collision
mdefine_line|#define xmt_multiple_collision&t;&t;&t;0x28
DECL|macro|xmt_deferred_transmit
mdefine_line|#define xmt_deferred_transmit&t;&t;&t;0x29
DECL|macro|xmt_late_collision
mdefine_line|#define xmt_late_collision&t;&t;&t;0x2A
DECL|macro|xmt_excessive_defer
mdefine_line|#define xmt_excessive_defer&t;&t;&t;0x2B
DECL|macro|xmt_loss_carrier
mdefine_line|#define xmt_loss_carrier&t;&t;&t;0x2C
DECL|macro|xmt_excessive_collision
mdefine_line|#define xmt_excessive_collision&t;&t;&t;0x2D
DECL|macro|xmt_back_pressure
mdefine_line|#define xmt_back_pressure&t;&t;&t;0x2E
DECL|macro|xmt_flow_ctrl
mdefine_line|#define xmt_flow_ctrl&t;&t;&t;&t;0x2F
DECL|macro|xmt_pkts_64_octets
mdefine_line|#define xmt_pkts_64_octets&t;&t;&t;0x30
DECL|macro|xmt_pkts_65to127_octets
mdefine_line|#define xmt_pkts_65to127_octets&t;&t;&t;0x31
DECL|macro|xmt_pkts_128to255_octets
mdefine_line|#define xmt_pkts_128to255_octets&t;&t;0x32
DECL|macro|xmt_pkts_256to511_octets
mdefine_line|#define xmt_pkts_256to511_octets&t;&t;0x33
DECL|macro|xmt_pkts_512to1023_octets
mdefine_line|#define xmt_pkts_512to1023_octets&t;&t;0x34
DECL|macro|xmt_pkts_1024to1518_octet
mdefine_line|#define xmt_pkts_1024to1518_octet&t;&t;0x35
DECL|macro|xmt_oversize_pkts
mdefine_line|#define xmt_oversize_pkts&t;&t;&t;0x36
DECL|macro|xmt_jumbo_pkts
mdefine_line|#define xmt_jumbo_pkts&t;&t;&t;&t;0x37
multiline_comment|/* Driver definitions */
DECL|macro|PCI_VENDOR_ID_AMD
mdefine_line|#define&t; PCI_VENDOR_ID_AMD&t;&t;0x1022
DECL|macro|PCI_DEVICE_ID_AMD8111E_7462
mdefine_line|#define  PCI_DEVICE_ID_AMD8111E_7462&t;0x7462
DECL|macro|MAX_UNITS
mdefine_line|#define MAX_UNITS&t;&t;&t;8 /* Maximum number of devices possible */
DECL|macro|NUM_TX_BUFFERS
mdefine_line|#define NUM_TX_BUFFERS&t;&t;&t;32 /* Number of transmit buffers */
DECL|macro|NUM_RX_BUFFERS
mdefine_line|#define NUM_RX_BUFFERS&t;&t;&t;32 /* Number of receive buffers */&t;
DECL|macro|TX_BUFF_MOD_MASK
mdefine_line|#define TX_BUFF_MOD_MASK         &t;31 /* (NUM_TX_BUFFERS -1) */
DECL|macro|RX_BUFF_MOD_MASK
mdefine_line|#define RX_BUFF_MOD_MASK         &t;31 /* (NUM_RX_BUFFERS -1) */
DECL|macro|NUM_TX_RING_DR
mdefine_line|#define NUM_TX_RING_DR&t;&t;&t;32  
DECL|macro|NUM_RX_RING_DR
mdefine_line|#define NUM_RX_RING_DR&t;&t;&t;32 
DECL|macro|TX_RING_DR_MOD_MASK
mdefine_line|#define TX_RING_DR_MOD_MASK         &t;31 /* (NUM_TX_RING_DR -1) */
DECL|macro|RX_RING_DR_MOD_MASK
mdefine_line|#define RX_RING_DR_MOD_MASK         &t;31 /* (NUM_RX_RING_DR -1) */
DECL|macro|MAX_FILTER_SIZE
mdefine_line|#define MAX_FILTER_SIZE&t;&t;&t;64 /* Maximum multicast address */ 
DECL|macro|AMD8111E_MIN_MTU
mdefine_line|#define AMD8111E_MIN_MTU&t; &t;60 &t;
DECL|macro|AMD8111E_MAX_MTU
mdefine_line|#define AMD8111E_MAX_MTU&t;&t;9000&t;&t;&t;
DECL|macro|PKT_BUFF_SZ
mdefine_line|#define PKT_BUFF_SZ&t;&t;&t;1536
DECL|macro|MIN_PKT_LEN
mdefine_line|#define MIN_PKT_LEN&t;&t;&t;60
DECL|macro|ETH_ADDR_LEN
mdefine_line|#define ETH_ADDR_LEN&t;&t;&t;6
DECL|macro|AMD8111E_TX_TIMEOUT
mdefine_line|#define  AMD8111E_TX_TIMEOUT&t;&t;(3 * HZ)/* 3 sec */
DECL|macro|SOFT_TIMER_FREQ
mdefine_line|#define SOFT_TIMER_FREQ &t;&t;0xBEBC  /* 0.5 sec */
DECL|macro|DELAY_TIMER_CONV
mdefine_line|#define DELAY_TIMER_CONV&t;&t;50    /* msec to 10 usec conversion.&n;&t;&t;&t;&t;&t;&t; Only 500 usec resolution */ &t;&t;&t;&t;&t;&t; 
DECL|macro|OPTION_VLAN_ENABLE
mdefine_line|#define OPTION_VLAN_ENABLE&t;&t;0x0001
DECL|macro|OPTION_JUMBO_ENABLE
mdefine_line|#define OPTION_JUMBO_ENABLE&t;&t;0x0002
DECL|macro|OPTION_MULTICAST_ENABLE
mdefine_line|#define OPTION_MULTICAST_ENABLE&t;&t;0x0004
DECL|macro|OPTION_WOL_ENABLE
mdefine_line|#define OPTION_WOL_ENABLE&t;&t;0x0008
DECL|macro|OPTION_WAKE_MAGIC_ENABLE
mdefine_line|#define OPTION_WAKE_MAGIC_ENABLE&t;0x0010
DECL|macro|OPTION_WAKE_PHY_ENABLE
mdefine_line|#define OPTION_WAKE_PHY_ENABLE&t;&t;0x0020
DECL|macro|OPTION_INTR_COAL_ENABLE
mdefine_line|#define OPTION_INTR_COAL_ENABLE&t;&t;0x0040
DECL|macro|OPTION_DYN_IPG_ENABLE
mdefine_line|#define OPTION_DYN_IPG_ENABLE&t;        0x0080
DECL|macro|PHY_REG_ADDR_MASK
mdefine_line|#define PHY_REG_ADDR_MASK&t;&t;0x1f
multiline_comment|/* ipg parameters */
DECL|macro|DEFAULT_IPG
mdefine_line|#define DEFAULT_IPG&t;&t;&t;0x60
DECL|macro|IFS1_DELTA
mdefine_line|#define IFS1_DELTA&t;&t;&t;36
DECL|macro|IPG_CONVERGE_JIFFIES
mdefine_line|#define&t;IPG_CONVERGE_JIFFIES (HZ/2)
DECL|macro|IPG_STABLE_TIME
mdefine_line|#define&t;IPG_STABLE_TIME&t;5
DECL|macro|MIN_IPG
mdefine_line|#define&t;MIN_IPG&t;96
DECL|macro|MAX_IPG
mdefine_line|#define&t;MAX_IPG&t;255
DECL|macro|IPG_STEP
mdefine_line|#define IPG_STEP&t;16
DECL|macro|CSTATE
mdefine_line|#define CSTATE  1 
DECL|macro|SSTATE
mdefine_line|#define SSTATE  2 
multiline_comment|/* Assume contoller gets data 10 times the maximum processing time */
DECL|macro|REPEAT_CNT
mdefine_line|#define  REPEAT_CNT&t;&t;&t;10; 
multiline_comment|/* amd8111e decriptor flag definitions */
r_typedef
r_enum
(brace
DECL|enumerator|OWN_BIT
id|OWN_BIT
op_assign
(paren
l_int|1
op_lshift
l_int|15
)paren
comma
DECL|enumerator|ADD_FCS_BIT
id|ADD_FCS_BIT
op_assign
(paren
l_int|1
op_lshift
l_int|13
)paren
comma
DECL|enumerator|LTINT_BIT
id|LTINT_BIT
op_assign
(paren
l_int|1
op_lshift
l_int|12
)paren
comma
DECL|enumerator|STP_BIT
id|STP_BIT
op_assign
(paren
l_int|1
op_lshift
l_int|9
)paren
comma
DECL|enumerator|ENP_BIT
id|ENP_BIT
op_assign
(paren
l_int|1
op_lshift
l_int|8
)paren
comma
DECL|enumerator|KILL_BIT
id|KILL_BIT
op_assign
(paren
l_int|1
op_lshift
l_int|6
)paren
comma
DECL|enumerator|TCC_VLAN_INSERT
id|TCC_VLAN_INSERT
op_assign
(paren
l_int|1
op_lshift
l_int|1
)paren
comma
DECL|enumerator|TCC_VLAN_REPLACE
id|TCC_VLAN_REPLACE
op_assign
(paren
l_int|1
op_lshift
l_int|1
)paren
op_or
(paren
l_int|1
op_lshift
l_int|0
)paren
comma
DECL|typedef|TX_FLAG_BITS
)brace
id|TX_FLAG_BITS
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|ERR_BIT
id|ERR_BIT
op_assign
(paren
l_int|1
op_lshift
l_int|14
)paren
comma
DECL|enumerator|FRAM_BIT
id|FRAM_BIT
op_assign
(paren
l_int|1
op_lshift
l_int|13
)paren
comma
DECL|enumerator|OFLO_BIT
id|OFLO_BIT
op_assign
(paren
l_int|1
op_lshift
l_int|12
)paren
comma
DECL|enumerator|CRC_BIT
id|CRC_BIT
op_assign
(paren
l_int|1
op_lshift
l_int|11
)paren
comma
DECL|enumerator|PAM_BIT
id|PAM_BIT
op_assign
(paren
l_int|1
op_lshift
l_int|6
)paren
comma
DECL|enumerator|LAFM_BIT
id|LAFM_BIT
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
comma
DECL|enumerator|BAM_BIT
id|BAM_BIT
op_assign
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
DECL|enumerator|TT_VLAN_TAGGED
id|TT_VLAN_TAGGED
op_assign
(paren
l_int|1
op_lshift
l_int|3
)paren
op_or
(paren
l_int|1
op_lshift
l_int|2
)paren
comma
multiline_comment|/* 0x000 */
DECL|enumerator|TT_PRTY_TAGGED
id|TT_PRTY_TAGGED
op_assign
(paren
l_int|1
op_lshift
l_int|3
)paren
comma
multiline_comment|/* 0x0008 */
DECL|typedef|RX_FLAG_BITS
)brace
id|RX_FLAG_BITS
suffix:semicolon
DECL|macro|RESET_RX_FLAGS
mdefine_line|#define RESET_RX_FLAGS&t;&t;0x0000
DECL|macro|TT_MASK
mdefine_line|#define TT_MASK&t;&t;&t;0x000c
DECL|macro|TCC_MASK
mdefine_line|#define TCC_MASK&t;&t;0x0003
multiline_comment|/* driver ioctl parameters */
DECL|macro|AMD8111E_REG_DUMP_LEN
mdefine_line|#define AMD8111E_REG_DUMP_LEN&t; 13*sizeof(u32) 
multiline_comment|/* crc generator constants */
DECL|macro|CRC32
mdefine_line|#define CRC32 0xedb88320
DECL|macro|INITCRC
mdefine_line|#define INITCRC 0xFFFFFFFF
multiline_comment|/* amd8111e desriptor format */
DECL|struct|amd8111e_tx_dr
r_struct
id|amd8111e_tx_dr
(brace
DECL|member|buff_count
id|u16
id|buff_count
suffix:semicolon
multiline_comment|/* Size of the buffer pointed by this descriptor */
DECL|member|tx_flags
id|u16
id|tx_flags
suffix:semicolon
DECL|member|tag_ctrl_info
id|u16
id|tag_ctrl_info
suffix:semicolon
DECL|member|tag_ctrl_cmd
id|u16
id|tag_ctrl_cmd
suffix:semicolon
DECL|member|buff_phy_addr
id|u32
id|buff_phy_addr
suffix:semicolon
DECL|member|reserved
id|u32
id|reserved
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|amd8111e_rx_dr
r_struct
id|amd8111e_rx_dr
(brace
DECL|member|reserved
id|u32
id|reserved
suffix:semicolon
DECL|member|msg_count
id|u16
id|msg_count
suffix:semicolon
multiline_comment|/* Received message len */
DECL|member|tag_ctrl_info
id|u16
id|tag_ctrl_info
suffix:semicolon
DECL|member|buff_count
id|u16
id|buff_count
suffix:semicolon
multiline_comment|/* Len of the buffer pointed by descriptor. */
DECL|member|rx_flags
id|u16
id|rx_flags
suffix:semicolon
DECL|member|buff_phy_addr
id|u32
id|buff_phy_addr
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|amd8111e_link_config
r_struct
id|amd8111e_link_config
(brace
DECL|macro|SPEED_INVALID
mdefine_line|#define SPEED_INVALID&t;&t;0xffff
DECL|macro|DUPLEX_INVALID
mdefine_line|#define DUPLEX_INVALID&t;&t;0xff
DECL|macro|AUTONEG_INVALID
mdefine_line|#define AUTONEG_INVALID&t;&t;0xff
DECL|member|orig_phy_option
r_int
r_int
id|orig_phy_option
suffix:semicolon
DECL|member|speed
id|u16
id|speed
suffix:semicolon
DECL|member|duplex
id|u8
id|duplex
suffix:semicolon
DECL|member|autoneg
id|u8
id|autoneg
suffix:semicolon
DECL|member|reserved
id|u8
id|reserved
suffix:semicolon
multiline_comment|/* 32bit alignment */
)brace
suffix:semicolon
DECL|enum|coal_type
r_enum
id|coal_type
(brace
DECL|enumerator|NO_COALESCE
id|NO_COALESCE
comma
DECL|enumerator|LOW_COALESCE
id|LOW_COALESCE
comma
DECL|enumerator|MEDIUM_COALESCE
id|MEDIUM_COALESCE
comma
DECL|enumerator|HIGH_COALESCE
id|HIGH_COALESCE
comma
)brace
suffix:semicolon
DECL|enum|coal_mode
r_enum
id|coal_mode
(brace
DECL|enumerator|RX_INTR_COAL
id|RX_INTR_COAL
comma
DECL|enumerator|TX_INTR_COAL
id|TX_INTR_COAL
comma
DECL|enumerator|DISABLE_COAL
id|DISABLE_COAL
comma
DECL|enumerator|ENABLE_COAL
id|ENABLE_COAL
comma
)brace
suffix:semicolon
DECL|macro|MAX_TIMEOUT
mdefine_line|#define MAX_TIMEOUT&t;40
DECL|macro|MAX_EVENT_COUNT
mdefine_line|#define MAX_EVENT_COUNT 31
DECL|struct|amd8111e_coalesce_conf
r_struct
id|amd8111e_coalesce_conf
(brace
DECL|member|rx_timeout
r_int
r_int
id|rx_timeout
suffix:semicolon
DECL|member|rx_event_count
r_int
r_int
id|rx_event_count
suffix:semicolon
DECL|member|rx_packets
r_int
r_int
id|rx_packets
suffix:semicolon
DECL|member|rx_prev_packets
r_int
r_int
id|rx_prev_packets
suffix:semicolon
DECL|member|rx_bytes
r_int
r_int
id|rx_bytes
suffix:semicolon
DECL|member|rx_prev_bytes
r_int
r_int
id|rx_prev_bytes
suffix:semicolon
DECL|member|rx_coal_type
r_int
r_int
id|rx_coal_type
suffix:semicolon
DECL|member|tx_timeout
r_int
r_int
id|tx_timeout
suffix:semicolon
DECL|member|tx_event_count
r_int
r_int
id|tx_event_count
suffix:semicolon
DECL|member|tx_packets
r_int
r_int
id|tx_packets
suffix:semicolon
DECL|member|tx_prev_packets
r_int
r_int
id|tx_prev_packets
suffix:semicolon
DECL|member|tx_bytes
r_int
r_int
id|tx_bytes
suffix:semicolon
DECL|member|tx_prev_bytes
r_int
r_int
id|tx_prev_bytes
suffix:semicolon
DECL|member|tx_coal_type
r_int
r_int
id|tx_coal_type
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ipg_info
r_struct
id|ipg_info
(brace
DECL|member|ipg_state
r_int
r_int
id|ipg_state
suffix:semicolon
DECL|member|ipg
r_int
r_int
id|ipg
suffix:semicolon
DECL|member|current_ipg
r_int
r_int
id|current_ipg
suffix:semicolon
DECL|member|col_cnt
r_int
r_int
id|col_cnt
suffix:semicolon
DECL|member|diff_col_cnt
r_int
r_int
id|diff_col_cnt
suffix:semicolon
DECL|member|timer_tick
r_int
r_int
id|timer_tick
suffix:semicolon
DECL|member|prev_ipg
r_int
r_int
id|prev_ipg
suffix:semicolon
DECL|member|ipg_timer
r_struct
id|timer_list
id|ipg_timer
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|amd8111e_priv
r_struct
id|amd8111e_priv
(brace
DECL|member|tx_ring
r_struct
id|amd8111e_tx_dr
op_star
id|tx_ring
suffix:semicolon
DECL|member|rx_ring
r_struct
id|amd8111e_rx_dr
op_star
id|rx_ring
suffix:semicolon
DECL|member|tx_ring_dma_addr
id|dma_addr_t
id|tx_ring_dma_addr
suffix:semicolon
multiline_comment|/* tx descriptor ring base address */
DECL|member|rx_ring_dma_addr
id|dma_addr_t
id|rx_ring_dma_addr
suffix:semicolon
multiline_comment|/* rx descriptor ring base address */
DECL|member|name
r_const
r_char
op_star
id|name
suffix:semicolon
DECL|member|pci_dev
r_struct
id|pci_dev
op_star
id|pci_dev
suffix:semicolon
multiline_comment|/* Ptr to the associated pci_dev */
DECL|member|amd8111e_net_dev
r_struct
id|net_device
op_star
id|amd8111e_net_dev
suffix:semicolon
multiline_comment|/* ptr to associated net_device */
multiline_comment|/* Transmit and recive skbs */
DECL|member|tx_skbuff
r_struct
id|sk_buff
op_star
id|tx_skbuff
(braket
id|NUM_TX_BUFFERS
)braket
suffix:semicolon
DECL|member|rx_skbuff
r_struct
id|sk_buff
op_star
id|rx_skbuff
(braket
id|NUM_RX_BUFFERS
)braket
suffix:semicolon
multiline_comment|/* Transmit and receive dma mapped addr */
DECL|member|tx_dma_addr
id|dma_addr_t
id|tx_dma_addr
(braket
id|NUM_TX_BUFFERS
)braket
suffix:semicolon
DECL|member|rx_dma_addr
id|dma_addr_t
id|rx_dma_addr
(braket
id|NUM_RX_BUFFERS
)braket
suffix:semicolon
multiline_comment|/* Reg memory mapped address */
DECL|member|mmio
r_void
id|__iomem
op_star
id|mmio
suffix:semicolon
DECL|member|lock
id|spinlock_t
id|lock
suffix:semicolon
multiline_comment|/* Guard lock */
DECL|member|rx_idx
DECL|member|tx_idx
r_int
r_int
id|rx_idx
comma
id|tx_idx
suffix:semicolon
multiline_comment|/* The next free ring entry */
DECL|member|tx_complete_idx
r_int
r_int
id|tx_complete_idx
suffix:semicolon
DECL|member|tx_ring_complete_idx
r_int
r_int
id|tx_ring_complete_idx
suffix:semicolon
DECL|member|tx_ring_idx
r_int
r_int
id|tx_ring_idx
suffix:semicolon
DECL|member|rx_buff_len
r_int
r_int
id|rx_buff_len
suffix:semicolon
multiline_comment|/* Buffer length of rx buffers */
DECL|member|options
r_int
id|options
suffix:semicolon
multiline_comment|/* Options enabled/disabled for the device */
DECL|member|ext_phy_option
r_int
r_int
id|ext_phy_option
suffix:semicolon
DECL|member|ext_phy_addr
r_int
id|ext_phy_addr
suffix:semicolon
DECL|member|ext_phy_id
id|u32
id|ext_phy_id
suffix:semicolon
DECL|member|link_config
r_struct
id|amd8111e_link_config
id|link_config
suffix:semicolon
DECL|member|pm_cap
r_int
id|pm_cap
suffix:semicolon
DECL|member|next
r_struct
id|net_device
op_star
id|next
suffix:semicolon
DECL|member|mii
r_int
id|mii
suffix:semicolon
DECL|member|mii_if
r_struct
id|mii_if_info
id|mii_if
suffix:semicolon
macro_line|#if AMD8111E_VLAN_TAG_USED
DECL|member|vlgrp
r_struct
id|vlan_group
op_star
id|vlgrp
suffix:semicolon
macro_line|#endif&t;
DECL|member|opened
r_char
id|opened
suffix:semicolon
DECL|member|stats
r_struct
id|net_device_stats
id|stats
suffix:semicolon
DECL|member|drv_rx_errors
r_int
r_int
id|drv_rx_errors
suffix:semicolon
DECL|member|mc_list
r_struct
id|dev_mc_list
op_star
id|mc_list
suffix:semicolon
DECL|member|coal_conf
r_struct
id|amd8111e_coalesce_conf
id|coal_conf
suffix:semicolon
DECL|member|ipg_data
r_struct
id|ipg_info
id|ipg_data
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* kernel provided writeq does not write 64 bits into the amd8111e device register instead writes only higher 32bits data into lower 32bits of the register.&n;BUG? */
DECL|macro|amd8111e_writeq
mdefine_line|#define  amd8111e_writeq(_UlData,_memMap)   &bslash;&n;&t;&t;writel(*(u32*)(&amp;_UlData), _memMap);&t;&bslash;&n;&t;&t;writel(*(u32*)((u8*)(&amp;_UlData)+4), _memMap+4)&t;
multiline_comment|/* maps the external speed options to internal value */
r_typedef
r_enum
(brace
DECL|enumerator|SPEED_AUTONEG
id|SPEED_AUTONEG
comma
DECL|enumerator|SPEED10_HALF
id|SPEED10_HALF
comma
DECL|enumerator|SPEED10_FULL
id|SPEED10_FULL
comma
DECL|enumerator|SPEED100_HALF
id|SPEED100_HALF
comma
DECL|enumerator|SPEED100_FULL
id|SPEED100_FULL
comma
DECL|typedef|EXT_PHY_OPTION
)brace
id|EXT_PHY_OPTION
suffix:semicolon
DECL|variable|card_idx
r_static
r_int
id|card_idx
suffix:semicolon
DECL|variable|speed_duplex
r_static
r_int
id|speed_duplex
(braket
id|MAX_UNITS
)braket
op_assign
(brace
l_int|0
comma
)brace
suffix:semicolon
DECL|variable|coalesce
r_static
r_int
id|coalesce
(braket
id|MAX_UNITS
)braket
op_assign
(brace
l_int|1
comma
l_int|1
comma
l_int|1
comma
l_int|1
comma
l_int|1
comma
l_int|1
comma
l_int|1
comma
l_int|1
)brace
suffix:semicolon
DECL|variable|dynamic_ipg
r_static
r_int
id|dynamic_ipg
(braket
id|MAX_UNITS
)braket
op_assign
(brace
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)brace
suffix:semicolon
DECL|variable|chip_version
r_static
r_int
r_int
id|chip_version
suffix:semicolon
macro_line|#endif /* _AMD8111E_H */
eof
