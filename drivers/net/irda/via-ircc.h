multiline_comment|/*********************************************************************&n; *                &n; * Filename:      via-ircc.h&n; * Version:       1.0&n; * Description:   Driver for the VIA VT8231/VT8233 IrDA chipsets&n; * Author:        VIA Technologies, inc&n; * Date  :&t;  08/06/2003&n;&n;Copyright (c) 1998-2003 VIA Technologies, Inc.&n;&n;This program is free software; you can redistribute it and/or modify it under&n;the terms of the GNU General Public License as published by the Free Software&n;Foundation; either version 2, or (at your option) any later version.&n;&n;This program is distributed in the hope that it will be useful, but WITHOUT&n;ANY WARRANTIES OR REPRESENTATIONS; without even the implied warranty of&n;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&n;See the GNU General Public License for more details.&n;&n;You should have received a copy of the GNU General Public License along with&n;this program; if not, write to the Free Software Foundation, Inc.,&n;59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&n;&n; * Comment:&n; * jul/08/2002 : Rx buffer length should use Rx ring ptr.&t;&n; * Oct/28/2002 : Add SB id for 3147 and 3177.&t;&n; * jul/09/2002 : only implement two kind of dongle currently.&n; * Oct/02/2002 : work on VT8231 and VT8233 .&n; * Aug/06/2003 : change driver format to pci driver .&n; ********************************************************************/
macro_line|#ifndef via_IRCC_H
DECL|macro|via_IRCC_H
mdefine_line|#define via_IRCC_H
macro_line|#include &lt;linux/time.h&gt;
macro_line|#include &lt;linux/spinlock.h&gt;
macro_line|#include &lt;linux/pm.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;asm/io.h&gt;
DECL|macro|MAX_TX_WINDOW
mdefine_line|#define MAX_TX_WINDOW 7
DECL|macro|MAX_RX_WINDOW
mdefine_line|#define MAX_RX_WINDOW 7
DECL|struct|st_fifo_entry
r_struct
id|st_fifo_entry
(brace
DECL|member|status
r_int
id|status
suffix:semicolon
DECL|member|len
r_int
id|len
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|st_fifo
r_struct
id|st_fifo
(brace
DECL|member|entries
r_struct
id|st_fifo_entry
id|entries
(braket
id|MAX_RX_WINDOW
op_plus
l_int|2
)braket
suffix:semicolon
DECL|member|pending_bytes
r_int
id|pending_bytes
suffix:semicolon
DECL|member|head
r_int
id|head
suffix:semicolon
DECL|member|tail
r_int
id|tail
suffix:semicolon
DECL|member|len
r_int
id|len
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|frame_cb
r_struct
id|frame_cb
(brace
DECL|member|start
r_void
op_star
id|start
suffix:semicolon
multiline_comment|/* Start of frame in DMA mem */
DECL|member|len
r_int
id|len
suffix:semicolon
multiline_comment|/* Lenght of frame in DMA mem */
)brace
suffix:semicolon
DECL|struct|tx_fifo
r_struct
id|tx_fifo
(brace
DECL|member|queue
r_struct
id|frame_cb
id|queue
(braket
id|MAX_TX_WINDOW
op_plus
l_int|2
)braket
suffix:semicolon
multiline_comment|/* Info about frames in queue */
DECL|member|ptr
r_int
id|ptr
suffix:semicolon
multiline_comment|/* Currently being sent */
DECL|member|len
r_int
id|len
suffix:semicolon
multiline_comment|/* Lenght of queue */
DECL|member|free
r_int
id|free
suffix:semicolon
multiline_comment|/* Next free slot */
DECL|member|tail
r_void
op_star
id|tail
suffix:semicolon
multiline_comment|/* Next free start in DMA mem */
)brace
suffix:semicolon
DECL|struct|eventflag
r_struct
id|eventflag
singleline_comment|// for keeping track of Interrupt Events
(brace
singleline_comment|//--------tx part
DECL|member|TxFIFOUnderRun
r_int
r_char
id|TxFIFOUnderRun
suffix:semicolon
DECL|member|EOMessage
r_int
r_char
id|EOMessage
suffix:semicolon
DECL|member|TxFIFOReady
r_int
r_char
id|TxFIFOReady
suffix:semicolon
DECL|member|EarlyEOM
r_int
r_char
id|EarlyEOM
suffix:semicolon
singleline_comment|//--------rx part
DECL|member|PHYErr
r_int
r_char
id|PHYErr
suffix:semicolon
DECL|member|CRCErr
r_int
r_char
id|CRCErr
suffix:semicolon
DECL|member|RxFIFOOverRun
r_int
r_char
id|RxFIFOOverRun
suffix:semicolon
DECL|member|EOPacket
r_int
r_char
id|EOPacket
suffix:semicolon
DECL|member|RxAvail
r_int
r_char
id|RxAvail
suffix:semicolon
DECL|member|TooLargePacket
r_int
r_char
id|TooLargePacket
suffix:semicolon
DECL|member|SIRBad
r_int
r_char
id|SIRBad
suffix:semicolon
singleline_comment|//--------unknown
DECL|member|Unknown
r_int
r_char
id|Unknown
suffix:semicolon
singleline_comment|//----------
DECL|member|TimeOut
r_int
r_char
id|TimeOut
suffix:semicolon
DECL|member|RxDMATC
r_int
r_char
id|RxDMATC
suffix:semicolon
DECL|member|TxDMATC
r_int
r_char
id|TxDMATC
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Private data for each instance */
DECL|struct|via_ircc_cb
r_struct
id|via_ircc_cb
(brace
DECL|member|st_fifo
r_struct
id|st_fifo
id|st_fifo
suffix:semicolon
multiline_comment|/* Info about received frames */
DECL|member|tx_fifo
r_struct
id|tx_fifo
id|tx_fifo
suffix:semicolon
multiline_comment|/* Info about frames to be transmitted */
DECL|member|netdev
r_struct
id|net_device
op_star
id|netdev
suffix:semicolon
multiline_comment|/* Yes! we are some kind of netdevice */
DECL|member|stats
r_struct
id|net_device_stats
id|stats
suffix:semicolon
DECL|member|irlap
r_struct
id|irlap_cb
op_star
id|irlap
suffix:semicolon
multiline_comment|/* The link layer we are binded to */
DECL|member|qos
r_struct
id|qos_info
id|qos
suffix:semicolon
multiline_comment|/* QoS capabilities for this device */
DECL|member|io
id|chipio_t
id|io
suffix:semicolon
multiline_comment|/* IrDA controller information */
DECL|member|tx_buff
id|iobuff_t
id|tx_buff
suffix:semicolon
multiline_comment|/* Transmit buffer */
DECL|member|rx_buff
id|iobuff_t
id|rx_buff
suffix:semicolon
multiline_comment|/* Receive buffer */
DECL|member|tx_buff_dma
id|dma_addr_t
id|tx_buff_dma
suffix:semicolon
DECL|member|rx_buff_dma
id|dma_addr_t
id|rx_buff_dma
suffix:semicolon
DECL|member|ier
id|__u8
id|ier
suffix:semicolon
multiline_comment|/* Interrupt enable register */
DECL|member|stamp
r_struct
id|timeval
id|stamp
suffix:semicolon
DECL|member|now
r_struct
id|timeval
id|now
suffix:semicolon
DECL|member|lock
id|spinlock_t
id|lock
suffix:semicolon
multiline_comment|/* For serializing operations */
DECL|member|flags
id|__u32
id|flags
suffix:semicolon
multiline_comment|/* Interface flags */
DECL|member|new_speed
id|__u32
id|new_speed
suffix:semicolon
DECL|member|index
r_int
id|index
suffix:semicolon
multiline_comment|/* Instance index */
DECL|member|EventFlag
r_struct
id|eventflag
id|EventFlag
suffix:semicolon
DECL|member|dev
r_struct
id|pm_dev
op_star
id|dev
suffix:semicolon
DECL|member|chip_id
r_int
r_int
id|chip_id
suffix:semicolon
multiline_comment|/* to remember chip id */
DECL|member|RetryCount
r_int
r_int
id|RetryCount
suffix:semicolon
DECL|member|RxDataReady
r_int
r_int
id|RxDataReady
suffix:semicolon
DECL|member|RxLastCount
r_int
r_int
id|RxLastCount
suffix:semicolon
)brace
suffix:semicolon
singleline_comment|//---------I=Infrared,  H=Host, M=Misc, T=Tx, R=Rx, ST=Status,
singleline_comment|//         CF=Config, CT=Control, L=Low, H=High, C=Count
DECL|macro|I_CF_L_0
mdefine_line|#define  I_CF_L_0  &t;&t;0x10
DECL|macro|I_CF_H_0
mdefine_line|#define  I_CF_H_0&t;&t;0x11
DECL|macro|I_SIR_BOF
mdefine_line|#define  I_SIR_BOF&t;&t;0x12
DECL|macro|I_SIR_EOF
mdefine_line|#define  I_SIR_EOF&t;&t;0x13
DECL|macro|I_ST_CT_0
mdefine_line|#define  I_ST_CT_0&t;&t;0x15
DECL|macro|I_ST_L_1
mdefine_line|#define  I_ST_L_1&t;&t;0x16
DECL|macro|I_ST_H_1
mdefine_line|#define  I_ST_H_1&t;&t;0x17
DECL|macro|I_CF_L_1
mdefine_line|#define  I_CF_L_1&t;&t;0x18
DECL|macro|I_CF_H_1
mdefine_line|#define  I_CF_H_1&t;&t;0x19
DECL|macro|I_CF_L_2
mdefine_line|#define  I_CF_L_2&t;&t;0x1a
DECL|macro|I_CF_H_2
mdefine_line|#define  I_CF_H_2&t;&t;0x1b
DECL|macro|I_CF_3
mdefine_line|#define  I_CF_3&t;&t;0x1e
DECL|macro|H_CT
mdefine_line|#define  H_CT&t;&t;&t;0x20
DECL|macro|H_ST
mdefine_line|#define  H_ST&t;&t;&t;0x21
DECL|macro|M_CT
mdefine_line|#define  M_CT&t;&t;&t;0x22
DECL|macro|TX_CT_1
mdefine_line|#define  TX_CT_1&t;&t;0x23
DECL|macro|TX_CT_2
mdefine_line|#define  TX_CT_2&t;&t;0x24
DECL|macro|TX_ST
mdefine_line|#define  TX_ST&t;&t;&t;0x25
DECL|macro|RX_CT
mdefine_line|#define  RX_CT&t;&t;&t;0x26
DECL|macro|RX_ST
mdefine_line|#define  RX_ST&t;&t;&t;0x27
DECL|macro|RESET
mdefine_line|#define  RESET&t;&t;&t;0x28
DECL|macro|P_ADDR
mdefine_line|#define  P_ADDR&t;&t;0x29
DECL|macro|RX_C_L
mdefine_line|#define  RX_C_L&t;&t;0x2a
DECL|macro|RX_C_H
mdefine_line|#define  RX_C_H&t;&t;0x2b
DECL|macro|RX_P_L
mdefine_line|#define  RX_P_L&t;&t;0x2c
DECL|macro|RX_P_H
mdefine_line|#define  RX_P_H&t;&t;0x2d
DECL|macro|TX_C_L
mdefine_line|#define  TX_C_L&t;&t;0x2e
DECL|macro|TX_C_H
mdefine_line|#define  TX_C_H&t;&t;0x2f
DECL|macro|TIMER
mdefine_line|#define  TIMER         &t;0x32
DECL|macro|I_CF_4
mdefine_line|#define  I_CF_4         &t;0x33
DECL|macro|I_T_C_L
mdefine_line|#define  I_T_C_L&t;&t;0x34
DECL|macro|I_T_C_H
mdefine_line|#define  I_T_C_H&t;&t;0x35
DECL|macro|VERSION
mdefine_line|#define  VERSION&t;&t;0x3f
singleline_comment|//-------------------------------
DECL|macro|StartAddr
mdefine_line|#define StartAddr &t;0x10&t;
singleline_comment|// the first register address
DECL|macro|EndAddr
mdefine_line|#define EndAddr &t;0x3f&t;
singleline_comment|// the last register address
DECL|macro|GetBit
mdefine_line|#define GetBit(val,bit)  val = (unsigned char) ((val&gt;&gt;bit) &amp; 0x1)
singleline_comment|// Returns the bit
DECL|macro|SetBit
mdefine_line|#define SetBit(val,bit)  val= (unsigned char ) (val | (0x1 &lt;&lt; bit))
singleline_comment|// Sets bit to 1
DECL|macro|ResetBit
mdefine_line|#define ResetBit(val,bit) val= (unsigned char ) (val &amp; ~(0x1 &lt;&lt; bit))
singleline_comment|// Sets bit to 0
DECL|macro|OFF
mdefine_line|#define OFF   0
DECL|macro|ON
mdefine_line|#define ON   1
DECL|macro|DMA_TX_MODE
mdefine_line|#define DMA_TX_MODE   0x08
DECL|macro|DMA_RX_MODE
mdefine_line|#define DMA_RX_MODE   0x04
DECL|macro|DMA1
mdefine_line|#define DMA1   0
DECL|macro|DMA2
mdefine_line|#define DMA2   0xc0
DECL|macro|MASK1
mdefine_line|#define MASK1   DMA1+0x0a
DECL|macro|MASK2
mdefine_line|#define MASK2   DMA2+0x14
DECL|macro|Clk_bit
mdefine_line|#define Clk_bit 0x40
DECL|macro|Tx_bit
mdefine_line|#define Tx_bit 0x01
DECL|macro|Rd_Valid
mdefine_line|#define Rd_Valid 0x08
DECL|macro|RxBit
mdefine_line|#define RxBit 0x08
DECL|function|DisableDmaChannel
r_static
r_void
id|DisableDmaChannel
c_func
(paren
r_int
r_int
id|channel
)paren
(brace
r_switch
c_cond
(paren
id|channel
)paren
(brace
singleline_comment|// 8 Bit DMA channels DMAC1
r_case
l_int|0
suffix:colon
id|outb
c_func
(paren
l_int|4
comma
id|MASK1
)paren
suffix:semicolon
singleline_comment|//mask channel 0
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
id|outb
c_func
(paren
l_int|5
comma
id|MASK1
)paren
suffix:semicolon
singleline_comment|//Mask channel 1
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|outb
c_func
(paren
l_int|6
comma
id|MASK1
)paren
suffix:semicolon
singleline_comment|//Mask channel 2
r_break
suffix:semicolon
r_case
l_int|3
suffix:colon
id|outb
c_func
(paren
l_int|7
comma
id|MASK1
)paren
suffix:semicolon
singleline_comment|//Mask channel 3
r_break
suffix:semicolon
r_case
l_int|5
suffix:colon
id|outb
c_func
(paren
l_int|5
comma
id|MASK2
)paren
suffix:semicolon
singleline_comment|//Mask channel 5
r_break
suffix:semicolon
r_case
l_int|6
suffix:colon
id|outb
c_func
(paren
l_int|6
comma
id|MASK2
)paren
suffix:semicolon
singleline_comment|//Mask channel 6
r_break
suffix:semicolon
r_case
l_int|7
suffix:colon
id|outb
c_func
(paren
l_int|7
comma
id|MASK2
)paren
suffix:semicolon
singleline_comment|//Mask channel 7
r_break
suffix:semicolon
r_default
suffix:colon
r_break
suffix:semicolon
)brace
suffix:semicolon
singleline_comment|//Switch
)brace
DECL|function|ReadLPCReg
r_static
r_int
r_char
id|ReadLPCReg
c_func
(paren
r_int
id|iRegNum
)paren
(brace
r_int
r_char
id|iVal
suffix:semicolon
id|outb
c_func
(paren
l_int|0x87
comma
l_int|0x2e
)paren
suffix:semicolon
id|outb
c_func
(paren
l_int|0x87
comma
l_int|0x2e
)paren
suffix:semicolon
id|outb
c_func
(paren
id|iRegNum
comma
l_int|0x2e
)paren
suffix:semicolon
id|iVal
op_assign
id|inb
c_func
(paren
l_int|0x2f
)paren
suffix:semicolon
id|outb
c_func
(paren
l_int|0xaa
comma
l_int|0x2e
)paren
suffix:semicolon
r_return
id|iVal
suffix:semicolon
)brace
DECL|function|WriteLPCReg
r_static
r_void
id|WriteLPCReg
c_func
(paren
r_int
id|iRegNum
comma
r_int
r_char
id|iVal
)paren
(brace
id|outb
c_func
(paren
l_int|0x87
comma
l_int|0x2e
)paren
suffix:semicolon
id|outb
c_func
(paren
l_int|0x87
comma
l_int|0x2e
)paren
suffix:semicolon
id|outb
c_func
(paren
id|iRegNum
comma
l_int|0x2e
)paren
suffix:semicolon
id|outb
c_func
(paren
id|iVal
comma
l_int|0x2f
)paren
suffix:semicolon
id|outb
c_func
(paren
l_int|0xAA
comma
l_int|0x2e
)paren
suffix:semicolon
)brace
DECL|function|ReadReg
r_static
id|__u8
id|ReadReg
c_func
(paren
r_int
r_int
id|BaseAddr
comma
r_int
id|iRegNum
)paren
(brace
r_return
(paren
(paren
id|__u8
)paren
id|inb
c_func
(paren
id|BaseAddr
op_plus
id|iRegNum
)paren
)paren
suffix:semicolon
)brace
DECL|function|WriteReg
r_static
r_void
id|WriteReg
c_func
(paren
r_int
r_int
id|BaseAddr
comma
r_int
id|iRegNum
comma
r_int
r_char
id|iVal
)paren
(brace
id|outb
c_func
(paren
id|iVal
comma
id|BaseAddr
op_plus
id|iRegNum
)paren
suffix:semicolon
)brace
DECL|function|WriteRegBit
r_static
r_int
id|WriteRegBit
c_func
(paren
r_int
r_int
id|BaseAddr
comma
r_int
r_char
id|RegNum
comma
r_int
r_char
id|BitPos
comma
r_int
r_char
id|value
)paren
(brace
id|__u8
id|Rtemp
comma
id|Wtemp
suffix:semicolon
r_if
c_cond
(paren
id|BitPos
OG
l_int|7
)paren
(brace
r_return
op_minus
l_int|1
suffix:semicolon
)brace
r_if
c_cond
(paren
(paren
id|RegNum
OL
id|StartAddr
)paren
op_logical_or
(paren
id|RegNum
OG
id|EndAddr
)paren
)paren
r_return
op_minus
l_int|1
suffix:semicolon
id|Rtemp
op_assign
id|ReadReg
c_func
(paren
id|BaseAddr
comma
id|RegNum
)paren
suffix:semicolon
r_if
c_cond
(paren
id|value
op_eq
l_int|0
)paren
id|Wtemp
op_assign
id|ResetBit
c_func
(paren
id|Rtemp
comma
id|BitPos
)paren
suffix:semicolon
r_else
(brace
r_if
c_cond
(paren
id|value
op_eq
l_int|1
)paren
id|Wtemp
op_assign
id|SetBit
c_func
(paren
id|Rtemp
comma
id|BitPos
)paren
suffix:semicolon
r_else
r_return
op_minus
l_int|1
suffix:semicolon
)brace
id|WriteReg
c_func
(paren
id|BaseAddr
comma
id|RegNum
comma
id|Wtemp
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|CheckRegBit
r_static
id|__u8
id|CheckRegBit
c_func
(paren
r_int
r_int
id|BaseAddr
comma
r_int
r_char
id|RegNum
comma
r_int
r_char
id|BitPos
)paren
(brace
id|__u8
id|temp
suffix:semicolon
r_if
c_cond
(paren
id|BitPos
OG
l_int|7
)paren
r_return
l_int|0xff
suffix:semicolon
r_if
c_cond
(paren
(paren
id|RegNum
OL
id|StartAddr
)paren
op_logical_or
(paren
id|RegNum
OG
id|EndAddr
)paren
)paren
(brace
singleline_comment|//     printf(&quot;what is the register %x!&bslash;n&quot;,RegNum);
)brace
id|temp
op_assign
id|ReadReg
c_func
(paren
id|BaseAddr
comma
id|RegNum
)paren
suffix:semicolon
r_return
id|GetBit
c_func
(paren
id|temp
comma
id|BitPos
)paren
suffix:semicolon
)brace
DECL|function|SetMaxRxPacketSize
r_static
r_void
id|SetMaxRxPacketSize
c_func
(paren
id|__u16
id|iobase
comma
id|__u16
id|size
)paren
(brace
id|__u16
id|low
comma
id|high
suffix:semicolon
r_if
c_cond
(paren
(paren
id|size
op_amp
l_int|0xe000
)paren
op_eq
l_int|0
)paren
(brace
id|low
op_assign
id|size
op_amp
l_int|0x00ff
suffix:semicolon
id|high
op_assign
(paren
id|size
op_amp
l_int|0x1f00
)paren
op_rshift
l_int|8
suffix:semicolon
id|WriteReg
c_func
(paren
id|iobase
comma
id|I_CF_L_2
comma
id|low
)paren
suffix:semicolon
id|WriteReg
c_func
(paren
id|iobase
comma
id|I_CF_H_2
comma
id|high
)paren
suffix:semicolon
)brace
)brace
singleline_comment|//for both Rx and Tx
DECL|function|SetFIFO
r_static
r_void
id|SetFIFO
c_func
(paren
id|__u16
id|iobase
comma
id|__u16
id|value
)paren
(brace
r_switch
c_cond
(paren
id|value
)paren
(brace
r_case
l_int|128
suffix:colon
id|WriteRegBit
c_func
(paren
id|iobase
comma
l_int|0x11
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
id|WriteRegBit
c_func
(paren
id|iobase
comma
l_int|0x11
comma
l_int|7
comma
l_int|1
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|64
suffix:colon
id|WriteRegBit
c_func
(paren
id|iobase
comma
l_int|0x11
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
id|WriteRegBit
c_func
(paren
id|iobase
comma
l_int|0x11
comma
l_int|7
comma
l_int|0
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|32
suffix:colon
id|WriteRegBit
c_func
(paren
id|iobase
comma
l_int|0x11
comma
l_int|0
comma
l_int|1
)paren
suffix:semicolon
id|WriteRegBit
c_func
(paren
id|iobase
comma
l_int|0x11
comma
l_int|7
comma
l_int|0
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|WriteRegBit
c_func
(paren
id|iobase
comma
l_int|0x11
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
id|WriteRegBit
c_func
(paren
id|iobase
comma
l_int|0x11
comma
l_int|7
comma
l_int|0
)paren
suffix:semicolon
)brace
)brace
DECL|macro|CRC16
mdefine_line|#define CRC16(BaseAddr,val)         WriteRegBit(BaseAddr,I_CF_L_0,7,val)&t;
singleline_comment|//0 for 32 CRC
multiline_comment|/*&n;#define SetVFIR(BaseAddr,val)       WriteRegBit(BaseAddr,I_CF_H_0,5,val)&n;#define SetFIR(BaseAddr,val)        WriteRegBit(BaseAddr,I_CF_L_0,6,val)&n;#define SetMIR(BaseAddr,val)        WriteRegBit(BaseAddr,I_CF_L_0,5,val)&n;#define SetSIR(BaseAddr,val)        WriteRegBit(BaseAddr,I_CF_L_0,4,val)&n;*/
DECL|macro|SIRFilter
mdefine_line|#define SIRFilter(BaseAddr,val)     WriteRegBit(BaseAddr,I_CF_L_0,3,val)
DECL|macro|Filter
mdefine_line|#define Filter(BaseAddr,val)        WriteRegBit(BaseAddr,I_CF_L_0,2,val)
DECL|macro|InvertTX
mdefine_line|#define InvertTX(BaseAddr,val)      WriteRegBit(BaseAddr,I_CF_L_0,1,val)
DECL|macro|InvertRX
mdefine_line|#define InvertRX(BaseAddr,val)      WriteRegBit(BaseAddr,I_CF_L_0,0,val)
singleline_comment|//****************************I_CF_H_0
DECL|macro|EnableTX
mdefine_line|#define EnableTX(BaseAddr,val)      WriteRegBit(BaseAddr,I_CF_H_0,4,val)
DECL|macro|EnableRX
mdefine_line|#define EnableRX(BaseAddr,val)      WriteRegBit(BaseAddr,I_CF_H_0,3,val)
DECL|macro|EnableDMA
mdefine_line|#define EnableDMA(BaseAddr,val)     WriteRegBit(BaseAddr,I_CF_H_0,2,val)
DECL|macro|SIRRecvAny
mdefine_line|#define SIRRecvAny(BaseAddr,val)    WriteRegBit(BaseAddr,I_CF_H_0,1,val)
DECL|macro|DiableTrans
mdefine_line|#define DiableTrans(BaseAddr,val)   WriteRegBit(BaseAddr,I_CF_H_0,0,val)
singleline_comment|//***************************I_SIR_BOF,I_SIR_EOF
DECL|macro|SetSIRBOF
mdefine_line|#define SetSIRBOF(BaseAddr,val)     WriteReg(BaseAddr,I_SIR_BOF,val)
DECL|macro|SetSIREOF
mdefine_line|#define SetSIREOF(BaseAddr,val)     WriteReg(BaseAddr,I_SIR_EOF,val)
DECL|macro|GetSIRBOF
mdefine_line|#define GetSIRBOF(BaseAddr)        ReadReg(BaseAddr,I_SIR_BOF)
DECL|macro|GetSIREOF
mdefine_line|#define GetSIREOF(BaseAddr)        ReadReg(BaseAddr,I_SIR_EOF)
singleline_comment|//*******************I_ST_CT_0
DECL|macro|EnPhys
mdefine_line|#define EnPhys(BaseAddr,val)   WriteRegBit(BaseAddr,I_ST_CT_0,7,val)
DECL|macro|IsModeError
mdefine_line|#define IsModeError(BaseAddr) CheckRegBit(BaseAddr,I_ST_CT_0,6)&t;
singleline_comment|//RO
DECL|macro|IsVFIROn
mdefine_line|#define IsVFIROn(BaseAddr)     CheckRegBit(BaseAddr,0x14,0)&t;
singleline_comment|//RO for VT1211 only
DECL|macro|IsFIROn
mdefine_line|#define IsFIROn(BaseAddr)     CheckRegBit(BaseAddr,I_ST_CT_0,5)&t;
singleline_comment|//RO
DECL|macro|IsMIROn
mdefine_line|#define IsMIROn(BaseAddr)     CheckRegBit(BaseAddr,I_ST_CT_0,4)&t;
singleline_comment|//RO
DECL|macro|IsSIROn
mdefine_line|#define IsSIROn(BaseAddr)     CheckRegBit(BaseAddr,I_ST_CT_0,3)&t;
singleline_comment|//RO
DECL|macro|IsEnableTX
mdefine_line|#define IsEnableTX(BaseAddr)  CheckRegBit(BaseAddr,I_ST_CT_0,2)&t;
singleline_comment|//RO
DECL|macro|IsEnableRX
mdefine_line|#define IsEnableRX(BaseAddr)  CheckRegBit(BaseAddr,I_ST_CT_0,1)&t;
singleline_comment|//RO
DECL|macro|Is16CRC
mdefine_line|#define Is16CRC(BaseAddr)     CheckRegBit(BaseAddr,I_ST_CT_0,0)&t;
singleline_comment|//RO
singleline_comment|//***************************I_CF_3
DECL|macro|DisableAdjacentPulseWidth
mdefine_line|#define DisableAdjacentPulseWidth(BaseAddr,val) WriteRegBit(BaseAddr,I_CF_3,5,val)&t;
singleline_comment|//1 disable
DECL|macro|DisablePulseWidthAdjust
mdefine_line|#define DisablePulseWidthAdjust(BaseAddr,val)   WriteRegBit(BaseAddr,I_CF_3,4,val)&t;
singleline_comment|//1 disable
DECL|macro|UseOneRX
mdefine_line|#define UseOneRX(BaseAddr,val)                  WriteRegBit(BaseAddr,I_CF_3,1,val)&t;
singleline_comment|//0 use two RX
DECL|macro|SlowIRRXLowActive
mdefine_line|#define SlowIRRXLowActive(BaseAddr,val)         WriteRegBit(BaseAddr,I_CF_3,0,val)&t;
singleline_comment|//0 show RX high=1 in SIR
singleline_comment|//***************************H_CT
DECL|macro|EnAllInt
mdefine_line|#define EnAllInt(BaseAddr,val)   WriteRegBit(BaseAddr,H_CT,7,val)
DECL|macro|TXStart
mdefine_line|#define TXStart(BaseAddr,val)    WriteRegBit(BaseAddr,H_CT,6,val)
DECL|macro|RXStart
mdefine_line|#define RXStart(BaseAddr,val)    WriteRegBit(BaseAddr,H_CT,5,val)
DECL|macro|ClearRXInt
mdefine_line|#define ClearRXInt(BaseAddr,val)   WriteRegBit(BaseAddr,H_CT,4,val)&t;
singleline_comment|// 1 clear
singleline_comment|//*****************H_ST
DECL|macro|IsRXInt
mdefine_line|#define IsRXInt(BaseAddr)           CheckRegBit(BaseAddr,H_ST,4)
DECL|macro|GetIntIndentify
mdefine_line|#define GetIntIndentify(BaseAddr)   ((ReadReg(BaseAddr,H_ST)&amp;0xf1) &gt;&gt;1)
DECL|macro|IsHostBusy
mdefine_line|#define IsHostBusy(BaseAddr)        CheckRegBit(BaseAddr,H_ST,0)
DECL|macro|GetHostStatus
mdefine_line|#define GetHostStatus(BaseAddr)     ReadReg(BaseAddr,H_ST)&t;
singleline_comment|//RO
singleline_comment|//**************************M_CT
DECL|macro|EnTXDMA
mdefine_line|#define EnTXDMA(BaseAddr,val)         WriteRegBit(BaseAddr,M_CT,7,val)
DECL|macro|EnRXDMA
mdefine_line|#define EnRXDMA(BaseAddr,val)         WriteRegBit(BaseAddr,M_CT,6,val)
DECL|macro|SwapDMA
mdefine_line|#define SwapDMA(BaseAddr,val)         WriteRegBit(BaseAddr,M_CT,5,val)
DECL|macro|EnInternalLoop
mdefine_line|#define EnInternalLoop(BaseAddr,val)  WriteRegBit(BaseAddr,M_CT,4,val)
DECL|macro|EnExternalLoop
mdefine_line|#define EnExternalLoop(BaseAddr,val)  WriteRegBit(BaseAddr,M_CT,3,val)
singleline_comment|//**************************TX_CT_1
DECL|macro|EnTXFIFOHalfLevelInt
mdefine_line|#define EnTXFIFOHalfLevelInt(BaseAddr,val)   WriteRegBit(BaseAddr,TX_CT_1,4,val)&t;
singleline_comment|//half empty int (1 half)
DECL|macro|EnTXFIFOUnderrunEOMInt
mdefine_line|#define EnTXFIFOUnderrunEOMInt(BaseAddr,val) WriteRegBit(BaseAddr,TX_CT_1,5,val)
DECL|macro|EnTXFIFOReadyInt
mdefine_line|#define EnTXFIFOReadyInt(BaseAddr,val)       WriteRegBit(BaseAddr,TX_CT_1,6,val)&t;
singleline_comment|//int when reach it threshold (setting by bit 4)
singleline_comment|//**************************TX_CT_2
DECL|macro|ForceUnderrun
mdefine_line|#define ForceUnderrun(BaseAddr,val)   WriteRegBit(BaseAddr,TX_CT_2,7,val)&t;
singleline_comment|// force an underrun int
DECL|macro|EnTXCRC
mdefine_line|#define EnTXCRC(BaseAddr,val)         WriteRegBit(BaseAddr,TX_CT_2,6,val)&t;
singleline_comment|//1 for FIR,MIR...0 (not SIR)
DECL|macro|ForceBADCRC
mdefine_line|#define ForceBADCRC(BaseAddr,val)     WriteRegBit(BaseAddr,TX_CT_2,5,val)&t;
singleline_comment|//force an bad CRC
DECL|macro|SendSIP
mdefine_line|#define SendSIP(BaseAddr,val)         WriteRegBit(BaseAddr,TX_CT_2,4,val)&t;
singleline_comment|//send indication pulse for prevent SIR disturb
DECL|macro|ClearEnTX
mdefine_line|#define ClearEnTX(BaseAddr,val)       WriteRegBit(BaseAddr,TX_CT_2,3,val)&t;
singleline_comment|// opposite to EnTX
singleline_comment|//*****************TX_ST
DECL|macro|GetTXStatus
mdefine_line|#define GetTXStatus(BaseAddr) &t;ReadReg(BaseAddr,TX_ST)&t;
singleline_comment|//RO
singleline_comment|//**************************RX_CT
DECL|macro|EnRXSpecInt
mdefine_line|#define EnRXSpecInt(BaseAddr,val)           WriteRegBit(BaseAddr,RX_CT,0,val)
DECL|macro|EnRXFIFOReadyInt
mdefine_line|#define EnRXFIFOReadyInt(BaseAddr,val)      WriteRegBit(BaseAddr,RX_CT,1,val)&t;
singleline_comment|//enable int when reach it threshold (setting by bit 7)
DECL|macro|EnRXFIFOHalfLevelInt
mdefine_line|#define EnRXFIFOHalfLevelInt(BaseAddr,val)  WriteRegBit(BaseAddr,RX_CT,7,val)&t;
singleline_comment|//enable int when (1) half full...or (0) just not full
singleline_comment|//*****************RX_ST
DECL|macro|GetRXStatus
mdefine_line|#define GetRXStatus(BaseAddr) &t;ReadReg(BaseAddr,RX_ST)&t;
singleline_comment|//RO
singleline_comment|//***********************P_ADDR
DECL|macro|SetPacketAddr
mdefine_line|#define SetPacketAddr(BaseAddr,addr)        WriteReg(BaseAddr,P_ADDR,addr)
singleline_comment|//***********************I_CF_4
DECL|macro|EnGPIOtoRX2
mdefine_line|#define EnGPIOtoRX2(BaseAddr,val)&t;WriteRegBit(BaseAddr,I_CF_4,7,val)
DECL|macro|EnTimerInt
mdefine_line|#define EnTimerInt(BaseAddr,val)&t;&t;WriteRegBit(BaseAddr,I_CF_4,1,val)
DECL|macro|ClearTimerInt
mdefine_line|#define ClearTimerInt(BaseAddr,val)&t;WriteRegBit(BaseAddr,I_CF_4,0,val)
singleline_comment|//***********************I_T_C_L
DECL|macro|WriteGIO
mdefine_line|#define WriteGIO(BaseAddr,val)&t;    WriteRegBit(BaseAddr,I_T_C_L,7,val)
DECL|macro|ReadGIO
mdefine_line|#define ReadGIO(BaseAddr)&t;&t;    CheckRegBit(BaseAddr,I_T_C_L,7)
DECL|macro|ReadRX
mdefine_line|#define ReadRX(BaseAddr)&t;&t;    CheckRegBit(BaseAddr,I_T_C_L,3)&t;
singleline_comment|//RO
DECL|macro|WriteTX
mdefine_line|#define WriteTX(BaseAddr,val)&t;&t;WriteRegBit(BaseAddr,I_T_C_L,0,val)
singleline_comment|//***********************I_T_C_H
DECL|macro|EnRX2
mdefine_line|#define EnRX2(BaseAddr,val)&t;&t;    WriteRegBit(BaseAddr,I_T_C_H,7,val)
DECL|macro|ReadRX2
mdefine_line|#define ReadRX2(BaseAddr)           CheckRegBit(BaseAddr,I_T_C_H,7)
singleline_comment|//**********************Version
DECL|macro|GetFIRVersion
mdefine_line|#define GetFIRVersion(BaseAddr)&t;&t;ReadReg(BaseAddr,VERSION)
DECL|function|SetTimer
r_static
r_void
id|SetTimer
c_func
(paren
id|__u16
id|iobase
comma
id|__u8
id|count
)paren
(brace
id|EnTimerInt
c_func
(paren
id|iobase
comma
id|OFF
)paren
suffix:semicolon
id|WriteReg
c_func
(paren
id|iobase
comma
id|TIMER
comma
id|count
)paren
suffix:semicolon
id|EnTimerInt
c_func
(paren
id|iobase
comma
id|ON
)paren
suffix:semicolon
)brace
DECL|function|SetSendByte
r_static
r_void
id|SetSendByte
c_func
(paren
id|__u16
id|iobase
comma
id|__u32
id|count
)paren
(brace
id|__u32
id|low
comma
id|high
suffix:semicolon
r_if
c_cond
(paren
(paren
id|count
op_amp
l_int|0xf000
)paren
op_eq
l_int|0
)paren
(brace
id|low
op_assign
id|count
op_amp
l_int|0x00ff
suffix:semicolon
id|high
op_assign
(paren
id|count
op_amp
l_int|0x0f00
)paren
op_rshift
l_int|8
suffix:semicolon
id|WriteReg
c_func
(paren
id|iobase
comma
id|TX_C_L
comma
id|low
)paren
suffix:semicolon
id|WriteReg
c_func
(paren
id|iobase
comma
id|TX_C_H
comma
id|high
)paren
suffix:semicolon
)brace
)brace
DECL|function|ResetChip
r_static
r_void
id|ResetChip
c_func
(paren
id|__u16
id|iobase
comma
id|__u8
id|type
)paren
(brace
id|__u8
id|value
suffix:semicolon
id|value
op_assign
(paren
id|type
op_plus
l_int|2
)paren
op_lshift
l_int|4
suffix:semicolon
id|WriteReg
c_func
(paren
id|iobase
comma
id|RESET
comma
id|type
)paren
suffix:semicolon
)brace
DECL|function|CkRxRecv
r_static
r_int
id|CkRxRecv
c_func
(paren
id|__u16
id|iobase
comma
r_struct
id|via_ircc_cb
op_star
id|self
)paren
(brace
id|__u8
id|low
comma
id|high
suffix:semicolon
id|__u16
id|wTmp
op_assign
l_int|0
comma
id|wTmp1
op_assign
l_int|0
comma
id|wTmp_new
op_assign
l_int|0
suffix:semicolon
id|low
op_assign
id|ReadReg
c_func
(paren
id|iobase
comma
id|RX_C_L
)paren
suffix:semicolon
id|high
op_assign
id|ReadReg
c_func
(paren
id|iobase
comma
id|RX_C_H
)paren
suffix:semicolon
id|wTmp1
op_assign
id|high
suffix:semicolon
id|wTmp
op_assign
(paren
id|wTmp1
op_lshift
l_int|8
)paren
op_or
id|low
suffix:semicolon
id|udelay
c_func
(paren
l_int|10
)paren
suffix:semicolon
id|low
op_assign
id|ReadReg
c_func
(paren
id|iobase
comma
id|RX_C_L
)paren
suffix:semicolon
id|high
op_assign
id|ReadReg
c_func
(paren
id|iobase
comma
id|RX_C_H
)paren
suffix:semicolon
id|wTmp1
op_assign
id|high
suffix:semicolon
id|wTmp_new
op_assign
(paren
id|wTmp1
op_lshift
l_int|8
)paren
op_or
id|low
suffix:semicolon
r_if
c_cond
(paren
id|wTmp_new
op_ne
id|wTmp
)paren
r_return
l_int|1
suffix:semicolon
r_else
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|RxCurCount
r_static
id|__u16
id|RxCurCount
c_func
(paren
id|__u16
id|iobase
comma
r_struct
id|via_ircc_cb
op_star
id|self
)paren
(brace
id|__u8
id|low
comma
id|high
suffix:semicolon
id|__u16
id|wTmp
op_assign
l_int|0
comma
id|wTmp1
op_assign
l_int|0
suffix:semicolon
id|low
op_assign
id|ReadReg
c_func
(paren
id|iobase
comma
id|RX_P_L
)paren
suffix:semicolon
id|high
op_assign
id|ReadReg
c_func
(paren
id|iobase
comma
id|RX_P_H
)paren
suffix:semicolon
id|wTmp1
op_assign
id|high
suffix:semicolon
id|wTmp
op_assign
(paren
id|wTmp1
op_lshift
l_int|8
)paren
op_or
id|low
suffix:semicolon
r_return
id|wTmp
suffix:semicolon
)brace
multiline_comment|/* This Routine can only use in recevie_complete&n; * for it will update last count.&n; */
DECL|function|GetRecvByte
r_static
id|__u16
id|GetRecvByte
c_func
(paren
id|__u16
id|iobase
comma
r_struct
id|via_ircc_cb
op_star
id|self
)paren
(brace
id|__u8
id|low
comma
id|high
suffix:semicolon
id|__u16
id|wTmp
comma
id|wTmp1
comma
id|ret
suffix:semicolon
id|low
op_assign
id|ReadReg
c_func
(paren
id|iobase
comma
id|RX_P_L
)paren
suffix:semicolon
id|high
op_assign
id|ReadReg
c_func
(paren
id|iobase
comma
id|RX_P_H
)paren
suffix:semicolon
id|wTmp1
op_assign
id|high
suffix:semicolon
id|wTmp
op_assign
(paren
id|wTmp1
op_lshift
l_int|8
)paren
op_or
id|low
suffix:semicolon
r_if
c_cond
(paren
id|wTmp
op_ge
id|self-&gt;RxLastCount
)paren
id|ret
op_assign
id|wTmp
op_minus
id|self-&gt;RxLastCount
suffix:semicolon
r_else
id|ret
op_assign
(paren
l_int|0x8000
op_minus
id|self-&gt;RxLastCount
)paren
op_plus
id|wTmp
suffix:semicolon
id|self-&gt;RxLastCount
op_assign
id|wTmp
suffix:semicolon
multiline_comment|/* RX_P is more actually the RX_C&n; low=ReadReg(iobase,RX_C_L);&n; high=ReadReg(iobase,RX_C_H);&n;&n; if(!(high&amp;0xe000)) {&n;&t; temp=(high&lt;&lt;8)+low;&n;&t; return temp;&n; }&n; else return 0;&n;*/
r_return
id|ret
suffix:semicolon
)brace
DECL|function|Sdelay
r_static
r_void
id|Sdelay
c_func
(paren
id|__u16
id|scale
)paren
(brace
id|__u8
id|bTmp
suffix:semicolon
r_int
id|i
comma
id|j
suffix:semicolon
r_for
c_loop
(paren
id|j
op_assign
l_int|0
suffix:semicolon
id|j
OL
id|scale
suffix:semicolon
id|j
op_increment
)paren
(brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|0x20
suffix:semicolon
id|i
op_increment
)paren
(brace
id|bTmp
op_assign
id|inb
c_func
(paren
l_int|0xeb
)paren
suffix:semicolon
id|outb
c_func
(paren
id|bTmp
comma
l_int|0xeb
)paren
suffix:semicolon
)brace
)brace
)brace
DECL|function|Tdelay
r_static
r_void
id|Tdelay
c_func
(paren
id|__u16
id|scale
)paren
(brace
id|__u8
id|bTmp
suffix:semicolon
r_int
id|i
comma
id|j
suffix:semicolon
r_for
c_loop
(paren
id|j
op_assign
l_int|0
suffix:semicolon
id|j
OL
id|scale
suffix:semicolon
id|j
op_increment
)paren
(brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|0x50
suffix:semicolon
id|i
op_increment
)paren
(brace
id|bTmp
op_assign
id|inb
c_func
(paren
l_int|0xeb
)paren
suffix:semicolon
id|outb
c_func
(paren
id|bTmp
comma
l_int|0xeb
)paren
suffix:semicolon
)brace
)brace
)brace
DECL|function|ActClk
r_static
r_void
id|ActClk
c_func
(paren
id|__u16
id|iobase
comma
id|__u8
id|value
)paren
(brace
id|__u8
id|bTmp
suffix:semicolon
id|bTmp
op_assign
id|ReadReg
c_func
(paren
id|iobase
comma
l_int|0x34
)paren
suffix:semicolon
r_if
c_cond
(paren
id|value
)paren
id|WriteReg
c_func
(paren
id|iobase
comma
l_int|0x34
comma
id|bTmp
op_or
id|Clk_bit
)paren
suffix:semicolon
r_else
id|WriteReg
c_func
(paren
id|iobase
comma
l_int|0x34
comma
id|bTmp
op_amp
op_complement
id|Clk_bit
)paren
suffix:semicolon
)brace
DECL|function|ClkTx
r_static
r_void
id|ClkTx
c_func
(paren
id|__u16
id|iobase
comma
id|__u8
id|Clk
comma
id|__u8
id|Tx
)paren
(brace
id|__u8
id|bTmp
suffix:semicolon
id|bTmp
op_assign
id|ReadReg
c_func
(paren
id|iobase
comma
l_int|0x34
)paren
suffix:semicolon
r_if
c_cond
(paren
id|Clk
op_eq
l_int|0
)paren
id|bTmp
op_and_assign
op_complement
id|Clk_bit
suffix:semicolon
r_else
(brace
r_if
c_cond
(paren
id|Clk
op_eq
l_int|1
)paren
id|bTmp
op_or_assign
id|Clk_bit
suffix:semicolon
)brace
id|WriteReg
c_func
(paren
id|iobase
comma
l_int|0x34
comma
id|bTmp
)paren
suffix:semicolon
id|Sdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|Tx
op_eq
l_int|0
)paren
id|bTmp
op_and_assign
op_complement
id|Tx_bit
suffix:semicolon
r_else
(brace
r_if
c_cond
(paren
id|Tx
op_eq
l_int|1
)paren
id|bTmp
op_or_assign
id|Tx_bit
suffix:semicolon
)brace
id|WriteReg
c_func
(paren
id|iobase
comma
l_int|0x34
comma
id|bTmp
)paren
suffix:semicolon
)brace
DECL|function|Wr_Byte
r_static
r_void
id|Wr_Byte
c_func
(paren
id|__u16
id|iobase
comma
id|__u8
id|data
)paren
(brace
id|__u8
id|bData
op_assign
id|data
suffix:semicolon
singleline_comment|//      __u8 btmp;
r_int
id|i
suffix:semicolon
id|ClkTx
c_func
(paren
id|iobase
comma
l_int|0
comma
l_int|1
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|2
)paren
suffix:semicolon
id|ActClk
c_func
(paren
id|iobase
comma
l_int|1
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|8
suffix:semicolon
id|i
op_increment
)paren
(brace
singleline_comment|//LDN
r_if
c_cond
(paren
(paren
id|bData
op_rshift
id|i
)paren
op_amp
l_int|0x01
)paren
(brace
id|ClkTx
c_func
(paren
id|iobase
comma
l_int|0
comma
l_int|1
)paren
suffix:semicolon
singleline_comment|//bit data = 1;
)brace
r_else
(brace
id|ClkTx
c_func
(paren
id|iobase
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
singleline_comment|//bit data = 1;
)brace
id|Tdelay
c_func
(paren
l_int|2
)paren
suffix:semicolon
id|Sdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
id|ActClk
c_func
(paren
id|iobase
comma
l_int|1
)paren
suffix:semicolon
singleline_comment|//clk hi
id|Tdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
)brace
)brace
DECL|function|Rd_Indx
r_static
id|__u8
id|Rd_Indx
c_func
(paren
id|__u16
id|iobase
comma
id|__u8
id|addr
comma
id|__u8
id|index
)paren
(brace
id|__u8
id|data
op_assign
l_int|0
comma
id|bTmp
comma
id|data_bit
suffix:semicolon
r_int
id|i
suffix:semicolon
id|bTmp
op_assign
id|addr
op_or
(paren
id|index
op_lshift
l_int|1
)paren
op_or
l_int|0
suffix:semicolon
id|ClkTx
c_func
(paren
id|iobase
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|2
)paren
suffix:semicolon
id|ActClk
c_func
(paren
id|iobase
comma
l_int|1
)paren
suffix:semicolon
id|udelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
id|Wr_Byte
c_func
(paren
id|iobase
comma
id|bTmp
)paren
suffix:semicolon
id|Sdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
id|ClkTx
c_func
(paren
id|iobase
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|2
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|10
suffix:semicolon
id|i
op_increment
)paren
(brace
id|ActClk
c_func
(paren
id|iobase
comma
l_int|1
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
id|ActClk
c_func
(paren
id|iobase
comma
l_int|0
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
id|ClkTx
c_func
(paren
id|iobase
comma
l_int|0
comma
l_int|1
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
id|bTmp
op_assign
id|ReadReg
c_func
(paren
id|iobase
comma
l_int|0x34
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|bTmp
op_amp
id|Rd_Valid
)paren
)paren
r_break
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
(paren
id|bTmp
op_amp
id|Rd_Valid
)paren
)paren
(brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|8
suffix:semicolon
id|i
op_increment
)paren
(brace
id|ActClk
c_func
(paren
id|iobase
comma
l_int|1
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
id|ActClk
c_func
(paren
id|iobase
comma
l_int|0
)paren
suffix:semicolon
id|bTmp
op_assign
id|ReadReg
c_func
(paren
id|iobase
comma
l_int|0x34
)paren
suffix:semicolon
id|data_bit
op_assign
l_int|1
op_lshift
id|i
suffix:semicolon
r_if
c_cond
(paren
id|bTmp
op_amp
id|RxBit
)paren
id|data
op_or_assign
id|data_bit
suffix:semicolon
r_else
id|data
op_and_assign
op_complement
id|data_bit
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|2
)paren
suffix:semicolon
)brace
)brace
r_else
(brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|2
suffix:semicolon
id|i
op_increment
)paren
(brace
id|ActClk
c_func
(paren
id|iobase
comma
l_int|1
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
id|ActClk
c_func
(paren
id|iobase
comma
l_int|0
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|2
)paren
suffix:semicolon
)brace
id|bTmp
op_assign
id|ReadReg
c_func
(paren
id|iobase
comma
l_int|0x34
)paren
suffix:semicolon
)brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|1
suffix:semicolon
id|i
op_increment
)paren
(brace
id|ActClk
c_func
(paren
id|iobase
comma
l_int|1
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
id|ActClk
c_func
(paren
id|iobase
comma
l_int|0
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|2
)paren
suffix:semicolon
)brace
id|ClkTx
c_func
(paren
id|iobase
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|3
suffix:semicolon
id|i
op_increment
)paren
(brace
id|ActClk
c_func
(paren
id|iobase
comma
l_int|1
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
id|ActClk
c_func
(paren
id|iobase
comma
l_int|0
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|2
)paren
suffix:semicolon
)brace
r_return
id|data
suffix:semicolon
)brace
DECL|function|Wr_Indx
r_static
r_void
id|Wr_Indx
c_func
(paren
id|__u16
id|iobase
comma
id|__u8
id|addr
comma
id|__u8
id|index
comma
id|__u8
id|data
)paren
(brace
r_int
id|i
suffix:semicolon
id|__u8
id|bTmp
suffix:semicolon
id|ClkTx
c_func
(paren
id|iobase
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
id|udelay
c_func
(paren
l_int|2
)paren
suffix:semicolon
id|ActClk
c_func
(paren
id|iobase
comma
l_int|1
)paren
suffix:semicolon
id|udelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
id|bTmp
op_assign
id|addr
op_or
(paren
id|index
op_lshift
l_int|1
)paren
op_or
l_int|1
suffix:semicolon
id|Wr_Byte
c_func
(paren
id|iobase
comma
id|bTmp
)paren
suffix:semicolon
id|Wr_Byte
c_func
(paren
id|iobase
comma
id|data
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|2
suffix:semicolon
id|i
op_increment
)paren
(brace
id|ClkTx
c_func
(paren
id|iobase
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|2
)paren
suffix:semicolon
id|ActClk
c_func
(paren
id|iobase
comma
l_int|1
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
)brace
id|ActClk
c_func
(paren
id|iobase
comma
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|ResetDongle
r_static
r_void
id|ResetDongle
c_func
(paren
id|__u16
id|iobase
)paren
(brace
r_int
id|i
suffix:semicolon
id|ClkTx
c_func
(paren
id|iobase
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|30
suffix:semicolon
id|i
op_increment
)paren
(brace
id|ActClk
c_func
(paren
id|iobase
comma
l_int|1
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
id|ActClk
c_func
(paren
id|iobase
comma
l_int|0
)paren
suffix:semicolon
id|Tdelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
)brace
id|ActClk
c_func
(paren
id|iobase
comma
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|SetSITmode
r_static
r_void
id|SetSITmode
c_func
(paren
id|__u16
id|iobase
)paren
(brace
id|__u8
id|bTmp
suffix:semicolon
id|bTmp
op_assign
id|ReadLPCReg
c_func
(paren
l_int|0x28
)paren
suffix:semicolon
id|WriteLPCReg
c_func
(paren
l_int|0x28
comma
id|bTmp
op_or
l_int|0x10
)paren
suffix:semicolon
singleline_comment|//select ITMOFF
id|bTmp
op_assign
id|ReadReg
c_func
(paren
id|iobase
comma
l_int|0x35
)paren
suffix:semicolon
id|WriteReg
c_func
(paren
id|iobase
comma
l_int|0x35
comma
id|bTmp
op_or
l_int|0x40
)paren
suffix:semicolon
singleline_comment|// Driver ITMOFF
id|WriteReg
c_func
(paren
id|iobase
comma
l_int|0x28
comma
id|bTmp
op_or
l_int|0x80
)paren
suffix:semicolon
singleline_comment|// enable All interrupt
)brace
DECL|function|SI_SetMode
r_static
r_void
id|SI_SetMode
c_func
(paren
id|__u16
id|iobase
comma
r_int
id|mode
)paren
(brace
singleline_comment|//__u32 dTmp;
id|__u8
id|bTmp
suffix:semicolon
id|WriteLPCReg
c_func
(paren
l_int|0x28
comma
l_int|0x70
)paren
suffix:semicolon
singleline_comment|// S/W Reset
id|SetSITmode
c_func
(paren
id|iobase
)paren
suffix:semicolon
id|ResetDongle
c_func
(paren
id|iobase
)paren
suffix:semicolon
id|udelay
c_func
(paren
l_int|10
)paren
suffix:semicolon
id|Wr_Indx
c_func
(paren
id|iobase
comma
l_int|0x40
comma
l_int|0x0
comma
l_int|0x17
)paren
suffix:semicolon
singleline_comment|//RX ,APEN enable,Normal power
id|Wr_Indx
c_func
(paren
id|iobase
comma
l_int|0x40
comma
l_int|0x1
comma
id|mode
)paren
suffix:semicolon
singleline_comment|//Set Mode
id|Wr_Indx
c_func
(paren
id|iobase
comma
l_int|0x40
comma
l_int|0x2
comma
l_int|0xff
)paren
suffix:semicolon
singleline_comment|//Set power to FIR VFIR &gt; 1m
id|bTmp
op_assign
id|Rd_Indx
c_func
(paren
id|iobase
comma
l_int|0x40
comma
l_int|1
)paren
suffix:semicolon
)brace
DECL|function|InitCard
r_static
r_void
id|InitCard
c_func
(paren
id|__u16
id|iobase
)paren
(brace
id|ResetChip
c_func
(paren
id|iobase
comma
l_int|5
)paren
suffix:semicolon
id|WriteReg
c_func
(paren
id|iobase
comma
id|I_ST_CT_0
comma
l_int|0x00
)paren
suffix:semicolon
singleline_comment|// open CHIP on
id|SetSIRBOF
c_func
(paren
id|iobase
comma
l_int|0xc0
)paren
suffix:semicolon
singleline_comment|// hardware default value
id|SetSIREOF
c_func
(paren
id|iobase
comma
l_int|0xc1
)paren
suffix:semicolon
)brace
DECL|function|CommonInit
r_static
r_void
id|CommonInit
c_func
(paren
id|__u16
id|iobase
)paren
(brace
singleline_comment|//  EnTXCRC(iobase,0);
id|SwapDMA
c_func
(paren
id|iobase
comma
id|OFF
)paren
suffix:semicolon
id|SetMaxRxPacketSize
c_func
(paren
id|iobase
comma
l_int|0x0fff
)paren
suffix:semicolon
singleline_comment|//set to max:4095
id|EnRXFIFOReadyInt
c_func
(paren
id|iobase
comma
id|OFF
)paren
suffix:semicolon
id|EnRXFIFOHalfLevelInt
c_func
(paren
id|iobase
comma
id|OFF
)paren
suffix:semicolon
id|EnTXFIFOHalfLevelInt
c_func
(paren
id|iobase
comma
id|OFF
)paren
suffix:semicolon
id|EnTXFIFOUnderrunEOMInt
c_func
(paren
id|iobase
comma
id|ON
)paren
suffix:semicolon
singleline_comment|//  EnTXFIFOReadyInt(iobase,ON);
id|InvertTX
c_func
(paren
id|iobase
comma
id|OFF
)paren
suffix:semicolon
id|InvertRX
c_func
(paren
id|iobase
comma
id|OFF
)paren
suffix:semicolon
singleline_comment|//  WriteLPCReg(0xF0,0); //(if VT1211 then do this)
r_if
c_cond
(paren
id|IsSIROn
c_func
(paren
id|iobase
)paren
)paren
(brace
id|SIRFilter
c_func
(paren
id|iobase
comma
id|ON
)paren
suffix:semicolon
id|SIRRecvAny
c_func
(paren
id|iobase
comma
id|ON
)paren
suffix:semicolon
)brace
r_else
(brace
id|SIRFilter
c_func
(paren
id|iobase
comma
id|OFF
)paren
suffix:semicolon
id|SIRRecvAny
c_func
(paren
id|iobase
comma
id|OFF
)paren
suffix:semicolon
)brace
id|EnRXSpecInt
c_func
(paren
id|iobase
comma
id|ON
)paren
suffix:semicolon
id|WriteReg
c_func
(paren
id|iobase
comma
id|I_ST_CT_0
comma
l_int|0x80
)paren
suffix:semicolon
id|EnableDMA
c_func
(paren
id|iobase
comma
id|ON
)paren
suffix:semicolon
)brace
DECL|function|SetBaudRate
r_static
r_void
id|SetBaudRate
c_func
(paren
id|__u16
id|iobase
comma
id|__u32
id|rate
)paren
(brace
id|__u8
id|value
op_assign
l_int|11
comma
id|temp
suffix:semicolon
r_if
c_cond
(paren
id|IsSIROn
c_func
(paren
id|iobase
)paren
)paren
(brace
r_switch
c_cond
(paren
id|rate
)paren
(brace
r_case
(paren
id|__u32
)paren
(paren
l_int|2400L
)paren
suffix:colon
id|value
op_assign
l_int|47
suffix:semicolon
r_break
suffix:semicolon
r_case
(paren
id|__u32
)paren
(paren
l_int|9600L
)paren
suffix:colon
id|value
op_assign
l_int|11
suffix:semicolon
r_break
suffix:semicolon
r_case
(paren
id|__u32
)paren
(paren
l_int|19200L
)paren
suffix:colon
id|value
op_assign
l_int|5
suffix:semicolon
r_break
suffix:semicolon
r_case
(paren
id|__u32
)paren
(paren
l_int|38400L
)paren
suffix:colon
id|value
op_assign
l_int|2
suffix:semicolon
r_break
suffix:semicolon
r_case
(paren
id|__u32
)paren
(paren
l_int|57600L
)paren
suffix:colon
id|value
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_case
(paren
id|__u32
)paren
(paren
l_int|115200L
)paren
suffix:colon
id|value
op_assign
l_int|0
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
r_break
suffix:semicolon
)brace
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|IsMIROn
c_func
(paren
id|iobase
)paren
)paren
(brace
id|value
op_assign
l_int|0
suffix:semicolon
singleline_comment|// will automatically be fixed in 1.152M
)brace
r_else
r_if
c_cond
(paren
id|IsFIROn
c_func
(paren
id|iobase
)paren
)paren
(brace
id|value
op_assign
l_int|0
suffix:semicolon
singleline_comment|// will automatically be fixed in 4M
)brace
id|temp
op_assign
(paren
id|ReadReg
c_func
(paren
id|iobase
comma
id|I_CF_H_1
)paren
op_amp
l_int|0x03
)paren
suffix:semicolon
id|temp
op_or_assign
id|value
op_lshift
l_int|2
suffix:semicolon
id|WriteReg
c_func
(paren
id|iobase
comma
id|I_CF_H_1
comma
id|temp
)paren
suffix:semicolon
)brace
DECL|function|SetPulseWidth
r_static
r_void
id|SetPulseWidth
c_func
(paren
id|__u16
id|iobase
comma
id|__u8
id|width
)paren
(brace
id|__u8
id|temp
comma
id|temp1
comma
id|temp2
suffix:semicolon
id|temp
op_assign
(paren
id|ReadReg
c_func
(paren
id|iobase
comma
id|I_CF_L_1
)paren
op_amp
l_int|0x1f
)paren
suffix:semicolon
id|temp1
op_assign
(paren
id|ReadReg
c_func
(paren
id|iobase
comma
id|I_CF_H_1
)paren
op_amp
l_int|0xfc
)paren
suffix:semicolon
id|temp2
op_assign
(paren
id|width
op_amp
l_int|0x07
)paren
op_lshift
l_int|5
suffix:semicolon
id|temp
op_or_assign
id|temp2
suffix:semicolon
id|temp2
op_assign
(paren
id|width
op_amp
l_int|0x18
)paren
op_rshift
l_int|3
suffix:semicolon
id|temp1
op_or_assign
id|temp2
suffix:semicolon
id|WriteReg
c_func
(paren
id|iobase
comma
id|I_CF_L_1
comma
id|temp
)paren
suffix:semicolon
id|WriteReg
c_func
(paren
id|iobase
comma
id|I_CF_H_1
comma
id|temp1
)paren
suffix:semicolon
)brace
DECL|function|SetSendPreambleCount
r_static
r_void
id|SetSendPreambleCount
c_func
(paren
id|__u16
id|iobase
comma
id|__u8
id|count
)paren
(brace
id|__u8
id|temp
suffix:semicolon
id|temp
op_assign
id|ReadReg
c_func
(paren
id|iobase
comma
id|I_CF_L_1
)paren
op_amp
l_int|0xe0
suffix:semicolon
id|temp
op_or_assign
id|count
suffix:semicolon
id|WriteReg
c_func
(paren
id|iobase
comma
id|I_CF_L_1
comma
id|temp
)paren
suffix:semicolon
)brace
DECL|function|SetVFIR
r_static
r_void
id|SetVFIR
c_func
(paren
id|__u16
id|BaseAddr
comma
id|__u8
id|val
)paren
(brace
id|__u8
id|tmp
suffix:semicolon
id|tmp
op_assign
id|ReadReg
c_func
(paren
id|BaseAddr
comma
id|I_CF_L_0
)paren
suffix:semicolon
id|WriteReg
c_func
(paren
id|BaseAddr
comma
id|I_CF_L_0
comma
id|tmp
op_amp
l_int|0x8f
)paren
suffix:semicolon
id|WriteRegBit
c_func
(paren
id|BaseAddr
comma
id|I_CF_H_0
comma
l_int|5
comma
id|val
)paren
suffix:semicolon
)brace
DECL|function|SetFIR
r_static
r_void
id|SetFIR
c_func
(paren
id|__u16
id|BaseAddr
comma
id|__u8
id|val
)paren
(brace
id|__u8
id|tmp
suffix:semicolon
id|WriteRegBit
c_func
(paren
id|BaseAddr
comma
id|I_CF_H_0
comma
l_int|5
comma
l_int|0
)paren
suffix:semicolon
id|tmp
op_assign
id|ReadReg
c_func
(paren
id|BaseAddr
comma
id|I_CF_L_0
)paren
suffix:semicolon
id|WriteReg
c_func
(paren
id|BaseAddr
comma
id|I_CF_L_0
comma
id|tmp
op_amp
l_int|0x8f
)paren
suffix:semicolon
id|WriteRegBit
c_func
(paren
id|BaseAddr
comma
id|I_CF_L_0
comma
l_int|6
comma
id|val
)paren
suffix:semicolon
)brace
DECL|function|SetMIR
r_static
r_void
id|SetMIR
c_func
(paren
id|__u16
id|BaseAddr
comma
id|__u8
id|val
)paren
(brace
id|__u8
id|tmp
suffix:semicolon
id|WriteRegBit
c_func
(paren
id|BaseAddr
comma
id|I_CF_H_0
comma
l_int|5
comma
l_int|0
)paren
suffix:semicolon
id|tmp
op_assign
id|ReadReg
c_func
(paren
id|BaseAddr
comma
id|I_CF_L_0
)paren
suffix:semicolon
id|WriteReg
c_func
(paren
id|BaseAddr
comma
id|I_CF_L_0
comma
id|tmp
op_amp
l_int|0x8f
)paren
suffix:semicolon
id|WriteRegBit
c_func
(paren
id|BaseAddr
comma
id|I_CF_L_0
comma
l_int|5
comma
id|val
)paren
suffix:semicolon
)brace
DECL|function|SetSIR
r_static
r_void
id|SetSIR
c_func
(paren
id|__u16
id|BaseAddr
comma
id|__u8
id|val
)paren
(brace
id|__u8
id|tmp
suffix:semicolon
id|WriteRegBit
c_func
(paren
id|BaseAddr
comma
id|I_CF_H_0
comma
l_int|5
comma
l_int|0
)paren
suffix:semicolon
id|tmp
op_assign
id|ReadReg
c_func
(paren
id|BaseAddr
comma
id|I_CF_L_0
)paren
suffix:semicolon
id|WriteReg
c_func
(paren
id|BaseAddr
comma
id|I_CF_L_0
comma
id|tmp
op_amp
l_int|0x8f
)paren
suffix:semicolon
id|WriteRegBit
c_func
(paren
id|BaseAddr
comma
id|I_CF_L_0
comma
l_int|4
comma
id|val
)paren
suffix:semicolon
)brace
macro_line|#endif&t;&t;&t;&t;/* via_IRCC_H */
eof
