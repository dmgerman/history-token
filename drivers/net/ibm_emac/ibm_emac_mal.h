macro_line|#ifndef _IBM_EMAC_MAL_H
DECL|macro|_IBM_EMAC_MAL_H
mdefine_line|#define _IBM_EMAC_MAL_H
macro_line|#include &lt;linux/list.h&gt;
DECL|macro|MAL_DT_ALIGN
mdefine_line|#define MAL_DT_ALIGN&t;(4096)&t;/* Alignment for each channel&squot;s descriptor table */
DECL|macro|MAL_CHAN_MASK
mdefine_line|#define MAL_CHAN_MASK(chan)&t;(0x80000000 &gt;&gt; (chan))
multiline_comment|/* MAL Buffer Descriptor structure */
DECL|struct|mal_descriptor
r_struct
id|mal_descriptor
(brace
DECL|member|ctrl
r_int
r_int
id|ctrl
suffix:semicolon
multiline_comment|/* MAL / Commac status control bits */
DECL|member|data_len
r_int
id|data_len
suffix:semicolon
multiline_comment|/* Max length is 4K-1 (12 bits)     */
DECL|member|data_ptr
r_int
r_char
op_star
id|data_ptr
suffix:semicolon
multiline_comment|/* pointer to actual data buffer    */
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* the following defines are for the MadMAL status and control registers. */
multiline_comment|/* MADMAL transmit and receive status/control bits  */
DECL|macro|MAL_RX_CTRL_EMPTY
mdefine_line|#define MAL_RX_CTRL_EMPTY&t;&t;0x8000
DECL|macro|MAL_RX_CTRL_WRAP
mdefine_line|#define MAL_RX_CTRL_WRAP&t;&t;0x4000
DECL|macro|MAL_RX_CTRL_CM
mdefine_line|#define MAL_RX_CTRL_CM&t;&t;&t;0x2000
DECL|macro|MAL_RX_CTRL_LAST
mdefine_line|#define MAL_RX_CTRL_LAST&t;&t;0x1000
DECL|macro|MAL_RX_CTRL_FIRST
mdefine_line|#define MAL_RX_CTRL_FIRST&t;&t;0x0800
DECL|macro|MAL_RX_CTRL_INTR
mdefine_line|#define MAL_RX_CTRL_INTR&t;&t;0x0400
DECL|macro|MAL_TX_CTRL_READY
mdefine_line|#define MAL_TX_CTRL_READY&t;&t;0x8000
DECL|macro|MAL_TX_CTRL_WRAP
mdefine_line|#define MAL_TX_CTRL_WRAP&t;&t;0x4000
DECL|macro|MAL_TX_CTRL_CM
mdefine_line|#define MAL_TX_CTRL_CM&t;&t;&t;0x2000
DECL|macro|MAL_TX_CTRL_LAST
mdefine_line|#define MAL_TX_CTRL_LAST&t;&t;0x1000
DECL|macro|MAL_TX_CTRL_INTR
mdefine_line|#define MAL_TX_CTRL_INTR&t;&t;0x0400
DECL|struct|mal_commac_ops
r_struct
id|mal_commac_ops
(brace
DECL|member|txeob
r_void
(paren
op_star
id|txeob
)paren
(paren
r_void
op_star
id|dev
comma
id|u32
id|chanmask
)paren
suffix:semicolon
DECL|member|txde
r_void
(paren
op_star
id|txde
)paren
(paren
r_void
op_star
id|dev
comma
id|u32
id|chanmask
)paren
suffix:semicolon
DECL|member|rxeob
r_void
(paren
op_star
id|rxeob
)paren
(paren
r_void
op_star
id|dev
comma
id|u32
id|chanmask
)paren
suffix:semicolon
DECL|member|rxde
r_void
(paren
op_star
id|rxde
)paren
(paren
r_void
op_star
id|dev
comma
id|u32
id|chanmask
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|mal_commac
r_struct
id|mal_commac
(brace
DECL|member|ops
r_struct
id|mal_commac_ops
op_star
id|ops
suffix:semicolon
DECL|member|dev
r_void
op_star
id|dev
suffix:semicolon
DECL|member|tx_chan_mask
DECL|member|rx_chan_mask
id|u32
id|tx_chan_mask
comma
id|rx_chan_mask
suffix:semicolon
DECL|member|list
r_struct
id|list_head
id|list
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ibm_ocp_mal
r_struct
id|ibm_ocp_mal
(brace
DECL|member|dcrbase
r_int
id|dcrbase
suffix:semicolon
DECL|member|commac
r_struct
id|list_head
id|commac
suffix:semicolon
DECL|member|tx_chan_mask
DECL|member|rx_chan_mask
id|u32
id|tx_chan_mask
comma
id|rx_chan_mask
suffix:semicolon
DECL|member|tx_phys_addr
id|dma_addr_t
id|tx_phys_addr
suffix:semicolon
DECL|member|tx_virt_addr
r_struct
id|mal_descriptor
op_star
id|tx_virt_addr
suffix:semicolon
DECL|member|rx_phys_addr
id|dma_addr_t
id|rx_phys_addr
suffix:semicolon
DECL|member|rx_virt_addr
r_struct
id|mal_descriptor
op_star
id|rx_virt_addr
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|GET_MAL_STANZA
mdefine_line|#define GET_MAL_STANZA(base,dcrn) &bslash;&n;&t;case base: &bslash;&n;&t;&t;x = mfdcr(dcrn(base)); &bslash;&n;&t;&t;break;
DECL|macro|SET_MAL_STANZA
mdefine_line|#define SET_MAL_STANZA(base,dcrn, val) &bslash;&n;&t;case base: &bslash;&n;&t;&t;mtdcr(dcrn(base), (val)); &bslash;&n;&t;&t;break;
DECL|macro|GET_MAL0_STANZA
mdefine_line|#define GET_MAL0_STANZA(dcrn) GET_MAL_STANZA(DCRN_MAL_BASE,dcrn)
DECL|macro|SET_MAL0_STANZA
mdefine_line|#define SET_MAL0_STANZA(dcrn,val) SET_MAL_STANZA(DCRN_MAL_BASE,dcrn,val)
macro_line|#ifdef DCRN_MAL1_BASE
DECL|macro|GET_MAL1_STANZA
mdefine_line|#define GET_MAL1_STANZA(dcrn) GET_MAL_STANZA(DCRN_MAL1_BASE,dcrn)
DECL|macro|SET_MAL1_STANZA
mdefine_line|#define SET_MAL1_STANZA(dcrn,val) SET_MAL_STANZA(DCRN_MAL1_BASE,dcrn,val)
macro_line|#else&t;&t;&t;&t;/* ! DCRN_MAL1_BASE */
DECL|macro|GET_MAL1_STANZA
mdefine_line|#define GET_MAL1_STANZA(dcrn)
DECL|macro|SET_MAL1_STANZA
mdefine_line|#define SET_MAL1_STANZA(dcrn,val)
macro_line|#endif
DECL|macro|get_mal_dcrn
mdefine_line|#define get_mal_dcrn(mal, dcrn) ({ &bslash;&n;&t;u32 x; &bslash;&n;&t;switch ((mal)-&gt;dcrbase) { &bslash;&n;&t;&t;GET_MAL0_STANZA(dcrn) &bslash;&n;&t;&t;GET_MAL1_STANZA(dcrn) &bslash;&n;&t;default: &bslash;&n;&t;&t;BUG(); &bslash;&n;&t;} &bslash;&n;x; })
DECL|macro|set_mal_dcrn
mdefine_line|#define set_mal_dcrn(mal, dcrn, val) do { &bslash;&n;&t;switch ((mal)-&gt;dcrbase) { &bslash;&n;&t;&t;SET_MAL0_STANZA(dcrn,val) &bslash;&n;&t;&t;SET_MAL1_STANZA(dcrn,val) &bslash;&n;&t;default: &bslash;&n;&t;&t;BUG(); &bslash;&n;&t;} } while (0)
DECL|function|mal_enable_tx_channels
r_static
r_inline
r_void
id|mal_enable_tx_channels
c_func
(paren
r_struct
id|ibm_ocp_mal
op_star
id|mal
comma
id|u32
id|chanmask
)paren
(brace
id|set_mal_dcrn
c_func
(paren
id|mal
comma
id|DCRN_MALTXCASR
comma
id|get_mal_dcrn
c_func
(paren
id|mal
comma
id|DCRN_MALTXCASR
)paren
op_or
id|chanmask
)paren
suffix:semicolon
)brace
DECL|function|mal_disable_tx_channels
r_static
r_inline
r_void
id|mal_disable_tx_channels
c_func
(paren
r_struct
id|ibm_ocp_mal
op_star
id|mal
comma
id|u32
id|chanmask
)paren
(brace
id|set_mal_dcrn
c_func
(paren
id|mal
comma
id|DCRN_MALTXCARR
comma
id|chanmask
)paren
suffix:semicolon
)brace
DECL|function|mal_enable_rx_channels
r_static
r_inline
r_void
id|mal_enable_rx_channels
c_func
(paren
r_struct
id|ibm_ocp_mal
op_star
id|mal
comma
id|u32
id|chanmask
)paren
(brace
id|set_mal_dcrn
c_func
(paren
id|mal
comma
id|DCRN_MALRXCASR
comma
id|get_mal_dcrn
c_func
(paren
id|mal
comma
id|DCRN_MALRXCASR
)paren
op_or
id|chanmask
)paren
suffix:semicolon
)brace
DECL|function|mal_disable_rx_channels
r_static
r_inline
r_void
id|mal_disable_rx_channels
c_func
(paren
r_struct
id|ibm_ocp_mal
op_star
id|mal
comma
id|u32
id|chanmask
)paren
(brace
id|set_mal_dcrn
c_func
(paren
id|mal
comma
id|DCRN_MALRXCARR
comma
id|chanmask
)paren
suffix:semicolon
)brace
r_extern
r_int
id|mal_register_commac
c_func
(paren
r_struct
id|ibm_ocp_mal
op_star
id|mal
comma
r_struct
id|mal_commac
op_star
id|commac
)paren
suffix:semicolon
r_extern
r_int
id|mal_unregister_commac
c_func
(paren
r_struct
id|ibm_ocp_mal
op_star
id|mal
comma
r_struct
id|mal_commac
op_star
id|commac
)paren
suffix:semicolon
r_extern
r_int
id|mal_set_rcbs
c_func
(paren
r_struct
id|ibm_ocp_mal
op_star
id|mal
comma
r_int
id|channel
comma
r_int
r_int
id|size
)paren
suffix:semicolon
macro_line|#endif&t;&t;&t;&t;/* _IBM_EMAC_MAL_H */
eof
