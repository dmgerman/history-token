multiline_comment|/*&n; * ibm_emac_phy.h&n; *&n; *&n; *      Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;&n; *      February 2003&n; *&n; * This program is free software; you can redistribute  it and/or modify it&n; *  under  the terms of  the GNU General  Public License as published by the&n; *  Free Software Foundation;  either version 2 of the  License, or (at your&n; *  option) any later version.&n; *&n; *  THIS  SOFTWARE  IS PROVIDED   ``AS  IS&squot;&squot; AND   ANY  EXPRESS OR   IMPLIED&n; *  WARRANTIES,   INCLUDING, BUT NOT  LIMITED  TO, THE IMPLIED WARRANTIES OF&n; *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN&n; *  NO  EVENT  SHALL   THE AUTHOR  BE    LIABLE FOR ANY   DIRECT,  INDIRECT,&n; *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT&n; *  NOT LIMITED   TO, PROCUREMENT OF  SUBSTITUTE GOODS  OR SERVICES; LOSS OF&n; *  USE, DATA,  OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON&n; *  ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT&n; *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF&n; *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&n; *&n; *  You should have received a copy of the  GNU General Public License along&n; *  with this program; if not, write  to the Free Software Foundation, Inc.,&n; *  675 Mass Ave, Cambridge, MA 02139, USA.&n; *&n; *&n; * This file basically duplicates sungem_phy.{c,h} with different PHYs&n; * supported. I&squot;m looking into merging that in a single mii layer more&n; * flexible than mii.c &n; */
macro_line|#ifndef _IBM_EMAC_PHY_H_
DECL|macro|_IBM_EMAC_PHY_H_
mdefine_line|#define _IBM_EMAC_PHY_H_
multiline_comment|/*&n; * PHY mode settings&n; * Used for multi-mode capable PHYs&n; */
DECL|macro|PHY_MODE_NA
mdefine_line|#define PHY_MODE_NA&t;0
DECL|macro|PHY_MODE_MII
mdefine_line|#define PHY_MODE_MII&t;1
DECL|macro|PHY_MODE_RMII
mdefine_line|#define PHY_MODE_RMII&t;2
DECL|macro|PHY_MODE_SMII
mdefine_line|#define PHY_MODE_SMII&t;3
DECL|macro|PHY_MODE_RGMII
mdefine_line|#define PHY_MODE_RGMII&t;4
DECL|macro|PHY_MODE_TBI
mdefine_line|#define PHY_MODE_TBI&t;5
DECL|macro|PHY_MODE_GMII
mdefine_line|#define PHY_MODE_GMII&t;6
DECL|macro|PHY_MODE_RTBI
mdefine_line|#define PHY_MODE_RTBI&t;7
DECL|macro|PHY_MODE_SGMII
mdefine_line|#define PHY_MODE_SGMII&t;8
multiline_comment|/*&n; * PHY specific registers/values&n; */
multiline_comment|/* CIS8201 */
DECL|macro|MII_CIS8201_EPCR
mdefine_line|#define MII_CIS8201_EPCR&t;0x17
DECL|macro|EPCR_MODE_MASK
mdefine_line|#define EPCR_MODE_MASK&t;&t;0x3000
DECL|macro|EPCR_GMII_MODE
mdefine_line|#define EPCR_GMII_MODE&t;&t;0x0000
DECL|macro|EPCR_RGMII_MODE
mdefine_line|#define EPCR_RGMII_MODE&t;&t;0x1000
DECL|macro|EPCR_TBI_MODE
mdefine_line|#define EPCR_TBI_MODE&t;&t;0x2000
DECL|macro|EPCR_RTBI_MODE
mdefine_line|#define EPCR_RTBI_MODE&t;&t;0x3000
r_struct
id|mii_phy
suffix:semicolon
multiline_comment|/* Operations supported by any kind of PHY */
DECL|struct|mii_phy_ops
r_struct
id|mii_phy_ops
(brace
DECL|member|init
r_int
(paren
op_star
id|init
)paren
(paren
r_struct
id|mii_phy
op_star
id|phy
)paren
suffix:semicolon
DECL|member|suspend
r_int
(paren
op_star
id|suspend
)paren
(paren
r_struct
id|mii_phy
op_star
id|phy
comma
r_int
id|wol_options
)paren
suffix:semicolon
DECL|member|setup_aneg
r_int
(paren
op_star
id|setup_aneg
)paren
(paren
r_struct
id|mii_phy
op_star
id|phy
comma
id|u32
id|advertise
)paren
suffix:semicolon
DECL|member|setup_forced
r_int
(paren
op_star
id|setup_forced
)paren
(paren
r_struct
id|mii_phy
op_star
id|phy
comma
r_int
id|speed
comma
r_int
id|fd
)paren
suffix:semicolon
DECL|member|poll_link
r_int
(paren
op_star
id|poll_link
)paren
(paren
r_struct
id|mii_phy
op_star
id|phy
)paren
suffix:semicolon
DECL|member|read_link
r_int
(paren
op_star
id|read_link
)paren
(paren
r_struct
id|mii_phy
op_star
id|phy
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Structure used to statically define an mii/gii based PHY */
DECL|struct|mii_phy_def
r_struct
id|mii_phy_def
(brace
DECL|member|phy_id
id|u32
id|phy_id
suffix:semicolon
multiline_comment|/* Concatenated ID1 &lt;&lt; 16 | ID2 */
DECL|member|phy_id_mask
id|u32
id|phy_id_mask
suffix:semicolon
multiline_comment|/* Significant bits */
DECL|member|features
id|u32
id|features
suffix:semicolon
multiline_comment|/* Ethtool SUPPORTED_* defines */
DECL|member|magic_aneg
r_int
id|magic_aneg
suffix:semicolon
multiline_comment|/* Autoneg does all speed test for us */
DECL|member|name
r_const
r_char
op_star
id|name
suffix:semicolon
DECL|member|ops
r_const
r_struct
id|mii_phy_ops
op_star
id|ops
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* An instance of a PHY, partially borrowed from mii_if_info */
DECL|struct|mii_phy
r_struct
id|mii_phy
(brace
DECL|member|def
r_struct
id|mii_phy_def
op_star
id|def
suffix:semicolon
DECL|member|advertising
r_int
id|advertising
suffix:semicolon
DECL|member|mii_id
r_int
id|mii_id
suffix:semicolon
multiline_comment|/* 1: autoneg enabled, 0: disabled */
DECL|member|autoneg
r_int
id|autoneg
suffix:semicolon
multiline_comment|/* forced speed &amp; duplex (no autoneg)&n;&t; * partner speed &amp; duplex &amp; pause (autoneg)&n;&t; */
DECL|member|speed
r_int
id|speed
suffix:semicolon
DECL|member|duplex
r_int
id|duplex
suffix:semicolon
DECL|member|pause
r_int
id|pause
suffix:semicolon
multiline_comment|/* PHY mode - if needed */
DECL|member|mode
r_int
id|mode
suffix:semicolon
multiline_comment|/* Provided by host chip */
DECL|member|dev
r_struct
id|net_device
op_star
id|dev
suffix:semicolon
DECL|member|mdio_read
r_int
(paren
op_star
id|mdio_read
)paren
(paren
r_struct
id|net_device
op_star
id|dev
comma
r_int
id|mii_id
comma
r_int
id|reg
)paren
suffix:semicolon
DECL|member|mdio_write
r_void
(paren
op_star
id|mdio_write
)paren
(paren
r_struct
id|net_device
op_star
id|dev
comma
r_int
id|mii_id
comma
r_int
id|reg
comma
r_int
id|val
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Pass in a struct mii_phy with dev, mdio_read and mdio_write&n; * filled, the remaining fields will be filled on return&n; */
r_extern
r_int
id|mii_phy_probe
c_func
(paren
r_struct
id|mii_phy
op_star
id|phy
comma
r_int
id|mii_id
)paren
suffix:semicolon
DECL|function|__phy_read
r_static
r_inline
r_int
id|__phy_read
c_func
(paren
r_struct
id|mii_phy
op_star
id|phy
comma
r_int
id|id
comma
r_int
id|reg
)paren
(brace
r_return
id|phy
op_member_access_from_pointer
id|mdio_read
c_func
(paren
id|phy-&gt;dev
comma
id|id
comma
id|reg
)paren
suffix:semicolon
)brace
DECL|function|__phy_write
r_static
r_inline
r_void
id|__phy_write
c_func
(paren
r_struct
id|mii_phy
op_star
id|phy
comma
r_int
id|id
comma
r_int
id|reg
comma
r_int
id|val
)paren
(brace
id|phy
op_member_access_from_pointer
id|mdio_write
c_func
(paren
id|phy-&gt;dev
comma
id|id
comma
id|reg
comma
id|val
)paren
suffix:semicolon
)brace
DECL|function|phy_read
r_static
r_inline
r_int
id|phy_read
c_func
(paren
r_struct
id|mii_phy
op_star
id|phy
comma
r_int
id|reg
)paren
(brace
r_return
id|phy
op_member_access_from_pointer
id|mdio_read
c_func
(paren
id|phy-&gt;dev
comma
id|phy-&gt;mii_id
comma
id|reg
)paren
suffix:semicolon
)brace
DECL|function|phy_write
r_static
r_inline
r_void
id|phy_write
c_func
(paren
r_struct
id|mii_phy
op_star
id|phy
comma
r_int
id|reg
comma
r_int
id|val
)paren
(brace
id|phy
op_member_access_from_pointer
id|mdio_write
c_func
(paren
id|phy-&gt;dev
comma
id|phy-&gt;mii_id
comma
id|reg
comma
id|val
)paren
suffix:semicolon
)brace
macro_line|#endif&t;&t;&t;&t;/* _IBM_EMAC_PHY_H_ */
eof
