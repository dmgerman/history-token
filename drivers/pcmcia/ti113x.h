multiline_comment|/*&n; * ti113x.h 1.16 1999/10/25 20:03:34&n; *&n; * The contents of this file are subject to the Mozilla Public License&n; * Version 1.1 (the &quot;License&quot;); you may not use this file except in&n; * compliance with the License. You may obtain a copy of the License&n; * at http://www.mozilla.org/MPL/&n; *&n; * Software distributed under the License is distributed on an &quot;AS IS&quot;&n; * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See&n; * the License for the specific language governing rights and&n; * limitations under the License. &n; *&n; * The initial developer of the original code is David A. Hinds&n; * &lt;dahinds@users.sourceforge.net&gt;.  Portions created by David A. Hinds&n; * are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.&n; *&n; * Alternatively, the contents of this file may be used under the&n; * terms of the GNU General Public License version 2 (the &quot;GPL&quot;), in which&n; * case the provisions of the GPL are applicable instead of the&n; * above.  If you wish to allow the use of your version of this file&n; * only under the terms of the GPL and not to allow others to use&n; * your version of this file under the MPL, indicate your decision by&n; * deleting the provisions above and replace them with the notice and&n; * other provisions required by the GPL.  If you do not delete the&n; * provisions above, a recipient may use your version of this file&n; * under either the MPL or the GPL.&n; */
macro_line|#ifndef _LINUX_TI113X_H
DECL|macro|_LINUX_TI113X_H
mdefine_line|#define _LINUX_TI113X_H
macro_line|#include &lt;linux/config.h&gt;
multiline_comment|/* Register definitions for TI 113X PCI-to-CardBus bridges */
multiline_comment|/* System Control Register */
DECL|macro|TI113X_SYSTEM_CONTROL
mdefine_line|#define TI113X_SYSTEM_CONTROL&t;&t;0x0080&t;/* 32 bit */
DECL|macro|TI113X_SCR_SMIROUTE
mdefine_line|#define  TI113X_SCR_SMIROUTE&t;&t;0x04000000
DECL|macro|TI113X_SCR_SMISTATUS
mdefine_line|#define  TI113X_SCR_SMISTATUS&t;&t;0x02000000
DECL|macro|TI113X_SCR_SMIENB
mdefine_line|#define  TI113X_SCR_SMIENB&t;&t;0x01000000
DECL|macro|TI113X_SCR_VCCPROT
mdefine_line|#define  TI113X_SCR_VCCPROT&t;&t;0x00200000
DECL|macro|TI113X_SCR_REDUCEZV
mdefine_line|#define  TI113X_SCR_REDUCEZV&t;&t;0x00100000
DECL|macro|TI113X_SCR_CDREQEN
mdefine_line|#define  TI113X_SCR_CDREQEN&t;&t;0x00080000
DECL|macro|TI113X_SCR_CDMACHAN
mdefine_line|#define  TI113X_SCR_CDMACHAN&t;&t;0x00070000
DECL|macro|TI113X_SCR_SOCACTIVE
mdefine_line|#define  TI113X_SCR_SOCACTIVE&t;&t;0x00002000
DECL|macro|TI113X_SCR_PWRSTREAM
mdefine_line|#define  TI113X_SCR_PWRSTREAM&t;&t;0x00000800
DECL|macro|TI113X_SCR_DELAYUP
mdefine_line|#define  TI113X_SCR_DELAYUP&t;&t;0x00000400
DECL|macro|TI113X_SCR_DELAYDOWN
mdefine_line|#define  TI113X_SCR_DELAYDOWN&t;&t;0x00000200
DECL|macro|TI113X_SCR_INTERROGATE
mdefine_line|#define  TI113X_SCR_INTERROGATE&t;&t;0x00000100
DECL|macro|TI113X_SCR_CLKRUN_SEL
mdefine_line|#define  TI113X_SCR_CLKRUN_SEL&t;&t;0x00000080
DECL|macro|TI113X_SCR_PWRSAVINGS
mdefine_line|#define  TI113X_SCR_PWRSAVINGS&t;&t;0x00000040
DECL|macro|TI113X_SCR_SUBSYSRW
mdefine_line|#define  TI113X_SCR_SUBSYSRW&t;&t;0x00000020
DECL|macro|TI113X_SCR_CB_DPAR
mdefine_line|#define  TI113X_SCR_CB_DPAR&t;&t;0x00000010
DECL|macro|TI113X_SCR_CDMA_EN
mdefine_line|#define  TI113X_SCR_CDMA_EN&t;&t;0x00000008
DECL|macro|TI113X_SCR_ASYNC_IRQ
mdefine_line|#define  TI113X_SCR_ASYNC_IRQ&t;&t;0x00000004
DECL|macro|TI113X_SCR_KEEPCLK
mdefine_line|#define  TI113X_SCR_KEEPCLK&t;&t;0x00000002
DECL|macro|TI113X_SCR_CLKRUN_ENA
mdefine_line|#define  TI113X_SCR_CLKRUN_ENA&t;&t;0x00000001  
DECL|macro|TI122X_SCR_SER_STEP
mdefine_line|#define  TI122X_SCR_SER_STEP&t;&t;0xc0000000
DECL|macro|TI122X_SCR_INTRTIE
mdefine_line|#define  TI122X_SCR_INTRTIE&t;&t;0x20000000
DECL|macro|TI122X_SCR_CBRSVD
mdefine_line|#define  TI122X_SCR_CBRSVD&t;&t;0x00400000
DECL|macro|TI122X_SCR_MRBURSTDN
mdefine_line|#define  TI122X_SCR_MRBURSTDN&t;&t;0x00008000
DECL|macro|TI122X_SCR_MRBURSTUP
mdefine_line|#define  TI122X_SCR_MRBURSTUP&t;&t;0x00004000
DECL|macro|TI122X_SCR_RIMUX
mdefine_line|#define  TI122X_SCR_RIMUX&t;&t;0x00000001
multiline_comment|/* Multimedia Control Register */
DECL|macro|TI1250_MULTIMEDIA_CTL
mdefine_line|#define TI1250_MULTIMEDIA_CTL&t;&t;0x0084&t;/* 8 bit */
DECL|macro|TI1250_MMC_ZVOUTEN
mdefine_line|#define  TI1250_MMC_ZVOUTEN&t;&t;0x80
DECL|macro|TI1250_MMC_PORTSEL
mdefine_line|#define  TI1250_MMC_PORTSEL&t;&t;0x40
DECL|macro|TI1250_MMC_ZVEN1
mdefine_line|#define  TI1250_MMC_ZVEN1&t;&t;0x02
DECL|macro|TI1250_MMC_ZVEN0
mdefine_line|#define  TI1250_MMC_ZVEN0&t;&t;0x01
DECL|macro|TI1250_GENERAL_STATUS
mdefine_line|#define TI1250_GENERAL_STATUS&t;&t;0x0085&t;/* 8 bit */
DECL|macro|TI1250_GPIO0_CONTROL
mdefine_line|#define TI1250_GPIO0_CONTROL&t;&t;0x0088&t;/* 8 bit */
DECL|macro|TI1250_GPIO1_CONTROL
mdefine_line|#define TI1250_GPIO1_CONTROL&t;&t;0x0089&t;/* 8 bit */
DECL|macro|TI1250_GPIO2_CONTROL
mdefine_line|#define TI1250_GPIO2_CONTROL&t;&t;0x008a&t;/* 8 bit */
DECL|macro|TI1250_GPIO3_CONTROL
mdefine_line|#define TI1250_GPIO3_CONTROL&t;&t;0x008b&t;/* 8 bit */
DECL|macro|TI1250_GPIO_MODE_MASK
mdefine_line|#define TI1250_GPIO_MODE_MASK&t;&t;0xc0
multiline_comment|/* IRQMUX/MFUNC Register */
DECL|macro|TI122X_MFUNC
mdefine_line|#define TI122X_MFUNC&t;&t;&t;0x008c&t;/* 32 bit */
DECL|macro|TI122X_MFUNC0_MASK
mdefine_line|#define TI122X_MFUNC0_MASK&t;&t;0x0000000f
DECL|macro|TI122X_MFUNC1_MASK
mdefine_line|#define TI122X_MFUNC1_MASK&t;&t;0x000000f0
DECL|macro|TI122X_MFUNC2_MASK
mdefine_line|#define TI122X_MFUNC2_MASK&t;&t;0x00000f00
DECL|macro|TI122X_MFUNC3_MASK
mdefine_line|#define TI122X_MFUNC3_MASK&t;&t;0x0000f000
DECL|macro|TI122X_MFUNC4_MASK
mdefine_line|#define TI122X_MFUNC4_MASK&t;&t;0x000f0000
DECL|macro|TI122X_MFUNC5_MASK
mdefine_line|#define TI122X_MFUNC5_MASK&t;&t;0x00f00000
DECL|macro|TI122X_MFUNC6_MASK
mdefine_line|#define TI122X_MFUNC6_MASK&t;&t;0x0f000000
DECL|macro|TI122X_MFUNC0_INTA
mdefine_line|#define TI122X_MFUNC0_INTA&t;&t;0x00000002
DECL|macro|TI125X_MFUNC0_INTB
mdefine_line|#define TI125X_MFUNC0_INTB&t;&t;0x00000001
DECL|macro|TI122X_MFUNC1_INTB
mdefine_line|#define TI122X_MFUNC1_INTB&t;&t;0x00000020
DECL|macro|TI122X_MFUNC3_IRQSER
mdefine_line|#define TI122X_MFUNC3_IRQSER&t;&t;0x00001000
multiline_comment|/* Retry Status Register */
DECL|macro|TI113X_RETRY_STATUS
mdefine_line|#define TI113X_RETRY_STATUS&t;&t;0x0090&t;/* 8 bit */
DECL|macro|TI113X_RSR_PCIRETRY
mdefine_line|#define  TI113X_RSR_PCIRETRY&t;&t;0x80
DECL|macro|TI113X_RSR_CBRETRY
mdefine_line|#define  TI113X_RSR_CBRETRY&t;&t;0x40
DECL|macro|TI113X_RSR_TEXP_CBB
mdefine_line|#define  TI113X_RSR_TEXP_CBB&t;&t;0x20
DECL|macro|TI113X_RSR_MEXP_CBB
mdefine_line|#define  TI113X_RSR_MEXP_CBB&t;&t;0x10
DECL|macro|TI113X_RSR_TEXP_CBA
mdefine_line|#define  TI113X_RSR_TEXP_CBA&t;&t;0x08
DECL|macro|TI113X_RSR_MEXP_CBA
mdefine_line|#define  TI113X_RSR_MEXP_CBA&t;&t;0x04
DECL|macro|TI113X_RSR_TEXP_PCI
mdefine_line|#define  TI113X_RSR_TEXP_PCI&t;&t;0x02
DECL|macro|TI113X_RSR_MEXP_PCI
mdefine_line|#define  TI113X_RSR_MEXP_PCI&t;&t;0x01
multiline_comment|/* Card Control Register */
DECL|macro|TI113X_CARD_CONTROL
mdefine_line|#define TI113X_CARD_CONTROL&t;&t;0x0091&t;/* 8 bit */
DECL|macro|TI113X_CCR_RIENB
mdefine_line|#define  TI113X_CCR_RIENB&t;&t;0x80
DECL|macro|TI113X_CCR_ZVENABLE
mdefine_line|#define  TI113X_CCR_ZVENABLE&t;&t;0x40
DECL|macro|TI113X_CCR_PCI_IRQ_ENA
mdefine_line|#define  TI113X_CCR_PCI_IRQ_ENA&t;&t;0x20
DECL|macro|TI113X_CCR_PCI_IREQ
mdefine_line|#define  TI113X_CCR_PCI_IREQ&t;&t;0x10
DECL|macro|TI113X_CCR_PCI_CSC
mdefine_line|#define  TI113X_CCR_PCI_CSC&t;&t;0x08
DECL|macro|TI113X_CCR_SPKROUTEN
mdefine_line|#define  TI113X_CCR_SPKROUTEN&t;&t;0x02
DECL|macro|TI113X_CCR_IFG
mdefine_line|#define  TI113X_CCR_IFG&t;&t;&t;0x01
DECL|macro|TI1220_CCR_PORT_SEL
mdefine_line|#define  TI1220_CCR_PORT_SEL&t;&t;0x20
DECL|macro|TI122X_CCR_AUD2MUX
mdefine_line|#define  TI122X_CCR_AUD2MUX&t;&t;0x04
multiline_comment|/* Device Control Register */
DECL|macro|TI113X_DEVICE_CONTROL
mdefine_line|#define TI113X_DEVICE_CONTROL&t;&t;0x0092&t;/* 8 bit */
DECL|macro|TI113X_DCR_5V_FORCE
mdefine_line|#define  TI113X_DCR_5V_FORCE&t;&t;0x40
DECL|macro|TI113X_DCR_3V_FORCE
mdefine_line|#define  TI113X_DCR_3V_FORCE&t;&t;0x20
DECL|macro|TI113X_DCR_IMODE_MASK
mdefine_line|#define  TI113X_DCR_IMODE_MASK&t;&t;0x06
DECL|macro|TI113X_DCR_IMODE_ISA
mdefine_line|#define  TI113X_DCR_IMODE_ISA&t;&t;0x02
DECL|macro|TI113X_DCR_IMODE_SERIAL
mdefine_line|#define  TI113X_DCR_IMODE_SERIAL&t;0x04
DECL|macro|TI12XX_DCR_IMODE_PCI_ONLY
mdefine_line|#define  TI12XX_DCR_IMODE_PCI_ONLY&t;0x00
DECL|macro|TI12XX_DCR_IMODE_ALL_SERIAL
mdefine_line|#define  TI12XX_DCR_IMODE_ALL_SERIAL&t;0x06
multiline_comment|/* Buffer Control Register */
DECL|macro|TI113X_BUFFER_CONTROL
mdefine_line|#define TI113X_BUFFER_CONTROL&t;&t;0x0093&t;/* 8 bit */
DECL|macro|TI113X_BCR_CB_READ_DEPTH
mdefine_line|#define  TI113X_BCR_CB_READ_DEPTH&t;0x08
DECL|macro|TI113X_BCR_CB_WRITE_DEPTH
mdefine_line|#define  TI113X_BCR_CB_WRITE_DEPTH&t;0x04
DECL|macro|TI113X_BCR_PCI_READ_DEPTH
mdefine_line|#define  TI113X_BCR_PCI_READ_DEPTH&t;0x02
DECL|macro|TI113X_BCR_PCI_WRITE_DEPTH
mdefine_line|#define  TI113X_BCR_PCI_WRITE_DEPTH&t;0x01
multiline_comment|/* Diagnostic Register */
DECL|macro|TI1250_DIAGNOSTIC
mdefine_line|#define TI1250_DIAGNOSTIC&t;&t;0x0093&t;/* 8 bit */
DECL|macro|TI1250_DIAG_TRUE_VALUE
mdefine_line|#define  TI1250_DIAG_TRUE_VALUE&t;&t;0x80
DECL|macro|TI1250_DIAG_PCI_IREQ
mdefine_line|#define  TI1250_DIAG_PCI_IREQ&t;&t;0x40
DECL|macro|TI1250_DIAG_PCI_CSC
mdefine_line|#define  TI1250_DIAG_PCI_CSC&t;&t;0x20
DECL|macro|TI1250_DIAG_ASYNC_CSC
mdefine_line|#define  TI1250_DIAG_ASYNC_CSC&t;&t;0x01
multiline_comment|/* DMA Registers */
DECL|macro|TI113X_DMA_0
mdefine_line|#define TI113X_DMA_0&t;&t;&t;0x0094&t;/* 32 bit */
DECL|macro|TI113X_DMA_1
mdefine_line|#define TI113X_DMA_1&t;&t;&t;0x0098&t;/* 32 bit */
multiline_comment|/* ExCA IO offset registers */
DECL|macro|TI113X_IO_OFFSET
mdefine_line|#define TI113X_IO_OFFSET(map)&t;&t;(0x36+((map)&lt;&lt;1))
multiline_comment|/* EnE test register */
DECL|macro|ENE_TEST_C9
mdefine_line|#define ENE_TEST_C9&t;&t;&t;0xc9&t;/* 8bit */
DECL|macro|ENE_TEST_C9_TLTENABLE
mdefine_line|#define ENE_TEST_C9_TLTENABLE&t;&t;0x02
macro_line|#ifdef CONFIG_CARDBUS
multiline_comment|/*&n; * Texas Instruments CardBus controller overrides.&n; */
DECL|macro|ti_sysctl
mdefine_line|#define ti_sysctl(socket)&t;((socket)-&gt;private[0])
DECL|macro|ti_cardctl
mdefine_line|#define ti_cardctl(socket)&t;((socket)-&gt;private[1])
DECL|macro|ti_devctl
mdefine_line|#define ti_devctl(socket)&t;((socket)-&gt;private[2])
DECL|macro|ti_diag
mdefine_line|#define ti_diag(socket)&t;&t;((socket)-&gt;private[3])
DECL|macro|ti_mfunc
mdefine_line|#define ti_mfunc(socket)&t;((socket)-&gt;private[4])
DECL|macro|ene_test_c9
mdefine_line|#define ene_test_c9(socket)&t;((socket)-&gt;private[5])
multiline_comment|/*&n; * These are the TI specific power management handlers.&n; */
DECL|function|ti_save_state
r_static
r_void
id|ti_save_state
c_func
(paren
r_struct
id|yenta_socket
op_star
id|socket
)paren
(brace
id|ti_sysctl
c_func
(paren
id|socket
)paren
op_assign
id|config_readl
c_func
(paren
id|socket
comma
id|TI113X_SYSTEM_CONTROL
)paren
suffix:semicolon
id|ti_mfunc
c_func
(paren
id|socket
)paren
op_assign
id|config_readl
c_func
(paren
id|socket
comma
id|TI122X_MFUNC
)paren
suffix:semicolon
id|ti_cardctl
c_func
(paren
id|socket
)paren
op_assign
id|config_readb
c_func
(paren
id|socket
comma
id|TI113X_CARD_CONTROL
)paren
suffix:semicolon
id|ti_devctl
c_func
(paren
id|socket
)paren
op_assign
id|config_readb
c_func
(paren
id|socket
comma
id|TI113X_DEVICE_CONTROL
)paren
suffix:semicolon
id|ti_diag
c_func
(paren
id|socket
)paren
op_assign
id|config_readb
c_func
(paren
id|socket
comma
id|TI1250_DIAGNOSTIC
)paren
suffix:semicolon
r_if
c_cond
(paren
id|socket-&gt;dev-&gt;vendor
op_eq
id|PCI_VENDOR_ID_ENE
)paren
id|ene_test_c9
c_func
(paren
id|socket
)paren
op_assign
id|config_readb
c_func
(paren
id|socket
comma
id|ENE_TEST_C9
)paren
suffix:semicolon
)brace
DECL|function|ti_restore_state
r_static
r_void
id|ti_restore_state
c_func
(paren
r_struct
id|yenta_socket
op_star
id|socket
)paren
(brace
id|config_writel
c_func
(paren
id|socket
comma
id|TI113X_SYSTEM_CONTROL
comma
id|ti_sysctl
c_func
(paren
id|socket
)paren
)paren
suffix:semicolon
id|config_writel
c_func
(paren
id|socket
comma
id|TI122X_MFUNC
comma
id|ti_mfunc
c_func
(paren
id|socket
)paren
)paren
suffix:semicolon
id|config_writeb
c_func
(paren
id|socket
comma
id|TI113X_CARD_CONTROL
comma
id|ti_cardctl
c_func
(paren
id|socket
)paren
)paren
suffix:semicolon
id|config_writeb
c_func
(paren
id|socket
comma
id|TI113X_DEVICE_CONTROL
comma
id|ti_devctl
c_func
(paren
id|socket
)paren
)paren
suffix:semicolon
id|config_writeb
c_func
(paren
id|socket
comma
id|TI1250_DIAGNOSTIC
comma
id|ti_diag
c_func
(paren
id|socket
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|socket-&gt;dev-&gt;vendor
op_eq
id|PCI_VENDOR_ID_ENE
)paren
id|config_writeb
c_func
(paren
id|socket
comma
id|ENE_TEST_C9
comma
id|ene_test_c9
c_func
(paren
id|socket
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; *&t;Zoom video control for TI122x/113x chips&n; */
DECL|function|ti_zoom_video
r_static
r_void
id|ti_zoom_video
c_func
(paren
r_struct
id|pcmcia_socket
op_star
id|sock
comma
r_int
id|onoff
)paren
(brace
id|u8
id|reg
suffix:semicolon
r_struct
id|yenta_socket
op_star
id|socket
op_assign
id|container_of
c_func
(paren
id|sock
comma
r_struct
id|yenta_socket
comma
id|socket
)paren
suffix:semicolon
multiline_comment|/* If we don&squot;t have a Zoom Video switch this is harmless,&n;&t;   we just tristate the unused (ZV) lines */
id|reg
op_assign
id|config_readb
c_func
(paren
id|socket
comma
id|TI113X_CARD_CONTROL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|onoff
)paren
multiline_comment|/* Zoom zoom, we will all go together, zoom zoom, zoom zoom */
id|reg
op_or_assign
id|TI113X_CCR_ZVENABLE
suffix:semicolon
r_else
id|reg
op_and_assign
op_complement
id|TI113X_CCR_ZVENABLE
suffix:semicolon
id|config_writeb
c_func
(paren
id|socket
comma
id|TI113X_CARD_CONTROL
comma
id|reg
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; *&t;The 145x series can also use this. They have an additional&n; *&t;ZV autodetect mode we don&squot;t use but don&squot;t actually need.&n; *&t;FIXME: manual says its in func0 and func1 but disagrees with&n; *&t;itself about this - do we need to force func0, if so we need&n; *&t;to know a lot more about socket pairings in pcmcia_socket than&n; *&t;we do now.. uggh.&n; */
DECL|function|ti1250_zoom_video
r_static
r_void
id|ti1250_zoom_video
c_func
(paren
r_struct
id|pcmcia_socket
op_star
id|sock
comma
r_int
id|onoff
)paren
(brace
r_struct
id|yenta_socket
op_star
id|socket
op_assign
id|container_of
c_func
(paren
id|sock
comma
r_struct
id|yenta_socket
comma
id|socket
)paren
suffix:semicolon
r_int
id|shift
op_assign
l_int|0
suffix:semicolon
id|u8
id|reg
suffix:semicolon
id|ti_zoom_video
c_func
(paren
id|sock
comma
id|onoff
)paren
suffix:semicolon
id|reg
op_assign
id|config_readb
c_func
(paren
id|socket
comma
id|TI1250_MULTIMEDIA_CTL
)paren
suffix:semicolon
id|reg
op_or_assign
id|TI1250_MMC_ZVOUTEN
suffix:semicolon
multiline_comment|/* ZV bus enable */
r_if
c_cond
(paren
id|PCI_FUNC
c_func
(paren
id|socket-&gt;dev-&gt;devfn
)paren
op_eq
l_int|1
)paren
(brace
id|shift
op_assign
l_int|1
suffix:semicolon
)brace
r_if
c_cond
(paren
id|onoff
)paren
(brace
id|reg
op_and_assign
op_complement
(paren
l_int|1
op_lshift
l_int|6
)paren
suffix:semicolon
multiline_comment|/* Clear select bit */
id|reg
op_or_assign
id|shift
op_lshift
l_int|6
suffix:semicolon
multiline_comment|/* Favour our socket */
id|reg
op_or_assign
l_int|1
op_lshift
id|shift
suffix:semicolon
multiline_comment|/* Socket zoom video on */
)brace
r_else
(brace
id|reg
op_and_assign
op_complement
(paren
l_int|1
op_lshift
l_int|6
)paren
suffix:semicolon
multiline_comment|/* Clear select bit */
id|reg
op_or_assign
(paren
l_int|1
op_xor
id|shift
)paren
op_lshift
l_int|6
suffix:semicolon
multiline_comment|/* Favour other socket */
id|reg
op_and_assign
op_complement
(paren
l_int|1
op_lshift
id|shift
)paren
suffix:semicolon
multiline_comment|/* Socket zoon video off */
)brace
id|config_writeb
c_func
(paren
id|socket
comma
id|TI1250_MULTIMEDIA_CTL
comma
id|reg
)paren
suffix:semicolon
)brace
DECL|function|ti_set_zv
r_static
r_void
id|ti_set_zv
c_func
(paren
r_struct
id|yenta_socket
op_star
id|socket
)paren
(brace
r_if
c_cond
(paren
id|socket-&gt;dev-&gt;vendor
op_eq
id|PCI_VENDOR_ID_TI
)paren
(brace
r_switch
c_cond
(paren
id|socket-&gt;dev-&gt;device
)paren
(brace
multiline_comment|/* There may be more .. */
r_case
id|PCI_DEVICE_ID_TI_1220
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_1221
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_1225
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_4510
suffix:colon
id|socket-&gt;socket.zoom_video
op_assign
id|ti_zoom_video
suffix:semicolon
r_break
suffix:semicolon
r_case
id|PCI_DEVICE_ID_TI_1250
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_1251A
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_1251B
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_1450
suffix:colon
id|socket-&gt;socket.zoom_video
op_assign
id|ti1250_zoom_video
suffix:semicolon
)brace
)brace
)brace
multiline_comment|/*&n; * Generic TI init - TI has an extension for the&n; * INTCTL register that sets the PCI CSC interrupt.&n; * Make sure we set it correctly at open and init&n; * time&n; * - override: disable the PCI CSC interrupt. This makes&n; *   it possible to use the CSC interrupt to probe the&n; *   ISA interrupts.&n; * - init: set the interrupt to match our PCI state.&n; *   This makes us correctly get PCI CSC interrupt&n; *   events.&n; */
DECL|function|ti_init
r_static
r_int
id|ti_init
c_func
(paren
r_struct
id|yenta_socket
op_star
id|socket
)paren
(brace
id|u8
r_new
comma
id|reg
op_assign
id|exca_readb
c_func
(paren
id|socket
comma
id|I365_INTCTL
)paren
suffix:semicolon
r_new
op_assign
id|reg
op_amp
op_complement
id|I365_INTR_ENA
suffix:semicolon
r_if
c_cond
(paren
id|socket-&gt;cb_irq
)paren
r_new
op_or_assign
id|I365_INTR_ENA
suffix:semicolon
r_if
c_cond
(paren
r_new
op_ne
id|reg
)paren
id|exca_writeb
c_func
(paren
id|socket
comma
id|I365_INTCTL
comma
r_new
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|ti_override
r_static
r_int
id|ti_override
c_func
(paren
r_struct
id|yenta_socket
op_star
id|socket
)paren
(brace
id|u8
r_new
comma
id|reg
op_assign
id|exca_readb
c_func
(paren
id|socket
comma
id|I365_INTCTL
)paren
suffix:semicolon
r_new
op_assign
id|reg
op_amp
op_complement
id|I365_INTR_ENA
suffix:semicolon
r_if
c_cond
(paren
r_new
op_ne
id|reg
)paren
id|exca_writeb
c_func
(paren
id|socket
comma
id|I365_INTCTL
comma
r_new
)paren
suffix:semicolon
id|ti_set_zv
c_func
(paren
id|socket
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|ti113x_override
r_static
r_int
id|ti113x_override
c_func
(paren
r_struct
id|yenta_socket
op_star
id|socket
)paren
(brace
id|u8
id|cardctl
suffix:semicolon
id|cardctl
op_assign
id|config_readb
c_func
(paren
id|socket
comma
id|TI113X_CARD_CONTROL
)paren
suffix:semicolon
id|cardctl
op_and_assign
op_complement
(paren
id|TI113X_CCR_PCI_IRQ_ENA
op_or
id|TI113X_CCR_PCI_IREQ
op_or
id|TI113X_CCR_PCI_CSC
)paren
suffix:semicolon
r_if
c_cond
(paren
id|socket-&gt;cb_irq
)paren
id|cardctl
op_or_assign
id|TI113X_CCR_PCI_IRQ_ENA
op_or
id|TI113X_CCR_PCI_CSC
op_or
id|TI113X_CCR_PCI_IREQ
suffix:semicolon
id|config_writeb
c_func
(paren
id|socket
comma
id|TI113X_CARD_CONTROL
comma
id|cardctl
)paren
suffix:semicolon
r_return
id|ti_override
c_func
(paren
id|socket
)paren
suffix:semicolon
)brace
multiline_comment|/* irqrouting for func0, probes PCI interrupt and ISA interrupts */
DECL|function|ti12xx_irqroute_func0
r_static
r_void
id|ti12xx_irqroute_func0
c_func
(paren
r_struct
id|yenta_socket
op_star
id|socket
)paren
(brace
id|u32
id|mfunc
comma
id|mfunc_old
comma
id|devctl
suffix:semicolon
id|u8
id|gpio3
comma
id|gpio3_old
suffix:semicolon
r_int
id|pci_irq_status
suffix:semicolon
id|mfunc
op_assign
id|mfunc_old
op_assign
id|config_readl
c_func
(paren
id|socket
comma
id|TI122X_MFUNC
)paren
suffix:semicolon
id|devctl
op_assign
id|config_readb
c_func
(paren
id|socket
comma
id|TI113X_DEVICE_CONTROL
)paren
suffix:semicolon
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta TI: socket %s, mfunc 0x%08x, devctl 0x%02x&bslash;n&quot;
comma
id|pci_name
c_func
(paren
id|socket-&gt;dev
)paren
comma
id|mfunc
comma
id|devctl
)paren
suffix:semicolon
multiline_comment|/* make sure PCI interrupts are enabled before probing */
id|ti_init
c_func
(paren
id|socket
)paren
suffix:semicolon
multiline_comment|/* test PCI interrupts first. only try fixing if return value is 0! */
id|pci_irq_status
op_assign
id|yenta_probe_cb_irq
c_func
(paren
id|socket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pci_irq_status
)paren
r_goto
id|out
suffix:semicolon
multiline_comment|/*&n;&t; * We&squot;re here which means PCI interrupts are _not_ delivered. try to&n;&t; * find the right setting (all serial or parallel)&n;&t; */
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta TI: socket %s probing PCI interrupt failed, trying to fix&bslash;n&quot;
comma
id|pci_name
c_func
(paren
id|socket-&gt;dev
)paren
)paren
suffix:semicolon
multiline_comment|/* for serial PCI make sure MFUNC3 is set to IRQSER */
r_if
c_cond
(paren
(paren
id|devctl
op_amp
id|TI113X_DCR_IMODE_MASK
)paren
op_eq
id|TI12XX_DCR_IMODE_ALL_SERIAL
)paren
(brace
r_switch
c_cond
(paren
id|socket-&gt;dev-&gt;device
)paren
(brace
r_case
id|PCI_DEVICE_ID_TI_1250
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_1251A
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_1251B
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_1450
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_1451A
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_4450
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_4451
suffix:colon
multiline_comment|/* these chips have no IRQSER setting in MFUNC3  */
r_break
suffix:semicolon
r_default
suffix:colon
id|mfunc
op_assign
(paren
id|mfunc
op_amp
op_complement
id|TI122X_MFUNC3_MASK
)paren
op_or
id|TI122X_MFUNC3_IRQSER
suffix:semicolon
multiline_comment|/* write down if changed, probe */
r_if
c_cond
(paren
id|mfunc
op_ne
id|mfunc_old
)paren
(brace
id|config_writel
c_func
(paren
id|socket
comma
id|TI122X_MFUNC
comma
id|mfunc
)paren
suffix:semicolon
id|pci_irq_status
op_assign
id|yenta_probe_cb_irq
c_func
(paren
id|socket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pci_irq_status
op_eq
l_int|1
)paren
(brace
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta TI: socket %s all-serial interrupts ok&bslash;n&quot;
comma
id|pci_name
c_func
(paren
id|socket-&gt;dev
)paren
)paren
suffix:semicolon
id|mfunc_old
op_assign
id|mfunc
suffix:semicolon
r_goto
id|out
suffix:semicolon
)brace
multiline_comment|/* not working, back to old value */
id|mfunc
op_assign
id|mfunc_old
suffix:semicolon
id|config_writel
c_func
(paren
id|socket
comma
id|TI122X_MFUNC
comma
id|mfunc
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pci_irq_status
op_eq
op_minus
l_int|1
)paren
r_goto
id|out
suffix:semicolon
)brace
)brace
multiline_comment|/* serial PCI interrupts not working fall back to parallel */
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta TI: socket %s falling back to parallel PCI interrupts&bslash;n&quot;
comma
id|pci_name
c_func
(paren
id|socket-&gt;dev
)paren
)paren
suffix:semicolon
id|devctl
op_and_assign
op_complement
id|TI113X_DCR_IMODE_MASK
suffix:semicolon
id|devctl
op_or_assign
id|TI113X_DCR_IMODE_SERIAL
suffix:semicolon
multiline_comment|/* serial ISA could be right */
id|config_writeb
c_func
(paren
id|socket
comma
id|TI113X_DEVICE_CONTROL
comma
id|devctl
)paren
suffix:semicolon
)brace
multiline_comment|/* parallel PCI interrupts: route INTA */
r_switch
c_cond
(paren
id|socket-&gt;dev-&gt;device
)paren
(brace
r_case
id|PCI_DEVICE_ID_TI_1250
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_1251A
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_1251B
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_1450
suffix:colon
multiline_comment|/* make sure GPIO3 is set to INTA */
id|gpio3
op_assign
id|gpio3_old
op_assign
id|config_readb
c_func
(paren
id|socket
comma
id|TI1250_GPIO3_CONTROL
)paren
suffix:semicolon
id|gpio3
op_and_assign
op_complement
id|TI1250_GPIO_MODE_MASK
suffix:semicolon
r_if
c_cond
(paren
id|gpio3
op_ne
id|gpio3_old
)paren
id|config_writeb
c_func
(paren
id|socket
comma
id|TI1250_GPIO3_CONTROL
comma
id|gpio3
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|gpio3
op_assign
id|gpio3_old
op_assign
l_int|0
suffix:semicolon
id|mfunc
op_assign
(paren
id|mfunc
op_amp
op_complement
id|TI122X_MFUNC0_MASK
)paren
op_or
id|TI122X_MFUNC0_INTA
suffix:semicolon
r_if
c_cond
(paren
id|mfunc
op_ne
id|mfunc_old
)paren
id|config_writel
c_func
(paren
id|socket
comma
id|TI122X_MFUNC
comma
id|mfunc
)paren
suffix:semicolon
)brace
multiline_comment|/* time to probe again */
id|pci_irq_status
op_assign
id|yenta_probe_cb_irq
c_func
(paren
id|socket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pci_irq_status
op_eq
l_int|1
)paren
(brace
id|mfunc_old
op_assign
id|mfunc
suffix:semicolon
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta TI: socket %s parallel PCI interrupts ok&bslash;n&quot;
comma
id|pci_name
c_func
(paren
id|socket-&gt;dev
)paren
)paren
suffix:semicolon
)brace
r_else
(brace
multiline_comment|/* not working, back to old value */
id|mfunc
op_assign
id|mfunc_old
suffix:semicolon
id|config_writel
c_func
(paren
id|socket
comma
id|TI122X_MFUNC
comma
id|mfunc
)paren
suffix:semicolon
r_if
c_cond
(paren
id|gpio3
op_ne
id|gpio3_old
)paren
id|config_writeb
c_func
(paren
id|socket
comma
id|TI1250_GPIO3_CONTROL
comma
id|gpio3_old
)paren
suffix:semicolon
)brace
id|out
suffix:colon
r_if
c_cond
(paren
id|pci_irq_status
OL
l_int|1
)paren
(brace
id|socket-&gt;cb_irq
op_assign
l_int|0
suffix:semicolon
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta TI: socket %s no PCI interrupts. Fish. Please report.&bslash;n&quot;
comma
id|pci_name
c_func
(paren
id|socket-&gt;dev
)paren
)paren
suffix:semicolon
)brace
)brace
multiline_comment|/*&n; * ties INTA and INTB together. also changes the devices irq to that of&n; * the function 0 device. call from func1 only.&n; * returns 1 if INTRTIE changed, 0 otherwise.&n; */
DECL|function|ti12xx_tie_interrupts
r_static
r_int
id|ti12xx_tie_interrupts
c_func
(paren
r_struct
id|yenta_socket
op_star
id|socket
comma
r_int
op_star
id|old_irq
)paren
(brace
r_struct
id|pci_dev
op_star
id|func0
suffix:semicolon
id|u32
id|sysctl
suffix:semicolon
id|sysctl
op_assign
id|config_readl
c_func
(paren
id|socket
comma
id|TI113X_SYSTEM_CONTROL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|sysctl
op_amp
id|TI122X_SCR_INTRTIE
)paren
r_return
l_int|0
suffix:semicolon
multiline_comment|/* find func0 device */
id|func0
op_assign
id|pci_get_slot
c_func
(paren
id|socket-&gt;dev-&gt;bus
comma
id|socket-&gt;dev-&gt;devfn
op_amp
op_complement
l_int|0x07
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|func0
)paren
r_return
l_int|0
suffix:semicolon
multiline_comment|/* change the interrupt to match func0, tie &squot;em up */
op_star
id|old_irq
op_assign
id|socket-&gt;cb_irq
suffix:semicolon
id|socket-&gt;cb_irq
op_assign
id|socket-&gt;dev-&gt;irq
op_assign
id|func0-&gt;irq
suffix:semicolon
id|sysctl
op_or_assign
id|TI122X_SCR_INTRTIE
suffix:semicolon
id|config_writel
c_func
(paren
id|socket
comma
id|TI113X_SYSTEM_CONTROL
comma
id|sysctl
)paren
suffix:semicolon
id|pci_dev_put
c_func
(paren
id|func0
)paren
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
multiline_comment|/* undo what ti12xx_tie_interrupts() did */
DECL|function|ti12xx_untie_interrupts
r_static
r_void
id|ti12xx_untie_interrupts
c_func
(paren
r_struct
id|yenta_socket
op_star
id|socket
comma
r_int
id|old_irq
)paren
(brace
id|u32
id|sysctl
op_assign
id|config_readl
c_func
(paren
id|socket
comma
id|TI113X_SYSTEM_CONTROL
)paren
suffix:semicolon
id|sysctl
op_and_assign
op_complement
id|TI122X_SCR_INTRTIE
suffix:semicolon
id|config_writel
c_func
(paren
id|socket
comma
id|TI113X_SYSTEM_CONTROL
comma
id|sysctl
)paren
suffix:semicolon
id|socket-&gt;cb_irq
op_assign
id|socket-&gt;dev-&gt;irq
op_assign
id|old_irq
suffix:semicolon
)brace
multiline_comment|/* &n; * irqrouting for func1, plays with INTB routing&n; * only touches MFUNC for INTB routing. all other bits are taken&n; * care of in func0 already.&n; */
DECL|function|ti12xx_irqroute_func1
r_static
r_void
id|ti12xx_irqroute_func1
c_func
(paren
r_struct
id|yenta_socket
op_star
id|socket
)paren
(brace
id|u32
id|mfunc
comma
id|mfunc_old
comma
id|devctl
suffix:semicolon
r_int
id|pci_irq_status
suffix:semicolon
id|mfunc
op_assign
id|mfunc_old
op_assign
id|config_readl
c_func
(paren
id|socket
comma
id|TI122X_MFUNC
)paren
suffix:semicolon
id|devctl
op_assign
id|config_readb
c_func
(paren
id|socket
comma
id|TI113X_DEVICE_CONTROL
)paren
suffix:semicolon
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta TI: socket %s, mfunc 0x%08x, devctl 0x%02x&bslash;n&quot;
comma
id|pci_name
c_func
(paren
id|socket-&gt;dev
)paren
comma
id|mfunc
comma
id|devctl
)paren
suffix:semicolon
multiline_comment|/* make sure PCI interrupts are enabled before probing */
id|ti_init
c_func
(paren
id|socket
)paren
suffix:semicolon
multiline_comment|/* test PCI interrupts first. only try fixing if return value is 0! */
id|pci_irq_status
op_assign
id|yenta_probe_cb_irq
c_func
(paren
id|socket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pci_irq_status
)paren
r_goto
id|out
suffix:semicolon
multiline_comment|/*&n;&t; * We&squot;re here which means PCI interrupts are _not_ delivered. try to&n;&t; * find the right setting&n;&t; */
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta TI: socket %s probing PCI interrupt failed, trying to fix&bslash;n&quot;
comma
id|pci_name
c_func
(paren
id|socket-&gt;dev
)paren
)paren
suffix:semicolon
multiline_comment|/* if all serial: set INTRTIE, probe again */
r_if
c_cond
(paren
(paren
id|devctl
op_amp
id|TI113X_DCR_IMODE_MASK
)paren
op_eq
id|TI12XX_DCR_IMODE_ALL_SERIAL
)paren
(brace
r_int
id|old_irq
suffix:semicolon
r_if
c_cond
(paren
id|ti12xx_tie_interrupts
c_func
(paren
id|socket
comma
op_amp
id|old_irq
)paren
)paren
(brace
id|pci_irq_status
op_assign
id|yenta_probe_cb_irq
c_func
(paren
id|socket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pci_irq_status
op_eq
l_int|1
)paren
(brace
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta TI: socket %s all-serial interrupts, tied ok&bslash;n&quot;
comma
id|pci_name
c_func
(paren
id|socket-&gt;dev
)paren
)paren
suffix:semicolon
r_goto
id|out
suffix:semicolon
)brace
id|ti12xx_untie_interrupts
c_func
(paren
id|socket
comma
id|old_irq
)paren
suffix:semicolon
)brace
)brace
multiline_comment|/* parallel PCI: route INTB, probe again */
r_else
(brace
r_int
id|old_irq
suffix:semicolon
r_switch
c_cond
(paren
id|socket-&gt;dev-&gt;device
)paren
(brace
r_case
id|PCI_DEVICE_ID_TI_1250
suffix:colon
multiline_comment|/* the 1250 has one pin for IRQSER/INTB depending on devctl */
r_break
suffix:semicolon
r_case
id|PCI_DEVICE_ID_TI_1251A
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_1251B
suffix:colon
r_case
id|PCI_DEVICE_ID_TI_1450
suffix:colon
multiline_comment|/*&n;&t;&t;&t; *  those have a pin for IRQSER/INTB plus INTB in MFUNC0&n;&t;&t;&t; *  we alread probed the shared pin, now go for MFUNC0&n;&t;&t;&t; */
id|mfunc
op_assign
(paren
id|mfunc
op_amp
op_complement
id|TI122X_MFUNC0_MASK
)paren
op_or
id|TI125X_MFUNC0_INTB
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|mfunc
op_assign
(paren
id|mfunc
op_amp
op_complement
id|TI122X_MFUNC1_MASK
)paren
op_or
id|TI122X_MFUNC1_INTB
suffix:semicolon
r_break
suffix:semicolon
)brace
multiline_comment|/* write, probe */
r_if
c_cond
(paren
id|mfunc
op_ne
id|mfunc_old
)paren
(brace
id|config_writel
c_func
(paren
id|socket
comma
id|TI122X_MFUNC
comma
id|mfunc
)paren
suffix:semicolon
id|pci_irq_status
op_assign
id|yenta_probe_cb_irq
c_func
(paren
id|socket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pci_irq_status
op_eq
l_int|1
)paren
(brace
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta TI: socket %s parallel PCI interrupts ok&bslash;n&quot;
comma
id|pci_name
c_func
(paren
id|socket-&gt;dev
)paren
)paren
suffix:semicolon
r_goto
id|out
suffix:semicolon
)brace
id|mfunc
op_assign
id|mfunc_old
suffix:semicolon
id|config_writel
c_func
(paren
id|socket
comma
id|TI122X_MFUNC
comma
id|mfunc
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pci_irq_status
op_eq
op_minus
l_int|1
)paren
r_goto
id|out
suffix:semicolon
)brace
multiline_comment|/* still nothing: set INTRTIE */
r_if
c_cond
(paren
id|ti12xx_tie_interrupts
c_func
(paren
id|socket
comma
op_amp
id|old_irq
)paren
)paren
(brace
id|pci_irq_status
op_assign
id|yenta_probe_cb_irq
c_func
(paren
id|socket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pci_irq_status
op_eq
l_int|1
)paren
(brace
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta TI: socket %s parallel PCI interrupts, tied ok&bslash;n&quot;
comma
id|pci_name
c_func
(paren
id|socket-&gt;dev
)paren
)paren
suffix:semicolon
r_goto
id|out
suffix:semicolon
)brace
id|ti12xx_untie_interrupts
c_func
(paren
id|socket
comma
id|old_irq
)paren
suffix:semicolon
)brace
)brace
id|out
suffix:colon
r_if
c_cond
(paren
id|pci_irq_status
OL
l_int|1
)paren
(brace
id|socket-&gt;cb_irq
op_assign
l_int|0
suffix:semicolon
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta TI: socket %s no PCI interrupts. Fish. Please report.&bslash;n&quot;
comma
id|pci_name
c_func
(paren
id|socket-&gt;dev
)paren
)paren
suffix:semicolon
)brace
)brace
DECL|function|ti12xx_override
r_static
r_int
id|ti12xx_override
c_func
(paren
r_struct
id|yenta_socket
op_star
id|socket
)paren
(brace
id|u32
id|val
comma
id|val_orig
suffix:semicolon
multiline_comment|/* make sure that memory burst is active */
id|val_orig
op_assign
id|val
op_assign
id|config_readl
c_func
(paren
id|socket
comma
id|TI113X_SYSTEM_CONTROL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|disable_clkrun
op_logical_and
id|PCI_FUNC
c_func
(paren
id|socket-&gt;dev-&gt;devfn
)paren
op_eq
l_int|0
)paren
(brace
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta: Disabling CLKRUN feature&bslash;n&quot;
)paren
suffix:semicolon
id|val
op_or_assign
id|TI113X_SCR_KEEPCLK
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
(paren
id|val
op_amp
id|TI122X_SCR_MRBURSTUP
)paren
)paren
(brace
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta: Enabling burst memory read transactions&bslash;n&quot;
)paren
suffix:semicolon
id|val
op_or_assign
id|TI122X_SCR_MRBURSTUP
suffix:semicolon
)brace
r_if
c_cond
(paren
id|val_orig
op_ne
id|val
)paren
id|config_writel
c_func
(paren
id|socket
comma
id|TI113X_SYSTEM_CONTROL
comma
id|val
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * for EnE bridges only: clear testbit TLTEnable. this makes the&n;&t; * RME Hammerfall DSP sound card working.&n;&t; */
r_if
c_cond
(paren
id|socket-&gt;dev-&gt;vendor
op_eq
id|PCI_VENDOR_ID_ENE
)paren
(brace
id|u8
id|test_c9
op_assign
id|config_readb
c_func
(paren
id|socket
comma
id|ENE_TEST_C9
)paren
suffix:semicolon
id|test_c9
op_and_assign
op_complement
id|ENE_TEST_C9_TLTENABLE
suffix:semicolon
id|config_writeb
c_func
(paren
id|socket
comma
id|ENE_TEST_C9
comma
id|test_c9
)paren
suffix:semicolon
)brace
multiline_comment|/*&n;&t; * Yenta expects controllers to use CSCINT to route&n;&t; * CSC interrupts to PCI rather than INTVAL.&n;&t; */
id|val
op_assign
id|config_readb
c_func
(paren
id|socket
comma
id|TI1250_DIAGNOSTIC
)paren
suffix:semicolon
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta: Using %s to route CSC interrupts to PCI&bslash;n&quot;
comma
(paren
id|val
op_amp
id|TI1250_DIAG_PCI_CSC
)paren
ques
c_cond
l_string|&quot;CSCINT&quot;
suffix:colon
l_string|&quot;INTVAL&quot;
)paren
suffix:semicolon
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta: Routing CardBus interrupts to %s&bslash;n&quot;
comma
(paren
id|val
op_amp
id|TI1250_DIAG_PCI_IREQ
)paren
ques
c_cond
l_string|&quot;PCI&quot;
suffix:colon
l_string|&quot;ISA&quot;
)paren
suffix:semicolon
multiline_comment|/* do irqrouting, depending on function */
r_if
c_cond
(paren
id|PCI_FUNC
c_func
(paren
id|socket-&gt;dev-&gt;devfn
)paren
op_eq
l_int|0
)paren
id|ti12xx_irqroute_func0
c_func
(paren
id|socket
)paren
suffix:semicolon
r_else
id|ti12xx_irqroute_func1
c_func
(paren
id|socket
)paren
suffix:semicolon
r_return
id|ti_override
c_func
(paren
id|socket
)paren
suffix:semicolon
)brace
DECL|function|ti1250_override
r_static
r_int
id|ti1250_override
c_func
(paren
r_struct
id|yenta_socket
op_star
id|socket
)paren
(brace
id|u8
id|old
comma
id|diag
suffix:semicolon
id|old
op_assign
id|config_readb
c_func
(paren
id|socket
comma
id|TI1250_DIAGNOSTIC
)paren
suffix:semicolon
id|diag
op_assign
id|old
op_amp
op_complement
(paren
id|TI1250_DIAG_PCI_CSC
op_or
id|TI1250_DIAG_PCI_IREQ
)paren
suffix:semicolon
r_if
c_cond
(paren
id|socket-&gt;cb_irq
)paren
id|diag
op_or_assign
id|TI1250_DIAG_PCI_CSC
op_or
id|TI1250_DIAG_PCI_IREQ
suffix:semicolon
r_if
c_cond
(paren
id|diag
op_ne
id|old
)paren
(brace
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Yenta: adjusting diagnostic: %02x -&gt; %02x&bslash;n&quot;
comma
id|old
comma
id|diag
)paren
suffix:semicolon
id|config_writeb
c_func
(paren
id|socket
comma
id|TI1250_DIAGNOSTIC
comma
id|diag
)paren
suffix:semicolon
)brace
r_return
id|ti12xx_override
c_func
(paren
id|socket
)paren
suffix:semicolon
)brace
macro_line|#endif /* CONFIG_CARDBUS */
macro_line|#endif /* _LINUX_TI113X_H */
eof
