multiline_comment|/*&n; * generic helper functions for video4linux capture buffers, to handle&n; * memory management and PCI DMA.  Right now bttv + saa7134 use it.&n; *&n; * The functions expect the hardware being able to scatter gatter&n; * (i.e. the buffers are not linear in physical memory, but fragmented&n; * into PAGE_SIZE chunks).  They also assume the driver does not need&n; * to touch the video data (thus it is probably not useful for USB as&n; * data often must be uncompressed by the drivers).&n; * &n; * (c) 2001,02 Gerd Knorr &lt;kraxel@bytesex.org&gt;&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2 of the License, or&n; * (at your option) any later version.&n; */
macro_line|#include &lt;linux/videodev.h&gt;
multiline_comment|/* --------------------------------------------------------------------- */
multiline_comment|/*&n; * Return a scatterlist for some page-aligned vmalloc()&squot;ed memory&n; * block (NULL on errors).  Memory for the scatterlist is allocated&n; * using kmalloc.  The caller must free the memory.&n; */
r_struct
id|scatterlist
op_star
id|videobuf_vmalloc_to_sg
c_func
(paren
r_int
r_char
op_star
id|virt
comma
r_int
id|nr_pages
)paren
suffix:semicolon
multiline_comment|/*&n; * Return a scatterlist for a locked iobuf (NULL on errors).  Memory&n; * for the scatterlist is allocated using kmalloc.  The caller must&n; * free the memory.&n; */
r_struct
id|scatterlist
op_star
id|videobuf_iobuf_to_sg
c_func
(paren
r_struct
id|kiobuf
op_star
id|iobuf
)paren
suffix:semicolon
multiline_comment|/* --------------------------------------------------------------------- */
multiline_comment|/*&n; * A small set of helper functions to manage buffers (both userland&n; * and kernel) for DMA.&n; *&n; * videobuf_init_*_dmabuf()&n; *&t;creates a buffer.  The userland version takes a userspace&n; *&t;pointer + length.  The kernel version just wants the size and&n; *&t;does memory allocation too using vmalloc_32().&n; *&n; * videobuf_pci_*_dmabuf()&n; *&t;see Documentation/DMA-mapping.txt, these functions to&n; *&t;basically the same.  The map function does also build a&n; *&t;scatterlist for the buffer (and unmap frees it ...)&n; *&n; * videobuf_free_dmabuf()&n; *&t;no comment ...&n; *&n; */
DECL|struct|videobuf_dmabuf
r_struct
id|videobuf_dmabuf
(brace
multiline_comment|/* for userland buffer */
DECL|member|iobuf
r_struct
id|kiobuf
op_star
id|iobuf
suffix:semicolon
multiline_comment|/* for kernel buffers */
DECL|member|vmalloc
r_void
op_star
id|vmalloc
suffix:semicolon
multiline_comment|/* common */
DECL|member|sglist
r_struct
id|scatterlist
op_star
id|sglist
suffix:semicolon
DECL|member|sglen
r_int
id|sglen
suffix:semicolon
DECL|member|nr_pages
r_int
id|nr_pages
suffix:semicolon
DECL|member|direction
r_int
id|direction
suffix:semicolon
)brace
suffix:semicolon
r_int
id|videobuf_dma_init_user
c_func
(paren
r_struct
id|videobuf_dmabuf
op_star
id|dma
comma
r_int
id|direction
comma
r_int
r_int
id|data
comma
r_int
r_int
id|size
)paren
suffix:semicolon
r_int
id|videobuf_dma_init_kernel
c_func
(paren
r_struct
id|videobuf_dmabuf
op_star
id|dma
comma
r_int
id|direction
comma
r_int
id|nr_pages
)paren
suffix:semicolon
r_int
id|videobuf_dma_pci_map
c_func
(paren
r_struct
id|pci_dev
op_star
id|dev
comma
r_struct
id|videobuf_dmabuf
op_star
id|dma
)paren
suffix:semicolon
r_int
id|videobuf_dma_pci_sync
c_func
(paren
r_struct
id|pci_dev
op_star
id|dev
comma
r_struct
id|videobuf_dmabuf
op_star
id|dma
)paren
suffix:semicolon
r_int
id|videobuf_dma_pci_unmap
c_func
(paren
r_struct
id|pci_dev
op_star
id|dev
comma
r_struct
id|videobuf_dmabuf
op_star
id|dma
)paren
suffix:semicolon
r_int
id|videobuf_dma_free
c_func
(paren
r_struct
id|videobuf_dmabuf
op_star
id|dma
)paren
suffix:semicolon
multiline_comment|/* --------------------------------------------------------------------- */
multiline_comment|/*&n; * A small set of helper functions to manage video4linux buffers.&n; *&n; * struct videobuf_buffer holds the data structures used by the helper&n; * functions, additionally some commonly used fields for v4l buffers&n; * (width, height, lists, waitqueue) are in there.  That struct should&n; * be used as first element in the drivers buffer struct.&n; * &n; * about the mmap helpers (videobuf_mmap_*):&n; *&n; * The mmaper function allows to map any subset of contingous buffers.&n; * This includes one mmap() call for all buffers (which the original&n; * video4linux API uses) as well as one mmap() for every single buffer&n; * (which v4l2 uses).&n; *&n; * If there is a valid mapping for a buffer, buffer-&gt;baddr/bsize holds&n; * userspace address + size which can be feeded into the&n; * videobuf_dma_init_user function listed above.&n; *&n; */
r_struct
id|videobuf_buffer
suffix:semicolon
DECL|typedef|videobuf_buffer_free
r_typedef
r_void
(paren
op_star
id|videobuf_buffer_free
)paren
(paren
r_struct
id|file
op_star
id|file
comma
r_struct
id|videobuf_buffer
op_star
id|vb
)paren
suffix:semicolon
DECL|struct|videobuf_mapping
r_struct
id|videobuf_mapping
(brace
DECL|member|count
r_int
id|count
suffix:semicolon
DECL|member|highmem_ok
r_int
id|highmem_ok
suffix:semicolon
DECL|member|start
r_int
r_int
id|start
suffix:semicolon
DECL|member|end
r_int
r_int
id|end
suffix:semicolon
DECL|member|buflist
r_struct
id|videobuf_buffer
op_star
op_star
id|buflist
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|VBUF_FIELD_EVEN
mdefine_line|#define VBUF_FIELD_EVEN  1
DECL|macro|VBUF_FIELD_ODD
mdefine_line|#define VBUF_FIELD_ODD   2
DECL|macro|VBUF_FIELD_INTER
mdefine_line|#define VBUF_FIELD_INTER 4
DECL|enum|videobuf_state
r_enum
id|videobuf_state
(brace
DECL|enumerator|STATE_NEEDS_INIT
id|STATE_NEEDS_INIT
op_assign
l_int|0
comma
DECL|enumerator|STATE_PREPARED
id|STATE_PREPARED
op_assign
l_int|1
comma
DECL|enumerator|STATE_QUEUED
id|STATE_QUEUED
op_assign
l_int|2
comma
DECL|enumerator|STATE_ACTIVE
id|STATE_ACTIVE
op_assign
l_int|3
comma
DECL|enumerator|STATE_DONE
id|STATE_DONE
op_assign
l_int|4
comma
DECL|enumerator|STATE_ERROR
id|STATE_ERROR
op_assign
l_int|5
comma
DECL|enumerator|STATE_IDLE
id|STATE_IDLE
op_assign
l_int|6
comma
)brace
suffix:semicolon
DECL|struct|videobuf_buffer
r_struct
id|videobuf_buffer
(brace
DECL|member|i
r_int
id|i
suffix:semicolon
multiline_comment|/* info about the buffer */
DECL|member|type
r_int
id|type
suffix:semicolon
DECL|member|width
r_int
id|width
suffix:semicolon
DECL|member|height
r_int
id|height
suffix:semicolon
DECL|member|size
r_int
id|size
suffix:semicolon
DECL|member|field
r_int
id|field
suffix:semicolon
DECL|member|state
r_enum
id|videobuf_state
id|state
suffix:semicolon
DECL|member|dma
r_struct
id|videobuf_dmabuf
id|dma
suffix:semicolon
DECL|member|stream
r_struct
id|list_head
id|stream
suffix:semicolon
multiline_comment|/* QBUF/DQBUF list */
multiline_comment|/* for mmap&squot;ed buffers */
DECL|member|boff
r_int
r_int
id|boff
suffix:semicolon
multiline_comment|/* buffer offset (mmap) */
DECL|member|bsize
r_int
r_int
id|bsize
suffix:semicolon
multiline_comment|/* buffer size */
DECL|member|baddr
r_int
r_int
id|baddr
suffix:semicolon
multiline_comment|/* buffer addr (userland ptr!) */
DECL|member|map
r_struct
id|videobuf_mapping
op_star
id|map
suffix:semicolon
DECL|member|free
id|videobuf_buffer_free
id|free
suffix:semicolon
multiline_comment|/* touched by irq handler */
DECL|member|queue
r_struct
id|list_head
id|queue
suffix:semicolon
DECL|member|done
id|wait_queue_head_t
id|done
suffix:semicolon
DECL|member|field_count
r_int
id|field_count
suffix:semicolon
macro_line|#ifdef HAVE_V4L2
DECL|member|ts
id|stamp_t
id|ts
suffix:semicolon
macro_line|#endif
)brace
suffix:semicolon
r_void
op_star
id|videobuf_alloc
c_func
(paren
r_int
id|size
comma
r_int
id|type
)paren
suffix:semicolon
r_int
id|videobuf_waiton
c_func
(paren
r_struct
id|videobuf_buffer
op_star
id|vb
comma
r_int
id|non_blocking
comma
r_int
id|intr
)paren
suffix:semicolon
r_int
id|videobuf_iolock
c_func
(paren
r_struct
id|pci_dev
op_star
id|pci
comma
r_struct
id|videobuf_buffer
op_star
id|vb
)paren
suffix:semicolon
macro_line|#ifdef HAVE_V4L2
r_void
id|videobuf_status
c_func
(paren
r_struct
id|v4l2_buffer
op_star
id|b
comma
r_struct
id|videobuf_buffer
op_star
id|vb
)paren
suffix:semicolon
macro_line|#endif
r_int
id|videobuf_mmap_setup
c_func
(paren
r_struct
id|file
op_star
id|file
comma
r_struct
id|videobuf_buffer
op_star
op_star
id|buflist
comma
r_int
id|msize
comma
r_int
id|bcount
comma
r_int
id|bsize
comma
r_int
id|type
comma
id|videobuf_buffer_free
id|free
)paren
suffix:semicolon
r_int
id|videobuf_mmap_free
c_func
(paren
r_struct
id|file
op_star
id|file
comma
r_struct
id|videobuf_buffer
op_star
op_star
id|buflist
)paren
suffix:semicolon
r_int
id|videobuf_mmap_mapper
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_struct
id|videobuf_buffer
op_star
op_star
id|buflist
)paren
suffix:semicolon
multiline_comment|/*&n; * Local variables:&n; * c-basic-offset: 8&n; * End:&n; */
eof
