multiline_comment|/*&n; * linux/drivers/usb/gadget/pxa2xx_udc.h&n; * Intel PXA2xx on-chip full speed USB device controller&n; *&n; * Copyright (C) 2003 Robert Schwebel &lt;r.schwebel@pengutronix.de&gt;, Pengutronix&n; * Copyright (C) 2003 David Brownell&n; *&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2 of the License, or&n; * (at your option) any later version.&n; *&n; * This program is distributed in the hope that it will be useful,&n; * but WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; * GNU General Public License for more details.&n; *&n; * You should have received a copy of the GNU General Public License&n; * along with this program; if not, write to the Free Software&n; * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA&n; */
macro_line|#ifndef __LINUX_USB_GADGET_PXA2XX_H
DECL|macro|__LINUX_USB_GADGET_PXA2XX_H
mdefine_line|#define __LINUX_USB_GADGET_PXA2XX_H
macro_line|#include &lt;linux/types.h&gt;
multiline_comment|/*-------------------------------------------------------------------------*/
multiline_comment|/* pxa2xx has this (move to include/asm-arm/arch-pxa/pxa-regs.h) */
DECL|macro|UFNRH_SIR
mdefine_line|#define UFNRH_SIR&t;(1 &lt;&lt; 7)&t;/* SOF interrupt request */
DECL|macro|UFNRH_SIM
mdefine_line|#define UFNRH_SIM&t;(1 &lt;&lt; 6)&t;/* SOF interrupt mask */
DECL|macro|UFNRH_IPE14
mdefine_line|#define UFNRH_IPE14&t;(1 &lt;&lt; 5)&t;/* ISO packet error, ep14 */
DECL|macro|UFNRH_IPE9
mdefine_line|#define UFNRH_IPE9&t;(1 &lt;&lt; 4)&t;/* ISO packet error, ep9 */
DECL|macro|UFNRH_IPE4
mdefine_line|#define UFNRH_IPE4&t;(1 &lt;&lt; 3)&t;/* ISO packet error, ep4 */
multiline_comment|/* pxa255 has this (move to include/asm-arm/arch-pxa/pxa-regs.h) */
DECL|macro|UDCCFR
mdefine_line|#define&t;UDCCFR&t;&t;UDC_RES2&t;/* UDC Control Function Register */
DECL|macro|UDCCFR_AREN
mdefine_line|#define UDCCFR_AREN&t;(1 &lt;&lt; 7)&t;/* ACK response enable (now) */
DECL|macro|UDCCFR_ACM
mdefine_line|#define UDCCFR_ACM&t;(1 &lt;&lt; 2)&t;/* ACK control mode (wait for AREN) */
multiline_comment|/*-------------------------------------------------------------------------*/
r_struct
id|pxa2xx_udc
suffix:semicolon
DECL|struct|pxa2xx_ep
r_struct
id|pxa2xx_ep
(brace
DECL|member|ep
r_struct
id|usb_ep
id|ep
suffix:semicolon
DECL|member|dev
r_struct
id|pxa2xx_udc
op_star
id|dev
suffix:semicolon
DECL|member|desc
r_const
r_struct
id|usb_endpoint_descriptor
op_star
id|desc
suffix:semicolon
DECL|member|queue
r_struct
id|list_head
id|queue
suffix:semicolon
DECL|member|pio_irqs
r_int
r_int
id|pio_irqs
suffix:semicolon
DECL|member|dma_irqs
r_int
r_int
id|dma_irqs
suffix:semicolon
DECL|member|dma
r_int
id|dma
suffix:semicolon
DECL|member|bEndpointAddress
id|u8
id|bEndpointAddress
suffix:semicolon
DECL|member|bmAttributes
id|u8
id|bmAttributes
suffix:semicolon
DECL|member|stopped
r_int
id|stopped
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dma_fixup
r_int
id|dma_fixup
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* UDCCS = UDC Control/Status for this EP&n;&t; * UBCR = UDC Byte Count Remaining (contents of OUT fifo)&n;&t; * UDDR = UDC Endpoint Data Register (the fifo)&n;&t; * DRCM = DMA Request Channel Map&n;&t; */
DECL|member|reg_udccs
r_volatile
id|u32
op_star
id|reg_udccs
suffix:semicolon
DECL|member|reg_ubcr
r_volatile
id|u32
op_star
id|reg_ubcr
suffix:semicolon
DECL|member|reg_uddr
r_volatile
id|u32
op_star
id|reg_uddr
suffix:semicolon
DECL|member|reg_drcmr
r_volatile
id|u32
op_star
id|reg_drcmr
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|pxa2xx_request
r_struct
id|pxa2xx_request
(brace
DECL|member|req
r_struct
id|usb_request
id|req
suffix:semicolon
DECL|member|queue
r_struct
id|list_head
id|queue
suffix:semicolon
)brace
suffix:semicolon
DECL|enum|ep0_state
r_enum
id|ep0_state
(brace
DECL|enumerator|EP0_IDLE
id|EP0_IDLE
comma
DECL|enumerator|EP0_IN_DATA_PHASE
id|EP0_IN_DATA_PHASE
comma
DECL|enumerator|EP0_OUT_DATA_PHASE
id|EP0_OUT_DATA_PHASE
comma
DECL|enumerator|EP0_END_XFER
id|EP0_END_XFER
comma
DECL|enumerator|EP0_STALL
id|EP0_STALL
comma
)brace
suffix:semicolon
DECL|macro|EP0_FIFO_SIZE
mdefine_line|#define EP0_FIFO_SIZE&t;((unsigned)16)
DECL|macro|BULK_FIFO_SIZE
mdefine_line|#define BULK_FIFO_SIZE&t;((unsigned)64)
DECL|macro|ISO_FIFO_SIZE
mdefine_line|#define ISO_FIFO_SIZE&t;((unsigned)256)
DECL|macro|INT_FIFO_SIZE
mdefine_line|#define INT_FIFO_SIZE&t;((unsigned)8)
DECL|struct|udc_stats
r_struct
id|udc_stats
(brace
DECL|struct|ep0stats
r_struct
id|ep0stats
(brace
DECL|member|ops
r_int
r_int
id|ops
suffix:semicolon
DECL|member|bytes
r_int
r_int
id|bytes
suffix:semicolon
DECL|member|read
DECL|member|write
)brace
id|read
comma
id|write
suffix:semicolon
DECL|member|irqs
r_int
r_int
id|irqs
suffix:semicolon
)brace
suffix:semicolon
macro_line|#ifdef CONFIG_USB_PXA2XX_SMALL
multiline_comment|/* when memory&squot;s tight, SMALL config saves code+data.  */
DECL|macro|USE_DMA
macro_line|#undef&t;USE_DMA
DECL|macro|PXA_UDC_NUM_ENDPOINTS
mdefine_line|#define&t;PXA_UDC_NUM_ENDPOINTS&t;3
macro_line|#endif
macro_line|#ifndef&t;PXA_UDC_NUM_ENDPOINTS
DECL|macro|PXA_UDC_NUM_ENDPOINTS
mdefine_line|#define&t;PXA_UDC_NUM_ENDPOINTS&t;16
macro_line|#endif
DECL|struct|pxa2xx_udc
r_struct
id|pxa2xx_udc
(brace
DECL|member|gadget
r_struct
id|usb_gadget
id|gadget
suffix:semicolon
DECL|member|driver
r_struct
id|usb_gadget_driver
op_star
id|driver
suffix:semicolon
DECL|member|ep0state
r_enum
id|ep0_state
id|ep0state
suffix:semicolon
DECL|member|stats
r_struct
id|udc_stats
id|stats
suffix:semicolon
DECL|member|got_irq
r_int
id|got_irq
suffix:colon
l_int|1
comma
DECL|member|got_disc
id|got_disc
suffix:colon
l_int|1
comma
DECL|member|has_cfr
id|has_cfr
suffix:colon
l_int|1
comma
DECL|member|req_pending
id|req_pending
suffix:colon
l_int|1
comma
DECL|member|req_std
id|req_std
suffix:colon
l_int|1
comma
DECL|member|req_config
id|req_config
suffix:colon
l_int|1
suffix:semicolon
DECL|macro|start_watchdog
mdefine_line|#define start_watchdog(dev) mod_timer(&amp;dev-&gt;timer, jiffies + (HZ/200))
DECL|member|timer
r_struct
id|timer_list
id|timer
suffix:semicolon
DECL|member|dev
r_struct
id|device
op_star
id|dev
suffix:semicolon
DECL|member|mach
r_struct
id|pxa2xx_udc_mach_info
op_star
id|mach
suffix:semicolon
DECL|member|dma_mask
id|u64
id|dma_mask
suffix:semicolon
DECL|member|ep
r_struct
id|pxa2xx_ep
id|ep
(braket
id|PXA_UDC_NUM_ENDPOINTS
)braket
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*-------------------------------------------------------------------------*/
macro_line|#ifdef CONFIG_ARCH_LUBBOCK
macro_line|#include &lt;asm/arch/lubbock.h&gt;
multiline_comment|/* lubbock can also report usb connect/disconnect irqs */
macro_line|#ifdef DEBUG
DECL|macro|HEX_DISPLAY
mdefine_line|#define HEX_DISPLAY(n)&t;if (machine_is_lubbock()) { LUB_HEXLED = (n); }
DECL|macro|LED_CONNECTED_ON
mdefine_line|#define LED_CONNECTED_ON&t;if (machine_is_lubbock()) { &bslash;&n;&t;DISCRETE_LED_ON(D26); }
DECL|macro|LED_CONNECTED_OFF
mdefine_line|#define LED_CONNECTED_OFF&t;if(machine_is_lubbock()) { &bslash;&n;&t;DISCRETE_LED_OFF(D26); LUB_HEXLED = 0; }
DECL|macro|LED_EP0_ON
mdefine_line|#define LED_EP0_ON&t;if (machine_is_lubbock()) { DISCRETE_LED_ON(D25); }
DECL|macro|LED_EP0_OFF
mdefine_line|#define LED_EP0_OFF&t;if (machine_is_lubbock()) { DISCRETE_LED_OFF(D25); }
macro_line|#endif /* DEBUG */
macro_line|#endif
multiline_comment|/*-------------------------------------------------------------------------*/
multiline_comment|/* LEDs are only for debug */
macro_line|#ifndef HEX_DISPLAY
DECL|macro|HEX_DISPLAY
mdefine_line|#define HEX_DISPLAY(n)&t;&t;do {} while(0)
macro_line|#endif
macro_line|#ifndef LED_CONNECTED_ON
DECL|macro|LED_CONNECTED_ON
mdefine_line|#define LED_CONNECTED_ON&t;do {} while(0)
DECL|macro|LED_CONNECTED_OFF
mdefine_line|#define LED_CONNECTED_OFF&t;do {} while(0)
macro_line|#endif
macro_line|#ifndef LED_EP0_ON
DECL|macro|LED_EP0_ON
mdefine_line|#define LED_EP0_ON&t;&t;do {} while (0)
DECL|macro|LED_EP0_OFF
mdefine_line|#define LED_EP0_OFF&t;&t;do {} while (0)
macro_line|#endif
multiline_comment|/*-------------------------------------------------------------------------*/
DECL|variable|the_controller
r_static
r_struct
id|pxa2xx_udc
op_star
id|the_controller
suffix:semicolon
multiline_comment|/* one GPIO should be used to detect host disconnect */
DECL|function|is_usb_connected
r_static
r_inline
r_int
id|is_usb_connected
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|the_controller-&gt;mach-&gt;udc_is_connected
)paren
r_return
l_int|1
suffix:semicolon
r_return
id|the_controller-&gt;mach
op_member_access_from_pointer
id|udc_is_connected
c_func
(paren
)paren
suffix:semicolon
)brace
multiline_comment|/* one GPIO should force the host to see this device (or not) */
DECL|function|make_usb_disappear
r_static
r_inline
r_void
id|make_usb_disappear
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|the_controller-&gt;mach-&gt;udc_command
)paren
r_return
suffix:semicolon
id|the_controller-&gt;mach
op_member_access_from_pointer
id|udc_command
c_func
(paren
id|PXA2XX_UDC_CMD_CONNECT
)paren
suffix:semicolon
)brace
DECL|function|let_usb_appear
r_static
r_inline
r_void
id|let_usb_appear
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|the_controller-&gt;mach-&gt;udc_command
)paren
r_return
suffix:semicolon
id|the_controller-&gt;mach
op_member_access_from_pointer
id|udc_command
c_func
(paren
id|PXA2XX_UDC_CMD_DISCONNECT
)paren
suffix:semicolon
)brace
multiline_comment|/*-------------------------------------------------------------------------*/
multiline_comment|/*&n; * Debugging support vanishes in non-debug builds.  DBG_NORMAL should be&n; * mostly silent during normal use/testing, with no timing side-effects.&n; */
DECL|macro|DBG_NORMAL
mdefine_line|#define DBG_NORMAL&t;1&t;/* error paths, device state transitions */
DECL|macro|DBG_VERBOSE
mdefine_line|#define DBG_VERBOSE&t;2&t;/* add some success path trace info */
DECL|macro|DBG_NOISY
mdefine_line|#define DBG_NOISY&t;3&t;/* ... even more: request level */
DECL|macro|DBG_VERY_NOISY
mdefine_line|#define DBG_VERY_NOISY&t;4&t;/* ... even more: packet level */
macro_line|#ifdef DEBUG
DECL|variable|state_name
r_static
r_const
r_char
op_star
id|state_name
(braket
)braket
op_assign
(brace
l_string|&quot;EP0_IDLE&quot;
comma
l_string|&quot;EP0_IN_DATA_PHASE&quot;
comma
l_string|&quot;EP0_OUT_DATA_PHASE&quot;
comma
l_string|&quot;EP0_END_XFER&quot;
comma
l_string|&quot;EP0_STALL&quot;
)brace
suffix:semicolon
DECL|macro|DMSG
mdefine_line|#define DMSG(stuff...) printk(KERN_DEBUG &quot;udc: &quot; stuff)
macro_line|#ifdef VERBOSE
DECL|macro|UDC_DEBUG
macro_line|#    define UDC_DEBUG DBG_VERBOSE
macro_line|#else
DECL|macro|UDC_DEBUG
macro_line|#    define UDC_DEBUG DBG_NORMAL
macro_line|#endif
r_static
r_void
id|__attribute__
(paren
(paren
id|__unused__
)paren
)paren
DECL|function|dump_udccr
id|dump_udccr
c_func
(paren
r_const
r_char
op_star
id|label
)paren
(brace
id|u32
id|udccr
op_assign
id|UDCCR
suffix:semicolon
id|DMSG
c_func
(paren
l_string|&quot;%s %02X =%s%s%s%s%s%s%s%s&bslash;n&quot;
comma
id|label
comma
id|udccr
comma
(paren
id|udccr
op_amp
id|UDCCR_REM
)paren
ques
c_cond
l_string|&quot; rem&quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|udccr
op_amp
id|UDCCR_RSTIR
)paren
ques
c_cond
l_string|&quot; rstir&quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|udccr
op_amp
id|UDCCR_SRM
)paren
ques
c_cond
l_string|&quot; srm&quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|udccr
op_amp
id|UDCCR_SUSIR
)paren
ques
c_cond
l_string|&quot; susir&quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|udccr
op_amp
id|UDCCR_RESIR
)paren
ques
c_cond
l_string|&quot; resir&quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|udccr
op_amp
id|UDCCR_RSM
)paren
ques
c_cond
l_string|&quot; rsm&quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|udccr
op_amp
id|UDCCR_UDA
)paren
ques
c_cond
l_string|&quot; uda&quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|udccr
op_amp
id|UDCCR_UDE
)paren
ques
c_cond
l_string|&quot; ude&quot;
suffix:colon
l_string|&quot;&quot;
)paren
suffix:semicolon
)brace
r_static
r_void
id|__attribute__
(paren
(paren
id|__unused__
)paren
)paren
DECL|function|dump_udccs0
id|dump_udccs0
c_func
(paren
r_const
r_char
op_star
id|label
)paren
(brace
id|u32
id|udccs0
op_assign
id|UDCCS0
suffix:semicolon
id|DMSG
c_func
(paren
l_string|&quot;%s %s %02X =%s%s%s%s%s%s%s%s&bslash;n&quot;
comma
id|label
comma
id|state_name
(braket
id|the_controller-&gt;ep0state
)braket
comma
id|udccs0
comma
(paren
id|udccs0
op_amp
id|UDCCS0_SA
)paren
ques
c_cond
l_string|&quot; sa&quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|udccs0
op_amp
id|UDCCS0_RNE
)paren
ques
c_cond
l_string|&quot; rne&quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|udccs0
op_amp
id|UDCCS0_FST
)paren
ques
c_cond
l_string|&quot; fst&quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|udccs0
op_amp
id|UDCCS0_SST
)paren
ques
c_cond
l_string|&quot; sst&quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|udccs0
op_amp
id|UDCCS0_DRWF
)paren
ques
c_cond
l_string|&quot; dwrf&quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|udccs0
op_amp
id|UDCCS0_FTF
)paren
ques
c_cond
l_string|&quot; ftf&quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|udccs0
op_amp
id|UDCCS0_IPR
)paren
ques
c_cond
l_string|&quot; ipr&quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|udccs0
op_amp
id|UDCCS0_OPR
)paren
ques
c_cond
l_string|&quot; opr&quot;
suffix:colon
l_string|&quot;&quot;
)paren
suffix:semicolon
)brace
r_static
r_void
id|__attribute__
(paren
(paren
id|__unused__
)paren
)paren
DECL|function|dump_state
id|dump_state
c_func
(paren
r_struct
id|pxa2xx_udc
op_star
id|dev
)paren
(brace
id|u32
id|tmp
suffix:semicolon
r_int
id|i
suffix:semicolon
id|DMSG
c_func
(paren
l_string|&quot;%s %s, uicr %02X.%02X, usir %02X.%02x, ufnr %02X.%02X&bslash;n&quot;
comma
id|is_usb_connected
c_func
(paren
)paren
ques
c_cond
l_string|&quot;host &quot;
suffix:colon
l_string|&quot;disconnected&quot;
comma
id|state_name
(braket
id|dev-&gt;ep0state
)braket
comma
id|UICR1
comma
id|UICR0
comma
id|USIR1
comma
id|USIR0
comma
id|UFNRH
comma
id|UFNRL
)paren
suffix:semicolon
id|dump_udccr
c_func
(paren
l_string|&quot;udccr&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|dev-&gt;has_cfr
)paren
(brace
id|tmp
op_assign
id|UDCCFR
suffix:semicolon
id|DMSG
c_func
(paren
l_string|&quot;udccfr %02X =%s%s&bslash;n&quot;
comma
id|tmp
comma
(paren
id|tmp
op_amp
id|UDCCFR_AREN
)paren
ques
c_cond
l_string|&quot; aren&quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|tmp
op_amp
id|UDCCFR_ACM
)paren
ques
c_cond
l_string|&quot; acm&quot;
suffix:colon
l_string|&quot;&quot;
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|dev-&gt;driver
)paren
(brace
id|DMSG
c_func
(paren
l_string|&quot;no gadget driver bound&bslash;n&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_else
id|DMSG
c_func
(paren
l_string|&quot;ep0 driver &squot;%s&squot;&bslash;n&quot;
comma
id|dev-&gt;driver-&gt;driver.name
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|is_usb_connected
c_func
(paren
)paren
)paren
r_return
suffix:semicolon
id|dump_udccs0
(paren
l_string|&quot;udccs0&quot;
)paren
suffix:semicolon
id|DMSG
c_func
(paren
l_string|&quot;ep0 IN %lu/%lu, OUT %lu/%lu&bslash;n&quot;
comma
id|dev-&gt;stats.write.bytes
comma
id|dev-&gt;stats.write.ops
comma
id|dev-&gt;stats.read.bytes
comma
id|dev-&gt;stats.read.ops
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|1
suffix:semicolon
id|i
OL
id|PXA_UDC_NUM_ENDPOINTS
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|dev-&gt;ep
(braket
id|i
)braket
dot
id|desc
op_eq
l_int|0
)paren
r_continue
suffix:semicolon
id|DMSG
(paren
l_string|&quot;udccs%d = %02x&bslash;n&quot;
comma
id|i
comma
op_star
id|dev-&gt;ep-&gt;reg_udccs
)paren
suffix:semicolon
)brace
)brace
macro_line|#else
DECL|macro|DMSG
mdefine_line|#define DMSG(stuff...)&t;&t;do{}while(0)
DECL|macro|dump_udccr
mdefine_line|#define&t;dump_udccr(x)&t;do{}while(0)
DECL|macro|dump_udccs0
mdefine_line|#define&t;dump_udccs0(x)&t;do{}while(0)
DECL|macro|dump_state
mdefine_line|#define&t;dump_state(x)&t;do{}while(0)
DECL|macro|UDC_DEBUG
mdefine_line|#define UDC_DEBUG ((unsigned)0)
macro_line|#endif
DECL|macro|DBG
mdefine_line|#define DBG(lvl, stuff...) do{if ((lvl) &lt;= UDC_DEBUG) DMSG(stuff);}while(0)
DECL|macro|WARN
mdefine_line|#define WARN(stuff...) printk(KERN_WARNING &quot;udc: &quot; stuff)
macro_line|#endif /* __LINUX_USB_GADGET_PXA2XX_H */
eof
