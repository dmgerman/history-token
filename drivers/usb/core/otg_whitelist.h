multiline_comment|/*&n; * drivers/usb/core/otg_whitelist.h&n; *&n; * Copyright (C) 2004 Texas Instruments&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2 of the License, or&n; * (at your option) any later version.&n; */
multiline_comment|/*&n; * This OTG Whitelist is the OTG &quot;Targeted Peripheral List&quot;.  It should&n; * mostly use of USB_DEVICE() or USB_DEVICE_VER() entries..&n; *&n; * YOU _SHOULD_ CHANGE THIS LIST TO MATCH YOUR PRODUCT AND ITS TESTING!&n; */
DECL|variable|whitelist_table
r_static
r_struct
id|usb_device_id
id|whitelist_table
(braket
)braket
op_assign
(brace
multiline_comment|/* hubs are optional in OTG, but very handy ... */
(brace
id|USB_DEVICE_INFO
c_func
(paren
id|USB_CLASS_HUB
comma
l_int|0
comma
l_int|0
)paren
comma
)brace
comma
(brace
id|USB_DEVICE_INFO
c_func
(paren
id|USB_CLASS_HUB
comma
l_int|0
comma
l_int|1
)paren
comma
)brace
comma
macro_line|#ifdef&t;CONFIG_USB_PRINTER&t;&t;/* ignoring nonstatic linkage! */
multiline_comment|/* FIXME actually, printers are NOT supposed to use device classes;&n; * they&squot;re supposed to use interface classes...&n; */
(brace
id|USB_DEVICE_INFO
c_func
(paren
l_int|7
comma
l_int|1
comma
l_int|1
)paren
)brace
comma
(brace
id|USB_DEVICE_INFO
c_func
(paren
l_int|7
comma
l_int|1
comma
l_int|2
)paren
)brace
comma
(brace
id|USB_DEVICE_INFO
c_func
(paren
l_int|7
comma
l_int|1
comma
l_int|3
)paren
)brace
comma
macro_line|#endif
macro_line|#ifdef&t;CONFIG_USB_CDCETHER
multiline_comment|/* Linux-USB CDC Ethernet gadget */
(brace
id|USB_DEVICE
c_func
(paren
l_int|0x0525
comma
l_int|0xa4a1
)paren
comma
)brace
comma
multiline_comment|/* Linux-USB CDC Ethernet + RNDIS gadget */
(brace
id|USB_DEVICE
c_func
(paren
l_int|0x0525
comma
l_int|0xa4a2
)paren
comma
)brace
comma
macro_line|#endif
macro_line|#if&t;defined(CONFIG_USB_TEST) || defined(CONFIG_USB_TEST_MODULE)
multiline_comment|/* gadget zero, for testing */
(brace
id|USB_DEVICE
c_func
(paren
l_int|0x0525
comma
l_int|0xa4a0
)paren
comma
)brace
comma
macro_line|#endif
(brace
)brace
multiline_comment|/* Terminating entry */
)brace
suffix:semicolon
DECL|function|is_targeted
r_static
r_int
id|is_targeted
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
(brace
r_struct
id|usb_device_id
op_star
id|id
op_assign
id|whitelist_table
suffix:semicolon
multiline_comment|/* possible in developer configs only! */
r_if
c_cond
(paren
op_logical_neg
id|dev-&gt;bus-&gt;otg_port
)paren
r_return
l_int|1
suffix:semicolon
multiline_comment|/* HNP test device is _never_ targeted (see OTG spec 6.6.6) */
r_if
c_cond
(paren
id|dev-&gt;descriptor.idVendor
op_eq
l_int|0x1a0a
op_logical_and
id|dev-&gt;descriptor.idProduct
op_eq
l_int|0xbadd
)paren
r_return
l_int|0
suffix:semicolon
multiline_comment|/* NOTE: can&squot;t use usb_match_id() since interface caches&n;&t; * aren&squot;t set up yet. this is cut/paste from that code.&n;&t; */
r_for
c_loop
(paren
id|id
op_assign
id|whitelist_table
suffix:semicolon
id|id-&gt;match_flags
suffix:semicolon
id|id
op_increment
)paren
(brace
r_if
c_cond
(paren
(paren
id|id-&gt;match_flags
op_amp
id|USB_DEVICE_ID_MATCH_VENDOR
)paren
op_logical_and
id|id-&gt;idVendor
op_ne
id|dev-&gt;descriptor.idVendor
)paren
r_continue
suffix:semicolon
r_if
c_cond
(paren
(paren
id|id-&gt;match_flags
op_amp
id|USB_DEVICE_ID_MATCH_PRODUCT
)paren
op_logical_and
id|id-&gt;idProduct
op_ne
id|dev-&gt;descriptor.idProduct
)paren
r_continue
suffix:semicolon
multiline_comment|/* No need to test id-&gt;bcdDevice_lo != 0, since 0 is never&n;&t;&t;   greater than any unsigned number. */
r_if
c_cond
(paren
(paren
id|id-&gt;match_flags
op_amp
id|USB_DEVICE_ID_MATCH_DEV_LO
)paren
op_logical_and
(paren
id|id-&gt;bcdDevice_lo
OG
id|dev-&gt;descriptor.bcdDevice
)paren
)paren
r_continue
suffix:semicolon
r_if
c_cond
(paren
(paren
id|id-&gt;match_flags
op_amp
id|USB_DEVICE_ID_MATCH_DEV_HI
)paren
op_logical_and
(paren
id|id-&gt;bcdDevice_hi
OL
id|dev-&gt;descriptor.bcdDevice
)paren
)paren
r_continue
suffix:semicolon
r_if
c_cond
(paren
(paren
id|id-&gt;match_flags
op_amp
id|USB_DEVICE_ID_MATCH_DEV_CLASS
)paren
op_logical_and
(paren
id|id-&gt;bDeviceClass
op_ne
id|dev-&gt;descriptor.bDeviceClass
)paren
)paren
r_continue
suffix:semicolon
r_if
c_cond
(paren
(paren
id|id-&gt;match_flags
op_amp
id|USB_DEVICE_ID_MATCH_DEV_SUBCLASS
)paren
op_logical_and
(paren
id|id-&gt;bDeviceSubClass
op_ne
id|dev-&gt;descriptor.bDeviceSubClass
)paren
)paren
r_continue
suffix:semicolon
r_if
c_cond
(paren
(paren
id|id-&gt;match_flags
op_amp
id|USB_DEVICE_ID_MATCH_DEV_PROTOCOL
)paren
op_logical_and
(paren
id|id-&gt;bDeviceProtocol
op_ne
id|dev-&gt;descriptor.bDeviceProtocol
)paren
)paren
r_continue
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
multiline_comment|/* add other match criteria here ... */
multiline_comment|/* OTG MESSAGE: report errors here, customize to match your product */
id|dev_err
c_func
(paren
op_amp
id|dev-&gt;dev
comma
l_string|&quot;device v%04x p%04x is not supported&bslash;n&quot;
comma
id|dev-&gt;descriptor.idVendor
comma
id|dev-&gt;descriptor.idProduct
)paren
suffix:semicolon
macro_line|#ifdef&t;CONFIG_USB_OTG_WHITELIST
r_return
l_int|0
suffix:semicolon
macro_line|#else
r_return
l_int|1
suffix:semicolon
macro_line|#endif
)brace
eof
