multiline_comment|/* &n;   (C) 2001 Nemosoft Unv.    nemosoft@smcc.demon.nl&n;   &n;   This program is free software; you can redistribute it and/or modify&n;   it under the terms of the GNU General Public License as published by&n;   the Free Software Foundation; either version 2 of the License, or&n;   (at your option) any later version.&n;&n;   This program is distributed in the hope that it will be useful,&n;   but WITHOUT ANY WARRANTY; without even the implied warranty of&n;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n;   GNU General Public License for more details.&n;&n;   You should have received a copy of the GNU General Public License&n;   along with this program; if not, write to the Free Software&n;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA&n;&n;*/
multiline_comment|/* &squot;Viewport&squot; conversion routines. These functions convert from one colour&n;   space to another, taking into account that the source image has a smaller&n;   size than the view, and is placed inside the view:&n;&n;        +-------view.x------------+&n;        |                         |&n;        |     +---image.x---+     |&n;        |     |             |     |&n;        |     |             |     |&n;        |     +-------------+     |&n;        |                         |&n;        +-------------------------+&n;&n;   The image should always be smaller than the view. The offset (top-left&n;   corner of the image) should be precomputed, so you can place the image &n;   anywhere in the view.&n;&n;   The functions take these parameters:&n;   - width &t;image width (in pixels)&n;   - height&t;image height (in pixels)&n;   - plus&t;view width (in pixels)&n;   *src&t;&t;pointer at start of image&n;   *dst&t;&t;pointer at offset (!) in view&n;*/
macro_line|#ifndef VCVT_H
DECL|macro|VCVT_H
mdefine_line|#define VCVT_H
macro_line|#ifdef __cplusplus
r_extern
l_string|&quot;C&quot;
(brace
macro_line|#endif
multiline_comment|/* Functions in vcvt_i386.S/vcvt_c.c */
multiline_comment|/* 4:2:0 YUV interlaced to RGB/BGR */
r_void
id|vcvt_420i_bgr24
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_int
id|plus
comma
r_void
op_star
id|src
comma
r_void
op_star
id|dst
)paren
suffix:semicolon
r_void
id|vcvt_420i_rgb24
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_int
id|plus
comma
r_void
op_star
id|src
comma
r_void
op_star
id|dst
)paren
suffix:semicolon
r_void
id|vcvt_420i_bgr32
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_int
id|plus
comma
r_void
op_star
id|src
comma
r_void
op_star
id|dst
)paren
suffix:semicolon
r_void
id|vcvt_420i_rgb32
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_int
id|plus
comma
r_void
op_star
id|src
comma
r_void
op_star
id|dst
)paren
suffix:semicolon
multiline_comment|/* Go from 420i to other yuv formats */
r_void
id|vcvt_420i_420p
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_int
id|plus
comma
r_void
op_star
id|src
comma
r_void
op_star
id|dsty
comma
r_void
op_star
id|dstu
comma
r_void
op_star
id|dstv
)paren
suffix:semicolon
r_void
id|vcvt_420i_yuyv
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_int
id|plus
comma
r_void
op_star
id|src
comma
r_void
op_star
id|dst
)paren
suffix:semicolon
macro_line|#if 0
macro_line|#endif
macro_line|#ifdef __cplusplus
)brace
macro_line|#endif
macro_line|#endif
eof
