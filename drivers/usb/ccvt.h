multiline_comment|/* &n;   (C) 2000 Nemosoft Unv.    nemosoft@smcc.demon.nl&n;   &n;   This program is free software; you can redistribute it and/or modify&n;   it under the terms of the GNU General Public License as published by&n;   the Free Software Foundation; either version 2 of the License, or&n;   (at your option) any later version.&n;&n;   This program is distributed in the hope that it will be useful,&n;   but WITHOUT ANY WARRANTY; without even the implied warranty of&n;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n;   GNU General Public License for more details.&n;&n;   You should have received a copy of the GNU General Public License&n;   along with this program; if not, write to the Free Software&n;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA&n;&n;*/
macro_line|#ifndef CCVT_H
DECL|macro|CCVT_H
mdefine_line|#define CCVT_H
macro_line|#ifdef __cplusplus
r_extern
l_string|&quot;C&quot;
(brace
macro_line|#endif
multiline_comment|/* Colour ConVerT: going from one colour space to another&n;&n;   Format descriptions:&n;   420i = &quot;4:2:0 interlaced&quot;&n;           YYYY UU YYYY UU   even lines&n;           YYYY VV YYYY VV   odd lines&n;           U/V data is subsampled by 2 both in horizontal &n;           and vertical directions, and intermixed with the Y values.&n;   &n;   420p = &quot;4:2:0 planar&quot;&n;           YYYYYYYY      N lines&n;           UUUU          N/2 lines&n;           VVVV          N/2 lines&n;           U/V is again subsampled, but all the Ys, Us and Vs are placed &n;           together in separate buffers. The buffers may be placed in&n;           one piece of contiguous memory though, with Y buffer first,&n;           followed by U, followed by V.&n;&n;   yuyv = &quot;4:2:2 interlaced&quot;&n;           YUYV YUYV YUYV ...   N lines&n;           The U/V data is subsampled by 2 in horizontal direction only.&n;&n;   bgr24 = 3 bytes per pixel, in the order Blue Green Red (whoever came up&n;           with that idea...)&n;   rgb24 = 3 bytes per pixel, in the order Red Green Blue (which is sensible)&n;   rgb32 = 4 bytes per pixel, in the order Red Green Blue Alpha, with &n;           Alpha really being a filler byte (0)&n;   bgr32 = last but not least, 4 bytes per pixel, in the order Blue Green Red&n;           Alpha, Alpha again a filler byte (0)&n; */
multiline_comment|/* Functions in ccvt_i386.S/ccvt_c.c */
multiline_comment|/* 4:2:0 YUV interlaced to RGB/BGR */
r_void
id|ccvt_420i_bgr24
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_void
op_star
id|src
comma
r_void
op_star
id|dst
)paren
suffix:semicolon
r_void
id|ccvt_420i_rgb24
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_void
op_star
id|src
comma
r_void
op_star
id|dst
)paren
suffix:semicolon
r_void
id|ccvt_420i_bgr32
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_void
op_star
id|src
comma
r_void
op_star
id|dst
)paren
suffix:semicolon
r_void
id|ccvt_420i_rgb32
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_void
op_star
id|src
comma
r_void
op_star
id|dst
)paren
suffix:semicolon
multiline_comment|/* 4:2:2 YUYV interlaced to RGB/BGR */
r_void
id|ccvt_yuyv_rgb32
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_void
op_star
id|src
comma
r_void
op_star
id|dst
)paren
suffix:semicolon
r_void
id|ccvt_yuyv_bgr32
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_void
op_star
id|src
comma
r_void
op_star
id|dst
)paren
suffix:semicolon
multiline_comment|/* 4:2:0 YUV planar to RGB/BGR     */
r_void
id|ccvt_420p_rgb32
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_void
op_star
id|srcy
comma
r_void
op_star
id|srcu
comma
r_void
op_star
id|srcv
comma
r_void
op_star
id|dst
)paren
suffix:semicolon
r_void
id|ccvt_420p_bgr32
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_void
op_star
id|srcy
comma
r_void
op_star
id|srcu
comma
r_void
op_star
id|srcv
comma
r_void
op_star
id|dst
)paren
suffix:semicolon
multiline_comment|/* RGB/BGR to 4:2:0 YUV interlaced */
multiline_comment|/* RGB/BGR to 4:2:0 YUV planar     */
r_void
id|ccvt_rgb24_420p
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_void
op_star
id|src
comma
r_void
op_star
id|dsty
comma
r_void
op_star
id|dstu
comma
r_void
op_star
id|dstv
)paren
suffix:semicolon
r_void
id|ccvt_bgr24_420p
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_void
op_star
id|src
comma
r_void
op_star
id|dsty
comma
r_void
op_star
id|dstu
comma
r_void
op_star
id|dstv
)paren
suffix:semicolon
multiline_comment|/* Go from 420i to other yuv formats */
r_void
id|ccvt_420i_420p
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_void
op_star
id|src
comma
r_void
op_star
id|dsty
comma
r_void
op_star
id|dstu
comma
r_void
op_star
id|dstv
)paren
suffix:semicolon
r_void
id|ccvt_420i_yuyv
c_func
(paren
r_int
id|width
comma
r_int
id|height
comma
r_void
op_star
id|src
comma
r_void
op_star
id|dst
)paren
suffix:semicolon
macro_line|#ifdef __cplusplus
)brace
macro_line|#endif
macro_line|#endif
eof
