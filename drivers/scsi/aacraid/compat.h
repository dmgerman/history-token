multiline_comment|/*&n; *&t;Adaptec AAC series RAID controller driver&n; *&t;(c) Copyright 2001 Red Hat Inc.&t;&lt;alan@redhat.com&gt;&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2, or (at your option)&n; * any later version.&n; *&n; * This program is distributed in the hope that it will be useful,&n; * but WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; * GNU General Public License for more details.&n; *&n; * You should have received a copy of the GNU General Public License&n; * along with this program; see the file COPYING.  If not, write to&n; * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.&n; *&n; */
multiline_comment|/*&n; * This file is for backwards compatibility with older kernel versions&n; */
macro_line|#include &lt;linux/version.h&gt;
macro_line|#if LINUX_VERSION_CODE  &lt; KERNEL_VERSION(2,4,11)   
macro_line|#include &lt;linux/blk.h&gt;
DECL|function|block_size
r_static
r_inline
r_int
r_int
id|block_size
c_func
(paren
id|kdev_t
id|dev
)paren
(brace
r_int
id|retval
op_assign
id|BLOCK_SIZE
suffix:semicolon
r_int
id|major
op_assign
id|MAJOR
c_func
(paren
id|dev
)paren
suffix:semicolon
r_if
c_cond
(paren
id|blksize_size
(braket
id|major
)braket
)paren
(brace
r_int
id|minor
op_assign
id|MINOR
c_func
(paren
id|dev
)paren
suffix:semicolon
r_if
c_cond
(paren
id|blksize_size
(braket
id|major
)braket
(braket
id|minor
)braket
)paren
id|retval
op_assign
id|blksize_size
(braket
id|major
)braket
(braket
id|minor
)braket
suffix:semicolon
)brace
r_return
id|retval
suffix:semicolon
)brace
macro_line|#endif
macro_line|#if LINUX_VERSION_CODE  &lt;= KERNEL_VERSION(2,4,7)   
macro_line|#ifndef COMPLETION_INITIALIZER
macro_line|#include &lt;linux/wait.h&gt;
DECL|struct|completion
r_struct
id|completion
(brace
DECL|member|done
r_int
r_int
id|done
suffix:semicolon
DECL|member|wait
id|wait_queue_head_t
id|wait
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|COMPLETION_INITIALIZER
mdefine_line|#define COMPLETION_INITIALIZER(work) &bslash;&n;&t;{ 0, __WAIT_QUEUE_HEAD_INITIALIZER((work).wait) }
DECL|macro|DECLARE_COMPLETION
mdefine_line|#define DECLARE_COMPLETION(work) &bslash;&n;&t;struct completion work = COMPLETION_INITIALIZER(work)
DECL|macro|INIT_COMPLETION
mdefine_line|#define INIT_COMPLETION(x)&t;((x).done = 0)
DECL|function|init_completion
r_static
r_inline
r_void
id|init_completion
c_func
(paren
r_struct
id|completion
op_star
id|x
)paren
(brace
id|x-&gt;done
op_assign
l_int|0
suffix:semicolon
id|init_waitqueue_head
c_func
(paren
op_amp
id|x-&gt;wait
)paren
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifndef complete_and_exit
DECL|function|complete_and_exit
r_static
r_inline
r_void
id|complete_and_exit
c_func
(paren
r_struct
id|completion
op_star
id|comp
comma
r_int
id|code
)paren
(brace
multiline_comment|/*&n;&t;if (comp)&n;&t;&t;complete(comp);&n;&t;&n;&t;do_exit(code);&n;&t;*/
)brace
macro_line|#endif
macro_line|#endif
macro_line|#if LINUX_VERSION_CODE  &lt;= KERNEL_VERSION(2,4,2)   
DECL|function|scsi_set_pci_device
r_static
r_inline
r_void
id|scsi_set_pci_device
c_func
(paren
r_struct
id|Scsi_Host
op_star
id|SHpnt
comma
r_struct
id|pci_dev
op_star
id|pdev
)paren
(brace
singleline_comment|//&t;SHpnt-&gt;pci_dev = pdev;
)brace
DECL|function|wait_for_completion
r_static
r_inline
r_void
id|wait_for_completion
c_func
(paren
r_struct
id|completion
op_star
id|x
)paren
(brace
id|spin_lock_irq
c_func
(paren
op_amp
id|x-&gt;wait.lock
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|x-&gt;done
)paren
(brace
id|DECLARE_WAITQUEUE
c_func
(paren
id|wait
comma
id|current
)paren
suffix:semicolon
id|wait.flags
op_or_assign
id|WQ_FLAG_EXCLUSIVE
suffix:semicolon
id|__add_wait_queue_tail
c_func
(paren
op_amp
id|x-&gt;wait
comma
op_amp
id|wait
)paren
suffix:semicolon
r_do
(brace
id|__set_current_state
c_func
(paren
id|TASK_UNINTERRUPTIBLE
)paren
suffix:semicolon
id|spin_unlock_irq
c_func
(paren
op_amp
id|x-&gt;wait.lock
)paren
suffix:semicolon
id|schedule
c_func
(paren
)paren
suffix:semicolon
id|spin_lock_irq
c_func
(paren
op_amp
id|x-&gt;wait.lock
)paren
suffix:semicolon
)brace
r_while
c_loop
(paren
op_logical_neg
id|x-&gt;done
)paren
suffix:semicolon
id|__remove_wait_queue
c_func
(paren
op_amp
id|x-&gt;wait
comma
op_amp
id|wait
)paren
suffix:semicolon
)brace
id|x-&gt;done
op_decrement
suffix:semicolon
id|spin_unlock_irq
c_func
(paren
op_amp
id|x-&gt;wait.lock
)paren
suffix:semicolon
)brace
DECL|function|pci_set_dma_mask
r_static
r_inline
r_int
id|pci_set_dma_mask
c_func
(paren
r_struct
id|pci_dev
op_star
id|dev
comma
id|dma_addr_t
id|mask
)paren
(brace
id|dev-&gt;dma_mask
op_assign
id|mask
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
macro_line|#endif
eof
