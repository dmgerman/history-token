multiline_comment|/******************************************************************************&n; *                  QLOGIC LINUX SOFTWARE&n; *&n; * QLogic ISP2x00 device driver for Linux 2.6.x&n; * Copyright (C) 2003-2004 QLogic Corporation&n; * (www.qlogic.com)&n; *&n; * This program is free software; you can redistribute it and/or modify it&n; * under the terms of the GNU General Public License as published by the&n; * Free Software Foundation; either version 2, or (at your option) any&n; * later version.&n; *&n; * This program is distributed in the hope that it will be useful, but&n; * WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU&n; * General Public License for more details.&n; *&n; ******************************************************************************/
multiline_comment|/* Management functions for various lists */
multiline_comment|/* __add_to_done_queue()&n; * &n; * Place SRB command on done queue.&n; *&n; * Input:&n; *      ha           = host pointer&n; *      sp           = srb pointer.&n; * Locking:&n; * &t;this function assumes the ha-&gt;list_lock is already taken&n; */
r_static
r_inline
r_void
DECL|function|__add_to_done_queue
id|__add_to_done_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
multiline_comment|/*&n;        if (sp-&gt;state != SRB_NO_QUEUE_STATE &amp;&amp; &n;        &t;sp-&gt;state != SRB_ACTIVE_STATE)&n;&t;&t;BUG();&n;&t;*/
multiline_comment|/* Place block on done queue */
id|sp-&gt;cmd-&gt;host_scribble
op_assign
(paren
r_int
r_char
op_star
)paren
l_int|NULL
suffix:semicolon
id|sp-&gt;state
op_assign
id|SRB_DONE_STATE
suffix:semicolon
id|list_add_tail
c_func
(paren
op_amp
id|sp-&gt;list
comma
op_amp
id|ha-&gt;done_queue
)paren
suffix:semicolon
id|ha-&gt;done_q_cnt
op_increment
suffix:semicolon
id|sp-&gt;ha
op_assign
id|ha
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|__add_to_retry_queue
id|__add_to_retry_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
multiline_comment|/*&n;        if( sp-&gt;state != SRB_NO_QUEUE_STATE &amp;&amp; &n;        &t;sp-&gt;state != SRB_ACTIVE_STATE)&n;&t;&t;BUG();&n;&t;*/
multiline_comment|/* Place block on retry queue */
id|list_add_tail
c_func
(paren
op_amp
id|sp-&gt;list
comma
op_amp
id|ha-&gt;retry_queue
)paren
suffix:semicolon
id|ha-&gt;retry_q_cnt
op_increment
suffix:semicolon
id|sp-&gt;flags
op_or_assign
id|SRB_WATCHDOG
suffix:semicolon
id|sp-&gt;state
op_assign
id|SRB_RETRY_STATE
suffix:semicolon
id|sp-&gt;ha
op_assign
id|ha
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|__add_to_scsi_retry_queue
id|__add_to_scsi_retry_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
multiline_comment|/*&n;        if( sp-&gt;state != SRB_NO_QUEUE_STATE &amp;&amp; &n;        &t;sp-&gt;state != SRB_ACTIVE_STATE)&n;&t;&t;BUG();&n;&t;*/
multiline_comment|/* Place block on retry queue */
id|list_add_tail
c_func
(paren
op_amp
id|sp-&gt;list
comma
op_amp
id|ha-&gt;scsi_retry_queue
)paren
suffix:semicolon
id|ha-&gt;scsi_retry_q_cnt
op_increment
suffix:semicolon
id|sp-&gt;state
op_assign
id|SRB_SCSI_RETRY_STATE
suffix:semicolon
id|sp-&gt;ha
op_assign
id|ha
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|add_to_done_queue
id|add_to_done_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
id|__add_to_done_queue
c_func
(paren
id|ha
comma
id|sp
)paren
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|add_to_free_queue
id|add_to_free_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
id|mempool_free
c_func
(paren
id|sp
comma
id|ha-&gt;srb_mempool
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|add_to_retry_queue
id|add_to_retry_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
id|__add_to_retry_queue
c_func
(paren
id|ha
comma
id|sp
)paren
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|add_to_scsi_retry_queue
id|add_to_scsi_retry_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
id|__add_to_scsi_retry_queue
c_func
(paren
id|ha
comma
id|sp
)paren
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * __del_from_retry_queue&n; *      Function used to remove a command block from the&n; *      watchdog timer queue.&n; *&n; *      Note: Must insure that command is on watchdog&n; *            list before calling del_from_retry_queue&n; *            if (sp-&gt;flags &amp; SRB_WATCHDOG)&n; *&n; * Input: &n; *      ha = adapter block pointer.&n; *      sp = srb pointer.&n; * Locking:&n; *&t;this function assumes the list_lock is already taken&n; */
r_static
r_inline
r_void
DECL|function|__del_from_retry_queue
id|__del_from_retry_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
id|list_del_init
c_func
(paren
op_amp
id|sp-&gt;list
)paren
suffix:semicolon
id|sp-&gt;flags
op_and_assign
op_complement
(paren
id|SRB_WATCHDOG
op_or
id|SRB_BUSY
)paren
suffix:semicolon
id|sp-&gt;state
op_assign
id|SRB_NO_QUEUE_STATE
suffix:semicolon
id|ha-&gt;retry_q_cnt
op_decrement
suffix:semicolon
)brace
multiline_comment|/*&n; * __del_from_scsi_retry_queue&n; *      Function used to remove a command block from the&n; *      scsi retry queue.&n; *&n; * Input: &n; *      ha = adapter block pointer.&n; *      sp = srb pointer.&n; * Locking:&n; *&t;this function assumes the list_lock is already taken&n; */
r_static
r_inline
r_void
DECL|function|__del_from_scsi_retry_queue
id|__del_from_scsi_retry_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
id|list_del_init
c_func
(paren
op_amp
id|sp-&gt;list
)paren
suffix:semicolon
id|ha-&gt;scsi_retry_q_cnt
op_decrement
suffix:semicolon
id|sp-&gt;state
op_assign
id|SRB_NO_QUEUE_STATE
suffix:semicolon
)brace
multiline_comment|/*&n; * del_from_retry_queue&n; *      Function used to remove a command block from the&n; *      watchdog timer queue.&n; *&n; *      Note: Must insure that command is on watchdog&n; *            list before calling del_from_retry_queue&n; *            if (sp-&gt;flags &amp; SRB_WATCHDOG)&n; *&n; * Input: &n; *      ha = adapter block pointer.&n; *      sp = srb pointer.&n; * Locking:&n; *&t;this function takes and releases the list_lock&n; */
r_static
r_inline
r_void
DECL|function|del_from_retry_queue
id|del_from_retry_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
multiline_comment|/*&t;if (unlikely(!(sp-&gt;flags &amp; SRB_WATCHDOG)))&n;        &t;&t;BUG();*/
id|spin_lock_irqsave
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
multiline_comment|/*&t;if (unlikely(list_empty(&amp;ha-&gt;retry_queue)))&n;        &t;&t;BUG();*/
id|__del_from_retry_queue
c_func
(paren
id|ha
comma
id|sp
)paren
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * del_from_scsi_retry_queue&n; *      Function used to remove a command block from the&n; *      scsi retry queue.&n; *&n; * Input: &n; *      ha = adapter block pointer.&n; *      sp = srb pointer.&n; * Locking:&n; *&t;this function takes and releases the list_lock&n; */
r_static
r_inline
r_void
DECL|function|del_from_scsi_retry_queue
id|del_from_scsi_retry_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
multiline_comment|/*&t;if (unlikely(list_empty(&amp;ha-&gt;scsi_retry_queue)))&n;        &t;&t;BUG();*/
id|__del_from_scsi_retry_queue
c_func
(paren
id|ha
comma
id|sp
)paren
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * __add_to_pending_queue&n; *      Add the standard SCB job to the bottom of standard SCB commands.&n; *&n; * Input:&n; * COMPLETE!!!&n; *      q  = SCSI LU pointer.&n; *      sp = srb pointer.&n; *      SCSI_LU_Q lock must be already obtained.&n; */
r_static
r_inline
r_int
DECL|function|__add_to_pending_queue
id|__add_to_pending_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
r_int
id|empty
suffix:semicolon
multiline_comment|/*&n;        if( sp-&gt;state != SRB_NO_QUEUE_STATE &amp;&amp;&n;        &t;sp-&gt;state != SRB_FREE_STATE &amp;&amp;&n;        &t;sp-&gt;state != SRB_ACTIVE_STATE)&n;&t;&t;BUG();&n;&t;*/
id|empty
op_assign
id|list_empty
c_func
(paren
op_amp
id|ha-&gt;pending_queue
)paren
suffix:semicolon
id|list_add_tail
c_func
(paren
op_amp
id|sp-&gt;list
comma
op_amp
id|ha-&gt;pending_queue
)paren
suffix:semicolon
id|ha-&gt;qthreads
op_increment
suffix:semicolon
id|sp-&gt;state
op_assign
id|SRB_PENDING_STATE
suffix:semicolon
r_return
(paren
id|empty
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|__add_to_pending_queue_head
id|__add_to_pending_queue_head
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
multiline_comment|/*&n;        if( sp-&gt;state != SRB_NO_QUEUE_STATE &amp;&amp; &n;        &t;sp-&gt;state != SRB_FREE_STATE &amp;&amp;&n;        &t;sp-&gt;state != SRB_ACTIVE_STATE)&n;&t;&t;BUG();&n;&t;*/
id|list_add
c_func
(paren
op_amp
id|sp-&gt;list
comma
op_amp
id|ha-&gt;pending_queue
)paren
suffix:semicolon
id|ha-&gt;qthreads
op_increment
suffix:semicolon
id|sp-&gt;state
op_assign
id|SRB_PENDING_STATE
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|add_to_pending_queue
id|add_to_pending_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
r_int
id|empty
suffix:semicolon
r_int
r_int
id|flags
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
id|empty
op_assign
id|__add_to_pending_queue
c_func
(paren
id|ha
comma
id|sp
)paren
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
r_return
(paren
id|empty
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|add_to_pending_queue_head
id|add_to_pending_queue_head
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
id|__add_to_pending_queue_head
c_func
(paren
id|ha
comma
id|sp
)paren
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|__del_from_pending_queue
id|__del_from_pending_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
id|list_del_init
c_func
(paren
op_amp
id|sp-&gt;list
)paren
suffix:semicolon
id|ha-&gt;qthreads
op_decrement
suffix:semicolon
id|sp-&gt;state
op_assign
id|SRB_NO_QUEUE_STATE
suffix:semicolon
)brace
multiline_comment|/*&n; * Failover Stuff.&n; */
r_static
r_inline
r_void
DECL|function|__add_to_failover_queue
id|__add_to_failover_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
multiline_comment|/*&n;        if( sp-&gt;state != SRB_NO_QUEUE_STATE &amp;&amp; &n;        &t;sp-&gt;state != SRB_ACTIVE_STATE)&n;&t;&t;BUG();&n;&t;*/
id|list_add_tail
c_func
(paren
op_amp
id|sp-&gt;list
comma
op_amp
id|ha-&gt;failover_queue
)paren
suffix:semicolon
id|ha-&gt;failover_cnt
op_increment
suffix:semicolon
id|sp-&gt;state
op_assign
id|SRB_FAILOVER_STATE
suffix:semicolon
id|sp-&gt;ha
op_assign
id|ha
suffix:semicolon
)brace
DECL|function|add_to_failover_queue
r_static
r_inline
r_void
id|add_to_failover_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
id|__add_to_failover_queue
c_func
(paren
id|ha
comma
id|sp
)paren
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
)brace
DECL|function|__del_from_failover_queue
r_static
r_inline
r_void
id|__del_from_failover_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
id|ha-&gt;failover_cnt
op_decrement
suffix:semicolon
id|list_del_init
c_func
(paren
op_amp
id|sp-&gt;list
)paren
suffix:semicolon
id|sp-&gt;state
op_assign
id|SRB_NO_QUEUE_STATE
suffix:semicolon
)brace
DECL|function|del_from_failover_queue
r_static
r_inline
r_void
id|del_from_failover_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
id|__del_from_failover_queue
c_func
(paren
id|ha
comma
id|sp
)paren
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|del_from_pending_queue
id|del_from_pending_queue
c_func
(paren
r_struct
id|scsi_qla_host
op_star
id|ha
comma
id|srb_t
op_star
id|sp
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
id|__del_from_pending_queue
c_func
(paren
id|ha
comma
id|sp
)paren
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|ha-&gt;list_lock
comma
id|flags
)paren
suffix:semicolon
)brace
eof
