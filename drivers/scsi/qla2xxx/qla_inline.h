multiline_comment|/*&n; *                  QLOGIC LINUX SOFTWARE&n; *&n; * QLogic ISP2x00 device driver for Linux 2.6.x&n; * Copyright (C) 2003-2004 QLogic Corporation&n; * (www.qlogic.com)&n; *&n; * This program is free software; you can redistribute it and/or modify it&n; * under the terms of the GNU General Public License as published by the&n; * Free Software Foundation; either version 2, or (at your option) any&n; * later version.&n; *&n; * This program is distributed in the hope that it will be useful, but&n; * WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU&n; * General Public License for more details.&n; *&n; */
r_static
id|__inline__
r_uint16
id|qla2x00_debounce_register
c_func
(paren
r_volatile
r_uint16
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * qla2x00_debounce_register&n; *      Debounce register.&n; *&n; * Input:&n; *      port = register address.&n; *&n; * Returns:&n; *      register value.&n; */
r_static
id|__inline__
r_uint16
DECL|function|qla2x00_debounce_register
id|qla2x00_debounce_register
c_func
(paren
r_volatile
r_uint16
op_star
id|addr
)paren
(brace
r_volatile
r_uint16
id|first
suffix:semicolon
r_volatile
r_uint16
id|second
suffix:semicolon
r_do
(brace
id|first
op_assign
id|RD_REG_WORD
c_func
(paren
id|addr
)paren
suffix:semicolon
id|barrier
c_func
(paren
)paren
suffix:semicolon
id|cpu_relax
c_func
(paren
)paren
suffix:semicolon
id|second
op_assign
id|RD_REG_WORD
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
r_while
c_loop
(paren
id|first
op_ne
id|second
)paren
suffix:semicolon
r_return
(paren
id|first
)paren
suffix:semicolon
)brace
r_static
id|__inline__
r_int
id|qla2x00_normalize_dma_addr
c_func
(paren
id|dma_addr_t
op_star
id|e_addr
comma
r_uint32
op_star
id|e_len
comma
id|dma_addr_t
op_star
id|ne_addr
comma
r_uint32
op_star
id|ne_len
)paren
suffix:semicolon
multiline_comment|/**&n; * qla2x00_normalize_dma_addr() - Normalize an DMA address.&n; * @e_addr: Raw DMA address&n; * @e_len: Raw DMA length&n; * @ne_addr: Normalized second DMA address&n; * @ne_len: Normalized second DMA length&n; *&n; * If the address does not span a 4GB page boundary, the contents of @ne_addr&n; * and @ne_len are undefined.  @e_len is updated to reflect a normalization.&n; *&n; * Example:&n; *&n; * &t;ffffabc0ffffeeee&t;(e_addr) start of DMA address&n; * &t;0000000020000000&t;(e_len)  length of DMA transfer&n; *&t;ffffabc11fffeeed&t;end of DMA transfer&n; *&n; * Is the 4GB boundary crossed?&n; *&n; * &t;ffffabc0ffffeeee&t;(e_addr)&n; *&t;ffffabc11fffeeed&t;(e_addr + e_len - 1)&n; *&t;00000001e0000003&t;((e_addr ^ (e_addr + e_len - 1))&n; *&t;0000000100000000&t;((e_addr ^ (e_addr + e_len - 1)) &amp; ~(0xffffffff)&n; *&n; * Compute start of second DMA segment:&n; *&n; * &t;ffffabc0ffffeeee&t;(e_addr)&n; *&t;ffffabc1ffffeeee&t;(0x100000000 + e_addr)&n; *&t;ffffabc100000000&t;(0x100000000 + e_addr) &amp; ~(0xffffffff)&n; *&t;ffffabc100000000&t;(ne_addr)&n; *&t;&n; * Compute length of second DMA segment:&n; *&n; *&t;00000000ffffeeee&t;(e_addr &amp; 0xffffffff)&n; *&t;0000000000001112&t;(0x100000000 - (e_addr &amp; 0xffffffff))&n; *&t;000000001fffeeee&t;(e_len - (0x100000000 - (e_addr &amp; 0xffffffff))&n; *&t;000000001fffeeee&t;(ne_len)&n; *&n; * Adjust length of first DMA segment&n; *&n; * &t;0000000020000000&t;(e_len)&n; *&t;0000000000001112&t;(e_len - ne_len)&n; *&t;0000000000001112&t;(e_len)&n; *&n; * Returns non-zero if the specified address was normalized, else zero.&n; */
r_static
id|__inline__
r_int
DECL|function|qla2x00_normalize_dma_addr
id|qla2x00_normalize_dma_addr
c_func
(paren
id|dma_addr_t
op_star
id|e_addr
comma
r_uint32
op_star
id|e_len
comma
id|dma_addr_t
op_star
id|ne_addr
comma
r_uint32
op_star
id|ne_len
)paren
(brace
r_int
id|normalized
suffix:semicolon
id|normalized
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
(paren
op_star
id|e_addr
op_xor
(paren
op_star
id|e_addr
op_plus
op_star
id|e_len
op_minus
l_int|1
)paren
)paren
op_amp
op_complement
(paren
l_int|0xFFFFFFFFULL
)paren
)paren
(brace
multiline_comment|/* Compute normalized crossed address and len */
op_star
id|ne_addr
op_assign
(paren
l_int|0x100000000ULL
op_plus
op_star
id|e_addr
)paren
op_amp
op_complement
(paren
l_int|0xFFFFFFFFULL
)paren
suffix:semicolon
op_star
id|ne_len
op_assign
op_star
id|e_len
op_minus
(paren
l_int|0x100000000ULL
op_minus
(paren
op_star
id|e_addr
op_amp
l_int|0xFFFFFFFFULL
)paren
)paren
suffix:semicolon
op_star
id|e_len
op_sub_assign
op_star
id|ne_len
suffix:semicolon
id|normalized
op_increment
suffix:semicolon
)brace
r_return
(paren
id|normalized
)paren
suffix:semicolon
)brace
r_static
id|__inline__
r_void
id|qla2x00_poll
c_func
(paren
id|scsi_qla_host_t
op_star
)paren
suffix:semicolon
r_static
r_inline
r_void
DECL|function|qla2x00_poll
id|qla2x00_poll
c_func
(paren
id|scsi_qla_host_t
op_star
id|ha
)paren
(brace
id|qla2x00_intr_handler
c_func
(paren
l_int|0
comma
id|ha
comma
l_int|NULL
)paren
suffix:semicolon
)brace
r_static
id|__inline__
r_void
id|qla2x00_enable_intrs
c_func
(paren
id|scsi_qla_host_t
op_star
)paren
suffix:semicolon
r_static
id|__inline__
r_void
id|qla2x00_disable_intrs
c_func
(paren
id|scsi_qla_host_t
op_star
)paren
suffix:semicolon
r_static
r_inline
r_void
DECL|function|qla2x00_enable_intrs
id|qla2x00_enable_intrs
c_func
(paren
id|scsi_qla_host_t
op_star
id|ha
)paren
(brace
r_int
r_int
id|flags
op_assign
l_int|0
suffix:semicolon
id|device_reg_t
op_star
id|reg
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|ha-&gt;hardware_lock
comma
id|flags
)paren
suffix:semicolon
id|reg
op_assign
id|ha-&gt;iobase
suffix:semicolon
id|ha-&gt;interrupts_on
op_assign
l_int|1
suffix:semicolon
multiline_comment|/* enable risc and host interrupts */
id|WRT_REG_WORD
c_func
(paren
op_amp
id|reg-&gt;ictrl
comma
id|ICR_EN_INT
op_or
id|ICR_EN_RISC
)paren
suffix:semicolon
id|RD_REG_WORD
c_func
(paren
op_amp
id|reg-&gt;ictrl
)paren
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|ha-&gt;hardware_lock
comma
id|flags
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|qla2x00_disable_intrs
id|qla2x00_disable_intrs
c_func
(paren
id|scsi_qla_host_t
op_star
id|ha
)paren
(brace
r_int
r_int
id|flags
op_assign
l_int|0
suffix:semicolon
id|device_reg_t
op_star
id|reg
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|ha-&gt;hardware_lock
comma
id|flags
)paren
suffix:semicolon
id|reg
op_assign
id|ha-&gt;iobase
suffix:semicolon
id|ha-&gt;interrupts_on
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* disable risc and host interrupts */
id|WRT_REG_WORD
c_func
(paren
op_amp
id|reg-&gt;ictrl
comma
l_int|0
)paren
suffix:semicolon
id|RD_REG_WORD
c_func
(paren
op_amp
id|reg-&gt;ictrl
)paren
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|ha-&gt;hardware_lock
comma
id|flags
)paren
suffix:semicolon
)brace
r_static
id|__inline__
r_int
id|qla2x00_is_wwn_zero
c_func
(paren
r_uint8
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * qla2x00_is_wwn_zero - Check for zero node name&n; *&n; * Input:&n; *      wwn = Pointer to WW name to check&n; *&n; * Returns:&n; *      1 if name is 0x00 else 0&n; *&n; * Context:&n; *      Kernel context.&n; */
r_static
id|__inline__
r_int
DECL|function|qla2x00_is_wwn_zero
id|qla2x00_is_wwn_zero
c_func
(paren
r_uint8
op_star
id|wwn
)paren
(brace
r_int
id|cnt
suffix:semicolon
r_for
c_loop
(paren
id|cnt
op_assign
l_int|0
suffix:semicolon
id|cnt
OL
id|WWN_SIZE
suffix:semicolon
id|cnt
op_increment
comma
id|wwn
op_increment
)paren
(brace
r_if
c_cond
(paren
op_star
id|wwn
op_ne
l_int|0
)paren
r_break
suffix:semicolon
)brace
multiline_comment|/* if zero return 1 */
r_if
c_cond
(paren
id|cnt
op_eq
id|WWN_SIZE
)paren
r_return
(paren
l_int|1
)paren
suffix:semicolon
r_else
r_return
(paren
l_int|0
)paren
suffix:semicolon
)brace
r_static
id|__inline__
r_uint8
id|qla2x00_suspend_lun
c_func
(paren
id|scsi_qla_host_t
op_star
comma
id|os_lun_t
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_static
id|__inline__
r_uint8
id|qla2x00_delay_lun
c_func
(paren
id|scsi_qla_host_t
op_star
comma
id|os_lun_t
op_star
comma
r_int
)paren
suffix:semicolon
r_static
id|__inline__
r_uint8
DECL|function|qla2x00_suspend_lun
id|qla2x00_suspend_lun
c_func
(paren
id|scsi_qla_host_t
op_star
id|ha
comma
id|os_lun_t
op_star
id|lq
comma
r_int
id|time
comma
r_int
id|count
)paren
(brace
r_return
(paren
id|__qla2x00_suspend_lun
c_func
(paren
id|ha
comma
id|lq
comma
id|time
comma
id|count
comma
l_int|0
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline__
r_uint8
DECL|function|qla2x00_delay_lun
id|qla2x00_delay_lun
c_func
(paren
id|scsi_qla_host_t
op_star
id|ha
comma
id|os_lun_t
op_star
id|lq
comma
r_int
id|time
)paren
(brace
r_return
(paren
id|__qla2x00_suspend_lun
c_func
(paren
id|ha
comma
id|lq
comma
id|time
comma
l_int|1
comma
l_int|1
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline__
r_void
id|qla2x00_check_fabric_devices
c_func
(paren
id|scsi_qla_host_t
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * This routine will wait for fabric devices for&n; * the reset delay.&n; */
DECL|function|qla2x00_check_fabric_devices
r_static
id|__inline__
r_void
id|qla2x00_check_fabric_devices
c_func
(paren
id|scsi_qla_host_t
op_star
id|ha
)paren
(brace
r_uint16
id|fw_state
suffix:semicolon
id|qla2x00_get_firmware_state
c_func
(paren
id|ha
comma
op_amp
id|fw_state
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * qla2x00_issue_marker() - Issue a Marker IOCB if necessary.&n; * @ha: HA context&n; * @ha_locked: is function called with the hardware lock&n; *&n; * Returns non-zero if a failure occured, else zero.&n; */
r_static
r_inline
r_int
DECL|function|qla2x00_issue_marker
id|qla2x00_issue_marker
c_func
(paren
id|scsi_qla_host_t
op_star
id|ha
comma
r_int
id|ha_locked
)paren
(brace
multiline_comment|/* Send marker if required */
r_if
c_cond
(paren
id|ha-&gt;marker_needed
op_ne
l_int|0
)paren
(brace
r_if
c_cond
(paren
id|ha_locked
)paren
(brace
r_if
c_cond
(paren
id|__qla2x00_marker
c_func
(paren
id|ha
comma
l_int|0
comma
l_int|0
comma
id|MK_SYNC_ALL
)paren
op_ne
id|QLA_SUCCESS
)paren
r_return
(paren
id|QLA_FUNCTION_FAILED
)paren
suffix:semicolon
)brace
r_else
(brace
r_if
c_cond
(paren
id|qla2x00_marker
c_func
(paren
id|ha
comma
l_int|0
comma
l_int|0
comma
id|MK_SYNC_ALL
)paren
op_ne
id|QLA_SUCCESS
)paren
r_return
(paren
id|QLA_FUNCTION_FAILED
)paren
suffix:semicolon
)brace
id|ha-&gt;marker_needed
op_assign
l_int|0
suffix:semicolon
)brace
r_return
(paren
id|QLA_SUCCESS
)paren
suffix:semicolon
)brace
r_static
id|__inline__
r_void
id|qla2x00_add_timer_to_cmd
c_func
(paren
id|srb_t
op_star
comma
r_int
)paren
suffix:semicolon
r_static
id|__inline__
r_void
id|qla2x00_delete_timer_from_cmd
c_func
(paren
id|srb_t
op_star
)paren
suffix:semicolon
multiline_comment|/**************************************************************************&n;*   qla2x00_add_timer_to_cmd&n;*&n;* Description:&n;*       Creates a timer for the specified command. The timeout is usually&n;*       the command time from kernel minus 2 secs.&n;*&n;* Input:&n;*     sp - pointer to validate&n;*&n;* Returns:&n;*     None.&n;**************************************************************************/
r_static
r_inline
r_void
DECL|function|qla2x00_add_timer_to_cmd
id|qla2x00_add_timer_to_cmd
c_func
(paren
id|srb_t
op_star
id|sp
comma
r_int
id|timeout
)paren
(brace
id|init_timer
c_func
(paren
op_amp
id|sp-&gt;timer
)paren
suffix:semicolon
id|sp-&gt;timer.expires
op_assign
id|jiffies
op_plus
id|timeout
op_star
id|HZ
suffix:semicolon
id|sp-&gt;timer.data
op_assign
(paren
r_int
r_int
)paren
id|sp
suffix:semicolon
id|sp-&gt;timer.function
op_assign
(paren
r_void
(paren
op_star
)paren
(paren
r_int
r_int
)paren
)paren
id|qla2x00_cmd_timeout
suffix:semicolon
id|add_timer
c_func
(paren
op_amp
id|sp-&gt;timer
)paren
suffix:semicolon
)brace
multiline_comment|/**************************************************************************&n;*   qla2x00_delete_timer_from_cmd&n;*&n;* Description:&n;*       Delete the timer for the specified command.&n;*&n;* Input:&n;*     sp - pointer to validate&n;*&n;* Returns:&n;*     None.&n;**************************************************************************/
r_static
r_inline
r_void
DECL|function|qla2x00_delete_timer_from_cmd
id|qla2x00_delete_timer_from_cmd
c_func
(paren
id|srb_t
op_star
id|sp
)paren
(brace
r_if
c_cond
(paren
id|sp-&gt;timer.function
op_ne
l_int|NULL
)paren
(brace
id|del_timer
c_func
(paren
op_amp
id|sp-&gt;timer
)paren
suffix:semicolon
id|sp-&gt;timer.function
op_assign
l_int|NULL
suffix:semicolon
id|sp-&gt;timer.data
op_assign
(paren
r_int
r_int
)paren
l_int|NULL
suffix:semicolon
)brace
)brace
eof
