multiline_comment|/*&n; * Inline routines shareable across OS platforms.&n; *&n; * Copyright (c) 1994-2001 Justin T. Gibbs.&n; * Copyright (c) 2000-2003 Adaptec Inc.&n; * All rights reserved.&n; *&n; * Redistribution and use in source and binary forms, with or without&n; * modification, are permitted provided that the following conditions&n; * are met:&n; * 1. Redistributions of source code must retain the above copyright&n; *    notice, this list of conditions, and the following disclaimer,&n; *    without modification.&n; * 2. Redistributions in binary form must reproduce at minimum a disclaimer&n; *    substantially similar to the &quot;NO WARRANTY&quot; disclaimer below&n; *    (&quot;Disclaimer&quot;) and any redistribution must be conditioned upon&n; *    including a substantially similar Disclaimer requirement for further&n; *    binary redistribution.&n; * 3. Neither the names of the above-listed copyright holders nor the names&n; *    of any contributors may be used to endorse or promote products derived&n; *    from this software without specific prior written permission.&n; *&n; * Alternatively, this software may be distributed under the terms of the&n; * GNU General Public License (&quot;GPL&quot;) version 2 as published by the Free&n; * Software Foundation.&n; *&n; * NO WARRANTY&n; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&n; * &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&n; * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR&n; * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT&n; * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL&n; * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS&n; * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&n; * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&n; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING&n; * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE&n; * POSSIBILITY OF SUCH DAMAGES.&n; *&n; * $Id: //depot/aic7xxx/aic7xxx/aic79xx_inline.h#49 $&n; *&n; * $FreeBSD$&n; */
macro_line|#ifndef _AIC79XX_INLINE_H_
DECL|macro|_AIC79XX_INLINE_H_
mdefine_line|#define _AIC79XX_INLINE_H_
multiline_comment|/******************************** Debugging ***********************************/
r_static
id|__inline
r_char
op_star
id|ahd_name
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_char
op_star
DECL|function|ahd_name
id|ahd_name
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
r_return
(paren
id|ahd-&gt;name
)paren
suffix:semicolon
)brace
multiline_comment|/************************ Sequencer Execution Control *************************/
r_static
id|__inline
r_void
id|ahd_known_modes
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|ahd_mode
id|src
comma
id|ahd_mode
id|dst
)paren
suffix:semicolon
r_static
id|__inline
id|ahd_mode_state
id|ahd_build_mode_state
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|ahd_mode
id|src
comma
id|ahd_mode
id|dst
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_extract_mode_state
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|ahd_mode_state
id|state
comma
id|ahd_mode
op_star
id|src
comma
id|ahd_mode
op_star
id|dst
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_set_modes
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|ahd_mode
id|src
comma
id|ahd_mode
id|dst
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_update_modes
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_assert_modes
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|ahd_mode
id|srcmode
comma
id|ahd_mode
id|dstmode
comma
r_const
r_char
op_star
id|file
comma
r_int
id|line
)paren
suffix:semicolon
r_static
id|__inline
id|ahd_mode_state
id|ahd_save_modes
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_restore_modes
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|ahd_mode_state
id|state
)paren
suffix:semicolon
r_static
id|__inline
r_int
id|ahd_is_paused
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_pause
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_unpause
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_void
DECL|function|ahd_known_modes
id|ahd_known_modes
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|ahd_mode
id|src
comma
id|ahd_mode
id|dst
)paren
(brace
id|ahd-&gt;src_mode
op_assign
id|src
suffix:semicolon
id|ahd-&gt;dst_mode
op_assign
id|dst
suffix:semicolon
id|ahd-&gt;saved_src_mode
op_assign
id|src
suffix:semicolon
id|ahd-&gt;saved_dst_mode
op_assign
id|dst
suffix:semicolon
)brace
r_static
id|__inline
id|ahd_mode_state
DECL|function|ahd_build_mode_state
id|ahd_build_mode_state
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|ahd_mode
id|src
comma
id|ahd_mode
id|dst
)paren
(brace
r_return
(paren
(paren
id|src
op_lshift
id|SRC_MODE_SHIFT
)paren
op_or
(paren
id|dst
op_lshift
id|DST_MODE_SHIFT
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_extract_mode_state
id|ahd_extract_mode_state
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|ahd_mode_state
id|state
comma
id|ahd_mode
op_star
id|src
comma
id|ahd_mode
op_star
id|dst
)paren
(brace
op_star
id|src
op_assign
(paren
id|state
op_amp
id|SRC_MODE
)paren
op_rshift
id|SRC_MODE_SHIFT
suffix:semicolon
op_star
id|dst
op_assign
(paren
id|state
op_amp
id|DST_MODE
)paren
op_rshift
id|DST_MODE_SHIFT
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_set_modes
id|ahd_set_modes
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|ahd_mode
id|src
comma
id|ahd_mode
id|dst
)paren
(brace
r_if
c_cond
(paren
id|ahd-&gt;src_mode
op_eq
id|src
op_logical_and
id|ahd-&gt;dst_mode
op_eq
id|dst
)paren
r_return
suffix:semicolon
macro_line|#ifdef AHD_DEBUG
r_if
c_cond
(paren
id|ahd-&gt;src_mode
op_eq
id|AHD_MODE_UNKNOWN
op_logical_or
id|ahd-&gt;dst_mode
op_eq
id|AHD_MODE_UNKNOWN
)paren
id|panic
c_func
(paren
l_string|&quot;Setting mode prior to saving it.&bslash;n&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|ahd_debug
op_amp
id|AHD_SHOW_MODEPTR
)paren
op_ne
l_int|0
)paren
id|printf
c_func
(paren
l_string|&quot;%s: Setting mode 0x%x&bslash;n&quot;
comma
id|ahd_name
c_func
(paren
id|ahd
)paren
comma
id|ahd_build_mode_state
c_func
(paren
id|ahd
comma
id|src
comma
id|dst
)paren
)paren
suffix:semicolon
macro_line|#endif
id|ahd_outb
c_func
(paren
id|ahd
comma
id|MODE_PTR
comma
id|ahd_build_mode_state
c_func
(paren
id|ahd
comma
id|src
comma
id|dst
)paren
)paren
suffix:semicolon
id|ahd-&gt;src_mode
op_assign
id|src
suffix:semicolon
id|ahd-&gt;dst_mode
op_assign
id|dst
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_update_modes
id|ahd_update_modes
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
id|ahd_mode_state
id|mode_ptr
suffix:semicolon
id|ahd_mode
id|src
suffix:semicolon
id|ahd_mode
id|dst
suffix:semicolon
id|mode_ptr
op_assign
id|ahd_inb
c_func
(paren
id|ahd
comma
id|MODE_PTR
)paren
suffix:semicolon
macro_line|#ifdef AHD_DEBUG
r_if
c_cond
(paren
(paren
id|ahd_debug
op_amp
id|AHD_SHOW_MODEPTR
)paren
op_ne
l_int|0
)paren
id|printf
c_func
(paren
l_string|&quot;Reading mode 0x%x&bslash;n&quot;
comma
id|mode_ptr
)paren
suffix:semicolon
macro_line|#endif
id|ahd_extract_mode_state
c_func
(paren
id|ahd
comma
id|mode_ptr
comma
op_amp
id|src
comma
op_amp
id|dst
)paren
suffix:semicolon
id|ahd_known_modes
c_func
(paren
id|ahd
comma
id|src
comma
id|dst
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_assert_modes
id|ahd_assert_modes
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|ahd_mode
id|srcmode
comma
id|ahd_mode
id|dstmode
comma
r_const
r_char
op_star
id|file
comma
r_int
id|line
)paren
(brace
macro_line|#ifdef AHD_DEBUG
r_if
c_cond
(paren
(paren
id|srcmode
op_amp
id|AHD_MK_MSK
c_func
(paren
id|ahd-&gt;src_mode
)paren
)paren
op_eq
l_int|0
op_logical_or
(paren
id|dstmode
op_amp
id|AHD_MK_MSK
c_func
(paren
id|ahd-&gt;dst_mode
)paren
)paren
op_eq
l_int|0
)paren
(brace
id|panic
c_func
(paren
l_string|&quot;%s:%s:%d: Mode assertion failed.&bslash;n&quot;
comma
id|ahd_name
c_func
(paren
id|ahd
)paren
comma
id|file
comma
id|line
)paren
suffix:semicolon
)brace
macro_line|#endif
)brace
r_static
id|__inline
id|ahd_mode_state
DECL|function|ahd_save_modes
id|ahd_save_modes
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
r_if
c_cond
(paren
id|ahd-&gt;src_mode
op_eq
id|AHD_MODE_UNKNOWN
op_logical_or
id|ahd-&gt;dst_mode
op_eq
id|AHD_MODE_UNKNOWN
)paren
id|ahd_update_modes
c_func
(paren
id|ahd
)paren
suffix:semicolon
r_return
(paren
id|ahd_build_mode_state
c_func
(paren
id|ahd
comma
id|ahd-&gt;src_mode
comma
id|ahd-&gt;dst_mode
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_restore_modes
id|ahd_restore_modes
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|ahd_mode_state
id|state
)paren
(brace
id|ahd_mode
id|src
suffix:semicolon
id|ahd_mode
id|dst
suffix:semicolon
id|ahd_extract_mode_state
c_func
(paren
id|ahd
comma
id|state
comma
op_amp
id|src
comma
op_amp
id|dst
)paren
suffix:semicolon
id|ahd_set_modes
c_func
(paren
id|ahd
comma
id|src
comma
id|dst
)paren
suffix:semicolon
)brace
DECL|macro|AHD_ASSERT_MODES
mdefine_line|#define AHD_ASSERT_MODES(ahd, source, dest) &bslash;&n;&t;ahd_assert_modes(ahd, source, dest, __FILE__, __LINE__);
multiline_comment|/*&n; * Determine whether the sequencer has halted code execution.&n; * Returns non-zero status if the sequencer is stopped.&n; */
r_static
id|__inline
r_int
DECL|function|ahd_is_paused
id|ahd_is_paused
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
r_return
(paren
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|HCNTRL
)paren
op_amp
id|PAUSE
)paren
op_ne
l_int|0
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Request that the sequencer stop and wait, indefinitely, for it&n; * to stop.  The sequencer will only acknowledge that it is paused&n; * once it has reached an instruction boundary and PAUSEDIS is&n; * cleared in the SEQCTL register.  The sequencer may use PAUSEDIS&n; * for critical sections.&n; */
r_static
id|__inline
r_void
DECL|function|ahd_pause
id|ahd_pause
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
id|ahd_outb
c_func
(paren
id|ahd
comma
id|HCNTRL
comma
id|ahd-&gt;pause
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * Since the sequencer can disable pausing in a critical section, we&n;&t; * must loop until it actually stops.&n;&t; */
r_while
c_loop
(paren
id|ahd_is_paused
c_func
(paren
id|ahd
)paren
op_eq
l_int|0
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Allow the sequencer to continue program execution.&n; * We check here to ensure that no additional interrupt&n; * sources that would cause the sequencer to halt have been&n; * asserted.  If, for example, a SCSI bus reset is detected&n; * while we are fielding a different, pausing, interrupt type,&n; * we don&squot;t want to release the sequencer before going back&n; * into our interrupt handler and dealing with this new&n; * condition.&n; */
r_static
id|__inline
r_void
DECL|function|ahd_unpause
id|ahd_unpause
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
multiline_comment|/*&n;&t; * Automatically restore our modes to those saved&n;&t; * prior to the first change of the mode.&n;&t; */
r_if
c_cond
(paren
id|ahd-&gt;saved_src_mode
op_ne
id|AHD_MODE_UNKNOWN
op_logical_and
id|ahd-&gt;saved_dst_mode
op_ne
id|AHD_MODE_UNKNOWN
)paren
(brace
r_if
c_cond
(paren
(paren
id|ahd-&gt;flags
op_amp
id|AHD_UPDATE_PEND_CMDS
)paren
op_ne
l_int|0
)paren
id|ahd_reset_cmds_pending
c_func
(paren
id|ahd
)paren
suffix:semicolon
id|ahd_set_modes
c_func
(paren
id|ahd
comma
id|ahd-&gt;saved_src_mode
comma
id|ahd-&gt;saved_dst_mode
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|INTSTAT
)paren
op_amp
op_complement
id|CMDCMPLT
)paren
op_eq
l_int|0
)paren
id|ahd_outb
c_func
(paren
id|ahd
comma
id|HCNTRL
comma
id|ahd-&gt;unpause
)paren
suffix:semicolon
id|ahd_known_modes
c_func
(paren
id|ahd
comma
id|AHD_MODE_UNKNOWN
comma
id|AHD_MODE_UNKNOWN
)paren
suffix:semicolon
)brace
multiline_comment|/*********************** Scatter Gather List Handling *************************/
r_static
id|__inline
r_void
op_star
id|ahd_sg_setup
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
comma
r_void
op_star
id|sgptr
comma
id|bus_addr_t
id|addr
comma
id|bus_size_t
id|len
comma
r_int
id|last
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_setup_scb_common
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_setup_data_scb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_setup_noxfer_scb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
suffix:semicolon
r_static
id|__inline
r_void
op_star
DECL|function|ahd_sg_setup
id|ahd_sg_setup
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
comma
r_void
op_star
id|sgptr
comma
id|bus_addr_t
id|addr
comma
id|bus_size_t
id|len
comma
r_int
id|last
)paren
(brace
id|scb-&gt;sg_count
op_increment
suffix:semicolon
r_if
c_cond
(paren
r_sizeof
(paren
id|bus_addr_t
)paren
OG
l_int|4
op_logical_and
(paren
id|ahd-&gt;flags
op_amp
id|AHD_64BIT_ADDRESSING
)paren
op_ne
l_int|0
)paren
(brace
r_struct
id|ahd_dma64_seg
op_star
id|sg
suffix:semicolon
id|sg
op_assign
(paren
r_struct
id|ahd_dma64_seg
op_star
)paren
id|sgptr
suffix:semicolon
id|sg-&gt;addr
op_assign
id|ahd_htole64
c_func
(paren
id|addr
)paren
suffix:semicolon
id|sg-&gt;len
op_assign
id|ahd_htole32
c_func
(paren
id|len
op_or
(paren
id|last
ques
c_cond
id|AHD_DMA_LAST_SEG
suffix:colon
l_int|0
)paren
)paren
suffix:semicolon
r_return
(paren
id|sg
op_plus
l_int|1
)paren
suffix:semicolon
)brace
r_else
(brace
r_struct
id|ahd_dma_seg
op_star
id|sg
suffix:semicolon
id|sg
op_assign
(paren
r_struct
id|ahd_dma_seg
op_star
)paren
id|sgptr
suffix:semicolon
id|sg-&gt;addr
op_assign
id|ahd_htole32
c_func
(paren
id|addr
op_amp
l_int|0xFFFFFFFF
)paren
suffix:semicolon
id|sg-&gt;len
op_assign
id|ahd_htole32
c_func
(paren
id|len
op_or
(paren
(paren
id|addr
op_rshift
l_int|8
)paren
op_amp
l_int|0x7F000000
)paren
op_or
(paren
id|last
ques
c_cond
id|AHD_DMA_LAST_SEG
suffix:colon
l_int|0
)paren
)paren
suffix:semicolon
r_return
(paren
id|sg
op_plus
l_int|1
)paren
suffix:semicolon
)brace
)brace
r_static
id|__inline
r_void
DECL|function|ahd_setup_scb_common
id|ahd_setup_scb_common
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
(brace
multiline_comment|/* XXX Handle target mode SCBs. */
id|scb-&gt;crc_retry_count
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
(paren
id|scb-&gt;flags
op_amp
id|SCB_PACKETIZED
)paren
op_ne
l_int|0
)paren
(brace
multiline_comment|/* XXX what about ACA??  It is type 4, but TAG_TYPE == 0x3. */
id|scb-&gt;hscb-&gt;task_attribute
op_assign
id|scb-&gt;hscb-&gt;control
op_amp
id|SCB_TAG_TYPE
suffix:semicolon
)brace
r_if
c_cond
(paren
id|scb-&gt;hscb-&gt;cdb_len
op_le
id|MAX_CDB_LEN_WITH_SENSE_ADDR
op_logical_or
(paren
id|scb-&gt;hscb-&gt;cdb_len
op_amp
id|SCB_CDB_LEN_PTR
)paren
op_ne
l_int|0
)paren
id|scb-&gt;hscb-&gt;shared_data.idata.cdb_plus_saddr.sense_addr
op_assign
id|ahd_htole32
c_func
(paren
id|scb-&gt;sense_busaddr
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_setup_data_scb
id|ahd_setup_data_scb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
(brace
multiline_comment|/*&n;&t; * Copy the first SG into the &quot;current&quot; data ponter area.&n;&t; */
r_if
c_cond
(paren
(paren
id|ahd-&gt;flags
op_amp
id|AHD_64BIT_ADDRESSING
)paren
op_ne
l_int|0
)paren
(brace
r_struct
id|ahd_dma64_seg
op_star
id|sg
suffix:semicolon
id|sg
op_assign
(paren
r_struct
id|ahd_dma64_seg
op_star
)paren
id|scb-&gt;sg_list
suffix:semicolon
id|scb-&gt;hscb-&gt;dataptr
op_assign
id|sg-&gt;addr
suffix:semicolon
id|scb-&gt;hscb-&gt;datacnt
op_assign
id|sg-&gt;len
suffix:semicolon
)brace
r_else
(brace
r_struct
id|ahd_dma_seg
op_star
id|sg
suffix:semicolon
r_uint32
op_star
id|dataptr_words
suffix:semicolon
id|sg
op_assign
(paren
r_struct
id|ahd_dma_seg
op_star
)paren
id|scb-&gt;sg_list
suffix:semicolon
id|dataptr_words
op_assign
(paren
r_uint32
op_star
)paren
op_amp
id|scb-&gt;hscb-&gt;dataptr
suffix:semicolon
id|dataptr_words
(braket
l_int|0
)braket
op_assign
id|sg-&gt;addr
suffix:semicolon
id|dataptr_words
(braket
l_int|1
)braket
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
(paren
id|ahd-&gt;flags
op_amp
id|AHD_39BIT_ADDRESSING
)paren
op_ne
l_int|0
)paren
(brace
r_uint64
id|high_addr
suffix:semicolon
id|high_addr
op_assign
id|ahd_le32toh
c_func
(paren
id|sg-&gt;len
)paren
op_amp
l_int|0x7F000000
suffix:semicolon
id|scb-&gt;hscb-&gt;dataptr
op_or_assign
id|ahd_htole64
c_func
(paren
id|high_addr
op_lshift
l_int|8
)paren
suffix:semicolon
)brace
id|scb-&gt;hscb-&gt;datacnt
op_assign
id|sg-&gt;len
suffix:semicolon
)brace
multiline_comment|/*&n;&t; * Note where to find the SG entries in bus space.&n;&t; * We also set the full residual flag which the &n;&t; * sequencer will clear as soon as a data transfer&n;&t; * occurs.&n;&t; */
id|scb-&gt;hscb-&gt;sgptr
op_assign
id|ahd_htole32
c_func
(paren
id|scb-&gt;sg_list_busaddr
op_or
id|SG_FULL_RESID
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_setup_noxfer_scb
id|ahd_setup_noxfer_scb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
(brace
id|scb-&gt;hscb-&gt;sgptr
op_assign
id|ahd_htole32
c_func
(paren
id|SG_LIST_NULL
)paren
suffix:semicolon
id|scb-&gt;hscb-&gt;dataptr
op_assign
l_int|0
suffix:semicolon
id|scb-&gt;hscb-&gt;datacnt
op_assign
l_int|0
suffix:semicolon
)brace
multiline_comment|/************************** Memory mapping routines ***************************/
r_static
id|__inline
r_int
id|ahd_sg_size
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_void
op_star
id|ahd_sg_bus_to_virt
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
comma
r_uint32
id|sg_busaddr
)paren
suffix:semicolon
r_static
id|__inline
r_uint32
id|ahd_sg_virt_to_bus
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
comma
r_void
op_star
id|sg
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_sync_scb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
comma
r_int
id|op
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_sync_sglist
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
comma
r_int
id|op
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_sync_sense
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
comma
r_int
id|op
)paren
suffix:semicolon
r_static
id|__inline
r_uint32
id|ahd_targetcmd_offset
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|index
)paren
suffix:semicolon
r_static
id|__inline
r_int
DECL|function|ahd_sg_size
id|ahd_sg_size
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
r_if
c_cond
(paren
(paren
id|ahd-&gt;flags
op_amp
id|AHD_64BIT_ADDRESSING
)paren
op_ne
l_int|0
)paren
r_return
(paren
r_sizeof
(paren
r_struct
id|ahd_dma64_seg
)paren
)paren
suffix:semicolon
r_return
(paren
r_sizeof
(paren
r_struct
id|ahd_dma_seg
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
op_star
DECL|function|ahd_sg_bus_to_virt
id|ahd_sg_bus_to_virt
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
comma
r_uint32
id|sg_busaddr
)paren
(brace
id|bus_addr_t
id|sg_offset
suffix:semicolon
multiline_comment|/* sg_list_phys points to entry 1, not 0 */
id|sg_offset
op_assign
id|sg_busaddr
op_minus
(paren
id|scb-&gt;sg_list_busaddr
op_minus
id|ahd_sg_size
c_func
(paren
id|ahd
)paren
)paren
suffix:semicolon
r_return
(paren
(paren
r_uint8
op_star
)paren
id|scb-&gt;sg_list
op_plus
id|sg_offset
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_uint32
DECL|function|ahd_sg_virt_to_bus
id|ahd_sg_virt_to_bus
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
comma
r_void
op_star
id|sg
)paren
(brace
id|bus_addr_t
id|sg_offset
suffix:semicolon
multiline_comment|/* sg_list_phys points to entry 1, not 0 */
id|sg_offset
op_assign
(paren
(paren
r_uint8
op_star
)paren
id|sg
op_minus
(paren
r_uint8
op_star
)paren
id|scb-&gt;sg_list
)paren
op_minus
id|ahd_sg_size
c_func
(paren
id|ahd
)paren
suffix:semicolon
r_return
(paren
id|scb-&gt;sg_list_busaddr
op_plus
id|sg_offset
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_sync_scb
id|ahd_sync_scb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
comma
r_int
id|op
)paren
(brace
id|ahd_dmamap_sync
c_func
(paren
id|ahd
comma
id|ahd-&gt;scb_data.hscb_dmat
comma
id|scb-&gt;hscb_map-&gt;dmamap
comma
multiline_comment|/*offset*/
(paren
r_uint8
op_star
)paren
id|scb-&gt;hscb
op_minus
id|scb-&gt;hscb_map-&gt;vaddr
comma
multiline_comment|/*len*/
r_sizeof
(paren
op_star
id|scb-&gt;hscb
)paren
comma
id|op
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_sync_sglist
id|ahd_sync_sglist
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
comma
r_int
id|op
)paren
(brace
r_if
c_cond
(paren
id|scb-&gt;sg_count
op_eq
l_int|0
)paren
r_return
suffix:semicolon
id|ahd_dmamap_sync
c_func
(paren
id|ahd
comma
id|ahd-&gt;scb_data.sg_dmat
comma
id|scb-&gt;sg_map-&gt;dmamap
comma
multiline_comment|/*offset*/
id|scb-&gt;sg_list_busaddr
op_minus
id|ahd_sg_size
c_func
(paren
id|ahd
)paren
comma
multiline_comment|/*len*/
id|ahd_sg_size
c_func
(paren
id|ahd
)paren
op_star
id|scb-&gt;sg_count
comma
id|op
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_sync_sense
id|ahd_sync_sense
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
comma
r_int
id|op
)paren
(brace
id|ahd_dmamap_sync
c_func
(paren
id|ahd
comma
id|ahd-&gt;scb_data.sense_dmat
comma
id|scb-&gt;sense_map-&gt;dmamap
comma
multiline_comment|/*offset*/
id|scb-&gt;sense_busaddr
comma
multiline_comment|/*len*/
id|AHD_SENSE_BUFSIZE
comma
id|op
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_uint32
DECL|function|ahd_targetcmd_offset
id|ahd_targetcmd_offset
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|index
)paren
(brace
r_return
(paren
(paren
(paren
r_uint8
op_star
)paren
op_amp
id|ahd-&gt;targetcmds
(braket
id|index
)braket
)paren
op_minus
(paren
r_uint8
op_star
)paren
id|ahd-&gt;qoutfifo
)paren
suffix:semicolon
)brace
multiline_comment|/*********************** Miscelaneous Support Functions ***********************/
r_static
id|__inline
r_void
id|ahd_complete_scb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_update_residual
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
suffix:semicolon
r_static
id|__inline
r_struct
id|ahd_initiator_tinfo
op_star
id|ahd_fetch_transinfo
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_char
id|channel
comma
id|u_int
id|our_id
comma
id|u_int
id|remote_id
comma
r_struct
id|ahd_tmode_tstate
op_star
op_star
id|tstate
)paren
suffix:semicolon
r_static
id|__inline
r_uint16
id|ahd_inw
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|port
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_outw
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|port
comma
id|u_int
id|value
)paren
suffix:semicolon
r_static
id|__inline
r_uint32
id|ahd_inl
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|port
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_outl
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|port
comma
r_uint32
id|value
)paren
suffix:semicolon
r_static
id|__inline
r_uint64
id|ahd_inq
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|port
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_outq
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|port
comma
r_uint64
id|value
)paren
suffix:semicolon
r_static
id|__inline
id|u_int
id|ahd_get_scbptr
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_set_scbptr
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|scbptr
)paren
suffix:semicolon
r_static
id|__inline
id|u_int
id|ahd_get_hnscb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_set_hnscb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|value
)paren
suffix:semicolon
r_static
id|__inline
id|u_int
id|ahd_get_hescb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_set_hescb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|value
)paren
suffix:semicolon
r_static
id|__inline
id|u_int
id|ahd_get_snscb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_set_snscb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|value
)paren
suffix:semicolon
r_static
id|__inline
id|u_int
id|ahd_get_sescb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_set_sescb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|value
)paren
suffix:semicolon
r_static
id|__inline
id|u_int
id|ahd_get_sdscb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_set_sdscb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|value
)paren
suffix:semicolon
r_static
id|__inline
id|u_int
id|ahd_inb_scbram
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|offset
)paren
suffix:semicolon
r_static
id|__inline
id|u_int
id|ahd_inw_scbram
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|offset
)paren
suffix:semicolon
r_static
id|__inline
r_uint32
id|ahd_inl_scbram
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|offset
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_swap_with_next_hscb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_queue_scb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
suffix:semicolon
r_static
id|__inline
r_uint8
op_star
id|ahd_get_sense_buf
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
suffix:semicolon
r_static
id|__inline
r_uint32
id|ahd_get_sense_bufaddr
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
suffix:semicolon
r_static
id|__inline
r_void
DECL|function|ahd_complete_scb
id|ahd_complete_scb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
(brace
r_uint32
id|sgptr
suffix:semicolon
id|sgptr
op_assign
id|ahd_le32toh
c_func
(paren
id|scb-&gt;hscb-&gt;sgptr
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|sgptr
op_amp
id|SG_STATUS_VALID
)paren
op_ne
l_int|0
)paren
id|ahd_handle_scb_status
c_func
(paren
id|ahd
comma
id|scb
)paren
suffix:semicolon
r_else
id|ahd_done
c_func
(paren
id|ahd
comma
id|scb
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Determine whether the sequencer reported a residual&n; * for this SCB/transaction.&n; */
r_static
id|__inline
r_void
DECL|function|ahd_update_residual
id|ahd_update_residual
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
(brace
r_uint32
id|sgptr
suffix:semicolon
id|sgptr
op_assign
id|ahd_le32toh
c_func
(paren
id|scb-&gt;hscb-&gt;sgptr
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|sgptr
op_amp
id|SG_STATUS_VALID
)paren
op_ne
l_int|0
)paren
id|ahd_calc_residual
c_func
(paren
id|ahd
comma
id|scb
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Return pointers to the transfer negotiation information&n; * for the specified our_id/remote_id pair.&n; */
r_static
id|__inline
r_struct
id|ahd_initiator_tinfo
op_star
DECL|function|ahd_fetch_transinfo
id|ahd_fetch_transinfo
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_char
id|channel
comma
id|u_int
id|our_id
comma
id|u_int
id|remote_id
comma
r_struct
id|ahd_tmode_tstate
op_star
op_star
id|tstate
)paren
(brace
multiline_comment|/*&n;&t; * Transfer data structures are stored from the perspective&n;&t; * of the target role.  Since the parameters for a connection&n;&t; * in the initiator role to a given target are the same as&n;&t; * when the roles are reversed, we pretend we are the target.&n;&t; */
r_if
c_cond
(paren
id|channel
op_eq
l_char|&squot;B&squot;
)paren
id|our_id
op_add_assign
l_int|8
suffix:semicolon
op_star
id|tstate
op_assign
id|ahd-&gt;enabled_targets
(braket
id|our_id
)braket
suffix:semicolon
r_return
(paren
op_amp
(paren
op_star
id|tstate
)paren
op_member_access_from_pointer
id|transinfo
(braket
id|remote_id
)braket
)paren
suffix:semicolon
)brace
DECL|macro|AHD_COPY_COL_IDX
mdefine_line|#define AHD_COPY_COL_IDX(dst, src)&t;&t;&t;&t;&bslash;&n;do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;dst-&gt;hscb-&gt;scsiid = src-&gt;hscb-&gt;scsiid;&t;&t;&t;&bslash;&n;&t;dst-&gt;hscb-&gt;lun = src-&gt;hscb-&gt;lun;&t;&t;&t;&bslash;&n;} while (0)
r_static
id|__inline
r_uint16
DECL|function|ahd_inw
id|ahd_inw
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|port
)paren
(brace
r_return
(paren
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|1
)paren
op_lshift
l_int|8
)paren
op_or
id|ahd_inb
c_func
(paren
id|ahd
comma
id|port
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_outw
id|ahd_outw
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|port
comma
id|u_int
id|value
)paren
(brace
id|ahd_outb
c_func
(paren
id|ahd
comma
id|port
comma
id|value
op_amp
l_int|0xFF
)paren
suffix:semicolon
id|ahd_outb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|1
comma
(paren
id|value
op_rshift
l_int|8
)paren
op_amp
l_int|0xFF
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_uint32
DECL|function|ahd_inl
id|ahd_inl
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|port
)paren
(brace
r_return
(paren
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|port
)paren
)paren
op_or
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|1
)paren
op_lshift
l_int|8
)paren
op_or
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|2
)paren
op_lshift
l_int|16
)paren
op_or
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|3
)paren
op_lshift
l_int|24
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_outl
id|ahd_outl
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|port
comma
r_uint32
id|value
)paren
(brace
id|ahd_outb
c_func
(paren
id|ahd
comma
id|port
comma
(paren
id|value
)paren
op_amp
l_int|0xFF
)paren
suffix:semicolon
id|ahd_outb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|1
comma
(paren
(paren
id|value
)paren
op_rshift
l_int|8
)paren
op_amp
l_int|0xFF
)paren
suffix:semicolon
id|ahd_outb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|2
comma
(paren
(paren
id|value
)paren
op_rshift
l_int|16
)paren
op_amp
l_int|0xFF
)paren
suffix:semicolon
id|ahd_outb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|3
comma
(paren
(paren
id|value
)paren
op_rshift
l_int|24
)paren
op_amp
l_int|0xFF
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_uint64
DECL|function|ahd_inq
id|ahd_inq
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|port
)paren
(brace
r_return
(paren
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|port
)paren
)paren
op_or
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|1
)paren
op_lshift
l_int|8
)paren
op_or
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|2
)paren
op_lshift
l_int|16
)paren
op_or
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|3
)paren
op_lshift
l_int|24
)paren
op_or
(paren
(paren
(paren
r_uint64
)paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|4
)paren
)paren
op_lshift
l_int|32
)paren
op_or
(paren
(paren
(paren
r_uint64
)paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|5
)paren
)paren
op_lshift
l_int|40
)paren
op_or
(paren
(paren
(paren
r_uint64
)paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|6
)paren
)paren
op_lshift
l_int|48
)paren
op_or
(paren
(paren
(paren
r_uint64
)paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|7
)paren
)paren
op_lshift
l_int|56
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_outq
id|ahd_outq
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|port
comma
r_uint64
id|value
)paren
(brace
id|ahd_outb
c_func
(paren
id|ahd
comma
id|port
comma
id|value
op_amp
l_int|0xFF
)paren
suffix:semicolon
id|ahd_outb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|1
comma
(paren
id|value
op_rshift
l_int|8
)paren
op_amp
l_int|0xFF
)paren
suffix:semicolon
id|ahd_outb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|2
comma
(paren
id|value
op_rshift
l_int|16
)paren
op_amp
l_int|0xFF
)paren
suffix:semicolon
id|ahd_outb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|3
comma
(paren
id|value
op_rshift
l_int|24
)paren
op_amp
l_int|0xFF
)paren
suffix:semicolon
id|ahd_outb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|4
comma
(paren
id|value
op_rshift
l_int|32
)paren
op_amp
l_int|0xFF
)paren
suffix:semicolon
id|ahd_outb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|5
comma
(paren
id|value
op_rshift
l_int|40
)paren
op_amp
l_int|0xFF
)paren
suffix:semicolon
id|ahd_outb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|6
comma
(paren
id|value
op_rshift
l_int|48
)paren
op_amp
l_int|0xFF
)paren
suffix:semicolon
id|ahd_outb
c_func
(paren
id|ahd
comma
id|port
op_plus
l_int|7
comma
(paren
id|value
op_rshift
l_int|56
)paren
op_amp
l_int|0xFF
)paren
suffix:semicolon
)brace
r_static
id|__inline
id|u_int
DECL|function|ahd_get_scbptr
id|ahd_get_scbptr
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
id|AHD_ASSERT_MODES
c_func
(paren
id|ahd
comma
op_complement
(paren
id|AHD_MODE_UNKNOWN_MSK
op_or
id|AHD_MODE_CFG_MSK
)paren
comma
op_complement
(paren
id|AHD_MODE_UNKNOWN_MSK
op_or
id|AHD_MODE_CFG_MSK
)paren
)paren
suffix:semicolon
r_return
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|SCBPTR
)paren
op_or
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|SCBPTR
op_plus
l_int|1
)paren
op_lshift
l_int|8
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_set_scbptr
id|ahd_set_scbptr
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|scbptr
)paren
(brace
id|AHD_ASSERT_MODES
c_func
(paren
id|ahd
comma
op_complement
(paren
id|AHD_MODE_UNKNOWN_MSK
op_or
id|AHD_MODE_CFG_MSK
)paren
comma
op_complement
(paren
id|AHD_MODE_UNKNOWN_MSK
op_or
id|AHD_MODE_CFG_MSK
)paren
)paren
suffix:semicolon
id|ahd_outb
c_func
(paren
id|ahd
comma
id|SCBPTR
comma
id|scbptr
op_amp
l_int|0xFF
)paren
suffix:semicolon
id|ahd_outb
c_func
(paren
id|ahd
comma
id|SCBPTR
op_plus
l_int|1
comma
(paren
id|scbptr
op_rshift
l_int|8
)paren
op_amp
l_int|0xFF
)paren
suffix:semicolon
)brace
r_static
id|__inline
id|u_int
DECL|function|ahd_get_hnscb_qoff
id|ahd_get_hnscb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
r_return
(paren
id|ahd_inw_atomic
c_func
(paren
id|ahd
comma
id|HNSCB_QOFF
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_set_hnscb_qoff
id|ahd_set_hnscb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|value
)paren
(brace
id|ahd_outw_atomic
c_func
(paren
id|ahd
comma
id|HNSCB_QOFF
comma
id|value
)paren
suffix:semicolon
)brace
r_static
id|__inline
id|u_int
DECL|function|ahd_get_hescb_qoff
id|ahd_get_hescb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
r_return
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|HESCB_QOFF
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_set_hescb_qoff
id|ahd_set_hescb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|value
)paren
(brace
id|ahd_outb
c_func
(paren
id|ahd
comma
id|HESCB_QOFF
comma
id|value
)paren
suffix:semicolon
)brace
r_static
id|__inline
id|u_int
DECL|function|ahd_get_snscb_qoff
id|ahd_get_snscb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
id|u_int
id|oldvalue
suffix:semicolon
id|AHD_ASSERT_MODES
c_func
(paren
id|ahd
comma
id|AHD_MODE_CCHAN_MSK
comma
id|AHD_MODE_CCHAN_MSK
)paren
suffix:semicolon
id|oldvalue
op_assign
id|ahd_inw
c_func
(paren
id|ahd
comma
id|SNSCB_QOFF
)paren
suffix:semicolon
id|ahd_outw
c_func
(paren
id|ahd
comma
id|SNSCB_QOFF
comma
id|oldvalue
)paren
suffix:semicolon
r_return
(paren
id|oldvalue
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_set_snscb_qoff
id|ahd_set_snscb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|value
)paren
(brace
id|AHD_ASSERT_MODES
c_func
(paren
id|ahd
comma
id|AHD_MODE_CCHAN_MSK
comma
id|AHD_MODE_CCHAN_MSK
)paren
suffix:semicolon
id|ahd_outw
c_func
(paren
id|ahd
comma
id|SNSCB_QOFF
comma
id|value
)paren
suffix:semicolon
)brace
r_static
id|__inline
id|u_int
DECL|function|ahd_get_sescb_qoff
id|ahd_get_sescb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
id|AHD_ASSERT_MODES
c_func
(paren
id|ahd
comma
id|AHD_MODE_CCHAN_MSK
comma
id|AHD_MODE_CCHAN_MSK
)paren
suffix:semicolon
r_return
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|SESCB_QOFF
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_set_sescb_qoff
id|ahd_set_sescb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|value
)paren
(brace
id|AHD_ASSERT_MODES
c_func
(paren
id|ahd
comma
id|AHD_MODE_CCHAN_MSK
comma
id|AHD_MODE_CCHAN_MSK
)paren
suffix:semicolon
id|ahd_outb
c_func
(paren
id|ahd
comma
id|SESCB_QOFF
comma
id|value
)paren
suffix:semicolon
)brace
r_static
id|__inline
id|u_int
DECL|function|ahd_get_sdscb_qoff
id|ahd_get_sdscb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
id|AHD_ASSERT_MODES
c_func
(paren
id|ahd
comma
id|AHD_MODE_CCHAN_MSK
comma
id|AHD_MODE_CCHAN_MSK
)paren
suffix:semicolon
r_return
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|SDSCB_QOFF
)paren
op_or
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|SDSCB_QOFF
op_plus
l_int|1
)paren
op_lshift
l_int|8
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_set_sdscb_qoff
id|ahd_set_sdscb_qoff
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|value
)paren
(brace
id|AHD_ASSERT_MODES
c_func
(paren
id|ahd
comma
id|AHD_MODE_CCHAN_MSK
comma
id|AHD_MODE_CCHAN_MSK
)paren
suffix:semicolon
id|ahd_outb
c_func
(paren
id|ahd
comma
id|SDSCB_QOFF
comma
id|value
op_amp
l_int|0xFF
)paren
suffix:semicolon
id|ahd_outb
c_func
(paren
id|ahd
comma
id|SDSCB_QOFF
op_plus
l_int|1
comma
(paren
id|value
op_rshift
l_int|8
)paren
op_amp
l_int|0xFF
)paren
suffix:semicolon
)brace
r_static
id|__inline
id|u_int
DECL|function|ahd_inb_scbram
id|ahd_inb_scbram
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|offset
)paren
(brace
id|u_int
id|value
suffix:semicolon
multiline_comment|/*&n;&t; * Workaround PCI-X Rev A. hardware bug.&n;&t; * After a host read of SCB memory, the chip&n;&t; * may become confused into thinking prefetch&n;&t; * was required.  This starts the discard timer&n;&t; * running and can cause an unexpected discard&n;&t; * timer interrupt.  The work around is to read&n;&t; * a normal register prior to the exhaustion of&n;&t; * the discard timer.  The mode pointer register&n;&t; * has no side effects and so serves well for&n;&t; * this purpose.&n;&t; *&n;&t; * Razor #528&n;&t; */
id|value
op_assign
id|ahd_inb
c_func
(paren
id|ahd
comma
id|offset
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|ahd-&gt;flags
op_amp
id|AHD_PCIX_SCBRAM_RD_BUG
)paren
op_ne
l_int|0
)paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|MODE_PTR
)paren
suffix:semicolon
r_return
(paren
id|value
)paren
suffix:semicolon
)brace
r_static
id|__inline
id|u_int
DECL|function|ahd_inw_scbram
id|ahd_inw_scbram
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|offset
)paren
(brace
r_return
(paren
id|ahd_inb_scbram
c_func
(paren
id|ahd
comma
id|offset
)paren
op_or
(paren
id|ahd_inb_scbram
c_func
(paren
id|ahd
comma
id|offset
op_plus
l_int|1
)paren
op_lshift
l_int|8
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_uint32
DECL|function|ahd_inl_scbram
id|ahd_inl_scbram
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|offset
)paren
(brace
r_return
(paren
id|ahd_inb_scbram
c_func
(paren
id|ahd
comma
id|offset
)paren
op_or
(paren
id|ahd_inb_scbram
c_func
(paren
id|ahd
comma
id|offset
op_plus
l_int|1
)paren
op_lshift
l_int|8
)paren
op_or
(paren
id|ahd_inb_scbram
c_func
(paren
id|ahd
comma
id|offset
op_plus
l_int|2
)paren
op_lshift
l_int|16
)paren
op_or
(paren
id|ahd_inb_scbram
c_func
(paren
id|ahd
comma
id|offset
op_plus
l_int|3
)paren
op_lshift
l_int|24
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_struct
id|scb
op_star
DECL|function|ahd_lookup_scb
id|ahd_lookup_scb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|u_int
id|tag
)paren
(brace
r_struct
id|scb
op_star
id|scb
suffix:semicolon
r_if
c_cond
(paren
id|tag
op_ge
id|AHD_SCB_MAX
)paren
r_return
(paren
l_int|NULL
)paren
suffix:semicolon
id|scb
op_assign
id|ahd-&gt;scb_data.scbindex
(braket
id|tag
)braket
suffix:semicolon
r_if
c_cond
(paren
id|scb
op_ne
l_int|NULL
)paren
id|ahd_sync_scb
c_func
(paren
id|ahd
comma
id|scb
comma
id|BUS_DMASYNC_POSTREAD
op_or
id|BUS_DMASYNC_POSTWRITE
)paren
suffix:semicolon
r_return
(paren
id|scb
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_swap_with_next_hscb
id|ahd_swap_with_next_hscb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
(brace
r_struct
id|hardware_scb
op_star
id|q_hscb
suffix:semicolon
r_uint32
id|saved_hscb_busaddr
suffix:semicolon
multiline_comment|/*&n;&t; * Our queuing method is a bit tricky.  The card&n;&t; * knows in advance which HSCB (by address) to download,&n;&t; * and we can&squot;t disappoint it.  To achieve this, the next&n;&t; * HSCB to download is saved off in ahd-&gt;next_queued_hscb.&n;&t; * When we are called to queue &quot;an arbitrary scb&quot;,&n;&t; * we copy the contents of the incoming HSCB to the one&n;&t; * the sequencer knows about, swap HSCB pointers and&n;&t; * finally assign the SCB to the tag indexed location&n;&t; * in the scb_array.  This makes sure that we can still&n;&t; * locate the correct SCB by SCB_TAG.&n;&t; */
id|q_hscb
op_assign
id|ahd-&gt;next_queued_hscb
suffix:semicolon
id|saved_hscb_busaddr
op_assign
id|q_hscb-&gt;hscb_busaddr
suffix:semicolon
id|memcpy
c_func
(paren
id|q_hscb
comma
id|scb-&gt;hscb
comma
r_sizeof
(paren
op_star
id|scb-&gt;hscb
)paren
)paren
suffix:semicolon
id|q_hscb-&gt;hscb_busaddr
op_assign
id|saved_hscb_busaddr
suffix:semicolon
id|q_hscb-&gt;next_hscb_busaddr
op_assign
id|scb-&gt;hscb-&gt;hscb_busaddr
suffix:semicolon
multiline_comment|/* Now swap HSCB pointers. */
id|ahd-&gt;next_queued_hscb
op_assign
id|scb-&gt;hscb
suffix:semicolon
id|scb-&gt;hscb
op_assign
id|q_hscb
suffix:semicolon
multiline_comment|/* Now define the mapping from tag to SCB in the scbindex */
id|ahd-&gt;scb_data.scbindex
(braket
id|SCB_GET_TAG
c_func
(paren
id|scb
)paren
)braket
op_assign
id|scb
suffix:semicolon
)brace
multiline_comment|/*&n; * Tell the sequencer about a new transaction to execute.&n; */
r_static
id|__inline
r_void
DECL|function|ahd_queue_scb
id|ahd_queue_scb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
(brace
id|ahd_swap_with_next_hscb
c_func
(paren
id|ahd
comma
id|scb
)paren
suffix:semicolon
r_if
c_cond
(paren
id|SCBID_IS_NULL
c_func
(paren
id|SCB_GET_TAG
c_func
(paren
id|scb
)paren
)paren
)paren
id|panic
c_func
(paren
l_string|&quot;Attempt to queue invalid SCB tag %x&bslash;n&quot;
comma
id|SCB_GET_TAG
c_func
(paren
id|scb
)paren
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * Keep a history of SCBs we&squot;ve downloaded in the qinfifo.&n;&t; */
id|ahd-&gt;qinfifo
(braket
id|AHD_QIN_WRAP
c_func
(paren
id|ahd-&gt;qinfifonext
)paren
)braket
op_assign
id|SCB_GET_TAG
c_func
(paren
id|scb
)paren
suffix:semicolon
id|ahd-&gt;qinfifonext
op_increment
suffix:semicolon
r_if
c_cond
(paren
id|scb-&gt;sg_count
op_ne
l_int|0
)paren
id|ahd_setup_data_scb
c_func
(paren
id|ahd
comma
id|scb
)paren
suffix:semicolon
r_else
id|ahd_setup_noxfer_scb
c_func
(paren
id|ahd
comma
id|scb
)paren
suffix:semicolon
id|ahd_setup_scb_common
c_func
(paren
id|ahd
comma
id|scb
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * Make sure our data is consistent from the&n;&t; * perspective of the adapter.&n;&t; */
id|ahd_sync_scb
c_func
(paren
id|ahd
comma
id|scb
comma
id|BUS_DMASYNC_PREREAD
op_or
id|BUS_DMASYNC_PREWRITE
)paren
suffix:semicolon
macro_line|#ifdef AHD_DEBUG
r_if
c_cond
(paren
(paren
id|ahd_debug
op_amp
id|AHD_SHOW_QUEUE
)paren
op_ne
l_int|0
)paren
(brace
r_uint64
id|host_dataptr
suffix:semicolon
id|host_dataptr
op_assign
id|ahd_le64toh
c_func
(paren
id|scb-&gt;hscb-&gt;dataptr
)paren
suffix:semicolon
id|printf
c_func
(paren
l_string|&quot;%s: Queueing SCB 0x%x bus addr 0x%x - 0x%x%x/0x%x&bslash;n&quot;
comma
id|ahd_name
c_func
(paren
id|ahd
)paren
comma
id|SCB_GET_TAG
c_func
(paren
id|scb
)paren
comma
id|ahd_le32toh
c_func
(paren
id|scb-&gt;hscb-&gt;hscb_busaddr
)paren
comma
(paren
id|u_int
)paren
(paren
(paren
id|host_dataptr
op_rshift
l_int|32
)paren
op_amp
l_int|0xFFFFFFFF
)paren
comma
(paren
id|u_int
)paren
(paren
id|host_dataptr
op_amp
l_int|0xFFFFFFFF
)paren
comma
id|ahd_le32toh
c_func
(paren
id|scb-&gt;hscb-&gt;datacnt
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif
multiline_comment|/* Tell the adapter about the newly queued SCB */
id|ahd_set_hnscb_qoff
c_func
(paren
id|ahd
comma
id|ahd-&gt;qinfifonext
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_uint8
op_star
DECL|function|ahd_get_sense_buf
id|ahd_get_sense_buf
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
(brace
r_return
(paren
id|scb-&gt;sense_data
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_uint32
DECL|function|ahd_get_sense_bufaddr
id|ahd_get_sense_bufaddr
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
(brace
r_return
(paren
id|scb-&gt;sense_busaddr
)paren
suffix:semicolon
)brace
multiline_comment|/************************** Interrupt Processing ******************************/
r_static
id|__inline
r_void
id|ahd_sync_qoutfifo
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|op
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_sync_tqinfifo
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|op
)paren
suffix:semicolon
r_static
id|__inline
id|u_int
id|ahd_check_cmdcmpltqueues
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_int
id|ahd_intr
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_void
DECL|function|ahd_sync_qoutfifo
id|ahd_sync_qoutfifo
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|op
)paren
(brace
id|ahd_dmamap_sync
c_func
(paren
id|ahd
comma
id|ahd-&gt;shared_data_dmat
comma
id|ahd-&gt;shared_data_dmamap
comma
multiline_comment|/*offset*/
l_int|0
comma
multiline_comment|/*len*/
id|AHC_SCB_MAX
op_star
r_sizeof
(paren
r_uint16
)paren
comma
id|op
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_sync_tqinfifo
id|ahd_sync_tqinfifo
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|op
)paren
(brace
macro_line|#ifdef AHD_TARGET_MODE
r_if
c_cond
(paren
(paren
id|ahd-&gt;flags
op_amp
id|AHD_TARGETROLE
)paren
op_ne
l_int|0
)paren
(brace
id|ahd_dmamap_sync
c_func
(paren
id|ahd
comma
id|ahd-&gt;shared_data_dmat
comma
id|ahd-&gt;shared_data_dmamap
comma
id|ahd_targetcmd_offset
c_func
(paren
id|ahd
comma
l_int|0
)paren
comma
r_sizeof
(paren
r_struct
id|target_cmd
)paren
op_star
id|AHD_TMODE_CMDS
comma
id|op
)paren
suffix:semicolon
)brace
macro_line|#endif
)brace
multiline_comment|/*&n; * See if the firmware has posted any completed commands&n; * into our in-core command complete fifos.&n; */
DECL|macro|AHD_RUN_QOUTFIFO
mdefine_line|#define AHD_RUN_QOUTFIFO 0x1
DECL|macro|AHD_RUN_TQINFIFO
mdefine_line|#define AHD_RUN_TQINFIFO 0x2
r_static
id|__inline
id|u_int
DECL|function|ahd_check_cmdcmpltqueues
id|ahd_check_cmdcmpltqueues
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
id|u_int
id|retval
suffix:semicolon
id|retval
op_assign
l_int|0
suffix:semicolon
id|ahd_dmamap_sync
c_func
(paren
id|ahd
comma
id|ahd-&gt;shared_data_dmat
comma
id|ahd-&gt;shared_data_dmamap
comma
multiline_comment|/*offset*/
id|ahd-&gt;qoutfifonext
comma
multiline_comment|/*len*/
l_int|2
comma
id|BUS_DMASYNC_POSTREAD
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|ahd-&gt;qoutfifo
(braket
id|ahd-&gt;qoutfifonext
)braket
op_amp
id|QOUTFIFO_ENTRY_VALID_LE
)paren
op_eq
id|ahd-&gt;qoutfifonext_valid_tag
)paren
id|retval
op_or_assign
id|AHD_RUN_QOUTFIFO
suffix:semicolon
macro_line|#ifdef AHD_TARGET_MODE
r_if
c_cond
(paren
(paren
id|ahd-&gt;flags
op_amp
id|AHD_TARGETROLE
)paren
op_ne
l_int|0
op_logical_and
(paren
id|ahd-&gt;flags
op_amp
id|AHD_TQINFIFO_BLOCKED
)paren
op_eq
l_int|0
)paren
(brace
id|ahd_dmamap_sync
c_func
(paren
id|ahd
comma
id|ahd-&gt;shared_data_dmat
comma
id|ahd-&gt;shared_data_dmamap
comma
id|ahd_targetcmd_offset
c_func
(paren
id|ahd
comma
id|ahd-&gt;tqinfifofnext
)paren
comma
multiline_comment|/*len*/
r_sizeof
(paren
r_struct
id|target_cmd
)paren
comma
id|BUS_DMASYNC_POSTREAD
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ahd-&gt;targetcmds
(braket
id|ahd-&gt;tqinfifonext
)braket
dot
id|cmd_valid
op_ne
l_int|0
)paren
id|retval
op_or_assign
id|AHD_RUN_TQINFIFO
suffix:semicolon
)brace
macro_line|#endif
r_return
(paren
id|retval
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Catch an interrupt from the adapter&n; */
r_static
id|__inline
r_int
DECL|function|ahd_intr
id|ahd_intr
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
id|u_int
id|intstat
suffix:semicolon
r_if
c_cond
(paren
(paren
id|ahd-&gt;pause
op_amp
id|INTEN
)paren
op_eq
l_int|0
)paren
(brace
multiline_comment|/*&n;&t;&t; * Our interrupt is not enabled on the chip&n;&t;&t; * and may be disabled for re-entrancy reasons,&n;&t;&t; * so just return.  This is likely just a shared&n;&t;&t; * interrupt.&n;&t;&t; */
r_return
(paren
l_int|0
)paren
suffix:semicolon
)brace
multiline_comment|/*&n;&t; * Instead of directly reading the interrupt status register,&n;&t; * infer the cause of the interrupt by checking our in-core&n;&t; * completion queues.  This avoids a costly PCI bus read in&n;&t; * most cases.&n;&t; */
r_if
c_cond
(paren
(paren
id|ahd-&gt;flags
op_amp
id|AHD_ALL_INTERRUPTS
)paren
op_eq
l_int|0
op_logical_and
(paren
id|ahd_check_cmdcmpltqueues
c_func
(paren
id|ahd
)paren
op_ne
l_int|0
)paren
)paren
id|intstat
op_assign
id|CMDCMPLT
suffix:semicolon
r_else
id|intstat
op_assign
id|ahd_inb
c_func
(paren
id|ahd
comma
id|INTSTAT
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|intstat
op_amp
id|INT_PEND
)paren
op_eq
l_int|0
)paren
r_return
(paren
l_int|0
)paren
suffix:semicolon
r_if
c_cond
(paren
id|intstat
op_amp
id|CMDCMPLT
)paren
(brace
id|ahd_outb
c_func
(paren
id|ahd
comma
id|CLRINT
comma
id|CLRCMDINT
)paren
suffix:semicolon
multiline_comment|/*&n;&t;&t; * Ensure that the chip sees that we&squot;ve cleared&n;&t;&t; * this interrupt before we walk the output fifo.&n;&t;&t; * Otherwise, we may, due to posted bus writes,&n;&t;&t; * clear the interrupt after we finish the scan,&n;&t;&t; * and after the sequencer has added new entries&n;&t;&t; * and asserted the interrupt again.&n;&t;&t; */
r_if
c_cond
(paren
(paren
id|ahd-&gt;bugs
op_amp
id|AHD_INTCOLLISION_BUG
)paren
op_ne
l_int|0
)paren
(brace
r_if
c_cond
(paren
id|ahd_is_paused
c_func
(paren
id|ahd
)paren
)paren
(brace
multiline_comment|/*&n;&t;&t;&t;&t; * Potentially lost SEQINT.&n;&t;&t;&t;&t; * If SEQINTCODE is non-zero,&n;&t;&t;&t;&t; * simulate the SEQINT.&n;&t;&t;&t;&t; */
r_if
c_cond
(paren
id|ahd_inb
c_func
(paren
id|ahd
comma
id|SEQINTCODE
)paren
op_ne
id|NO_SEQINT
)paren
id|intstat
op_or_assign
id|SEQINT
suffix:semicolon
)brace
)brace
r_else
(brace
id|ahd_flush_device_writes
c_func
(paren
id|ahd
)paren
suffix:semicolon
)brace
id|ahd_run_qoutfifo
c_func
(paren
id|ahd
)paren
suffix:semicolon
id|ahd-&gt;cmdcmplt_counts
(braket
id|ahd-&gt;cmdcmplt_bucket
)braket
op_increment
suffix:semicolon
id|ahd-&gt;cmdcmplt_total
op_increment
suffix:semicolon
macro_line|#ifdef AHD_TARGET_MODE
r_if
c_cond
(paren
(paren
id|ahd-&gt;flags
op_amp
id|AHD_TARGETROLE
)paren
op_ne
l_int|0
)paren
id|ahd_run_tqinfifo
c_func
(paren
id|ahd
comma
multiline_comment|/*paused*/
id|FALSE
)paren
suffix:semicolon
macro_line|#endif
)brace
multiline_comment|/*&n;&t; * Handle statuses that may invalidate our cached&n;&t; * copy of INTSTAT separately.&n;&t; */
r_if
c_cond
(paren
id|intstat
op_eq
l_int|0xFF
op_logical_and
(paren
id|ahd-&gt;features
op_amp
id|AHD_REMOVABLE
)paren
op_ne
l_int|0
)paren
(brace
multiline_comment|/* Hot eject.  Do nothing */
)brace
r_else
r_if
c_cond
(paren
id|intstat
op_amp
id|HWERRINT
)paren
(brace
id|ahd_handle_hwerrint
c_func
(paren
id|ahd
)paren
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
(paren
id|intstat
op_amp
(paren
id|PCIINT
op_or
id|SPLTINT
)paren
)paren
op_ne
l_int|0
)paren
(brace
id|ahd
op_member_access_from_pointer
id|bus_intr
c_func
(paren
id|ahd
)paren
suffix:semicolon
)brace
r_else
(brace
r_if
c_cond
(paren
(paren
id|intstat
op_amp
id|SEQINT
)paren
op_ne
l_int|0
)paren
id|ahd_handle_seqint
c_func
(paren
id|ahd
comma
id|intstat
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|intstat
op_amp
id|SCSIINT
)paren
op_ne
l_int|0
)paren
id|ahd_handle_scsiint
c_func
(paren
id|ahd
comma
id|intstat
)paren
suffix:semicolon
)brace
r_return
(paren
l_int|1
)paren
suffix:semicolon
)brace
macro_line|#endif  /* _AIC79XX_INLINE_H_ */
eof
