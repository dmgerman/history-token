multiline_comment|/*&n; * Adaptec AIC79xx device driver for Linux.&n; *&n; * Copyright (c) 2000-2001 Adaptec Inc.&n; * All rights reserved.&n; *&n; * Redistribution and use in source and binary forms, with or without&n; * modification, are permitted provided that the following conditions&n; * are met:&n; * 1. Redistributions of source code must retain the above copyright&n; *    notice, this list of conditions, and the following disclaimer,&n; *    without modification.&n; * 2. Redistributions in binary form must reproduce at minimum a disclaimer&n; *    substantially similar to the &quot;NO WARRANTY&quot; disclaimer below&n; *    (&quot;Disclaimer&quot;) and any redistribution must be conditioned upon&n; *    including a substantially similar Disclaimer requirement for further&n; *    binary redistribution.&n; * 3. Neither the names of the above-listed copyright holders nor the names&n; *    of any contributors may be used to endorse or promote products derived&n; *    from this software without specific prior written permission.&n; *&n; * Alternatively, this software may be distributed under the terms of the&n; * GNU General Public License (&quot;GPL&quot;) version 2 as published by the Free&n; * Software Foundation.&n; *&n; * NO WARRANTY&n; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&n; * &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&n; * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR&n; * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT&n; * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL&n; * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS&n; * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&n; * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&n; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING&n; * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE&n; * POSSIBILITY OF SUCH DAMAGES.&n; *&n; * $Id: //depot/aic7xxx/linux/drivers/scsi/aic7xxx/aic79xx_osm.h#130 $&n; *&n; */
macro_line|#ifndef _AIC79XX_LINUX_H_
DECL|macro|_AIC79XX_LINUX_H_
mdefine_line|#define _AIC79XX_LINUX_H_
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/blk.h&gt;
macro_line|#include &lt;linux/blkdev.h&gt;
macro_line|#include &lt;linux/delay.h&gt;
macro_line|#include &lt;linux/ioport.h&gt;
macro_line|#include &lt;linux/pci.h&gt;
macro_line|#include &lt;linux/smp_lock.h&gt;
macro_line|#include &lt;linux/version.h&gt;
macro_line|#include &lt;linux/module.h&gt;
macro_line|#include &lt;asm/byteorder.h&gt;
macro_line|#include &lt;asm/io.h&gt;
macro_line|#ifndef KERNEL_VERSION
DECL|macro|KERNEL_VERSION
mdefine_line|#define KERNEL_VERSION(x,y,z) (((x)&lt;&lt;16)+((y)&lt;&lt;8)+(z))
macro_line|#endif
macro_line|#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,4,0)
macro_line|#include &lt;linux/interrupt.h&gt; /* For tasklet support. */
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/slab.h&gt;
macro_line|#else
macro_line|#include &lt;linux/malloc.h&gt;
macro_line|#endif
multiline_comment|/* Core SCSI definitions */
DECL|macro|AIC_LIB_PREFIX
mdefine_line|#define AIC_LIB_PREFIX ahd
macro_line|#include &quot;scsi.h&quot;
macro_line|#include &quot;hosts.h&quot;
multiline_comment|/* Name space conflict with BSD queue macros */
macro_line|#ifdef LIST_HEAD
DECL|macro|LIST_HEAD
macro_line|#undef LIST_HEAD
macro_line|#endif
macro_line|#include &quot;cam.h&quot;
macro_line|#include &quot;queue.h&quot;
macro_line|#include &quot;scsi_message.h&quot;
macro_line|#include &quot;scsi_iu.h&quot;
macro_line|#include &quot;aiclib.h&quot;
multiline_comment|/*********************************** Debugging ********************************/
macro_line|#ifdef CONFIG_AIC79XX_DEBUG_ENABLE
macro_line|#ifdef CONFIG_AIC79XX_DEBUG_MASK
DECL|macro|AHD_DEBUG
mdefine_line|#define AHD_DEBUG 1
DECL|macro|AHD_DEBUG_OPTS
mdefine_line|#define AHD_DEBUG_OPTS CONFIG_AIC79XX_DEBUG_MASK
macro_line|#else
multiline_comment|/*&n; * Compile in debugging code, but do not enable any printfs.&n; */
DECL|macro|AHD_DEBUG
mdefine_line|#define AHD_DEBUG 1
DECL|macro|AHD_DEBUG_OPTS
mdefine_line|#define AHD_DEBUG_OPTS 0
macro_line|#endif
multiline_comment|/* No debugging code. */
macro_line|#endif
multiline_comment|/********************************** Misc Macros *******************************/
DECL|macro|roundup
mdefine_line|#define&t;roundup(x, y)   ((((x)+((y)-1))/(y))*(y))
DECL|macro|powerof2
mdefine_line|#define&t;powerof2(x)&t;((((x)-1)&amp;(x))==0)
multiline_comment|/************************* Forward Declarations *******************************/
r_struct
id|ahd_softc
suffix:semicolon
DECL|typedef|ahd_dev_softc_t
r_typedef
r_struct
id|pci_dev
op_star
id|ahd_dev_softc_t
suffix:semicolon
DECL|typedef|ahd_io_ctx_t
r_typedef
id|Scsi_Cmnd
op_star
id|ahd_io_ctx_t
suffix:semicolon
multiline_comment|/******************************* Byte Order ***********************************/
DECL|macro|ahd_htobe16
mdefine_line|#define ahd_htobe16(x)&t;cpu_to_be16(x)
DECL|macro|ahd_htobe32
mdefine_line|#define ahd_htobe32(x)&t;cpu_to_be32(x)
DECL|macro|ahd_htobe64
mdefine_line|#define ahd_htobe64(x)&t;cpu_to_be64(x)
DECL|macro|ahd_htole16
mdefine_line|#define ahd_htole16(x)&t;cpu_to_le16(x)
DECL|macro|ahd_htole32
mdefine_line|#define ahd_htole32(x)&t;cpu_to_le32(x)
DECL|macro|ahd_htole64
mdefine_line|#define ahd_htole64(x)&t;cpu_to_le64(x)
DECL|macro|ahd_be16toh
mdefine_line|#define ahd_be16toh(x)&t;be16_to_cpu(x)
DECL|macro|ahd_be32toh
mdefine_line|#define ahd_be32toh(x)&t;be32_to_cpu(x)
DECL|macro|ahd_be64toh
mdefine_line|#define ahd_be64toh(x)&t;be64_to_cpu(x)
DECL|macro|ahd_le16toh
mdefine_line|#define ahd_le16toh(x)&t;le16_to_cpu(x)
DECL|macro|ahd_le32toh
mdefine_line|#define ahd_le32toh(x)&t;le32_to_cpu(x)
DECL|macro|ahd_le64toh
mdefine_line|#define ahd_le64toh(x)&t;le64_to_cpu(x)
macro_line|#ifndef LITTLE_ENDIAN
DECL|macro|LITTLE_ENDIAN
mdefine_line|#define LITTLE_ENDIAN 1234
macro_line|#endif
macro_line|#ifndef BIG_ENDIAN
DECL|macro|BIG_ENDIAN
mdefine_line|#define BIG_ENDIAN 4321
macro_line|#endif
macro_line|#ifndef BYTE_ORDER
macro_line|#if defined(__BIG_ENDIAN)
DECL|macro|BYTE_ORDER
mdefine_line|#define BYTE_ORDER BIG_ENDIAN
macro_line|#endif
macro_line|#if defined(__LITTLE_ENDIAN)
DECL|macro|BYTE_ORDER
mdefine_line|#define BYTE_ORDER LITTLE_ENDIAN
macro_line|#endif
macro_line|#endif /* BYTE_ORDER */
multiline_comment|/************************* Configuration Data *********************************/
r_extern
r_uint32
id|aic79xx_allow_memio
suffix:semicolon
r_extern
r_int
id|aic79xx_detect_complete
suffix:semicolon
r_extern
id|Scsi_Host_Template
id|aic79xx_driver_template
suffix:semicolon
multiline_comment|/***************************** Bus Space/DMA **********************************/
macro_line|#if LINUX_VERSION_CODE &gt; KERNEL_VERSION(2,2,17)
DECL|typedef|bus_addr_t
r_typedef
id|dma_addr_t
id|bus_addr_t
suffix:semicolon
macro_line|#else
DECL|typedef|bus_addr_t
r_typedef
r_uint32
id|bus_addr_t
suffix:semicolon
macro_line|#endif
DECL|typedef|bus_size_t
r_typedef
r_uint32
id|bus_size_t
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|BUS_SPACE_MEMIO
id|BUS_SPACE_MEMIO
comma
DECL|enumerator|BUS_SPACE_PIO
id|BUS_SPACE_PIO
DECL|typedef|bus_space_tag_t
)brace
id|bus_space_tag_t
suffix:semicolon
r_typedef
r_union
(brace
DECL|member|ioport
id|u_long
id|ioport
suffix:semicolon
DECL|member|maddr
r_volatile
r_uint8
op_star
id|maddr
suffix:semicolon
DECL|typedef|bus_space_handle_t
)brace
id|bus_space_handle_t
suffix:semicolon
DECL|struct|bus_dma_segment
r_typedef
r_struct
id|bus_dma_segment
(brace
DECL|member|ds_addr
id|bus_addr_t
id|ds_addr
suffix:semicolon
DECL|member|ds_len
id|bus_size_t
id|ds_len
suffix:semicolon
DECL|typedef|bus_dma_segment_t
)brace
id|bus_dma_segment_t
suffix:semicolon
DECL|struct|ahd_linux_dma_tag
r_struct
id|ahd_linux_dma_tag
(brace
DECL|member|alignment
id|bus_size_t
id|alignment
suffix:semicolon
DECL|member|boundary
id|bus_size_t
id|boundary
suffix:semicolon
DECL|member|maxsize
id|bus_size_t
id|maxsize
suffix:semicolon
)brace
suffix:semicolon
DECL|typedef|bus_dma_tag_t
r_typedef
r_struct
id|ahd_linux_dma_tag
op_star
id|bus_dma_tag_t
suffix:semicolon
DECL|struct|ahd_linux_dmamap
r_struct
id|ahd_linux_dmamap
(brace
DECL|member|bus_addr
id|bus_addr_t
id|bus_addr
suffix:semicolon
)brace
suffix:semicolon
DECL|typedef|bus_dmamap_t
r_typedef
r_struct
id|ahd_linux_dmamap
op_star
id|bus_dmamap_t
suffix:semicolon
DECL|typedef|bus_dma_filter_t
r_typedef
r_int
id|bus_dma_filter_t
c_func
(paren
r_void
op_star
comma
id|bus_addr_t
)paren
suffix:semicolon
DECL|typedef|bus_dmamap_callback_t
r_typedef
r_void
id|bus_dmamap_callback_t
c_func
(paren
r_void
op_star
comma
id|bus_dma_segment_t
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
DECL|macro|BUS_DMA_WAITOK
mdefine_line|#define BUS_DMA_WAITOK&t;&t;0x0
DECL|macro|BUS_DMA_NOWAIT
mdefine_line|#define BUS_DMA_NOWAIT&t;&t;0x1
DECL|macro|BUS_DMA_ALLOCNOW
mdefine_line|#define BUS_DMA_ALLOCNOW&t;0x2
DECL|macro|BUS_DMA_LOAD_SEGS
mdefine_line|#define BUS_DMA_LOAD_SEGS&t;0x4&t;/*&n;&t;&t;&t;&t;&t; * Argument is an S/G list not&n;&t;&t;&t;&t;&t; * a single buffer.&n;&t;&t;&t;&t;&t; */
DECL|macro|BUS_SPACE_MAXADDR
mdefine_line|#define BUS_SPACE_MAXADDR&t;0xFFFFFFFF
DECL|macro|BUS_SPACE_MAXADDR_32BIT
mdefine_line|#define BUS_SPACE_MAXADDR_32BIT&t;0xFFFFFFFF
DECL|macro|BUS_SPACE_MAXSIZE_32BIT
mdefine_line|#define BUS_SPACE_MAXSIZE_32BIT&t;0xFFFFFFFF
r_int
id|ahd_dma_tag_create
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
id|bus_dma_tag_t
multiline_comment|/*parent*/
comma
id|bus_size_t
multiline_comment|/*alignment*/
comma
id|bus_size_t
multiline_comment|/*boundary*/
comma
id|bus_addr_t
multiline_comment|/*lowaddr*/
comma
id|bus_addr_t
multiline_comment|/*highaddr*/
comma
id|bus_dma_filter_t
op_star
multiline_comment|/*filter*/
comma
r_void
op_star
multiline_comment|/*filterarg*/
comma
id|bus_size_t
multiline_comment|/*maxsize*/
comma
r_int
multiline_comment|/*nsegments*/
comma
id|bus_size_t
multiline_comment|/*maxsegsz*/
comma
r_int
multiline_comment|/*flags*/
comma
id|bus_dma_tag_t
op_star
multiline_comment|/*dma_tagp*/
)paren
suffix:semicolon
r_void
id|ahd_dma_tag_destroy
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
id|bus_dma_tag_t
multiline_comment|/*tag*/
)paren
suffix:semicolon
r_int
id|ahd_dmamem_alloc
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
id|bus_dma_tag_t
multiline_comment|/*dmat*/
comma
r_void
op_star
op_star
multiline_comment|/*vaddr*/
comma
r_int
multiline_comment|/*flags*/
comma
id|bus_dmamap_t
op_star
multiline_comment|/*mapp*/
)paren
suffix:semicolon
r_void
id|ahd_dmamem_free
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
id|bus_dma_tag_t
multiline_comment|/*dmat*/
comma
r_void
op_star
multiline_comment|/*vaddr*/
comma
id|bus_dmamap_t
multiline_comment|/*map*/
)paren
suffix:semicolon
r_void
id|ahd_dmamap_destroy
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
id|bus_dma_tag_t
multiline_comment|/*tag*/
comma
id|bus_dmamap_t
multiline_comment|/*map*/
)paren
suffix:semicolon
r_int
id|ahd_dmamap_load
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|bus_dma_tag_t
multiline_comment|/*dmat*/
comma
id|bus_dmamap_t
multiline_comment|/*map*/
comma
r_void
op_star
multiline_comment|/*buf*/
comma
id|bus_size_t
multiline_comment|/*buflen*/
comma
id|bus_dmamap_callback_t
op_star
comma
r_void
op_star
multiline_comment|/*callback_arg*/
comma
r_int
multiline_comment|/*flags*/
)paren
suffix:semicolon
r_int
id|ahd_dmamap_unload
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
id|bus_dma_tag_t
comma
id|bus_dmamap_t
)paren
suffix:semicolon
multiline_comment|/*&n; * Operations performed by ahd_dmamap_sync().&n; */
DECL|macro|BUS_DMASYNC_PREREAD
mdefine_line|#define BUS_DMASYNC_PREREAD&t;0x01&t;/* pre-read synchronization */
DECL|macro|BUS_DMASYNC_POSTREAD
mdefine_line|#define BUS_DMASYNC_POSTREAD&t;0x02&t;/* post-read synchronization */
DECL|macro|BUS_DMASYNC_PREWRITE
mdefine_line|#define BUS_DMASYNC_PREWRITE&t;0x04&t;/* pre-write synchronization */
DECL|macro|BUS_DMASYNC_POSTWRITE
mdefine_line|#define BUS_DMASYNC_POSTWRITE&t;0x08&t;/* post-write synchronization */
multiline_comment|/*&n; * XXX&n; * ahd_dmamap_sync is only used on buffers allocated with&n; * the pci_alloc_consistent() API.  Although I&squot;m not sure how&n; * this works on architectures with a write buffer, Linux does&n; * not have an API to sync &quot;coherent&quot; memory.  Perhaps we need&n; * to do an mb()?&n; */
DECL|macro|ahd_dmamap_sync
mdefine_line|#define ahd_dmamap_sync(ahd, dma_tag, dmamap, offset, len, op)
multiline_comment|/************************** Timer DataStructures ******************************/
DECL|typedef|ahd_timer_t
r_typedef
r_struct
id|timer_list
id|ahd_timer_t
suffix:semicolon
multiline_comment|/********************************** Includes **********************************/
macro_line|#if CONFIG_AIC79XX_REG_PRETTY_PRINT
DECL|macro|AIC_DEBUG_REGISTERS
mdefine_line|#define AIC_DEBUG_REGISTERS 1
macro_line|#else
DECL|macro|AIC_DEBUG_REGISTERS
mdefine_line|#define AIC_DEBUG_REGISTERS 0
macro_line|#endif
macro_line|#include &quot;aic79xx.h&quot;
multiline_comment|/***************************** Timer Facilities *******************************/
DECL|macro|ahd_timer_init
mdefine_line|#define ahd_timer_init init_timer
DECL|macro|ahd_timer_stop
mdefine_line|#define ahd_timer_stop del_timer_sync
DECL|typedef|ahd_linux_callback_t
r_typedef
r_void
id|ahd_linux_callback_t
(paren
id|u_long
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_timer_reset
c_func
(paren
id|ahd_timer_t
op_star
id|timer
comma
id|u_int
id|usec
comma
id|ahd_callback_t
op_star
id|func
comma
r_void
op_star
id|arg
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_scb_timer_reset
c_func
(paren
r_struct
id|scb
op_star
id|scb
comma
id|u_int
id|usec
)paren
suffix:semicolon
r_static
id|__inline
r_void
DECL|function|ahd_timer_reset
id|ahd_timer_reset
c_func
(paren
id|ahd_timer_t
op_star
id|timer
comma
id|u_int
id|usec
comma
id|ahd_callback_t
op_star
id|func
comma
r_void
op_star
id|arg
)paren
(brace
r_struct
id|ahd_softc
op_star
id|ahd
suffix:semicolon
id|ahd
op_assign
(paren
r_struct
id|ahd_softc
op_star
)paren
id|arg
suffix:semicolon
id|del_timer
c_func
(paren
id|timer
)paren
suffix:semicolon
id|timer-&gt;data
op_assign
(paren
id|u_long
)paren
id|arg
suffix:semicolon
id|timer-&gt;expires
op_assign
id|jiffies
op_plus
(paren
id|usec
op_star
id|HZ
)paren
op_div
l_int|1000000
suffix:semicolon
id|timer-&gt;function
op_assign
(paren
id|ahd_linux_callback_t
op_star
)paren
id|func
suffix:semicolon
id|add_timer
c_func
(paren
id|timer
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_scb_timer_reset
id|ahd_scb_timer_reset
c_func
(paren
r_struct
id|scb
op_star
id|scb
comma
id|u_int
id|usec
)paren
(brace
id|mod_timer
c_func
(paren
op_amp
id|scb-&gt;io_ctx-&gt;eh_timeout
comma
id|jiffies
op_plus
(paren
id|usec
op_star
id|HZ
)paren
op_div
l_int|1000000
)paren
suffix:semicolon
)brace
multiline_comment|/***************************** SMP support ************************************/
macro_line|#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,3,17)
macro_line|#include &lt;linux/spinlock.h&gt;
macro_line|#elif LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,1,93)
macro_line|#include &lt;linux/smp.h&gt;
macro_line|#endif
macro_line|#if (LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,5,0) || defined(SCSI_HAS_HOST_LOCK))
DECL|macro|AHD_SCSI_HAS_HOST_LOCK
mdefine_line|#define AHD_SCSI_HAS_HOST_LOCK 1
macro_line|#else
DECL|macro|AHD_SCSI_HAS_HOST_LOCK
mdefine_line|#define AHD_SCSI_HAS_HOST_LOCK 0
macro_line|#endif
DECL|macro|AIC79XX_DRIVER_VERSION
mdefine_line|#define AIC79XX_DRIVER_VERSION &quot;1.3.8&quot;
multiline_comment|/**************************** Front End Queues ********************************/
multiline_comment|/*&n; * Data structure used to cast the Linux struct scsi_cmnd to something&n; * that allows us to use the queue macros.  The linux structure has&n; * plenty of space to hold the links fields as required by the queue&n; * macros, but the queue macors require them to have the correct type.&n; */
DECL|struct|ahd_cmd_internal
r_struct
id|ahd_cmd_internal
(brace
multiline_comment|/* Area owned by the Linux scsi layer. */
DECL|member|private
r_uint8
r_private
(braket
m_offsetof
(paren
r_struct
id|scsi_cmnd
comma
id|SCp.Status
)paren
)braket
suffix:semicolon
r_union
(brace
id|STAILQ_ENTRY
c_func
(paren
id|ahd_cmd
)paren
id|ste
suffix:semicolon
id|LIST_ENTRY
c_func
(paren
id|ahd_cmd
)paren
id|le
suffix:semicolon
id|TAILQ_ENTRY
c_func
(paren
id|ahd_cmd
)paren
id|tqe
suffix:semicolon
DECL|member|links
)brace
id|links
suffix:semicolon
DECL|member|end
r_uint32
id|end
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ahd_cmd
r_struct
id|ahd_cmd
(brace
r_union
(brace
DECL|member|icmd
r_struct
id|ahd_cmd_internal
id|icmd
suffix:semicolon
DECL|member|scsi_cmd
r_struct
id|scsi_cmnd
id|scsi_cmd
suffix:semicolon
DECL|member|un
)brace
id|un
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|acmd_icmd
mdefine_line|#define acmd_icmd(cmd) ((cmd)-&gt;un.icmd)
DECL|macro|acmd_scsi_cmd
mdefine_line|#define acmd_scsi_cmd(cmd) ((cmd)-&gt;un.scsi_cmd)
DECL|macro|acmd_links
mdefine_line|#define acmd_links un.icmd.links
multiline_comment|/*************************** Device Data Structures ***************************/
multiline_comment|/*&n; * A per probed device structure used to deal with some error recovery&n; * scenarios that the Linux mid-layer code just doesn&squot;t know how to&n; * handle.  The structure allocated for a device only becomes persistent&n; * after a successfully completed inquiry command to the target when&n; * that inquiry data indicates a lun is present.&n; */
id|TAILQ_HEAD
c_func
(paren
id|ahd_busyq
comma
id|ahd_cmd
)paren
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|AHD_DEV_UNCONFIGURED
id|AHD_DEV_UNCONFIGURED
op_assign
l_int|0x01
comma
DECL|enumerator|AHD_DEV_FREEZE_TIL_EMPTY
id|AHD_DEV_FREEZE_TIL_EMPTY
op_assign
l_int|0x02
comma
multiline_comment|/* Freeze queue until active == 0 */
DECL|enumerator|AHD_DEV_TIMER_ACTIVE
id|AHD_DEV_TIMER_ACTIVE
op_assign
l_int|0x04
comma
multiline_comment|/* Our timer is active */
DECL|enumerator|AHD_DEV_ON_RUN_LIST
id|AHD_DEV_ON_RUN_LIST
op_assign
l_int|0x08
comma
multiline_comment|/* Queued to be run later */
DECL|enumerator|AHD_DEV_Q_BASIC
id|AHD_DEV_Q_BASIC
op_assign
l_int|0x10
comma
multiline_comment|/* Allow basic device queuing */
DECL|enumerator|AHD_DEV_Q_TAGGED
id|AHD_DEV_Q_TAGGED
op_assign
l_int|0x20
comma
multiline_comment|/* Allow full SCSI2 command queueing */
DECL|enumerator|AHD_DEV_PERIODIC_OTAG
id|AHD_DEV_PERIODIC_OTAG
op_assign
l_int|0x40
comma
multiline_comment|/* Send OTAG to prevent starvation */
DECL|enumerator|AHD_DEV_SLAVE_CONFIGURED
id|AHD_DEV_SLAVE_CONFIGURED
op_assign
l_int|0x80
multiline_comment|/* slave_configure() has been called */
DECL|typedef|ahd_linux_dev_flags
)brace
id|ahd_linux_dev_flags
suffix:semicolon
r_struct
id|ahd_linux_target
suffix:semicolon
DECL|struct|ahd_linux_device
r_struct
id|ahd_linux_device
(brace
id|TAILQ_ENTRY
c_func
(paren
id|ahd_linux_device
)paren
id|links
suffix:semicolon
DECL|member|busyq
r_struct
id|ahd_busyq
id|busyq
suffix:semicolon
multiline_comment|/*&n;&t; * The number of transactions currently&n;&t; * queued to the device.&n;&t; */
DECL|member|active
r_int
id|active
suffix:semicolon
multiline_comment|/*&n;&t; * The currently allowed number of &n;&t; * transactions that can be queued to&n;&t; * the device.  Must be signed for&n;&t; * conversion from tagged to untagged&n;&t; * mode where the device may have more&n;&t; * than one outstanding active transaction.&n;&t; */
DECL|member|openings
r_int
id|openings
suffix:semicolon
multiline_comment|/*&n;&t; * A positive count indicates that this&n;&t; * device&squot;s queue is halted.&n;&t; */
DECL|member|qfrozen
id|u_int
id|qfrozen
suffix:semicolon
multiline_comment|/*&n;&t; * Cumulative command counter.&n;&t; */
DECL|member|commands_issued
id|u_long
id|commands_issued
suffix:semicolon
multiline_comment|/*&n;&t; * The number of tagged transactions when&n;&t; * running at our current opening level&n;&t; * that have been successfully received by&n;&t; * this device since the last QUEUE FULL.&n;&t; */
DECL|member|tag_success_count
id|u_int
id|tag_success_count
suffix:semicolon
DECL|macro|AHD_TAG_SUCCESS_INTERVAL
mdefine_line|#define AHD_TAG_SUCCESS_INTERVAL 50
DECL|member|flags
id|ahd_linux_dev_flags
id|flags
suffix:semicolon
multiline_comment|/*&n;&t; * Per device timer.&n;&t; */
DECL|member|timer
r_struct
id|timer_list
id|timer
suffix:semicolon
multiline_comment|/*&n;&t; * The high limit for the tags variable.&n;&t; */
DECL|member|maxtags
id|u_int
id|maxtags
suffix:semicolon
multiline_comment|/*&n;&t; * The computed number of tags outstanding&n;&t; * at the time of the last QUEUE FULL event.&n;&t; */
DECL|member|tags_on_last_queuefull
id|u_int
id|tags_on_last_queuefull
suffix:semicolon
multiline_comment|/*&n;&t; * How many times we have seen a queue full&n;&t; * with the same number of tags.  This is used&n;&t; * to stop our adaptive queue depth algorithm&n;&t; * on devices with a fixed number of tags.&n;&t; */
DECL|member|last_queuefull_same_count
id|u_int
id|last_queuefull_same_count
suffix:semicolon
DECL|macro|AHD_LOCK_TAGS_COUNT
mdefine_line|#define AHD_LOCK_TAGS_COUNT 50
multiline_comment|/*&n;&t; * How many transactions have been queued&n;&t; * without the device going idle.  We use&n;&t; * this statistic to determine when to issue&n;&t; * an ordered tag to prevent transaction&n;&t; * starvation.  This statistic is only updated&n;&t; * if the AHD_DEV_PERIODIC_OTAG flag is set&n;&t; * on this device.&n;&t; */
DECL|member|commands_since_idle_or_otag
id|u_int
id|commands_since_idle_or_otag
suffix:semicolon
DECL|macro|AHD_OTAG_THRESH
mdefine_line|#define AHD_OTAG_THRESH&t;500
DECL|member|lun
r_int
id|lun
suffix:semicolon
DECL|member|scsi_device
id|Scsi_Device
op_star
id|scsi_device
suffix:semicolon
DECL|member|target
r_struct
id|ahd_linux_target
op_star
id|target
suffix:semicolon
)brace
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|AHD_DV_REQUIRED
id|AHD_DV_REQUIRED
op_assign
l_int|0x01
comma
DECL|enumerator|AHD_INQ_VALID
id|AHD_INQ_VALID
op_assign
l_int|0x02
comma
DECL|enumerator|AHD_BASIC_DV
id|AHD_BASIC_DV
op_assign
l_int|0x04
comma
DECL|enumerator|AHD_ENHANCED_DV
id|AHD_ENHANCED_DV
op_assign
l_int|0x08
DECL|typedef|ahd_linux_targ_flags
)brace
id|ahd_linux_targ_flags
suffix:semicolon
multiline_comment|/* DV States */
r_typedef
r_enum
(brace
DECL|enumerator|AHD_DV_STATE_EXIT
id|AHD_DV_STATE_EXIT
op_assign
l_int|0
comma
DECL|enumerator|AHD_DV_STATE_INQ_SHORT_ASYNC
id|AHD_DV_STATE_INQ_SHORT_ASYNC
comma
DECL|enumerator|AHD_DV_STATE_INQ_ASYNC
id|AHD_DV_STATE_INQ_ASYNC
comma
DECL|enumerator|AHD_DV_STATE_INQ_ASYNC_VERIFY
id|AHD_DV_STATE_INQ_ASYNC_VERIFY
comma
DECL|enumerator|AHD_DV_STATE_TUR
id|AHD_DV_STATE_TUR
comma
DECL|enumerator|AHD_DV_STATE_REBD
id|AHD_DV_STATE_REBD
comma
DECL|enumerator|AHD_DV_STATE_INQ_VERIFY
id|AHD_DV_STATE_INQ_VERIFY
comma
DECL|enumerator|AHD_DV_STATE_WEB
id|AHD_DV_STATE_WEB
comma
DECL|enumerator|AHD_DV_STATE_REB
id|AHD_DV_STATE_REB
comma
DECL|enumerator|AHD_DV_STATE_SU
id|AHD_DV_STATE_SU
comma
DECL|enumerator|AHD_DV_STATE_BUSY
id|AHD_DV_STATE_BUSY
DECL|typedef|ahd_dv_state
)brace
id|ahd_dv_state
suffix:semicolon
DECL|struct|ahd_linux_target
r_struct
id|ahd_linux_target
(brace
DECL|member|devices
r_struct
id|ahd_linux_device
op_star
id|devices
(braket
id|AHD_NUM_LUNS
)braket
suffix:semicolon
DECL|member|channel
r_int
id|channel
suffix:semicolon
DECL|member|target
r_int
id|target
suffix:semicolon
DECL|member|refcount
r_int
id|refcount
suffix:semicolon
DECL|member|last_tinfo
r_struct
id|ahd_transinfo
id|last_tinfo
suffix:semicolon
DECL|member|ahd
r_struct
id|ahd_softc
op_star
id|ahd
suffix:semicolon
DECL|member|flags
id|ahd_linux_targ_flags
id|flags
suffix:semicolon
DECL|member|inq_data
r_struct
id|scsi_inquiry_data
op_star
id|inq_data
suffix:semicolon
multiline_comment|/*&n;&t; * The next &quot;fallback&quot; period to use for narrow/wide transfers.&n;&t; */
DECL|member|dv_next_narrow_period
r_uint8
id|dv_next_narrow_period
suffix:semicolon
DECL|member|dv_next_wide_period
r_uint8
id|dv_next_wide_period
suffix:semicolon
DECL|member|dv_max_width
r_uint8
id|dv_max_width
suffix:semicolon
DECL|member|dv_max_ppr_options
r_uint8
id|dv_max_ppr_options
suffix:semicolon
DECL|member|dv_last_ppr_options
r_uint8
id|dv_last_ppr_options
suffix:semicolon
DECL|member|dv_echo_size
id|u_int
id|dv_echo_size
suffix:semicolon
DECL|member|dv_state
id|ahd_dv_state
id|dv_state
suffix:semicolon
DECL|member|dv_state_retry
id|u_int
id|dv_state_retry
suffix:semicolon
DECL|member|dv_buffer
r_uint8
op_star
id|dv_buffer
suffix:semicolon
DECL|member|dv_buffer1
r_uint8
op_star
id|dv_buffer1
suffix:semicolon
multiline_comment|/*&n;&t; * Cumulative counter of errors.&n;&t; */
DECL|member|errors_detected
id|u_long
id|errors_detected
suffix:semicolon
DECL|member|cmds_since_error
id|u_long
id|cmds_since_error
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/********************* Definitions Required by the Core ***********************/
multiline_comment|/*&n; * Number of SG segments we require.  So long as the S/G segments for&n; * a particular transaction are allocated in a physically contiguous&n; * manner and are allocated below 4GB, the number of S/G segments is&n; * unrestricted.&n; */
macro_line|#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(2,5,0)
multiline_comment|/*&n; * We dynamically adjust the number of segments in pre-2.5 kernels to&n; * avoid fragmentation issues in the SCSI mid-layer&squot;s private memory&n; * allocator.  See aic79xx_osm.c ahd_linux_size_nseg() for details.&n; */
r_extern
id|u_int
id|ahd_linux_nseg
suffix:semicolon
DECL|macro|AHD_NSEG
mdefine_line|#define&t;AHD_NSEG ahd_linux_nseg
DECL|macro|AHD_LINUX_MIN_NSEG
mdefine_line|#define&t;AHD_LINUX_MIN_NSEG 64
macro_line|#else
DECL|macro|AHD_NSEG
mdefine_line|#define&t;AHD_NSEG 128
macro_line|#endif
multiline_comment|/*&n; * Per-SCB OSM storage.&n; */
r_typedef
r_enum
(brace
DECL|enumerator|AHD_SCB_UP_EH_SEM
id|AHD_SCB_UP_EH_SEM
op_assign
l_int|0x1
DECL|typedef|ahd_linux_scb_flags
)brace
id|ahd_linux_scb_flags
suffix:semicolon
DECL|struct|scb_platform_data
r_struct
id|scb_platform_data
(brace
DECL|member|dev
r_struct
id|ahd_linux_device
op_star
id|dev
suffix:semicolon
DECL|member|buf_busaddr
id|bus_addr_t
id|buf_busaddr
suffix:semicolon
DECL|member|xfer_len
r_uint32
id|xfer_len
suffix:semicolon
macro_line|#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(2,3,0)
DECL|member|resid
r_uint32
id|resid
suffix:semicolon
multiline_comment|/* Transfer residual */
macro_line|#endif
DECL|member|sense_resid
r_uint32
id|sense_resid
suffix:semicolon
multiline_comment|/* Auto-Sense residual */
DECL|member|flags
id|ahd_linux_scb_flags
id|flags
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * Define a structure used for each host adapter.  All members are&n; * aligned on a boundary &gt;= the size of the member to honor the&n; * alignment restrictions of the various platforms supported by&n; * this driver.&n; */
r_typedef
r_enum
(brace
DECL|enumerator|AHD_DV_WAIT_SIMQ_EMPTY
id|AHD_DV_WAIT_SIMQ_EMPTY
op_assign
l_int|0x01
comma
DECL|enumerator|AHD_DV_WAIT_SIMQ_RELEASE
id|AHD_DV_WAIT_SIMQ_RELEASE
op_assign
l_int|0x02
comma
DECL|enumerator|AHD_DV_ACTIVE
id|AHD_DV_ACTIVE
op_assign
l_int|0x04
comma
DECL|enumerator|AHD_DV_SHUTDOWN
id|AHD_DV_SHUTDOWN
op_assign
l_int|0x08
comma
DECL|enumerator|AHD_RUN_CMPLT_Q_TIMER
id|AHD_RUN_CMPLT_Q_TIMER
op_assign
l_int|0x10
DECL|typedef|ahd_linux_softc_flags
)brace
id|ahd_linux_softc_flags
suffix:semicolon
id|TAILQ_HEAD
c_func
(paren
id|ahd_completeq
comma
id|ahd_cmd
)paren
suffix:semicolon
DECL|struct|ahd_platform_data
r_struct
id|ahd_platform_data
(brace
multiline_comment|/*&n;&t; * Fields accessed from interrupt context.&n;&t; */
DECL|member|targets
r_struct
id|ahd_linux_target
op_star
id|targets
(braket
id|AHD_NUM_TARGETS
)braket
suffix:semicolon
id|TAILQ_HEAD
c_func
(paren
comma
id|ahd_linux_device
)paren
id|device_runq
suffix:semicolon
DECL|member|completeq
r_struct
id|ahd_completeq
id|completeq
suffix:semicolon
DECL|member|spin_lock
id|spinlock_t
id|spin_lock
suffix:semicolon
macro_line|#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,4,0)
DECL|member|runq_tasklet
r_struct
id|tasklet_struct
id|runq_tasklet
suffix:semicolon
macro_line|#endif
DECL|member|qfrozen
id|u_int
id|qfrozen
suffix:semicolon
DECL|member|dv_pid
id|pid_t
id|dv_pid
suffix:semicolon
DECL|member|completeq_timer
r_struct
id|timer_list
id|completeq_timer
suffix:semicolon
DECL|member|reset_timer
r_struct
id|timer_list
id|reset_timer
suffix:semicolon
DECL|member|stats_timer
r_struct
id|timer_list
id|stats_timer
suffix:semicolon
DECL|member|eh_sem
r_struct
id|semaphore
id|eh_sem
suffix:semicolon
DECL|member|dv_sem
r_struct
id|semaphore
id|dv_sem
suffix:semicolon
DECL|member|dv_cmd_sem
r_struct
id|semaphore
id|dv_cmd_sem
suffix:semicolon
multiline_comment|/* XXX This needs to be in&n;&t;&t;&t;&t;&t;&t; * the target struct&n;&t;&t;&t;&t;&t;&t; */
DECL|member|dv_scsi_dev
r_struct
id|scsi_device
op_star
id|dv_scsi_dev
suffix:semicolon
DECL|member|host
r_struct
id|Scsi_Host
op_star
id|host
suffix:semicolon
multiline_comment|/* pointer to scsi host */
DECL|macro|AHD_LINUX_NOIRQ
mdefine_line|#define AHD_LINUX_NOIRQ&t;((uint32_t)~0)
DECL|member|irq
r_uint32
id|irq
suffix:semicolon
multiline_comment|/* IRQ for this adapter */
DECL|member|bios_address
r_uint32
id|bios_address
suffix:semicolon
DECL|member|mem_busaddr
r_uint32
id|mem_busaddr
suffix:semicolon
multiline_comment|/* Mem Base Addr */
DECL|member|hw_dma_mask
id|bus_addr_t
id|hw_dma_mask
suffix:semicolon
DECL|member|flags
id|ahd_linux_softc_flags
id|flags
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/************************** OS Utility Wrappers *******************************/
DECL|macro|printf
mdefine_line|#define printf printk
DECL|macro|M_NOWAIT
mdefine_line|#define M_NOWAIT GFP_ATOMIC
DECL|macro|M_WAITOK
mdefine_line|#define M_WAITOK 0
DECL|macro|malloc
mdefine_line|#define malloc(size, type, flags) kmalloc(size, flags)
DECL|macro|free
mdefine_line|#define free(ptr, type) kfree(ptr)
r_static
id|__inline
r_void
id|ahd_delay
c_func
(paren
r_int
)paren
suffix:semicolon
r_static
id|__inline
r_void
DECL|function|ahd_delay
id|ahd_delay
c_func
(paren
r_int
id|usec
)paren
(brace
multiline_comment|/*&n;&t; * udelay on Linux can have problems for&n;&t; * multi-millisecond waits.  Wait at most&n;&t; * 1024us per call.&n;&t; */
r_while
c_loop
(paren
id|usec
OG
l_int|0
)paren
(brace
id|udelay
c_func
(paren
id|usec
op_mod
l_int|1024
)paren
suffix:semicolon
id|usec
op_sub_assign
l_int|1024
suffix:semicolon
)brace
)brace
multiline_comment|/***************************** Low Level I/O **********************************/
macro_line|#if defined(__powerpc__) || defined(__i386__) || defined(__ia64__)
DECL|macro|MMAPIO
mdefine_line|#define MMAPIO
macro_line|#endif
r_static
id|__inline
r_uint8
id|ahd_inb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|port
)paren
suffix:semicolon
r_static
id|__inline
r_uint16
id|ahd_inw_atomic
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|port
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_outb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|port
comma
r_uint8
id|val
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_outw_atomic
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|port
comma
r_uint16
id|val
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_outsb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|port
comma
r_uint8
op_star
comma
r_int
id|count
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_insb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|port
comma
r_uint8
op_star
comma
r_int
id|count
)paren
suffix:semicolon
r_static
id|__inline
r_uint8
DECL|function|ahd_inb
id|ahd_inb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|port
)paren
(brace
r_uint8
id|x
suffix:semicolon
macro_line|#ifdef MMAPIO
r_if
c_cond
(paren
id|ahd-&gt;tags
(braket
l_int|0
)braket
op_eq
id|BUS_SPACE_MEMIO
)paren
(brace
id|x
op_assign
id|readb
c_func
(paren
id|ahd-&gt;bshs
(braket
l_int|0
)braket
dot
id|maddr
op_plus
id|port
)paren
suffix:semicolon
)brace
r_else
(brace
id|x
op_assign
id|inb
c_func
(paren
id|ahd-&gt;bshs
(braket
(paren
id|port
)paren
op_rshift
l_int|8
)braket
dot
id|ioport
op_plus
(paren
(paren
id|port
)paren
op_amp
l_int|0xFF
)paren
)paren
suffix:semicolon
)brace
macro_line|#else
id|x
op_assign
id|inb
c_func
(paren
id|ahd-&gt;bshs
(braket
(paren
id|port
)paren
op_rshift
l_int|8
)braket
dot
id|ioport
op_plus
(paren
(paren
id|port
)paren
op_amp
l_int|0xFF
)paren
)paren
suffix:semicolon
macro_line|#endif
id|mb
c_func
(paren
)paren
suffix:semicolon
r_return
(paren
id|x
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_uint16
DECL|function|ahd_inw_atomic
id|ahd_inw_atomic
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|port
)paren
(brace
r_uint8
id|x
suffix:semicolon
macro_line|#ifdef MMAPIO
r_if
c_cond
(paren
id|ahd-&gt;tags
(braket
l_int|0
)braket
op_eq
id|BUS_SPACE_MEMIO
)paren
(brace
id|x
op_assign
id|readw
c_func
(paren
id|ahd-&gt;bshs
(braket
l_int|0
)braket
dot
id|maddr
op_plus
id|port
)paren
suffix:semicolon
)brace
r_else
(brace
id|x
op_assign
id|inw
c_func
(paren
id|ahd-&gt;bshs
(braket
(paren
id|port
)paren
op_rshift
l_int|8
)braket
dot
id|ioport
op_plus
(paren
(paren
id|port
)paren
op_amp
l_int|0xFF
)paren
)paren
suffix:semicolon
)brace
macro_line|#else
id|x
op_assign
id|inw
c_func
(paren
id|ahd-&gt;bshs
(braket
(paren
id|port
)paren
op_rshift
l_int|8
)braket
dot
id|ioport
op_plus
(paren
(paren
id|port
)paren
op_amp
l_int|0xFF
)paren
)paren
suffix:semicolon
macro_line|#endif
id|mb
c_func
(paren
)paren
suffix:semicolon
r_return
(paren
id|x
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_outb
id|ahd_outb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|port
comma
r_uint8
id|val
)paren
(brace
macro_line|#ifdef MMAPIO
r_if
c_cond
(paren
id|ahd-&gt;tags
(braket
l_int|0
)braket
op_eq
id|BUS_SPACE_MEMIO
)paren
(brace
id|writeb
c_func
(paren
id|val
comma
id|ahd-&gt;bshs
(braket
l_int|0
)braket
dot
id|maddr
op_plus
id|port
)paren
suffix:semicolon
)brace
r_else
(brace
id|outb
c_func
(paren
id|val
comma
id|ahd-&gt;bshs
(braket
(paren
id|port
)paren
op_rshift
l_int|8
)braket
dot
id|ioport
op_plus
(paren
id|port
op_amp
l_int|0xFF
)paren
)paren
suffix:semicolon
)brace
macro_line|#else
id|outb
c_func
(paren
id|val
comma
id|ahd-&gt;bshs
(braket
(paren
id|port
)paren
op_rshift
l_int|8
)braket
dot
id|ioport
op_plus
(paren
id|port
op_amp
l_int|0xFF
)paren
)paren
suffix:semicolon
macro_line|#endif
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_outw_atomic
id|ahd_outw_atomic
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|port
comma
r_uint16
id|val
)paren
(brace
macro_line|#ifdef MMAPIO
r_if
c_cond
(paren
id|ahd-&gt;tags
(braket
l_int|0
)braket
op_eq
id|BUS_SPACE_MEMIO
)paren
(brace
id|writew
c_func
(paren
id|val
comma
id|ahd-&gt;bshs
(braket
l_int|0
)braket
dot
id|maddr
op_plus
id|port
)paren
suffix:semicolon
)brace
r_else
(brace
id|outw
c_func
(paren
id|val
comma
id|ahd-&gt;bshs
(braket
(paren
id|port
)paren
op_rshift
l_int|8
)braket
dot
id|ioport
op_plus
(paren
id|port
op_amp
l_int|0xFF
)paren
)paren
suffix:semicolon
)brace
macro_line|#else
id|outw
c_func
(paren
id|val
comma
id|ahd-&gt;bshs
(braket
(paren
id|port
)paren
op_rshift
l_int|8
)braket
dot
id|ioport
op_plus
(paren
id|port
op_amp
l_int|0xFF
)paren
)paren
suffix:semicolon
macro_line|#endif
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_outsb
id|ahd_outsb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|port
comma
r_uint8
op_star
id|array
comma
r_int
id|count
)paren
(brace
r_int
id|i
suffix:semicolon
multiline_comment|/*&n;&t; * There is probably a more efficient way to do this on Linux&n;&t; * but we don&squot;t use this for anything speed critical and this&n;&t; * should work.&n;&t; */
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|count
suffix:semicolon
id|i
op_increment
)paren
id|ahd_outb
c_func
(paren
id|ahd
comma
id|port
comma
op_star
id|array
op_increment
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_insb
id|ahd_insb
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|port
comma
r_uint8
op_star
id|array
comma
r_int
id|count
)paren
(brace
r_int
id|i
suffix:semicolon
multiline_comment|/*&n;&t; * There is probably a more efficient way to do this on Linux&n;&t; * but we don&squot;t use this for anything speed critical and this&n;&t; * should work.&n;&t; */
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|count
suffix:semicolon
id|i
op_increment
)paren
op_star
id|array
op_increment
op_assign
id|ahd_inb
c_func
(paren
id|ahd
comma
id|port
)paren
suffix:semicolon
)brace
multiline_comment|/**************************** Initialization **********************************/
r_int
id|ahd_linux_register_host
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
id|Scsi_Host_Template
op_star
)paren
suffix:semicolon
r_uint64
id|ahd_linux_get_memsize
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*************************** Pretty Printing **********************************/
DECL|struct|info_str
r_struct
id|info_str
(brace
DECL|member|buffer
r_char
op_star
id|buffer
suffix:semicolon
DECL|member|length
r_int
id|length
suffix:semicolon
DECL|member|offset
id|off_t
id|offset
suffix:semicolon
DECL|member|pos
r_int
id|pos
suffix:semicolon
)brace
suffix:semicolon
r_void
id|ahd_format_transinfo
c_func
(paren
r_struct
id|info_str
op_star
id|info
comma
r_struct
id|ahd_transinfo
op_star
id|tinfo
)paren
suffix:semicolon
multiline_comment|/******************************** Locking *************************************/
multiline_comment|/* Lock protecting internal data structures */
r_static
id|__inline
r_void
id|ahd_lockinit
c_func
(paren
r_struct
id|ahd_softc
op_star
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_lock
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
r_int
r_int
op_star
id|flags
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_unlock
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
r_int
r_int
op_star
id|flags
)paren
suffix:semicolon
multiline_comment|/* Lock acquisition and release of the above lock in midlayer entry points. */
r_static
id|__inline
r_void
id|ahd_midlayer_entrypoint_lock
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
r_int
r_int
op_star
id|flags
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_midlayer_entrypoint_unlock
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
r_int
r_int
op_star
id|flags
)paren
suffix:semicolon
multiline_comment|/* Lock held during command compeletion to the upper layer */
r_static
id|__inline
r_void
id|ahd_done_lockinit
c_func
(paren
r_struct
id|ahd_softc
op_star
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_done_lock
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
r_int
r_int
op_star
id|flags
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_done_unlock
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
r_int
r_int
op_star
id|flags
)paren
suffix:semicolon
multiline_comment|/* Lock held during ahd_list manipulation and ahd softc frees */
r_extern
id|spinlock_t
id|ahd_list_spinlock
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_list_lockinit
c_func
(paren
r_void
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_list_lock
c_func
(paren
r_int
r_int
op_star
id|flags
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_list_unlock
c_func
(paren
r_int
r_int
op_star
id|flags
)paren
suffix:semicolon
r_static
id|__inline
r_void
DECL|function|ahd_lockinit
id|ahd_lockinit
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
id|spin_lock_init
c_func
(paren
op_amp
id|ahd-&gt;platform_data-&gt;spin_lock
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_lock
id|ahd_lock
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
r_int
op_star
id|flags
)paren
(brace
id|spin_lock_irqsave
c_func
(paren
op_amp
id|ahd-&gt;platform_data-&gt;spin_lock
comma
op_star
id|flags
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_unlock
id|ahd_unlock
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
r_int
op_star
id|flags
)paren
(brace
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|ahd-&gt;platform_data-&gt;spin_lock
comma
op_star
id|flags
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_midlayer_entrypoint_lock
id|ahd_midlayer_entrypoint_lock
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
r_int
op_star
id|flags
)paren
(brace
multiline_comment|/*&n;&t; * In 2.5.X and some 2.4.X versions, the midlayer takes our&n;&t; * lock just before calling us, so we avoid locking again.&n;&t; * For other kernel versions, the io_request_lock is taken&n;&t; * just before our entry point is called.  In this case, we&n;&t; * trade the io_request_lock for our per-softc lock.&n;&t; */
macro_line|#if AHD_SCSI_HAS_HOST_LOCK == 0
id|spin_unlock
c_func
(paren
op_amp
id|io_request_lock
)paren
suffix:semicolon
id|spin_lock
c_func
(paren
op_amp
id|ahd-&gt;platform_data-&gt;spin_lock
)paren
suffix:semicolon
macro_line|#endif
)brace
r_static
id|__inline
r_void
DECL|function|ahd_midlayer_entrypoint_unlock
id|ahd_midlayer_entrypoint_unlock
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
r_int
op_star
id|flags
)paren
(brace
macro_line|#if AHD_SCSI_HAS_HOST_LOCK == 0
id|spin_unlock
c_func
(paren
op_amp
id|ahd-&gt;platform_data-&gt;spin_lock
)paren
suffix:semicolon
id|spin_lock
c_func
(paren
op_amp
id|io_request_lock
)paren
suffix:semicolon
macro_line|#endif
)brace
r_static
id|__inline
r_void
DECL|function|ahd_done_lockinit
id|ahd_done_lockinit
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
multiline_comment|/*&n;&t; * In 2.5.X, our own lock is held during completions.&n;&t; * In previous versions, the io_request_lock is used.&n;&t; * In either case, we can&squot;t initialize this lock again.&n;&t; */
)brace
r_static
id|__inline
r_void
DECL|function|ahd_done_lock
id|ahd_done_lock
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
r_int
op_star
id|flags
)paren
(brace
macro_line|#if AHD_SCSI_HAS_HOST_LOCK == 0
id|spin_lock
c_func
(paren
op_amp
id|io_request_lock
)paren
suffix:semicolon
macro_line|#endif
)brace
r_static
id|__inline
r_void
DECL|function|ahd_done_unlock
id|ahd_done_unlock
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
r_int
op_star
id|flags
)paren
(brace
macro_line|#if AHD_SCSI_HAS_HOST_LOCK == 0
id|spin_unlock
c_func
(paren
op_amp
id|io_request_lock
)paren
suffix:semicolon
macro_line|#endif
)brace
r_static
id|__inline
r_void
DECL|function|ahd_list_lockinit
id|ahd_list_lockinit
c_func
(paren
)paren
(brace
id|spin_lock_init
c_func
(paren
op_amp
id|ahd_list_spinlock
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_list_lock
id|ahd_list_lock
c_func
(paren
r_int
r_int
op_star
id|flags
)paren
(brace
id|spin_lock_irqsave
c_func
(paren
op_amp
id|ahd_list_spinlock
comma
op_star
id|flags
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_list_unlock
id|ahd_list_unlock
c_func
(paren
r_int
r_int
op_star
id|flags
)paren
(brace
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|ahd_list_spinlock
comma
op_star
id|flags
)paren
suffix:semicolon
)brace
multiline_comment|/******************************* PCI Definitions ******************************/
multiline_comment|/*&n; * PCIM_xxx: mask to locate subfield in register&n; * PCIR_xxx: config register offset&n; * PCIC_xxx: device class&n; * PCIS_xxx: device subclass&n; * PCIP_xxx: device programming interface&n; * PCIV_xxx: PCI vendor ID (only required to fixup ancient devices)&n; * PCID_xxx: device ID&n; */
DECL|macro|PCIR_DEVVENDOR
mdefine_line|#define PCIR_DEVVENDOR&t;&t;0x00
DECL|macro|PCIR_VENDOR
mdefine_line|#define PCIR_VENDOR&t;&t;0x00
DECL|macro|PCIR_DEVICE
mdefine_line|#define PCIR_DEVICE&t;&t;0x02
DECL|macro|PCIR_COMMAND
mdefine_line|#define PCIR_COMMAND&t;&t;0x04
DECL|macro|PCIM_CMD_PORTEN
mdefine_line|#define PCIM_CMD_PORTEN&t;&t;0x0001
DECL|macro|PCIM_CMD_MEMEN
mdefine_line|#define PCIM_CMD_MEMEN&t;&t;0x0002
DECL|macro|PCIM_CMD_BUSMASTEREN
mdefine_line|#define PCIM_CMD_BUSMASTEREN&t;0x0004
DECL|macro|PCIM_CMD_MWRICEN
mdefine_line|#define PCIM_CMD_MWRICEN&t;0x0010
DECL|macro|PCIM_CMD_PERRESPEN
mdefine_line|#define PCIM_CMD_PERRESPEN&t;0x0040
DECL|macro|PCIM_CMD_SERRESPEN
mdefine_line|#define&t;PCIM_CMD_SERRESPEN&t;0x0100
DECL|macro|PCIR_STATUS
mdefine_line|#define PCIR_STATUS&t;&t;0x06
DECL|macro|PCIR_REVID
mdefine_line|#define PCIR_REVID&t;&t;0x08
DECL|macro|PCIR_PROGIF
mdefine_line|#define PCIR_PROGIF&t;&t;0x09
DECL|macro|PCIR_SUBCLASS
mdefine_line|#define PCIR_SUBCLASS&t;&t;0x0a
DECL|macro|PCIR_CLASS
mdefine_line|#define PCIR_CLASS&t;&t;0x0b
DECL|macro|PCIR_CACHELNSZ
mdefine_line|#define PCIR_CACHELNSZ&t;&t;0x0c
DECL|macro|PCIR_LATTIMER
mdefine_line|#define PCIR_LATTIMER&t;&t;0x0d
DECL|macro|PCIR_HEADERTYPE
mdefine_line|#define PCIR_HEADERTYPE&t;&t;0x0e
DECL|macro|PCIM_MFDEV
mdefine_line|#define PCIM_MFDEV&t;&t;0x80
DECL|macro|PCIR_BIST
mdefine_line|#define PCIR_BIST&t;&t;0x0f
DECL|macro|PCIR_CAP_PTR
mdefine_line|#define PCIR_CAP_PTR&t;&t;0x34
multiline_comment|/* config registers for header type 0 devices */
DECL|macro|PCIR_MAPS
mdefine_line|#define PCIR_MAPS&t;0x10
DECL|macro|PCIR_SUBVEND_0
mdefine_line|#define PCIR_SUBVEND_0&t;0x2c
DECL|macro|PCIR_SUBDEV_0
mdefine_line|#define PCIR_SUBDEV_0&t;0x2e
multiline_comment|/****************************** PCI-X definitions *****************************/
DECL|macro|PCIXR_COMMAND
mdefine_line|#define PCIXR_COMMAND&t;0x96
DECL|macro|PCIXR_DEVADDR
mdefine_line|#define PCIXR_DEVADDR&t;0x98
DECL|macro|PCIXM_DEVADDR_FNUM
mdefine_line|#define PCIXM_DEVADDR_FNUM&t;0x0003&t;/* Function Number */
DECL|macro|PCIXM_DEVADDR_DNUM
mdefine_line|#define PCIXM_DEVADDR_DNUM&t;0x00F8&t;/* Device Number */
DECL|macro|PCIXM_DEVADDR_BNUM
mdefine_line|#define PCIXM_DEVADDR_BNUM&t;0xFF00&t;/* Bus Number */
DECL|macro|PCIXR_STATUS
mdefine_line|#define PCIXR_STATUS&t;0x9A
DECL|macro|PCIXM_STATUS_64BIT
mdefine_line|#define PCIXM_STATUS_64BIT&t;0x0001&t;/* Active 64bit connection to device. */
DECL|macro|PCIXM_STATUS_133CAP
mdefine_line|#define PCIXM_STATUS_133CAP&t;0x0002&t;/* Device is 133MHz capable */
DECL|macro|PCIXM_STATUS_SCDISC
mdefine_line|#define PCIXM_STATUS_SCDISC&t;0x0004&t;/* Split Completion Discarded */
DECL|macro|PCIXM_STATUS_UNEXPSC
mdefine_line|#define PCIXM_STATUS_UNEXPSC&t;0x0008&t;/* Unexpected Split Completion */
DECL|macro|PCIXM_STATUS_CMPLEXDEV
mdefine_line|#define PCIXM_STATUS_CMPLEXDEV&t;0x0010&t;/* Device Complexity (set == bridge) */
DECL|macro|PCIXM_STATUS_MAXMRDBC
mdefine_line|#define PCIXM_STATUS_MAXMRDBC&t;0x0060&t;/* Maximum Burst Read Count */
DECL|macro|PCIXM_STATUS_MAXSPLITS
mdefine_line|#define PCIXM_STATUS_MAXSPLITS&t;0x0380&t;/* Maximum Split Transactions */
DECL|macro|PCIXM_STATUS_MAXCRDS
mdefine_line|#define PCIXM_STATUS_MAXCRDS&t;0x1C00&t;/* Maximum Cumulative Read Size */
DECL|macro|PCIXM_STATUS_RCVDSCEM
mdefine_line|#define PCIXM_STATUS_RCVDSCEM&t;0x2000&t;/* Received a Split Comp w/Error msg */
macro_line|#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,4,0)
r_extern
r_struct
id|pci_driver
id|aic79xx_pci_driver
suffix:semicolon
macro_line|#endif
r_typedef
r_enum
(brace
DECL|enumerator|AHD_POWER_STATE_D0
id|AHD_POWER_STATE_D0
comma
DECL|enumerator|AHD_POWER_STATE_D1
id|AHD_POWER_STATE_D1
comma
DECL|enumerator|AHD_POWER_STATE_D2
id|AHD_POWER_STATE_D2
comma
DECL|enumerator|AHD_POWER_STATE_D3
id|AHD_POWER_STATE_D3
DECL|typedef|ahd_power_state
)brace
id|ahd_power_state
suffix:semicolon
r_void
id|ahd_power_state_change
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
id|ahd_power_state
id|new_state
)paren
suffix:semicolon
multiline_comment|/******************************* PCI Routines *********************************/
r_int
id|ahd_linux_pci_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_void
id|ahd_linux_pci_exit
c_func
(paren
r_void
)paren
suffix:semicolon
r_int
id|ahd_pci_map_registers
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_int
id|ahd_pci_map_int
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_uint32
id|ahd_pci_read_config
c_func
(paren
id|ahd_dev_softc_t
id|pci
comma
r_int
id|reg
comma
r_int
id|width
)paren
suffix:semicolon
r_static
id|__inline
r_uint32
DECL|function|ahd_pci_read_config
id|ahd_pci_read_config
c_func
(paren
id|ahd_dev_softc_t
id|pci
comma
r_int
id|reg
comma
r_int
id|width
)paren
(brace
r_switch
c_cond
(paren
id|width
)paren
(brace
r_case
l_int|1
suffix:colon
(brace
r_uint8
id|retval
suffix:semicolon
id|pci_read_config_byte
c_func
(paren
id|pci
comma
id|reg
comma
op_amp
id|retval
)paren
suffix:semicolon
r_return
(paren
id|retval
)paren
suffix:semicolon
)brace
r_case
l_int|2
suffix:colon
(brace
r_uint16
id|retval
suffix:semicolon
id|pci_read_config_word
c_func
(paren
id|pci
comma
id|reg
comma
op_amp
id|retval
)paren
suffix:semicolon
r_return
(paren
id|retval
)paren
suffix:semicolon
)brace
r_case
l_int|4
suffix:colon
(brace
r_uint32
id|retval
suffix:semicolon
id|pci_read_config_dword
c_func
(paren
id|pci
comma
id|reg
comma
op_amp
id|retval
)paren
suffix:semicolon
r_return
(paren
id|retval
)paren
suffix:semicolon
)brace
r_default
suffix:colon
id|panic
c_func
(paren
l_string|&quot;ahd_pci_read_config: Read size too big&quot;
)paren
suffix:semicolon
multiline_comment|/* NOTREACHED */
r_return
(paren
l_int|0
)paren
suffix:semicolon
)brace
)brace
r_static
id|__inline
r_void
id|ahd_pci_write_config
c_func
(paren
id|ahd_dev_softc_t
id|pci
comma
r_int
id|reg
comma
r_uint32
id|value
comma
r_int
id|width
)paren
suffix:semicolon
r_static
id|__inline
r_void
DECL|function|ahd_pci_write_config
id|ahd_pci_write_config
c_func
(paren
id|ahd_dev_softc_t
id|pci
comma
r_int
id|reg
comma
r_uint32
id|value
comma
r_int
id|width
)paren
(brace
r_switch
c_cond
(paren
id|width
)paren
(brace
r_case
l_int|1
suffix:colon
id|pci_write_config_byte
c_func
(paren
id|pci
comma
id|reg
comma
id|value
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|pci_write_config_word
c_func
(paren
id|pci
comma
id|reg
comma
id|value
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|4
suffix:colon
id|pci_write_config_dword
c_func
(paren
id|pci
comma
id|reg
comma
id|value
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|panic
c_func
(paren
l_string|&quot;ahd_pci_write_config: Write size too big&quot;
)paren
suffix:semicolon
multiline_comment|/* NOTREACHED */
)brace
)brace
r_static
id|__inline
r_int
id|ahd_get_pci_function
c_func
(paren
id|ahd_dev_softc_t
)paren
suffix:semicolon
r_static
id|__inline
r_int
DECL|function|ahd_get_pci_function
id|ahd_get_pci_function
c_func
(paren
id|ahd_dev_softc_t
id|pci
)paren
(brace
r_return
(paren
id|PCI_FUNC
c_func
(paren
id|pci-&gt;devfn
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_int
id|ahd_get_pci_slot
c_func
(paren
id|ahd_dev_softc_t
)paren
suffix:semicolon
r_static
id|__inline
r_int
DECL|function|ahd_get_pci_slot
id|ahd_get_pci_slot
c_func
(paren
id|ahd_dev_softc_t
id|pci
)paren
(brace
r_return
(paren
id|PCI_SLOT
c_func
(paren
id|pci-&gt;devfn
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_int
id|ahd_get_pci_bus
c_func
(paren
id|ahd_dev_softc_t
)paren
suffix:semicolon
r_static
id|__inline
r_int
DECL|function|ahd_get_pci_bus
id|ahd_get_pci_bus
c_func
(paren
id|ahd_dev_softc_t
id|pci
)paren
(brace
r_return
(paren
id|pci-&gt;bus-&gt;number
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
id|ahd_flush_device_writes
c_func
(paren
r_struct
id|ahd_softc
op_star
)paren
suffix:semicolon
r_static
id|__inline
r_void
DECL|function|ahd_flush_device_writes
id|ahd_flush_device_writes
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
(brace
multiline_comment|/* XXX Is this sufficient for all architectures??? */
id|ahd_inb
c_func
(paren
id|ahd
comma
id|INTSTAT
)paren
suffix:semicolon
)brace
macro_line|#if LINUX_VERSION_CODE &lt;= KERNEL_VERSION(2,3,0)
DECL|macro|pci_map_sg
mdefine_line|#define pci_map_sg(pdev, sg_list, nseg, direction) (nseg)
DECL|macro|pci_unmap_sg
mdefine_line|#define pci_unmap_sg(pdev, sg_list, nseg, direction)
DECL|macro|sg_dma_address
mdefine_line|#define sg_dma_address(sg) (VIRT_TO_BUS((sg)-&gt;address))
DECL|macro|sg_dma_len
mdefine_line|#define sg_dma_len(sg) ((sg)-&gt;length)
DECL|macro|pci_map_single
mdefine_line|#define pci_map_single(pdev, buffer, bufflen, direction) &bslash;&n;&t;(VIRT_TO_BUS(buffer))
DECL|macro|pci_unmap_single
mdefine_line|#define pci_unmap_single(pdev, buffer, buflen, direction)
macro_line|#endif
macro_line|#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,4,3)
DECL|macro|ahd_pci_set_dma_mask
mdefine_line|#define ahd_pci_set_dma_mask pci_set_dma_mask
macro_line|#else
multiline_comment|/*&n; * Always &quot;return&quot; 0 for success.&n; */
DECL|macro|ahd_pci_set_dma_mask
mdefine_line|#define ahd_pci_set_dma_mask(dev_softc, mask)&t;&bslash;&n;&t;(((dev_softc)-&gt;dma_mask = mask) &amp;&amp; 0)
macro_line|#endif
multiline_comment|/**************************** Proc FS Support *********************************/
r_int
id|ahd_linux_proc_info
c_func
(paren
r_char
op_star
comma
r_char
op_star
op_star
comma
id|off_t
comma
r_int
comma
r_int
comma
r_int
)paren
suffix:semicolon
multiline_comment|/*************************** Domain Validation ********************************/
DECL|macro|AHD_DV_CMD
mdefine_line|#define AHD_DV_CMD(cmd) ((cmd)-&gt;scsi_done == ahd_linux_dv_complete)
DECL|macro|AHD_DV_SIMQ_FROZEN
mdefine_line|#define AHD_DV_SIMQ_FROZEN(ahd)&t;&t;&t;&t;&t;&bslash;&n;&t;((((ahd)-&gt;platform_data-&gt;flags &amp; AHD_DV_ACTIVE) != 0)&t;&bslash;&n;&t; &amp;&amp; (ahd)-&gt;platform_data-&gt;qfrozen == 1)
multiline_comment|/*********************** Transaction Access Wrappers **************************/
r_static
id|__inline
r_void
id|ahd_cmd_set_transaction_status
c_func
(paren
id|Scsi_Cmnd
op_star
comma
r_uint32
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_set_transaction_status
c_func
(paren
r_struct
id|scb
op_star
comma
r_uint32
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_cmd_set_scsi_status
c_func
(paren
id|Scsi_Cmnd
op_star
comma
r_uint32
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_set_scsi_status
c_func
(paren
r_struct
id|scb
op_star
comma
r_uint32
)paren
suffix:semicolon
r_static
id|__inline
r_uint32
id|ahd_cmd_get_transaction_status
c_func
(paren
id|Scsi_Cmnd
op_star
id|cmd
)paren
suffix:semicolon
r_static
id|__inline
r_uint32
id|ahd_get_transaction_status
c_func
(paren
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_static
id|__inline
r_uint32
id|ahd_cmd_get_scsi_status
c_func
(paren
id|Scsi_Cmnd
op_star
id|cmd
)paren
suffix:semicolon
r_static
id|__inline
r_uint32
id|ahd_get_scsi_status
c_func
(paren
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_set_transaction_tag
c_func
(paren
r_struct
id|scb
op_star
comma
r_int
comma
id|u_int
)paren
suffix:semicolon
r_static
id|__inline
id|u_long
id|ahd_get_transfer_length
c_func
(paren
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_static
id|__inline
r_int
id|ahd_get_transfer_dir
c_func
(paren
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_set_residual
c_func
(paren
r_struct
id|scb
op_star
comma
id|u_long
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_set_sense_residual
c_func
(paren
r_struct
id|scb
op_star
id|scb
comma
id|u_long
id|resid
)paren
suffix:semicolon
r_static
id|__inline
id|u_long
id|ahd_get_residual
c_func
(paren
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_static
id|__inline
id|u_long
id|ahd_get_sense_residual
c_func
(paren
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_static
id|__inline
r_int
id|ahd_perform_autosense
c_func
(paren
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_static
id|__inline
r_uint32
id|ahd_get_sense_bufsize
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_notify_xfer_settings_change
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
r_struct
id|ahd_devinfo
op_star
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_platform_scb_free
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahd_freeze_scb
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
suffix:semicolon
r_static
id|__inline
DECL|function|ahd_cmd_set_transaction_status
r_void
id|ahd_cmd_set_transaction_status
c_func
(paren
id|Scsi_Cmnd
op_star
id|cmd
comma
r_uint32
id|status
)paren
(brace
id|cmd-&gt;result
op_and_assign
op_complement
(paren
id|CAM_STATUS_MASK
op_lshift
l_int|16
)paren
suffix:semicolon
id|cmd-&gt;result
op_or_assign
id|status
op_lshift
l_int|16
suffix:semicolon
)brace
r_static
id|__inline
DECL|function|ahd_set_transaction_status
r_void
id|ahd_set_transaction_status
c_func
(paren
r_struct
id|scb
op_star
id|scb
comma
r_uint32
id|status
)paren
(brace
id|ahd_cmd_set_transaction_status
c_func
(paren
id|scb-&gt;io_ctx
comma
id|status
)paren
suffix:semicolon
)brace
r_static
id|__inline
DECL|function|ahd_cmd_set_scsi_status
r_void
id|ahd_cmd_set_scsi_status
c_func
(paren
id|Scsi_Cmnd
op_star
id|cmd
comma
r_uint32
id|status
)paren
(brace
id|cmd-&gt;result
op_and_assign
op_complement
l_int|0xFFFF
suffix:semicolon
id|cmd-&gt;result
op_or_assign
id|status
suffix:semicolon
)brace
r_static
id|__inline
DECL|function|ahd_set_scsi_status
r_void
id|ahd_set_scsi_status
c_func
(paren
r_struct
id|scb
op_star
id|scb
comma
r_uint32
id|status
)paren
(brace
id|ahd_cmd_set_scsi_status
c_func
(paren
id|scb-&gt;io_ctx
comma
id|status
)paren
suffix:semicolon
)brace
r_static
id|__inline
DECL|function|ahd_cmd_get_transaction_status
r_uint32
id|ahd_cmd_get_transaction_status
c_func
(paren
id|Scsi_Cmnd
op_star
id|cmd
)paren
(brace
r_return
(paren
(paren
id|cmd-&gt;result
op_rshift
l_int|16
)paren
op_amp
id|CAM_STATUS_MASK
)paren
suffix:semicolon
)brace
r_static
id|__inline
DECL|function|ahd_get_transaction_status
r_uint32
id|ahd_get_transaction_status
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
(brace
r_return
(paren
id|ahd_cmd_get_transaction_status
c_func
(paren
id|scb-&gt;io_ctx
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
DECL|function|ahd_cmd_get_scsi_status
r_uint32
id|ahd_cmd_get_scsi_status
c_func
(paren
id|Scsi_Cmnd
op_star
id|cmd
)paren
(brace
r_return
(paren
id|cmd-&gt;result
op_amp
l_int|0xFFFF
)paren
suffix:semicolon
)brace
r_static
id|__inline
DECL|function|ahd_get_scsi_status
r_uint32
id|ahd_get_scsi_status
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
(brace
r_return
(paren
id|ahd_cmd_get_scsi_status
c_func
(paren
id|scb-&gt;io_ctx
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
DECL|function|ahd_set_transaction_tag
r_void
id|ahd_set_transaction_tag
c_func
(paren
r_struct
id|scb
op_star
id|scb
comma
r_int
id|enabled
comma
id|u_int
id|type
)paren
(brace
multiline_comment|/*&n;&t; * Nothing to do for linux as the incoming transaction&n;&t; * has no concept of tag/non tagged, etc.&n;&t; */
)brace
r_static
id|__inline
DECL|function|ahd_get_transfer_length
id|u_long
id|ahd_get_transfer_length
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
(brace
r_return
(paren
id|scb-&gt;platform_data-&gt;xfer_len
)paren
suffix:semicolon
)brace
r_static
id|__inline
DECL|function|ahd_get_transfer_dir
r_int
id|ahd_get_transfer_dir
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
(brace
macro_line|#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,3,40)
r_return
(paren
id|scb-&gt;io_ctx-&gt;sc_data_direction
)paren
suffix:semicolon
macro_line|#else
r_if
c_cond
(paren
id|scb-&gt;io_ctx-&gt;bufflen
op_eq
l_int|0
)paren
r_return
(paren
id|CAM_DIR_NONE
)paren
suffix:semicolon
r_switch
c_cond
(paren
id|scb-&gt;io_ctx-&gt;cmnd
(braket
l_int|0
)braket
)paren
(brace
r_case
l_int|0x08
suffix:colon
multiline_comment|/* READ(6)  */
r_case
l_int|0x28
suffix:colon
multiline_comment|/* READ(10) */
r_case
l_int|0xA8
suffix:colon
multiline_comment|/* READ(12) */
r_return
(paren
id|CAM_DIR_IN
)paren
suffix:semicolon
r_case
l_int|0x0A
suffix:colon
multiline_comment|/* WRITE(6)  */
r_case
l_int|0x2A
suffix:colon
multiline_comment|/* WRITE(10) */
r_case
l_int|0xAA
suffix:colon
multiline_comment|/* WRITE(12) */
r_return
(paren
id|CAM_DIR_OUT
)paren
suffix:semicolon
r_default
suffix:colon
r_return
(paren
id|CAM_DIR_NONE
)paren
suffix:semicolon
)brace
macro_line|#endif
)brace
r_static
id|__inline
DECL|function|ahd_set_residual
r_void
id|ahd_set_residual
c_func
(paren
r_struct
id|scb
op_star
id|scb
comma
id|u_long
id|resid
)paren
(brace
macro_line|#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,3,0)
id|scb-&gt;io_ctx-&gt;resid
op_assign
id|resid
suffix:semicolon
macro_line|#else
id|scb-&gt;platform_data-&gt;resid
op_assign
id|resid
suffix:semicolon
macro_line|#endif
)brace
r_static
id|__inline
DECL|function|ahd_set_sense_residual
r_void
id|ahd_set_sense_residual
c_func
(paren
r_struct
id|scb
op_star
id|scb
comma
id|u_long
id|resid
)paren
(brace
id|scb-&gt;platform_data-&gt;sense_resid
op_assign
id|resid
suffix:semicolon
)brace
r_static
id|__inline
DECL|function|ahd_get_residual
id|u_long
id|ahd_get_residual
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
(brace
macro_line|#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,3,0)
r_return
(paren
id|scb-&gt;io_ctx-&gt;resid
)paren
suffix:semicolon
macro_line|#else
r_return
(paren
id|scb-&gt;platform_data-&gt;resid
)paren
suffix:semicolon
macro_line|#endif
)brace
r_static
id|__inline
DECL|function|ahd_get_sense_residual
id|u_long
id|ahd_get_sense_residual
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
(brace
r_return
(paren
id|scb-&gt;platform_data-&gt;sense_resid
)paren
suffix:semicolon
)brace
r_static
id|__inline
DECL|function|ahd_perform_autosense
r_int
id|ahd_perform_autosense
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
(brace
multiline_comment|/*&n;&t; * We always perform autosense in Linux.&n;&t; * On other platforms this is set on a&n;&t; * per-transaction basis.&n;&t; */
r_return
(paren
l_int|1
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_uint32
DECL|function|ahd_get_sense_bufsize
id|ahd_get_sense_bufsize
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
(brace
r_return
(paren
r_sizeof
(paren
r_struct
id|scsi_sense_data
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahd_notify_xfer_settings_change
id|ahd_notify_xfer_settings_change
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|ahd_devinfo
op_star
id|devinfo
)paren
(brace
multiline_comment|/* Nothing to do here for linux */
)brace
r_static
id|__inline
r_void
DECL|function|ahd_platform_scb_free
id|ahd_platform_scb_free
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
(brace
id|ahd-&gt;flags
op_and_assign
op_complement
id|AHD_RESOURCE_SHORTAGE
suffix:semicolon
)brace
r_int
id|ahd_platform_alloc
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_void
op_star
id|platform_arg
)paren
suffix:semicolon
r_void
id|ahd_platform_free
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_void
id|ahd_platform_init
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_void
id|ahd_platform_freeze_devq
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|scb
op_star
id|scb
)paren
suffix:semicolon
r_void
id|ahd_freeze_simq
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_void
id|ahd_release_simq
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_static
id|__inline
r_void
DECL|function|ahd_freeze_scb
id|ahd_freeze_scb
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
(brace
r_if
c_cond
(paren
(paren
id|scb-&gt;io_ctx-&gt;result
op_amp
(paren
id|CAM_DEV_QFRZN
op_lshift
l_int|16
)paren
)paren
op_eq
l_int|0
)paren
(brace
id|scb-&gt;io_ctx-&gt;result
op_or_assign
id|CAM_DEV_QFRZN
op_lshift
l_int|16
suffix:semicolon
id|scb-&gt;platform_data-&gt;dev-&gt;qfrozen
op_increment
suffix:semicolon
)brace
)brace
r_void
id|ahd_platform_set_tags
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_struct
id|ahd_devinfo
op_star
id|devinfo
comma
id|ahd_queue_alg
)paren
suffix:semicolon
r_int
id|ahd_platform_abort_scbs
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
comma
r_int
id|target
comma
r_char
id|channel
comma
r_int
id|lun
comma
id|u_int
id|tag
comma
id|role_t
id|role
comma
r_uint32
id|status
)paren
suffix:semicolon
id|AIC_LINUX_IRQRETURN_T
id|ahd_linux_isr
c_func
(paren
r_int
id|irq
comma
r_void
op_star
id|dev_id
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
r_void
id|ahd_platform_flushwork
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
r_int
id|ahd_softc_comp
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
r_struct
id|ahd_softc
op_star
)paren
suffix:semicolon
r_void
id|ahd_done
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_void
id|ahd_send_async
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
r_char
id|channel
comma
id|u_int
id|target
comma
id|u_int
id|lun
comma
id|ac_code
comma
r_void
op_star
)paren
suffix:semicolon
r_void
id|ahd_print_path
c_func
(paren
r_struct
id|ahd_softc
op_star
comma
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_void
id|ahd_platform_dump_card_state
c_func
(paren
r_struct
id|ahd_softc
op_star
id|ahd
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_PCI
DECL|macro|AHD_PCI_CONFIG
mdefine_line|#define AHD_PCI_CONFIG 1
macro_line|#else
DECL|macro|AHD_PCI_CONFIG
mdefine_line|#define AHD_PCI_CONFIG 0
macro_line|#endif
DECL|macro|bootverbose
mdefine_line|#define bootverbose aic79xx_verbose
r_extern
r_uint32
id|aic79xx_verbose
suffix:semicolon
macro_line|#endif /* _AIC79XX_LINUX_H_ */
eof
