multiline_comment|/*&n; * Adaptec AIC7xxx device driver for Linux.&n; *&n; * Copyright (c) 1994 John Aycock&n; *   The University of Calgary Department of Computer Science.&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2, or (at your option)&n; * any later version.&n; *&n; * This program is distributed in the hope that it will be useful,&n; * but WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; * GNU General Public License for more details.&n; *&n; * You should have received a copy of the GNU General Public License&n; * along with this program; see the file COPYING.  If not, write to&n; * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.&n; * &n; * $Id: //depot/src/linux/drivers/scsi/aic7xxx/aic7xxx_linux.h#45 $&n; *&n; * Copyright (c) 2000, 2001 Adaptec Inc.&n; * All rights reserved.&n; *&n; * Redistribution and use in source and binary forms, with or without&n; * modification, are permitted provided that the following conditions&n; * are met:&n; * 1. Redistributions of source code must retain the above copyright&n; *    notice, this list of conditions, and the following disclaimer,&n; *    without modification.&n; * 2. The name of the author may not be used to endorse or promote products&n; *    derived from this software without specific prior written permission.&n; *&n; * Alternatively, this software may be distributed under the terms of the&n; * GNU Public License (&quot;GPL&quot;).&n; *&n; * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS&squot;&squot; AND&n; * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE&n; * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE&n; * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR&n; * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL&n; * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS&n; * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&n; * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT&n; * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY&n; * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF&n; * SUCH DAMAGE.&n; *&n; * $Id: //depot/src/linux/drivers/scsi/aic7xxx/aic7xxx_linux.h#45 $&n; *&n; */
macro_line|#ifndef _AIC7XXX_LINUX_H_
DECL|macro|_AIC7XXX_LINUX_H_
mdefine_line|#define _AIC7XXX_LINUX_H_
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/blk.h&gt;
macro_line|#include &lt;linux/blkdev.h&gt;
macro_line|#include &lt;linux/delay.h&gt;
macro_line|#include &lt;linux/ioport.h&gt;
macro_line|#include &lt;linux/malloc.h&gt;
macro_line|#include &lt;linux/pci.h&gt;
macro_line|#include &lt;linux/version.h&gt;
macro_line|#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,4,0)
macro_line|#include &lt;linux/config.h&gt;
macro_line|#endif
multiline_comment|/* Core SCSI definitions */
macro_line|#include &quot;../scsi.h&quot;
macro_line|#include &quot;../hosts.h&quot;
multiline_comment|/* Name space conflict with BSD queue macros */
macro_line|#ifdef LIST_HEAD
DECL|macro|LIST_HEAD
macro_line|#undef LIST_HEAD
macro_line|#endif
macro_line|#include &quot;cam.h&quot;
macro_line|#include &quot;queue.h&quot;
macro_line|#include &quot;scsi_message.h&quot;
multiline_comment|/*&n; * We never have to reference the current task, and the driver core&n; * makes ample use of this &quot;name&quot;.&n; */
macro_line|#ifdef current
DECL|macro|current
macro_line|#undef current
macro_line|#endif
multiline_comment|/************************* Forward Declarations *******************************/
r_struct
id|ahc_softc
suffix:semicolon
DECL|typedef|ahc_dev_softc_t
r_typedef
r_struct
id|pci_dev
op_star
id|ahc_dev_softc_t
suffix:semicolon
DECL|typedef|ahc_io_ctx_t
r_typedef
id|Scsi_Cmnd
op_star
id|ahc_io_ctx_t
suffix:semicolon
multiline_comment|/******************************* Byte Order ***********************************/
DECL|macro|ahc_htobe16
mdefine_line|#define ahc_htobe16(x)&t;cpu_to_be16(x)
DECL|macro|ahc_htobe32
mdefine_line|#define ahc_htobe32(x)&t;cpu_to_be32(x)
DECL|macro|ahc_htobe64
mdefine_line|#define ahc_htobe64(x)&t;cpu_to_be64(x)
DECL|macro|ahc_htole16
mdefine_line|#define ahc_htole16(x)&t;cpu_to_le16(x)
DECL|macro|ahc_htole32
mdefine_line|#define ahc_htole32(x)&t;cpu_to_le32(x)
DECL|macro|ahc_htole64
mdefine_line|#define ahc_htole64(x)&t;cpu_to_le64(x)
DECL|macro|ahc_be16toh
mdefine_line|#define ahc_be16toh(x)&t;be16_to_cpu(x)
DECL|macro|ahc_be32toh
mdefine_line|#define ahc_be32toh(x)&t;be32_to_cpu(x)
DECL|macro|ahc_be64toh
mdefine_line|#define ahc_be64toh(x)&t;be64_to_cpu(x)
DECL|macro|ahc_le16toh
mdefine_line|#define ahc_le16toh(x)&t;le16_to_cpu(x)
DECL|macro|ahc_le32toh
mdefine_line|#define ahc_le32toh(x)&t;le32_to_cpu(x)
DECL|macro|ahc_le64toh
mdefine_line|#define ahc_le64toh(x)&t;le64_to_cpu(x)
multiline_comment|/************************* Configuration Data *********************************/
r_extern
r_int
id|aic7xxx_no_probe
suffix:semicolon
r_extern
r_int
id|aic7xxx_detect_complete
suffix:semicolon
r_extern
id|Scsi_Host_Template
op_star
id|aic7xxx_driver_template
suffix:semicolon
multiline_comment|/***************************** Bus Space/DMA **********************************/
macro_line|#if LINUX_VERSION_CODE &gt; KERNEL_VERSION(2,2,16)
DECL|typedef|bus_addr_t
r_typedef
id|dma_addr_t
id|bus_addr_t
suffix:semicolon
macro_line|#else
DECL|typedef|bus_addr_t
r_typedef
r_uint32
id|bus_addr_t
suffix:semicolon
macro_line|#endif
DECL|typedef|bus_size_t
r_typedef
r_uint32
id|bus_size_t
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|BUS_SPACE_MEMIO
id|BUS_SPACE_MEMIO
comma
DECL|enumerator|BUS_SPACE_PIO
id|BUS_SPACE_PIO
DECL|typedef|bus_space_tag_t
)brace
id|bus_space_tag_t
suffix:semicolon
r_typedef
r_union
(brace
DECL|member|ioport
id|u_long
id|ioport
suffix:semicolon
DECL|member|maddr
r_volatile
r_uint8
op_star
id|maddr
suffix:semicolon
DECL|typedef|bus_space_handle_t
)brace
id|bus_space_handle_t
suffix:semicolon
DECL|struct|bus_dma_segment
r_typedef
r_struct
id|bus_dma_segment
(brace
DECL|member|ds_addr
id|bus_addr_t
id|ds_addr
suffix:semicolon
DECL|member|ds_len
id|bus_size_t
id|ds_len
suffix:semicolon
DECL|typedef|bus_dma_segment_t
)brace
id|bus_dma_segment_t
suffix:semicolon
DECL|struct|ahc_linux_dma_tag
r_struct
id|ahc_linux_dma_tag
(brace
DECL|member|alignment
id|bus_size_t
id|alignment
suffix:semicolon
DECL|member|boundary
id|bus_size_t
id|boundary
suffix:semicolon
DECL|member|maxsize
id|bus_size_t
id|maxsize
suffix:semicolon
)brace
suffix:semicolon
DECL|typedef|bus_dma_tag_t
r_typedef
r_struct
id|ahc_linux_dma_tag
op_star
id|bus_dma_tag_t
suffix:semicolon
DECL|struct|ahc_linux_dmamap
r_struct
id|ahc_linux_dmamap
(brace
DECL|member|bus_addr
id|bus_addr_t
id|bus_addr
suffix:semicolon
)brace
suffix:semicolon
DECL|typedef|bus_dmamap_t
r_typedef
r_struct
id|ahc_linux_dmamap
op_star
id|bus_dmamap_t
suffix:semicolon
DECL|typedef|bus_dma_filter_t
r_typedef
r_int
id|bus_dma_filter_t
c_func
(paren
r_void
op_star
comma
id|bus_addr_t
)paren
suffix:semicolon
DECL|typedef|bus_dmamap_callback_t
r_typedef
r_void
id|bus_dmamap_callback_t
c_func
(paren
r_void
op_star
comma
id|bus_dma_segment_t
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
DECL|macro|BUS_DMA_WAITOK
mdefine_line|#define BUS_DMA_WAITOK&t;&t;0x0
DECL|macro|BUS_DMA_NOWAIT
mdefine_line|#define BUS_DMA_NOWAIT&t;&t;0x1
DECL|macro|BUS_DMA_ALLOCNOW
mdefine_line|#define BUS_DMA_ALLOCNOW&t;0x2
DECL|macro|BUS_DMA_LOAD_SEGS
mdefine_line|#define BUS_DMA_LOAD_SEGS&t;0x4&t;/*&n;&t;&t;&t;&t;&t; * Argument is an S/G list not&n;&t;&t;&t;&t;&t; * a single buffer.&n;&t;&t;&t;&t;&t; */
DECL|macro|BUS_SPACE_MAXADDR
mdefine_line|#define BUS_SPACE_MAXADDR&t;0xFFFFFFFF
DECL|macro|BUS_SPACE_MAXSIZE_32BIT
mdefine_line|#define BUS_SPACE_MAXSIZE_32BIT&t;0xFFFFFFFF
r_int
id|ahc_dma_tag_create
c_func
(paren
r_struct
id|ahc_softc
op_star
comma
id|bus_dma_tag_t
multiline_comment|/*parent*/
comma
id|bus_size_t
multiline_comment|/*alignment*/
comma
id|bus_size_t
multiline_comment|/*boundary*/
comma
id|bus_addr_t
multiline_comment|/*lowaddr*/
comma
id|bus_addr_t
multiline_comment|/*highaddr*/
comma
id|bus_dma_filter_t
op_star
multiline_comment|/*filter*/
comma
r_void
op_star
multiline_comment|/*filterarg*/
comma
id|bus_size_t
multiline_comment|/*maxsize*/
comma
r_int
multiline_comment|/*nsegments*/
comma
id|bus_size_t
multiline_comment|/*maxsegsz*/
comma
r_int
multiline_comment|/*flags*/
comma
id|bus_dma_tag_t
op_star
multiline_comment|/*dma_tagp*/
)paren
suffix:semicolon
r_void
id|ahc_dma_tag_destroy
c_func
(paren
r_struct
id|ahc_softc
op_star
comma
id|bus_dma_tag_t
multiline_comment|/*tag*/
)paren
suffix:semicolon
r_int
id|ahc_dmamem_alloc
c_func
(paren
r_struct
id|ahc_softc
op_star
comma
id|bus_dma_tag_t
multiline_comment|/*dmat*/
comma
r_void
op_star
op_star
multiline_comment|/*vaddr*/
comma
r_int
multiline_comment|/*flags*/
comma
id|bus_dmamap_t
op_star
multiline_comment|/*mapp*/
)paren
suffix:semicolon
r_void
id|ahc_dmamem_free
c_func
(paren
r_struct
id|ahc_softc
op_star
comma
id|bus_dma_tag_t
multiline_comment|/*dmat*/
comma
r_void
op_star
multiline_comment|/*vaddr*/
comma
id|bus_dmamap_t
multiline_comment|/*map*/
)paren
suffix:semicolon
r_void
id|ahc_dmamap_destroy
c_func
(paren
r_struct
id|ahc_softc
op_star
comma
id|bus_dma_tag_t
multiline_comment|/*tag*/
comma
id|bus_dmamap_t
multiline_comment|/*map*/
)paren
suffix:semicolon
r_int
id|ahc_dmamap_load
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
id|bus_dma_tag_t
multiline_comment|/*dmat*/
comma
id|bus_dmamap_t
multiline_comment|/*map*/
comma
r_void
op_star
multiline_comment|/*buf*/
comma
id|bus_size_t
multiline_comment|/*buflen*/
comma
id|bus_dmamap_callback_t
op_star
comma
r_void
op_star
multiline_comment|/*callback_arg*/
comma
r_int
multiline_comment|/*flags*/
)paren
suffix:semicolon
r_int
id|ahc_dmamap_unload
c_func
(paren
r_struct
id|ahc_softc
op_star
comma
id|bus_dma_tag_t
comma
id|bus_dmamap_t
)paren
suffix:semicolon
multiline_comment|/* XXX May do selective memory barrier operations on certain platforms */
DECL|macro|ahc_dmamap_sync
mdefine_line|#define ahc_dmamap_sync(ahc, dma_tag, dmamap, op)
multiline_comment|/************************** SCSI Constants/Structures *************************/
DECL|macro|SCSI_REV_2
mdefine_line|#define SCSI_REV_2 2
DECL|macro|SCSI_STATUS_OK
mdefine_line|#define&t;SCSI_STATUS_OK&t;&t;&t;0x00
DECL|macro|SCSI_STATUS_CHECK_COND
mdefine_line|#define&t;SCSI_STATUS_CHECK_COND&t;&t;0x02
DECL|macro|SCSI_STATUS_COND_MET
mdefine_line|#define&t;SCSI_STATUS_COND_MET&t;&t;0x04
DECL|macro|SCSI_STATUS_BUSY
mdefine_line|#define&t;SCSI_STATUS_BUSY&t;&t;0x08
DECL|macro|SCSI_STATUS_INTERMED
mdefine_line|#define SCSI_STATUS_INTERMED&t;&t;0x10
DECL|macro|SCSI_STATUS_INTERMED_COND_MET
mdefine_line|#define SCSI_STATUS_INTERMED_COND_MET&t;0x14
DECL|macro|SCSI_STATUS_RESERV_CONFLICT
mdefine_line|#define SCSI_STATUS_RESERV_CONFLICT&t;0x18
DECL|macro|SCSI_STATUS_CMD_TERMINATED
mdefine_line|#define SCSI_STATUS_CMD_TERMINATED&t;0x22
DECL|macro|SCSI_STATUS_QUEUE_FULL
mdefine_line|#define SCSI_STATUS_QUEUE_FULL&t;&t;0x28
multiline_comment|/*&n; * 6 byte request sense CDB format.&n; */
DECL|struct|scsi_sense
r_struct
id|scsi_sense
(brace
DECL|member|opcode
r_uint8
id|opcode
suffix:semicolon
DECL|member|byte2
r_uint8
id|byte2
suffix:semicolon
DECL|member|unused
r_uint8
id|unused
(braket
l_int|2
)braket
suffix:semicolon
DECL|member|length
r_uint8
id|length
suffix:semicolon
DECL|member|control
r_uint8
id|control
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|scsi_sense_data
r_struct
id|scsi_sense_data
(brace
DECL|member|error_code
r_uint8
id|error_code
suffix:semicolon
DECL|member|segment
r_uint8
id|segment
suffix:semicolon
DECL|member|flags
r_uint8
id|flags
suffix:semicolon
DECL|member|info
r_uint8
id|info
(braket
l_int|4
)braket
suffix:semicolon
DECL|member|extra_len
r_uint8
id|extra_len
suffix:semicolon
DECL|member|cmd_spec_info
r_uint8
id|cmd_spec_info
(braket
l_int|4
)braket
suffix:semicolon
DECL|member|add_sense_code
r_uint8
id|add_sense_code
suffix:semicolon
DECL|member|add_sense_code_qual
r_uint8
id|add_sense_code_qual
suffix:semicolon
DECL|member|fru
r_uint8
id|fru
suffix:semicolon
DECL|member|sense_key_spec
r_uint8
id|sense_key_spec
(braket
l_int|3
)braket
suffix:semicolon
DECL|member|extra_bytes
r_uint8
id|extra_bytes
(braket
l_int|14
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|scsi_inquiry_data
r_struct
id|scsi_inquiry_data
(brace
DECL|member|device
r_uint8
id|device
suffix:semicolon
DECL|macro|SID_TYPE
mdefine_line|#define&t;SID_TYPE(inq_data) ((inq_data)-&gt;device &amp; 0x1f)
DECL|macro|SID_QUAL
mdefine_line|#define&t;SID_QUAL(inq_data) (((inq_data)-&gt;device &amp; 0xE0) &gt;&gt; 5)
DECL|macro|SID_QUAL_LU_CONNECTED
mdefine_line|#define&t;SID_QUAL_LU_CONNECTED&t;0x00&t;/*&n;&t;&t;&t;&t;&t; * The specified peripheral device&n;&t;&t;&t;&t;&t; * type is currently connected to&n;&t;&t;&t;&t;&t; * logical unit.  If the target cannot&n;&t;&t;&t;&t;&t; * determine whether or not a physical&n;&t;&t;&t;&t;&t; * device is currently connected, it&n;&t;&t;&t;&t;&t; * shall also use this peripheral&n;&t;&t;&t;&t;&t; * qualifier when returning the INQUIRY&n;&t;&t;&t;&t;&t; * data.  This peripheral qualifier&n;&t;&t;&t;&t;&t; * does not mean that the device is&n;&t;&t;&t;&t;&t; * ready for access by the initiator.&n;&t;&t;&t;&t;&t; */
DECL|macro|SID_QUAL_LU_OFFLINE
mdefine_line|#define&t;SID_QUAL_LU_OFFLINE&t;0x01&t;/*&n;&t;&t;&t;&t;&t; * The target is capable of supporting&n;&t;&t;&t;&t;&t; * the specified peripheral device type&n;&t;&t;&t;&t;&t; * on this logical unit; however, the&n;&t;&t;&t;&t;&t; * physical device is not currently&n;&t;&t;&t;&t;&t; * connected to this logical unit.&n;&t;&t;&t;&t;&t; */
DECL|macro|SID_QUAL_RSVD
mdefine_line|#define SID_QUAL_RSVD&t;&t;0x02
DECL|macro|SID_QUAL_BAD_LU
mdefine_line|#define&t;SID_QUAL_BAD_LU&t;&t;0x03&t;/*&n;&t;&t;&t;&t;&t; * The target is not capable of&n;&t;&t;&t;&t;&t; * supporting a physical device on&n;&t;&t;&t;&t;&t; * this logical unit. For this&n;&t;&t;&t;&t;&t; * peripheral qualifier the peripheral&n;&t;&t;&t;&t;&t; * device type shall be set to 1Fh to&n;&t;&t;&t;&t;&t; * provide compatibility with previous&n;&t;&t;&t;&t;&t; * versions of SCSI. All other&n;&t;&t;&t;&t;&t; * peripheral device type values are&n;&t;&t;&t;&t;&t; * reserved for this peripheral&n;&t;&t;&t;&t;&t; * qualifier.&n;&t;&t;&t;&t;&t; */
DECL|macro|SID_QUAL_IS_VENDOR_UNIQUE
mdefine_line|#define&t;SID_QUAL_IS_VENDOR_UNIQUE(inq_data) ((SID_QUAL(inq_data) &amp; 0x08) != 0)
DECL|member|dev_qual2
r_uint8
id|dev_qual2
suffix:semicolon
DECL|macro|SID_QUAL2
mdefine_line|#define&t;SID_QUAL2&t;0x7F
DECL|macro|SID_IS_REMOVABLE
mdefine_line|#define&t;SID_IS_REMOVABLE(inq_data) (((inq_data)-&gt;dev_qual2 &amp; 0x80) != 0)
DECL|member|version
r_uint8
id|version
suffix:semicolon
DECL|macro|SID_ANSI_REV
mdefine_line|#define SID_ANSI_REV(inq_data) ((inq_data)-&gt;version &amp; 0x07)
DECL|macro|SCSI_REV_0
mdefine_line|#define&t;&t;SCSI_REV_0&t;&t;0
DECL|macro|SCSI_REV_CCS
mdefine_line|#define&t;&t;SCSI_REV_CCS&t;&t;1
DECL|macro|SCSI_REV_2
mdefine_line|#define&t;&t;SCSI_REV_2&t;&t;2
DECL|macro|SCSI_REV_SPC
mdefine_line|#define&t;&t;SCSI_REV_SPC&t;&t;3
DECL|macro|SCSI_REV_SPC2
mdefine_line|#define&t;&t;SCSI_REV_SPC2&t;&t;4
DECL|macro|SID_ECMA
mdefine_line|#define SID_ECMA&t;0x38
DECL|macro|SID_ISO
mdefine_line|#define SID_ISO&t;&t;0xC0
DECL|member|response_format
r_uint8
id|response_format
suffix:semicolon
DECL|macro|SID_AENC
mdefine_line|#define SID_AENC&t;0x80
DECL|macro|SID_TrmIOP
mdefine_line|#define SID_TrmIOP&t;0x40
DECL|member|additional_length
r_uint8
id|additional_length
suffix:semicolon
DECL|member|reserved
r_uint8
id|reserved
(braket
l_int|2
)braket
suffix:semicolon
DECL|member|flags
r_uint8
id|flags
suffix:semicolon
DECL|macro|SID_SftRe
mdefine_line|#define&t;SID_SftRe&t;0x01
DECL|macro|SID_CmdQue
mdefine_line|#define&t;SID_CmdQue&t;0x02
DECL|macro|SID_Linked
mdefine_line|#define&t;SID_Linked&t;0x08
DECL|macro|SID_Sync
mdefine_line|#define&t;SID_Sync&t;0x10
DECL|macro|SID_WBus16
mdefine_line|#define&t;SID_WBus16&t;0x20
DECL|macro|SID_WBus32
mdefine_line|#define&t;SID_WBus32&t;0x40
DECL|macro|SID_RelAdr
mdefine_line|#define&t;SID_RelAdr&t;0x80
DECL|macro|SID_VENDOR_SIZE
mdefine_line|#define SID_VENDOR_SIZE   8
DECL|member|vendor
r_char
id|vendor
(braket
id|SID_VENDOR_SIZE
)braket
suffix:semicolon
DECL|macro|SID_PRODUCT_SIZE
mdefine_line|#define SID_PRODUCT_SIZE  16
DECL|member|product
r_char
id|product
(braket
id|SID_PRODUCT_SIZE
)braket
suffix:semicolon
DECL|macro|SID_REVISION_SIZE
mdefine_line|#define SID_REVISION_SIZE 4
DECL|member|revision
r_char
id|revision
(braket
id|SID_REVISION_SIZE
)braket
suffix:semicolon
multiline_comment|/*&n;&t; * The following fields were taken from SCSI Primary Commands - 2&n;&t; * (SPC-2) Revision 14, Dated 11 November 1999&n;&t; */
DECL|macro|SID_VENDOR_SPECIFIC_0_SIZE
mdefine_line|#define&t;SID_VENDOR_SPECIFIC_0_SIZE&t;20
DECL|member|vendor_specific0
id|u_int8_t
id|vendor_specific0
(braket
id|SID_VENDOR_SPECIFIC_0_SIZE
)braket
suffix:semicolon
multiline_comment|/*&n;&t; * An extension of SCSI Parallel Specific Values&n;&t; */
DECL|macro|SID_SPI_IUS
mdefine_line|#define&t;SID_SPI_IUS&t;&t;0x01
DECL|macro|SID_SPI_QAS
mdefine_line|#define&t;SID_SPI_QAS&t;&t;0x02
DECL|macro|SID_SPI_CLOCK_ST
mdefine_line|#define&t;SID_SPI_CLOCK_ST&t;0x00
DECL|macro|SID_SPI_CLOCK_DT
mdefine_line|#define&t;SID_SPI_CLOCK_DT&t;0x04
DECL|macro|SID_SPI_CLOCK_DT_ST
mdefine_line|#define&t;SID_SPI_CLOCK_DT_ST&t;0x0C
DECL|macro|SID_SPI_MASK
mdefine_line|#define&t;SID_SPI_MASK&t;&t;0x0F
DECL|member|spi3data
r_uint8
id|spi3data
suffix:semicolon
DECL|member|reserved2
r_uint8
id|reserved2
suffix:semicolon
multiline_comment|/*&n;&t; * Version Descriptors, stored 2 byte values.&n;&t; */
DECL|member|version1
r_uint8
id|version1
(braket
l_int|2
)braket
suffix:semicolon
DECL|member|version2
r_uint8
id|version2
(braket
l_int|2
)braket
suffix:semicolon
DECL|member|version3
r_uint8
id|version3
(braket
l_int|2
)braket
suffix:semicolon
DECL|member|version4
r_uint8
id|version4
(braket
l_int|2
)braket
suffix:semicolon
DECL|member|version5
r_uint8
id|version5
(braket
l_int|2
)braket
suffix:semicolon
DECL|member|version6
r_uint8
id|version6
(braket
l_int|2
)braket
suffix:semicolon
DECL|member|version7
r_uint8
id|version7
(braket
l_int|2
)braket
suffix:semicolon
DECL|member|version8
r_uint8
id|version8
(braket
l_int|2
)braket
suffix:semicolon
DECL|member|reserved3
r_uint8
id|reserved3
(braket
l_int|22
)braket
suffix:semicolon
DECL|macro|SID_VENDOR_SPECIFIC_1_SIZE
mdefine_line|#define&t;SID_VENDOR_SPECIFIC_1_SIZE&t;160
DECL|member|vendor_specific1
r_uint8
id|vendor_specific1
(braket
id|SID_VENDOR_SPECIFIC_1_SIZE
)braket
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/********************************** Includes **********************************/
multiline_comment|/* Host template and function declarations referenced by the template. */
macro_line|#include &quot;aic7xxx_linux_host.h&quot;
multiline_comment|/* Core driver definitions */
macro_line|#include &quot;aic7xxx.h&quot;
multiline_comment|/* SMP support */
macro_line|#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,3,17)
macro_line|#include &lt;linux/spinlock.h&gt;
macro_line|#elif LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,1,93)
macro_line|#include &lt;linux/smp.h&gt;
macro_line|#endif
DECL|macro|AIC7XXX_DRIVER_VERSION
mdefine_line|#define AIC7XXX_DRIVER_VERSION  &quot;6.1.5&quot;
macro_line|#ifndef KERNEL_VERSION
DECL|macro|KERNEL_VERSION
mdefine_line|#define KERNEL_VERSION(x,y,z) (((x)&lt;&lt;16)+((y)&lt;&lt;8)+(z))
macro_line|#endif
multiline_comment|/**************************** Front End Queues ********************************/
multiline_comment|/*&n; * Data structure used to cast the Linux struct scsi_cmnd to something&n; * that allows us to use the queue macros.  The linux structure has&n; * plenty of space to hold the links fields as required by the queue&n; * macros, but the queue macors require them to have the correct type.&n; */
DECL|struct|ahc_cmd_internal
r_struct
id|ahc_cmd_internal
(brace
multiline_comment|/* Area owned by the Linux scsi layer. */
DECL|member|private
r_uint8
r_private
(braket
m_offsetof
(paren
r_struct
id|scsi_cmnd
comma
id|SCp.Status
)paren
)braket
suffix:semicolon
r_union
(brace
id|STAILQ_ENTRY
c_func
(paren
id|ahc_cmd
)paren
id|ste
suffix:semicolon
id|LIST_ENTRY
c_func
(paren
id|ahc_cmd
)paren
id|le
suffix:semicolon
id|TAILQ_ENTRY
c_func
(paren
id|ahc_cmd
)paren
id|tqe
suffix:semicolon
DECL|member|links
)brace
id|links
suffix:semicolon
DECL|member|end
r_uint32
id|end
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ahc_cmd
r_struct
id|ahc_cmd
(brace
r_union
(brace
DECL|member|icmd
r_struct
id|ahc_cmd_internal
id|icmd
suffix:semicolon
DECL|member|scsi_cmd
r_struct
id|scsi_cmnd
id|scsi_cmd
suffix:semicolon
DECL|member|un
)brace
id|un
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|acmd_icmd
mdefine_line|#define acmd_icmd(cmd) ((cmd)-&gt;un.icmd)
DECL|macro|acmd_scsi_cmd
mdefine_line|#define acmd_scsi_cmd(cmd) ((cmd)-&gt;un.scsi_cmd)
DECL|macro|acmd_links
mdefine_line|#define acmd_links un.icmd.links
multiline_comment|/*************************** Device Data Structures ***************************/
multiline_comment|/*&n; * A per probed device structure used to deal with some error recovery&n; * scenarios that the Linux mid-layer code just doesn&squot;t know how to&n; * handle.  The structure allocated for a device only becomes persistant&n; * after a successfully completed inquiry command to the target when&n; * that inquiry data indicates a lun is present.&n; */
id|TAILQ_HEAD
c_func
(paren
id|ahc_busyq
comma
id|ahc_cmd
)paren
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|AHC_DEV_UNCONFIGURED
id|AHC_DEV_UNCONFIGURED
op_assign
l_int|0x01
comma
DECL|enumerator|AHC_DEV_FREEZE_TIL_EMPTY
id|AHC_DEV_FREEZE_TIL_EMPTY
op_assign
l_int|0x02
comma
multiline_comment|/* Freeze queue until active == 0 */
DECL|enumerator|AHC_DEV_TIMER_ACTIVE
id|AHC_DEV_TIMER_ACTIVE
op_assign
l_int|0x04
comma
multiline_comment|/* Our timer is active */
DECL|enumerator|AHC_DEV_ON_RUN_LIST
id|AHC_DEV_ON_RUN_LIST
op_assign
l_int|0x08
multiline_comment|/* Queued to be run later */
DECL|typedef|ahc_dev_flags
)brace
id|ahc_dev_flags
suffix:semicolon
r_struct
id|ahc_linux_target
suffix:semicolon
DECL|struct|ahc_linux_device
r_struct
id|ahc_linux_device
(brace
id|LIST_ENTRY
c_func
(paren
id|ahc_linux_device
)paren
id|links
suffix:semicolon
DECL|member|busyq
r_struct
id|ahc_busyq
id|busyq
suffix:semicolon
multiline_comment|/*&n;&t; * The number of transactions currently&n;&t; * queued to the device.&n;&t; */
DECL|member|active
r_int
id|active
suffix:semicolon
multiline_comment|/*&n;&t; * The currently allowed number of &n;&t; * transactions that can be queued to&n;&t; * the device.  Must be signed for&n;&t; * conversion from tagged to untagged&n;&t; * mode where the device may have more&n;&t; * than one outstanding active transaction.&n;&t; */
DECL|member|openings
r_int
id|openings
suffix:semicolon
multiline_comment|/*&n;&t; * A positive count indicates that this&n;&t; * device&squot;s queue is halted.&n;&t; */
DECL|member|qfrozen
id|u_int
id|qfrozen
suffix:semicolon
multiline_comment|/*&n;&t; * Cumulative command counter.&n;&t; */
DECL|member|num_commands
id|u_int
id|num_commands
suffix:semicolon
multiline_comment|/*&n;&t; * The number of tagged transactions when&n;&t; * running at our current opening level&n;&t; * that have been successfully received by&n;&t; * this device since the last QUEUE FULL.&n;&t; */
DECL|member|tag_success_count
id|u_int
id|tag_success_count
suffix:semicolon
DECL|macro|AHC_TAG_SUCCESS_INTERVAL
mdefine_line|#define AHC_TAG_SUCCESS_INTERVAL 50
DECL|member|flags
id|ahc_dev_flags
id|flags
suffix:semicolon
multiline_comment|/*&n;&t; * The high limit for the tags variable.&n;&t; */
DECL|member|maxtags
id|u_int
id|maxtags
suffix:semicolon
multiline_comment|/*&n;&t; * The computed number of tags outstanding&n;&t; * at the time of the last QUEUE FULL event.&n;&t; */
DECL|member|tags_on_last_queuefull
id|u_int
id|tags_on_last_queuefull
suffix:semicolon
multiline_comment|/*&n;&t; * How many times we have seen a queue full&n;&t; * with the same number of tags.  This is used&n;&t; * to stop our adaptive queue depth algorithm&n;&t; * on devices with a fixed number of tags.&n;&t; */
DECL|member|last_queuefull_same_count
id|u_int
id|last_queuefull_same_count
suffix:semicolon
DECL|macro|AHC_LOCK_TAGS_COUNT
mdefine_line|#define AHC_LOCK_TAGS_COUNT 50
DECL|member|lun
r_int
id|lun
suffix:semicolon
DECL|member|target
r_struct
id|ahc_linux_target
op_star
id|target
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ahc_linux_target
r_struct
id|ahc_linux_target
(brace
DECL|member|devices
r_struct
id|ahc_linux_device
op_star
id|devices
(braket
id|AHC_NUM_LUNS
)braket
suffix:semicolon
DECL|member|channel
r_int
id|channel
suffix:semicolon
DECL|member|target
r_int
id|target
suffix:semicolon
DECL|member|refcount
r_int
id|refcount
suffix:semicolon
DECL|member|last_tinfo
r_struct
id|ahc_transinfo
id|last_tinfo
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/********************* Definitions Required by the Core ***********************/
multiline_comment|/*&n; * Number of SG segments we require.  So long as the S/G segments for&n; * a particular transaction are allocated in a physically contiguous&n; * manner and are allocated below 4GB, the number of S/G segments is&n; * unrestricted.&n; */
DECL|macro|AHC_NSEG
mdefine_line|#define        AHC_NSEG 128
multiline_comment|/*&n; * Per-SCB OSM storage.&n; */
DECL|struct|scb_platform_data
r_struct
id|scb_platform_data
(brace
DECL|member|dev
r_struct
id|ahc_linux_device
op_star
id|dev
suffix:semicolon
DECL|member|xfer_len
r_uint32
id|xfer_len
suffix:semicolon
macro_line|#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(2,3,0)
DECL|member|resid
r_uint32
id|resid
suffix:semicolon
multiline_comment|/* Transfer residual */
macro_line|#endif
)brace
suffix:semicolon
multiline_comment|/*&n; * Define a structure used for each host adapter.  All members are&n; * aligned on a boundary &gt;= the size of the member to honor the&n; * alignment restrictions of the various platforms supported by&n; * this driver.&n; */
id|TAILQ_HEAD
c_func
(paren
id|ahc_completeq
comma
id|ahc_cmd
)paren
suffix:semicolon
DECL|struct|ahc_platform_data
r_struct
id|ahc_platform_data
(brace
multiline_comment|/*&n;&t; * Fields accessed from interrupt context.&n;&t; */
DECL|member|targets
r_struct
id|ahc_linux_target
op_star
id|targets
(braket
id|AHC_NUM_TARGETS
)braket
suffix:semicolon
id|LIST_HEAD
c_func
(paren
comma
id|ahc_linux_device
)paren
id|device_runq
suffix:semicolon
DECL|member|completeq
r_struct
id|ahc_completeq
id|completeq
suffix:semicolon
macro_line|#if LINUX_VERSION_CODE &gt; KERNEL_VERSION(2,1,0)
DECL|member|spin_lock
id|spinlock_t
id|spin_lock
suffix:semicolon
macro_line|#endif
DECL|member|qfrozen
id|u_int
id|qfrozen
suffix:semicolon
DECL|member|reset_timer
r_struct
id|timer_list
id|reset_timer
suffix:semicolon
DECL|member|eh_sem
r_struct
id|semaphore
id|eh_sem
suffix:semicolon
DECL|member|host
r_struct
id|Scsi_Host
op_star
id|host
suffix:semicolon
multiline_comment|/* pointer to scsi host */
DECL|member|irq
r_uint32
id|irq
suffix:semicolon
multiline_comment|/* IRQ for this adapter */
DECL|member|bios_address
r_uint32
id|bios_address
suffix:semicolon
DECL|member|mem_busaddr
r_uint32
id|mem_busaddr
suffix:semicolon
multiline_comment|/* Mem Base Addr */
)brace
suffix:semicolon
multiline_comment|/************************** OS Utility Wrappers *******************************/
DECL|macro|printf
mdefine_line|#define printf printk
DECL|macro|M_NOWAIT
mdefine_line|#define M_NOWAIT GFP_ATOMIC
DECL|macro|M_WAITOK
mdefine_line|#define M_WAITOK 0
DECL|macro|malloc
mdefine_line|#define malloc(size, type, flags) kmalloc(size, flags)
DECL|macro|free
mdefine_line|#define free(ptr, type) kfree(ptr)
r_static
id|__inline
r_void
id|ahc_delay
c_func
(paren
r_int
)paren
suffix:semicolon
r_static
id|__inline
r_void
DECL|function|ahc_delay
id|ahc_delay
c_func
(paren
r_int
id|usec
)paren
(brace
multiline_comment|/*&n;&t; * udelay on Linux can have problems for&n;&t; * multi-millisecond waits.  Wait at most&n;&t; * 1024us per call.&n;&t; */
r_while
c_loop
(paren
id|usec
OG
l_int|0
)paren
(brace
id|udelay
c_func
(paren
id|usec
op_mod
l_int|1024
)paren
suffix:semicolon
id|usec
op_sub_assign
l_int|1024
suffix:semicolon
)brace
)brace
multiline_comment|/***************************** Low Level I/O **********************************/
macro_line|#if defined(__powerpc__)
DECL|macro|MMAPIO
mdefine_line|#define MMAPIO
macro_line|#ifdef mb
DECL|macro|mb
macro_line|#undef mb
macro_line|#endif
DECL|macro|mb
mdefine_line|#define mb() &bslash;&n;&t;__asm__ __volatile__(&quot;eieio&quot; ::: &quot;memory&quot;)
macro_line|#elif defined(__i386__)
DECL|macro|MMAPIO
mdefine_line|#define MMAPIO
macro_line|#ifdef mb
DECL|macro|mb
macro_line|#undef mb
macro_line|#endif
DECL|macro|mb
mdefine_line|#define mb() &bslash;&n;&t;do { ; } while(0)
macro_line|#elif defined(__alpha__)
macro_line|#ifdef mb
DECL|macro|mb
macro_line|#undef mb
macro_line|#endif
DECL|macro|mb
mdefine_line|#define mb() &bslash;&n;&t;__asm__ __volatile__(&quot;mb&quot;: : :&quot;memory&quot;)
macro_line|#elif defined(__sparc__)
DECL|macro|MMAPIO
mdefine_line|#define MMAPIO
multiline_comment|/* The default mb() define does what this driver wants. -DaveM */
macro_line|#endif
r_static
id|__inline
r_uint8
id|ahc_inb
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
id|port
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahc_outb
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
id|port
comma
r_uint8
id|val
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahc_outsb
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
id|port
comma
r_uint8
op_star
comma
r_int
id|count
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahc_insb
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
id|port
comma
r_uint8
op_star
comma
r_int
id|count
)paren
suffix:semicolon
r_static
id|__inline
r_uint8
DECL|function|ahc_inb
id|ahc_inb
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
id|port
)paren
(brace
macro_line|#ifdef MMAPIO
r_uint8
id|x
suffix:semicolon
r_if
c_cond
(paren
id|ahc-&gt;tag
op_eq
id|BUS_SPACE_MEMIO
)paren
(brace
id|x
op_assign
id|readb
c_func
(paren
id|ahc-&gt;bsh.maddr
op_plus
id|port
)paren
suffix:semicolon
)brace
r_else
(brace
id|x
op_assign
id|inb
c_func
(paren
id|ahc-&gt;bsh.ioport
op_plus
id|port
)paren
suffix:semicolon
)brace
id|mb
c_func
(paren
)paren
suffix:semicolon
r_return
(paren
id|x
)paren
suffix:semicolon
macro_line|#else
r_return
(paren
id|inb
c_func
(paren
id|ahc-&gt;bsh.ioport
op_plus
id|port
)paren
)paren
suffix:semicolon
macro_line|#endif
)brace
r_static
id|__inline
r_void
DECL|function|ahc_outb
id|ahc_outb
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
id|port
comma
r_uint8
id|val
)paren
(brace
macro_line|#ifdef MMAPIO
r_if
c_cond
(paren
id|ahc-&gt;tag
op_eq
id|BUS_SPACE_MEMIO
)paren
(brace
id|writeb
c_func
(paren
id|val
comma
id|ahc-&gt;bsh.maddr
op_plus
id|port
)paren
suffix:semicolon
)brace
r_else
(brace
id|outb
c_func
(paren
id|val
comma
id|ahc-&gt;bsh.ioport
op_plus
id|port
)paren
suffix:semicolon
)brace
id|mb
c_func
(paren
)paren
suffix:semicolon
macro_line|#else
id|outb
c_func
(paren
id|val
comma
id|ahc-&gt;bsh.ioport
op_plus
id|port
)paren
suffix:semicolon
macro_line|#endif
)brace
r_static
id|__inline
r_void
DECL|function|ahc_outsb
id|ahc_outsb
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
id|port
comma
r_uint8
op_star
id|array
comma
r_int
id|count
)paren
(brace
r_int
id|i
suffix:semicolon
multiline_comment|/*&n;&t; * There is probably a more efficient way to do this on Linux&n;&t; * but we don&squot;t use this for anything speed critical and this&n;&t; * should work.&n;&t; */
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|count
suffix:semicolon
id|i
op_increment
)paren
id|ahc_outb
c_func
(paren
id|ahc
comma
id|port
comma
op_star
id|array
op_increment
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahc_insb
id|ahc_insb
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
id|port
comma
r_uint8
op_star
id|array
comma
r_int
id|count
)paren
(brace
r_int
id|i
suffix:semicolon
multiline_comment|/*&n;&t; * There is probably a more efficient way to do this on Linux&n;&t; * but we don&squot;t use this for anything speed critical and this&n;&t; * should work.&n;&t; */
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|count
suffix:semicolon
id|i
op_increment
)paren
op_star
id|array
op_increment
op_assign
id|ahc_inb
c_func
(paren
id|ahc
comma
id|port
)paren
suffix:semicolon
)brace
multiline_comment|/**************************** Initialization **********************************/
r_int
id|aic7xxx_register_host
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
id|Scsi_Host_Template
op_star
r_template
)paren
suffix:semicolon
multiline_comment|/*************************** Pretty Printing **********************************/
DECL|struct|info_str
r_struct
id|info_str
(brace
DECL|member|buffer
r_char
op_star
id|buffer
suffix:semicolon
DECL|member|length
r_int
id|length
suffix:semicolon
DECL|member|offset
id|off_t
id|offset
suffix:semicolon
DECL|member|pos
r_int
id|pos
suffix:semicolon
)brace
suffix:semicolon
r_void
id|ahc_format_transinfo
c_func
(paren
r_struct
id|info_str
op_star
id|info
comma
r_struct
id|ahc_transinfo
op_star
id|tinfo
)paren
suffix:semicolon
multiline_comment|/******************************** Locking *************************************/
multiline_comment|/* Lock protecting internal data structures */
r_static
id|__inline
r_void
id|ahc_lockinit
c_func
(paren
r_struct
id|ahc_softc
op_star
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahc_lock
c_func
(paren
r_struct
id|ahc_softc
op_star
comma
r_int
r_int
op_star
id|flags
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahc_unlock
c_func
(paren
r_struct
id|ahc_softc
op_star
comma
r_int
r_int
op_star
id|flags
)paren
suffix:semicolon
multiline_comment|/* Lock held during command compeletion to the upper layer */
r_static
id|__inline
r_void
id|ahc_done_lockinit
c_func
(paren
r_struct
id|ahc_softc
op_star
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahc_done_lock
c_func
(paren
r_struct
id|ahc_softc
op_star
comma
r_int
r_int
op_star
id|flags
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahc_done_unlock
c_func
(paren
r_struct
id|ahc_softc
op_star
comma
r_int
r_int
op_star
id|flags
)paren
suffix:semicolon
macro_line|#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,1,93)
r_static
id|__inline
r_void
DECL|function|ahc_lockinit
id|ahc_lockinit
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
)paren
(brace
id|spin_lock_init
c_func
(paren
op_amp
id|ahc-&gt;platform_data-&gt;spin_lock
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahc_lock
id|ahc_lock
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
r_int
op_star
id|flags
)paren
(brace
op_star
id|flags
op_assign
l_int|0
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|ahc-&gt;platform_data-&gt;spin_lock
comma
op_star
id|flags
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahc_unlock
id|ahc_unlock
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
r_int
op_star
id|flags
)paren
(brace
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|ahc-&gt;platform_data-&gt;spin_lock
comma
op_star
id|flags
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahc_done_lockinit
id|ahc_done_lockinit
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
)paren
(brace
multiline_comment|/* We don&squot;t own the iorequest lock, so we don&squot;t initialize it. */
)brace
r_static
id|__inline
r_void
DECL|function|ahc_done_lock
id|ahc_done_lock
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
r_int
op_star
id|flags
)paren
(brace
op_star
id|flags
op_assign
l_int|0
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|io_request_lock
comma
op_star
id|flags
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahc_done_unlock
id|ahc_done_unlock
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
r_int
op_star
id|flags
)paren
(brace
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|io_request_lock
comma
op_star
id|flags
)paren
suffix:semicolon
)brace
macro_line|#else /* LINUX_VERSION_CODE &lt; KERNEL_VERSION(2,1,0) */
DECL|function|ahc_lockinit
id|ahc_lockinit
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
)paren
(brace
)brace
r_static
id|__inline
r_void
DECL|function|ahc_lock
id|ahc_lock
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
r_int
op_star
id|flags
)paren
(brace
op_star
id|flags
op_assign
l_int|0
suffix:semicolon
id|save_flags
c_func
(paren
op_star
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|ahc_unlock
id|ahc_unlock
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
r_int
op_star
id|flags
)paren
(brace
id|restore_flags
c_func
(paren
op_star
id|flags
)paren
suffix:semicolon
)brace
DECL|function|ahc_done_lockinit
id|ahc_done_lockinit
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
)paren
(brace
)brace
r_static
id|__inline
r_void
DECL|function|ahc_done_lock
id|ahc_done_lock
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
r_int
op_star
id|flags
)paren
(brace
multiline_comment|/*&n;&t; * The done lock is always held while&n;&t; * the ahc lock is held so blocking&n;&t; * interrupts again would have no effect.&n;&t; */
)brace
r_static
id|__inline
r_void
DECL|function|ahc_done_unlock
id|ahc_done_unlock
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
r_int
op_star
id|flags
)paren
(brace
)brace
macro_line|#endif /* LINUX_VERSION_CODE &lt; KERNEL_VERSION(2,1,0) */
multiline_comment|/******************************* PCI Definitions ******************************/
multiline_comment|/*&n; * PCIM_xxx: mask to locate subfield in register&n; * PCIR_xxx: config register offset&n; * PCIC_xxx: device class&n; * PCIS_xxx: device subclass&n; * PCIP_xxx: device programming interface&n; * PCIV_xxx: PCI vendor ID (only required to fixup ancient devices)&n; * PCID_xxx: device ID&n; */
DECL|macro|PCIR_DEVVENDOR
mdefine_line|#define PCIR_DEVVENDOR&t;&t;0x00
DECL|macro|PCIR_VENDOR
mdefine_line|#define PCIR_VENDOR&t;&t;0x00
DECL|macro|PCIR_DEVICE
mdefine_line|#define PCIR_DEVICE&t;&t;0x02
DECL|macro|PCIR_COMMAND
mdefine_line|#define PCIR_COMMAND&t;&t;0x04
DECL|macro|PCIM_CMD_PORTEN
mdefine_line|#define PCIM_CMD_PORTEN&t;&t;0x0001
DECL|macro|PCIM_CMD_MEMEN
mdefine_line|#define PCIM_CMD_MEMEN&t;&t;0x0002
DECL|macro|PCIM_CMD_BUSMASTEREN
mdefine_line|#define PCIM_CMD_BUSMASTEREN&t;0x0004
DECL|macro|PCIM_CMD_MWRICEN
mdefine_line|#define PCIM_CMD_MWRICEN&t;0x0010
DECL|macro|PCIM_CMD_PERRESPEN
mdefine_line|#define PCIM_CMD_PERRESPEN&t;0x0040
DECL|macro|PCIR_STATUS
mdefine_line|#define PCIR_STATUS&t;&t;0x06
DECL|macro|PCIR_REVID
mdefine_line|#define PCIR_REVID&t;&t;0x08
DECL|macro|PCIR_PROGIF
mdefine_line|#define PCIR_PROGIF&t;&t;0x09
DECL|macro|PCIR_SUBCLASS
mdefine_line|#define PCIR_SUBCLASS&t;&t;0x0a
DECL|macro|PCIR_CLASS
mdefine_line|#define PCIR_CLASS&t;&t;0x0b
DECL|macro|PCIR_CACHELNSZ
mdefine_line|#define PCIR_CACHELNSZ&t;&t;0x0c
DECL|macro|PCIR_LATTIMER
mdefine_line|#define PCIR_LATTIMER&t;&t;0x0d
DECL|macro|PCIR_HEADERTYPE
mdefine_line|#define PCIR_HEADERTYPE&t;&t;0x0e
DECL|macro|PCIM_MFDEV
mdefine_line|#define PCIM_MFDEV&t;&t;0x80
DECL|macro|PCIR_BIST
mdefine_line|#define PCIR_BIST&t;&t;0x0f
DECL|macro|PCIR_CAP_PTR
mdefine_line|#define PCIR_CAP_PTR&t;&t;0x34
multiline_comment|/* config registers for header type 0 devices */
DECL|macro|PCIR_MAPS
mdefine_line|#define PCIR_MAPS&t;0x10
DECL|macro|PCIR_SUBVEND_0
mdefine_line|#define PCIR_SUBVEND_0&t;0x2c
DECL|macro|PCIR_SUBDEV_0
mdefine_line|#define PCIR_SUBDEV_0&t;0x2e
multiline_comment|/**************************** VL/EISA Routines ********************************/
r_int
id|aic7770_linux_probe
c_func
(paren
id|Scsi_Host_Template
op_star
)paren
suffix:semicolon
r_int
id|aic7770_map_registers
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
)paren
suffix:semicolon
r_int
id|aic7770_map_int
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
id|u_int
id|irq
comma
r_int
id|shared
)paren
suffix:semicolon
multiline_comment|/******************************* PCI Routines *********************************/
multiline_comment|/*&n; * We need to use the bios32.h routines if we are kernel version 2.1.92 or less.&n; */
macro_line|#if LINUX_VERSION_CODE &lt;= KERNEL_VERSION(2,1,92)
macro_line|#if defined(__sparc_v9__) || defined(__powerpc__)
macro_line|#error &quot;PPC and Sparc platforms are only support under 2.1.92 and above&quot;
macro_line|#endif
macro_line|#include &lt;linux/bios32.h&gt;
macro_line|#endif
r_int
id|ahc_linux_pci_probe
c_func
(paren
id|Scsi_Host_Template
op_star
)paren
suffix:semicolon
r_int
id|ahc_pci_map_registers
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
)paren
suffix:semicolon
r_int
id|ahc_pci_map_int
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
)paren
suffix:semicolon
r_static
id|__inline
r_uint32
id|ahc_pci_read_config
c_func
(paren
id|ahc_dev_softc_t
id|pci
comma
r_int
id|reg
comma
r_int
id|width
)paren
suffix:semicolon
r_static
id|__inline
r_uint32
DECL|function|ahc_pci_read_config
id|ahc_pci_read_config
c_func
(paren
id|ahc_dev_softc_t
id|pci
comma
r_int
id|reg
comma
r_int
id|width
)paren
(brace
r_switch
c_cond
(paren
id|width
)paren
(brace
r_case
l_int|1
suffix:colon
(brace
r_uint8
id|retval
suffix:semicolon
id|pci_read_config_byte
c_func
(paren
id|pci
comma
id|reg
comma
op_amp
id|retval
)paren
suffix:semicolon
r_return
(paren
id|retval
)paren
suffix:semicolon
)brace
r_case
l_int|2
suffix:colon
(brace
r_uint16
id|retval
suffix:semicolon
id|pci_read_config_word
c_func
(paren
id|pci
comma
id|reg
comma
op_amp
id|retval
)paren
suffix:semicolon
r_return
(paren
id|retval
)paren
suffix:semicolon
)brace
r_case
l_int|4
suffix:colon
(brace
r_uint32
id|retval
suffix:semicolon
id|pci_read_config_dword
c_func
(paren
id|pci
comma
id|reg
comma
op_amp
id|retval
)paren
suffix:semicolon
r_return
(paren
id|retval
)paren
suffix:semicolon
)brace
r_default
suffix:colon
id|panic
c_func
(paren
l_string|&quot;ahc_pci_read_config: Read size too big&quot;
)paren
suffix:semicolon
multiline_comment|/* NOTREACHED */
)brace
)brace
r_static
id|__inline
r_void
id|ahc_pci_write_config
c_func
(paren
id|ahc_dev_softc_t
id|pci
comma
r_int
id|reg
comma
r_uint32
id|value
comma
r_int
id|width
)paren
suffix:semicolon
r_static
id|__inline
r_void
DECL|function|ahc_pci_write_config
id|ahc_pci_write_config
c_func
(paren
id|ahc_dev_softc_t
id|pci
comma
r_int
id|reg
comma
r_uint32
id|value
comma
r_int
id|width
)paren
(brace
r_switch
c_cond
(paren
id|width
)paren
(brace
r_case
l_int|1
suffix:colon
id|pci_write_config_byte
c_func
(paren
id|pci
comma
id|reg
comma
id|value
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|pci_write_config_word
c_func
(paren
id|pci
comma
id|reg
comma
id|value
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|4
suffix:colon
id|pci_write_config_dword
c_func
(paren
id|pci
comma
id|reg
comma
id|value
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|panic
c_func
(paren
l_string|&quot;ahc_pci_write_config: Write size too big&quot;
)paren
suffix:semicolon
multiline_comment|/* NOTREACHED */
)brace
)brace
r_static
id|__inline
r_int
id|ahc_get_pci_function
c_func
(paren
id|ahc_dev_softc_t
)paren
suffix:semicolon
r_static
id|__inline
r_int
DECL|function|ahc_get_pci_function
id|ahc_get_pci_function
c_func
(paren
id|ahc_dev_softc_t
id|pci
)paren
(brace
r_return
(paren
id|PCI_FUNC
c_func
(paren
id|pci-&gt;devfn
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_int
id|ahc_get_pci_slot
c_func
(paren
id|ahc_dev_softc_t
)paren
suffix:semicolon
r_static
id|__inline
r_int
DECL|function|ahc_get_pci_slot
id|ahc_get_pci_slot
c_func
(paren
id|ahc_dev_softc_t
id|pci
)paren
(brace
r_return
(paren
id|PCI_SLOT
c_func
(paren
id|pci-&gt;devfn
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_int
id|ahc_get_pci_bus
c_func
(paren
id|ahc_dev_softc_t
)paren
suffix:semicolon
r_static
id|__inline
r_int
DECL|function|ahc_get_pci_bus
id|ahc_get_pci_bus
c_func
(paren
id|ahc_dev_softc_t
id|pci
)paren
(brace
r_return
(paren
id|pci-&gt;bus-&gt;number
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
id|ahc_flush_device_writes
c_func
(paren
r_struct
id|ahc_softc
op_star
)paren
suffix:semicolon
r_static
id|__inline
r_void
DECL|function|ahc_flush_device_writes
id|ahc_flush_device_writes
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
)paren
(brace
multiline_comment|/* XXX Is this sufficient for all architectures??? */
id|ahc_inb
c_func
(paren
id|ahc
comma
id|INTSTAT
)paren
suffix:semicolon
)brace
macro_line|#if LINUX_VERSION_CODE &lt;= KERNEL_VERSION(2,3,0)
DECL|macro|pci_map_sg
mdefine_line|#define pci_map_sg(pdev, sg_list, nseg, direction) (nseg)
DECL|macro|pci_unmap_sg
mdefine_line|#define pci_unmap_sg(pdev, sg_list, nseg, direction)
DECL|macro|sg_dma_address
mdefine_line|#define sg_dma_address(sg) (VIRT_TO_BUS((sg)-&gt;address))
DECL|macro|sg_dma_len
mdefine_line|#define sg_dma_len(sg) ((sg)-&gt;length)
DECL|macro|pci_map_single
mdefine_line|#define pci_map_single(pdev, buffer, bufflen, direction) &bslash;&n;&t;(VIRT_TO_BUS(buffer))
DECL|macro|pci_unmap_single
mdefine_line|#define pci_unmap_single(pdev, buffer, buflen, direction)
macro_line|#endif
multiline_comment|/*********************** Transaction Access Wrappers **************************/
r_static
id|__inline
r_void
id|ahc_set_transaction_status
c_func
(paren
r_struct
id|scb
op_star
comma
r_uint32
)paren
suffix:semicolon
r_static
id|__inline
DECL|function|ahc_set_transaction_status
r_void
id|ahc_set_transaction_status
c_func
(paren
r_struct
id|scb
op_star
id|scb
comma
r_uint32
id|status
)paren
(brace
id|scb-&gt;io_ctx-&gt;result
op_and_assign
op_complement
(paren
id|CAM_STATUS_MASK
op_lshift
l_int|16
)paren
suffix:semicolon
id|scb-&gt;io_ctx-&gt;result
op_or_assign
id|status
op_lshift
l_int|16
suffix:semicolon
)brace
r_static
id|__inline
r_void
id|ahc_set_scsi_status
c_func
(paren
r_struct
id|scb
op_star
comma
r_uint32
)paren
suffix:semicolon
r_static
id|__inline
DECL|function|ahc_set_scsi_status
r_void
id|ahc_set_scsi_status
c_func
(paren
r_struct
id|scb
op_star
id|scb
comma
r_uint32
id|status
)paren
(brace
id|scb-&gt;io_ctx-&gt;result
op_and_assign
op_complement
l_int|0xFFFF
suffix:semicolon
id|scb-&gt;io_ctx-&gt;result
op_or_assign
id|status
suffix:semicolon
)brace
r_static
id|__inline
r_uint32
id|ahc_get_transaction_status
c_func
(paren
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_static
id|__inline
DECL|function|ahc_get_transaction_status
r_uint32
id|ahc_get_transaction_status
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
(brace
r_return
(paren
(paren
id|scb-&gt;io_ctx-&gt;result
op_rshift
l_int|16
)paren
op_amp
id|CAM_STATUS_MASK
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_uint32
id|ahc_get_scsi_status
c_func
(paren
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_static
id|__inline
DECL|function|ahc_get_scsi_status
r_uint32
id|ahc_get_scsi_status
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
(brace
r_return
(paren
id|scb-&gt;io_ctx-&gt;result
op_amp
l_int|0xFFFF
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
id|ahc_set_transaction_tag
c_func
(paren
r_struct
id|scb
op_star
comma
r_int
comma
id|u_int
)paren
suffix:semicolon
r_static
id|__inline
DECL|function|ahc_set_transaction_tag
r_void
id|ahc_set_transaction_tag
c_func
(paren
r_struct
id|scb
op_star
id|scb
comma
r_int
id|enabled
comma
id|u_int
id|type
)paren
(brace
multiline_comment|/*&n;&t; * Nothing to do for linux as the incoming transaction&n;&t; * has no concept of tag/non tagged, etc.&n;&t; */
)brace
r_static
id|__inline
id|u_long
id|ahc_get_transfer_length
c_func
(paren
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_static
id|__inline
DECL|function|ahc_get_transfer_length
id|u_long
id|ahc_get_transfer_length
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
(brace
r_return
(paren
id|scb-&gt;platform_data-&gt;xfer_len
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_int
id|ahc_get_transfer_dir
c_func
(paren
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_static
id|__inline
DECL|function|ahc_get_transfer_dir
r_int
id|ahc_get_transfer_dir
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
(brace
macro_line|#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,3,40)
r_return
(paren
id|scb-&gt;io_ctx-&gt;sc_data_direction
)paren
suffix:semicolon
macro_line|#else
r_if
c_cond
(paren
id|scb-&gt;io_ctx-&gt;bufflen
op_eq
l_int|0
)paren
r_return
(paren
id|CAM_DIR_NONE
)paren
suffix:semicolon
r_switch
c_cond
(paren
id|scb-&gt;io_ctx-&gt;cmnd
(braket
l_int|0
)braket
)paren
(brace
r_case
l_int|0x08
suffix:colon
multiline_comment|/* READ(6)  */
r_case
l_int|0x28
suffix:colon
multiline_comment|/* READ(10) */
r_case
l_int|0xA8
suffix:colon
multiline_comment|/* READ(12) */
r_return
(paren
id|CAM_DIR_IN
)paren
suffix:semicolon
r_case
l_int|0x0A
suffix:colon
multiline_comment|/* WRITE(6)  */
r_case
l_int|0x2A
suffix:colon
multiline_comment|/* WRITE(10) */
r_case
l_int|0xAA
suffix:colon
multiline_comment|/* WRITE(12) */
r_return
(paren
id|CAM_DIR_OUT
)paren
suffix:semicolon
r_default
suffix:colon
r_return
(paren
id|CAM_DIR_NONE
)paren
suffix:semicolon
)brace
macro_line|#endif
)brace
r_static
id|__inline
r_void
id|ahc_set_residual
c_func
(paren
r_struct
id|scb
op_star
comma
id|u_long
)paren
suffix:semicolon
r_static
id|__inline
DECL|function|ahc_set_residual
r_void
id|ahc_set_residual
c_func
(paren
r_struct
id|scb
op_star
id|scb
comma
id|u_long
id|resid
)paren
(brace
macro_line|#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,3,0)
id|scb-&gt;io_ctx-&gt;resid
op_assign
id|resid
suffix:semicolon
macro_line|#else
id|scb-&gt;platform_data-&gt;resid
op_assign
id|resid
suffix:semicolon
macro_line|#endif
)brace
r_static
id|__inline
r_void
id|ahc_set_sense_residual
c_func
(paren
r_struct
id|scb
op_star
comma
id|u_long
)paren
suffix:semicolon
r_static
id|__inline
DECL|function|ahc_set_sense_residual
r_void
id|ahc_set_sense_residual
c_func
(paren
r_struct
id|scb
op_star
id|scb
comma
id|u_long
id|resid
)paren
(brace
multiline_comment|/* This can&squot;t be reported in Linux */
)brace
r_static
id|__inline
id|u_long
id|ahc_get_residual
c_func
(paren
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_static
id|__inline
DECL|function|ahc_get_residual
id|u_long
id|ahc_get_residual
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
(brace
macro_line|#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,3,0)
r_return
(paren
id|scb-&gt;io_ctx-&gt;resid
)paren
suffix:semicolon
macro_line|#else
r_return
(paren
id|scb-&gt;platform_data-&gt;resid
)paren
suffix:semicolon
macro_line|#endif
)brace
r_static
id|__inline
r_int
id|ahc_perform_autosense
c_func
(paren
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_static
id|__inline
DECL|function|ahc_perform_autosense
r_int
id|ahc_perform_autosense
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
(brace
multiline_comment|/*&n;&t; * We always perform autosense in Linux.&n;&t; * On other platforms this is set on a&n;&t; * per-transaction basis.&n;&t; */
r_return
(paren
l_int|1
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_uint32
DECL|function|ahc_get_sense_bufsize
id|ahc_get_sense_bufsize
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_struct
id|scb
op_star
id|scb
)paren
(brace
r_return
(paren
r_sizeof
(paren
r_struct
id|scsi_sense_data
)paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
id|ahc_notify_xfer_settings_change
c_func
(paren
r_struct
id|ahc_softc
op_star
comma
r_struct
id|ahc_devinfo
op_star
)paren
suffix:semicolon
r_static
id|__inline
r_void
DECL|function|ahc_notify_xfer_settings_change
id|ahc_notify_xfer_settings_change
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_struct
id|ahc_devinfo
op_star
id|devinfo
)paren
(brace
multiline_comment|/* Nothing to do here for linux */
)brace
r_static
id|__inline
r_void
id|ahc_platform_scb_free
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_struct
id|scb
op_star
id|scb
)paren
suffix:semicolon
r_static
id|__inline
r_void
DECL|function|ahc_platform_scb_free
id|ahc_platform_scb_free
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_struct
id|scb
op_star
id|scb
)paren
(brace
id|ahc-&gt;flags
op_and_assign
op_complement
id|AHC_RESOURCE_SHORTAGE
suffix:semicolon
)brace
r_int
id|ahc_platform_alloc
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_void
op_star
id|platform_arg
)paren
suffix:semicolon
r_void
id|ahc_platform_free
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
)paren
suffix:semicolon
r_void
id|ahc_platform_freeze_devq
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_struct
id|scb
op_star
id|scb
)paren
suffix:semicolon
r_static
id|__inline
r_void
id|ahc_freeze_scb
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
suffix:semicolon
r_static
id|__inline
r_void
DECL|function|ahc_freeze_scb
id|ahc_freeze_scb
c_func
(paren
r_struct
id|scb
op_star
id|scb
)paren
(brace
multiline_comment|/* Noting to do here for linux */
)brace
r_void
id|ahc_platform_set_tags
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_struct
id|ahc_devinfo
op_star
id|devinfo
comma
r_int
id|enable
)paren
suffix:semicolon
r_int
id|ahc_platform_abort_scbs
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
comma
r_int
id|target
comma
r_char
id|channel
comma
r_int
id|lun
comma
id|u_int
id|tag
comma
id|role_t
id|role
comma
r_uint32
id|status
)paren
suffix:semicolon
r_void
id|aic7xxx_isr
c_func
(paren
r_int
id|irq
comma
r_void
op_star
id|dev_id
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
r_void
id|ahc_platform_flushwork
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
)paren
suffix:semicolon
r_int
id|ahc_softc_comp
c_func
(paren
r_struct
id|ahc_softc
op_star
comma
r_struct
id|ahc_softc
op_star
)paren
suffix:semicolon
r_void
id|ahc_done
c_func
(paren
r_struct
id|ahc_softc
op_star
comma
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_void
id|ahc_send_async
c_func
(paren
r_struct
id|ahc_softc
op_star
comma
r_char
id|channel
comma
id|u_int
id|target
comma
id|u_int
id|lun
comma
id|ac_code
)paren
suffix:semicolon
r_void
id|ahc_print_path
c_func
(paren
r_struct
id|ahc_softc
op_star
comma
r_struct
id|scb
op_star
)paren
suffix:semicolon
r_void
id|ahc_platform_dump_card_state
c_func
(paren
r_struct
id|ahc_softc
op_star
id|ahc
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_PCI
DECL|macro|AHC_PCI_CONFIG
mdefine_line|#define AHC_PCI_CONFIG 1
macro_line|#else
DECL|macro|AHC_PCI_CONFIG
mdefine_line|#define AHC_PCI_CONFIG 0
macro_line|#endif
DECL|macro|bootverbose
mdefine_line|#define bootverbose aic7xxx_verbose
r_extern
r_int
id|aic7xxx_verbose
suffix:semicolon
macro_line|#endif /* _AIC7XXX_LINUX_H_ */
eof
