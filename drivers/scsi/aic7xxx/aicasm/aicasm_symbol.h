multiline_comment|/*&n; * Aic7xxx SCSI host adapter firmware asssembler symbol table definitions&n; *&n; * Copyright (c) 1997 Justin T. Gibbs.&n; * All rights reserved.&n; *&n; * Redistribution and use in source and binary forms, with or without&n; * modification, are permitted provided that the following conditions&n; * are met:&n; * 1. Redistributions of source code must retain the above copyright&n; *    notice, this list of conditions, and the following disclaimer,&n; *    without modification.&n; * 2. The name of the author may not be used to endorse or promote products&n; *    derived from this software without specific prior written permission.&n; *&n; * Alternatively, this software may be distributed under the terms of the&n; * GNU Public License (&quot;GPL&quot;).&n; *&n; * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS&squot;&squot; AND&n; * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE&n; * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE&n; * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR&n; * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL&n; * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS&n; * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&n; * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT&n; * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY&n; * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF&n; * SUCH DAMAGE.&n; *&n; * $Id: //depot/src/aic7xxx/aicasm/aicasm_symbol.h#4 $&n; *&n; * $FreeBSD: src/sys/dev/aic7xxx/aicasm/aicasm_symbol.h,v 1.11 2000/09/22 22:19:55 gibbs Exp $&n; */
macro_line|#ifdef __linux__
macro_line|#include &quot;../queue.h&quot;
macro_line|#else
macro_line|#include &lt;sys/queue.h&gt;
macro_line|#endif
r_typedef
r_enum
(brace
DECL|enumerator|UNINITIALIZED
id|UNINITIALIZED
comma
DECL|enumerator|REGISTER
id|REGISTER
comma
DECL|enumerator|ALIAS
id|ALIAS
comma
DECL|enumerator|SCBLOC
id|SCBLOC
comma
DECL|enumerator|SRAMLOC
id|SRAMLOC
comma
DECL|enumerator|MASK
id|MASK
comma
DECL|enumerator|BIT
id|BIT
comma
DECL|enumerator|CONST
id|CONST
comma
DECL|enumerator|DOWNLOAD_CONST
id|DOWNLOAD_CONST
comma
DECL|enumerator|LABEL
id|LABEL
comma
DECL|enumerator|CONDITIONAL
id|CONDITIONAL
DECL|typedef|symtype
)brace
id|symtype
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|RO
id|RO
op_assign
l_int|0x01
comma
DECL|enumerator|WO
id|WO
op_assign
l_int|0x02
comma
DECL|enumerator|RW
id|RW
op_assign
l_int|0x03
DECL|typedef|amode_t
)brace
id|amode_t
suffix:semicolon
DECL|struct|reg_info
r_struct
id|reg_info
(brace
DECL|member|address
id|u_int8_t
id|address
suffix:semicolon
DECL|member|size
r_int
id|size
suffix:semicolon
DECL|member|mode
id|amode_t
id|mode
suffix:semicolon
DECL|member|valid_bitmask
id|u_int8_t
id|valid_bitmask
suffix:semicolon
DECL|member|typecheck_masks
r_int
id|typecheck_masks
suffix:semicolon
)brace
suffix:semicolon
DECL|typedef|symlist_t
r_typedef
id|SLIST_HEAD
c_func
(paren
id|symlist
comma
id|symbol_node
)paren
id|symlist_t
suffix:semicolon
DECL|struct|mask_info
r_struct
id|mask_info
(brace
DECL|member|symrefs
id|symlist_t
id|symrefs
suffix:semicolon
DECL|member|mask
id|u_int8_t
id|mask
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|const_info
r_struct
id|const_info
(brace
DECL|member|value
id|u_int8_t
id|value
suffix:semicolon
DECL|member|define
r_int
id|define
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|alias_info
r_struct
id|alias_info
(brace
DECL|member|parent
r_struct
id|symbol
op_star
id|parent
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|label_info
r_struct
id|label_info
(brace
DECL|member|address
r_int
id|address
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|cond_info
r_struct
id|cond_info
(brace
DECL|member|func_num
r_int
id|func_num
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|expression_info
r_typedef
r_struct
id|expression_info
(brace
DECL|member|referenced_syms
id|symlist_t
id|referenced_syms
suffix:semicolon
DECL|member|value
r_int
id|value
suffix:semicolon
DECL|typedef|expression_t
)brace
id|expression_t
suffix:semicolon
DECL|struct|symbol
r_typedef
r_struct
id|symbol
(brace
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|type
id|symtype
id|type
suffix:semicolon
r_union
(brace
DECL|member|rinfo
r_struct
id|reg_info
op_star
id|rinfo
suffix:semicolon
DECL|member|minfo
r_struct
id|mask_info
op_star
id|minfo
suffix:semicolon
DECL|member|cinfo
r_struct
id|const_info
op_star
id|cinfo
suffix:semicolon
DECL|member|ainfo
r_struct
id|alias_info
op_star
id|ainfo
suffix:semicolon
DECL|member|linfo
r_struct
id|label_info
op_star
id|linfo
suffix:semicolon
DECL|member|condinfo
r_struct
id|cond_info
op_star
id|condinfo
suffix:semicolon
DECL|member|info
)brace
id|info
suffix:semicolon
DECL|typedef|symbol_t
)brace
id|symbol_t
suffix:semicolon
DECL|struct|symbol_ref
r_typedef
r_struct
id|symbol_ref
(brace
DECL|member|symbol
id|symbol_t
op_star
id|symbol
suffix:semicolon
DECL|member|offset
r_int
id|offset
suffix:semicolon
DECL|typedef|symbol_ref_t
)brace
id|symbol_ref_t
suffix:semicolon
DECL|struct|symbol_node
r_typedef
r_struct
id|symbol_node
(brace
id|SLIST_ENTRY
c_func
(paren
id|symbol_node
)paren
id|links
suffix:semicolon
DECL|member|symbol
id|symbol_t
op_star
id|symbol
suffix:semicolon
DECL|typedef|symbol_node_t
)brace
id|symbol_node_t
suffix:semicolon
DECL|struct|critical_section
r_typedef
r_struct
id|critical_section
(brace
id|TAILQ_ENTRY
c_func
(paren
id|critical_section
)paren
id|links
suffix:semicolon
DECL|member|begin_addr
r_int
id|begin_addr
suffix:semicolon
DECL|member|end_addr
r_int
id|end_addr
suffix:semicolon
DECL|typedef|critical_section_t
)brace
id|critical_section_t
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|SCOPE_ROOT
id|SCOPE_ROOT
comma
DECL|enumerator|SCOPE_IF
id|SCOPE_IF
comma
DECL|enumerator|SCOPE_ELSE_IF
id|SCOPE_ELSE_IF
comma
DECL|enumerator|SCOPE_ELSE
id|SCOPE_ELSE
DECL|typedef|scope_type
)brace
id|scope_type
suffix:semicolon
DECL|struct|patch_info
r_typedef
r_struct
id|patch_info
(brace
DECL|member|skip_patch
r_int
id|skip_patch
suffix:semicolon
DECL|member|skip_instr
r_int
id|skip_instr
suffix:semicolon
DECL|typedef|patch_info_t
)brace
id|patch_info_t
suffix:semicolon
DECL|struct|scope
r_typedef
r_struct
id|scope
(brace
id|SLIST_ENTRY
c_func
(paren
id|scope
)paren
id|scope_stack_links
suffix:semicolon
id|TAILQ_ENTRY
c_func
(paren
id|scope
)paren
id|scope_links
suffix:semicolon
id|TAILQ_HEAD
c_func
(paren
comma
id|scope
)paren
id|inner_scope
suffix:semicolon
DECL|member|type
id|scope_type
id|type
suffix:semicolon
DECL|member|inner_scope_patches
r_int
id|inner_scope_patches
suffix:semicolon
DECL|member|begin_addr
r_int
id|begin_addr
suffix:semicolon
DECL|member|end_addr
r_int
id|end_addr
suffix:semicolon
DECL|member|patches
id|patch_info_t
id|patches
(braket
l_int|2
)braket
suffix:semicolon
DECL|member|func_num
r_int
id|func_num
suffix:semicolon
DECL|typedef|scope_t
)brace
id|scope_t
suffix:semicolon
id|TAILQ_HEAD
c_func
(paren
id|cs_tailq
comma
id|critical_section
)paren
suffix:semicolon
id|SLIST_HEAD
c_func
(paren
id|scope_list
comma
id|scope
)paren
suffix:semicolon
id|TAILQ_HEAD
c_func
(paren
id|scope_tailq
comma
id|scope
)paren
suffix:semicolon
r_void
id|symbol_delete
id|__P
c_func
(paren
(paren
id|symbol_t
op_star
id|symbol
)paren
)paren
suffix:semicolon
r_void
id|symtable_open
id|__P
c_func
(paren
(paren
r_void
)paren
)paren
suffix:semicolon
r_void
id|symtable_close
id|__P
c_func
(paren
(paren
r_void
)paren
)paren
suffix:semicolon
id|symbol_t
op_star
id|symtable_get
id|__P
c_func
(paren
(paren
r_char
op_star
id|name
)paren
)paren
suffix:semicolon
id|symbol_node_t
op_star
id|symlist_search
id|__P
c_func
(paren
(paren
id|symlist_t
op_star
id|symlist
comma
r_char
op_star
id|symname
)paren
)paren
suffix:semicolon
r_void
id|symlist_add
id|__P
c_func
(paren
(paren
id|symlist_t
op_star
id|symlist
comma
id|symbol_t
op_star
id|symbol
comma
r_int
id|how
)paren
)paren
suffix:semicolon
DECL|macro|SYMLIST_INSERT_HEAD
mdefine_line|#define SYMLIST_INSERT_HEAD&t;0x00
DECL|macro|SYMLIST_SORT
mdefine_line|#define SYMLIST_SORT&t;&t;0x01
r_void
id|symlist_free
id|__P
c_func
(paren
(paren
id|symlist_t
op_star
id|symlist
)paren
)paren
suffix:semicolon
r_void
id|symlist_merge
id|__P
c_func
(paren
(paren
id|symlist_t
op_star
id|symlist_dest
comma
id|symlist_t
op_star
id|symlist_src1
comma
id|symlist_t
op_star
id|symlist_src2
)paren
)paren
suffix:semicolon
r_void
id|symtable_dump
id|__P
c_func
(paren
(paren
id|FILE
op_star
id|ofile
)paren
)paren
suffix:semicolon
eof
