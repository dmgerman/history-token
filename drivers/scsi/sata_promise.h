multiline_comment|/*&n; *  sata_promise.h - Promise SATA common definitions and inline funcs&n; *&n; *  Copyright 2003-2004 Red Hat, Inc.&n; *&n; *  The contents of this file are subject to the Open&n; *  Software License version 1.1 that can be found at&n; *  http://www.opensource.org/licenses/osl-1.1.txt and is included herein&n; *  by reference.&n; *&n; *  Alternatively, the contents of this file may be used under the terms&n; *  of the GNU General Public License version 2 (the &quot;GPL&quot;) as distributed&n; *  in the kernel source COPYING file, in which case the provisions of&n; *  the GPL are applicable instead of the above.  If you wish to allow&n; *  the use of your version of this file only under the terms of the&n; *  GPL and not to allow others to use your version of this file under&n; *  the OSL, indicate your decision by deleting the provisions above and&n; *  replace them with the notice and other provisions required by the GPL.&n; *  If you do not delete the provisions above, a recipient may use your&n; *  version of this file under either the OSL or the GPL.&n; *&n; */
macro_line|#ifndef __SATA_PROMISE_H__
DECL|macro|__SATA_PROMISE_H__
mdefine_line|#define __SATA_PROMISE_H__
macro_line|#include &lt;linux/ata.h&gt;
DECL|enum|pdc_packet_bits
r_enum
id|pdc_packet_bits
(brace
DECL|enumerator|PDC_PKT_READ
id|PDC_PKT_READ
op_assign
(paren
l_int|1
op_lshift
l_int|2
)paren
comma
DECL|enumerator|PDC_PKT_NODATA
id|PDC_PKT_NODATA
op_assign
(paren
l_int|1
op_lshift
l_int|3
)paren
comma
DECL|enumerator|PDC_PKT_SIZEMASK
id|PDC_PKT_SIZEMASK
op_assign
(paren
l_int|1
op_lshift
l_int|7
)paren
op_or
(paren
l_int|1
op_lshift
l_int|6
)paren
op_or
(paren
l_int|1
op_lshift
l_int|5
)paren
comma
DECL|enumerator|PDC_PKT_CLEAR_BSY
id|PDC_PKT_CLEAR_BSY
op_assign
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
DECL|enumerator|PDC_PKT_WAIT_DRDY
id|PDC_PKT_WAIT_DRDY
op_assign
(paren
l_int|1
op_lshift
l_int|3
)paren
op_or
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
DECL|enumerator|PDC_LAST_REG
id|PDC_LAST_REG
op_assign
(paren
l_int|1
op_lshift
l_int|3
)paren
comma
DECL|enumerator|PDC_REG_DEVCTL
id|PDC_REG_DEVCTL
op_assign
(paren
l_int|1
op_lshift
l_int|3
)paren
op_or
(paren
l_int|1
op_lshift
l_int|2
)paren
op_or
(paren
l_int|1
op_lshift
l_int|1
)paren
comma
)brace
suffix:semicolon
DECL|function|pdc_pkt_header
r_static
r_inline
r_int
r_int
id|pdc_pkt_header
c_func
(paren
r_struct
id|ata_taskfile
op_star
id|tf
comma
id|dma_addr_t
id|sg_table
comma
r_int
r_int
id|devno
comma
id|u8
op_star
id|buf
)paren
(brace
id|u8
id|dev_reg
suffix:semicolon
id|u32
op_star
id|buf32
op_assign
(paren
id|u32
op_star
)paren
id|buf
suffix:semicolon
multiline_comment|/* set control bits (byte 0), zero delay seq id (byte 3),&n;&t; * and seq id (byte 2)&n;&t; */
r_switch
c_cond
(paren
id|tf-&gt;protocol
)paren
(brace
r_case
id|ATA_PROT_DMA
suffix:colon
r_if
c_cond
(paren
op_logical_neg
(paren
id|tf-&gt;flags
op_amp
id|ATA_TFLAG_WRITE
)paren
)paren
id|buf32
(braket
l_int|0
)braket
op_assign
id|cpu_to_le32
c_func
(paren
id|PDC_PKT_READ
)paren
suffix:semicolon
r_else
id|buf32
(braket
l_int|0
)braket
op_assign
l_int|0
suffix:semicolon
r_break
suffix:semicolon
r_case
id|ATA_PROT_NODATA
suffix:colon
id|buf32
(braket
l_int|0
)braket
op_assign
id|cpu_to_le32
c_func
(paren
id|PDC_PKT_NODATA
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|BUG
c_func
(paren
)paren
suffix:semicolon
r_break
suffix:semicolon
)brace
id|buf32
(braket
l_int|1
)braket
op_assign
id|cpu_to_le32
c_func
(paren
id|sg_table
)paren
suffix:semicolon
multiline_comment|/* S/G table addr */
id|buf32
(braket
l_int|2
)braket
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* no next-packet */
r_if
c_cond
(paren
id|devno
op_eq
l_int|0
)paren
id|dev_reg
op_assign
id|ATA_DEVICE_OBS
suffix:semicolon
r_else
id|dev_reg
op_assign
id|ATA_DEVICE_OBS
op_or
id|ATA_DEV1
suffix:semicolon
multiline_comment|/* select device */
id|buf
(braket
l_int|12
)braket
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
op_or
id|PDC_PKT_CLEAR_BSY
op_or
id|ATA_REG_DEVICE
suffix:semicolon
id|buf
(braket
l_int|13
)braket
op_assign
id|dev_reg
suffix:semicolon
multiline_comment|/* device control register */
id|buf
(braket
l_int|14
)braket
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
op_or
id|PDC_REG_DEVCTL
suffix:semicolon
id|buf
(braket
l_int|15
)braket
op_assign
id|tf-&gt;ctl
suffix:semicolon
r_return
l_int|16
suffix:semicolon
multiline_comment|/* offset of next byte */
)brace
DECL|function|pdc_pkt_footer
r_static
r_inline
r_int
r_int
id|pdc_pkt_footer
c_func
(paren
r_struct
id|ata_taskfile
op_star
id|tf
comma
id|u8
op_star
id|buf
comma
r_int
r_int
id|i
)paren
(brace
r_if
c_cond
(paren
id|tf-&gt;flags
op_amp
id|ATA_TFLAG_DEVICE
)paren
(brace
id|buf
(braket
id|i
op_increment
)braket
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
op_or
id|ATA_REG_DEVICE
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;device
suffix:semicolon
)brace
multiline_comment|/* and finally the command itself; also includes end-of-pkt marker */
id|buf
(braket
id|i
op_increment
)braket
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
op_or
id|PDC_LAST_REG
op_or
id|ATA_REG_CMD
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;command
suffix:semicolon
r_return
id|i
suffix:semicolon
)brace
DECL|function|pdc_prep_lba28
r_static
r_inline
r_int
r_int
id|pdc_prep_lba28
c_func
(paren
r_struct
id|ata_taskfile
op_star
id|tf
comma
id|u8
op_star
id|buf
comma
r_int
r_int
id|i
)paren
(brace
multiline_comment|/* the &quot;(1 &lt;&lt; 5)&quot; should be read &quot;(count &lt;&lt; 5)&quot; */
multiline_comment|/* ATA command block registers */
id|buf
(braket
id|i
op_increment
)braket
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
op_or
id|ATA_REG_FEATURE
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;feature
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
op_or
id|ATA_REG_NSECT
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;nsect
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
op_or
id|ATA_REG_LBAL
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;lbal
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
op_or
id|ATA_REG_LBAM
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;lbam
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
op_or
id|ATA_REG_LBAH
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;lbah
suffix:semicolon
r_return
id|i
suffix:semicolon
)brace
DECL|function|pdc_prep_lba48
r_static
r_inline
r_int
r_int
id|pdc_prep_lba48
c_func
(paren
r_struct
id|ata_taskfile
op_star
id|tf
comma
id|u8
op_star
id|buf
comma
r_int
r_int
id|i
)paren
(brace
multiline_comment|/* the &quot;(2 &lt;&lt; 5)&quot; should be read &quot;(count &lt;&lt; 5)&quot; */
multiline_comment|/* ATA command block registers */
id|buf
(braket
id|i
op_increment
)braket
op_assign
(paren
l_int|2
op_lshift
l_int|5
)paren
op_or
id|ATA_REG_FEATURE
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;hob_feature
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;feature
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
(paren
l_int|2
op_lshift
l_int|5
)paren
op_or
id|ATA_REG_NSECT
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;hob_nsect
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;nsect
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
(paren
l_int|2
op_lshift
l_int|5
)paren
op_or
id|ATA_REG_LBAL
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;hob_lbal
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;lbal
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
(paren
l_int|2
op_lshift
l_int|5
)paren
op_or
id|ATA_REG_LBAM
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;hob_lbam
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;lbam
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
(paren
l_int|2
op_lshift
l_int|5
)paren
op_or
id|ATA_REG_LBAH
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;hob_lbah
suffix:semicolon
id|buf
(braket
id|i
op_increment
)braket
op_assign
id|tf-&gt;lbah
suffix:semicolon
r_return
id|i
suffix:semicolon
)brace
macro_line|#endif /* __SATA_PROMISE_H__ */
eof
