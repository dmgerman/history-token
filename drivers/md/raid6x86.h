macro_line|#ident &quot;$Id: raid6x86.h,v 1.3 2002/12/12 22:41:27 hpa Exp $&quot;
multiline_comment|/* ----------------------------------------------------------------------- *&n; *&n; *   Copyright 2002-2004 H. Peter Anvin - All Rights Reserved&n; *&n; *   This program is free software; you can redistribute it and/or modify&n; *   it under the terms of the GNU General Public License as published by&n; *   the Free Software Foundation, Inc., 53 Temple Place Ste 330,&n; *   Bostom MA 02111-1307, USA; either version 2 of the License, or&n; *   (at your option) any later version; incorporated herein by reference.&n; *&n; * ----------------------------------------------------------------------- */
multiline_comment|/*&n; * raid6x86.h&n; *&n; * Definitions common to x86 and x86-64 RAID-6 code only&n; */
macro_line|#ifndef LINUX_RAID_RAID6X86_H
DECL|macro|LINUX_RAID_RAID6X86_H
mdefine_line|#define LINUX_RAID_RAID6X86_H
macro_line|#if defined(__i386__) || defined(__x86_64__)
macro_line|#ifdef __x86_64__
r_typedef
r_struct
(brace
DECL|member|fsave
r_int
r_int
id|fsave
(braket
l_int|27
)braket
suffix:semicolon
DECL|member|cr0
r_int
r_int
id|cr0
suffix:semicolon
DECL|typedef|raid6_mmx_save_t
)brace
id|raid6_mmx_save_t
id|__attribute__
c_func
(paren
(paren
id|aligned
c_func
(paren
l_int|16
)paren
)paren
)paren
suffix:semicolon
multiline_comment|/* N.B.: For SSE we only save %xmm0-%xmm7 even for x86-64, since&n;   the code doesn&squot;t know about the additional x86-64 registers */
r_typedef
r_struct
(brace
DECL|member|sarea
r_int
r_int
id|sarea
(braket
l_int|8
op_star
l_int|4
op_plus
l_int|2
)braket
suffix:semicolon
DECL|member|cr0
r_int
r_int
id|cr0
suffix:semicolon
DECL|typedef|raid6_sse_save_t
)brace
id|raid6_sse_save_t
id|__attribute__
c_func
(paren
(paren
id|aligned
c_func
(paren
l_int|16
)paren
)paren
)paren
suffix:semicolon
multiline_comment|/* This is for x86-64-specific code which uses all 16 XMM registers */
r_typedef
r_struct
(brace
DECL|member|sarea
r_int
r_int
id|sarea
(braket
l_int|16
op_star
l_int|4
op_plus
l_int|2
)braket
suffix:semicolon
DECL|member|cr0
r_int
r_int
id|cr0
suffix:semicolon
DECL|typedef|raid6_sse16_save_t
)brace
id|raid6_sse16_save_t
id|__attribute__
c_func
(paren
(paren
id|aligned
c_func
(paren
l_int|16
)paren
)paren
)paren
suffix:semicolon
multiline_comment|/* On x86-64 the stack *SHOULD* be 16-byte aligned, but currently this&n;   is buggy in the kernel and it&squot;s only 8-byte aligned in places, so&n;   we need to do this anyway.  Sigh. */
DECL|macro|SAREA
mdefine_line|#define SAREA(x) ((unsigned int *)((((unsigned long)&amp;(x)-&gt;sarea)+15) &amp; ~15))
macro_line|#else /* __i386__ */
r_typedef
r_struct
(brace
DECL|member|fsave
r_int
r_int
id|fsave
(braket
l_int|27
)braket
suffix:semicolon
DECL|member|cr0
r_int
r_int
id|cr0
suffix:semicolon
DECL|typedef|raid6_mmx_save_t
)brace
id|raid6_mmx_save_t
suffix:semicolon
multiline_comment|/* On i386, the stack is only 8-byte aligned, but SSE requires 16-byte&n;   alignment.  The +3 is so we have the slack space to manually align&n;   a properly-sized area correctly.  */
r_typedef
r_struct
(brace
DECL|member|sarea
r_int
r_int
id|sarea
(braket
l_int|8
op_star
l_int|4
op_plus
l_int|3
)braket
suffix:semicolon
DECL|member|cr0
r_int
r_int
id|cr0
suffix:semicolon
DECL|typedef|raid6_sse_save_t
)brace
id|raid6_sse_save_t
suffix:semicolon
multiline_comment|/* Find the 16-byte aligned save area */
DECL|macro|SAREA
mdefine_line|#define SAREA(x) ((unsigned int *)((((unsigned long)&amp;(x)-&gt;sarea)+15) &amp; ~15))
macro_line|#endif
macro_line|#ifdef __KERNEL__ /* Real code */
multiline_comment|/* Note: %cr0 is 32 bits on i386 and 64 bits on x86-64 */
DECL|function|raid6_get_fpu
r_static
r_inline
r_int
r_int
id|raid6_get_fpu
c_func
(paren
r_void
)paren
(brace
r_int
r_int
id|cr0
suffix:semicolon
id|preempt_disable
c_func
(paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;mov %%cr0,%0 ; clts&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|cr0
)paren
)paren
suffix:semicolon
r_return
id|cr0
suffix:semicolon
)brace
DECL|function|raid6_put_fpu
r_static
r_inline
r_void
id|raid6_put_fpu
c_func
(paren
r_int
r_int
id|cr0
)paren
(brace
id|asm
r_volatile
(paren
l_string|&quot;mov %0,%%cr0&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|cr0
)paren
)paren
suffix:semicolon
id|preempt_enable
c_func
(paren
)paren
suffix:semicolon
)brace
macro_line|#else /* Dummy code for user space testing */
DECL|function|raid6_get_fpu
r_static
r_inline
r_int
r_int
id|raid6_get_fpu
c_func
(paren
r_void
)paren
(brace
r_return
l_int|0xf00ba6
suffix:semicolon
)brace
DECL|function|raid6_put_fpu
r_static
r_inline
r_void
id|raid6_put_fpu
c_func
(paren
r_int
r_int
id|cr0
)paren
(brace
(paren
r_void
)paren
id|cr0
suffix:semicolon
)brace
macro_line|#endif
DECL|function|raid6_before_mmx
r_static
r_inline
r_void
id|raid6_before_mmx
c_func
(paren
id|raid6_mmx_save_t
op_star
id|s
)paren
(brace
id|s-&gt;cr0
op_assign
id|raid6_get_fpu
c_func
(paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;fsave %0 ; fwait&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|s-&gt;fsave
(braket
l_int|0
)braket
)paren
)paren
suffix:semicolon
)brace
DECL|function|raid6_after_mmx
r_static
r_inline
r_void
id|raid6_after_mmx
c_func
(paren
id|raid6_mmx_save_t
op_star
id|s
)paren
(brace
id|asm
r_volatile
(paren
l_string|&quot;frstor %0&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|s-&gt;fsave
(braket
l_int|0
)braket
)paren
)paren
suffix:semicolon
id|raid6_put_fpu
c_func
(paren
id|s-&gt;cr0
)paren
suffix:semicolon
)brace
DECL|function|raid6_before_sse
r_static
r_inline
r_void
id|raid6_before_sse
c_func
(paren
id|raid6_sse_save_t
op_star
id|s
)paren
(brace
r_int
r_int
op_star
id|rsa
op_assign
id|SAREA
c_func
(paren
id|s
)paren
suffix:semicolon
id|s-&gt;cr0
op_assign
id|raid6_get_fpu
c_func
(paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movaps %%xmm0,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|0
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movaps %%xmm1,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|4
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movaps %%xmm2,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|8
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movaps %%xmm3,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|12
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movaps %%xmm4,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|16
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movaps %%xmm5,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|20
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movaps %%xmm6,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|24
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movaps %%xmm7,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|28
)braket
)paren
)paren
suffix:semicolon
)brace
DECL|function|raid6_after_sse
r_static
r_inline
r_void
id|raid6_after_sse
c_func
(paren
id|raid6_sse_save_t
op_star
id|s
)paren
(brace
r_int
r_int
op_star
id|rsa
op_assign
id|SAREA
c_func
(paren
id|s
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movaps %0,%%xmm0&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|0
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movaps %0,%%xmm1&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|4
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movaps %0,%%xmm2&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|8
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movaps %0,%%xmm3&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|12
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movaps %0,%%xmm4&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|16
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movaps %0,%%xmm5&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|20
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movaps %0,%%xmm6&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|24
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movaps %0,%%xmm7&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|28
)braket
)paren
)paren
suffix:semicolon
id|raid6_put_fpu
c_func
(paren
id|s-&gt;cr0
)paren
suffix:semicolon
)brace
DECL|function|raid6_before_sse2
r_static
r_inline
r_void
id|raid6_before_sse2
c_func
(paren
id|raid6_sse_save_t
op_star
id|s
)paren
(brace
r_int
r_int
op_star
id|rsa
op_assign
id|SAREA
c_func
(paren
id|s
)paren
suffix:semicolon
id|s-&gt;cr0
op_assign
id|raid6_get_fpu
c_func
(paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm0,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|0
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm1,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|4
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm2,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|8
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm3,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|12
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm4,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|16
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm5,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|20
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm6,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|24
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm7,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|28
)braket
)paren
)paren
suffix:semicolon
)brace
DECL|function|raid6_after_sse2
r_static
r_inline
r_void
id|raid6_after_sse2
c_func
(paren
id|raid6_sse_save_t
op_star
id|s
)paren
(brace
r_int
r_int
op_star
id|rsa
op_assign
id|SAREA
c_func
(paren
id|s
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm0&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|0
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm1&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|4
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm2&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|8
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm3&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|12
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm4&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|16
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm5&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|20
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm6&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|24
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm7&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|28
)braket
)paren
)paren
suffix:semicolon
id|raid6_put_fpu
c_func
(paren
id|s-&gt;cr0
)paren
suffix:semicolon
)brace
macro_line|#ifdef __x86_64__
DECL|function|raid6_before_sse16
r_static
r_inline
r_void
id|raid6_before_sse16
c_func
(paren
id|raid6_sse16_save_t
op_star
id|s
)paren
(brace
r_int
r_int
op_star
id|rsa
op_assign
id|SAREA
c_func
(paren
id|s
)paren
suffix:semicolon
id|s-&gt;cr0
op_assign
id|raid6_get_fpu
c_func
(paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm0,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|0
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm1,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|4
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm2,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|8
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm3,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|12
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm4,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|16
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm5,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|20
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm6,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|24
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm7,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|28
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm8,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|32
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm9,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|36
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm10,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|40
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm11,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|44
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm12,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|48
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm13,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|52
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm14,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|56
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %%xmm15,%0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|rsa
(braket
l_int|60
)braket
)paren
)paren
suffix:semicolon
)brace
DECL|function|raid6_after_sse16
r_static
r_inline
r_void
id|raid6_after_sse16
c_func
(paren
id|raid6_sse16_save_t
op_star
id|s
)paren
(brace
r_int
r_int
op_star
id|rsa
op_assign
id|SAREA
c_func
(paren
id|s
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm0&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|0
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm1&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|4
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm2&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|8
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm3&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|12
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm4&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|16
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm5&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|20
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm6&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|24
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm7&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|28
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm8&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|32
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm9&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|36
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm10&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|40
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm11&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|44
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm12&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|48
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm13&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|52
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm14&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|56
)braket
)paren
)paren
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;movdqa %0,%%xmm15&quot;
suffix:colon
suffix:colon
l_string|&quot;m&quot;
(paren
id|rsa
(braket
l_int|60
)braket
)paren
)paren
suffix:semicolon
id|raid6_put_fpu
c_func
(paren
id|s-&gt;cr0
)paren
suffix:semicolon
)brace
macro_line|#endif /* __x86_64__ */
multiline_comment|/* User space test hack */
macro_line|#ifndef __KERNEL__
DECL|function|cpuid_features
r_static
r_inline
r_int
id|cpuid_features
c_func
(paren
r_void
)paren
(brace
id|u32
id|eax
op_assign
l_int|1
suffix:semicolon
id|u32
id|ebx
comma
id|ecx
comma
id|edx
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;cpuid&quot;
suffix:colon
l_string|&quot;+a&quot;
(paren
id|eax
)paren
comma
l_string|&quot;=b&quot;
(paren
id|ebx
)paren
comma
l_string|&quot;=c&quot;
(paren
id|ecx
)paren
comma
l_string|&quot;=d&quot;
(paren
id|edx
)paren
)paren
suffix:semicolon
r_return
id|edx
suffix:semicolon
)brace
macro_line|#endif /* ndef __KERNEL__ */
macro_line|#endif
macro_line|#endif
eof
