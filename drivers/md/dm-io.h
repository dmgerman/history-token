multiline_comment|/*&n; * Copyright (C) 2003 Sistina Software&n; *&n; * This file is released under the GPL.&n; */
macro_line|#ifndef _DM_IO_H
DECL|macro|_DM_IO_H
mdefine_line|#define _DM_IO_H
macro_line|#include &quot;dm.h&quot;
multiline_comment|/* FIXME make this configurable */
DECL|macro|DM_MAX_IO_REGIONS
mdefine_line|#define DM_MAX_IO_REGIONS 8
DECL|struct|io_region
r_struct
id|io_region
(brace
DECL|member|bdev
r_struct
id|block_device
op_star
id|bdev
suffix:semicolon
DECL|member|sector
id|sector_t
id|sector
suffix:semicolon
DECL|member|count
id|sector_t
id|count
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|page_list
r_struct
id|page_list
(brace
DECL|member|next
r_struct
id|page_list
op_star
id|next
suffix:semicolon
DECL|member|page
r_struct
id|page
op_star
id|page
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * &squot;error&squot; is a bitset, with each bit indicating whether an error&n; * occurred doing io to the corresponding region.&n; */
DECL|typedef|io_notify_fn
r_typedef
r_void
(paren
op_star
id|io_notify_fn
)paren
(paren
r_int
r_int
id|error
comma
r_void
op_star
id|context
)paren
suffix:semicolon
multiline_comment|/*&n; * Before anyone uses the IO interface they should call&n; * dm_io_get(), specifying roughly how many pages they are&n; * expecting to perform io on concurrently.&n; *&n; * This function may block.&n; */
r_int
id|dm_io_get
c_func
(paren
r_int
r_int
id|num_pages
)paren
suffix:semicolon
r_void
id|dm_io_put
c_func
(paren
r_int
r_int
id|num_pages
)paren
suffix:semicolon
multiline_comment|/*&n; * Synchronous IO.&n; *&n; * Please ensure that the rw flag in the next two functions is&n; * either READ or WRITE, ie. we don&squot;t take READA.  Any&n; * regions with a zero count field will be ignored.&n; */
r_int
id|dm_io_sync
c_func
(paren
r_int
r_int
id|num_regions
comma
r_struct
id|io_region
op_star
id|where
comma
r_int
id|rw
comma
r_struct
id|page_list
op_star
id|pl
comma
r_int
r_int
id|offset
comma
r_int
r_int
op_star
id|error_bits
)paren
suffix:semicolon
r_int
id|dm_io_sync_bvec
c_func
(paren
r_int
r_int
id|num_regions
comma
r_struct
id|io_region
op_star
id|where
comma
r_int
id|rw
comma
r_struct
id|bio_vec
op_star
id|bvec
comma
r_int
r_int
op_star
id|error_bits
)paren
suffix:semicolon
r_int
id|dm_io_sync_vm
c_func
(paren
r_int
r_int
id|num_regions
comma
r_struct
id|io_region
op_star
id|where
comma
r_int
id|rw
comma
r_void
op_star
id|data
comma
r_int
r_int
op_star
id|error_bits
)paren
suffix:semicolon
multiline_comment|/*&n; * Aynchronous IO.&n; *&n; * The &squot;where&squot; array may be safely allocated on the stack since&n; * the function takes a copy.&n; */
r_int
id|dm_io_async
c_func
(paren
r_int
r_int
id|num_regions
comma
r_struct
id|io_region
op_star
id|where
comma
r_int
id|rw
comma
r_struct
id|page_list
op_star
id|pl
comma
r_int
r_int
id|offset
comma
id|io_notify_fn
id|fn
comma
r_void
op_star
id|context
)paren
suffix:semicolon
r_int
id|dm_io_async_bvec
c_func
(paren
r_int
r_int
id|num_regions
comma
r_struct
id|io_region
op_star
id|where
comma
r_int
id|rw
comma
r_struct
id|bio_vec
op_star
id|bvec
comma
id|io_notify_fn
id|fn
comma
r_void
op_star
id|context
)paren
suffix:semicolon
r_int
id|dm_io_async_vm
c_func
(paren
r_int
r_int
id|num_regions
comma
r_struct
id|io_region
op_star
id|where
comma
r_int
id|rw
comma
r_void
op_star
id|data
comma
id|io_notify_fn
id|fn
comma
r_void
op_star
id|context
)paren
suffix:semicolon
macro_line|#endif
eof
