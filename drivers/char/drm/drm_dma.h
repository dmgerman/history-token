multiline_comment|/* drm_dma.c -- DMA IOCTL and function support -*- linux-c -*-&n; * Created: Fri Mar 19 14:30:16 1999 by faith@valinux.com&n; *&n; * Copyright 1999, 2000 Precision Insight, Inc., Cedar Park, Texas.&n; * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.&n; * All Rights Reserved.&n; *&n; * Permission is hereby granted, free of charge, to any person obtaining a&n; * copy of this software and associated documentation files (the &quot;Software&quot;),&n; * to deal in the Software without restriction, including without limitation&n; * the rights to use, copy, modify, merge, publish, distribute, sublicense,&n; * and/or sell copies of the Software, and to permit persons to whom the&n; * Software is furnished to do so, subject to the following conditions:&n; *&n; * The above copyright notice and this permission notice (including the next&n; * paragraph) shall be included in all copies or substantial portions of the&n; * Software.&n; *&n; * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&n; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&n; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL&n; * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR&n; * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,&n; * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR&n; * OTHER DEALINGS IN THE SOFTWARE.&n; *&n; * Authors:&n; *    Rickard E. (Rik) Faith &lt;faith@valinux.com&gt;&n; *    Gareth Hughes &lt;gareth@valinux.com&gt;&n; */
macro_line|#include &quot;drmP.h&quot;
macro_line|#include &lt;linux/interrupt.h&gt;&t;/* For task queue support */
macro_line|#ifndef __HAVE_DMA_WAITQUEUE
DECL|macro|__HAVE_DMA_WAITQUEUE
mdefine_line|#define __HAVE_DMA_WAITQUEUE&t;0
macro_line|#endif
macro_line|#ifndef __HAVE_DMA_RECLAIM
DECL|macro|__HAVE_DMA_RECLAIM
mdefine_line|#define __HAVE_DMA_RECLAIM&t;0
macro_line|#endif
macro_line|#ifndef __HAVE_SHARED_IRQ
DECL|macro|__HAVE_SHARED_IRQ
mdefine_line|#define __HAVE_SHARED_IRQ&t;0
macro_line|#endif
macro_line|#if __HAVE_SHARED_IRQ
DECL|macro|DRM_IRQ_TYPE
mdefine_line|#define DRM_IRQ_TYPE&t;&t;SA_SHIRQ
macro_line|#else
DECL|macro|DRM_IRQ_TYPE
mdefine_line|#define DRM_IRQ_TYPE&t;&t;0
macro_line|#endif
macro_line|#if __HAVE_DMA
DECL|function|dma_setup
r_int
id|DRM
c_func
(paren
id|dma_setup
)paren
(paren
id|drm_device_t
op_star
id|dev
)paren
(brace
r_int
id|i
suffix:semicolon
id|dev-&gt;dma
op_assign
id|DRM
c_func
(paren
id|alloc
)paren
(paren
r_sizeof
(paren
op_star
id|dev-&gt;dma
)paren
comma
id|DRM_MEM_DRIVER
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dev-&gt;dma
)paren
r_return
op_minus
id|ENOMEM
suffix:semicolon
id|memset
c_func
(paren
id|dev-&gt;dma
comma
l_int|0
comma
r_sizeof
(paren
op_star
id|dev-&gt;dma
)paren
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
op_le
id|DRM_MAX_ORDER
suffix:semicolon
id|i
op_increment
)paren
id|memset
c_func
(paren
op_amp
id|dev-&gt;dma-&gt;bufs
(braket
id|i
)braket
comma
l_int|0
comma
r_sizeof
(paren
id|dev-&gt;dma-&gt;bufs
(braket
l_int|0
)braket
)paren
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|dma_takedown
r_void
id|DRM
c_func
(paren
id|dma_takedown
)paren
(paren
id|drm_device_t
op_star
id|dev
)paren
(brace
id|drm_device_dma_t
op_star
id|dma
op_assign
id|dev-&gt;dma
suffix:semicolon
r_int
id|i
comma
id|j
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dma
)paren
r_return
suffix:semicolon
multiline_comment|/* Clear dma buffers */
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
op_le
id|DRM_MAX_ORDER
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|seg_count
)paren
(brace
id|DRM_DEBUG
c_func
(paren
l_string|&quot;order %d: buf_count = %d,&quot;
l_string|&quot; seg_count = %d&bslash;n&quot;
comma
id|i
comma
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|buf_count
comma
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|seg_count
)paren
suffix:semicolon
r_for
c_loop
(paren
id|j
op_assign
l_int|0
suffix:semicolon
id|j
OL
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|seg_count
suffix:semicolon
id|j
op_increment
)paren
(brace
r_if
c_cond
(paren
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|seglist
(braket
id|j
)braket
)paren
(brace
id|DRM
c_func
(paren
id|free_pages
)paren
(paren
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|seglist
(braket
id|j
)braket
comma
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|page_order
comma
id|DRM_MEM_DMA
)paren
suffix:semicolon
)brace
)brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|seglist
comma
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|seg_count
op_star
r_sizeof
(paren
op_star
id|dma-&gt;bufs
(braket
l_int|0
)braket
dot
id|seglist
)paren
comma
id|DRM_MEM_SEGS
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|buf_count
)paren
(brace
r_for
c_loop
(paren
id|j
op_assign
l_int|0
suffix:semicolon
id|j
OL
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|buf_count
suffix:semicolon
id|j
op_increment
)paren
(brace
r_if
c_cond
(paren
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|buflist
(braket
id|j
)braket
dot
id|dev_private
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|buflist
(braket
id|j
)braket
dot
id|dev_private
comma
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|buflist
(braket
id|j
)braket
dot
id|dev_priv_size
comma
id|DRM_MEM_BUFS
)paren
suffix:semicolon
)brace
)brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|buflist
comma
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|buf_count
op_star
r_sizeof
(paren
op_star
id|dma-&gt;bufs
(braket
l_int|0
)braket
dot
id|buflist
)paren
comma
id|DRM_MEM_BUFS
)paren
suffix:semicolon
macro_line|#if __HAVE_DMA_FREELIST
id|DRM
c_func
(paren
id|freelist_destroy
)paren
(paren
op_amp
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|freelist
)paren
suffix:semicolon
macro_line|#endif
)brace
)brace
r_if
c_cond
(paren
id|dma-&gt;buflist
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|dma-&gt;buflist
comma
id|dma-&gt;buf_count
op_star
r_sizeof
(paren
op_star
id|dma-&gt;buflist
)paren
comma
id|DRM_MEM_BUFS
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|dma-&gt;pagelist
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|dma-&gt;pagelist
comma
id|dma-&gt;page_count
op_star
r_sizeof
(paren
op_star
id|dma-&gt;pagelist
)paren
comma
id|DRM_MEM_PAGES
)paren
suffix:semicolon
)brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|dev-&gt;dma
comma
r_sizeof
(paren
op_star
id|dev-&gt;dma
)paren
comma
id|DRM_MEM_DRIVER
)paren
suffix:semicolon
id|dev-&gt;dma
op_assign
l_int|NULL
suffix:semicolon
)brace
DECL|function|free_buffer
r_void
id|DRM
c_func
(paren
id|free_buffer
)paren
(paren
id|drm_device_t
op_star
id|dev
comma
id|drm_buf_t
op_star
id|buf
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|buf
)paren
r_return
suffix:semicolon
id|buf-&gt;waiting
op_assign
l_int|0
suffix:semicolon
id|buf-&gt;pending
op_assign
l_int|0
suffix:semicolon
id|buf-&gt;filp
op_assign
l_int|0
suffix:semicolon
id|buf-&gt;used
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|__HAVE_DMA_WAITQUEUE
op_logical_and
id|waitqueue_active
c_func
(paren
op_amp
id|buf-&gt;dma_wait
)paren
)paren
(brace
id|wake_up_interruptible
c_func
(paren
op_amp
id|buf-&gt;dma_wait
)paren
suffix:semicolon
)brace
macro_line|#if __HAVE_DMA_FREELIST
r_else
(brace
id|drm_device_dma_t
op_star
id|dma
op_assign
id|dev-&gt;dma
suffix:semicolon
multiline_comment|/* If processes are waiting, the last one&n;&t;&t;&t;&t;   to wake will put the buffer on the free&n;&t;&t;&t;&t;   list.  If no processes are waiting, we&n;&t;&t;&t;&t;   put the buffer on the freelist here. */
id|DRM
c_func
(paren
id|freelist_put
)paren
(paren
id|dev
comma
op_amp
id|dma-&gt;bufs
(braket
id|buf-&gt;order
)braket
dot
id|freelist
comma
id|buf
)paren
suffix:semicolon
)brace
macro_line|#endif
)brace
macro_line|#if !__HAVE_DMA_RECLAIM
DECL|function|reclaim_buffers
r_void
id|DRM
c_func
(paren
id|reclaim_buffers
)paren
(paren
r_struct
id|file
op_star
id|filp
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_device_dma_t
op_star
id|dma
op_assign
id|dev-&gt;dma
suffix:semicolon
r_int
id|i
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dma
)paren
r_return
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|dma-&gt;buf_count
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|dma-&gt;buflist
(braket
id|i
)braket
op_member_access_from_pointer
id|filp
op_eq
id|filp
)paren
(brace
r_switch
c_cond
(paren
id|dma-&gt;buflist
(braket
id|i
)braket
op_member_access_from_pointer
id|list
)paren
(brace
r_case
id|DRM_LIST_NONE
suffix:colon
id|DRM
c_func
(paren
id|free_buffer
)paren
(paren
id|dev
comma
id|dma-&gt;buflist
(braket
id|i
)braket
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|DRM_LIST_WAIT
suffix:colon
id|dma-&gt;buflist
(braket
id|i
)braket
op_member_access_from_pointer
id|list
op_assign
id|DRM_LIST_RECLAIM
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
multiline_comment|/* Buffer already on hardware. */
r_break
suffix:semicolon
)brace
)brace
)brace
)brace
macro_line|#endif
macro_line|#if __HAVE_DMA_IRQ
DECL|function|irq_install
r_int
id|DRM
c_func
(paren
id|irq_install
)paren
(paren
id|drm_device_t
op_star
id|dev
comma
r_int
id|irq
)paren
(brace
r_int
id|ret
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|irq
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
id|down
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_if
c_cond
(paren
id|dev-&gt;irq
)paren
(brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_return
op_minus
id|EBUSY
suffix:semicolon
)brace
id|dev-&gt;irq
op_assign
id|irq
suffix:semicolon
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;%s: irq=%d&bslash;n&quot;
comma
id|__FUNCTION__
comma
id|irq
)paren
suffix:semicolon
id|dev-&gt;context_flag
op_assign
l_int|0
suffix:semicolon
id|dev-&gt;interrupt_flag
op_assign
l_int|0
suffix:semicolon
id|dev-&gt;dma_flag
op_assign
l_int|0
suffix:semicolon
id|dev-&gt;dma-&gt;next_buffer
op_assign
l_int|NULL
suffix:semicolon
id|dev-&gt;dma-&gt;next_queue
op_assign
l_int|NULL
suffix:semicolon
id|dev-&gt;dma-&gt;this_buffer
op_assign
l_int|NULL
suffix:semicolon
macro_line|#if __HAVE_DMA_IRQ_BH
id|INIT_WORK
c_func
(paren
op_amp
id|dev-&gt;work
comma
id|DRM
c_func
(paren
id|dma_immediate_bh
)paren
comma
id|dev
)paren
suffix:semicolon
macro_line|#endif
macro_line|#if __HAVE_VBL_IRQ
id|init_waitqueue_head
c_func
(paren
op_amp
id|dev-&gt;vbl_queue
)paren
suffix:semicolon
id|spin_lock_init
c_func
(paren
op_amp
id|dev-&gt;vbl_lock
)paren
suffix:semicolon
id|INIT_LIST_HEAD
c_func
(paren
op_amp
id|dev-&gt;vbl_sigs.head
)paren
suffix:semicolon
id|dev-&gt;vbl_pending
op_assign
l_int|0
suffix:semicolon
macro_line|#endif
multiline_comment|/* Before installing handler */
id|DRM
c_func
(paren
id|driver_irq_preinstall
)paren
(paren
id|dev
)paren
suffix:semicolon
multiline_comment|/* Install handler */
id|ret
op_assign
id|request_irq
c_func
(paren
id|dev-&gt;irq
comma
id|DRM
c_func
(paren
id|dma_service
)paren
comma
id|DRM_IRQ_TYPE
comma
id|dev-&gt;devname
comma
id|dev
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ret
OL
l_int|0
)paren
(brace
id|down
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|dev-&gt;irq
op_assign
l_int|0
suffix:semicolon
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
multiline_comment|/* After installing handler */
id|DRM
c_func
(paren
id|driver_irq_postinstall
)paren
(paren
id|dev
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|irq_uninstall
r_int
id|DRM
c_func
(paren
id|irq_uninstall
)paren
(paren
id|drm_device_t
op_star
id|dev
)paren
(brace
r_int
id|irq
suffix:semicolon
id|down
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|irq
op_assign
id|dev-&gt;irq
suffix:semicolon
id|dev-&gt;irq
op_assign
l_int|0
suffix:semicolon
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|irq
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;%s: irq=%d&bslash;n&quot;
comma
id|__FUNCTION__
comma
id|irq
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|driver_irq_uninstall
)paren
(paren
id|dev
)paren
suffix:semicolon
id|free_irq
c_func
(paren
id|irq
comma
id|dev
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|control
r_int
id|DRM
c_func
(paren
id|control
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_control_t
id|ctl
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|ctl
comma
(paren
id|drm_control_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|ctl
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_switch
c_cond
(paren
id|ctl.func
)paren
(brace
r_case
id|DRM_INST_HANDLER
suffix:colon
r_return
id|DRM
c_func
(paren
id|irq_install
)paren
(paren
id|dev
comma
id|ctl.irq
)paren
suffix:semicolon
r_case
id|DRM_UNINST_HANDLER
suffix:colon
r_return
id|DRM
c_func
(paren
id|irq_uninstall
)paren
(paren
id|dev
)paren
suffix:semicolon
r_default
suffix:colon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
)brace
macro_line|#if __HAVE_VBL_IRQ
DECL|function|wait_vblank
r_int
id|DRM
c_func
(paren
id|wait_vblank
)paren
(paren
id|DRM_IOCTL_ARGS
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_wait_vblank_t
id|vblwait
suffix:semicolon
r_struct
id|timeval
id|now
suffix:semicolon
r_int
id|ret
op_assign
l_int|0
suffix:semicolon
r_int
r_int
id|flags
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dev-&gt;irq
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
id|DRM_COPY_FROM_USER_IOCTL
c_func
(paren
id|vblwait
comma
(paren
id|drm_wait_vblank_t
op_star
)paren
id|data
comma
r_sizeof
(paren
id|vblwait
)paren
)paren
suffix:semicolon
r_switch
c_cond
(paren
id|vblwait.request.type
op_amp
op_complement
id|_DRM_VBLANK_FLAGS_MASK
)paren
(brace
r_case
id|_DRM_VBLANK_RELATIVE
suffix:colon
id|vblwait.request.sequence
op_add_assign
id|atomic_read
c_func
(paren
op_amp
id|dev-&gt;vbl_received
)paren
suffix:semicolon
id|vblwait.request.type
op_and_assign
op_complement
id|_DRM_VBLANK_RELATIVE
suffix:semicolon
r_case
id|_DRM_VBLANK_ABSOLUTE
suffix:colon
r_break
suffix:semicolon
r_default
suffix:colon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|flags
op_assign
id|vblwait.request.type
op_amp
id|_DRM_VBLANK_FLAGS_MASK
suffix:semicolon
r_if
c_cond
(paren
id|flags
op_amp
id|_DRM_VBLANK_SIGNAL
)paren
(brace
r_int
r_int
id|irqflags
suffix:semicolon
id|drm_vbl_sig_t
op_star
id|vbl_sig
suffix:semicolon
id|vblwait.reply.sequence
op_assign
id|atomic_read
c_func
(paren
op_amp
id|dev-&gt;vbl_received
)paren
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|dev-&gt;vbl_lock
comma
id|irqflags
)paren
suffix:semicolon
multiline_comment|/* Check if this task has already scheduled the same signal&n;&t;&t; * for the same vblank sequence number; nothing to be done in&n;&t;&t; * that case&n;&t;&t; */
id|list_for_each_entry
c_func
(paren
id|vbl_sig
comma
op_amp
id|dev-&gt;vbl_sigs.head
comma
id|head
)paren
(brace
r_if
c_cond
(paren
id|vbl_sig-&gt;sequence
op_eq
id|vblwait.request.sequence
op_logical_and
id|vbl_sig-&gt;info.si_signo
op_eq
id|vblwait.request.signal
op_logical_and
id|vbl_sig-&gt;task
op_eq
id|current
)paren
(brace
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|dev-&gt;vbl_lock
comma
id|irqflags
)paren
suffix:semicolon
r_goto
id|done
suffix:semicolon
)brace
)brace
r_if
c_cond
(paren
id|dev-&gt;vbl_pending
op_ge
l_int|100
)paren
(brace
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|dev-&gt;vbl_lock
comma
id|irqflags
)paren
suffix:semicolon
r_return
op_minus
id|EBUSY
suffix:semicolon
)brace
id|dev-&gt;vbl_pending
op_increment
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|dev-&gt;vbl_lock
comma
id|irqflags
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|vbl_sig
op_assign
id|DRM_MALLOC
c_func
(paren
r_sizeof
(paren
id|drm_vbl_sig_t
)paren
)paren
)paren
)paren
(brace
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|memset
c_func
(paren
(paren
r_void
op_star
)paren
id|vbl_sig
comma
l_int|0
comma
r_sizeof
(paren
op_star
id|vbl_sig
)paren
)paren
suffix:semicolon
id|vbl_sig-&gt;sequence
op_assign
id|vblwait.request.sequence
suffix:semicolon
id|vbl_sig-&gt;info.si_signo
op_assign
id|vblwait.request.signal
suffix:semicolon
id|vbl_sig-&gt;task
op_assign
id|current
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|dev-&gt;vbl_lock
comma
id|irqflags
)paren
suffix:semicolon
id|list_add_tail
c_func
(paren
(paren
r_struct
id|list_head
op_star
)paren
id|vbl_sig
comma
op_amp
id|dev-&gt;vbl_sigs.head
)paren
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|dev-&gt;vbl_lock
comma
id|irqflags
)paren
suffix:semicolon
)brace
r_else
(brace
id|ret
op_assign
id|DRM
c_func
(paren
id|vblank_wait
)paren
(paren
id|dev
comma
op_amp
id|vblwait.request.sequence
)paren
suffix:semicolon
id|do_gettimeofday
c_func
(paren
op_amp
id|now
)paren
suffix:semicolon
id|vblwait.reply.tval_sec
op_assign
id|now.tv_sec
suffix:semicolon
id|vblwait.reply.tval_usec
op_assign
id|now.tv_usec
suffix:semicolon
)brace
id|done
suffix:colon
id|DRM_COPY_TO_USER_IOCTL
c_func
(paren
(paren
id|drm_wait_vblank_t
op_star
)paren
id|data
comma
id|vblwait
comma
r_sizeof
(paren
id|vblwait
)paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|vbl_send_signals
r_void
id|DRM
c_func
(paren
id|vbl_send_signals
)paren
(paren
id|drm_device_t
op_star
id|dev
)paren
(brace
r_struct
id|list_head
op_star
id|list
comma
op_star
id|tmp
suffix:semicolon
id|drm_vbl_sig_t
op_star
id|vbl_sig
suffix:semicolon
r_int
r_int
id|vbl_seq
op_assign
id|atomic_read
c_func
(paren
op_amp
id|dev-&gt;vbl_received
)paren
suffix:semicolon
r_int
r_int
id|flags
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|dev-&gt;vbl_lock
comma
id|flags
)paren
suffix:semicolon
id|list_for_each_safe
c_func
(paren
id|list
comma
id|tmp
comma
op_amp
id|dev-&gt;vbl_sigs.head
)paren
(brace
id|vbl_sig
op_assign
id|list_entry
c_func
(paren
id|list
comma
id|drm_vbl_sig_t
comma
id|head
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|vbl_seq
op_minus
id|vbl_sig-&gt;sequence
)paren
op_le
(paren
l_int|1
op_lshift
l_int|23
)paren
)paren
(brace
id|vbl_sig-&gt;info.si_code
op_assign
id|vbl_seq
suffix:semicolon
id|send_sig_info
c_func
(paren
id|vbl_sig-&gt;info.si_signo
comma
op_amp
id|vbl_sig-&gt;info
comma
id|vbl_sig-&gt;task
)paren
suffix:semicolon
id|list_del
c_func
(paren
id|list
)paren
suffix:semicolon
id|DRM_FREE
c_func
(paren
id|vbl_sig
comma
r_sizeof
(paren
op_star
id|vbl_sig
)paren
)paren
suffix:semicolon
id|dev-&gt;vbl_pending
op_decrement
suffix:semicolon
)brace
)brace
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|dev-&gt;vbl_lock
comma
id|flags
)paren
suffix:semicolon
)brace
macro_line|#endif&t;/* __HAVE_VBL_IRQ */
macro_line|#else
DECL|function|control
r_int
id|DRM
c_func
(paren
id|control
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_control_t
id|ctl
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|ctl
comma
(paren
id|drm_control_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|ctl
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_switch
c_cond
(paren
id|ctl.func
)paren
(brace
r_case
id|DRM_INST_HANDLER
suffix:colon
r_case
id|DRM_UNINST_HANDLER
suffix:colon
r_return
l_int|0
suffix:semicolon
r_default
suffix:colon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
)brace
macro_line|#endif /* __HAVE_DMA_IRQ */
macro_line|#endif /* __HAVE_DMA */
eof
