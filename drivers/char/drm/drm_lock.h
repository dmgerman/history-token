multiline_comment|/* lock.c -- IOCTLs for locking -*- linux-c -*-&n; * Created: Tue Feb  2 08:37:54 1999 by faith@valinux.com&n; *&n; * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.&n; * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.&n; * All Rights Reserved.&n; *&n; * Permission is hereby granted, free of charge, to any person obtaining a&n; * copy of this software and associated documentation files (the &quot;Software&quot;),&n; * to deal in the Software without restriction, including without limitation&n; * the rights to use, copy, modify, merge, publish, distribute, sublicense,&n; * and/or sell copies of the Software, and to permit persons to whom the&n; * Software is furnished to do so, subject to the following conditions:&n; *&n; * The above copyright notice and this permission notice (including the next&n; * paragraph) shall be included in all copies or substantial portions of the&n; * Software.&n; *&n; * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&n; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&n; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL&n; * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR&n; * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,&n; * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR&n; * OTHER DEALINGS IN THE SOFTWARE.&n; *&n; * Authors:&n; *    Rickard E. (Rik) Faith &lt;faith@valinux.com&gt;&n; *    Gareth Hughes &lt;gareth@valinux.com&gt;&n; */
macro_line|#include &quot;drmP.h&quot;
DECL|function|noop
r_int
id|DRM
c_func
(paren
id|noop
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|DRM_DEBUG
c_func
(paren
l_string|&quot;&bslash;n&quot;
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|lock_take
r_int
id|DRM
c_func
(paren
id|lock_take
)paren
(paren
id|__volatile__
r_int
r_int
op_star
id|lock
comma
r_int
r_int
id|context
)paren
(brace
r_int
r_int
id|old
comma
r_new
comma
id|prev
suffix:semicolon
r_do
(brace
id|old
op_assign
op_star
id|lock
suffix:semicolon
r_if
c_cond
(paren
id|old
op_amp
id|_DRM_LOCK_HELD
)paren
r_new
op_assign
id|old
op_or
id|_DRM_LOCK_CONT
suffix:semicolon
r_else
r_new
op_assign
id|context
op_or
id|_DRM_LOCK_HELD
suffix:semicolon
id|prev
op_assign
id|cmpxchg
c_func
(paren
id|lock
comma
id|old
comma
r_new
)paren
suffix:semicolon
)brace
r_while
c_loop
(paren
id|prev
op_ne
id|old
)paren
suffix:semicolon
r_if
c_cond
(paren
id|_DRM_LOCKING_CONTEXT
c_func
(paren
id|old
)paren
op_eq
id|context
)paren
(brace
r_if
c_cond
(paren
id|old
op_amp
id|_DRM_LOCK_HELD
)paren
(brace
r_if
c_cond
(paren
id|context
op_ne
id|DRM_KERNEL_CONTEXT
)paren
(brace
id|DRM_ERROR
c_func
(paren
l_string|&quot;%d holds heavyweight lock&bslash;n&quot;
comma
id|context
)paren
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
)brace
r_if
c_cond
(paren
r_new
op_eq
(paren
id|context
op_or
id|_DRM_LOCK_HELD
)paren
)paren
(brace
multiline_comment|/* Have lock */
r_return
l_int|1
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/* This takes a lock forcibly and hands it to context.&t;Should ONLY be used&n;   inside *_unlock to give lock to kernel before calling *_dma_schedule. */
DECL|function|lock_transfer
r_int
id|DRM
c_func
(paren
id|lock_transfer
)paren
(paren
id|drm_device_t
op_star
id|dev
comma
id|__volatile__
r_int
r_int
op_star
id|lock
comma
r_int
r_int
id|context
)paren
(brace
r_int
r_int
id|old
comma
r_new
comma
id|prev
suffix:semicolon
id|dev-&gt;lock.filp
op_assign
l_int|0
suffix:semicolon
r_do
(brace
id|old
op_assign
op_star
id|lock
suffix:semicolon
r_new
op_assign
id|context
op_or
id|_DRM_LOCK_HELD
suffix:semicolon
id|prev
op_assign
id|cmpxchg
c_func
(paren
id|lock
comma
id|old
comma
r_new
)paren
suffix:semicolon
)brace
r_while
c_loop
(paren
id|prev
op_ne
id|old
)paren
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|lock_free
r_int
id|DRM
c_func
(paren
id|lock_free
)paren
(paren
id|drm_device_t
op_star
id|dev
comma
id|__volatile__
r_int
r_int
op_star
id|lock
comma
r_int
r_int
id|context
)paren
(brace
r_int
r_int
id|old
comma
r_new
comma
id|prev
suffix:semicolon
id|dev-&gt;lock.filp
op_assign
l_int|0
suffix:semicolon
r_do
(brace
id|old
op_assign
op_star
id|lock
suffix:semicolon
r_new
op_assign
l_int|0
suffix:semicolon
id|prev
op_assign
id|cmpxchg
c_func
(paren
id|lock
comma
id|old
comma
r_new
)paren
suffix:semicolon
)brace
r_while
c_loop
(paren
id|prev
op_ne
id|old
)paren
suffix:semicolon
r_if
c_cond
(paren
id|_DRM_LOCK_IS_HELD
c_func
(paren
id|old
)paren
op_logical_and
id|_DRM_LOCKING_CONTEXT
c_func
(paren
id|old
)paren
op_ne
id|context
)paren
(brace
id|DRM_ERROR
c_func
(paren
l_string|&quot;%d freed heavyweight lock held by %d&bslash;n&quot;
comma
id|context
comma
id|_DRM_LOCKING_CONTEXT
c_func
(paren
id|old
)paren
)paren
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
id|wake_up_interruptible
c_func
(paren
op_amp
id|dev-&gt;lock.lock_queue
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/* If we get here, it means that the process has called DRM_IOCTL_LOCK&n;   without calling DRM_IOCTL_UNLOCK.&n;&n;   If the lock is not held, then let the signal proceed as usual.&n;&n;   If the lock is held, then set the contended flag and keep the signal&n;   blocked.&n;&n;&n;   Return 1 if the signal should be delivered normally.&n;   Return 0 if the signal should be blocked.  */
DECL|function|notifier
r_int
id|DRM
c_func
(paren
id|notifier
)paren
(paren
r_void
op_star
id|priv
)paren
(brace
id|drm_sigdata_t
op_star
id|s
op_assign
(paren
id|drm_sigdata_t
op_star
)paren
id|priv
suffix:semicolon
r_int
r_int
id|old
comma
r_new
comma
id|prev
suffix:semicolon
multiline_comment|/* Allow signal delivery if lock isn&squot;t held */
r_if
c_cond
(paren
op_logical_neg
id|s-&gt;lock
op_logical_or
op_logical_neg
id|_DRM_LOCK_IS_HELD
c_func
(paren
id|s-&gt;lock-&gt;lock
)paren
op_logical_or
id|_DRM_LOCKING_CONTEXT
c_func
(paren
id|s-&gt;lock-&gt;lock
)paren
op_ne
id|s-&gt;context
)paren
r_return
l_int|1
suffix:semicolon
multiline_comment|/* Otherwise, set flag to force call to&n;                                   drmUnlock */
r_do
(brace
id|old
op_assign
id|s-&gt;lock-&gt;lock
suffix:semicolon
r_new
op_assign
id|old
op_or
id|_DRM_LOCK_CONT
suffix:semicolon
id|prev
op_assign
id|cmpxchg
c_func
(paren
op_amp
id|s-&gt;lock-&gt;lock
comma
id|old
comma
r_new
)paren
suffix:semicolon
)brace
r_while
c_loop
(paren
id|prev
op_ne
id|old
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
eof
