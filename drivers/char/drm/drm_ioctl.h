multiline_comment|/* drm_ioctl.h -- IOCTL processing for DRM -*- linux-c -*-&n; * Created: Fri Jan  8 09:01:26 1999 by faith@valinux.com&n; *&n; * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.&n; * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.&n; * All Rights Reserved.&n; *&n; * Permission is hereby granted, free of charge, to any person obtaining a&n; * copy of this software and associated documentation files (the &quot;Software&quot;),&n; * to deal in the Software without restriction, including without limitation&n; * the rights to use, copy, modify, merge, publish, distribute, sublicense,&n; * and/or sell copies of the Software, and to permit persons to whom the&n; * Software is furnished to do so, subject to the following conditions:&n; *&n; * The above copyright notice and this permission notice (including the next&n; * paragraph) shall be included in all copies or substantial portions of the&n; * Software.&n; *&n; * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&n; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&n; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL&n; * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR&n; * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,&n; * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR&n; * OTHER DEALINGS IN THE SOFTWARE.&n; *&n; * Authors:&n; *    Rickard E. (Rik) Faith &lt;faith@valinux.com&gt;&n; *    Gareth Hughes &lt;gareth@valinux.com&gt;&n; */
macro_line|#include &quot;drmP.h&quot;
DECL|function|irq_busid
r_int
id|DRM
c_func
(paren
id|irq_busid
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_irq_busid_t
id|p
suffix:semicolon
r_struct
id|pci_dev
op_star
id|dev
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|p
comma
(paren
id|drm_irq_busid_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|p
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
macro_line|#ifdef __alpha__
(brace
r_int
id|domain
op_assign
id|p.busnum
op_rshift
l_int|8
suffix:semicolon
id|p.busnum
op_and_assign
l_int|0xff
suffix:semicolon
multiline_comment|/*&n;&t;&t; * Find the hose the device is on (the domain number is the&n;&t;&t; * hose index) and offset the bus by the root bus of that&n;&t;&t; * hose.&n;&t;&t; */
r_for
c_loop
(paren
id|dev
op_assign
id|pci_find_device
c_func
(paren
id|PCI_ANY_ID
comma
id|PCI_ANY_ID
comma
l_int|NULL
)paren
suffix:semicolon
id|dev
suffix:semicolon
id|dev
op_assign
id|pci_find_device
c_func
(paren
id|PCI_ANY_ID
comma
id|PCI_ANY_ID
comma
id|dev
)paren
)paren
(brace
r_struct
id|pci_controller
op_star
id|hose
op_assign
id|dev-&gt;sysdata
suffix:semicolon
r_if
c_cond
(paren
id|hose-&gt;index
op_eq
id|domain
)paren
(brace
id|p.busnum
op_add_assign
id|hose-&gt;bus-&gt;number
suffix:semicolon
r_break
suffix:semicolon
)brace
)brace
)brace
macro_line|#endif
id|dev
op_assign
id|pci_find_slot
c_func
(paren
id|p.busnum
comma
id|PCI_DEVFN
c_func
(paren
id|p.devnum
comma
id|p.funcnum
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dev
)paren
(brace
id|DRM_ERROR
c_func
(paren
l_string|&quot;pci_find_slot failed for %d:%d:%d&bslash;n&quot;
comma
id|p.busnum
comma
id|p.devnum
comma
id|p.funcnum
)paren
suffix:semicolon
id|p.irq
op_assign
l_int|0
suffix:semicolon
r_goto
id|out
suffix:semicolon
)brace
r_if
c_cond
(paren
id|pci_enable_device
c_func
(paren
id|dev
)paren
op_ne
l_int|0
)paren
(brace
id|DRM_ERROR
c_func
(paren
l_string|&quot;pci_enable_device failed for %d:%d:%d&bslash;n&quot;
comma
id|p.busnum
comma
id|p.devnum
comma
id|p.funcnum
)paren
suffix:semicolon
id|p.irq
op_assign
l_int|0
suffix:semicolon
r_goto
id|out
suffix:semicolon
)brace
id|p.irq
op_assign
id|dev-&gt;irq
suffix:semicolon
id|out
suffix:colon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;%d:%d:%d =&gt; IRQ %d&bslash;n&quot;
comma
id|p.busnum
comma
id|p.devnum
comma
id|p.funcnum
comma
id|p.irq
)paren
suffix:semicolon
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
(paren
id|drm_irq_busid_t
op_star
)paren
id|arg
comma
op_amp
id|p
comma
r_sizeof
(paren
id|p
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|getunique
r_int
id|DRM
c_func
(paren
id|getunique
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_unique_t
id|u
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|u
comma
(paren
id|drm_unique_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|u
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_if
c_cond
(paren
id|u.unique_len
op_ge
id|dev-&gt;unique_len
)paren
(brace
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
id|u.unique
comma
id|dev-&gt;unique
comma
id|dev-&gt;unique_len
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
)brace
id|u.unique_len
op_assign
id|dev-&gt;unique_len
suffix:semicolon
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
(paren
id|drm_unique_t
op_star
)paren
id|arg
comma
op_amp
id|u
comma
r_sizeof
(paren
id|u
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|setunique
r_int
id|DRM
c_func
(paren
id|setunique
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_unique_t
id|u
suffix:semicolon
r_if
c_cond
(paren
id|dev-&gt;unique_len
op_logical_or
id|dev-&gt;unique
)paren
r_return
op_minus
id|EBUSY
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|u
comma
(paren
id|drm_unique_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|u
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|u.unique_len
op_logical_or
id|u.unique_len
OG
l_int|1024
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
id|dev-&gt;unique_len
op_assign
id|u.unique_len
suffix:semicolon
id|dev-&gt;unique
op_assign
id|DRM
c_func
(paren
id|alloc
)paren
(paren
id|u.unique_len
op_plus
l_int|1
comma
id|DRM_MEM_DRIVER
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dev-&gt;unique
)paren
(brace
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
id|dev-&gt;unique
comma
id|u.unique
comma
id|dev-&gt;unique_len
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
id|dev-&gt;unique
(braket
id|dev-&gt;unique_len
)braket
op_assign
l_char|&squot;&bslash;0&squot;
suffix:semicolon
id|dev-&gt;devname
op_assign
id|DRM
c_func
(paren
id|alloc
)paren
(paren
id|strlen
c_func
(paren
id|dev-&gt;name
)paren
op_plus
id|strlen
c_func
(paren
id|dev-&gt;unique
)paren
op_plus
l_int|2
comma
id|DRM_MEM_DRIVER
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dev-&gt;devname
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|dev-&gt;devname
comma
r_sizeof
(paren
op_star
id|dev-&gt;devname
)paren
comma
id|DRM_MEM_DRIVER
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|sprintf
c_func
(paren
id|dev-&gt;devname
comma
l_string|&quot;%s@%s&quot;
comma
id|dev-&gt;name
comma
id|dev-&gt;unique
)paren
suffix:semicolon
r_do
(brace
r_struct
id|pci_dev
op_star
id|pci_dev
suffix:semicolon
r_int
id|domain
comma
id|b
comma
id|d
comma
id|f
suffix:semicolon
r_char
op_star
id|p
suffix:semicolon
r_for
c_loop
(paren
id|p
op_assign
id|dev-&gt;unique
suffix:semicolon
id|p
op_logical_and
op_star
id|p
op_logical_and
op_star
id|p
op_ne
l_char|&squot;:&squot;
suffix:semicolon
id|p
op_increment
)paren
(brace
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|p
op_logical_or
op_logical_neg
op_star
id|p
)paren
r_break
suffix:semicolon
id|b
op_assign
(paren
r_int
)paren
id|simple_strtoul
c_func
(paren
id|p
op_plus
l_int|1
comma
op_amp
id|p
comma
l_int|10
)paren
suffix:semicolon
r_if
c_cond
(paren
op_star
id|p
op_ne
l_char|&squot;:&squot;
)paren
r_break
suffix:semicolon
id|d
op_assign
(paren
r_int
)paren
id|simple_strtoul
c_func
(paren
id|p
op_plus
l_int|1
comma
op_amp
id|p
comma
l_int|10
)paren
suffix:semicolon
r_if
c_cond
(paren
op_star
id|p
op_ne
l_char|&squot;:&squot;
)paren
r_break
suffix:semicolon
id|f
op_assign
(paren
r_int
)paren
id|simple_strtoul
c_func
(paren
id|p
op_plus
l_int|1
comma
op_amp
id|p
comma
l_int|10
)paren
suffix:semicolon
r_if
c_cond
(paren
op_star
id|p
)paren
r_break
suffix:semicolon
id|domain
op_assign
id|b
op_rshift
l_int|8
suffix:semicolon
id|b
op_and_assign
l_int|0xff
suffix:semicolon
macro_line|#ifdef __alpha__
multiline_comment|/*&n;&t;&t; * Find the hose the device is on (the domain number is the&n;&t;&t; * hose index) and offset the bus by the root bus of that&n;&t;&t; * hose.&n;&t;&t; */
r_for
c_loop
(paren
id|pci_dev
op_assign
id|pci_find_device
c_func
(paren
id|PCI_ANY_ID
comma
id|PCI_ANY_ID
comma
l_int|NULL
)paren
suffix:semicolon
id|pci_dev
suffix:semicolon
id|pci_dev
op_assign
id|pci_find_device
c_func
(paren
id|PCI_ANY_ID
comma
id|PCI_ANY_ID
comma
id|pci_dev
)paren
)paren
(brace
r_struct
id|pci_controller
op_star
id|hose
op_assign
id|pci_dev-&gt;sysdata
suffix:semicolon
r_if
c_cond
(paren
id|hose-&gt;index
op_eq
id|domain
)paren
(brace
id|b
op_add_assign
id|hose-&gt;bus-&gt;number
suffix:semicolon
r_break
suffix:semicolon
)brace
)brace
macro_line|#endif
id|pci_dev
op_assign
id|pci_find_slot
c_func
(paren
id|b
comma
id|PCI_DEVFN
c_func
(paren
id|d
comma
id|f
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pci_dev
)paren
(brace
id|dev-&gt;pdev
op_assign
id|pci_dev
suffix:semicolon
macro_line|#ifdef __alpha__
id|dev-&gt;hose
op_assign
id|pci_dev-&gt;sysdata
suffix:semicolon
macro_line|#endif
)brace
)brace
r_while
c_loop
(paren
l_int|0
)paren
(brace
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|getmap
r_int
id|DRM
c_func
(paren
id|getmap
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_map_t
id|map
suffix:semicolon
id|drm_map_list_t
op_star
id|r_list
op_assign
l_int|NULL
suffix:semicolon
r_struct
id|list_head
op_star
id|list
suffix:semicolon
r_int
id|idx
suffix:semicolon
r_int
id|i
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|map
comma
(paren
id|drm_map_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|map
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
id|idx
op_assign
id|map.offset
suffix:semicolon
id|down
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_if
c_cond
(paren
id|idx
OL
l_int|0
)paren
(brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|i
op_assign
l_int|0
suffix:semicolon
id|list_for_each
c_func
(paren
id|list
comma
op_amp
id|dev-&gt;maplist-&gt;head
)paren
(brace
r_if
c_cond
(paren
id|i
op_eq
id|idx
)paren
(brace
id|r_list
op_assign
id|list_entry
c_func
(paren
id|list
comma
id|drm_map_list_t
comma
id|head
)paren
suffix:semicolon
r_break
suffix:semicolon
)brace
id|i
op_increment
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|r_list
op_logical_or
op_logical_neg
id|r_list-&gt;map
)paren
(brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|map.offset
op_assign
id|r_list-&gt;map-&gt;offset
suffix:semicolon
id|map.size
op_assign
id|r_list-&gt;map-&gt;size
suffix:semicolon
id|map.type
op_assign
id|r_list-&gt;map-&gt;type
suffix:semicolon
id|map.flags
op_assign
id|r_list-&gt;map-&gt;flags
suffix:semicolon
id|map.handle
op_assign
id|r_list-&gt;map-&gt;handle
suffix:semicolon
id|map.mtrr
op_assign
id|r_list-&gt;map-&gt;mtrr
suffix:semicolon
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
(paren
id|drm_map_t
op_star
)paren
id|arg
comma
op_amp
id|map
comma
r_sizeof
(paren
id|map
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|getclient
r_int
id|DRM
c_func
(paren
id|getclient
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_client_t
id|client
suffix:semicolon
id|drm_file_t
op_star
id|pt
suffix:semicolon
r_int
id|idx
suffix:semicolon
r_int
id|i
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|client
comma
(paren
id|drm_client_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|client
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
id|idx
op_assign
id|client.idx
suffix:semicolon
id|down
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
comma
id|pt
op_assign
id|dev-&gt;file_first
suffix:semicolon
id|i
OL
id|idx
op_logical_and
id|pt
suffix:semicolon
id|i
op_increment
comma
id|pt
op_assign
id|pt-&gt;next
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|pt
)paren
(brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|client.auth
op_assign
id|pt-&gt;authenticated
suffix:semicolon
id|client.pid
op_assign
id|pt-&gt;pid
suffix:semicolon
id|client.uid
op_assign
id|pt-&gt;uid
suffix:semicolon
id|client.magic
op_assign
id|pt-&gt;magic
suffix:semicolon
id|client.iocs
op_assign
id|pt-&gt;ioctl_count
suffix:semicolon
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
(paren
id|drm_client_t
op_star
)paren
id|arg
comma
op_amp
id|client
comma
r_sizeof
(paren
id|client
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|getstats
r_int
id|DRM
c_func
(paren
id|getstats
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_stats_t
id|stats
suffix:semicolon
r_int
id|i
suffix:semicolon
id|memset
c_func
(paren
op_amp
id|stats
comma
l_int|0
comma
r_sizeof
(paren
id|stats
)paren
)paren
suffix:semicolon
id|down
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|dev-&gt;counters
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|dev-&gt;types
(braket
id|i
)braket
op_eq
id|_DRM_STAT_LOCK
)paren
id|stats.data
(braket
id|i
)braket
dot
id|value
op_assign
(paren
id|dev-&gt;lock.hw_lock
ques
c_cond
id|dev-&gt;lock.hw_lock-&gt;lock
suffix:colon
l_int|0
)paren
suffix:semicolon
r_else
id|stats.data
(braket
id|i
)braket
dot
id|value
op_assign
id|atomic_read
c_func
(paren
op_amp
id|dev-&gt;counts
(braket
id|i
)braket
)paren
suffix:semicolon
id|stats.data
(braket
id|i
)braket
dot
id|type
op_assign
id|dev-&gt;types
(braket
id|i
)braket
suffix:semicolon
)brace
id|stats.count
op_assign
id|dev-&gt;counters
suffix:semicolon
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
(paren
id|drm_stats_t
op_star
)paren
id|arg
comma
op_amp
id|stats
comma
r_sizeof
(paren
id|stats
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
eof
