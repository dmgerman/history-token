multiline_comment|/* drm_memory.h -- Memory management wrappers for DRM -*- linux-c -*-&n; * Created: Thu Feb  4 14:00:34 1999 by faith@valinux.com&n; *&n; * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.&n; * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.&n; * All Rights Reserved.&n; *&n; * Permission is hereby granted, free of charge, to any person obtaining a&n; * copy of this software and associated documentation files (the &quot;Software&quot;),&n; * to deal in the Software without restriction, including without limitation&n; * the rights to use, copy, modify, merge, publish, distribute, sublicense,&n; * and/or sell copies of the Software, and to permit persons to whom the&n; * Software is furnished to do so, subject to the following conditions:&n; *&n; * The above copyright notice and this permission notice (including the next&n; * paragraph) shall be included in all copies or substantial portions of the&n; * Software.&n; *&n; * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&n; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&n; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL&n; * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR&n; * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,&n; * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR&n; * OTHER DEALINGS IN THE SOFTWARE.&n; *&n; * Authors:&n; *    Rickard E. (Rik) Faith &lt;faith@valinux.com&gt;&n; *    Gareth Hughes &lt;gareth@valinux.com&gt;&n; */
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &quot;drmP.h&quot;
multiline_comment|/* Cut down version of drm_memory_debug.h, which used to be called&n; * drm_memory.h.  If you want the debug functionality, change 0 to 1&n; * below.&n; */
DECL|macro|DEBUG_MEMORY
mdefine_line|#define DEBUG_MEMORY 0
macro_line|#if DEBUG_MEMORY
macro_line|#include &quot;drm_memory_debug.h&quot;
macro_line|#else
DECL|function|mem_init
r_void
id|DRM
c_func
(paren
id|mem_init
)paren
(paren
r_void
)paren
(brace
)brace
multiline_comment|/* drm_mem_info is called whenever a process reads /dev/drm/mem. */
DECL|function|mem_info
r_int
id|DRM
c_func
(paren
id|mem_info
)paren
(paren
r_char
op_star
id|buf
comma
r_char
op_star
op_star
id|start
comma
id|off_t
id|offset
comma
r_int
id|len
comma
r_int
op_star
id|eof
comma
r_void
op_star
id|data
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|alloc
r_void
op_star
id|DRM
c_func
(paren
id|alloc
)paren
(paren
r_int
id|size
comma
r_int
id|area
)paren
(brace
r_return
id|kmalloc
c_func
(paren
id|size
comma
id|GFP_KERNEL
)paren
suffix:semicolon
)brace
DECL|function|realloc
r_void
op_star
id|DRM
c_func
(paren
id|realloc
)paren
(paren
r_void
op_star
id|oldpt
comma
r_int
id|oldsize
comma
r_int
id|size
comma
r_int
id|area
)paren
(brace
r_void
op_star
id|pt
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|pt
op_assign
id|kmalloc
c_func
(paren
id|size
comma
id|GFP_KERNEL
)paren
)paren
)paren
r_return
l_int|NULL
suffix:semicolon
r_if
c_cond
(paren
id|oldpt
op_logical_and
id|oldsize
)paren
(brace
id|memcpy
c_func
(paren
id|pt
comma
id|oldpt
comma
id|oldsize
)paren
suffix:semicolon
id|kfree
c_func
(paren
id|oldpt
)paren
suffix:semicolon
)brace
r_return
id|pt
suffix:semicolon
)brace
DECL|function|free
r_void
id|DRM
c_func
(paren
id|free
)paren
(paren
r_void
op_star
id|pt
comma
r_int
id|size
comma
r_int
id|area
)paren
(brace
id|kfree
c_func
(paren
id|pt
)paren
suffix:semicolon
)brace
DECL|function|alloc_pages
r_int
r_int
id|DRM
c_func
(paren
id|alloc_pages
)paren
(paren
r_int
id|order
comma
r_int
id|area
)paren
(brace
r_int
r_int
id|address
suffix:semicolon
r_int
r_int
id|bytes
op_assign
id|PAGE_SIZE
op_lshift
id|order
suffix:semicolon
r_int
r_int
id|addr
suffix:semicolon
r_int
r_int
id|sz
suffix:semicolon
id|address
op_assign
id|__get_free_pages
c_func
(paren
id|GFP_KERNEL
comma
id|order
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|address
)paren
r_return
l_int|0
suffix:semicolon
multiline_comment|/* Zero */
id|memset
c_func
(paren
(paren
r_void
op_star
)paren
id|address
comma
l_int|0
comma
id|bytes
)paren
suffix:semicolon
multiline_comment|/* Reserve */
r_for
c_loop
(paren
id|addr
op_assign
id|address
comma
id|sz
op_assign
id|bytes
suffix:semicolon
id|sz
OG
l_int|0
suffix:semicolon
id|addr
op_add_assign
id|PAGE_SIZE
comma
id|sz
op_sub_assign
id|PAGE_SIZE
)paren
(brace
id|SetPageReserved
c_func
(paren
id|virt_to_page
c_func
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
r_return
id|address
suffix:semicolon
)brace
DECL|function|free_pages
r_void
id|DRM
c_func
(paren
id|free_pages
)paren
(paren
r_int
r_int
id|address
comma
r_int
id|order
comma
r_int
id|area
)paren
(brace
r_int
r_int
id|bytes
op_assign
id|PAGE_SIZE
op_lshift
id|order
suffix:semicolon
r_int
r_int
id|addr
suffix:semicolon
r_int
r_int
id|sz
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|address
)paren
r_return
suffix:semicolon
multiline_comment|/* Unreserve */
r_for
c_loop
(paren
id|addr
op_assign
id|address
comma
id|sz
op_assign
id|bytes
suffix:semicolon
id|sz
OG
l_int|0
suffix:semicolon
id|addr
op_add_assign
id|PAGE_SIZE
comma
id|sz
op_sub_assign
id|PAGE_SIZE
)paren
(brace
id|ClearPageReserved
c_func
(paren
id|virt_to_page
c_func
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
id|free_pages
c_func
(paren
id|address
comma
id|order
)paren
suffix:semicolon
)brace
DECL|function|ioremap
r_void
op_star
id|DRM
c_func
(paren
id|ioremap
)paren
(paren
r_int
r_int
id|offset
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|ioremap
c_func
(paren
id|offset
comma
id|size
)paren
suffix:semicolon
)brace
DECL|function|ioremap_nocache
r_void
op_star
id|DRM
c_func
(paren
id|ioremap_nocache
)paren
(paren
r_int
r_int
id|offset
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|ioremap_nocache
c_func
(paren
id|offset
comma
id|size
)paren
suffix:semicolon
)brace
DECL|function|ioremapfree
r_void
id|DRM
c_func
(paren
id|ioremapfree
)paren
(paren
r_void
op_star
id|pt
comma
r_int
r_int
id|size
)paren
(brace
id|iounmap
c_func
(paren
id|pt
)paren
suffix:semicolon
)brace
macro_line|#if __REALLY_HAVE_AGP
DECL|function|alloc_agp
id|agp_memory
op_star
id|DRM
c_func
(paren
id|alloc_agp
)paren
(paren
r_int
id|pages
comma
id|u32
id|type
)paren
(brace
r_return
id|DRM
c_func
(paren
id|agp_allocate_memory
)paren
(paren
id|pages
comma
id|type
)paren
suffix:semicolon
)brace
DECL|function|free_agp
r_int
id|DRM
c_func
(paren
id|free_agp
)paren
(paren
id|agp_memory
op_star
id|handle
comma
r_int
id|pages
)paren
(brace
r_return
id|DRM
c_func
(paren
id|agp_free_memory
)paren
(paren
id|handle
)paren
ques
c_cond
l_int|0
suffix:colon
op_minus
id|EINVAL
suffix:semicolon
)brace
DECL|function|bind_agp
r_int
id|DRM
c_func
(paren
id|bind_agp
)paren
(paren
id|agp_memory
op_star
id|handle
comma
r_int
r_int
id|start
)paren
(brace
r_return
id|DRM
c_func
(paren
id|agp_bind_memory
)paren
(paren
id|handle
comma
id|start
)paren
suffix:semicolon
)brace
DECL|function|unbind_agp
r_int
id|DRM
c_func
(paren
id|unbind_agp
)paren
(paren
id|agp_memory
op_star
id|handle
)paren
(brace
r_return
id|DRM
c_func
(paren
id|agp_unbind_memory
)paren
(paren
id|handle
)paren
suffix:semicolon
)brace
macro_line|#endif /* agp */
macro_line|#endif /* debug_memory */
eof
