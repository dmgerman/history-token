multiline_comment|/**&n; * &bslash;file drm_bufs.h &n; * Generic buffer template&n; * &n; * &bslash;author Rickard E. (Rik) Faith &lt;faith@valinux.com&gt;&n; * &bslash;author Gareth Hughes &lt;gareth@valinux.com&gt;&n; */
multiline_comment|/*&n; * Created: Thu Nov 23 03:10:50 2000 by gareth@valinux.com&n; *&n; * Copyright 1999, 2000 Precision Insight, Inc., Cedar Park, Texas.&n; * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.&n; * All Rights Reserved.&n; *&n; * Permission is hereby granted, free of charge, to any person obtaining a&n; * copy of this software and associated documentation files (the &quot;Software&quot;),&n; * to deal in the Software without restriction, including without limitation&n; * the rights to use, copy, modify, merge, publish, distribute, sublicense,&n; * and/or sell copies of the Software, and to permit persons to whom the&n; * Software is furnished to do so, subject to the following conditions:&n; *&n; * The above copyright notice and this permission notice (including the next&n; * paragraph) shall be included in all copies or substantial portions of the&n; * Software.&n; *&n; * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&n; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&n; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL&n; * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR&n; * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,&n; * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR&n; * OTHER DEALINGS IN THE SOFTWARE.&n; */
macro_line|#include &lt;linux/vmalloc.h&gt;
macro_line|#include &quot;drmP.h&quot;
macro_line|#ifndef __HAVE_PCI_DMA
DECL|macro|__HAVE_PCI_DMA
mdefine_line|#define __HAVE_PCI_DMA&t;&t;0
macro_line|#endif
macro_line|#ifndef __HAVE_SG
DECL|macro|__HAVE_SG
mdefine_line|#define __HAVE_SG&t;&t;0
macro_line|#endif
macro_line|#ifndef DRIVER_BUF_PRIV_T
DECL|macro|DRIVER_BUF_PRIV_T
mdefine_line|#define DRIVER_BUF_PRIV_T&t;&t;u32
macro_line|#endif
macro_line|#ifndef DRIVER_AGP_BUFFERS_MAP
macro_line|#if __HAVE_AGP &amp;&amp; __HAVE_DMA
macro_line|#error &quot;You must define DRIVER_AGP_BUFFERS_MAP()&quot;
macro_line|#else
DECL|macro|DRIVER_AGP_BUFFERS_MAP
mdefine_line|#define DRIVER_AGP_BUFFERS_MAP( dev )&t;NULL
macro_line|#endif
macro_line|#endif
multiline_comment|/**&n; * Compute size order.  Returns the exponent of the smaller power of two which&n; * is greater or equal to given number.&n; * &n; * &bslash;param size size.&n; * &bslash;return order.&n; *&n; * &bslash;todo Can be made faster.&n; */
DECL|function|order
r_int
id|DRM
c_func
(paren
id|order
)paren
(paren
r_int
r_int
id|size
)paren
(brace
r_int
id|order
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_for
c_loop
(paren
id|order
op_assign
l_int|0
comma
id|tmp
op_assign
id|size
suffix:semicolon
id|tmp
op_rshift_assign
l_int|1
suffix:semicolon
op_increment
id|order
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
op_amp
op_complement
(paren
l_int|1
op_lshift
id|order
)paren
)paren
op_increment
id|order
suffix:semicolon
r_return
id|order
suffix:semicolon
)brace
multiline_comment|/**&n; * Ioctl to specify a range of memory that is available for mapping by a non-root process.&n; *&n; * &bslash;param inode device inode.&n; * &bslash;param filp file pointer.&n; * &bslash;param cmd command.&n; * &bslash;param arg pointer to a drm_map structure.&n; * &bslash;return zero on success or a negative value on error.&n; *&n; * Adjusts the memory offset to its absolute value according to the mapping&n; * type.  Adds the map to the map list drm_device::maplist. Adds MTRR&squot;s where&n; * applicable and if supported by the kernel.&n; */
DECL|function|addmap
r_int
id|DRM
c_func
(paren
id|addmap
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_map_t
op_star
id|map
suffix:semicolon
id|drm_map_list_t
op_star
id|list
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|filp-&gt;f_mode
op_amp
l_int|3
)paren
)paren
r_return
op_minus
id|EACCES
suffix:semicolon
multiline_comment|/* Require read/write */
id|map
op_assign
id|DRM
c_func
(paren
id|alloc
)paren
(paren
r_sizeof
(paren
op_star
id|map
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|map
)paren
r_return
op_minus
id|ENOMEM
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
id|map
comma
(paren
id|drm_map_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
op_star
id|map
)paren
)paren
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|map
comma
r_sizeof
(paren
op_star
id|map
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
r_return
op_minus
id|EFAULT
suffix:semicolon
)brace
multiline_comment|/* Only allow shared memory to be removable since we only keep enough&n;&t; * book keeping information about shared memory to allow for removal&n;&t; * when processes fork.&n;&t; */
r_if
c_cond
(paren
(paren
id|map-&gt;flags
op_amp
id|_DRM_REMOVABLE
)paren
op_logical_and
id|map-&gt;type
op_ne
id|_DRM_SHM
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|map
comma
r_sizeof
(paren
op_star
id|map
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|DRM_DEBUG
c_func
(paren
l_string|&quot;offset = 0x%08lx, size = 0x%08lx, type = %d&bslash;n&quot;
comma
id|map-&gt;offset
comma
id|map-&gt;size
comma
id|map-&gt;type
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|map-&gt;offset
op_amp
(paren
op_complement
id|PAGE_MASK
)paren
)paren
op_logical_or
(paren
id|map-&gt;size
op_amp
(paren
op_complement
id|PAGE_MASK
)paren
)paren
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|map
comma
r_sizeof
(paren
op_star
id|map
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|map-&gt;mtrr
op_assign
op_minus
l_int|1
suffix:semicolon
id|map-&gt;handle
op_assign
l_int|0
suffix:semicolon
r_switch
c_cond
(paren
id|map-&gt;type
)paren
(brace
r_case
id|_DRM_REGISTERS
suffix:colon
r_case
id|_DRM_FRAME_BUFFER
suffix:colon
macro_line|#if !defined(__sparc__) &amp;&amp; !defined(__alpha__) &amp;&amp; !defined(__ia64__)
r_if
c_cond
(paren
id|map-&gt;offset
op_plus
id|map-&gt;size
OL
id|map-&gt;offset
op_logical_or
id|map-&gt;offset
OL
id|virt_to_phys
c_func
(paren
id|high_memory
)paren
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|map
comma
r_sizeof
(paren
op_star
id|map
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifdef __alpha__
id|map-&gt;offset
op_add_assign
id|dev-&gt;hose-&gt;mem_space-&gt;start
suffix:semicolon
macro_line|#endif
macro_line|#if __REALLY_HAVE_MTRR
r_if
c_cond
(paren
id|map-&gt;type
op_eq
id|_DRM_FRAME_BUFFER
op_logical_or
(paren
id|map-&gt;flags
op_amp
id|_DRM_WRITE_COMBINING
)paren
)paren
(brace
id|map-&gt;mtrr
op_assign
id|mtrr_add
c_func
(paren
id|map-&gt;offset
comma
id|map-&gt;size
comma
id|MTRR_TYPE_WRCOMB
comma
l_int|1
)paren
suffix:semicolon
)brace
macro_line|#endif
r_if
c_cond
(paren
id|map-&gt;type
op_eq
id|_DRM_REGISTERS
)paren
id|map-&gt;handle
op_assign
id|DRM
c_func
(paren
id|ioremap
)paren
(paren
id|map-&gt;offset
comma
id|map-&gt;size
comma
id|dev
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|_DRM_SHM
suffix:colon
id|map-&gt;handle
op_assign
id|vmalloc_32
c_func
(paren
id|map-&gt;size
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;%lu %d %p&bslash;n&quot;
comma
id|map-&gt;size
comma
id|DRM
c_func
(paren
id|order
)paren
(paren
id|map-&gt;size
)paren
comma
id|map-&gt;handle
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|map-&gt;handle
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|map
comma
r_sizeof
(paren
op_star
id|map
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|map-&gt;offset
op_assign
(paren
r_int
r_int
)paren
id|map-&gt;handle
suffix:semicolon
r_if
c_cond
(paren
id|map-&gt;flags
op_amp
id|_DRM_CONTAINS_LOCK
)paren
(brace
multiline_comment|/* Prevent a 2nd X Server from creating a 2nd lock */
r_if
c_cond
(paren
id|dev-&gt;lock.hw_lock
op_ne
l_int|NULL
)paren
(brace
id|vfree
c_func
(paren
id|map-&gt;handle
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|free
)paren
(paren
id|map
comma
r_sizeof
(paren
op_star
id|map
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
r_return
op_minus
id|EBUSY
suffix:semicolon
)brace
id|dev-&gt;sigdata.lock
op_assign
id|dev-&gt;lock.hw_lock
op_assign
id|map-&gt;handle
suffix:semicolon
multiline_comment|/* Pointer to lock */
)brace
r_break
suffix:semicolon
macro_line|#if __REALLY_HAVE_AGP
r_case
id|_DRM_AGP
suffix:colon
macro_line|#ifdef __alpha__
id|map-&gt;offset
op_add_assign
id|dev-&gt;hose-&gt;mem_space-&gt;start
suffix:semicolon
macro_line|#endif
id|map-&gt;offset
op_add_assign
id|dev-&gt;agp-&gt;base
suffix:semicolon
id|map-&gt;mtrr
op_assign
id|dev-&gt;agp-&gt;agp_mtrr
suffix:semicolon
multiline_comment|/* for getmap */
r_break
suffix:semicolon
macro_line|#endif
r_case
id|_DRM_SCATTER_GATHER
suffix:colon
r_if
c_cond
(paren
op_logical_neg
id|dev-&gt;sg
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|map
comma
r_sizeof
(paren
op_star
id|map
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|map-&gt;offset
op_add_assign
id|dev-&gt;sg-&gt;handle
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|DRM
c_func
(paren
id|free
)paren
(paren
id|map
comma
r_sizeof
(paren
op_star
id|map
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|list
op_assign
id|DRM
c_func
(paren
id|alloc
)paren
(paren
r_sizeof
(paren
op_star
id|list
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|list
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|map
comma
r_sizeof
(paren
op_star
id|map
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|memset
c_func
(paren
id|list
comma
l_int|0
comma
r_sizeof
(paren
op_star
id|list
)paren
)paren
suffix:semicolon
id|list-&gt;map
op_assign
id|map
suffix:semicolon
id|down
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|list_add
c_func
(paren
op_amp
id|list-&gt;head
comma
op_amp
id|dev-&gt;maplist-&gt;head
)paren
suffix:semicolon
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
(paren
id|drm_map_t
op_star
)paren
id|arg
comma
id|map
comma
r_sizeof
(paren
op_star
id|map
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_if
c_cond
(paren
id|map-&gt;type
op_ne
id|_DRM_SHM
)paren
(brace
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
op_amp
(paren
(paren
id|drm_map_t
op_star
)paren
id|arg
)paren
op_member_access_from_pointer
id|handle
comma
op_amp
id|map-&gt;offset
comma
r_sizeof
(paren
id|map-&gt;offset
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/**&n; * Remove a map private from list and deallocate resources if the mapping&n; * isn&squot;t in use.&n; *&n; * &bslash;param inode device inode.&n; * &bslash;param filp file pointer.&n; * &bslash;param cmd command.&n; * &bslash;param arg pointer to a drm_map_t structure.&n; * &bslash;return zero on success or a negative value on error.&n; *&n; * Searches the map on drm_device::maplist, removes it from the list, see if&n; * its being used, and free any associate resource (such as MTRR&squot;s) if it&squot;s not&n; * being on use.&n; *&n; * &bslash;sa addmap().&n; */
DECL|function|rmmap
r_int
id|DRM
c_func
(paren
id|rmmap
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
r_struct
id|list_head
op_star
id|list
suffix:semicolon
id|drm_map_list_t
op_star
id|r_list
op_assign
l_int|NULL
suffix:semicolon
id|drm_vma_entry_t
op_star
id|pt
comma
op_star
id|prev
suffix:semicolon
id|drm_map_t
op_star
id|map
suffix:semicolon
id|drm_map_t
id|request
suffix:semicolon
r_int
id|found_maps
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|request
comma
(paren
id|drm_map_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|request
)paren
)paren
)paren
(brace
r_return
op_minus
id|EFAULT
suffix:semicolon
)brace
id|down
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|list
op_assign
op_amp
id|dev-&gt;maplist-&gt;head
suffix:semicolon
id|list_for_each
c_func
(paren
id|list
comma
op_amp
id|dev-&gt;maplist-&gt;head
)paren
(brace
id|r_list
op_assign
id|list_entry
c_func
(paren
id|list
comma
id|drm_map_list_t
comma
id|head
)paren
suffix:semicolon
r_if
c_cond
(paren
id|r_list-&gt;map
op_logical_and
id|r_list-&gt;map-&gt;handle
op_eq
id|request.handle
op_logical_and
id|r_list-&gt;map-&gt;flags
op_amp
id|_DRM_REMOVABLE
)paren
(brace
r_break
suffix:semicolon
)brace
)brace
multiline_comment|/* List has wrapped around to the head pointer, or its empty we didn&squot;t&n;&t; * find anything.&n;&t; */
r_if
c_cond
(paren
id|list
op_eq
(paren
op_amp
id|dev-&gt;maplist-&gt;head
)paren
)paren
(brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|map
op_assign
id|r_list-&gt;map
suffix:semicolon
id|list_del
c_func
(paren
id|list
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|free
)paren
(paren
id|list
comma
r_sizeof
(paren
op_star
id|list
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
r_for
c_loop
(paren
id|pt
op_assign
id|dev-&gt;vmalist
comma
id|prev
op_assign
l_int|NULL
suffix:semicolon
id|pt
suffix:semicolon
id|prev
op_assign
id|pt
comma
id|pt
op_assign
id|pt-&gt;next
)paren
(brace
r_if
c_cond
(paren
id|pt-&gt;vma-&gt;vm_private_data
op_eq
id|map
)paren
id|found_maps
op_increment
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|found_maps
)paren
(brace
r_switch
c_cond
(paren
id|map-&gt;type
)paren
(brace
r_case
id|_DRM_REGISTERS
suffix:colon
r_case
id|_DRM_FRAME_BUFFER
suffix:colon
macro_line|#if __REALLY_HAVE_MTRR
r_if
c_cond
(paren
id|map-&gt;mtrr
op_ge
l_int|0
)paren
(brace
r_int
id|retcode
suffix:semicolon
id|retcode
op_assign
id|mtrr_del
c_func
(paren
id|map-&gt;mtrr
comma
id|map-&gt;offset
comma
id|map-&gt;size
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;mtrr_del = %d&bslash;n&quot;
comma
id|retcode
)paren
suffix:semicolon
)brace
macro_line|#endif
id|DRM
c_func
(paren
id|ioremapfree
)paren
(paren
id|map-&gt;handle
comma
id|map-&gt;size
comma
id|dev
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|_DRM_SHM
suffix:colon
id|vfree
c_func
(paren
id|map-&gt;handle
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|_DRM_AGP
suffix:colon
r_case
id|_DRM_SCATTER_GATHER
suffix:colon
r_break
suffix:semicolon
)brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|map
comma
r_sizeof
(paren
op_star
id|map
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
)brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
macro_line|#if __HAVE_DMA
multiline_comment|/**&n; * Cleanup after an error on one of the addbufs() functions.&n; *&n; * &bslash;param entry buffer entry where the error occurred.&n; *&n; * Frees any pages and buffers associated with the given entry.&n; */
DECL|function|cleanup_buf_error
r_static
r_void
id|DRM
c_func
(paren
id|cleanup_buf_error
)paren
(paren
id|drm_buf_entry_t
op_star
id|entry
)paren
(brace
r_int
id|i
suffix:semicolon
r_if
c_cond
(paren
id|entry-&gt;seg_count
)paren
(brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|entry-&gt;seg_count
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|entry-&gt;seglist
(braket
id|i
)braket
)paren
(brace
id|DRM
c_func
(paren
id|free_pages
)paren
(paren
id|entry-&gt;seglist
(braket
id|i
)braket
comma
id|entry-&gt;page_order
comma
id|DRM_MEM_DMA
)paren
suffix:semicolon
)brace
)brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|entry-&gt;seglist
comma
id|entry-&gt;seg_count
op_star
r_sizeof
(paren
op_star
id|entry-&gt;seglist
)paren
comma
id|DRM_MEM_SEGS
)paren
suffix:semicolon
id|entry-&gt;seg_count
op_assign
l_int|0
suffix:semicolon
)brace
r_if
c_cond
(paren
id|entry-&gt;buf_count
)paren
(brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|entry-&gt;buf_count
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|entry-&gt;buflist
(braket
id|i
)braket
dot
id|dev_private
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|entry-&gt;buflist
(braket
id|i
)braket
dot
id|dev_private
comma
id|entry-&gt;buflist
(braket
id|i
)braket
dot
id|dev_priv_size
comma
id|DRM_MEM_BUFS
)paren
suffix:semicolon
)brace
)brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|entry-&gt;buflist
comma
id|entry-&gt;buf_count
op_star
r_sizeof
(paren
op_star
id|entry-&gt;buflist
)paren
comma
id|DRM_MEM_BUFS
)paren
suffix:semicolon
macro_line|#if __HAVE_DMA_FREELIST
id|DRM
c_func
(paren
id|freelist_destroy
)paren
(paren
op_amp
id|entry-&gt;freelist
)paren
suffix:semicolon
macro_line|#endif
id|entry-&gt;buf_count
op_assign
l_int|0
suffix:semicolon
)brace
)brace
macro_line|#if __REALLY_HAVE_AGP
multiline_comment|/**&n; * Add AGP buffers for DMA transfers (ioctl).&n; *&n; * &bslash;param inode device inode.&n; * &bslash;param filp file pointer.&n; * &bslash;param cmd command.&n; * &bslash;param arg pointer to a drm_buf_desc_t request.&n; * &bslash;return zero on success or a negative number on failure.&n; * &n; * After some sanity checks creates a drm_buf structure for each buffer and&n; * reallocates the buffer list of the same size order to accommodate the new&n; * buffers.&n; */
DECL|function|addbufs_agp
r_int
id|DRM
c_func
(paren
id|addbufs_agp
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_device_dma_t
op_star
id|dma
op_assign
id|dev-&gt;dma
suffix:semicolon
id|drm_buf_desc_t
id|request
suffix:semicolon
id|drm_buf_entry_t
op_star
id|entry
suffix:semicolon
id|drm_buf_t
op_star
id|buf
suffix:semicolon
r_int
r_int
id|offset
suffix:semicolon
r_int
r_int
id|agp_offset
suffix:semicolon
r_int
id|count
suffix:semicolon
r_int
id|order
suffix:semicolon
r_int
id|size
suffix:semicolon
r_int
id|alignment
suffix:semicolon
r_int
id|page_order
suffix:semicolon
r_int
id|total
suffix:semicolon
r_int
id|byte_count
suffix:semicolon
r_int
id|i
suffix:semicolon
id|drm_buf_t
op_star
op_star
id|temp_buflist
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dma
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|request
comma
(paren
id|drm_buf_desc_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|request
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
id|count
op_assign
id|request.count
suffix:semicolon
id|order
op_assign
id|DRM
c_func
(paren
id|order
)paren
(paren
id|request.size
)paren
suffix:semicolon
id|size
op_assign
l_int|1
op_lshift
id|order
suffix:semicolon
id|alignment
op_assign
(paren
id|request.flags
op_amp
id|_DRM_PAGE_ALIGN
)paren
ques
c_cond
id|PAGE_ALIGN
c_func
(paren
id|size
)paren
suffix:colon
id|size
suffix:semicolon
id|page_order
op_assign
id|order
op_minus
id|PAGE_SHIFT
OG
l_int|0
ques
c_cond
id|order
op_minus
id|PAGE_SHIFT
suffix:colon
l_int|0
suffix:semicolon
id|total
op_assign
id|PAGE_SIZE
op_lshift
id|page_order
suffix:semicolon
id|byte_count
op_assign
l_int|0
suffix:semicolon
id|agp_offset
op_assign
id|dev-&gt;agp-&gt;base
op_plus
id|request.agp_start
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;count:      %d&bslash;n&quot;
comma
id|count
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;order:      %d&bslash;n&quot;
comma
id|order
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;size:       %d&bslash;n&quot;
comma
id|size
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;agp_offset: %lu&bslash;n&quot;
comma
id|agp_offset
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;alignment:  %d&bslash;n&quot;
comma
id|alignment
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;page_order: %d&bslash;n&quot;
comma
id|page_order
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;total:      %d&bslash;n&quot;
comma
id|total
)paren
suffix:semicolon
r_if
c_cond
(paren
id|order
template_param
id|DRM_MAX_ORDER
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|dev-&gt;queue_count
)paren
r_return
op_minus
id|EBUSY
suffix:semicolon
multiline_comment|/* Not while in use */
id|spin_lock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
r_if
c_cond
(paren
id|dev-&gt;buf_use
)paren
(brace
id|spin_unlock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
r_return
op_minus
id|EBUSY
suffix:semicolon
)brace
id|atomic_inc
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
id|spin_unlock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
id|down
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|entry
op_assign
op_amp
id|dma-&gt;bufs
(braket
id|order
)braket
suffix:semicolon
r_if
c_cond
(paren
id|entry-&gt;buf_count
)paren
(brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
multiline_comment|/* May only call once for each order */
)brace
r_if
c_cond
(paren
id|count
template_param
l_int|4096
)paren
(brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|entry-&gt;buflist
op_assign
id|DRM
c_func
(paren
id|alloc
)paren
(paren
id|count
op_star
r_sizeof
(paren
op_star
id|entry-&gt;buflist
)paren
comma
id|DRM_MEM_BUFS
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|entry-&gt;buflist
)paren
(brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|memset
c_func
(paren
id|entry-&gt;buflist
comma
l_int|0
comma
id|count
op_star
r_sizeof
(paren
op_star
id|entry-&gt;buflist
)paren
)paren
suffix:semicolon
id|entry-&gt;buf_size
op_assign
id|size
suffix:semicolon
id|entry-&gt;page_order
op_assign
id|page_order
suffix:semicolon
id|offset
op_assign
l_int|0
suffix:semicolon
r_while
c_loop
(paren
id|entry-&gt;buf_count
OL
id|count
)paren
(brace
id|buf
op_assign
op_amp
id|entry-&gt;buflist
(braket
id|entry-&gt;buf_count
)braket
suffix:semicolon
id|buf-&gt;idx
op_assign
id|dma-&gt;buf_count
op_plus
id|entry-&gt;buf_count
suffix:semicolon
id|buf-&gt;total
op_assign
id|alignment
suffix:semicolon
id|buf-&gt;order
op_assign
id|order
suffix:semicolon
id|buf-&gt;used
op_assign
l_int|0
suffix:semicolon
id|buf-&gt;offset
op_assign
(paren
id|dma-&gt;byte_count
op_plus
id|offset
)paren
suffix:semicolon
id|buf-&gt;bus_address
op_assign
id|agp_offset
op_plus
id|offset
suffix:semicolon
id|buf-&gt;address
op_assign
(paren
r_void
op_star
)paren
(paren
id|agp_offset
op_plus
id|offset
)paren
suffix:semicolon
id|buf-&gt;next
op_assign
l_int|NULL
suffix:semicolon
id|buf-&gt;waiting
op_assign
l_int|0
suffix:semicolon
id|buf-&gt;pending
op_assign
l_int|0
suffix:semicolon
id|init_waitqueue_head
c_func
(paren
op_amp
id|buf-&gt;dma_wait
)paren
suffix:semicolon
id|buf-&gt;filp
op_assign
l_int|0
suffix:semicolon
id|buf-&gt;dev_priv_size
op_assign
r_sizeof
(paren
id|DRIVER_BUF_PRIV_T
)paren
suffix:semicolon
id|buf-&gt;dev_private
op_assign
id|DRM
c_func
(paren
id|alloc
)paren
(paren
r_sizeof
(paren
id|DRIVER_BUF_PRIV_T
)paren
comma
id|DRM_MEM_BUFS
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|buf-&gt;dev_private
)paren
(brace
multiline_comment|/* Set count correctly so we free the proper amount. */
id|entry-&gt;buf_count
op_assign
id|count
suffix:semicolon
id|DRM
c_func
(paren
id|cleanup_buf_error
)paren
(paren
id|entry
)paren
suffix:semicolon
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|memset
c_func
(paren
id|buf-&gt;dev_private
comma
l_int|0
comma
id|buf-&gt;dev_priv_size
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;buffer %d @ %p&bslash;n&quot;
comma
id|entry-&gt;buf_count
comma
id|buf-&gt;address
)paren
suffix:semicolon
id|offset
op_add_assign
id|alignment
suffix:semicolon
id|entry-&gt;buf_count
op_increment
suffix:semicolon
id|byte_count
op_add_assign
id|PAGE_SIZE
op_lshift
id|page_order
suffix:semicolon
)brace
id|DRM_DEBUG
c_func
(paren
l_string|&quot;byte_count: %d&bslash;n&quot;
comma
id|byte_count
)paren
suffix:semicolon
id|temp_buflist
op_assign
id|DRM
c_func
(paren
id|realloc
)paren
(paren
id|dma-&gt;buflist
comma
id|dma-&gt;buf_count
op_star
r_sizeof
(paren
op_star
id|dma-&gt;buflist
)paren
comma
(paren
id|dma-&gt;buf_count
op_plus
id|entry-&gt;buf_count
)paren
op_star
r_sizeof
(paren
op_star
id|dma-&gt;buflist
)paren
comma
id|DRM_MEM_BUFS
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|temp_buflist
)paren
(brace
multiline_comment|/* Free the entry because it isn&squot;t valid */
id|DRM
c_func
(paren
id|cleanup_buf_error
)paren
(paren
id|entry
)paren
suffix:semicolon
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|dma-&gt;buflist
op_assign
id|temp_buflist
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|entry-&gt;buf_count
suffix:semicolon
id|i
op_increment
)paren
(brace
id|dma-&gt;buflist
(braket
id|i
op_plus
id|dma-&gt;buf_count
)braket
op_assign
op_amp
id|entry-&gt;buflist
(braket
id|i
)braket
suffix:semicolon
)brace
id|dma-&gt;buf_count
op_add_assign
id|entry-&gt;buf_count
suffix:semicolon
id|dma-&gt;byte_count
op_add_assign
id|byte_count
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;dma-&gt;buf_count : %d&bslash;n&quot;
comma
id|dma-&gt;buf_count
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;entry-&gt;buf_count : %d&bslash;n&quot;
comma
id|entry-&gt;buf_count
)paren
suffix:semicolon
macro_line|#if __HAVE_DMA_FREELIST
id|DRM
c_func
(paren
id|freelist_create
)paren
(paren
op_amp
id|entry-&gt;freelist
comma
id|entry-&gt;buf_count
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|entry-&gt;buf_count
suffix:semicolon
id|i
op_increment
)paren
(brace
id|DRM
c_func
(paren
id|freelist_put
)paren
(paren
id|dev
comma
op_amp
id|entry-&gt;freelist
comma
op_amp
id|entry-&gt;buflist
(braket
id|i
)braket
)paren
suffix:semicolon
)brace
macro_line|#endif
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|request.count
op_assign
id|entry-&gt;buf_count
suffix:semicolon
id|request.size
op_assign
id|size
suffix:semicolon
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
(paren
id|drm_buf_desc_t
op_star
)paren
id|arg
comma
op_amp
id|request
comma
r_sizeof
(paren
id|request
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
id|dma-&gt;flags
op_assign
id|_DRM_DMA_USE_AGP
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
macro_line|#endif /* __REALLY_HAVE_AGP */
macro_line|#if __HAVE_PCI_DMA
DECL|function|addbufs_pci
r_int
id|DRM
c_func
(paren
id|addbufs_pci
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_device_dma_t
op_star
id|dma
op_assign
id|dev-&gt;dma
suffix:semicolon
id|drm_buf_desc_t
id|request
suffix:semicolon
r_int
id|count
suffix:semicolon
r_int
id|order
suffix:semicolon
r_int
id|size
suffix:semicolon
r_int
id|total
suffix:semicolon
r_int
id|page_order
suffix:semicolon
id|drm_buf_entry_t
op_star
id|entry
suffix:semicolon
r_int
r_int
id|page
suffix:semicolon
id|drm_buf_t
op_star
id|buf
suffix:semicolon
r_int
id|alignment
suffix:semicolon
r_int
r_int
id|offset
suffix:semicolon
r_int
id|i
suffix:semicolon
r_int
id|byte_count
suffix:semicolon
r_int
id|page_count
suffix:semicolon
r_int
r_int
op_star
id|temp_pagelist
suffix:semicolon
id|drm_buf_t
op_star
op_star
id|temp_buflist
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dma
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|request
comma
(paren
id|drm_buf_desc_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|request
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
id|count
op_assign
id|request.count
suffix:semicolon
id|order
op_assign
id|DRM
c_func
(paren
id|order
)paren
(paren
id|request.size
)paren
suffix:semicolon
id|size
op_assign
l_int|1
op_lshift
id|order
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;count=%d, size=%d (%d), order=%d, queue_count=%d&bslash;n&quot;
comma
id|request.count
comma
id|request.size
comma
id|size
comma
id|order
comma
id|dev-&gt;queue_count
)paren
suffix:semicolon
r_if
c_cond
(paren
id|order
template_param
id|DRM_MAX_ORDER
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|dev-&gt;queue_count
)paren
r_return
op_minus
id|EBUSY
suffix:semicolon
multiline_comment|/* Not while in use */
id|alignment
op_assign
(paren
id|request.flags
op_amp
id|_DRM_PAGE_ALIGN
)paren
ques
c_cond
id|PAGE_ALIGN
c_func
(paren
id|size
)paren
suffix:colon
id|size
suffix:semicolon
id|page_order
op_assign
id|order
op_minus
id|PAGE_SHIFT
OG
l_int|0
ques
c_cond
id|order
op_minus
id|PAGE_SHIFT
suffix:colon
l_int|0
suffix:semicolon
id|total
op_assign
id|PAGE_SIZE
op_lshift
id|page_order
suffix:semicolon
id|spin_lock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
r_if
c_cond
(paren
id|dev-&gt;buf_use
)paren
(brace
id|spin_unlock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
r_return
op_minus
id|EBUSY
suffix:semicolon
)brace
id|atomic_inc
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
id|spin_unlock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
id|down
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|entry
op_assign
op_amp
id|dma-&gt;bufs
(braket
id|order
)braket
suffix:semicolon
r_if
c_cond
(paren
id|entry-&gt;buf_count
)paren
(brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
multiline_comment|/* May only call once for each order */
)brace
r_if
c_cond
(paren
id|count
template_param
l_int|4096
)paren
(brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|entry-&gt;buflist
op_assign
id|DRM
c_func
(paren
id|alloc
)paren
(paren
id|count
op_star
r_sizeof
(paren
op_star
id|entry-&gt;buflist
)paren
comma
id|DRM_MEM_BUFS
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|entry-&gt;buflist
)paren
(brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|memset
c_func
(paren
id|entry-&gt;buflist
comma
l_int|0
comma
id|count
op_star
r_sizeof
(paren
op_star
id|entry-&gt;buflist
)paren
)paren
suffix:semicolon
id|entry-&gt;seglist
op_assign
id|DRM
c_func
(paren
id|alloc
)paren
(paren
id|count
op_star
r_sizeof
(paren
op_star
id|entry-&gt;seglist
)paren
comma
id|DRM_MEM_SEGS
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|entry-&gt;seglist
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|entry-&gt;buflist
comma
id|count
op_star
r_sizeof
(paren
op_star
id|entry-&gt;buflist
)paren
comma
id|DRM_MEM_BUFS
)paren
suffix:semicolon
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|memset
c_func
(paren
id|entry-&gt;seglist
comma
l_int|0
comma
id|count
op_star
r_sizeof
(paren
op_star
id|entry-&gt;seglist
)paren
)paren
suffix:semicolon
multiline_comment|/* Keep the original pagelist until we know all the allocations&n;&t; * have succeeded&n;&t; */
id|temp_pagelist
op_assign
id|DRM
c_func
(paren
id|alloc
)paren
(paren
(paren
id|dma-&gt;page_count
op_plus
(paren
id|count
op_lshift
id|page_order
)paren
)paren
op_star
r_sizeof
(paren
op_star
id|dma-&gt;pagelist
)paren
comma
id|DRM_MEM_PAGES
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|temp_pagelist
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|entry-&gt;buflist
comma
id|count
op_star
r_sizeof
(paren
op_star
id|entry-&gt;buflist
)paren
comma
id|DRM_MEM_BUFS
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|free
)paren
(paren
id|entry-&gt;seglist
comma
id|count
op_star
r_sizeof
(paren
op_star
id|entry-&gt;seglist
)paren
comma
id|DRM_MEM_SEGS
)paren
suffix:semicolon
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|memcpy
c_func
(paren
id|temp_pagelist
comma
id|dma-&gt;pagelist
comma
id|dma-&gt;page_count
op_star
r_sizeof
(paren
op_star
id|dma-&gt;pagelist
)paren
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;pagelist: %d entries&bslash;n&quot;
comma
id|dma-&gt;page_count
op_plus
(paren
id|count
op_lshift
id|page_order
)paren
)paren
suffix:semicolon
id|entry-&gt;buf_size
op_assign
id|size
suffix:semicolon
id|entry-&gt;page_order
op_assign
id|page_order
suffix:semicolon
id|byte_count
op_assign
l_int|0
suffix:semicolon
id|page_count
op_assign
l_int|0
suffix:semicolon
r_while
c_loop
(paren
id|entry-&gt;buf_count
OL
id|count
)paren
(brace
id|page
op_assign
id|DRM
c_func
(paren
id|alloc_pages
)paren
(paren
id|page_order
comma
id|DRM_MEM_DMA
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|page
)paren
(brace
multiline_comment|/* Set count correctly so we free the proper amount. */
id|entry-&gt;buf_count
op_assign
id|count
suffix:semicolon
id|entry-&gt;seg_count
op_assign
id|count
suffix:semicolon
id|DRM
c_func
(paren
id|cleanup_buf_error
)paren
(paren
id|entry
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|free
)paren
(paren
id|temp_pagelist
comma
(paren
id|dma-&gt;page_count
op_plus
(paren
id|count
op_lshift
id|page_order
)paren
)paren
op_star
r_sizeof
(paren
op_star
id|dma-&gt;pagelist
)paren
comma
id|DRM_MEM_PAGES
)paren
suffix:semicolon
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|entry-&gt;seglist
(braket
id|entry-&gt;seg_count
op_increment
)braket
op_assign
id|page
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
(paren
l_int|1
op_lshift
id|page_order
)paren
suffix:semicolon
id|i
op_increment
)paren
(brace
id|DRM_DEBUG
c_func
(paren
l_string|&quot;page %d @ 0x%08lx&bslash;n&quot;
comma
id|dma-&gt;page_count
op_plus
id|page_count
comma
id|page
op_plus
id|PAGE_SIZE
op_star
id|i
)paren
suffix:semicolon
id|temp_pagelist
(braket
id|dma-&gt;page_count
op_plus
id|page_count
op_increment
)braket
op_assign
id|page
op_plus
id|PAGE_SIZE
op_star
id|i
suffix:semicolon
)brace
r_for
c_loop
(paren
id|offset
op_assign
l_int|0
suffix:semicolon
id|offset
op_plus
id|size
op_le
id|total
op_logical_and
id|entry-&gt;buf_count
OL
id|count
suffix:semicolon
id|offset
op_add_assign
id|alignment
comma
op_increment
id|entry-&gt;buf_count
)paren
(brace
id|buf
op_assign
op_amp
id|entry-&gt;buflist
(braket
id|entry-&gt;buf_count
)braket
suffix:semicolon
id|buf-&gt;idx
op_assign
id|dma-&gt;buf_count
op_plus
id|entry-&gt;buf_count
suffix:semicolon
id|buf-&gt;total
op_assign
id|alignment
suffix:semicolon
id|buf-&gt;order
op_assign
id|order
suffix:semicolon
id|buf-&gt;used
op_assign
l_int|0
suffix:semicolon
id|buf-&gt;offset
op_assign
(paren
id|dma-&gt;byte_count
op_plus
id|byte_count
op_plus
id|offset
)paren
suffix:semicolon
id|buf-&gt;address
op_assign
(paren
r_void
op_star
)paren
(paren
id|page
op_plus
id|offset
)paren
suffix:semicolon
id|buf-&gt;next
op_assign
l_int|NULL
suffix:semicolon
id|buf-&gt;waiting
op_assign
l_int|0
suffix:semicolon
id|buf-&gt;pending
op_assign
l_int|0
suffix:semicolon
id|init_waitqueue_head
c_func
(paren
op_amp
id|buf-&gt;dma_wait
)paren
suffix:semicolon
id|buf-&gt;filp
op_assign
l_int|0
suffix:semicolon
id|buf-&gt;dev_priv_size
op_assign
r_sizeof
(paren
id|DRIVER_BUF_PRIV_T
)paren
suffix:semicolon
id|buf-&gt;dev_private
op_assign
id|DRM
c_func
(paren
id|alloc
)paren
(paren
r_sizeof
(paren
id|DRIVER_BUF_PRIV_T
)paren
comma
id|DRM_MEM_BUFS
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|buf-&gt;dev_private
)paren
(brace
multiline_comment|/* Set count correctly so we free the proper amount. */
id|entry-&gt;buf_count
op_assign
id|count
suffix:semicolon
id|entry-&gt;seg_count
op_assign
id|count
suffix:semicolon
id|DRM
c_func
(paren
id|cleanup_buf_error
)paren
(paren
id|entry
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|free
)paren
(paren
id|temp_pagelist
comma
(paren
id|dma-&gt;page_count
op_plus
(paren
id|count
op_lshift
id|page_order
)paren
)paren
op_star
r_sizeof
(paren
op_star
id|dma-&gt;pagelist
)paren
comma
id|DRM_MEM_PAGES
)paren
suffix:semicolon
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|memset
c_func
(paren
id|buf-&gt;dev_private
comma
l_int|0
comma
id|buf-&gt;dev_priv_size
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;buffer %d @ %p&bslash;n&quot;
comma
id|entry-&gt;buf_count
comma
id|buf-&gt;address
)paren
suffix:semicolon
)brace
id|byte_count
op_add_assign
id|PAGE_SIZE
op_lshift
id|page_order
suffix:semicolon
)brace
id|temp_buflist
op_assign
id|DRM
c_func
(paren
id|realloc
)paren
(paren
id|dma-&gt;buflist
comma
id|dma-&gt;buf_count
op_star
r_sizeof
(paren
op_star
id|dma-&gt;buflist
)paren
comma
(paren
id|dma-&gt;buf_count
op_plus
id|entry-&gt;buf_count
)paren
op_star
r_sizeof
(paren
op_star
id|dma-&gt;buflist
)paren
comma
id|DRM_MEM_BUFS
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|temp_buflist
)paren
(brace
multiline_comment|/* Free the entry because it isn&squot;t valid */
id|DRM
c_func
(paren
id|cleanup_buf_error
)paren
(paren
id|entry
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|free
)paren
(paren
id|temp_pagelist
comma
(paren
id|dma-&gt;page_count
op_plus
(paren
id|count
op_lshift
id|page_order
)paren
)paren
op_star
r_sizeof
(paren
op_star
id|dma-&gt;pagelist
)paren
comma
id|DRM_MEM_PAGES
)paren
suffix:semicolon
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|dma-&gt;buflist
op_assign
id|temp_buflist
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|entry-&gt;buf_count
suffix:semicolon
id|i
op_increment
)paren
(brace
id|dma-&gt;buflist
(braket
id|i
op_plus
id|dma-&gt;buf_count
)braket
op_assign
op_amp
id|entry-&gt;buflist
(braket
id|i
)braket
suffix:semicolon
)brace
multiline_comment|/* No allocations failed, so now we can replace the orginal pagelist&n;&t; * with the new one.&n;&t; */
r_if
c_cond
(paren
id|dma-&gt;page_count
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|dma-&gt;pagelist
comma
id|dma-&gt;page_count
op_star
r_sizeof
(paren
op_star
id|dma-&gt;pagelist
)paren
comma
id|DRM_MEM_PAGES
)paren
suffix:semicolon
)brace
id|dma-&gt;pagelist
op_assign
id|temp_pagelist
suffix:semicolon
id|dma-&gt;buf_count
op_add_assign
id|entry-&gt;buf_count
suffix:semicolon
id|dma-&gt;seg_count
op_add_assign
id|entry-&gt;seg_count
suffix:semicolon
id|dma-&gt;page_count
op_add_assign
id|entry-&gt;seg_count
op_lshift
id|page_order
suffix:semicolon
id|dma-&gt;byte_count
op_add_assign
id|PAGE_SIZE
op_star
(paren
id|entry-&gt;seg_count
op_lshift
id|page_order
)paren
suffix:semicolon
macro_line|#if __HAVE_DMA_FREELIST
id|DRM
c_func
(paren
id|freelist_create
)paren
(paren
op_amp
id|entry-&gt;freelist
comma
id|entry-&gt;buf_count
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|entry-&gt;buf_count
suffix:semicolon
id|i
op_increment
)paren
(brace
id|DRM
c_func
(paren
id|freelist_put
)paren
(paren
id|dev
comma
op_amp
id|entry-&gt;freelist
comma
op_amp
id|entry-&gt;buflist
(braket
id|i
)braket
)paren
suffix:semicolon
)brace
macro_line|#endif
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|request.count
op_assign
id|entry-&gt;buf_count
suffix:semicolon
id|request.size
op_assign
id|size
suffix:semicolon
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
(paren
id|drm_buf_desc_t
op_star
)paren
id|arg
comma
op_amp
id|request
comma
r_sizeof
(paren
id|request
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
macro_line|#endif /* __HAVE_PCI_DMA */
macro_line|#ifdef __HAVE_SG
DECL|function|addbufs_sg
r_int
id|DRM
c_func
(paren
id|addbufs_sg
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_device_dma_t
op_star
id|dma
op_assign
id|dev-&gt;dma
suffix:semicolon
id|drm_buf_desc_t
id|request
suffix:semicolon
id|drm_buf_entry_t
op_star
id|entry
suffix:semicolon
id|drm_buf_t
op_star
id|buf
suffix:semicolon
r_int
r_int
id|offset
suffix:semicolon
r_int
r_int
id|agp_offset
suffix:semicolon
r_int
id|count
suffix:semicolon
r_int
id|order
suffix:semicolon
r_int
id|size
suffix:semicolon
r_int
id|alignment
suffix:semicolon
r_int
id|page_order
suffix:semicolon
r_int
id|total
suffix:semicolon
r_int
id|byte_count
suffix:semicolon
r_int
id|i
suffix:semicolon
id|drm_buf_t
op_star
op_star
id|temp_buflist
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dma
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|request
comma
(paren
id|drm_buf_desc_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|request
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
id|count
op_assign
id|request.count
suffix:semicolon
id|order
op_assign
id|DRM
c_func
(paren
id|order
)paren
(paren
id|request.size
)paren
suffix:semicolon
id|size
op_assign
l_int|1
op_lshift
id|order
suffix:semicolon
id|alignment
op_assign
(paren
id|request.flags
op_amp
id|_DRM_PAGE_ALIGN
)paren
ques
c_cond
id|PAGE_ALIGN
c_func
(paren
id|size
)paren
suffix:colon
id|size
suffix:semicolon
id|page_order
op_assign
id|order
op_minus
id|PAGE_SHIFT
OG
l_int|0
ques
c_cond
id|order
op_minus
id|PAGE_SHIFT
suffix:colon
l_int|0
suffix:semicolon
id|total
op_assign
id|PAGE_SIZE
op_lshift
id|page_order
suffix:semicolon
id|byte_count
op_assign
l_int|0
suffix:semicolon
id|agp_offset
op_assign
id|request.agp_start
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;count:      %d&bslash;n&quot;
comma
id|count
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;order:      %d&bslash;n&quot;
comma
id|order
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;size:       %d&bslash;n&quot;
comma
id|size
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;agp_offset: %lu&bslash;n&quot;
comma
id|agp_offset
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;alignment:  %d&bslash;n&quot;
comma
id|alignment
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;page_order: %d&bslash;n&quot;
comma
id|page_order
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;total:      %d&bslash;n&quot;
comma
id|total
)paren
suffix:semicolon
r_if
c_cond
(paren
id|order
template_param
id|DRM_MAX_ORDER
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|dev-&gt;queue_count
)paren
r_return
op_minus
id|EBUSY
suffix:semicolon
multiline_comment|/* Not while in use */
id|spin_lock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
r_if
c_cond
(paren
id|dev-&gt;buf_use
)paren
(brace
id|spin_unlock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
r_return
op_minus
id|EBUSY
suffix:semicolon
)brace
id|atomic_inc
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
id|spin_unlock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
id|down
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|entry
op_assign
op_amp
id|dma-&gt;bufs
(braket
id|order
)braket
suffix:semicolon
r_if
c_cond
(paren
id|entry-&gt;buf_count
)paren
(brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
multiline_comment|/* May only call once for each order */
)brace
r_if
c_cond
(paren
id|count
template_param
l_int|4096
)paren
(brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|entry-&gt;buflist
op_assign
id|DRM
c_func
(paren
id|alloc
)paren
(paren
id|count
op_star
r_sizeof
(paren
op_star
id|entry-&gt;buflist
)paren
comma
id|DRM_MEM_BUFS
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|entry-&gt;buflist
)paren
(brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|memset
c_func
(paren
id|entry-&gt;buflist
comma
l_int|0
comma
id|count
op_star
r_sizeof
(paren
op_star
id|entry-&gt;buflist
)paren
)paren
suffix:semicolon
id|entry-&gt;buf_size
op_assign
id|size
suffix:semicolon
id|entry-&gt;page_order
op_assign
id|page_order
suffix:semicolon
id|offset
op_assign
l_int|0
suffix:semicolon
r_while
c_loop
(paren
id|entry-&gt;buf_count
OL
id|count
)paren
(brace
id|buf
op_assign
op_amp
id|entry-&gt;buflist
(braket
id|entry-&gt;buf_count
)braket
suffix:semicolon
id|buf-&gt;idx
op_assign
id|dma-&gt;buf_count
op_plus
id|entry-&gt;buf_count
suffix:semicolon
id|buf-&gt;total
op_assign
id|alignment
suffix:semicolon
id|buf-&gt;order
op_assign
id|order
suffix:semicolon
id|buf-&gt;used
op_assign
l_int|0
suffix:semicolon
id|buf-&gt;offset
op_assign
(paren
id|dma-&gt;byte_count
op_plus
id|offset
)paren
suffix:semicolon
id|buf-&gt;bus_address
op_assign
id|agp_offset
op_plus
id|offset
suffix:semicolon
id|buf-&gt;address
op_assign
(paren
r_void
op_star
)paren
(paren
id|agp_offset
op_plus
id|offset
op_plus
id|dev-&gt;sg-&gt;handle
)paren
suffix:semicolon
id|buf-&gt;next
op_assign
l_int|NULL
suffix:semicolon
id|buf-&gt;waiting
op_assign
l_int|0
suffix:semicolon
id|buf-&gt;pending
op_assign
l_int|0
suffix:semicolon
id|init_waitqueue_head
c_func
(paren
op_amp
id|buf-&gt;dma_wait
)paren
suffix:semicolon
id|buf-&gt;filp
op_assign
l_int|0
suffix:semicolon
id|buf-&gt;dev_priv_size
op_assign
r_sizeof
(paren
id|DRIVER_BUF_PRIV_T
)paren
suffix:semicolon
id|buf-&gt;dev_private
op_assign
id|DRM
c_func
(paren
id|alloc
)paren
(paren
r_sizeof
(paren
id|DRIVER_BUF_PRIV_T
)paren
comma
id|DRM_MEM_BUFS
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|buf-&gt;dev_private
)paren
(brace
multiline_comment|/* Set count correctly so we free the proper amount. */
id|entry-&gt;buf_count
op_assign
id|count
suffix:semicolon
id|DRM
c_func
(paren
id|cleanup_buf_error
)paren
(paren
id|entry
)paren
suffix:semicolon
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|memset
c_func
(paren
id|buf-&gt;dev_private
comma
l_int|0
comma
id|buf-&gt;dev_priv_size
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;buffer %d @ %p&bslash;n&quot;
comma
id|entry-&gt;buf_count
comma
id|buf-&gt;address
)paren
suffix:semicolon
id|offset
op_add_assign
id|alignment
suffix:semicolon
id|entry-&gt;buf_count
op_increment
suffix:semicolon
id|byte_count
op_add_assign
id|PAGE_SIZE
op_lshift
id|page_order
suffix:semicolon
)brace
id|DRM_DEBUG
c_func
(paren
l_string|&quot;byte_count: %d&bslash;n&quot;
comma
id|byte_count
)paren
suffix:semicolon
id|temp_buflist
op_assign
id|DRM
c_func
(paren
id|realloc
)paren
(paren
id|dma-&gt;buflist
comma
id|dma-&gt;buf_count
op_star
r_sizeof
(paren
op_star
id|dma-&gt;buflist
)paren
comma
(paren
id|dma-&gt;buf_count
op_plus
id|entry-&gt;buf_count
)paren
op_star
r_sizeof
(paren
op_star
id|dma-&gt;buflist
)paren
comma
id|DRM_MEM_BUFS
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|temp_buflist
)paren
(brace
multiline_comment|/* Free the entry because it isn&squot;t valid */
id|DRM
c_func
(paren
id|cleanup_buf_error
)paren
(paren
id|entry
)paren
suffix:semicolon
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|dma-&gt;buflist
op_assign
id|temp_buflist
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|entry-&gt;buf_count
suffix:semicolon
id|i
op_increment
)paren
(brace
id|dma-&gt;buflist
(braket
id|i
op_plus
id|dma-&gt;buf_count
)braket
op_assign
op_amp
id|entry-&gt;buflist
(braket
id|i
)braket
suffix:semicolon
)brace
id|dma-&gt;buf_count
op_add_assign
id|entry-&gt;buf_count
suffix:semicolon
id|dma-&gt;byte_count
op_add_assign
id|byte_count
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;dma-&gt;buf_count : %d&bslash;n&quot;
comma
id|dma-&gt;buf_count
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;entry-&gt;buf_count : %d&bslash;n&quot;
comma
id|entry-&gt;buf_count
)paren
suffix:semicolon
macro_line|#if __HAVE_DMA_FREELIST
id|DRM
c_func
(paren
id|freelist_create
)paren
(paren
op_amp
id|entry-&gt;freelist
comma
id|entry-&gt;buf_count
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|entry-&gt;buf_count
suffix:semicolon
id|i
op_increment
)paren
(brace
id|DRM
c_func
(paren
id|freelist_put
)paren
(paren
id|dev
comma
op_amp
id|entry-&gt;freelist
comma
op_amp
id|entry-&gt;buflist
(braket
id|i
)braket
)paren
suffix:semicolon
)brace
macro_line|#endif
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|request.count
op_assign
id|entry-&gt;buf_count
suffix:semicolon
id|request.size
op_assign
id|size
suffix:semicolon
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
(paren
id|drm_buf_desc_t
op_star
)paren
id|arg
comma
op_amp
id|request
comma
r_sizeof
(paren
id|request
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
id|dma-&gt;flags
op_assign
id|_DRM_DMA_USE_SG
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
macro_line|#endif /* __HAVE_SG */
multiline_comment|/**&n; * Add buffers for DMA transfers (ioctl).&n; *&n; * &bslash;param inode device inode.&n; * &bslash;param filp file pointer.&n; * &bslash;param cmd command.&n; * &bslash;param arg pointer to a drm_buf_desc_t request.&n; * &bslash;return zero on success or a negative number on failure.&n; *&n; * According with the memory type specified in drm_buf_desc::flags and the&n; * build options, it dispatches the call either to addbufs_agp(),&n; * addbufs_sg() or addbufs_pci() for AGP, scatter-gather or consistent&n; * PCI memory respectively.&n; */
DECL|function|addbufs
r_int
id|DRM
c_func
(paren
id|addbufs
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_buf_desc_t
id|request
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|request
comma
(paren
id|drm_buf_desc_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|request
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
macro_line|#if __REALLY_HAVE_AGP
r_if
c_cond
(paren
id|request.flags
op_amp
id|_DRM_AGP_BUFFER
)paren
r_return
id|DRM
c_func
(paren
id|addbufs_agp
)paren
(paren
id|inode
comma
id|filp
comma
id|cmd
comma
id|arg
)paren
suffix:semicolon
r_else
macro_line|#endif
macro_line|#if __HAVE_SG
r_if
c_cond
(paren
id|request.flags
op_amp
id|_DRM_SG_BUFFER
)paren
r_return
id|DRM
c_func
(paren
id|addbufs_sg
)paren
(paren
id|inode
comma
id|filp
comma
id|cmd
comma
id|arg
)paren
suffix:semicolon
r_else
macro_line|#endif
macro_line|#if __HAVE_PCI_DMA
r_return
id|DRM
c_func
(paren
id|addbufs_pci
)paren
(paren
id|inode
comma
id|filp
comma
id|cmd
comma
id|arg
)paren
suffix:semicolon
macro_line|#else
r_return
op_minus
id|EINVAL
suffix:semicolon
macro_line|#endif
)brace
multiline_comment|/**&n; * Get information about the buffer mappings.&n; *&n; * This was originally mean for debugging purposes, or by a sophisticated&n; * client library to determine how best to use the available buffers (e.g.,&n; * large buffers can be used for image transfer).&n; *&n; * &bslash;param inode device inode.&n; * &bslash;param filp file pointer.&n; * &bslash;param cmd command.&n; * &bslash;param arg pointer to a drm_buf_info structure.&n; * &bslash;return zero on success or a negative number on failure.&n; *&n; * Increments drm_device::buf_use while holding the drm_device::count_lock&n; * lock, preventing of allocating more buffers after this call. Information&n; * about each requested buffer is then copied into user space.&n; */
DECL|function|infobufs
r_int
id|DRM
c_func
(paren
id|infobufs
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_device_dma_t
op_star
id|dma
op_assign
id|dev-&gt;dma
suffix:semicolon
id|drm_buf_info_t
id|request
suffix:semicolon
r_int
id|i
suffix:semicolon
r_int
id|count
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dma
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
id|spin_lock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
)paren
(brace
id|spin_unlock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
r_return
op_minus
id|EBUSY
suffix:semicolon
)brace
op_increment
id|dev-&gt;buf_use
suffix:semicolon
multiline_comment|/* Can&squot;t allocate more after this call */
id|spin_unlock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|request
comma
(paren
id|drm_buf_info_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|request
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
comma
id|count
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|DRM_MAX_ORDER
op_plus
l_int|1
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|buf_count
)paren
op_increment
id|count
suffix:semicolon
)brace
id|DRM_DEBUG
c_func
(paren
l_string|&quot;count = %d&bslash;n&quot;
comma
id|count
)paren
suffix:semicolon
r_if
c_cond
(paren
id|request.count
op_ge
id|count
)paren
(brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
comma
id|count
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|DRM_MAX_ORDER
op_plus
l_int|1
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|buf_count
)paren
(brace
id|drm_buf_desc_t
op_star
id|to
op_assign
op_amp
id|request.list
(braket
id|count
)braket
suffix:semicolon
id|drm_buf_entry_t
op_star
id|from
op_assign
op_amp
id|dma-&gt;bufs
(braket
id|i
)braket
suffix:semicolon
id|drm_freelist_t
op_star
id|list
op_assign
op_amp
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|freelist
suffix:semicolon
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
op_amp
id|to-&gt;count
comma
op_amp
id|from-&gt;buf_count
comma
r_sizeof
(paren
id|from-&gt;buf_count
)paren
)paren
op_logical_or
id|copy_to_user
c_func
(paren
op_amp
id|to-&gt;size
comma
op_amp
id|from-&gt;buf_size
comma
r_sizeof
(paren
id|from-&gt;buf_size
)paren
)paren
op_logical_or
id|copy_to_user
c_func
(paren
op_amp
id|to-&gt;low_mark
comma
op_amp
id|list-&gt;low_mark
comma
r_sizeof
(paren
id|list-&gt;low_mark
)paren
)paren
op_logical_or
id|copy_to_user
c_func
(paren
op_amp
id|to-&gt;high_mark
comma
op_amp
id|list-&gt;high_mark
comma
r_sizeof
(paren
id|list-&gt;high_mark
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;%d %d %d %d %d&bslash;n&quot;
comma
id|i
comma
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|buf_count
comma
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|buf_size
comma
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|freelist.low_mark
comma
id|dma-&gt;bufs
(braket
id|i
)braket
dot
id|freelist.high_mark
)paren
suffix:semicolon
op_increment
id|count
suffix:semicolon
)brace
)brace
)brace
id|request.count
op_assign
id|count
suffix:semicolon
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
(paren
id|drm_buf_info_t
op_star
)paren
id|arg
comma
op_amp
id|request
comma
r_sizeof
(paren
id|request
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/**&n; * Specifies a low and high water mark for buffer allocation&n; *&n; * &bslash;param inode device inode.&n; * &bslash;param filp file pointer.&n; * &bslash;param cmd command.&n; * &bslash;param arg a pointer to a drm_buf_desc structure.&n; * &bslash;return zero on success or a negative number on failure.&n; *&n; * Verifies that the size order is bounded between the admissible orders and&n; * updates the respective drm_device_dma::bufs entry low and high water mark.&n; *&n; * &bslash;note This ioctl is deprecated and mostly never used.&n; */
DECL|function|markbufs
r_int
id|DRM
c_func
(paren
id|markbufs
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_device_dma_t
op_star
id|dma
op_assign
id|dev-&gt;dma
suffix:semicolon
id|drm_buf_desc_t
id|request
suffix:semicolon
r_int
id|order
suffix:semicolon
id|drm_buf_entry_t
op_star
id|entry
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dma
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|request
comma
(paren
id|drm_buf_desc_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|request
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;%d, %d, %d&bslash;n&quot;
comma
id|request.size
comma
id|request.low_mark
comma
id|request.high_mark
)paren
suffix:semicolon
id|order
op_assign
id|DRM
c_func
(paren
id|order
)paren
(paren
id|request.size
)paren
suffix:semicolon
r_if
c_cond
(paren
id|order
template_param
id|DRM_MAX_ORDER
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
id|entry
op_assign
op_amp
id|dma-&gt;bufs
(braket
id|order
)braket
suffix:semicolon
r_if
c_cond
(paren
id|request.low_mark
template_param
id|entry-&gt;buf_count
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|request.high_mark
template_param
id|entry-&gt;buf_count
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
id|entry-&gt;freelist.low_mark
op_assign
id|request.low_mark
suffix:semicolon
id|entry-&gt;freelist.high_mark
op_assign
id|request.high_mark
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/**&n; * Unreserve the buffers in list, previously reserved using drmDMA. &n; *&n; * &bslash;param inode device inode.&n; * &bslash;param filp file pointer.&n; * &bslash;param cmd command.&n; * &bslash;param arg pointer to a drm_buf_free structure.&n; * &bslash;return zero on success or a negative number on failure.&n; * &n; * Calls free_buffer() for each used buffer.&n; * This function is primarily used for debugging.&n; */
DECL|function|freebufs
r_int
id|DRM
c_func
(paren
id|freebufs
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_device_dma_t
op_star
id|dma
op_assign
id|dev-&gt;dma
suffix:semicolon
id|drm_buf_free_t
id|request
suffix:semicolon
r_int
id|i
suffix:semicolon
r_int
id|idx
suffix:semicolon
id|drm_buf_t
op_star
id|buf
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dma
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|request
comma
(paren
id|drm_buf_free_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|request
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;%d&bslash;n&quot;
comma
id|request.count
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|request.count
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|idx
comma
op_amp
id|request.list
(braket
id|i
)braket
comma
r_sizeof
(paren
id|idx
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_if
c_cond
(paren
id|idx
OL
l_int|0
op_logical_or
id|idx
op_ge
id|dma-&gt;buf_count
)paren
(brace
id|DRM_ERROR
c_func
(paren
l_string|&quot;Index %d (of %d max)&bslash;n&quot;
comma
id|idx
comma
id|dma-&gt;buf_count
op_minus
l_int|1
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|buf
op_assign
id|dma-&gt;buflist
(braket
id|idx
)braket
suffix:semicolon
r_if
c_cond
(paren
id|buf-&gt;filp
op_ne
id|filp
)paren
(brace
id|DRM_ERROR
c_func
(paren
l_string|&quot;Process %d freeing buffer not owned&bslash;n&quot;
comma
id|current-&gt;pid
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|DRM
c_func
(paren
id|free_buffer
)paren
(paren
id|dev
comma
id|buf
)paren
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/**&n; * Maps all of the DMA buffers into client-virtual space (ioctl).&n; *&n; * &bslash;param inode device inode.&n; * &bslash;param filp file pointer.&n; * &bslash;param cmd command.&n; * &bslash;param arg pointer to a drm_buf_map structure.&n; * &bslash;return zero on success or a negative number on failure.&n; *&n; * Maps the AGP or SG buffer region with do_mmap(), and copies information&n; * about each buffer into user space. The PCI buffers are already mapped on the&n; * addbufs_pci() call.&n; */
DECL|function|mapbufs
r_int
id|DRM
c_func
(paren
id|mapbufs
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_device_dma_t
op_star
id|dma
op_assign
id|dev-&gt;dma
suffix:semicolon
r_int
id|retcode
op_assign
l_int|0
suffix:semicolon
r_const
r_int
id|zero
op_assign
l_int|0
suffix:semicolon
r_int
r_int
r_virtual
suffix:semicolon
r_int
r_int
id|address
suffix:semicolon
id|drm_buf_map_t
id|request
suffix:semicolon
r_int
id|i
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dma
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
id|spin_lock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
)paren
)paren
(brace
id|spin_unlock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
r_return
op_minus
id|EBUSY
suffix:semicolon
)brace
id|dev-&gt;buf_use
op_increment
suffix:semicolon
multiline_comment|/* Can&squot;t allocate more after this call */
id|spin_unlock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|request
comma
(paren
id|drm_buf_map_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|request
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_if
c_cond
(paren
id|request.count
op_ge
id|dma-&gt;buf_count
)paren
(brace
r_if
c_cond
(paren
(paren
id|__HAVE_AGP
op_logical_and
(paren
id|dma-&gt;flags
op_amp
id|_DRM_DMA_USE_AGP
)paren
)paren
op_logical_or
(paren
id|__HAVE_SG
op_logical_and
(paren
id|dma-&gt;flags
op_amp
id|_DRM_DMA_USE_SG
)paren
)paren
)paren
(brace
id|drm_map_t
op_star
id|map
op_assign
id|DRIVER_AGP_BUFFERS_MAP
c_func
(paren
id|dev
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|map
)paren
(brace
id|retcode
op_assign
op_minus
id|EINVAL
suffix:semicolon
r_goto
id|done
suffix:semicolon
)brace
macro_line|#if LINUX_VERSION_CODE &lt;= 0x020402
id|down
c_func
(paren
op_amp
id|current-&gt;mm-&gt;mmap_sem
)paren
suffix:semicolon
macro_line|#else
id|down_write
c_func
(paren
op_amp
id|current-&gt;mm-&gt;mmap_sem
)paren
suffix:semicolon
macro_line|#endif
r_virtual
op_assign
id|do_mmap
c_func
(paren
id|filp
comma
l_int|0
comma
id|map-&gt;size
comma
id|PROT_READ
op_or
id|PROT_WRITE
comma
id|MAP_SHARED
comma
(paren
r_int
r_int
)paren
id|map-&gt;offset
)paren
suffix:semicolon
macro_line|#if LINUX_VERSION_CODE &lt;= 0x020402
id|up
c_func
(paren
op_amp
id|current-&gt;mm-&gt;mmap_sem
)paren
suffix:semicolon
macro_line|#else
id|up_write
c_func
(paren
op_amp
id|current-&gt;mm-&gt;mmap_sem
)paren
suffix:semicolon
macro_line|#endif
)brace
r_else
(brace
macro_line|#if LINUX_VERSION_CODE &lt;= 0x020402
id|down
c_func
(paren
op_amp
id|current-&gt;mm-&gt;mmap_sem
)paren
suffix:semicolon
macro_line|#else
id|down_write
c_func
(paren
op_amp
id|current-&gt;mm-&gt;mmap_sem
)paren
suffix:semicolon
macro_line|#endif
r_virtual
op_assign
id|do_mmap
c_func
(paren
id|filp
comma
l_int|0
comma
id|dma-&gt;byte_count
comma
id|PROT_READ
op_or
id|PROT_WRITE
comma
id|MAP_SHARED
comma
l_int|0
)paren
suffix:semicolon
macro_line|#if LINUX_VERSION_CODE &lt;= 0x020402
id|up
c_func
(paren
op_amp
id|current-&gt;mm-&gt;mmap_sem
)paren
suffix:semicolon
macro_line|#else
id|up_write
c_func
(paren
op_amp
id|current-&gt;mm-&gt;mmap_sem
)paren
suffix:semicolon
macro_line|#endif
)brace
r_if
c_cond
(paren
r_virtual
OG
op_minus
l_int|1024UL
)paren
(brace
multiline_comment|/* Real error */
id|retcode
op_assign
(paren
r_int
r_int
)paren
r_virtual
suffix:semicolon
r_goto
id|done
suffix:semicolon
)brace
id|request
dot
r_virtual
op_assign
(paren
r_void
op_star
)paren
r_virtual
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|dma-&gt;buf_count
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
op_amp
id|request.list
(braket
id|i
)braket
dot
id|idx
comma
op_amp
id|dma-&gt;buflist
(braket
id|i
)braket
op_member_access_from_pointer
id|idx
comma
r_sizeof
(paren
id|request.list
(braket
l_int|0
)braket
dot
id|idx
)paren
)paren
)paren
(brace
id|retcode
op_assign
op_minus
id|EFAULT
suffix:semicolon
r_goto
id|done
suffix:semicolon
)brace
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
op_amp
id|request.list
(braket
id|i
)braket
dot
id|total
comma
op_amp
id|dma-&gt;buflist
(braket
id|i
)braket
op_member_access_from_pointer
id|total
comma
r_sizeof
(paren
id|request.list
(braket
l_int|0
)braket
dot
id|total
)paren
)paren
)paren
(brace
id|retcode
op_assign
op_minus
id|EFAULT
suffix:semicolon
r_goto
id|done
suffix:semicolon
)brace
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
op_amp
id|request.list
(braket
id|i
)braket
dot
id|used
comma
op_amp
id|zero
comma
r_sizeof
(paren
id|zero
)paren
)paren
)paren
(brace
id|retcode
op_assign
op_minus
id|EFAULT
suffix:semicolon
r_goto
id|done
suffix:semicolon
)brace
id|address
op_assign
r_virtual
op_plus
id|dma-&gt;buflist
(braket
id|i
)braket
op_member_access_from_pointer
id|offset
suffix:semicolon
multiline_comment|/* *** */
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
op_amp
id|request.list
(braket
id|i
)braket
dot
id|address
comma
op_amp
id|address
comma
r_sizeof
(paren
id|address
)paren
)paren
)paren
(brace
id|retcode
op_assign
op_minus
id|EFAULT
suffix:semicolon
r_goto
id|done
suffix:semicolon
)brace
)brace
)brace
id|done
suffix:colon
id|request.count
op_assign
id|dma-&gt;buf_count
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;%d buffers, retcode = %d&bslash;n&quot;
comma
id|request.count
comma
id|retcode
)paren
suffix:semicolon
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
(paren
id|drm_buf_map_t
op_star
)paren
id|arg
comma
op_amp
id|request
comma
r_sizeof
(paren
id|request
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_return
id|retcode
suffix:semicolon
)brace
macro_line|#endif /* __HAVE_DMA */
eof
