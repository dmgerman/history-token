multiline_comment|/* drm_init.h -- Setup/Cleanup for DRM -*- linux-c -*-&n; * Created: Mon Jan  4 08:58:31 1999 by faith@valinux.com&n; *&n; * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.&n; * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.&n; * All Rights Reserved.&n; *&n; * Permission is hereby granted, free of charge, to any person obtaining a&n; * copy of this software and associated documentation files (the &quot;Software&quot;),&n; * to deal in the Software without restriction, including without limitation&n; * the rights to use, copy, modify, merge, publish, distribute, sublicense,&n; * and/or sell copies of the Software, and to permit persons to whom the&n; * Software is furnished to do so, subject to the following conditions:&n; *&n; * The above copyright notice and this permission notice (including the next&n; * paragraph) shall be included in all copies or substantial portions of the&n; * Software.&n; *&n; * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&n; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&n; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL&n; * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR&n; * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,&n; * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR&n; * OTHER DEALINGS IN THE SOFTWARE.&n; *&n; * Authors:&n; *    Rickard E. (Rik) Faith &lt;faith@valinux.com&gt;&n; *    Gareth Hughes &lt;gareth@valinux.com&gt;&n; */
macro_line|#include &quot;drmP.h&quot;
macro_line|#if 0
r_int
id|DRM
c_func
(paren
id|flags
)paren
op_assign
id|DRM_FLAG_DEBUG
suffix:semicolon
macro_line|#else
DECL|variable|flags
r_int
id|DRM
c_func
(paren
id|flags
)paren
op_assign
l_int|0
suffix:semicolon
macro_line|#endif
multiline_comment|/* drm_parse_option parses a single option.  See description for&n; * drm_parse_options for details.&n; */
DECL|function|parse_option
r_static
r_void
id|DRM
c_func
(paren
id|parse_option
)paren
(paren
r_char
op_star
id|s
)paren
(brace
r_char
op_star
id|c
comma
op_star
id|r
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;&bslash;&quot;%s&bslash;&quot;&bslash;n&quot;
comma
id|s
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|s
op_logical_or
op_logical_neg
op_star
id|s
)paren
r_return
suffix:semicolon
r_for
c_loop
(paren
id|c
op_assign
id|s
suffix:semicolon
op_star
id|c
op_logical_and
op_star
id|c
op_ne
l_char|&squot;:&squot;
suffix:semicolon
id|c
op_increment
)paren
suffix:semicolon
multiline_comment|/* find : or &bslash;0 */
r_if
c_cond
(paren
op_star
id|c
)paren
id|r
op_assign
id|c
op_plus
l_int|1
suffix:semicolon
r_else
id|r
op_assign
l_int|NULL
suffix:semicolon
multiline_comment|/* remember remainder */
op_star
id|c
op_assign
l_char|&squot;&bslash;0&squot;
suffix:semicolon
multiline_comment|/* terminate */
r_if
c_cond
(paren
op_logical_neg
id|strcmp
c_func
(paren
id|s
comma
l_string|&quot;debug&quot;
)paren
)paren
(brace
id|DRM
c_func
(paren
id|flags
)paren
op_or_assign
id|DRM_FLAG_DEBUG
suffix:semicolon
id|DRM_INFO
c_func
(paren
l_string|&quot;Debug messages ON&bslash;n&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
id|DRM_ERROR
c_func
(paren
l_string|&quot;&bslash;&quot;%s&bslash;&quot; is not a valid option&bslash;n&quot;
comma
id|s
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
multiline_comment|/* drm_parse_options parse the insmod &quot;drm_opts=&quot; options, or the command-line&n; * options passed to the kernel via LILO.  The grammar of the format is as&n; * follows:&n; *&n; * drm&t;&t;::= &squot;drm_opts=&squot; option_list&n; * option_list&t;::= option [ &squot;;&squot; option_list ]&n; * option&t;::= &squot;device:&squot; major&n; *&t;&t;|   &squot;debug&squot;&n; *&t;&t;|   &squot;noctx&squot;&n; * major&t;::= INTEGER&n; *&n; * Note that &squot;s&squot; contains option_list without the &squot;drm_opts=&squot; part.&n; *&n; * device=major,minor specifies the device number used for /dev/drm&n; *&t;  if major == 0 then the misc device is used&n; *&t;  if major == 0 and minor == 0 then dynamic misc allocation is used&n; * debug=on specifies that debugging messages will be printk&squot;d&n; * debug=trace specifies that each function call will be logged via printk&n; * debug=off turns off all debugging options&n; *&n; */
DECL|function|parse_options
r_void
id|DRM
c_func
(paren
id|parse_options
)paren
(paren
r_char
op_star
id|s
)paren
(brace
r_char
op_star
id|h
comma
op_star
id|t
comma
op_star
id|n
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;&bslash;&quot;%s&bslash;&quot;&bslash;n&quot;
comma
id|s
ques
c_cond
suffix:colon
l_string|&quot;&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|s
op_logical_or
op_logical_neg
op_star
id|s
)paren
r_return
suffix:semicolon
r_for
c_loop
(paren
id|h
op_assign
id|t
op_assign
id|n
op_assign
id|s
suffix:semicolon
id|h
op_logical_and
op_star
id|h
suffix:semicolon
id|h
op_assign
id|n
)paren
(brace
r_for
c_loop
(paren
suffix:semicolon
op_star
id|t
op_logical_and
op_star
id|t
op_ne
l_char|&squot;;&squot;
suffix:semicolon
id|t
op_increment
)paren
suffix:semicolon
multiline_comment|/* find ; or &bslash;0 */
r_if
c_cond
(paren
op_star
id|t
)paren
id|n
op_assign
id|t
op_plus
l_int|1
suffix:semicolon
r_else
id|n
op_assign
l_int|NULL
suffix:semicolon
multiline_comment|/* remember next */
op_star
id|t
op_assign
l_char|&squot;&bslash;0&squot;
suffix:semicolon
multiline_comment|/* terminate */
id|DRM
c_func
(paren
id|parse_option
)paren
(paren
id|h
)paren
suffix:semicolon
multiline_comment|/* parse */
)brace
)brace
multiline_comment|/* drm_cpu_valid returns non-zero if the DRI will run on this CPU, and 0&n; * otherwise.&n; */
DECL|function|cpu_valid
r_int
id|DRM
c_func
(paren
id|cpu_valid
)paren
(paren
r_void
)paren
(brace
macro_line|#if defined(__i386__)
r_if
c_cond
(paren
id|boot_cpu_data.x86
op_eq
l_int|3
)paren
r_return
l_int|0
suffix:semicolon
multiline_comment|/* No cmpxchg on a 386 */
macro_line|#endif
macro_line|#if defined(__sparc__) &amp;&amp; !defined(__sparc_v9__)
r_return
l_int|0
suffix:semicolon
multiline_comment|/* No cmpxchg before v9 sparc. */
macro_line|#endif
r_return
l_int|1
suffix:semicolon
)brace
eof
