multiline_comment|/* drm_drv.h -- Generic driver template -*- linux-c -*-&n; * Created: Thu Nov 23 03:10:50 2000 by gareth@valinux.com&n; *&n; * Copyright 1999, 2000 Precision Insight, Inc., Cedar Park, Texas.&n; * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.&n; * All Rights Reserved.&n; *&n; * Permission is hereby granted, free of charge, to any person obtaining a&n; * copy of this software and associated documentation files (the &quot;Software&quot;),&n; * to deal in the Software without restriction, including without limitation&n; * the rights to use, copy, modify, merge, publish, distribute, sublicense,&n; * and/or sell copies of the Software, and to permit persons to whom the&n; * Software is furnished to do so, subject to the following conditions:&n; *&n; * The above copyright notice and this permission notice (including the next&n; * paragraph) shall be included in all copies or substantial portions of the&n; * Software.&n; *&n; * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&n; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&n; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL&n; * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR&n; * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,&n; * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR&n; * OTHER DEALINGS IN THE SOFTWARE.&n; *&n; * Authors:&n; *    Rickard E. (Rik) Faith &lt;faith@valinux.com&gt;&n; *    Gareth Hughes &lt;gareth@valinux.com&gt;&n; */
multiline_comment|/*&n; * To use this template, you must at least define the following (samples&n; * given for the MGA driver):&n; *&n; * #define DRIVER_AUTHOR&t;&quot;VA Linux Systems, Inc.&quot;&n; *&n; * #define DRIVER_NAME&t;&t;&quot;mga&quot;&n; * #define DRIVER_DESC&t;&t;&quot;Matrox G200/G400&quot;&n; * #define DRIVER_DATE&t;&t;&quot;20001127&quot;&n; *&n; * #define DRIVER_MAJOR&t;&t;2&n; * #define DRIVER_MINOR&t;&t;0&n; * #define DRIVER_PATCHLEVEL&t;2&n; *&n; * #define DRIVER_IOCTL_COUNT&t;DRM_ARRAY_SIZE( mga_ioctls )&n; *&n; * #define DRM(x)&t;&t;mga_##x&n; */
macro_line|#ifndef __MUST_HAVE_AGP
DECL|macro|__MUST_HAVE_AGP
mdefine_line|#define __MUST_HAVE_AGP&t;&t;&t;0
macro_line|#endif
macro_line|#ifndef __HAVE_CTX_BITMAP
DECL|macro|__HAVE_CTX_BITMAP
mdefine_line|#define __HAVE_CTX_BITMAP&t;&t;0
macro_line|#endif
macro_line|#ifndef __HAVE_DMA_IRQ
DECL|macro|__HAVE_DMA_IRQ
mdefine_line|#define __HAVE_DMA_IRQ&t;&t;&t;0
macro_line|#endif
macro_line|#ifndef __HAVE_DMA_QUEUE
DECL|macro|__HAVE_DMA_QUEUE
mdefine_line|#define __HAVE_DMA_QUEUE&t;&t;0
macro_line|#endif
macro_line|#ifndef __HAVE_MULTIPLE_DMA_QUEUES
DECL|macro|__HAVE_MULTIPLE_DMA_QUEUES
mdefine_line|#define __HAVE_MULTIPLE_DMA_QUEUES&t;0
macro_line|#endif
macro_line|#ifndef __HAVE_DMA_SCHEDULE
DECL|macro|__HAVE_DMA_SCHEDULE
mdefine_line|#define __HAVE_DMA_SCHEDULE&t;&t;0
macro_line|#endif
macro_line|#ifndef __HAVE_DMA_FLUSH
DECL|macro|__HAVE_DMA_FLUSH
mdefine_line|#define __HAVE_DMA_FLUSH&t;&t;0
macro_line|#endif
macro_line|#ifndef __HAVE_DMA_READY
DECL|macro|__HAVE_DMA_READY
mdefine_line|#define __HAVE_DMA_READY&t;&t;0
macro_line|#endif
macro_line|#ifndef __HAVE_DMA_QUIESCENT
DECL|macro|__HAVE_DMA_QUIESCENT
mdefine_line|#define __HAVE_DMA_QUIESCENT&t;&t;0
macro_line|#endif
macro_line|#ifndef __HAVE_RELEASE
DECL|macro|__HAVE_RELEASE
mdefine_line|#define __HAVE_RELEASE&t;&t;&t;0
macro_line|#endif
macro_line|#ifndef __HAVE_COUNTERS
DECL|macro|__HAVE_COUNTERS
mdefine_line|#define __HAVE_COUNTERS&t;&t;&t;0
macro_line|#endif
macro_line|#ifndef __HAVE_SG
DECL|macro|__HAVE_SG
mdefine_line|#define __HAVE_SG&t;&t;&t;0
macro_line|#endif
macro_line|#ifndef __HAVE_KERNEL_CTX_SWITCH
DECL|macro|__HAVE_KERNEL_CTX_SWITCH
mdefine_line|#define __HAVE_KERNEL_CTX_SWITCH&t;0
macro_line|#endif
macro_line|#ifndef DRIVER_PREINIT
DECL|macro|DRIVER_PREINIT
mdefine_line|#define DRIVER_PREINIT()
macro_line|#endif
macro_line|#ifndef DRIVER_POSTINIT
DECL|macro|DRIVER_POSTINIT
mdefine_line|#define DRIVER_POSTINIT()
macro_line|#endif
macro_line|#ifndef DRIVER_PRERELEASE
DECL|macro|DRIVER_PRERELEASE
mdefine_line|#define DRIVER_PRERELEASE()
macro_line|#endif
macro_line|#ifndef DRIVER_PRETAKEDOWN
DECL|macro|DRIVER_PRETAKEDOWN
mdefine_line|#define DRIVER_PRETAKEDOWN()
macro_line|#endif
macro_line|#ifndef DRIVER_POSTCLEANUP
DECL|macro|DRIVER_POSTCLEANUP
mdefine_line|#define DRIVER_POSTCLEANUP()
macro_line|#endif
macro_line|#ifndef DRIVER_PRESETUP
DECL|macro|DRIVER_PRESETUP
mdefine_line|#define DRIVER_PRESETUP()
macro_line|#endif
macro_line|#ifndef DRIVER_POSTSETUP
DECL|macro|DRIVER_POSTSETUP
mdefine_line|#define DRIVER_POSTSETUP()
macro_line|#endif
macro_line|#ifndef DRIVER_IOCTLS
DECL|macro|DRIVER_IOCTLS
mdefine_line|#define DRIVER_IOCTLS
macro_line|#endif
macro_line|#ifndef DRIVER_FOPS
macro_line|#if LINUX_VERSION_CODE &gt;= 0x020400
DECL|macro|DRIVER_FOPS
mdefine_line|#define DRIVER_FOPS&t;&t;&t;&t;&bslash;&n;static struct file_operations&t;DRM(fops) = {&t;&bslash;&n;&t;owner:   THIS_MODULE,&t;&t;&t;&bslash;&n;&t;open:&t; DRM(open),&t;&t;&t;&bslash;&n;&t;flush:&t; DRM(flush),&t;&t;&t;&bslash;&n;&t;release: DRM(release),&t;&t;&t;&bslash;&n;&t;ioctl:&t; DRM(ioctl),&t;&t;&t;&bslash;&n;&t;mmap:&t; DRM(mmap),&t;&t;&t;&bslash;&n;&t;read:&t; DRM(read),&t;&t;&t;&bslash;&n;&t;fasync:&t; DRM(fasync),&t;&t;&t;&bslash;&n;&t;poll:&t; DRM(poll),&t;&t;&t;&bslash;&n;}
macro_line|#else
DECL|macro|DRIVER_FOPS
mdefine_line|#define DRIVER_FOPS&t;&t;&t;&t;&bslash;&n;static struct file_operations&t;DRM(fops) = {&t;&bslash;&n;&t;open:&t; DRM(open),&t;&t;&t;&bslash;&n;&t;flush:&t; DRM(flush),&t;&t;&t;&bslash;&n;&t;release: DRM(release),&t;&t;&t;&bslash;&n;&t;ioctl:&t; DRM(ioctl),&t;&t;&t;&bslash;&n;&t;mmap:&t; DRM(mmap),&t;&t;&t;&bslash;&n;&t;read:&t; DRM(read),&t;&t;&t;&bslash;&n;&t;fasync:&t; DRM(fasync),&t;&t;&t;&bslash;&n;&t;poll:&t; DRM(poll),&t;&t;&t;&bslash;&n;}
macro_line|#endif
macro_line|#endif
multiline_comment|/*&n; * The default number of instances (minor numbers) to initialize.&n; */
macro_line|#ifndef DRIVER_NUM_CARDS
DECL|macro|DRIVER_NUM_CARDS
mdefine_line|#define DRIVER_NUM_CARDS 1
macro_line|#endif
r_static
id|drm_device_t
op_star
id|DRM
c_func
(paren
id|device
)paren
suffix:semicolon
r_static
r_int
op_star
id|DRM
c_func
(paren
id|minor
)paren
suffix:semicolon
DECL|variable|numdevs
r_static
r_int
id|DRM
c_func
(paren
id|numdevs
)paren
op_assign
l_int|0
suffix:semicolon
id|DRIVER_FOPS
suffix:semicolon
r_static
id|drm_ioctl_desc_t
id|DRM
c_func
(paren
id|ioctls
)paren
(braket
)braket
op_assign
(brace
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_VERSION
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|version
)paren
comma
l_int|0
comma
l_int|0
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_GET_UNIQUE
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|getunique
)paren
comma
l_int|0
comma
l_int|0
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_GET_MAGIC
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|getmagic
)paren
comma
l_int|0
comma
l_int|0
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_IRQ_BUSID
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|irq_busid
)paren
comma
l_int|0
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_GET_MAP
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|getmap
)paren
comma
l_int|0
comma
l_int|0
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_GET_CLIENT
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|getclient
)paren
comma
l_int|0
comma
l_int|0
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_GET_STATS
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|getstats
)paren
comma
l_int|0
comma
l_int|0
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_SET_UNIQUE
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|setunique
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_BLOCK
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|block
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_UNBLOCK
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|unblock
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_AUTH_MAGIC
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|authmagic
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_ADD_MAP
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|addmap
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_RM_MAP
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|rmmap
)paren
comma
l_int|1
comma
l_int|0
)brace
comma
macro_line|#if __HAVE_CTX_BITMAP
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_SET_SAREA_CTX
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|setsareactx
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_GET_SAREA_CTX
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|getsareactx
)paren
comma
l_int|1
comma
l_int|0
)brace
comma
macro_line|#endif
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_ADD_CTX
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|addctx
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_RM_CTX
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|rmctx
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_MOD_CTX
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|modctx
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_GET_CTX
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|getctx
)paren
comma
l_int|1
comma
l_int|0
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_SWITCH_CTX
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|switchctx
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_NEW_CTX
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|newctx
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_RES_CTX
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|resctx
)paren
comma
l_int|1
comma
l_int|0
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_ADD_DRAW
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|adddraw
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_RM_DRAW
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|rmdraw
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_LOCK
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|lock
)paren
comma
l_int|1
comma
l_int|0
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_UNLOCK
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|unlock
)paren
comma
l_int|1
comma
l_int|0
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_FINISH
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|finish
)paren
comma
l_int|1
comma
l_int|0
)brace
comma
macro_line|#if __HAVE_DMA
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_ADD_BUFS
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|addbufs
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_MARK_BUFS
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|markbufs
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_INFO_BUFS
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|infobufs
)paren
comma
l_int|1
comma
l_int|0
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_MAP_BUFS
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|mapbufs
)paren
comma
l_int|1
comma
l_int|0
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_FREE_BUFS
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|freebufs
)paren
comma
l_int|1
comma
l_int|0
)brace
comma
multiline_comment|/* The DRM_IOCTL_DMA ioctl should be defined by the driver.&n;&t; */
macro_line|#if __HAVE_DMA_IRQ
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_CONTROL
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|control
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
macro_line|#endif
macro_line|#endif
macro_line|#if __REALLY_HAVE_AGP
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_AGP_ACQUIRE
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|agp_acquire
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_AGP_RELEASE
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|agp_release
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_AGP_ENABLE
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|agp_enable
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_AGP_INFO
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|agp_info
)paren
comma
l_int|1
comma
l_int|0
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_AGP_ALLOC
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|agp_alloc
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_AGP_FREE
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|agp_free
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_AGP_BIND
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|agp_bind
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_AGP_UNBIND
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|agp_unbind
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
macro_line|#endif
macro_line|#if __HAVE_SG
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_SG_ALLOC
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|sg_alloc
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
(braket
id|DRM_IOCTL_NR
c_func
(paren
id|DRM_IOCTL_SG_FREE
)paren
)braket
op_assign
(brace
id|DRM
c_func
(paren
id|sg_free
)paren
comma
l_int|1
comma
l_int|1
)brace
comma
macro_line|#endif
id|DRIVER_IOCTLS
)brace
suffix:semicolon
DECL|macro|DRIVER_IOCTL_COUNT
mdefine_line|#define DRIVER_IOCTL_COUNT&t;DRM_ARRAY_SIZE( DRM(ioctls) )
macro_line|#ifdef MODULE
DECL|variable|drm_opts
r_static
r_char
op_star
id|drm_opts
op_assign
l_int|NULL
suffix:semicolon
macro_line|#endif
DECL|variable|DRIVER_AUTHOR
id|MODULE_AUTHOR
c_func
(paren
id|DRIVER_AUTHOR
)paren
suffix:semicolon
DECL|variable|DRIVER_DESC
id|MODULE_DESCRIPTION
c_func
(paren
id|DRIVER_DESC
)paren
suffix:semicolon
id|MODULE_PARM
c_func
(paren
id|drm_opts
comma
l_string|&quot;s&quot;
)paren
suffix:semicolon
DECL|function|setup
r_static
r_int
id|DRM
c_func
(paren
id|setup
)paren
(paren
id|drm_device_t
op_star
id|dev
)paren
(brace
r_int
id|i
suffix:semicolon
id|DRIVER_PRESETUP
c_func
(paren
)paren
suffix:semicolon
id|atomic_set
c_func
(paren
op_amp
id|dev-&gt;ioctl_count
comma
l_int|0
)paren
suffix:semicolon
id|atomic_set
c_func
(paren
op_amp
id|dev-&gt;vma_count
comma
l_int|0
)paren
suffix:semicolon
id|dev-&gt;buf_use
op_assign
l_int|0
suffix:semicolon
id|atomic_set
c_func
(paren
op_amp
id|dev-&gt;buf_alloc
comma
l_int|0
)paren
suffix:semicolon
macro_line|#if __HAVE_DMA
id|i
op_assign
id|DRM
c_func
(paren
id|dma_setup
)paren
(paren
id|dev
)paren
suffix:semicolon
r_if
c_cond
(paren
id|i
OL
l_int|0
)paren
r_return
id|i
suffix:semicolon
macro_line|#endif
id|dev-&gt;counters
op_assign
l_int|6
op_plus
id|__HAVE_COUNTERS
suffix:semicolon
id|dev-&gt;types
(braket
l_int|0
)braket
op_assign
id|_DRM_STAT_LOCK
suffix:semicolon
id|dev-&gt;types
(braket
l_int|1
)braket
op_assign
id|_DRM_STAT_OPENS
suffix:semicolon
id|dev-&gt;types
(braket
l_int|2
)braket
op_assign
id|_DRM_STAT_CLOSES
suffix:semicolon
id|dev-&gt;types
(braket
l_int|3
)braket
op_assign
id|_DRM_STAT_IOCTLS
suffix:semicolon
id|dev-&gt;types
(braket
l_int|4
)braket
op_assign
id|_DRM_STAT_LOCKS
suffix:semicolon
id|dev-&gt;types
(braket
l_int|5
)braket
op_assign
id|_DRM_STAT_UNLOCKS
suffix:semicolon
macro_line|#ifdef __HAVE_COUNTER6
id|dev-&gt;types
(braket
l_int|6
)braket
op_assign
id|__HAVE_COUNTER6
suffix:semicolon
macro_line|#endif
macro_line|#ifdef __HAVE_COUNTER7
id|dev-&gt;types
(braket
l_int|7
)braket
op_assign
id|__HAVE_COUNTER7
suffix:semicolon
macro_line|#endif
macro_line|#ifdef __HAVE_COUNTER8
id|dev-&gt;types
(braket
l_int|8
)braket
op_assign
id|__HAVE_COUNTER8
suffix:semicolon
macro_line|#endif
macro_line|#ifdef __HAVE_COUNTER9
id|dev-&gt;types
(braket
l_int|9
)braket
op_assign
id|__HAVE_COUNTER9
suffix:semicolon
macro_line|#endif
macro_line|#ifdef __HAVE_COUNTER10
id|dev-&gt;types
(braket
l_int|10
)braket
op_assign
id|__HAVE_COUNTER10
suffix:semicolon
macro_line|#endif
macro_line|#ifdef __HAVE_COUNTER11
id|dev-&gt;types
(braket
l_int|11
)braket
op_assign
id|__HAVE_COUNTER11
suffix:semicolon
macro_line|#endif
macro_line|#ifdef __HAVE_COUNTER12
id|dev-&gt;types
(braket
l_int|12
)braket
op_assign
id|__HAVE_COUNTER12
suffix:semicolon
macro_line|#endif
macro_line|#ifdef __HAVE_COUNTER13
id|dev-&gt;types
(braket
l_int|13
)braket
op_assign
id|__HAVE_COUNTER13
suffix:semicolon
macro_line|#endif
macro_line|#ifdef __HAVE_COUNTER14
id|dev-&gt;types
(braket
l_int|14
)braket
op_assign
id|__HAVE_COUNTER14
suffix:semicolon
macro_line|#endif
macro_line|#ifdef __HAVE_COUNTER15
id|dev-&gt;types
(braket
l_int|14
)braket
op_assign
id|__HAVE_COUNTER14
suffix:semicolon
macro_line|#endif
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|DRM_ARRAY_SIZE
c_func
(paren
id|dev-&gt;counts
)paren
suffix:semicolon
id|i
op_increment
)paren
id|atomic_set
c_func
(paren
op_amp
id|dev-&gt;counts
(braket
id|i
)braket
comma
l_int|0
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|DRM_HASH_SIZE
suffix:semicolon
id|i
op_increment
)paren
(brace
id|dev-&gt;magiclist
(braket
id|i
)braket
dot
id|head
op_assign
l_int|NULL
suffix:semicolon
id|dev-&gt;magiclist
(braket
id|i
)braket
dot
id|tail
op_assign
l_int|NULL
suffix:semicolon
)brace
id|dev-&gt;maplist
op_assign
id|DRM
c_func
(paren
id|alloc
)paren
(paren
r_sizeof
(paren
op_star
id|dev-&gt;maplist
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
r_if
c_cond
(paren
id|dev-&gt;maplist
op_eq
l_int|NULL
)paren
(brace
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|memset
c_func
(paren
id|dev-&gt;maplist
comma
l_int|0
comma
r_sizeof
(paren
op_star
id|dev-&gt;maplist
)paren
)paren
suffix:semicolon
id|INIT_LIST_HEAD
c_func
(paren
op_amp
id|dev-&gt;maplist-&gt;head
)paren
suffix:semicolon
id|dev-&gt;map_count
op_assign
l_int|0
suffix:semicolon
id|dev-&gt;vmalist
op_assign
l_int|NULL
suffix:semicolon
id|dev-&gt;lock.hw_lock
op_assign
l_int|NULL
suffix:semicolon
id|init_waitqueue_head
c_func
(paren
op_amp
id|dev-&gt;lock.lock_queue
)paren
suffix:semicolon
id|dev-&gt;queue_count
op_assign
l_int|0
suffix:semicolon
id|dev-&gt;queue_reserved
op_assign
l_int|0
suffix:semicolon
id|dev-&gt;queue_slots
op_assign
l_int|0
suffix:semicolon
id|dev-&gt;queuelist
op_assign
l_int|NULL
suffix:semicolon
id|dev-&gt;irq
op_assign
l_int|0
suffix:semicolon
id|dev-&gt;context_flag
op_assign
l_int|0
suffix:semicolon
id|dev-&gt;interrupt_flag
op_assign
l_int|0
suffix:semicolon
id|dev-&gt;dma_flag
op_assign
l_int|0
suffix:semicolon
id|dev-&gt;last_context
op_assign
l_int|0
suffix:semicolon
id|dev-&gt;last_switch
op_assign
l_int|0
suffix:semicolon
id|dev-&gt;last_checked
op_assign
l_int|0
suffix:semicolon
id|init_timer
c_func
(paren
op_amp
id|dev-&gt;timer
)paren
suffix:semicolon
id|init_waitqueue_head
c_func
(paren
op_amp
id|dev-&gt;context_wait
)paren
suffix:semicolon
id|dev-&gt;ctx_start
op_assign
l_int|0
suffix:semicolon
id|dev-&gt;lck_start
op_assign
l_int|0
suffix:semicolon
id|dev-&gt;buf_rp
op_assign
id|dev-&gt;buf
suffix:semicolon
id|dev-&gt;buf_wp
op_assign
id|dev-&gt;buf
suffix:semicolon
id|dev-&gt;buf_end
op_assign
id|dev-&gt;buf
op_plus
id|DRM_BSZ
suffix:semicolon
id|dev-&gt;buf_async
op_assign
l_int|NULL
suffix:semicolon
id|init_waitqueue_head
c_func
(paren
op_amp
id|dev-&gt;buf_readers
)paren
suffix:semicolon
id|init_waitqueue_head
c_func
(paren
op_amp
id|dev-&gt;buf_writers
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;&bslash;n&quot;
)paren
suffix:semicolon
multiline_comment|/* The kernel&squot;s context could be created here, but is now created&n;&t; * in drm_dma_enqueue.&t;This is more resource-efficient for&n;&t; * hardware that does not do DMA, but may mean that&n;&t; * drm_select_queue fails between the time the interrupt is&n;&t; * initialized and the time the queues are initialized.&n;&t; */
id|DRIVER_POSTSETUP
c_func
(paren
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|takedown
r_static
r_int
id|DRM
c_func
(paren
id|takedown
)paren
(paren
id|drm_device_t
op_star
id|dev
)paren
(brace
id|drm_magic_entry_t
op_star
id|pt
comma
op_star
id|next
suffix:semicolon
id|drm_map_t
op_star
id|map
suffix:semicolon
id|drm_map_list_t
op_star
id|r_list
suffix:semicolon
r_struct
id|list_head
op_star
id|list
comma
op_star
id|list_next
suffix:semicolon
id|drm_vma_entry_t
op_star
id|vma
comma
op_star
id|vma_next
suffix:semicolon
r_int
id|i
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;&bslash;n&quot;
)paren
suffix:semicolon
id|DRIVER_PRETAKEDOWN
c_func
(paren
)paren
suffix:semicolon
macro_line|#if __HAVE_DMA_IRQ
r_if
c_cond
(paren
id|dev-&gt;irq
)paren
id|DRM
c_func
(paren
id|irq_uninstall
)paren
(paren
id|dev
)paren
suffix:semicolon
macro_line|#endif
id|down
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|del_timer
c_func
(paren
op_amp
id|dev-&gt;timer
)paren
suffix:semicolon
r_if
c_cond
(paren
id|dev-&gt;devname
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|dev-&gt;devname
comma
id|strlen
c_func
(paren
id|dev-&gt;devname
)paren
op_plus
l_int|1
comma
id|DRM_MEM_DRIVER
)paren
suffix:semicolon
id|dev-&gt;devname
op_assign
l_int|NULL
suffix:semicolon
)brace
r_if
c_cond
(paren
id|dev-&gt;unique
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|dev-&gt;unique
comma
id|strlen
c_func
(paren
id|dev-&gt;unique
)paren
op_plus
l_int|1
comma
id|DRM_MEM_DRIVER
)paren
suffix:semicolon
id|dev-&gt;unique
op_assign
l_int|NULL
suffix:semicolon
id|dev-&gt;unique_len
op_assign
l_int|0
suffix:semicolon
)brace
multiline_comment|/* Clear pid list */
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|DRM_HASH_SIZE
suffix:semicolon
id|i
op_increment
)paren
(brace
r_for
c_loop
(paren
id|pt
op_assign
id|dev-&gt;magiclist
(braket
id|i
)braket
dot
id|head
suffix:semicolon
id|pt
suffix:semicolon
id|pt
op_assign
id|next
)paren
(brace
id|next
op_assign
id|pt-&gt;next
suffix:semicolon
id|DRM
c_func
(paren
id|free
)paren
(paren
id|pt
comma
r_sizeof
(paren
op_star
id|pt
)paren
comma
id|DRM_MEM_MAGIC
)paren
suffix:semicolon
)brace
id|dev-&gt;magiclist
(braket
id|i
)braket
dot
id|head
op_assign
id|dev-&gt;magiclist
(braket
id|i
)braket
dot
id|tail
op_assign
l_int|NULL
suffix:semicolon
)brace
macro_line|#if __REALLY_HAVE_AGP
multiline_comment|/* Clear AGP information */
r_if
c_cond
(paren
id|dev-&gt;agp
)paren
(brace
id|drm_agp_mem_t
op_star
id|entry
suffix:semicolon
id|drm_agp_mem_t
op_star
id|nexte
suffix:semicolon
multiline_comment|/* Remove AGP resources, but leave dev-&gt;agp&n;                                   intact until drv_cleanup is called. */
r_for
c_loop
(paren
id|entry
op_assign
id|dev-&gt;agp-&gt;memory
suffix:semicolon
id|entry
suffix:semicolon
id|entry
op_assign
id|nexte
)paren
(brace
id|nexte
op_assign
id|entry-&gt;next
suffix:semicolon
r_if
c_cond
(paren
id|entry-&gt;bound
)paren
id|DRM
c_func
(paren
id|unbind_agp
)paren
(paren
id|entry-&gt;memory
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|free_agp
)paren
(paren
id|entry-&gt;memory
comma
id|entry-&gt;pages
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|free
)paren
(paren
id|entry
comma
r_sizeof
(paren
op_star
id|entry
)paren
comma
id|DRM_MEM_AGPLISTS
)paren
suffix:semicolon
)brace
id|dev-&gt;agp-&gt;memory
op_assign
l_int|NULL
suffix:semicolon
r_if
c_cond
(paren
id|dev-&gt;agp-&gt;acquired
)paren
id|DRM
c_func
(paren
id|agp_do_release
)paren
(paren
)paren
suffix:semicolon
id|dev-&gt;agp-&gt;acquired
op_assign
l_int|0
suffix:semicolon
id|dev-&gt;agp-&gt;enabled
op_assign
l_int|0
suffix:semicolon
)brace
macro_line|#endif
multiline_comment|/* Clear vma list (only built for debugging) */
r_if
c_cond
(paren
id|dev-&gt;vmalist
)paren
(brace
r_for
c_loop
(paren
id|vma
op_assign
id|dev-&gt;vmalist
suffix:semicolon
id|vma
suffix:semicolon
id|vma
op_assign
id|vma_next
)paren
(brace
id|vma_next
op_assign
id|vma-&gt;next
suffix:semicolon
id|DRM
c_func
(paren
id|free
)paren
(paren
id|vma
comma
r_sizeof
(paren
op_star
id|vma
)paren
comma
id|DRM_MEM_VMAS
)paren
suffix:semicolon
)brace
id|dev-&gt;vmalist
op_assign
l_int|NULL
suffix:semicolon
)brace
r_if
c_cond
(paren
id|dev-&gt;maplist
)paren
(brace
r_for
c_loop
(paren
id|list
op_assign
id|dev-&gt;maplist-&gt;head.next
suffix:semicolon
id|list
op_ne
op_amp
id|dev-&gt;maplist-&gt;head
suffix:semicolon
id|list
op_assign
id|list_next
)paren
(brace
id|list_next
op_assign
id|list-&gt;next
suffix:semicolon
id|r_list
op_assign
(paren
id|drm_map_list_t
op_star
)paren
id|list
suffix:semicolon
id|map
op_assign
id|r_list-&gt;map
suffix:semicolon
id|DRM
c_func
(paren
id|free
)paren
(paren
id|r_list
comma
r_sizeof
(paren
op_star
id|r_list
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|map
)paren
(brace
r_continue
suffix:semicolon
)brace
r_switch
c_cond
(paren
id|map-&gt;type
)paren
(brace
r_case
id|_DRM_REGISTERS
suffix:colon
r_case
id|_DRM_FRAME_BUFFER
suffix:colon
macro_line|#if __REALLY_HAVE_MTRR
r_if
c_cond
(paren
id|map-&gt;mtrr
op_ge
l_int|0
)paren
(brace
r_int
id|retcode
suffix:semicolon
id|retcode
op_assign
id|mtrr_del
c_func
(paren
id|map-&gt;mtrr
comma
id|map-&gt;offset
comma
id|map-&gt;size
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;mtrr_del=%d&bslash;n&quot;
comma
id|retcode
)paren
suffix:semicolon
)brace
macro_line|#endif
id|DRM
c_func
(paren
id|ioremapfree
)paren
(paren
id|map-&gt;handle
comma
id|map-&gt;size
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|_DRM_SHM
suffix:colon
id|vfree
c_func
(paren
id|map-&gt;handle
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|_DRM_AGP
suffix:colon
multiline_comment|/* Do nothing here, because this is all&n;&t;&t;&t;&t; * handled in the AGP/GART driver.&n;&t;&t;&t;&t; */
r_break
suffix:semicolon
r_case
id|_DRM_SCATTER_GATHER
suffix:colon
multiline_comment|/* Handle it, but do nothing, if HAVE_SG&n;&t;&t;&t;&t; * isn&squot;t defined.&n;&t;&t;&t;&t; */
macro_line|#if __HAVE_SG
r_if
c_cond
(paren
id|dev-&gt;sg
)paren
(brace
id|DRM
c_func
(paren
id|sg_cleanup
)paren
(paren
id|dev-&gt;sg
)paren
suffix:semicolon
id|dev-&gt;sg
op_assign
l_int|NULL
suffix:semicolon
)brace
macro_line|#endif
r_break
suffix:semicolon
)brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|map
comma
r_sizeof
(paren
op_star
id|map
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
)brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|dev-&gt;maplist
comma
r_sizeof
(paren
op_star
id|dev-&gt;maplist
)paren
comma
id|DRM_MEM_MAPS
)paren
suffix:semicolon
id|dev-&gt;maplist
op_assign
l_int|NULL
suffix:semicolon
)brace
macro_line|#if __HAVE_DMA_QUEUE || __HAVE_MULTIPLE_DMA_QUEUES
r_if
c_cond
(paren
id|dev-&gt;queuelist
)paren
(brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|dev-&gt;queue_count
suffix:semicolon
id|i
op_increment
)paren
(brace
id|DRM
c_func
(paren
id|waitlist_destroy
)paren
(paren
op_amp
id|dev-&gt;queuelist
(braket
id|i
)braket
op_member_access_from_pointer
id|waitlist
)paren
suffix:semicolon
r_if
c_cond
(paren
id|dev-&gt;queuelist
(braket
id|i
)braket
)paren
(brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|dev-&gt;queuelist
(braket
id|i
)braket
comma
r_sizeof
(paren
op_star
id|dev-&gt;queuelist
(braket
l_int|0
)braket
)paren
comma
id|DRM_MEM_QUEUES
)paren
suffix:semicolon
id|dev-&gt;queuelist
(braket
id|i
)braket
op_assign
l_int|NULL
suffix:semicolon
)brace
)brace
id|DRM
c_func
(paren
id|free
)paren
(paren
id|dev-&gt;queuelist
comma
id|dev-&gt;queue_slots
op_star
r_sizeof
(paren
op_star
id|dev-&gt;queuelist
)paren
comma
id|DRM_MEM_QUEUES
)paren
suffix:semicolon
id|dev-&gt;queuelist
op_assign
l_int|NULL
suffix:semicolon
)brace
id|dev-&gt;queue_count
op_assign
l_int|0
suffix:semicolon
macro_line|#endif
macro_line|#if __HAVE_DMA
id|DRM
c_func
(paren
id|dma_takedown
)paren
(paren
id|dev
)paren
suffix:semicolon
macro_line|#endif
r_if
c_cond
(paren
id|dev-&gt;lock.hw_lock
)paren
(brace
id|dev-&gt;lock.hw_lock
op_assign
l_int|NULL
suffix:semicolon
multiline_comment|/* SHM removed */
id|dev-&gt;lock.pid
op_assign
l_int|0
suffix:semicolon
id|wake_up_interruptible
c_func
(paren
op_amp
id|dev-&gt;lock.lock_queue
)paren
suffix:semicolon
)brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * Figure out how many instances to initialize.&n; */
DECL|function|drm_count_cards
r_static
r_int
id|drm_count_cards
c_func
(paren
r_void
)paren
(brace
r_int
id|num
op_assign
l_int|0
suffix:semicolon
macro_line|#if defined(DRIVER_CARD_LIST)
r_int
id|i
suffix:semicolon
id|drm_pci_list_t
op_star
id|l
suffix:semicolon
id|u16
id|device
comma
id|vendor
suffix:semicolon
r_struct
id|pci_dev
op_star
id|pdev
op_assign
l_int|NULL
suffix:semicolon
macro_line|#endif
id|DRM_DEBUG
c_func
(paren
l_string|&quot;&bslash;n&quot;
)paren
suffix:semicolon
macro_line|#if defined(DRIVER_COUNT_CARDS)
id|num
op_assign
id|DRIVER_COUNT_CARDS
c_func
(paren
)paren
suffix:semicolon
macro_line|#elif defined(DRIVER_CARD_LIST)
r_for
c_loop
(paren
id|i
op_assign
l_int|0
comma
id|l
op_assign
id|DRIVER_CARD_LIST
suffix:semicolon
id|l
(braket
id|i
)braket
dot
id|vendor
op_ne
l_int|0
suffix:semicolon
id|i
op_increment
)paren
(brace
id|pdev
op_assign
l_int|NULL
suffix:semicolon
id|vendor
op_assign
id|l
(braket
id|i
)braket
dot
id|vendor
suffix:semicolon
id|device
op_assign
id|l
(braket
id|i
)braket
dot
id|device
suffix:semicolon
r_if
c_cond
(paren
id|device
op_eq
l_int|0xffff
)paren
(brace
id|device
op_assign
id|PCI_ANY_ID
suffix:semicolon
)brace
r_if
c_cond
(paren
id|vendor
op_eq
l_int|0xffff
)paren
(brace
id|vendor
op_assign
id|PCI_ANY_ID
suffix:semicolon
)brace
r_while
c_loop
(paren
(paren
id|pdev
op_assign
id|pci_find_device
c_func
(paren
id|vendor
comma
id|device
comma
id|pdev
)paren
)paren
)paren
(brace
id|num
op_increment
suffix:semicolon
)brace
)brace
macro_line|#else
id|num
op_assign
id|DRIVER_NUM_CARDS
suffix:semicolon
macro_line|#endif
id|DRM_DEBUG
c_func
(paren
l_string|&quot;numdevs = %d&bslash;n&quot;
comma
id|num
)paren
suffix:semicolon
r_return
id|num
suffix:semicolon
)brace
multiline_comment|/* drm_init is called via init_module at module load time, or via&n; * linux/init/main.c (this is not currently supported).&n; */
DECL|function|drm_init
r_static
r_int
id|__init
id|drm_init
c_func
(paren
r_void
)paren
(brace
id|drm_device_t
op_star
id|dev
suffix:semicolon
r_int
id|i
suffix:semicolon
macro_line|#if __HAVE_CTX_BITMAP
r_int
id|retcode
suffix:semicolon
macro_line|#endif
id|DRM_DEBUG
c_func
(paren
l_string|&quot;&bslash;n&quot;
)paren
suffix:semicolon
macro_line|#ifdef MODULE
id|DRM
c_func
(paren
id|parse_options
)paren
(paren
id|drm_opts
)paren
suffix:semicolon
macro_line|#endif
id|DRM
c_func
(paren
id|numdevs
)paren
op_assign
id|drm_count_cards
c_func
(paren
)paren
suffix:semicolon
multiline_comment|/* Force at least one instance. */
r_if
c_cond
(paren
id|DRM
c_func
(paren
id|numdevs
)paren
op_le
l_int|0
)paren
id|DRM
c_func
(paren
id|numdevs
)paren
op_assign
l_int|1
suffix:semicolon
id|DRM
c_func
(paren
id|device
)paren
op_assign
id|kmalloc
c_func
(paren
r_sizeof
(paren
op_star
id|DRM
c_func
(paren
id|device
)paren
)paren
op_star
id|DRM
c_func
(paren
id|numdevs
)paren
comma
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|DRM
c_func
(paren
id|device
)paren
)paren
(brace
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|DRM
c_func
(paren
id|minor
)paren
op_assign
id|kmalloc
c_func
(paren
r_sizeof
(paren
op_star
id|DRM
c_func
(paren
id|minor
)paren
)paren
op_star
id|DRM
c_func
(paren
id|numdevs
)paren
comma
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|DRM
c_func
(paren
id|minor
)paren
)paren
(brace
id|kfree
c_func
(paren
id|DRM
c_func
(paren
id|device
)paren
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
id|DRIVER_PREINIT
c_func
(paren
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|mem_init
)paren
(paren
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|DRM
c_func
(paren
id|numdevs
)paren
suffix:semicolon
id|i
op_increment
)paren
(brace
id|dev
op_assign
op_amp
(paren
id|DRM
c_func
(paren
id|device
)paren
(braket
id|i
)braket
)paren
suffix:semicolon
id|memset
c_func
(paren
(paren
r_void
op_star
)paren
id|dev
comma
l_int|0
comma
r_sizeof
(paren
op_star
id|dev
)paren
)paren
suffix:semicolon
id|dev-&gt;count_lock
op_assign
id|SPIN_LOCK_UNLOCKED
suffix:semicolon
id|sema_init
c_func
(paren
op_amp
id|dev-&gt;struct_sem
comma
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|DRM
c_func
(paren
id|minor
)paren
(braket
id|i
)braket
op_assign
id|DRM
c_func
(paren
id|stub_register
)paren
(paren
id|DRIVER_NAME
comma
op_amp
id|DRM
c_func
(paren
id|fops
)paren
comma
id|dev
)paren
)paren
OL
l_int|0
)paren
r_return
op_minus
id|EPERM
suffix:semicolon
id|dev-&gt;device
op_assign
id|MKDEV
c_func
(paren
id|DRM_MAJOR
comma
id|DRM
c_func
(paren
id|minor
)paren
(braket
id|i
)braket
)paren
suffix:semicolon
id|dev-&gt;name
op_assign
id|DRIVER_NAME
suffix:semicolon
macro_line|#if __REALLY_HAVE_AGP
id|dev-&gt;agp
op_assign
id|DRM
c_func
(paren
id|agp_init
)paren
(paren
)paren
suffix:semicolon
macro_line|#if __MUST_HAVE_AGP
r_if
c_cond
(paren
id|dev-&gt;agp
op_eq
l_int|NULL
)paren
(brace
id|DRM_ERROR
c_func
(paren
l_string|&quot;Cannot initialize the agpgart module.&bslash;n&quot;
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|stub_unregister
)paren
(paren
id|DRM
c_func
(paren
id|minor
)paren
(braket
id|i
)braket
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|takedown
)paren
(paren
id|dev
)paren
suffix:semicolon
r_return
op_minus
id|ENOMEM
suffix:semicolon
)brace
macro_line|#endif
macro_line|#if __REALLY_HAVE_MTRR
r_if
c_cond
(paren
id|dev-&gt;agp
)paren
id|dev-&gt;agp-&gt;agp_mtrr
op_assign
id|mtrr_add
c_func
(paren
id|dev-&gt;agp-&gt;agp_info.aper_base
comma
id|dev-&gt;agp-&gt;agp_info.aper_size
op_star
l_int|1024
op_star
l_int|1024
comma
id|MTRR_TYPE_WRCOMB
comma
l_int|1
)paren
suffix:semicolon
macro_line|#endif
macro_line|#endif
macro_line|#if __HAVE_CTX_BITMAP
id|retcode
op_assign
id|DRM
c_func
(paren
id|ctxbitmap_init
)paren
(paren
id|dev
)paren
suffix:semicolon
r_if
c_cond
(paren
id|retcode
)paren
(brace
id|DRM_ERROR
c_func
(paren
l_string|&quot;Cannot allocate memory for context bitmap.&bslash;n&quot;
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|stub_unregister
)paren
(paren
id|DRM
c_func
(paren
id|minor
)paren
(braket
id|i
)braket
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|takedown
)paren
(paren
id|dev
)paren
suffix:semicolon
r_return
id|retcode
suffix:semicolon
)brace
macro_line|#endif
id|DRM_INFO
c_func
(paren
l_string|&quot;Initialized %s %d.%d.%d %s on minor %d&bslash;n&quot;
comma
id|DRIVER_NAME
comma
id|DRIVER_MAJOR
comma
id|DRIVER_MINOR
comma
id|DRIVER_PATCHLEVEL
comma
id|DRIVER_DATE
comma
id|DRM
c_func
(paren
id|minor
)paren
(braket
id|i
)braket
)paren
suffix:semicolon
)brace
id|DRIVER_POSTINIT
c_func
(paren
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/* drm_cleanup is called via cleanup_module at module unload time.&n; */
DECL|function|drm_cleanup
r_static
r_void
id|__exit
id|drm_cleanup
c_func
(paren
r_void
)paren
(brace
id|drm_device_t
op_star
id|dev
suffix:semicolon
r_int
id|i
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;&bslash;n&quot;
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
id|DRM
c_func
(paren
id|numdevs
)paren
op_minus
l_int|1
suffix:semicolon
id|i
op_ge
l_int|0
suffix:semicolon
id|i
op_decrement
)paren
(brace
id|dev
op_assign
op_amp
(paren
id|DRM
c_func
(paren
id|device
)paren
(braket
id|i
)braket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|DRM
c_func
(paren
id|stub_unregister
)paren
(paren
id|DRM
c_func
(paren
id|minor
)paren
(braket
id|i
)braket
)paren
)paren
(brace
id|DRM_ERROR
c_func
(paren
l_string|&quot;Cannot unload module&bslash;n&quot;
)paren
suffix:semicolon
)brace
r_else
(brace
id|DRM_DEBUG
c_func
(paren
l_string|&quot;minor %d unregistered&bslash;n&quot;
comma
id|DRM
c_func
(paren
id|minor
)paren
(braket
id|i
)braket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|i
op_eq
l_int|0
)paren
(brace
id|DRM_INFO
c_func
(paren
l_string|&quot;Module unloaded&bslash;n&quot;
)paren
suffix:semicolon
)brace
)brace
macro_line|#if __HAVE_CTX_BITMAP
id|DRM
c_func
(paren
id|ctxbitmap_cleanup
)paren
(paren
id|dev
)paren
suffix:semicolon
macro_line|#endif
macro_line|#if __REALLY_HAVE_AGP &amp;&amp; __REALLY_HAVE_MTRR
r_if
c_cond
(paren
id|dev-&gt;agp
op_logical_and
id|dev-&gt;agp-&gt;agp_mtrr
op_ge
l_int|0
)paren
(brace
r_int
id|retval
suffix:semicolon
id|retval
op_assign
id|mtrr_del
c_func
(paren
id|dev-&gt;agp-&gt;agp_mtrr
comma
id|dev-&gt;agp-&gt;agp_info.aper_base
comma
id|dev-&gt;agp-&gt;agp_info.aper_size
op_star
l_int|1024
op_star
l_int|1024
)paren
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;mtrr_del=%d&bslash;n&quot;
comma
id|retval
)paren
suffix:semicolon
)brace
macro_line|#endif
id|DRM
c_func
(paren
id|takedown
)paren
(paren
id|dev
)paren
suffix:semicolon
macro_line|#if __REALLY_HAVE_AGP
r_if
c_cond
(paren
id|dev-&gt;agp
)paren
(brace
id|DRM
c_func
(paren
id|agp_uninit
)paren
(paren
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|free
)paren
(paren
id|dev-&gt;agp
comma
r_sizeof
(paren
op_star
id|dev-&gt;agp
)paren
comma
id|DRM_MEM_AGPLISTS
)paren
suffix:semicolon
id|dev-&gt;agp
op_assign
l_int|NULL
suffix:semicolon
)brace
macro_line|#endif
)brace
id|DRIVER_POSTCLEANUP
c_func
(paren
)paren
suffix:semicolon
id|kfree
c_func
(paren
id|DRM
c_func
(paren
id|minor
)paren
)paren
suffix:semicolon
id|kfree
c_func
(paren
id|DRM
c_func
(paren
id|device
)paren
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|numdevs
)paren
op_assign
l_int|0
suffix:semicolon
)brace
DECL|variable|drm_init
id|module_init
c_func
(paren
id|drm_init
)paren
suffix:semicolon
DECL|variable|drm_cleanup
id|module_exit
c_func
(paren
id|drm_cleanup
)paren
suffix:semicolon
DECL|function|version
r_int
id|DRM
c_func
(paren
id|version
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_version_t
id|version
suffix:semicolon
r_int
id|len
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|version
comma
(paren
id|drm_version_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|version
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
DECL|macro|DRM_COPY
mdefine_line|#define DRM_COPY( name, value )&t;&t;&t;&t;&t;&t;&bslash;&n;&t;len = strlen( value );&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if ( len &gt; name##_len ) len = name##_len;&t;&t;&t;&bslash;&n;&t;name##_len = strlen( value );&t;&t;&t;&t;&t;&bslash;&n;&t;if ( len &amp;&amp; name ) {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;if ( copy_to_user( name, value, len ) )&t;&t;&t;&bslash;&n;&t;&t;&t;return -EFAULT;&t;&t;&t;&t;&t;&bslash;&n;&t;}
id|version.version_major
op_assign
id|DRIVER_MAJOR
suffix:semicolon
id|version.version_minor
op_assign
id|DRIVER_MINOR
suffix:semicolon
id|version.version_patchlevel
op_assign
id|DRIVER_PATCHLEVEL
suffix:semicolon
id|DRM_COPY
c_func
(paren
id|version.name
comma
id|DRIVER_NAME
)paren
suffix:semicolon
id|DRM_COPY
c_func
(paren
id|version.date
comma
id|DRIVER_DATE
)paren
suffix:semicolon
id|DRM_COPY
c_func
(paren
id|version.desc
comma
id|DRIVER_DESC
)paren
suffix:semicolon
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
(paren
id|drm_version_t
op_star
)paren
id|arg
comma
op_amp
id|version
comma
r_sizeof
(paren
id|version
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|open
r_int
id|DRM
c_func
(paren
id|open
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
)paren
(brace
id|drm_device_t
op_star
id|dev
op_assign
l_int|NULL
suffix:semicolon
r_int
id|retcode
op_assign
l_int|0
suffix:semicolon
r_int
id|i
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|DRM
c_func
(paren
id|numdevs
)paren
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|MINOR
c_func
(paren
id|inode-&gt;i_rdev
)paren
op_eq
id|DRM
c_func
(paren
id|minor
)paren
(braket
id|i
)braket
)paren
(brace
id|dev
op_assign
op_amp
(paren
id|DRM
c_func
(paren
id|device
)paren
(braket
id|i
)braket
)paren
suffix:semicolon
r_break
suffix:semicolon
)brace
)brace
r_if
c_cond
(paren
op_logical_neg
id|dev
)paren
(brace
r_return
op_minus
id|ENODEV
suffix:semicolon
)brace
id|DRM_DEBUG
c_func
(paren
l_string|&quot;open_count = %d&bslash;n&quot;
comma
id|dev-&gt;open_count
)paren
suffix:semicolon
id|retcode
op_assign
id|DRM
c_func
(paren
id|open_helper
)paren
(paren
id|inode
comma
id|filp
comma
id|dev
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|retcode
)paren
(brace
macro_line|#if LINUX_VERSION_CODE &lt; 0x020333
id|MOD_INC_USE_COUNT
suffix:semicolon
multiline_comment|/* Needed before Linux 2.3.51 */
macro_line|#endif
id|atomic_inc
c_func
(paren
op_amp
id|dev-&gt;counts
(braket
id|_DRM_STAT_OPENS
)braket
)paren
suffix:semicolon
id|spin_lock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dev-&gt;open_count
op_increment
)paren
(brace
id|spin_unlock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
r_return
id|DRM
c_func
(paren
id|setup
)paren
(paren
id|dev
)paren
suffix:semicolon
)brace
id|spin_unlock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
)brace
r_return
id|retcode
suffix:semicolon
)brace
DECL|function|release
r_int
id|DRM
c_func
(paren
id|release
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
suffix:semicolon
r_int
id|retcode
op_assign
l_int|0
suffix:semicolon
id|lock_kernel
c_func
(paren
)paren
suffix:semicolon
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;open_count = %d&bslash;n&quot;
comma
id|dev-&gt;open_count
)paren
suffix:semicolon
id|DRIVER_PRERELEASE
c_func
(paren
)paren
suffix:semicolon
multiline_comment|/* ========================================================&n;&t; * Begin inline drm_release&n;&t; */
id|DRM_DEBUG
c_func
(paren
l_string|&quot;pid = %d, device = 0x%x, open_count = %d&bslash;n&quot;
comma
id|current-&gt;pid
comma
id|dev-&gt;device
comma
id|dev-&gt;open_count
)paren
suffix:semicolon
r_if
c_cond
(paren
id|dev-&gt;lock.hw_lock
op_logical_and
id|_DRM_LOCK_IS_HELD
c_func
(paren
id|dev-&gt;lock.hw_lock-&gt;lock
)paren
op_logical_and
id|dev-&gt;lock.pid
op_eq
id|current-&gt;pid
)paren
(brace
id|DRM_DEBUG
c_func
(paren
l_string|&quot;Process %d dead, freeing lock for context %d&bslash;n&quot;
comma
id|current-&gt;pid
comma
id|_DRM_LOCKING_CONTEXT
c_func
(paren
id|dev-&gt;lock.hw_lock-&gt;lock
)paren
)paren
suffix:semicolon
macro_line|#if __HAVE_RELEASE
id|DRIVER_RELEASE
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
id|DRM
c_func
(paren
id|lock_free
)paren
(paren
id|dev
comma
op_amp
id|dev-&gt;lock.hw_lock-&gt;lock
comma
id|_DRM_LOCKING_CONTEXT
c_func
(paren
id|dev-&gt;lock.hw_lock-&gt;lock
)paren
)paren
suffix:semicolon
multiline_comment|/* FIXME: may require heavy-handed reset of&n;                                   hardware at this point, possibly&n;                                   processed via a callback to the X&n;                                   server. */
)brace
macro_line|#if __HAVE_RELEASE
r_else
r_if
c_cond
(paren
id|dev-&gt;lock.hw_lock
)paren
(brace
multiline_comment|/* The lock is required to reclaim buffers */
id|DECLARE_WAITQUEUE
c_func
(paren
id|entry
comma
id|current
)paren
suffix:semicolon
id|add_wait_queue
c_func
(paren
op_amp
id|dev-&gt;lock.lock_queue
comma
op_amp
id|entry
)paren
suffix:semicolon
r_for
c_loop
(paren
suffix:semicolon
suffix:semicolon
)paren
(brace
id|current-&gt;state
op_assign
id|TASK_INTERRUPTIBLE
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dev-&gt;lock.hw_lock
)paren
(brace
multiline_comment|/* Device has been unregistered */
id|retcode
op_assign
op_minus
id|EINTR
suffix:semicolon
r_break
suffix:semicolon
)brace
r_if
c_cond
(paren
id|DRM
c_func
(paren
id|lock_take
)paren
(paren
op_amp
id|dev-&gt;lock.hw_lock-&gt;lock
comma
id|DRM_KERNEL_CONTEXT
)paren
)paren
(brace
id|dev-&gt;lock.pid
op_assign
id|priv-&gt;pid
suffix:semicolon
id|dev-&gt;lock.lock_time
op_assign
id|jiffies
suffix:semicolon
id|atomic_inc
c_func
(paren
op_amp
id|dev-&gt;counts
(braket
id|_DRM_STAT_LOCKS
)braket
)paren
suffix:semicolon
r_break
suffix:semicolon
multiline_comment|/* Got lock */
)brace
multiline_comment|/* Contention */
macro_line|#if 0
id|atomic_inc
c_func
(paren
op_amp
id|dev-&gt;total_sleeps
)paren
suffix:semicolon
macro_line|#endif
id|schedule
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|signal_pending
c_func
(paren
id|current
)paren
)paren
(brace
id|retcode
op_assign
op_minus
id|ERESTARTSYS
suffix:semicolon
r_break
suffix:semicolon
)brace
)brace
id|current-&gt;state
op_assign
id|TASK_RUNNING
suffix:semicolon
id|remove_wait_queue
c_func
(paren
op_amp
id|dev-&gt;lock.lock_queue
comma
op_amp
id|entry
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|retcode
)paren
(brace
id|DRIVER_RELEASE
c_func
(paren
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|lock_free
)paren
(paren
id|dev
comma
op_amp
id|dev-&gt;lock.hw_lock-&gt;lock
comma
id|DRM_KERNEL_CONTEXT
)paren
suffix:semicolon
)brace
)brace
macro_line|#elif __HAVE_DMA
id|DRM
c_func
(paren
id|reclaim_buffers
)paren
(paren
id|dev
comma
id|priv-&gt;pid
)paren
suffix:semicolon
macro_line|#endif
id|DRM
c_func
(paren
id|fasync
)paren
(paren
op_minus
l_int|1
comma
id|filp
comma
l_int|0
)paren
suffix:semicolon
id|down
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
r_if
c_cond
(paren
id|priv-&gt;remove_auth_on_close
op_eq
l_int|1
)paren
(brace
id|drm_file_t
op_star
id|temp
op_assign
id|dev-&gt;file_first
suffix:semicolon
r_while
c_loop
(paren
id|temp
)paren
(brace
id|temp-&gt;authenticated
op_assign
l_int|0
suffix:semicolon
id|temp
op_assign
id|temp-&gt;next
suffix:semicolon
)brace
)brace
r_if
c_cond
(paren
id|priv-&gt;prev
)paren
(brace
id|priv-&gt;prev-&gt;next
op_assign
id|priv-&gt;next
suffix:semicolon
)brace
r_else
(brace
id|dev-&gt;file_first
op_assign
id|priv-&gt;next
suffix:semicolon
)brace
r_if
c_cond
(paren
id|priv-&gt;next
)paren
(brace
id|priv-&gt;next-&gt;prev
op_assign
id|priv-&gt;prev
suffix:semicolon
)brace
r_else
(brace
id|dev-&gt;file_last
op_assign
id|priv-&gt;prev
suffix:semicolon
)brace
id|up
c_func
(paren
op_amp
id|dev-&gt;struct_sem
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|free
)paren
(paren
id|priv
comma
r_sizeof
(paren
op_star
id|priv
)paren
comma
id|DRM_MEM_FILES
)paren
suffix:semicolon
multiline_comment|/* ========================================================&n;&t; * End inline drm_release&n;&t; */
macro_line|#if LINUX_VERSION_CODE &lt; 0x020333
id|MOD_DEC_USE_COUNT
suffix:semicolon
multiline_comment|/* Needed before Linux 2.3.51 */
macro_line|#endif
id|atomic_inc
c_func
(paren
op_amp
id|dev-&gt;counts
(braket
id|_DRM_STAT_CLOSES
)braket
)paren
suffix:semicolon
id|spin_lock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
op_decrement
id|dev-&gt;open_count
)paren
(brace
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|dev-&gt;ioctl_count
)paren
op_logical_or
id|dev-&gt;blocked
)paren
(brace
id|DRM_ERROR
c_func
(paren
l_string|&quot;Device busy: %d %d&bslash;n&quot;
comma
id|atomic_read
c_func
(paren
op_amp
id|dev-&gt;ioctl_count
)paren
comma
id|dev-&gt;blocked
)paren
suffix:semicolon
id|spin_unlock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
id|unlock_kernel
c_func
(paren
)paren
suffix:semicolon
r_return
op_minus
id|EBUSY
suffix:semicolon
)brace
id|spin_unlock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
id|unlock_kernel
c_func
(paren
)paren
suffix:semicolon
r_return
id|DRM
c_func
(paren
id|takedown
)paren
(paren
id|dev
)paren
suffix:semicolon
)brace
id|spin_unlock
c_func
(paren
op_amp
id|dev-&gt;count_lock
)paren
suffix:semicolon
id|unlock_kernel
c_func
(paren
)paren
suffix:semicolon
r_return
id|retcode
suffix:semicolon
)brace
multiline_comment|/* DRM(ioctl) is called whenever a process performs an ioctl on /dev/drm.&n; */
DECL|function|ioctl
r_int
id|DRM
c_func
(paren
id|ioctl
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_ioctl_desc_t
op_star
id|ioctl
suffix:semicolon
id|drm_ioctl_t
op_star
id|func
suffix:semicolon
r_int
id|nr
op_assign
id|DRM_IOCTL_NR
c_func
(paren
id|cmd
)paren
suffix:semicolon
r_int
id|retcode
op_assign
l_int|0
suffix:semicolon
id|atomic_inc
c_func
(paren
op_amp
id|dev-&gt;ioctl_count
)paren
suffix:semicolon
id|atomic_inc
c_func
(paren
op_amp
id|dev-&gt;counts
(braket
id|_DRM_STAT_IOCTLS
)braket
)paren
suffix:semicolon
op_increment
id|priv-&gt;ioctl_count
suffix:semicolon
id|DRM_DEBUG
c_func
(paren
l_string|&quot;pid=%d, cmd=0x%02x, nr=0x%02x, dev 0x%x, auth=%d&bslash;n&quot;
comma
id|current-&gt;pid
comma
id|cmd
comma
id|nr
comma
id|dev-&gt;device
comma
id|priv-&gt;authenticated
)paren
suffix:semicolon
r_if
c_cond
(paren
id|nr
op_ge
id|DRIVER_IOCTL_COUNT
)paren
(brace
id|retcode
op_assign
op_minus
id|EINVAL
suffix:semicolon
)brace
r_else
(brace
id|ioctl
op_assign
op_amp
id|DRM
c_func
(paren
id|ioctls
)paren
(braket
id|nr
)braket
suffix:semicolon
id|func
op_assign
id|ioctl-&gt;func
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|func
)paren
(brace
id|DRM_DEBUG
c_func
(paren
l_string|&quot;no function&bslash;n&quot;
)paren
suffix:semicolon
id|retcode
op_assign
op_minus
id|EINVAL
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
(paren
id|ioctl-&gt;root_only
op_logical_and
op_logical_neg
id|capable
c_func
(paren
id|CAP_SYS_ADMIN
)paren
)paren
op_logical_or
(paren
id|ioctl-&gt;auth_needed
op_logical_and
op_logical_neg
id|priv-&gt;authenticated
)paren
)paren
(brace
id|retcode
op_assign
op_minus
id|EACCES
suffix:semicolon
)brace
r_else
(brace
id|retcode
op_assign
id|func
c_func
(paren
id|inode
comma
id|filp
comma
id|cmd
comma
id|arg
)paren
suffix:semicolon
)brace
)brace
id|atomic_dec
c_func
(paren
op_amp
id|dev-&gt;ioctl_count
)paren
suffix:semicolon
r_return
id|retcode
suffix:semicolon
)brace
DECL|function|lock
r_int
id|DRM
c_func
(paren
id|lock
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|DECLARE_WAITQUEUE
c_func
(paren
id|entry
comma
id|current
)paren
suffix:semicolon
id|drm_lock_t
id|lock
suffix:semicolon
r_int
id|ret
op_assign
l_int|0
suffix:semicolon
macro_line|#if __HAVE_MULTIPLE_DMA_QUEUES
id|drm_queue_t
op_star
id|q
suffix:semicolon
macro_line|#endif
macro_line|#if __HAVE_DMA_HISTOGRAM
id|cycles_t
id|start
suffix:semicolon
id|dev-&gt;lck_start
op_assign
id|start
op_assign
id|get_cycles
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|lock
comma
(paren
id|drm_lock_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|lock
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_if
c_cond
(paren
id|lock.context
op_eq
id|DRM_KERNEL_CONTEXT
)paren
(brace
id|DRM_ERROR
c_func
(paren
l_string|&quot;Process %d using kernel context %d&bslash;n&quot;
comma
id|current-&gt;pid
comma
id|lock.context
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|DRM_DEBUG
c_func
(paren
l_string|&quot;%d (pid %d) requests lock (0x%08x), flags = 0x%08x&bslash;n&quot;
comma
id|lock.context
comma
id|current-&gt;pid
comma
id|dev-&gt;lock.hw_lock-&gt;lock
comma
id|lock.flags
)paren
suffix:semicolon
macro_line|#if __HAVE_DMA_QUEUE
r_if
c_cond
(paren
id|lock.context
OL
l_int|0
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
macro_line|#elif __HAVE_MULTIPLE_DMA_QUEUES
r_if
c_cond
(paren
id|lock.context
OL
l_int|0
op_logical_or
id|lock.context
op_ge
id|dev-&gt;queue_count
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
id|q
op_assign
id|dev-&gt;queuelist
(braket
id|lock.context
)braket
suffix:semicolon
macro_line|#endif
macro_line|#if __HAVE_DMA_FLUSH
id|ret
op_assign
id|DRM
c_func
(paren
id|flush_block_and_flush
)paren
(paren
id|dev
comma
id|lock.context
comma
id|lock.flags
)paren
suffix:semicolon
macro_line|#endif
r_if
c_cond
(paren
op_logical_neg
id|ret
)paren
(brace
id|add_wait_queue
c_func
(paren
op_amp
id|dev-&gt;lock.lock_queue
comma
op_amp
id|entry
)paren
suffix:semicolon
r_for
c_loop
(paren
suffix:semicolon
suffix:semicolon
)paren
(brace
id|current-&gt;state
op_assign
id|TASK_INTERRUPTIBLE
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|dev-&gt;lock.hw_lock
)paren
(brace
multiline_comment|/* Device has been unregistered */
id|ret
op_assign
op_minus
id|EINTR
suffix:semicolon
r_break
suffix:semicolon
)brace
r_if
c_cond
(paren
id|DRM
c_func
(paren
id|lock_take
)paren
(paren
op_amp
id|dev-&gt;lock.hw_lock-&gt;lock
comma
id|lock.context
)paren
)paren
(brace
id|dev-&gt;lock.pid
op_assign
id|current-&gt;pid
suffix:semicolon
id|dev-&gt;lock.lock_time
op_assign
id|jiffies
suffix:semicolon
id|atomic_inc
c_func
(paren
op_amp
id|dev-&gt;counts
(braket
id|_DRM_STAT_LOCKS
)braket
)paren
suffix:semicolon
r_break
suffix:semicolon
multiline_comment|/* Got lock */
)brace
multiline_comment|/* Contention */
id|schedule
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|signal_pending
c_func
(paren
id|current
)paren
)paren
(brace
id|ret
op_assign
op_minus
id|ERESTARTSYS
suffix:semicolon
r_break
suffix:semicolon
)brace
)brace
id|current-&gt;state
op_assign
id|TASK_RUNNING
suffix:semicolon
id|remove_wait_queue
c_func
(paren
op_amp
id|dev-&gt;lock.lock_queue
comma
op_amp
id|entry
)paren
suffix:semicolon
)brace
macro_line|#if __HAVE_DMA_FLUSH
id|DRM
c_func
(paren
id|flush_unblock
)paren
(paren
id|dev
comma
id|lock.context
comma
id|lock.flags
)paren
suffix:semicolon
multiline_comment|/* cleanup phase */
macro_line|#endif
r_if
c_cond
(paren
op_logical_neg
id|ret
)paren
(brace
id|sigemptyset
c_func
(paren
op_amp
id|dev-&gt;sigmask
)paren
suffix:semicolon
id|sigaddset
c_func
(paren
op_amp
id|dev-&gt;sigmask
comma
id|SIGSTOP
)paren
suffix:semicolon
id|sigaddset
c_func
(paren
op_amp
id|dev-&gt;sigmask
comma
id|SIGTSTP
)paren
suffix:semicolon
id|sigaddset
c_func
(paren
op_amp
id|dev-&gt;sigmask
comma
id|SIGTTIN
)paren
suffix:semicolon
id|sigaddset
c_func
(paren
op_amp
id|dev-&gt;sigmask
comma
id|SIGTTOU
)paren
suffix:semicolon
id|dev-&gt;sigdata.context
op_assign
id|lock.context
suffix:semicolon
id|dev-&gt;sigdata.lock
op_assign
id|dev-&gt;lock.hw_lock
suffix:semicolon
id|block_all_signals
c_func
(paren
id|DRM
c_func
(paren
id|notifier
)paren
comma
op_amp
id|dev-&gt;sigdata
comma
op_amp
id|dev-&gt;sigmask
)paren
suffix:semicolon
macro_line|#if __HAVE_DMA_READY
r_if
c_cond
(paren
id|lock.flags
op_amp
id|_DRM_LOCK_READY
)paren
(brace
id|DRIVER_DMA_READY
c_func
(paren
)paren
suffix:semicolon
)brace
macro_line|#endif
macro_line|#if __HAVE_DMA_QUIESCENT
r_if
c_cond
(paren
id|lock.flags
op_amp
id|_DRM_LOCK_QUIESCENT
)paren
(brace
id|DRIVER_DMA_QUIESCENT
c_func
(paren
)paren
suffix:semicolon
)brace
macro_line|#endif
macro_line|#if __HAVE_KERNEL_CTX_SWITCH
r_if
c_cond
(paren
id|dev-&gt;last_context
op_ne
id|lock.context
)paren
(brace
id|DRM
c_func
(paren
id|context_switch
)paren
(paren
id|dev
comma
id|dev-&gt;last_context
comma
id|lock.context
)paren
suffix:semicolon
)brace
macro_line|#endif
)brace
id|DRM_DEBUG
c_func
(paren
l_string|&quot;%d %s&bslash;n&quot;
comma
id|lock.context
comma
id|ret
ques
c_cond
l_string|&quot;interrupted&quot;
suffix:colon
l_string|&quot;has lock&quot;
)paren
suffix:semicolon
macro_line|#if __HAVE_DMA_HISTOGRAM
id|atomic_inc
c_func
(paren
op_amp
id|dev-&gt;histo.lacq
(braket
id|DRM
c_func
(paren
id|histogram_slot
)paren
(paren
id|get_cycles
c_func
(paren
)paren
op_minus
id|start
)paren
)braket
)paren
suffix:semicolon
macro_line|#endif
r_return
id|ret
suffix:semicolon
)brace
DECL|function|unlock
r_int
id|DRM
c_func
(paren
id|unlock
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
id|drm_file_t
op_star
id|priv
op_assign
id|filp-&gt;private_data
suffix:semicolon
id|drm_device_t
op_star
id|dev
op_assign
id|priv-&gt;dev
suffix:semicolon
id|drm_lock_t
id|lock
suffix:semicolon
r_if
c_cond
(paren
id|copy_from_user
c_func
(paren
op_amp
id|lock
comma
(paren
id|drm_lock_t
op_star
)paren
id|arg
comma
r_sizeof
(paren
id|lock
)paren
)paren
)paren
r_return
op_minus
id|EFAULT
suffix:semicolon
r_if
c_cond
(paren
id|lock.context
op_eq
id|DRM_KERNEL_CONTEXT
)paren
(brace
id|DRM_ERROR
c_func
(paren
l_string|&quot;Process %d using kernel context %d&bslash;n&quot;
comma
id|current-&gt;pid
comma
id|lock.context
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
id|atomic_inc
c_func
(paren
op_amp
id|dev-&gt;counts
(braket
id|_DRM_STAT_UNLOCKS
)braket
)paren
suffix:semicolon
id|DRM
c_func
(paren
id|lock_transfer
)paren
(paren
id|dev
comma
op_amp
id|dev-&gt;lock.hw_lock-&gt;lock
comma
id|DRM_KERNEL_CONTEXT
)paren
suffix:semicolon
macro_line|#if __HAVE_DMA_SCHEDULE
id|DRM
c_func
(paren
id|dma_schedule
)paren
(paren
id|dev
comma
l_int|1
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/* FIXME: Do we ever really need to check this???&n;&t; */
r_if
c_cond
(paren
l_int|1
multiline_comment|/* !dev-&gt;context_flag */
)paren
(brace
r_if
c_cond
(paren
id|DRM
c_func
(paren
id|lock_free
)paren
(paren
id|dev
comma
op_amp
id|dev-&gt;lock.hw_lock-&gt;lock
comma
id|DRM_KERNEL_CONTEXT
)paren
)paren
(brace
id|DRM_ERROR
c_func
(paren
l_string|&quot;&bslash;n&quot;
)paren
suffix:semicolon
)brace
)brace
id|unblock_all_signals
c_func
(paren
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
eof
