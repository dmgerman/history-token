multiline_comment|/*&n; * ipmi_si_sm.h&n; *&n; * State machine interface for low-level IPMI system management&n; * interface state machines.  This code is the interface between&n; * the ipmi_smi code (that handles the policy of a KCS, SMIC, or&n; * BT interface) and the actual low-level state machine.&n; *&n; * Author: MontaVista Software, Inc.&n; *         Corey Minyard &lt;minyard@mvista.com&gt;&n; *         source@mvista.com&n; *&n; * Copyright 2002 MontaVista Software Inc.&n; *&n; *  This program is free software; you can redistribute it and/or modify it&n; *  under the terms of the GNU General Public License as published by the&n; *  Free Software Foundation; either version 2 of the License, or (at your&n; *  option) any later version.&n; *&n; *&n; *  THIS SOFTWARE IS PROVIDED ``AS IS&squot;&squot; AND ANY EXPRESS OR IMPLIED&n; *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&n; *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.&n; *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,&n; *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,&n; *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS&n; *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND&n; *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR&n; *  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE&n; *  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&n; *&n; *  You should have received a copy of the GNU General Public License along&n; *  with this program; if not, write to the Free Software Foundation, Inc.,&n; *  675 Mass Ave, Cambridge, MA 02139, USA.&n; */
multiline_comment|/* This is defined by the state machines themselves, it is an opaque&n;   data type for them to use. */
r_struct
id|si_sm_data
suffix:semicolon
multiline_comment|/* The structure for doing I/O in the state machine.  The state&n;   machine doesn&squot;t have the actual I/O routines, they are done through&n;   this interface. */
DECL|struct|si_sm_io
r_struct
id|si_sm_io
(brace
DECL|member|inputb
r_int
r_char
(paren
op_star
id|inputb
)paren
(paren
r_struct
id|si_sm_io
op_star
id|io
comma
r_int
r_int
id|offset
)paren
suffix:semicolon
DECL|member|outputb
r_void
(paren
op_star
id|outputb
)paren
(paren
r_struct
id|si_sm_io
op_star
id|io
comma
r_int
r_int
id|offset
comma
r_int
r_char
id|b
)paren
suffix:semicolon
multiline_comment|/* Generic info used by the actual handling routines, the&n;           state machine shouldn&squot;t touch these. */
DECL|member|info
r_void
op_star
id|info
suffix:semicolon
DECL|member|addr
r_void
op_star
id|addr
suffix:semicolon
DECL|member|regspacing
r_int
id|regspacing
suffix:semicolon
DECL|member|regsize
r_int
id|regsize
suffix:semicolon
DECL|member|regshift
r_int
id|regshift
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Results of SMI events. */
DECL|enum|si_sm_result
r_enum
id|si_sm_result
(brace
DECL|enumerator|SI_SM_CALL_WITHOUT_DELAY
id|SI_SM_CALL_WITHOUT_DELAY
comma
multiline_comment|/* Call the driver again immediately */
DECL|enumerator|SI_SM_CALL_WITH_DELAY
id|SI_SM_CALL_WITH_DELAY
comma
multiline_comment|/* Delay some before calling again. */
DECL|enumerator|SI_SM_TRANSACTION_COMPLETE
id|SI_SM_TRANSACTION_COMPLETE
comma
multiline_comment|/* A transaction is finished. */
DECL|enumerator|SI_SM_IDLE
id|SI_SM_IDLE
comma
multiline_comment|/* The SM is in idle state. */
DECL|enumerator|SI_SM_HOSED
id|SI_SM_HOSED
comma
multiline_comment|/* The hardware violated the state machine. */
DECL|enumerator|SI_SM_ATTN
id|SI_SM_ATTN
multiline_comment|/* The hardware is asserting attn and the&n;&t;&t;&t;&t;   state machine is idle. */
)brace
suffix:semicolon
multiline_comment|/* Handlers for the SMI state machine. */
DECL|struct|si_sm_handlers
r_struct
id|si_sm_handlers
(brace
multiline_comment|/* Put the version number of the state machine here so the&n;           upper layer can print it. */
DECL|member|version
r_char
op_star
id|version
suffix:semicolon
multiline_comment|/* Initialize the data and return the amount of I/O space to&n;           reserve for the space. */
DECL|member|init_data
r_int
r_int
(paren
op_star
id|init_data
)paren
(paren
r_struct
id|si_sm_data
op_star
id|smi
comma
r_struct
id|si_sm_io
op_star
id|io
)paren
suffix:semicolon
multiline_comment|/* Start a new transaction in the state machine.  This will&n;&t;   return -2 if the state machine is not idle, -1 if the size&n;&t;   is invalid (to large or too small), or 0 if the transaction&n;&t;   is successfully completed. */
DECL|member|start_transaction
r_int
(paren
op_star
id|start_transaction
)paren
(paren
r_struct
id|si_sm_data
op_star
id|smi
comma
r_int
r_char
op_star
id|data
comma
r_int
r_int
id|size
)paren
suffix:semicolon
multiline_comment|/* Return the results after the transaction.  This will return&n;&t;   -1 if the buffer is too small, zero if no transaction is&n;&t;   present, or the actual length of the result data. */
DECL|member|get_result
r_int
(paren
op_star
id|get_result
)paren
(paren
r_struct
id|si_sm_data
op_star
id|smi
comma
r_int
r_char
op_star
id|data
comma
r_int
r_int
id|length
)paren
suffix:semicolon
multiline_comment|/* Call this periodically (for a polled interface) or upon&n;&t;   receiving an interrupt (for a interrupt-driven interface).&n;&t;   If interrupt driven, you should probably poll this&n;&t;   periodically when not in idle state.  This should be called&n;&t;   with the time that passed since the last call, if it is&n;&t;   significant.  Time is in microseconds. */
DECL|member|event
r_enum
id|si_sm_result
(paren
op_star
id|event
)paren
(paren
r_struct
id|si_sm_data
op_star
id|smi
comma
r_int
id|time
)paren
suffix:semicolon
multiline_comment|/* Attempt to detect an SMI.  Returns 0 on success or nonzero&n;           on failure. */
DECL|member|detect
r_int
(paren
op_star
id|detect
)paren
(paren
r_struct
id|si_sm_data
op_star
id|smi
)paren
suffix:semicolon
multiline_comment|/* The interface is shutting down, so clean it up. */
DECL|member|cleanup
r_void
(paren
op_star
id|cleanup
)paren
(paren
r_struct
id|si_sm_data
op_star
id|smi
)paren
suffix:semicolon
multiline_comment|/* Return the size of the SMI structure in bytes. */
DECL|member|size
r_int
(paren
op_star
id|size
)paren
(paren
r_void
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Current state machines that we can use. */
r_extern
r_struct
id|si_sm_handlers
id|kcs_smi_handlers
suffix:semicolon
r_extern
r_struct
id|si_sm_handlers
id|smic_smi_handlers
suffix:semicolon
r_extern
r_struct
id|si_sm_handlers
id|bt_smi_handlers
suffix:semicolon
eof
