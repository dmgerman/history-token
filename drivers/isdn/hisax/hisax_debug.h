multiline_comment|/*&n; * Common debugging macros for use with the hisax driver&n; *&n; * Author       Frode Isaksen&n; * Copyright    2001 by Frode Isaksen      &lt;fisaksen@bewan.com&gt;&n; *              2001 by Kai Germaschewski  &lt;kai.germaschewski@gmx.de&gt;&n; * &n; * This software may be used and distributed according to the terms&n; * of the GNU General Public License, incorporated herein by reference.&n; *&n; * How to use:&n; * &n; * Before including this file, you need to&n; *   #define __debug_variable my_debug&n; * where my_debug is a variable in your code which&n; * determines the debug bitmask.&n; *&n; * If CONFIG_HISAX_DEBUG is not set, all macros evaluate to nothing&n; *&n; */
macro_line|#ifndef __HISAX_DEBUG_H__
DECL|macro|__HISAX_DEBUG_H__
mdefine_line|#define __HISAX_DEBUG_H__
macro_line|#include &lt;linux/config.h&gt;
macro_line|#ifdef CONFIG_HISAX_DEBUG
DECL|macro|DBG
mdefine_line|#define DBG(level, format, arg...) do { &bslash;&n;if (level &amp; __debug_variable) &bslash;&n;printk(KERN_DEBUG __FUNCTION__ &quot;: &quot; format &quot;&bslash;n&quot; , ## arg); &bslash;&n;} while (0)
DECL|macro|DBG_PACKET
mdefine_line|#define DBG_PACKET(level,data,count) &bslash;&n;  if (level &amp; __debug_variable) dump_packet(__FUNCTION__,data,count)
DECL|macro|DBG_SKB
mdefine_line|#define DBG_SKB(level,skb) &bslash;&n;  if ((level &amp; __debug_variable) &amp;&amp; skb) dump_packet(__FUNCTION__,skb-&gt;data,skb-&gt;len)
r_static
r_void
id|__attribute__
c_func
(paren
(paren
id|unused
)paren
)paren
DECL|function|dump_packet
id|dump_packet
c_func
(paren
r_const
r_char
op_star
id|name
comma
r_const
id|u_char
op_star
id|data
comma
r_int
id|pkt_len
)paren
(brace
DECL|macro|DUMP_HDR_SIZE
mdefine_line|#define DUMP_HDR_SIZE 20
DECL|macro|DUMP_TLR_SIZE
mdefine_line|#define DUMP_TLR_SIZE 8
r_if
c_cond
(paren
id|pkt_len
)paren
(brace
r_int
id|i
comma
id|len1
comma
id|len2
suffix:semicolon
id|printk
c_func
(paren
id|KERN_DEBUG
l_string|&quot;%s: length=%d,data=&quot;
comma
id|name
comma
id|pkt_len
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pkt_len
OG
id|DUMP_HDR_SIZE
op_plus
id|DUMP_TLR_SIZE
)paren
(brace
id|len1
op_assign
id|DUMP_HDR_SIZE
suffix:semicolon
id|len2
op_assign
id|DUMP_TLR_SIZE
suffix:semicolon
)brace
r_else
(brace
id|len1
op_assign
id|pkt_len
OG
id|DUMP_HDR_SIZE
ques
c_cond
id|DUMP_HDR_SIZE
suffix:colon
id|pkt_len
suffix:semicolon
id|len2
op_assign
l_int|0
suffix:semicolon
)brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|len1
suffix:semicolon
op_increment
id|i
)paren
(brace
id|printk
(paren
l_string|&quot;%.2x&quot;
comma
id|data
(braket
id|i
)braket
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|len2
)paren
(brace
id|printk
(paren
l_string|&quot;..&quot;
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
id|pkt_len
op_minus
id|DUMP_TLR_SIZE
suffix:semicolon
id|i
OL
id|pkt_len
suffix:semicolon
op_increment
id|i
)paren
(brace
id|printk
(paren
l_string|&quot;%.2x&quot;
comma
id|data
(braket
id|i
)braket
)paren
suffix:semicolon
)brace
)brace
id|printk
(paren
l_string|&quot;&bslash;n&quot;
)paren
suffix:semicolon
)brace
DECL|macro|DUMP_HDR_SIZE
macro_line|#undef DUMP_HDR_SIZE
DECL|macro|DUMP_TLR_SIZE
macro_line|#undef DUMP_TLR_SIZE
)brace
macro_line|#else
DECL|macro|DBG
mdefine_line|#define DBG(level, format, arg...) do {} while (0)
DECL|macro|DBG_PACKET
mdefine_line|#define DBG_PACKET(level,data,count) do {} while (0)
DECL|macro|DBG_SKB
mdefine_line|#define DBG_SKB(level,skb) do {} while (0)
macro_line|#endif
macro_line|#endif
eof
