multiline_comment|/* Linux ISDN subsystem, PPP CCP support&n; *&n; * Copyright 1994-1998  by Fritz Elfert (fritz@isdn4linux.de)&n; *           1995,96    by Thinking Objects Software GmbH Wuerzburg&n; *           1995,96    by Michael Hipp (Michael.Hipp@student.uni-tuebingen.de)&n; *           1999-2002  by Kai Germaschewski &lt;kai@germaschewski.name&gt;&n; *&n; * This software may be used and distributed according to the terms&n; * of the GNU General Public License, incorporated herein by reference.&n; */
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;linux/isdn_ppp.h&gt;
multiline_comment|/* for ippp_ccp::flags */
DECL|macro|SC_DECOMP_ON
mdefine_line|#define SC_DECOMP_ON&t;&t;0x01
DECL|macro|SC_COMP_ON
mdefine_line|#define SC_COMP_ON&t;&t;0x02
DECL|macro|SC_DECOMP_DISCARD
mdefine_line|#define SC_DECOMP_DISCARD&t;0x04
DECL|macro|SC_COMP_DISCARD
mdefine_line|#define SC_COMP_DISCARD&t;&t;0x08
multiline_comment|/* SC_DC_ERROR/FERROR go in here as well, but are defined elsewhere&n;&n;   #define SC_DC_FERROR&t;0x00800000&n;   #define SC_DC_ERROR&t;0x00400000&n;*/
DECL|struct|ippp_ccp
r_struct
id|ippp_ccp
(brace
DECL|member|proto
id|u16
id|proto
suffix:semicolon
DECL|member|compressor
r_struct
id|isdn_ppp_compressor
op_star
id|compressor
suffix:semicolon
DECL|member|decompressor
r_struct
id|isdn_ppp_compressor
op_star
id|decompressor
suffix:semicolon
DECL|member|comp_stat
r_void
op_star
id|comp_stat
suffix:semicolon
DECL|member|decomp_stat
r_void
op_star
id|decomp_stat
suffix:semicolon
DECL|member|compflags
r_int
r_int
id|compflags
suffix:semicolon
DECL|member|reset
r_struct
id|ippp_ccp_reset
op_star
id|reset
suffix:semicolon
DECL|member|mru
r_int
id|mru
suffix:semicolon
DECL|member|debug
r_int
id|debug
suffix:semicolon
DECL|member|priv
r_void
op_star
id|priv
suffix:semicolon
DECL|member|xmit
r_void
(paren
op_star
id|xmit
)paren
(paren
r_void
op_star
id|priv
comma
r_struct
id|sk_buff
op_star
id|skb
comma
id|u16
id|proto
)paren
suffix:semicolon
DECL|member|kick_up
r_void
(paren
op_star
id|kick_up
)paren
(paren
r_void
op_star
id|priv
)paren
suffix:semicolon
DECL|member|alloc_skb
r_struct
id|sk_buff
op_star
(paren
op_star
id|alloc_skb
)paren
(paren
r_void
op_star
id|priv
comma
r_int
id|len
comma
r_int
id|gfp_mask
)paren
suffix:semicolon
)brace
suffix:semicolon
r_struct
id|ippp_ccp
op_star
id|ippp_ccp_alloc
c_func
(paren
r_void
)paren
suffix:semicolon
r_void
id|ippp_ccp_free
c_func
(paren
r_struct
id|ippp_ccp
op_star
id|ccp
)paren
suffix:semicolon
r_int
id|ippp_ccp_set_mru
c_func
(paren
r_struct
id|ippp_ccp
op_star
id|ccp
comma
r_int
r_int
id|mru
)paren
suffix:semicolon
r_int
r_int
id|ippp_ccp_get_flags
c_func
(paren
r_struct
id|ippp_ccp
op_star
id|ccp
)paren
suffix:semicolon
r_struct
id|sk_buff
op_star
id|ippp_ccp_compress
c_func
(paren
r_struct
id|ippp_ccp
op_star
id|ccp
comma
r_struct
id|sk_buff
op_star
id|skb
comma
id|u16
op_star
id|proto
)paren
suffix:semicolon
r_struct
id|sk_buff
op_star
id|ippp_ccp_decompress
c_func
(paren
r_struct
id|ippp_ccp
op_star
id|ccp
comma
r_struct
id|sk_buff
op_star
id|skb
comma
id|u16
op_star
id|proto
)paren
suffix:semicolon
r_void
id|ippp_ccp_send_ccp
c_func
(paren
r_struct
id|ippp_ccp
op_star
id|ccp
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_void
id|ippp_ccp_receive_ccp
c_func
(paren
r_struct
id|ippp_ccp
op_star
id|ccp
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_void
id|ippp_ccp_get_compressors
c_func
(paren
r_int
r_int
id|protos
(braket
l_int|8
)braket
)paren
suffix:semicolon
r_int
id|ippp_ccp_set_compressor
c_func
(paren
r_struct
id|ippp_ccp
op_star
id|ccp
comma
r_int
id|unit
comma
r_struct
id|isdn_ppp_comp_data
op_star
id|data
)paren
suffix:semicolon
eof
