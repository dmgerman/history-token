macro_line|#ifndef _I8042_X86IA64IO_H
DECL|macro|_I8042_X86IA64IO_H
mdefine_line|#define _I8042_X86IA64IO_H
multiline_comment|/*&n; * This program is free software; you can redistribute it and/or modify it&n; * under the terms of the GNU General Public License version 2 as published by&n; * the Free Software Foundation.&n; */
multiline_comment|/*&n; * Names.&n; */
DECL|macro|I8042_KBD_PHYS_DESC
mdefine_line|#define I8042_KBD_PHYS_DESC &quot;isa0060/serio0&quot;
DECL|macro|I8042_AUX_PHYS_DESC
mdefine_line|#define I8042_AUX_PHYS_DESC &quot;isa0060/serio1&quot;
DECL|macro|I8042_MUX_PHYS_DESC
mdefine_line|#define I8042_MUX_PHYS_DESC &quot;isa0060/serio%d&quot;
multiline_comment|/*&n; * IRQs.&n; */
macro_line|#if defined(__ia64__)
DECL|macro|I8042_MAP_IRQ
macro_line|# define I8042_MAP_IRQ(x)&t;isa_irq_to_vector((x))
macro_line|#else
DECL|macro|I8042_MAP_IRQ
macro_line|# define I8042_MAP_IRQ(x)&t;(x)
macro_line|#endif
DECL|macro|I8042_KBD_IRQ
mdefine_line|#define I8042_KBD_IRQ&t;i8042_kbd_irq
DECL|macro|I8042_AUX_IRQ
mdefine_line|#define I8042_AUX_IRQ&t;i8042_aux_irq
DECL|variable|i8042_kbd_irq
r_static
r_int
id|i8042_kbd_irq
suffix:semicolon
DECL|variable|i8042_aux_irq
r_static
r_int
id|i8042_aux_irq
suffix:semicolon
multiline_comment|/*&n; * Register numbers.&n; */
DECL|macro|I8042_COMMAND_REG
mdefine_line|#define I8042_COMMAND_REG&t;i8042_command_reg
DECL|macro|I8042_STATUS_REG
mdefine_line|#define I8042_STATUS_REG&t;i8042_command_reg
DECL|macro|I8042_DATA_REG
mdefine_line|#define I8042_DATA_REG&t;&t;i8042_data_reg
DECL|variable|i8042_command_reg
r_static
r_int
id|i8042_command_reg
op_assign
l_int|0x64
suffix:semicolon
DECL|variable|i8042_data_reg
r_static
r_int
id|i8042_data_reg
op_assign
l_int|0x60
suffix:semicolon
DECL|function|i8042_read_data
r_static
r_inline
r_int
id|i8042_read_data
c_func
(paren
r_void
)paren
(brace
r_return
id|inb
c_func
(paren
id|I8042_DATA_REG
)paren
suffix:semicolon
)brace
DECL|function|i8042_read_status
r_static
r_inline
r_int
id|i8042_read_status
c_func
(paren
r_void
)paren
(brace
r_return
id|inb
c_func
(paren
id|I8042_STATUS_REG
)paren
suffix:semicolon
)brace
DECL|function|i8042_write_data
r_static
r_inline
r_void
id|i8042_write_data
c_func
(paren
r_int
id|val
)paren
(brace
id|outb
c_func
(paren
id|val
comma
id|I8042_DATA_REG
)paren
suffix:semicolon
)brace
DECL|function|i8042_write_command
r_static
r_inline
r_void
id|i8042_write_command
c_func
(paren
r_int
id|val
)paren
(brace
id|outb
c_func
(paren
id|val
comma
id|I8042_COMMAND_REG
)paren
suffix:semicolon
)brace
macro_line|#if defined(__i386__)
macro_line|#include &lt;linux/dmi.h&gt;
DECL|variable|i8042_dmi_noloop_table
r_static
r_struct
id|dmi_system_id
id|__initdata
id|i8042_dmi_noloop_table
(braket
)braket
op_assign
(brace
(brace
dot
id|ident
op_assign
l_string|&quot;Compaq Proliant 8500&quot;
comma
dot
id|matches
op_assign
(brace
id|DMI_MATCH
c_func
(paren
id|DMI_SYS_VENDOR
comma
l_string|&quot;Compaq&quot;
)paren
comma
id|DMI_MATCH
c_func
(paren
id|DMI_PRODUCT_NAME
comma
l_string|&quot;ProLiant&quot;
)paren
comma
id|DMI_MATCH
c_func
(paren
id|DMI_PRODUCT_VERSION
comma
l_string|&quot;8500&quot;
)paren
comma
)brace
comma
)brace
comma
(brace
dot
id|ident
op_assign
l_string|&quot;Compaq Proliant DL760&quot;
comma
dot
id|matches
op_assign
(brace
id|DMI_MATCH
c_func
(paren
id|DMI_SYS_VENDOR
comma
l_string|&quot;Compaq&quot;
)paren
comma
id|DMI_MATCH
c_func
(paren
id|DMI_PRODUCT_NAME
comma
l_string|&quot;ProLiant&quot;
)paren
comma
id|DMI_MATCH
c_func
(paren
id|DMI_PRODUCT_VERSION
comma
l_string|&quot;DL760&quot;
)paren
comma
)brace
comma
)brace
comma
(brace
)brace
)brace
suffix:semicolon
multiline_comment|/*&n; * Some Fujitsu notebooks are ahving trouble with touhcpads if&n; * active multiplexing mode is activated. Luckily they don&squot;t have&n; * external PS/2 ports so we can safely disable it.&n; */
DECL|variable|i8042_dmi_nomux_table
r_static
r_struct
id|dmi_system_id
id|__initdata
id|i8042_dmi_nomux_table
(braket
)braket
op_assign
(brace
(brace
dot
id|ident
op_assign
l_string|&quot;Fujitsu Lifebook P7010/P7010D&quot;
comma
dot
id|matches
op_assign
(brace
id|DMI_MATCH
c_func
(paren
id|DMI_SYS_VENDOR
comma
l_string|&quot;FUJITSU&quot;
)paren
comma
id|DMI_MATCH
c_func
(paren
id|DMI_PRODUCT_NAME
comma
l_string|&quot;P7010&quot;
)paren
comma
)brace
comma
)brace
comma
(brace
dot
id|ident
op_assign
l_string|&quot;Fujitsu Lifebook P5020D&quot;
comma
dot
id|matches
op_assign
(brace
id|DMI_MATCH
c_func
(paren
id|DMI_SYS_VENDOR
comma
l_string|&quot;FUJITSU&quot;
)paren
comma
id|DMI_MATCH
c_func
(paren
id|DMI_PRODUCT_NAME
comma
l_string|&quot;LifeBook P Series&quot;
)paren
comma
)brace
comma
)brace
comma
(brace
dot
id|ident
op_assign
l_string|&quot;Fujitsu Lifebook S2000&quot;
comma
dot
id|matches
op_assign
(brace
id|DMI_MATCH
c_func
(paren
id|DMI_SYS_VENDOR
comma
l_string|&quot;FUJITSU&quot;
)paren
comma
id|DMI_MATCH
c_func
(paren
id|DMI_PRODUCT_NAME
comma
l_string|&quot;LifeBook S Series&quot;
)paren
comma
)brace
comma
)brace
comma
(brace
dot
id|ident
op_assign
l_string|&quot;Fujitsu T70H&quot;
comma
dot
id|matches
op_assign
(brace
id|DMI_MATCH
c_func
(paren
id|DMI_SYS_VENDOR
comma
l_string|&quot;FUJITSU&quot;
)paren
comma
id|DMI_MATCH
c_func
(paren
id|DMI_PRODUCT_NAME
comma
l_string|&quot;FMVLT70H&quot;
)paren
comma
)brace
comma
)brace
comma
(brace
)brace
)brace
suffix:semicolon
macro_line|#endif
macro_line|#ifdef CONFIG_PNP
macro_line|#include &lt;linux/pnp.h&gt;
DECL|variable|i8042_pnp_kbd_registered
r_static
r_int
id|i8042_pnp_kbd_registered
suffix:semicolon
DECL|variable|i8042_pnp_aux_registered
r_static
r_int
id|i8042_pnp_aux_registered
suffix:semicolon
DECL|variable|i8042_pnp_command_reg
r_static
r_int
id|i8042_pnp_command_reg
suffix:semicolon
DECL|variable|i8042_pnp_data_reg
r_static
r_int
id|i8042_pnp_data_reg
suffix:semicolon
DECL|variable|i8042_pnp_kbd_irq
r_static
r_int
id|i8042_pnp_kbd_irq
suffix:semicolon
DECL|variable|i8042_pnp_aux_irq
r_static
r_int
id|i8042_pnp_aux_irq
suffix:semicolon
DECL|variable|i8042_pnp_kbd_name
r_static
r_char
id|i8042_pnp_kbd_name
(braket
l_int|32
)braket
suffix:semicolon
DECL|variable|i8042_pnp_aux_name
r_static
r_char
id|i8042_pnp_aux_name
(braket
l_int|32
)braket
suffix:semicolon
DECL|function|i8042_pnp_kbd_probe
r_static
r_int
id|i8042_pnp_kbd_probe
c_func
(paren
r_struct
id|pnp_dev
op_star
id|dev
comma
r_const
r_struct
id|pnp_device_id
op_star
id|did
)paren
(brace
r_if
c_cond
(paren
id|pnp_port_valid
c_func
(paren
id|dev
comma
l_int|0
)paren
op_logical_and
id|pnp_port_len
c_func
(paren
id|dev
comma
l_int|0
)paren
op_eq
l_int|1
)paren
id|i8042_pnp_data_reg
op_assign
id|pnp_port_start
c_func
(paren
id|dev
comma
l_int|0
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pnp_port_valid
c_func
(paren
id|dev
comma
l_int|1
)paren
op_logical_and
id|pnp_port_len
c_func
(paren
id|dev
comma
l_int|1
)paren
op_eq
l_int|1
)paren
id|i8042_pnp_command_reg
op_assign
id|pnp_port_start
c_func
(paren
id|dev
comma
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pnp_irq_valid
c_func
(paren
id|dev
comma
l_int|0
)paren
)paren
id|i8042_pnp_kbd_irq
op_assign
id|pnp_irq
c_func
(paren
id|dev
comma
l_int|0
)paren
suffix:semicolon
id|strncpy
c_func
(paren
id|i8042_pnp_kbd_name
comma
id|did-&gt;id
comma
r_sizeof
(paren
id|i8042_pnp_kbd_name
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|strlen
c_func
(paren
id|pnp_dev_name
c_func
(paren
id|dev
)paren
)paren
)paren
(brace
id|strncat
c_func
(paren
id|i8042_pnp_kbd_name
comma
l_string|&quot;:&quot;
comma
r_sizeof
(paren
id|i8042_pnp_kbd_name
)paren
)paren
suffix:semicolon
id|strncat
c_func
(paren
id|i8042_pnp_kbd_name
comma
id|pnp_dev_name
c_func
(paren
id|dev
)paren
comma
r_sizeof
(paren
id|i8042_pnp_kbd_name
)paren
)paren
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|i8042_pnp_aux_probe
r_static
r_int
id|i8042_pnp_aux_probe
c_func
(paren
r_struct
id|pnp_dev
op_star
id|dev
comma
r_const
r_struct
id|pnp_device_id
op_star
id|did
)paren
(brace
r_if
c_cond
(paren
id|pnp_port_valid
c_func
(paren
id|dev
comma
l_int|0
)paren
op_logical_and
id|pnp_port_len
c_func
(paren
id|dev
comma
l_int|0
)paren
op_eq
l_int|1
)paren
id|i8042_pnp_data_reg
op_assign
id|pnp_port_start
c_func
(paren
id|dev
comma
l_int|0
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pnp_port_valid
c_func
(paren
id|dev
comma
l_int|1
)paren
op_logical_and
id|pnp_port_len
c_func
(paren
id|dev
comma
l_int|1
)paren
op_eq
l_int|1
)paren
id|i8042_pnp_command_reg
op_assign
id|pnp_port_start
c_func
(paren
id|dev
comma
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pnp_irq_valid
c_func
(paren
id|dev
comma
l_int|0
)paren
)paren
id|i8042_pnp_aux_irq
op_assign
id|pnp_irq
c_func
(paren
id|dev
comma
l_int|0
)paren
suffix:semicolon
id|strncpy
c_func
(paren
id|i8042_pnp_aux_name
comma
id|did-&gt;id
comma
r_sizeof
(paren
id|i8042_pnp_aux_name
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|strlen
c_func
(paren
id|pnp_dev_name
c_func
(paren
id|dev
)paren
)paren
)paren
(brace
id|strncat
c_func
(paren
id|i8042_pnp_aux_name
comma
l_string|&quot;:&quot;
comma
r_sizeof
(paren
id|i8042_pnp_aux_name
)paren
)paren
suffix:semicolon
id|strncat
c_func
(paren
id|i8042_pnp_aux_name
comma
id|pnp_dev_name
c_func
(paren
id|dev
)paren
comma
r_sizeof
(paren
id|i8042_pnp_aux_name
)paren
)paren
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|variable|pnp_kbd_devids
r_static
r_struct
id|pnp_device_id
id|pnp_kbd_devids
(braket
)braket
op_assign
(brace
(brace
dot
id|id
op_assign
l_string|&quot;PNP0303&quot;
comma
dot
id|driver_data
op_assign
l_int|0
)brace
comma
(brace
dot
id|id
op_assign
l_string|&quot;PNP030b&quot;
comma
dot
id|driver_data
op_assign
l_int|0
)brace
comma
(brace
dot
id|id
op_assign
l_string|&quot;&quot;
comma
)brace
comma
)brace
suffix:semicolon
DECL|variable|i8042_pnp_kbd_driver
r_static
r_struct
id|pnp_driver
id|i8042_pnp_kbd_driver
op_assign
(brace
dot
id|name
op_assign
l_string|&quot;i8042 kbd&quot;
comma
dot
id|id_table
op_assign
id|pnp_kbd_devids
comma
dot
id|probe
op_assign
id|i8042_pnp_kbd_probe
comma
)brace
suffix:semicolon
DECL|variable|pnp_aux_devids
r_static
r_struct
id|pnp_device_id
id|pnp_aux_devids
(braket
)braket
op_assign
(brace
(brace
dot
id|id
op_assign
l_string|&quot;PNP0f03&quot;
comma
dot
id|driver_data
op_assign
l_int|0
)brace
comma
(brace
dot
id|id
op_assign
l_string|&quot;PNP0f0b&quot;
comma
dot
id|driver_data
op_assign
l_int|0
)brace
comma
(brace
dot
id|id
op_assign
l_string|&quot;PNP0f0e&quot;
comma
dot
id|driver_data
op_assign
l_int|0
)brace
comma
(brace
dot
id|id
op_assign
l_string|&quot;PNP0f12&quot;
comma
dot
id|driver_data
op_assign
l_int|0
)brace
comma
(brace
dot
id|id
op_assign
l_string|&quot;PNP0f13&quot;
comma
dot
id|driver_data
op_assign
l_int|0
)brace
comma
(brace
dot
id|id
op_assign
l_string|&quot;PNP0f19&quot;
comma
dot
id|driver_data
op_assign
l_int|0
)brace
comma
(brace
dot
id|id
op_assign
l_string|&quot;PNP0f1c&quot;
comma
dot
id|driver_data
op_assign
l_int|0
)brace
comma
(brace
dot
id|id
op_assign
l_string|&quot;SYN0801&quot;
comma
dot
id|driver_data
op_assign
l_int|0
)brace
comma
(brace
dot
id|id
op_assign
l_string|&quot;&quot;
comma
)brace
comma
)brace
suffix:semicolon
DECL|variable|i8042_pnp_aux_driver
r_static
r_struct
id|pnp_driver
id|i8042_pnp_aux_driver
op_assign
(brace
dot
id|name
op_assign
l_string|&quot;i8042 aux&quot;
comma
dot
id|id_table
op_assign
id|pnp_aux_devids
comma
dot
id|probe
op_assign
id|i8042_pnp_aux_probe
comma
)brace
suffix:semicolon
DECL|function|i8042_pnp_exit
r_static
r_void
id|i8042_pnp_exit
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
id|i8042_pnp_kbd_registered
)paren
id|pnp_unregister_driver
c_func
(paren
op_amp
id|i8042_pnp_kbd_driver
)paren
suffix:semicolon
r_if
c_cond
(paren
id|i8042_pnp_aux_registered
)paren
id|pnp_unregister_driver
c_func
(paren
op_amp
id|i8042_pnp_aux_driver
)paren
suffix:semicolon
)brace
DECL|function|i8042_pnp_init
r_static
r_int
id|i8042_pnp_init
c_func
(paren
r_void
)paren
(brace
r_int
id|result_kbd
comma
id|result_aux
suffix:semicolon
r_if
c_cond
(paren
id|i8042_nopnp
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;i8042: PNP detection disabled&bslash;n&quot;
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
r_if
c_cond
(paren
(paren
id|result_kbd
op_assign
id|pnp_register_driver
c_func
(paren
op_amp
id|i8042_pnp_kbd_driver
)paren
)paren
op_ge
l_int|0
)paren
id|i8042_pnp_kbd_registered
op_assign
l_int|1
suffix:semicolon
r_if
c_cond
(paren
(paren
id|result_aux
op_assign
id|pnp_register_driver
c_func
(paren
op_amp
id|i8042_pnp_aux_driver
)paren
)paren
op_ge
l_int|0
)paren
id|i8042_pnp_aux_registered
op_assign
l_int|1
suffix:semicolon
r_if
c_cond
(paren
id|result_kbd
op_le
l_int|0
op_logical_and
id|result_aux
op_le
l_int|0
)paren
(brace
id|i8042_pnp_exit
c_func
(paren
)paren
suffix:semicolon
macro_line|#if defined(__ia64__)
r_return
op_minus
id|ENODEV
suffix:semicolon
macro_line|#else
id|printk
c_func
(paren
id|KERN_WARNING
l_string|&quot;PNP: No PS/2 controller found. Probing ports directly.&bslash;n&quot;
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
macro_line|#endif
)brace
r_if
c_cond
(paren
(paren
(paren
id|i8042_pnp_data_reg
op_amp
op_complement
l_int|0xf
)paren
op_eq
(paren
id|i8042_data_reg
op_amp
op_complement
l_int|0xf
)paren
op_logical_and
id|i8042_pnp_data_reg
op_ne
id|i8042_data_reg
)paren
op_logical_or
op_logical_neg
id|i8042_pnp_data_reg
)paren
(brace
id|printk
c_func
(paren
id|KERN_WARNING
l_string|&quot;PNP: PS/2 controller has invalid data port %#x; using default %#x&bslash;n&quot;
comma
id|i8042_pnp_data_reg
comma
id|i8042_data_reg
)paren
suffix:semicolon
id|i8042_pnp_data_reg
op_assign
id|i8042_data_reg
suffix:semicolon
)brace
r_if
c_cond
(paren
(paren
(paren
id|i8042_pnp_command_reg
op_amp
op_complement
l_int|0xf
)paren
op_eq
(paren
id|i8042_command_reg
op_amp
op_complement
l_int|0xf
)paren
op_logical_and
id|i8042_pnp_command_reg
op_ne
id|i8042_command_reg
)paren
op_logical_or
op_logical_neg
id|i8042_pnp_command_reg
)paren
(brace
id|printk
c_func
(paren
id|KERN_WARNING
l_string|&quot;PNP: PS/2 controller has invalid command port %#x; using default %#x&bslash;n&quot;
comma
id|i8042_pnp_command_reg
comma
id|i8042_command_reg
)paren
suffix:semicolon
id|i8042_pnp_command_reg
op_assign
id|i8042_command_reg
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|i8042_pnp_kbd_irq
)paren
(brace
id|printk
c_func
(paren
id|KERN_WARNING
l_string|&quot;PNP: PS/2 controller doesn&squot;t have KBD irq; using default %#x&bslash;n&quot;
comma
id|i8042_kbd_irq
)paren
suffix:semicolon
id|i8042_pnp_kbd_irq
op_assign
id|i8042_kbd_irq
suffix:semicolon
)brace
r_if
c_cond
(paren
id|result_aux
OG
l_int|0
op_logical_and
op_logical_neg
id|i8042_pnp_aux_irq
)paren
(brace
id|printk
c_func
(paren
id|KERN_WARNING
l_string|&quot;PNP: PS/2 controller doesn&squot;t have AUX irq; using default %#x&bslash;n&quot;
comma
id|i8042_aux_irq
)paren
suffix:semicolon
id|i8042_pnp_aux_irq
op_assign
id|i8042_aux_irq
suffix:semicolon
)brace
macro_line|#if defined(__ia64__)
r_if
c_cond
(paren
id|result_aux
op_le
l_int|0
)paren
id|i8042_noaux
op_assign
l_int|1
suffix:semicolon
macro_line|#endif
id|i8042_data_reg
op_assign
id|i8042_pnp_data_reg
suffix:semicolon
id|i8042_command_reg
op_assign
id|i8042_pnp_command_reg
suffix:semicolon
id|i8042_kbd_irq
op_assign
id|i8042_pnp_kbd_irq
suffix:semicolon
id|i8042_aux_irq
op_assign
id|i8042_pnp_aux_irq
suffix:semicolon
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;PNP: PS/2 Controller [%s%s%s] at %#x,%#x irq %d%s%d&bslash;n&quot;
comma
id|i8042_pnp_kbd_name
comma
(paren
id|result_kbd
OG
l_int|0
op_logical_and
id|result_aux
OG
l_int|0
)paren
ques
c_cond
l_string|&quot;,&quot;
suffix:colon
l_string|&quot;&quot;
comma
id|i8042_pnp_aux_name
comma
id|i8042_data_reg
comma
id|i8042_command_reg
comma
id|i8042_kbd_irq
comma
(paren
id|result_aux
OG
l_int|0
)paren
ques
c_cond
l_string|&quot;,&quot;
suffix:colon
l_string|&quot;&quot;
comma
id|i8042_aux_irq
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
macro_line|#endif
DECL|function|i8042_platform_init
r_static
r_inline
r_int
id|i8042_platform_init
c_func
(paren
r_void
)paren
(brace
multiline_comment|/*&n; * On ix86 platforms touching the i8042 data register region can do really&n; * bad things. Because of this the region is always reserved on ix86 boxes.&n; *&n; *&t;if (!request_region(I8042_DATA_REG, 16, &quot;i8042&quot;))&n; *&t;&t;return -1;&n; */
id|i8042_kbd_irq
op_assign
id|I8042_MAP_IRQ
c_func
(paren
l_int|1
)paren
suffix:semicolon
id|i8042_aux_irq
op_assign
id|I8042_MAP_IRQ
c_func
(paren
l_int|12
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_PNP
r_if
c_cond
(paren
id|i8042_pnp_init
c_func
(paren
)paren
)paren
r_return
op_minus
l_int|1
suffix:semicolon
macro_line|#endif
macro_line|#if defined(__ia64__)
id|i8042_reset
op_assign
l_int|1
suffix:semicolon
macro_line|#endif
macro_line|#if defined(__i386__)
r_if
c_cond
(paren
id|dmi_check_system
c_func
(paren
id|i8042_dmi_noloop_table
)paren
)paren
id|i8042_noloop
op_assign
l_int|1
suffix:semicolon
r_if
c_cond
(paren
id|dmi_check_system
c_func
(paren
id|i8042_dmi_nomux_table
)paren
)paren
id|i8042_nomux
op_assign
l_int|1
suffix:semicolon
macro_line|#endif
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|i8042_platform_exit
r_static
r_inline
r_void
id|i8042_platform_exit
c_func
(paren
r_void
)paren
(brace
macro_line|#ifdef CONFIG_PNP
id|i8042_pnp_exit
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
)brace
macro_line|#endif /* _I8042_X86IA64IO_H */
eof
