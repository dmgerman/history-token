multiline_comment|/* $Id: fsm.h,v 1.3 2001/06/18 16:49:19 felfert Exp $&n; */
macro_line|#ifndef _FSM_H_
DECL|macro|_FSM_H_
mdefine_line|#define _FSM_H_
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/timer.h&gt;
macro_line|#include &lt;linux/time.h&gt;
macro_line|#include &lt;linux/slab.h&gt;
macro_line|#include &lt;linux/sched.h&gt;
macro_line|#include &lt;linux/string.h&gt;
macro_line|#include &lt;asm/atomic.h&gt;
multiline_comment|/**&n; * Define this to get debugging messages.&n; */
DECL|macro|FSM_DEBUG
mdefine_line|#define FSM_DEBUG         0
multiline_comment|/**&n; * Define this to get debugging massages for&n; * timer handling.&n; */
DECL|macro|FSM_TIMER_DEBUG
mdefine_line|#define FSM_TIMER_DEBUG   0
multiline_comment|/**&n; * Define these to record a history of&n; * Events/Statechanges and print it if a&n; * action_function is not found.&n; */
DECL|macro|FSM_DEBUG_HISTORY
mdefine_line|#define FSM_DEBUG_HISTORY 0
DECL|macro|FSM_HISTORY_SIZE
mdefine_line|#define FSM_HISTORY_SIZE  40
r_struct
id|fsm_instance_t
suffix:semicolon
multiline_comment|/**&n; * Definition of an action function, called by a FSM&n; */
DECL|typedef|fsm_function_t
r_typedef
r_void
(paren
op_star
id|fsm_function_t
)paren
(paren
r_struct
id|fsm_instance_t
op_star
comma
r_int
comma
r_void
op_star
)paren
suffix:semicolon
multiline_comment|/**&n; * Internal jump table for a FSM&n; */
r_typedef
r_struct
(brace
DECL|member|jumpmatrix
id|fsm_function_t
op_star
id|jumpmatrix
suffix:semicolon
DECL|member|nr_events
r_int
id|nr_events
suffix:semicolon
DECL|member|nr_states
r_int
id|nr_states
suffix:semicolon
DECL|member|event_names
r_const
r_char
op_star
op_star
id|event_names
suffix:semicolon
DECL|member|state_names
r_const
r_char
op_star
op_star
id|state_names
suffix:semicolon
DECL|typedef|fsm
)brace
id|fsm
suffix:semicolon
macro_line|#if FSM_DEBUG_HISTORY
multiline_comment|/**&n; * Element of State/Event history used for debugging.&n; */
r_typedef
r_struct
(brace
DECL|member|state
r_int
id|state
suffix:semicolon
DECL|member|event
r_int
id|event
suffix:semicolon
DECL|typedef|fsm_history
)brace
id|fsm_history
suffix:semicolon
macro_line|#endif
multiline_comment|/**&n; * Representation of a FSM&n; */
DECL|struct|fsm_instance_t
r_typedef
r_struct
id|fsm_instance_t
(brace
DECL|member|f
id|fsm
op_star
id|f
suffix:semicolon
DECL|member|state
id|atomic_t
id|state
suffix:semicolon
DECL|member|name
r_char
id|name
(braket
l_int|16
)braket
suffix:semicolon
DECL|member|userdata
r_void
op_star
id|userdata
suffix:semicolon
DECL|member|userint
r_int
id|userint
suffix:semicolon
macro_line|#if FSM_DEBUG_HISTORY
DECL|member|history_index
r_int
id|history_index
suffix:semicolon
DECL|member|history_size
r_int
id|history_size
suffix:semicolon
DECL|member|history
id|fsm_history
id|history
(braket
id|FSM_HISTORY_SIZE
)braket
suffix:semicolon
macro_line|#endif
DECL|typedef|fsm_instance
)brace
id|fsm_instance
suffix:semicolon
multiline_comment|/**&n; * Description of a state-event combination&n; */
r_typedef
r_struct
(brace
DECL|member|cond_state
r_int
id|cond_state
suffix:semicolon
DECL|member|cond_event
r_int
id|cond_event
suffix:semicolon
DECL|member|function
id|fsm_function_t
id|function
suffix:semicolon
DECL|typedef|fsm_node
)brace
id|fsm_node
suffix:semicolon
multiline_comment|/**&n; * Description of a FSM Timer.&n; */
r_typedef
r_struct
(brace
DECL|member|fi
id|fsm_instance
op_star
id|fi
suffix:semicolon
DECL|member|tl
r_struct
id|timer_list
id|tl
suffix:semicolon
DECL|member|expire_event
r_int
id|expire_event
suffix:semicolon
DECL|member|event_arg
r_void
op_star
id|event_arg
suffix:semicolon
DECL|typedef|fsm_timer
)brace
id|fsm_timer
suffix:semicolon
multiline_comment|/**&n; * Creates an FSM&n; *&n; * @param name        Name of this instance for logging purposes.&n; * @param state_names An array of names for all states for logging purposes.&n; * @param event_names An array of names for all events for logging purposes.&n; * @param nr_states   Number of states for this instance.&n; * @param nr_events   Number of events for this instance.&n; * @param tmpl        An array of fsm_nodes, describing this FSM.&n; * @param tmpl_len    Length of the describing array.&n; * @param order       Parameter for allocation of the FSM data structs.&n; */
r_extern
id|fsm_instance
op_star
id|init_fsm
c_func
(paren
r_char
op_star
id|name
comma
r_const
r_char
op_star
op_star
id|state_names
comma
r_const
r_char
op_star
op_star
id|event_names
comma
r_int
id|nr_states
comma
r_int
id|nr_events
comma
r_const
id|fsm_node
op_star
id|tmpl
comma
r_int
id|tmpl_len
comma
r_int
id|order
)paren
suffix:semicolon
multiline_comment|/**&n; * Releases an FSM&n; *&n; * @param fi Pointer to an FSM, previously created with init_fsm.&n; */
r_extern
r_void
id|kfree_fsm
c_func
(paren
id|fsm_instance
op_star
id|fi
)paren
suffix:semicolon
macro_line|#if FSM_DEBUG_HISTORY
r_extern
r_void
id|fsm_print_history
c_func
(paren
id|fsm_instance
op_star
id|fi
)paren
suffix:semicolon
r_extern
r_void
id|fsm_record_history
c_func
(paren
id|fsm_instance
op_star
id|fi
comma
r_int
id|state
comma
r_int
id|event
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/**&n; * Emits an event to a FSM.&n; * If an action function is defined for the current state/event combination,&n; * this function is called.&n; *&n; * @param fi    Pointer to FSM which should receive the event.&n; * @param event The event do be delivered.&n; * @param arg   A generic argument, handed to the action function.&n; *&n; * @return      0  on success,&n; *              1  if current state or event is out of range&n; *              !0 if state and event in range, but no action defined.&n; */
r_extern
id|__inline__
r_int
DECL|function|fsm_event
id|fsm_event
c_func
(paren
id|fsm_instance
op_star
id|fi
comma
r_int
id|event
comma
r_void
op_star
id|arg
)paren
(brace
id|fsm_function_t
id|r
suffix:semicolon
r_int
id|state
op_assign
id|atomic_read
c_func
(paren
op_amp
id|fi-&gt;state
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|state
op_ge
id|fi-&gt;f-&gt;nr_states
)paren
op_logical_or
(paren
id|event
op_ge
id|fi-&gt;f-&gt;nr_events
)paren
)paren
(brace
id|printk
c_func
(paren
id|KERN_ERR
l_string|&quot;fsm(%s): Invalid state st(%ld/%ld) ev(%d/%ld)&bslash;n&quot;
comma
id|fi-&gt;name
comma
(paren
r_int
)paren
id|state
comma
(paren
r_int
)paren
id|fi-&gt;f-&gt;nr_states
comma
id|event
comma
(paren
r_int
)paren
id|fi-&gt;f-&gt;nr_events
)paren
suffix:semicolon
macro_line|#if FSM_DEBUG_HISTORY
id|fsm_print_history
c_func
(paren
id|fi
)paren
suffix:semicolon
macro_line|#endif
r_return
l_int|1
suffix:semicolon
)brace
id|r
op_assign
id|fi-&gt;f-&gt;jumpmatrix
(braket
id|fi-&gt;f-&gt;nr_states
op_star
id|event
op_plus
id|state
)braket
suffix:semicolon
r_if
c_cond
(paren
id|r
)paren
(brace
macro_line|#if FSM_DEBUG
id|printk
c_func
(paren
id|KERN_DEBUG
l_string|&quot;fsm(%s): state %s event %s&bslash;n&quot;
comma
id|fi-&gt;name
comma
id|fi-&gt;f-&gt;state_names
(braket
id|state
)braket
comma
id|fi-&gt;f-&gt;event_names
(braket
id|event
)braket
)paren
suffix:semicolon
macro_line|#endif
macro_line|#if FSM_DEBUG_HISTORY
id|fsm_record_history
c_func
(paren
id|fi
comma
id|state
comma
id|event
)paren
suffix:semicolon
macro_line|#endif
id|r
c_func
(paren
id|fi
comma
id|event
comma
id|arg
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
r_else
(brace
macro_line|#if FSM_DEBUG || FSM_DEBUG_HISTORY
id|printk
c_func
(paren
id|KERN_DEBUG
l_string|&quot;fsm(%s): no function for event %s in state %s&bslash;n&quot;
comma
id|fi-&gt;name
comma
id|fi-&gt;f-&gt;event_names
(braket
id|event
)braket
comma
id|fi-&gt;f-&gt;state_names
(braket
id|state
)braket
)paren
suffix:semicolon
macro_line|#endif
macro_line|#if FSM_DEBUG_HISTORY
id|fsm_print_history
c_func
(paren
id|fi
)paren
suffix:semicolon
macro_line|#endif
r_return
op_logical_neg
l_int|0
suffix:semicolon
)brace
)brace
multiline_comment|/**&n; * Modifies the state of an FSM.&n; * This does &lt;em&gt;not&lt;/em&gt; trigger an event or calls an action function.&n; *&n; * @param fi    Pointer to FSM&n; * @param state The new state for this FSM.&n; */
r_extern
id|__inline__
r_void
DECL|function|fsm_newstate
id|fsm_newstate
c_func
(paren
id|fsm_instance
op_star
id|fi
comma
r_int
id|newstate
)paren
(brace
id|atomic_set
c_func
(paren
op_amp
id|fi-&gt;state
comma
id|newstate
)paren
suffix:semicolon
macro_line|#if FSM_DEBUG_HISTORY
id|fsm_record_history
c_func
(paren
id|fi
comma
id|newstate
comma
op_minus
l_int|1
)paren
suffix:semicolon
macro_line|#endif
macro_line|#if FSM_DEBUG
id|printk
c_func
(paren
id|KERN_DEBUG
l_string|&quot;fsm(%s): New state %s&bslash;n&quot;
comma
id|fi-&gt;name
comma
id|fi-&gt;f-&gt;state_names
(braket
id|newstate
)braket
)paren
suffix:semicolon
macro_line|#endif
)brace
multiline_comment|/**&n; * Retrieves the state of an FSM&n; *&n; * @param fi Pointer to FSM&n; *&n; * @return The current state of the FSM.&n; */
r_extern
id|__inline__
r_int
DECL|function|fsm_getstate
id|fsm_getstate
c_func
(paren
id|fsm_instance
op_star
id|fi
)paren
(brace
r_return
id|atomic_read
c_func
(paren
op_amp
id|fi-&gt;state
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * Retrieves the name of the state of an FSM&n; *&n; * @param fi Pointer to FSM&n; *&n; * @return The current state of the FSM in a human readable form.&n; */
r_extern
r_const
r_char
op_star
id|fsm_getstate_str
c_func
(paren
id|fsm_instance
op_star
id|fi
)paren
suffix:semicolon
multiline_comment|/**&n; * Initializes a timer for an FSM.&n; * This prepares an fsm_timer for usage with fsm_addtimer.&n; *&n; * @param fi    Pointer to FSM&n; * @param timer The timer to be initialized.&n; */
r_extern
r_void
id|fsm_settimer
c_func
(paren
id|fsm_instance
op_star
id|fi
comma
id|fsm_timer
op_star
)paren
suffix:semicolon
multiline_comment|/**&n; * Clears a pending timer of an FSM instance.&n; *&n; * @param timer The timer to clear.&n; */
r_extern
r_void
id|fsm_deltimer
c_func
(paren
id|fsm_timer
op_star
id|timer
)paren
suffix:semicolon
multiline_comment|/**&n; * Adds and starts a timer to an FSM instance.&n; *&n; * @param timer    The timer to be added. The field fi of that timer&n; *                 must have been set to point to the instance.&n; * @param millisec Duration, after which the timer should expire.&n; * @param event    Event, to trigger if timer expires.&n; * @param arg      Generic argument, provided to expiry function.&n; *&n; * @return         0 on success, -1 if timer is already active.&n; */
r_extern
r_int
id|fsm_addtimer
c_func
(paren
id|fsm_timer
op_star
id|timer
comma
r_int
id|millisec
comma
r_int
id|event
comma
r_void
op_star
id|arg
)paren
suffix:semicolon
multiline_comment|/**&n; * Modifies a timer of an FSM.&n; *&n; * @param timer    The timer to modify.&n; * @param millisec Duration, after which the timer should expire.&n; * @param event    Event, to trigger if timer expires.&n; * @param arg      Generic argument, provided to expiry function.&n; */
r_extern
r_void
id|fsm_modtimer
c_func
(paren
id|fsm_timer
op_star
id|timer
comma
r_int
id|millisec
comma
r_int
id|event
comma
r_void
op_star
id|arg
)paren
suffix:semicolon
macro_line|#endif /* _FSM_H_ */
eof
