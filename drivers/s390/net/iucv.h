multiline_comment|/*&n; *  drivers/s390/net/iucv.h&n; *    IUCV base support.&n; *&n; *  S390 version&n; *    Copyright (C) 2000 IBM Corporation&n; *    Author(s):Alan Altmark (Alan_Altmark@us.ibm.com) &n; *&t;&t;Xenia Tkatschow (xenia@us.ibm.com)&n; *&n; *&n; * Functionality:&n; * To explore any of the IUCV functions, one must first register&n; * their program using iucv_register_program(). Once your program has&n; * successfully completed a register, it can exploit the other functions.&n; * For furthur reference on all IUCV functionality, refer to the&n; * CP Programming Services book, also available on the web&n; * thru www.ibm.com/s390/vm/pubs, manual # SC24-5760&n; *&n; *      Definition of Return Codes                                    &n; *      -All positive return codes including zero are reflected back  &n; *       from CP except for iucv_register_program. The definition of each &n; *       return code can be found in CP Programming Services book.    &n; *       Also available on the web thru www.ibm.com/s390/vm/pubs, manual # SC24-5760          &n; *      - Return Code of:         &n; *             (-EINVAL) Invalid value       &n; *             (-ENOMEM) storage allocation failed              &n; *&t;pgmask defined in iucv_register_program will be set depending on input&n; *&t;paramters. &n; *&t;&n; */
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;asm/debug.h&gt;
multiline_comment|/**&n; * Debug Facility stuff&n; */
DECL|macro|IUCV_DBF_SETUP_NAME
mdefine_line|#define IUCV_DBF_SETUP_NAME &quot;iucv_setup&quot;
DECL|macro|IUCV_DBF_SETUP_LEN
mdefine_line|#define IUCV_DBF_SETUP_LEN 32
DECL|macro|IUCV_DBF_SETUP_INDEX
mdefine_line|#define IUCV_DBF_SETUP_INDEX 1
DECL|macro|IUCV_DBF_SETUP_NR_AREAS
mdefine_line|#define IUCV_DBF_SETUP_NR_AREAS 1
DECL|macro|IUCV_DBF_SETUP_LEVEL
mdefine_line|#define IUCV_DBF_SETUP_LEVEL 3
DECL|macro|IUCV_DBF_DATA_NAME
mdefine_line|#define IUCV_DBF_DATA_NAME &quot;iucv_data&quot;
DECL|macro|IUCV_DBF_DATA_LEN
mdefine_line|#define IUCV_DBF_DATA_LEN 128
DECL|macro|IUCV_DBF_DATA_INDEX
mdefine_line|#define IUCV_DBF_DATA_INDEX 1
DECL|macro|IUCV_DBF_DATA_NR_AREAS
mdefine_line|#define IUCV_DBF_DATA_NR_AREAS 1
DECL|macro|IUCV_DBF_DATA_LEVEL
mdefine_line|#define IUCV_DBF_DATA_LEVEL 2
DECL|macro|IUCV_DBF_TRACE_NAME
mdefine_line|#define IUCV_DBF_TRACE_NAME &quot;iucv_trace&quot;
DECL|macro|IUCV_DBF_TRACE_LEN
mdefine_line|#define IUCV_DBF_TRACE_LEN 16
DECL|macro|IUCV_DBF_TRACE_INDEX
mdefine_line|#define IUCV_DBF_TRACE_INDEX 2
DECL|macro|IUCV_DBF_TRACE_NR_AREAS
mdefine_line|#define IUCV_DBF_TRACE_NR_AREAS 1
DECL|macro|IUCV_DBF_TRACE_LEVEL
mdefine_line|#define IUCV_DBF_TRACE_LEVEL 3
DECL|macro|IUCV_DBF_TEXT
mdefine_line|#define IUCV_DBF_TEXT(name,level,text) &bslash;&n;&t;do { &bslash;&n;&t;&t;debug_text_event(iucv_dbf_##name,level,text); &bslash;&n;&t;} while (0)
DECL|macro|IUCV_DBF_HEX
mdefine_line|#define IUCV_DBF_HEX(name,level,addr,len) &bslash;&n;&t;do { &bslash;&n;&t;&t;debug_event(iucv_dbf_##name,level,(void*)(addr),len); &bslash;&n;&t;} while (0)
r_extern
id|DEFINE_PER_CPU
c_func
(paren
r_char
(braket
l_int|256
)braket
comma
id|iucv_dbf_txt_buf
)paren
suffix:semicolon
DECL|macro|IUCV_DBF_TEXT_
mdefine_line|#define IUCV_DBF_TEXT_(name,level,text...)&t;&t;&t;&t;&bslash;&n;&t;do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;char* iucv_dbf_txt_buf = get_cpu_var(iucv_dbf_txt_buf);&t;&bslash;&n;&t;&t;sprintf(iucv_dbf_txt_buf, text);&t;&t;  &t;&bslash;&n;&t;&t;debug_text_event(iucv_dbf_##name,level,iucv_dbf_txt_buf); &bslash;&n;&t;&t;put_cpu_var(iucv_dbf_txt_buf);&t;&t;&t;&t;&bslash;&n;&t;} while (0)
DECL|macro|IUCV_DBF_SPRINTF
mdefine_line|#define IUCV_DBF_SPRINTF(name,level,text...) &bslash;&n;&t;do { &bslash;&n;&t;&t;debug_sprintf_event(iucv_dbf_trace, level, ##text ); &bslash;&n;&t;&t;debug_sprintf_event(iucv_dbf_trace, level, text ); &bslash;&n;&t;} while (0)
multiline_comment|/**&n; * some more debug stuff&n; */
DECL|macro|IUCV_HEXDUMP16
mdefine_line|#define IUCV_HEXDUMP16(importance,header,ptr) &bslash;&n;PRINT_##importance(header &quot;%02x %02x %02x %02x  %02x %02x %02x %02x  &quot; &bslash;&n;&t;&t;   &quot;%02x %02x %02x %02x  %02x %02x %02x %02x&bslash;n&quot;, &bslash;&n;&t;&t;   *(((char*)ptr)),*(((char*)ptr)+1),*(((char*)ptr)+2), &bslash;&n;&t;&t;   *(((char*)ptr)+3),*(((char*)ptr)+4),*(((char*)ptr)+5), &bslash;&n;&t;&t;   *(((char*)ptr)+6),*(((char*)ptr)+7),*(((char*)ptr)+8), &bslash;&n;&t;&t;   *(((char*)ptr)+9),*(((char*)ptr)+10),*(((char*)ptr)+11), &bslash;&n;&t;&t;   *(((char*)ptr)+12),*(((char*)ptr)+13), &bslash;&n;&t;&t;   *(((char*)ptr)+14),*(((char*)ptr)+15)); &bslash;&n;PRINT_##importance(header &quot;%02x %02x %02x %02x  %02x %02x %02x %02x  &quot; &bslash;&n;&t;&t;   &quot;%02x %02x %02x %02x  %02x %02x %02x %02x&bslash;n&quot;, &bslash;&n;&t;&t;   *(((char*)ptr)+16),*(((char*)ptr)+17), &bslash;&n;&t;&t;   *(((char*)ptr)+18),*(((char*)ptr)+19), &bslash;&n;&t;&t;   *(((char*)ptr)+20),*(((char*)ptr)+21), &bslash;&n;&t;&t;   *(((char*)ptr)+22),*(((char*)ptr)+23), &bslash;&n;&t;&t;   *(((char*)ptr)+24),*(((char*)ptr)+25), &bslash;&n;&t;&t;   *(((char*)ptr)+26),*(((char*)ptr)+27), &bslash;&n;&t;&t;   *(((char*)ptr)+28),*(((char*)ptr)+29), &bslash;&n;&t;&t;   *(((char*)ptr)+30),*(((char*)ptr)+31));
r_static
r_inline
r_void
DECL|function|iucv_hex_dump
id|iucv_hex_dump
c_func
(paren
r_int
r_char
op_star
id|buf
comma
r_int
id|len
)paren
(brace
r_int
id|i
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|len
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|i
op_logical_and
op_logical_neg
(paren
id|i
op_mod
l_int|16
)paren
)paren
id|printk
c_func
(paren
l_string|&quot;&bslash;n&quot;
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;%02x &quot;
comma
op_star
(paren
id|buf
op_plus
id|i
)paren
)paren
suffix:semicolon
)brace
id|printk
c_func
(paren
l_string|&quot;&bslash;n&quot;
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * end of debug stuff&n; */
DECL|macro|uchar
mdefine_line|#define uchar  unsigned char
DECL|macro|ushort
mdefine_line|#define ushort unsigned short
DECL|macro|ulong
mdefine_line|#define ulong  unsigned long
DECL|macro|iucv_handle_t
mdefine_line|#define iucv_handle_t void *
multiline_comment|/* flags1:&n; * All flags are defined in the field IPFLAGS1 of each function   &n; * and can be found in CP Programming Services.                  &n; * IPLOCAL  - Indicates the connect can only be satisfied on the &n; *            local system                                       &n; * IPPRTY   - Indicates a priority message                       &n; * IPQUSCE  - Indicates you do not want to receive messages on a &n; *            path until an iucv_resume is issued                &n; * IPRMDATA - Indicates that the message is in the parameter list&n; */
DECL|macro|IPLOCAL
mdefine_line|#define IPLOCAL   &t;0x01
DECL|macro|IPPRTY
mdefine_line|#define IPPRTY         &t;0x20
DECL|macro|IPQUSCE
mdefine_line|#define IPQUSCE        &t;0x40
DECL|macro|IPRMDATA
mdefine_line|#define IPRMDATA       &t;0x80
multiline_comment|/* flags1_out:&n; * All flags are defined in the output field of IPFLAGS1 for each function&n; * and can be found in CP Programming Services.&n; * IPNORPY - Specifies this is a one-way message and no reply is expected.&n; * IPPRTY   - Indicates a priority message is permitted. Defined in flags1.&n; */
DECL|macro|IPNORPY
mdefine_line|#define IPNORPY         0x10
DECL|macro|Nonpriority_MessagePendingInterruptsFlag
mdefine_line|#define Nonpriority_MessagePendingInterruptsFlag         0x80
DECL|macro|Priority_MessagePendingInterruptsFlag
mdefine_line|#define Priority_MessagePendingInterruptsFlag            0x40
DECL|macro|Nonpriority_MessageCompletionInterruptsFlag
mdefine_line|#define Nonpriority_MessageCompletionInterruptsFlag      0x20
DECL|macro|Priority_MessageCompletionInterruptsFlag
mdefine_line|#define Priority_MessageCompletionInterruptsFlag         0x10
DECL|macro|IUCVControlInterruptsFlag
mdefine_line|#define IUCVControlInterruptsFlag                        0x08
DECL|macro|AllInterrupts
mdefine_line|#define AllInterrupts                                    0xf8
multiline_comment|/*&n; * Mapping of external interrupt buffers should be used with the corresponding&n; * interrupt types.                  &n; * Names: iucv_ConnectionPending    -&gt;  connection pending &n; *        iucv_ConnectionComplete   -&gt;  connection complete&n; *        iucv_ConnectionSevered    -&gt;  connection severed &n; *        iucv_ConnectionQuiesced   -&gt;  connection quiesced &n; *        iucv_ConnectionResumed    -&gt;  connection resumed &n; *        iucv_MessagePending       -&gt;  message pending    &n; *        iucv_MessageComplete      -&gt;  message complete   &n; */
r_typedef
r_struct
(brace
DECL|member|ippathid
id|u16
id|ippathid
suffix:semicolon
DECL|member|ipflags1
id|uchar
id|ipflags1
suffix:semicolon
DECL|member|iptype
id|uchar
id|iptype
suffix:semicolon
DECL|member|ipmsglim
id|u16
id|ipmsglim
suffix:semicolon
DECL|member|res1
id|u16
id|res1
suffix:semicolon
DECL|member|ipvmid
id|uchar
id|ipvmid
(braket
l_int|8
)braket
suffix:semicolon
DECL|member|ipuser
id|uchar
id|ipuser
(braket
l_int|16
)braket
suffix:semicolon
DECL|member|res3
id|u32
id|res3
suffix:semicolon
DECL|member|ippollfg
id|uchar
id|ippollfg
suffix:semicolon
DECL|member|res4
id|uchar
id|res4
(braket
l_int|3
)braket
suffix:semicolon
DECL|typedef|iucv_ConnectionPending
)brace
id|iucv_ConnectionPending
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|ippathid
id|u16
id|ippathid
suffix:semicolon
DECL|member|ipflags1
id|uchar
id|ipflags1
suffix:semicolon
DECL|member|iptype
id|uchar
id|iptype
suffix:semicolon
DECL|member|ipmsglim
id|u16
id|ipmsglim
suffix:semicolon
DECL|member|res1
id|u16
id|res1
suffix:semicolon
DECL|member|res2
id|uchar
id|res2
(braket
l_int|8
)braket
suffix:semicolon
DECL|member|ipuser
id|uchar
id|ipuser
(braket
l_int|16
)braket
suffix:semicolon
DECL|member|res3
id|u32
id|res3
suffix:semicolon
DECL|member|ippollfg
id|uchar
id|ippollfg
suffix:semicolon
DECL|member|res4
id|uchar
id|res4
(braket
l_int|3
)braket
suffix:semicolon
DECL|typedef|iucv_ConnectionComplete
)brace
id|iucv_ConnectionComplete
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|ippathid
id|u16
id|ippathid
suffix:semicolon
DECL|member|res1
id|uchar
id|res1
suffix:semicolon
DECL|member|iptype
id|uchar
id|iptype
suffix:semicolon
DECL|member|res2
id|u32
id|res2
suffix:semicolon
DECL|member|res3
id|uchar
id|res3
(braket
l_int|8
)braket
suffix:semicolon
DECL|member|ipuser
id|uchar
id|ipuser
(braket
l_int|16
)braket
suffix:semicolon
DECL|member|res4
id|u32
id|res4
suffix:semicolon
DECL|member|ippollfg
id|uchar
id|ippollfg
suffix:semicolon
DECL|member|res5
id|uchar
id|res5
(braket
l_int|3
)braket
suffix:semicolon
DECL|typedef|iucv_ConnectionSevered
)brace
id|iucv_ConnectionSevered
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|ippathid
id|u16
id|ippathid
suffix:semicolon
DECL|member|res1
id|uchar
id|res1
suffix:semicolon
DECL|member|iptype
id|uchar
id|iptype
suffix:semicolon
DECL|member|res2
id|u32
id|res2
suffix:semicolon
DECL|member|res3
id|uchar
id|res3
(braket
l_int|8
)braket
suffix:semicolon
DECL|member|ipuser
id|uchar
id|ipuser
(braket
l_int|16
)braket
suffix:semicolon
DECL|member|res4
id|u32
id|res4
suffix:semicolon
DECL|member|ippollfg
id|uchar
id|ippollfg
suffix:semicolon
DECL|member|res5
id|uchar
id|res5
(braket
l_int|3
)braket
suffix:semicolon
DECL|typedef|iucv_ConnectionQuiesced
)brace
id|iucv_ConnectionQuiesced
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|ippathid
id|u16
id|ippathid
suffix:semicolon
DECL|member|res1
id|uchar
id|res1
suffix:semicolon
DECL|member|iptype
id|uchar
id|iptype
suffix:semicolon
DECL|member|res2
id|u32
id|res2
suffix:semicolon
DECL|member|res3
id|uchar
id|res3
(braket
l_int|8
)braket
suffix:semicolon
DECL|member|ipuser
id|uchar
id|ipuser
(braket
l_int|16
)braket
suffix:semicolon
DECL|member|res4
id|u32
id|res4
suffix:semicolon
DECL|member|ippollfg
id|uchar
id|ippollfg
suffix:semicolon
DECL|member|res5
id|uchar
id|res5
(braket
l_int|3
)braket
suffix:semicolon
DECL|typedef|iucv_ConnectionResumed
)brace
id|iucv_ConnectionResumed
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|ippathid
id|u16
id|ippathid
suffix:semicolon
DECL|member|ipflags1
id|uchar
id|ipflags1
suffix:semicolon
DECL|member|iptype
id|uchar
id|iptype
suffix:semicolon
DECL|member|ipmsgid
id|u32
id|ipmsgid
suffix:semicolon
DECL|member|iptrgcls
id|u32
id|iptrgcls
suffix:semicolon
DECL|member|iprmmsg1
id|uchar
id|iprmmsg1
(braket
l_int|4
)braket
suffix:semicolon
DECL|union|u1
r_union
id|u1
(brace
DECL|member|ipbfln1f
id|u32
id|ipbfln1f
suffix:semicolon
DECL|member|iprmmsg2
id|uchar
id|iprmmsg2
(braket
l_int|4
)braket
suffix:semicolon
DECL|member|ln1msg2
)brace
id|ln1msg2
suffix:semicolon
DECL|member|res1
id|u32
id|res1
(braket
l_int|3
)braket
suffix:semicolon
DECL|member|ipbfln2f
id|u32
id|ipbfln2f
suffix:semicolon
DECL|member|ippollfg
id|uchar
id|ippollfg
suffix:semicolon
DECL|member|res2
id|uchar
id|res2
(braket
l_int|3
)braket
suffix:semicolon
DECL|typedef|iucv_MessagePending
)brace
id|iucv_MessagePending
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|ippathid
id|u16
id|ippathid
suffix:semicolon
DECL|member|ipflags1
id|uchar
id|ipflags1
suffix:semicolon
DECL|member|iptype
id|uchar
id|iptype
suffix:semicolon
DECL|member|ipmsgid
id|u32
id|ipmsgid
suffix:semicolon
DECL|member|ipaudit
id|u32
id|ipaudit
suffix:semicolon
DECL|member|iprmmsg
id|uchar
id|iprmmsg
(braket
l_int|8
)braket
suffix:semicolon
DECL|member|ipsrccls
id|u32
id|ipsrccls
suffix:semicolon
DECL|member|ipmsgtag
id|u32
id|ipmsgtag
suffix:semicolon
DECL|member|res
id|u32
id|res
suffix:semicolon
DECL|member|ipbfln2f
id|u32
id|ipbfln2f
suffix:semicolon
DECL|member|ippollfg
id|uchar
id|ippollfg
suffix:semicolon
DECL|member|res2
id|uchar
id|res2
(braket
l_int|3
)braket
suffix:semicolon
DECL|typedef|iucv_MessageComplete
)brace
id|iucv_MessageComplete
suffix:semicolon
multiline_comment|/* &n; * iucv_interrupt_ops_t: Is a vector of functions that handle &n; * IUCV interrupts.                                          &n; * Parameter list:                                           &n; *         eib - is a pointer to a 40-byte area described    &n; *               with one of the structures above.           &n; *         pgm_data - this data is strictly for the          &n; *                    interrupt handler that is passed by    &n; *                    the application. This may be an address &n; *                    or token.                              &n;*/
r_typedef
r_struct
(brace
DECL|member|ConnectionPending
r_void
(paren
op_star
id|ConnectionPending
)paren
(paren
id|iucv_ConnectionPending
op_star
id|eib
comma
r_void
op_star
id|pgm_data
)paren
suffix:semicolon
DECL|member|ConnectionComplete
r_void
(paren
op_star
id|ConnectionComplete
)paren
(paren
id|iucv_ConnectionComplete
op_star
id|eib
comma
r_void
op_star
id|pgm_data
)paren
suffix:semicolon
DECL|member|ConnectionSevered
r_void
(paren
op_star
id|ConnectionSevered
)paren
(paren
id|iucv_ConnectionSevered
op_star
id|eib
comma
r_void
op_star
id|pgm_data
)paren
suffix:semicolon
DECL|member|ConnectionQuiesced
r_void
(paren
op_star
id|ConnectionQuiesced
)paren
(paren
id|iucv_ConnectionQuiesced
op_star
id|eib
comma
r_void
op_star
id|pgm_data
)paren
suffix:semicolon
DECL|member|ConnectionResumed
r_void
(paren
op_star
id|ConnectionResumed
)paren
(paren
id|iucv_ConnectionResumed
op_star
id|eib
comma
r_void
op_star
id|pgm_data
)paren
suffix:semicolon
DECL|member|MessagePending
r_void
(paren
op_star
id|MessagePending
)paren
(paren
id|iucv_MessagePending
op_star
id|eib
comma
r_void
op_star
id|pgm_data
)paren
suffix:semicolon
DECL|member|MessageComplete
r_void
(paren
op_star
id|MessageComplete
)paren
(paren
id|iucv_MessageComplete
op_star
id|eib
comma
r_void
op_star
id|pgm_data
)paren
suffix:semicolon
DECL|typedef|iucv_interrupt_ops_t
)brace
id|iucv_interrupt_ops_t
suffix:semicolon
multiline_comment|/*&n; *iucv_array_t : Defines buffer array.                      &n; * Inside the array may be 31- bit addresses and 31-bit lengths. &n;*/
r_typedef
r_struct
(brace
DECL|member|address
id|u32
id|address
suffix:semicolon
DECL|member|length
id|u32
id|length
suffix:semicolon
DECL|typedef|iucv_array_t
)brace
id|iucv_array_t
id|__attribute__
(paren
(paren
id|aligned
(paren
l_int|8
)paren
)paren
)paren
suffix:semicolon
r_extern
r_struct
id|bus_type
id|iucv_bus
suffix:semicolon
r_extern
r_struct
id|device
op_star
id|iucv_root
suffix:semicolon
multiline_comment|/*   -prototypes-    */
multiline_comment|/*                                                                &n; * Name: iucv_register_program                                    &n; * Purpose: Registers an application with IUCV                    &n; * Input: prmname - user identification                           &n; *        userid  - machine identification&n; *        pgmmask - indicates which bits in the prmname and userid combined will be&n; *  &t;&t;    used to determine who is given control&n; *        ops     - address of vector of interrupt handlers       &n; *        pgm_data- application data passed to interrupt handlers &n; * Output: NA                                                     &n; * Return: address of handler                                     &n; *         (0) - Error occurred, registration not completed.&n; * NOTE: Exact cause of failure will be recorded in syslog.                        &n;*/
id|iucv_handle_t
id|iucv_register_program
(paren
id|uchar
id|pgmname
(braket
l_int|16
)braket
comma
id|uchar
id|userid
(braket
l_int|8
)braket
comma
id|uchar
id|pgmmask
(braket
l_int|24
)braket
comma
id|iucv_interrupt_ops_t
op_star
id|ops
comma
r_void
op_star
id|pgm_data
)paren
suffix:semicolon
multiline_comment|/*                                                &n; * Name: iucv_unregister_program                  &n; * Purpose: Unregister application with IUCV      &n; * Input: address of handler                      &n; * Output: NA                                     &n; * Return: (0) - Normal return                    &n; *         (-EINVAL) - Internal error, wild pointer     &n;*/
r_int
id|iucv_unregister_program
(paren
id|iucv_handle_t
id|handle
)paren
suffix:semicolon
multiline_comment|/*&n; * Name: iucv_accept&n; * Purpose: This function is issued after the user receives a Connection Pending external&n; *          interrupt and now wishes to complete the IUCV communication path.&n; * Input:  pathid - u16 , Path identification number   &n; *         msglim_reqstd - u16, The number of outstanding messages requested.&n; *         user_data - uchar[16], Data specified by the iucv_connect function.&n; *&t;   flags1 - int, Contains options for this path.&n; *           -IPPRTY   - 0x20- Specifies if you want to send priority message.&n; *           -IPRMDATA - 0x80, Specifies whether your program can handle a message&n; *            &t;in  the parameter list.&n; *           -IPQUSCE  - 0x40, Specifies whether you want to quiesce the path being&n; *&t;&t;established.&n; *         handle - iucv_handle_t, Address of handler.&n; *         pgm_data - void *, Application data passed to interrupt handlers.&n; *         flags1_out - int * Contains information about the path&n; *           - IPPRTY - 0x20, Indicates you may send priority messages.&n; *         msglim - *u16, Number of outstanding messages.&n; * Output: return code from CP IUCV call.&n;*/
r_int
id|iucv_accept
(paren
id|u16
id|pathid
comma
id|u16
id|msglim_reqstd
comma
id|uchar
id|user_data
(braket
l_int|16
)braket
comma
r_int
id|flags1
comma
id|iucv_handle_t
id|handle
comma
r_void
op_star
id|pgm_data
comma
r_int
op_star
id|flags1_out
comma
id|u16
op_star
id|msglim
)paren
suffix:semicolon
multiline_comment|/*&n; * Name: iucv_connect                                         &n; * Purpose: This function establishes an IUCV path. Although the connect may complete&n; *&t;    successfully, you are not able to use the path until you receive an IUCV &n; *          Connection Complete external interrupt.            &n; * Input: pathid - u16 *, Path identification number          &n; *        msglim_reqstd - u16, Number of outstanding messages requested       &n; *        user_data - uchar[16], 16-byte user data                    &n; *&t;  userid - uchar[8], User identification&n; *        system_name - uchar[8], 8-byte identifying the system name &n; *&t;  flags1 - int, Contains options for this path.&n; *          -IPPRTY -   0x20, Specifies if you want to send priority message.&n; *          -IPRMDATA - 0x80, Specifies whether your program can handle a message&n; *            &t; in  the parameter list.&n; *          -IPQUSCE -  0x40, Specifies whether you want to quiesce the path being&t; &n; *&t;&t;established.&n; *          -IPLOCAL -  0X01, Allows an application to force the partner to be on &n; *&t;&t;the local system. If local is specified then target class cannot be&n; *&t;&t;specified.                       &n; *        flags1_out - int * Contains information about the path&n; *           - IPPRTY - 0x20, Indicates you may send priority messages.&n; *        msglim - * u16, Number of outstanding messages&n; *        handle - iucv_handle_t, Address of handler                         &n; *        pgm_data - void *, Application data passed to interrupt handlers              &n; * Output: return code from CP IUCV call&n; *         rc - return code from iucv_declare_buffer&n; *         -EINVAL - Invalid handle passed by application &n; *         -EINVAL - Pathid address is NULL &n; *         add_pathid_result - Return code from internal function add_pathid         &n;*/
r_int
id|iucv_connect
(paren
id|u16
op_star
id|pathid
comma
id|u16
id|msglim_reqstd
comma
id|uchar
id|user_data
(braket
l_int|16
)braket
comma
id|uchar
id|userid
(braket
l_int|8
)braket
comma
id|uchar
id|system_name
(braket
l_int|8
)braket
comma
r_int
id|flags1
comma
r_int
op_star
id|flags1_out
comma
id|u16
op_star
id|msglim
comma
id|iucv_handle_t
id|handle
comma
r_void
op_star
id|pgm_data
)paren
suffix:semicolon
multiline_comment|/*                                                                     &n; * Name: iucv_purge                                                    &n; * Purpose: This function cancels a message that you have sent.        &n; * Input: pathid - Path identification number.                          &n; *        msgid - Specifies the message ID of the message to be purged.&n; *        srccls - Specifies the source message class.                  &n; * Output: audit - Contains information about asynchronous error       &n; *                 that may have affected the normal completion        &n; *                 of this message.                                    &n; * Return: Return code from CP IUCV call.                           &n;*/
r_int
id|iucv_purge
(paren
id|u16
id|pathid
comma
id|u32
id|msgid
comma
id|u32
id|srccls
comma
id|__u32
op_star
id|audit
)paren
suffix:semicolon
multiline_comment|/*&n; * Name: iucv_query_maxconn&n; * Purpose: This function determines the maximum number of communication paths you&n; *&t;    may establish.&n; * Return:  maxconn - ulong, Maximum number of connection the virtual machine may&n; *          establish.&n;*/
id|ulong
id|iucv_query_maxconn
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*&n; * Name: iucv_query_bufsize&n; * Purpose: This function determines how large an external interrupt&n; *          buffer IUCV requires to store information.&n; * Return:  bufsize - ulong, Size of external interrupt buffer.&n; */
id|ulong
id|iucv_query_bufsize
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*                                                                     &n; * Name: iucv_quiesce                                                  &n; * Purpose: This function temporarily suspends incoming messages on an &n; *          IUCV path. You can later reactivate the path by invoking   &n; *          the iucv_resume function.                                  &n; * Input: pathid - Path identification number                          &n; *        user_data  - 16-bytes of user data                           &n; * Output: NA                                                          &n; * Return: Return code from CP IUCV call.                           &n;*/
r_int
id|iucv_quiesce
(paren
id|u16
id|pathid
comma
id|uchar
id|user_data
(braket
l_int|16
)braket
)paren
suffix:semicolon
multiline_comment|/*                                                                     &n; * Name: iucv_receive                                                  &n; * Purpose: This function receives messages that are being sent to you &n; *          over established paths. Data will be returned in buffer for length of&n; *          buflen.&n; * Input: &n; *       pathid - Path identification number.                          &n; *       buffer - Address of buffer to receive.                        &n; *       buflen - Length of buffer to receive.                         &n; *       msgid - Specifies the message ID.          &n; *       trgcls - Specifies target class.                       &n; * Output: &n; *&t; flags1_out: int *, Contains information about this path.&n; *         IPNORPY - 0x10 Specifies this is a one-way message and no reply is&n; *&t;   expected.      &n; *         IPPRTY  - 0x20 Specifies if you want to send priority message.       &n; *         IPRMDATA - 0x80 specifies the data is contained in the parameter list&n; *       residual_buffer - address of buffer updated by the number&n; *                         of bytes you have received.&n; *       residual_length -      &n; *              Contains one of the following values, if the receive buffer is:&n; *               The same length as the message, this field is zero.&n; *               Longer than the message, this field contains the number of&n; *                bytes remaining in the buffer.&n; *               Shorter than the message, this field contains the residual&n; *                count (that is, the number of bytes remaining in the&n; *                message that does not fit into the buffer. In this&n; *                case b2f0_result = 5.&n; * Return: Return code from CP IUCV call.                           &n; *         (-EINVAL) - buffer address is pointing to NULL                   &n;*/
r_int
id|iucv_receive
(paren
id|u16
id|pathid
comma
id|u32
id|msgid
comma
id|u32
id|trgcls
comma
r_void
op_star
id|buffer
comma
id|ulong
id|buflen
comma
r_int
op_star
id|flags1_out
comma
id|ulong
op_star
id|residual_buffer
comma
id|ulong
op_star
id|residual_length
)paren
suffix:semicolon
multiline_comment|/*                                                                     &n;  * Name: iucv_receive_array                                            &n;  * Purpose: This function receives messages that are being sent to you &n;  *          over established paths. Data will be returned in first buffer for&n;  *          length of first buffer.&n;  * Input: pathid - Path identification number.                          &n;  *        msgid - specifies the message ID.&n;  *        trgcls - Specifies target class.&n;  *        buffer - Address of array of buffers.                         &n;  *        buflen - Total length of buffers.                             &n;  * Output:&n;  *        flags1_out: int *, Contains information about this path.&n;  *          IPNORPY - 0x10 Specifies this is a one-way message and no reply is&n;  *          expected.&n;  *          IPPRTY  - 0x20 Specifies if you want to send priority message.&n;  *          IPRMDATA - 0x80 specifies the data is contained in the parameter list&n;  *       residual_buffer - address points to the current list entry IUCV&n;  *                         is working on.&n;  *       residual_length -&n;  *              Contains one of the following values, if the receive buffer is:&n;  *               The same length as the message, this field is zero.&n;  *               Longer than the message, this field contains the number of&n;  *                bytes remaining in the buffer.&n;  *               Shorter than the message, this field contains the residual&n;  *                count (that is, the number of bytes remaining in the&n;  *                message that does not fit into the buffer. In this&n;  *                case b2f0_result = 5.&n;  * Return: Return code from CP IUCV call.                           &n;  *         (-EINVAL) - Buffer address is NULL.       &n;  */
r_int
id|iucv_receive_array
(paren
id|u16
id|pathid
comma
id|u32
id|msgid
comma
id|u32
id|trgcls
comma
id|iucv_array_t
op_star
id|buffer
comma
id|ulong
id|buflen
comma
r_int
op_star
id|flags1_out
comma
id|ulong
op_star
id|residual_buffer
comma
id|ulong
op_star
id|residual_length
)paren
suffix:semicolon
multiline_comment|/*                                                                       &n; * Name: iucv_reject                                                     &n; * Purpose: The reject function refuses a specified message. Between the &n; *          time you are notified of a message and the time that you     &n; *          complete the message, the message may be rejected.           &n; * Input: pathid - Path identification number.                            &n; *        msgid - Specifies the message ID.                   &n; *        trgcls - Specifies target class.                                &n; * Output: NA                                                            &n; * Return: Return code from CP IUCV call.                             &n;*/
r_int
id|iucv_reject
(paren
id|u16
id|pathid
comma
id|u32
id|msgid
comma
id|u32
id|trgcls
)paren
suffix:semicolon
multiline_comment|/*                                                                     &n; * Name: iucv_reply                                                    &n; * Purpose: This function responds to the two-way messages that you    &n; *          receive. You must identify completely the message to       &n; *          which you wish to reply. ie, pathid, msgid, and trgcls.    &n; * Input: pathid - Path identification number.                          &n; *        msgid - Specifies the message ID.                &n; *        trgcls - Specifies target class.                              &n; *        flags1 - Option for path.&n; *          IPPRTY- 0x20, Specifies if you want to send priority message.        &n; *        buffer - Address of reply buffer.                             &n; *        buflen - Length of reply buffer.                              &n; * Output: residual_buffer - Address of buffer updated by the number &n; *                    of bytes you have moved.              &n; *         residual_length - Contains one of the following values:&n; *&t;&t;If the answer buffer is the same length as the reply, this field&n; *&t;&t; contains zero.&n; *&t;&t;If the answer buffer is longer than the reply, this field contains&n; *&t;&t; the number of bytes remaining in the buffer.  &n; *&t;&t;If the answer buffer is shorter than the reply, this field contains&n; *&t;&t; a residual count (that is, the number of bytes remianing in the&n; *&t;&t; reply that does not fit into the buffer. In this&n; *               case b2f0_result = 5.&n; * Return: Return code from CP IUCV call.                           &n; *         (-EINVAL) - Buffer address is NULL.                               &n;*/
r_int
id|iucv_reply
(paren
id|u16
id|pathid
comma
id|u32
id|msgid
comma
id|u32
id|trgcls
comma
r_int
id|flags1
comma
r_void
op_star
id|buffer
comma
id|ulong
id|buflen
comma
id|ulong
op_star
id|residual_buffer
comma
id|ulong
op_star
id|residual_length
)paren
suffix:semicolon
multiline_comment|/*                                                                       &n; * Name: iucv_reply_array                                                &n; * Purpose: This function responds to the two-way messages that you      &n; *          receive. You must identify completely the message to         &n; *          which you wish to reply. ie, pathid, msgid, and trgcls.      &n; *          The array identifies a list of addresses and lengths of      &n; *          discontiguous buffers that contains the reply data.          &n; * Input: pathid - Path identification number                            &n; *        msgid - Specifies the message ID. &n; *        trgcls - Specifies target class.                                &n; *        flags1 - Option for path.&n; *          IPPRTY- 0x20, Specifies if you want to send priority message.&n; *        buffer - Address of array of reply buffers.                     &n; *        buflen - Total length of reply buffers.                         &n; * Output: residual_buffer - Address of buffer which IUCV is currently working on.&n; *         residual_length - Contains one of the following values:&n; *              If the answer buffer is the same length as the reply, this field&n; *               contains zero.&n; *              If the answer buffer is longer than the reply, this field contains&n; *               the number of bytes remaining in the buffer.&n; *              If the answer buffer is shorter than the reply, this field contains&n; *               a residual count (that is, the number of bytes remianing in the&n; *               reply that does not fit into the buffer. In this&n; *               case b2f0_result = 5.&n; * Return: Return code from CP IUCV call.                             &n; *         (-EINVAL) - Buffer address is NULL.              &n;*/
r_int
id|iucv_reply_array
(paren
id|u16
id|pathid
comma
id|u32
id|msgid
comma
id|u32
id|trgcls
comma
r_int
id|flags1
comma
id|iucv_array_t
op_star
id|buffer
comma
id|ulong
id|buflen
comma
id|ulong
op_star
id|residual_address
comma
id|ulong
op_star
id|residual_length
)paren
suffix:semicolon
multiline_comment|/*                                                                  &n; * Name: iucv_reply_prmmsg                                          &n; * Purpose: This function responds to the two-way messages that you &n; *          receive. You must identify completely the message to    &n; *          which you wish to reply. ie, pathid, msgid, and trgcls. &n; *          Prmmsg signifies the data is moved into the             &n; *          parameter list.                                         &n; * Input: pathid - Path identification number.                       &n; *        msgid - Specifies the message ID.              &n; *        trgcls - Specifies target class.                           &n; *        flags1 - Option for path.&n; *          IPPRTY- 0x20 Specifies if you want to send priority message.&n; *        prmmsg - 8-bytes of data to be placed into the parameter.  &n; *                 list.                                            &n; * Output: NA                                                       &n; * Return: Return code from CP IUCV call.                        &n;*/
r_int
id|iucv_reply_prmmsg
(paren
id|u16
id|pathid
comma
id|u32
id|msgid
comma
id|u32
id|trgcls
comma
r_int
id|flags1
comma
id|uchar
id|prmmsg
(braket
l_int|8
)braket
)paren
suffix:semicolon
multiline_comment|/*                                                                     &n; * Name: iucv_resume                                                   &n; * Purpose: This function restores communications over a quiesced path &n; * Input: pathid - Path identification number.                          &n; *        user_data  - 16-bytes of user data.                           &n; * Output: NA                                                          &n; * Return: Return code from CP IUCV call.                           &n;*/
r_int
id|iucv_resume
(paren
id|u16
id|pathid
comma
id|uchar
id|user_data
(braket
l_int|16
)braket
)paren
suffix:semicolon
multiline_comment|/*                                                                   &n; * Name: iucv_send                                                   &n; * Purpose: This function transmits data to another application.     &n; *          Data to be transmitted is in a buffer and this is a      &n; *          one-way message and the receiver will not reply to the   &n; *          message.                                                 &n; * Input: pathid - Path identification number.                        &n; *        trgcls - Specifies target class.                            &n; *        srccls - Specifies the source message class.                &n; *        msgtag - Specifies a tag to be associated with the message. &n; *        flags1 - Option for path.&n; *          IPPRTY- 0x20 Specifies if you want to send priority message.&n; *        buffer - Address of send buffer.                            &n; *        buflen - Length of send buffer.                             &n; * Output: msgid - Specifies the message ID.                         &n; * Return: Return code from CP IUCV call.                         &n; *         (-EINVAL) - Buffer address is NULL.                             &n;*/
r_int
id|iucv_send
(paren
id|u16
id|pathid
comma
id|u32
op_star
id|msgid
comma
id|u32
id|trgcls
comma
id|u32
id|srccls
comma
id|u32
id|msgtag
comma
r_int
id|flags1
comma
r_void
op_star
id|buffer
comma
id|ulong
id|buflen
)paren
suffix:semicolon
multiline_comment|/*                                                                   &n; * Name: iucv_send_array                                             &n; * Purpose: This function transmits data to another application.     &n; *          The contents of buffer is the address of the array of    &n; *          addresses and lengths of discontiguous buffers that hold &n; *          the message text. This is a one-way message and the      &n; *          receiver will not reply to the message.                  &n; * Input: pathid - Path identification number.                        &n; *        trgcls - Specifies target class.                            &n; *        srccls - Specifies the source message class.                &n; *        msgtag - Specifies a tag to be associated witht the message.&n; *        flags1 - Option for path.&n; *          IPPRTY- specifies if you want to send priority message. &n; *        buffer - Address of array of send buffers.                  &n; *        buflen - Total length of send buffers.                      &n; * Output: msgid - Specifies the message ID.                         &n; * Return: Return code from CP IUCV call.                         &n; *         (-EINVAL) - Buffer address is NULL.                             &n;*/
r_int
id|iucv_send_array
(paren
id|u16
id|pathid
comma
id|u32
op_star
id|msgid
comma
id|u32
id|trgcls
comma
id|u32
id|srccls
comma
id|u32
id|msgtag
comma
r_int
id|flags1
comma
id|iucv_array_t
op_star
id|buffer
comma
id|ulong
id|buflen
)paren
suffix:semicolon
multiline_comment|/*                                                                     &n; * Name: iucv_send_prmmsg                                              &n; * Purpose: This function transmits data to another application.       &n; *          Prmmsg specifies that the 8-bytes of data are to be moved  &n; *          into the parameter list. This is a one-way message and the &n; *          receiver will not reply to the message.                    &n; * Input: pathid - Path identification number.                          &n; *        trgcls - Specifies target class.                              &n; *        srccls - Specifies the source message class.                  &n; *        msgtag - Specifies a tag to be associated with the message.   &n; *        flags1 - Option for path.&n; *          IPPRTY- 0x20 specifies if you want to send priority message.&n; *        prmmsg - 8-bytes of data to be placed into parameter list.    &n; * Output: msgid - Specifies the message ID.                           &n; * Return: Return code from CP IUCV call.                           &n;*/
r_int
id|iucv_send_prmmsg
(paren
id|u16
id|pathid
comma
id|u32
op_star
id|msgid
comma
id|u32
id|trgcls
comma
id|u32
id|srccls
comma
id|u32
id|msgtag
comma
r_int
id|flags1
comma
id|uchar
id|prmmsg
(braket
l_int|8
)braket
)paren
suffix:semicolon
multiline_comment|/*                                                                &n; * Name: iucv_send2way                                            &n; * Purpose: This function transmits data to another application.  &n; *          Data to be transmitted is in a buffer. The receiver   &n; *          of the send is expected to reply to the message and   &n; *          a buffer is provided into which IUCV moves the reply  &n; *          to this message.                                      &n; * Input: pathid - Path identification number.                     &n; *        trgcls - Specifies target class.                         &n; *        srccls - Specifies the source message class.             &n; *        msgtag - Specifies a tag associated with the message.    &n; *        flags1 - Option for path.&n; *          IPPRTY- 0x20 Specifies if you want to send priority message.&n; *        buffer - Address of send buffer.                         &n; *        buflen - Length of send buffer.                          &n; *        ansbuf - Address of buffer into which IUCV moves the reply of &n; *                 this message.        &n; *        anslen - Address of length of buffer.          &n; * Output: msgid - Specifies the message ID.                      &n; * Return: Return code from CP IUCV call.                      &n; *         (-EINVAL) - Buffer or ansbuf address is NULL.    &n;*/
r_int
id|iucv_send2way
(paren
id|u16
id|pathid
comma
id|u32
op_star
id|msgid
comma
id|u32
id|trgcls
comma
id|u32
id|srccls
comma
id|u32
id|msgtag
comma
r_int
id|flags1
comma
r_void
op_star
id|buffer
comma
id|ulong
id|buflen
comma
r_void
op_star
id|ansbuf
comma
id|ulong
id|anslen
)paren
suffix:semicolon
multiline_comment|/*                                                                    &n; * Name: iucv_send2way_array                                          &n; * Purpose: This function transmits data to another application.      &n; *          The contents of buffer is the address of the array of     &n; *          addresses and lengths of discontiguous buffers that hold  &n; *          the message text. The receiver of the send is expected to &n; *          reply to the message and a buffer is provided into which  &n; *          IUCV moves the reply to this message.                     &n; * Input: pathid - Path identification number.                         &n; *        trgcls - Specifies target class.                             &n; *        srccls - Specifies the source message class.                 &n; *        msgtag - Specifies a tag to be associated with the message.   &n; *        flags1 - Option for path.&n; *          IPPRTY- 0x20 Specifies if you want to send priority message.&n; *        buffer - Sddress of array of send buffers.                   &n; *        buflen - Total length of send buffers.                       &n; *        ansbuf - Address of array of buffer into which IUCV moves the reply            &n; *                 of this message.                         &n; *        anslen - Address of length reply buffers.              &n; * Output: msgid - Specifies the message ID.                          &n; * Return: Return code from CP IUCV call.                          &n; *         (-EINVAL) - Buffer address is NULL.                              &n;*/
r_int
id|iucv_send2way_array
(paren
id|u16
id|pathid
comma
id|u32
op_star
id|msgid
comma
id|u32
id|trgcls
comma
id|u32
id|srccls
comma
id|u32
id|msgtag
comma
r_int
id|flags1
comma
id|iucv_array_t
op_star
id|buffer
comma
id|ulong
id|buflen
comma
id|iucv_array_t
op_star
id|ansbuf
comma
id|ulong
id|anslen
)paren
suffix:semicolon
multiline_comment|/*                                                                     &n; * Name: iucv_send2way_prmmsg                                          &n; * Purpose: This function transmits data to another application.       &n; *          Prmmsg specifies that the 8-bytes of data are to be moved  &n; *          into the parameter list. This is a two-way message and the &n; *          receiver of the message is expected to reply. A buffer     &n; *          is provided into which IUCV moves the reply to this        &n; *          message.                                                   &n; * Input: pathid - Rath identification number.                          &n; *        trgcls - Specifies target class.                              &n; *        srccls - Specifies the source message class.                  &n; *        msgtag - Specifies a tag to be associated with the message.   &n; *        flags1 - Option for path.&n; *          IPPRTY- 0x20 Specifies if you want to send priority message.&n; *        prmmsg - 8-bytes of data to be placed in parameter list.      &n; *        ansbuf - Address of buffer into which IUCV moves the reply of    &n; *                 this message.&n; *        anslen - Address of length of buffer.               &n; * Output: msgid - Specifies the message ID.                           &n; * Return: Return code from CP IUCV call.                           &n; *         (-EINVAL) - Buffer address is NULL.         &n;*/
r_int
id|iucv_send2way_prmmsg
(paren
id|u16
id|pathid
comma
id|u32
op_star
id|msgid
comma
id|u32
id|trgcls
comma
id|u32
id|srccls
comma
id|u32
id|msgtag
comma
id|ulong
id|flags1
comma
id|uchar
id|prmmsg
(braket
l_int|8
)braket
comma
r_void
op_star
id|ansbuf
comma
id|ulong
id|anslen
)paren
suffix:semicolon
multiline_comment|/*                                                                      &n; * Name: iucv_send2way_prmmsg_array                                     &n; * Purpose: This function transmits data to another application.        &n; *          Prmmsg specifies that the 8-bytes of data are to be moved   &n; *          into the parameter list. This is a two-way message and the  &n; *          receiver of the message is expected to reply. A buffer      &n; *          is provided into which IUCV moves the reply to this         &n; *          message. The contents of ansbuf is the address of the       &n; *          array of addresses and lengths of discontiguous buffers     &n; *          that contain the reply.                                     &n; * Input: pathid - Path identification number.                           &n; *        trgcls - Specifies target class.                               &n; *        srccls - Specifies the source message class.                   &n; *        msgtag - Specifies a tag to be associated with the message.    &n; *        flags1 - Option for path.&n; *          IPPRTY- 0x20 specifies if you want to send priority message.&n; *        prmmsg - 8-bytes of data to be placed into the parameter list. &n; *        ansbuf - Address of array of buffer into which IUCV moves the reply&n; *                 of this message.  &n; *        anslen - Address of length of reply buffers.                &n; * Output: msgid - Specifies the message ID.      &n; * Return: Return code from CP IUCV call.      &n; *         (-EINVAL) - Ansbuf address is NULL.          &n;*/
r_int
id|iucv_send2way_prmmsg_array
(paren
id|u16
id|pathid
comma
id|u32
op_star
id|msgid
comma
id|u32
id|trgcls
comma
id|u32
id|srccls
comma
id|u32
id|msgtag
comma
r_int
id|flags1
comma
id|uchar
id|prmmsg
(braket
l_int|8
)braket
comma
id|iucv_array_t
op_star
id|ansbuf
comma
id|ulong
id|anslen
)paren
suffix:semicolon
multiline_comment|/*                                                                   &n; * Name: iucv_setmask                                                &n; * Purpose: This function enables or disables the following IUCV     &n; *          external interruptions: Nonpriority and priority message &n; *          interrupts, nonpriority and priority reply interrupts.   &n; * Input: SetMaskFlag - options for interrupts&n; *           0x80 - Nonpriority_MessagePendingInterruptsFlag         &n; *           0x40 - Priority_MessagePendingInterruptsFlag            &n; *           0x20 - Nonpriority_MessageCompletionInterruptsFlag      &n; *           0x10 - Priority_MessageCompletionInterruptsFlag         &n; *           0x08 - IUCVControlInterruptsFlag&n; * Output: NA                                                        &n; * Return: Return code from CP IUCV call.                         &n;*/
r_int
id|iucv_setmask
(paren
r_int
id|SetMaskFlag
)paren
suffix:semicolon
multiline_comment|/*                                                  &n; * Name: iucv_sever                                 &n; * Purpose: This function terminates an IUCV path.  &n; * Input: pathid - Path identification number.       &n; *        user_data - 16-bytes of user data.         &n; * Output: NA       &n; * Return: Return code from CP IUCV call.                                &n; *         (-EINVAL) - Interal error, wild pointer.       &n;*/
r_int
id|iucv_sever
(paren
id|u16
id|pathid
comma
id|uchar
id|user_data
(braket
l_int|16
)braket
)paren
suffix:semicolon
eof
