multiline_comment|/*&n; *  drivers/s390/char/tape.h&n; *    tape device driver for 3480/3490E/3590 tapes.&n; *&n; *  S390 and zSeries version&n; *    Copyright (C) 2001,2002 IBM Deutschland Entwicklung GmbH, IBM Corporation&n; *    Author(s): Carsten Otte &lt;cotte@de.ibm.com&gt;&n; *&t;&t; Tuan Ngo-Anh &lt;ngoanh@de.ibm.com&gt;&n; *&t;&t; Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;&n; */
macro_line|#ifndef _TAPE_H
DECL|macro|_TAPE_H
mdefine_line|#define _TAPE_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/blkdev.h&gt;
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;linux/version.h&gt;
macro_line|#include &lt;linux/module.h&gt;
macro_line|#include &lt;linux/mtio.h&gt;
macro_line|#include &lt;linux/interrupt.h&gt;
macro_line|#include &lt;asm/ccwdev.h&gt;
macro_line|#include &lt;asm/debug.h&gt;
macro_line|#include &lt;asm/idals.h&gt;
r_struct
id|gendisk
suffix:semicolon
multiline_comment|/*&n; * macros s390 debug feature (dbf)&n; */
DECL|macro|DBF_EVENT
mdefine_line|#define DBF_EVENT(d_level, d_str...) &bslash;&n;do { &bslash;&n;&t;debug_sprintf_event(tape_dbf_area, d_level, d_str); &bslash;&n;} while (0)
DECL|macro|DBF_EXCEPTION
mdefine_line|#define DBF_EXCEPTION(d_level, d_str...) &bslash;&n;do { &bslash;&n;&t;debug_sprintf_exception(tape_dbf_area, d_level, d_str); &bslash;&n;} while (0)
DECL|macro|TAPE_VERSION_MAJOR
mdefine_line|#define TAPE_VERSION_MAJOR 2
DECL|macro|TAPE_VERSION_MINOR
mdefine_line|#define TAPE_VERSION_MINOR 0
DECL|macro|TAPE_MAGIC
mdefine_line|#define TAPE_MAGIC &quot;tape&quot;
DECL|macro|TAPE_MINORS_PER_DEV
mdefine_line|#define TAPE_MINORS_PER_DEV 2&t;    /* two minors per device */
DECL|macro|TAPEBLOCK_HSEC_SIZE
mdefine_line|#define TAPEBLOCK_HSEC_SIZE&t;2048
DECL|macro|TAPEBLOCK_HSEC_S2B
mdefine_line|#define TAPEBLOCK_HSEC_S2B&t;2
DECL|macro|TAPEBLOCK_RETRIES
mdefine_line|#define TAPEBLOCK_RETRIES&t;5
DECL|macro|TAPE_BUSY
mdefine_line|#define TAPE_BUSY(td) (td-&gt;treq != NULL)
DECL|enum|tape_medium_state
r_enum
id|tape_medium_state
(brace
DECL|enumerator|MS_UNKNOWN
id|MS_UNKNOWN
comma
DECL|enumerator|MS_LOADED
id|MS_LOADED
comma
DECL|enumerator|MS_UNLOADED
id|MS_UNLOADED
comma
DECL|enumerator|MS_SIZE
id|MS_SIZE
)brace
suffix:semicolon
DECL|enum|tape_state
r_enum
id|tape_state
(brace
DECL|enumerator|TS_UNUSED
id|TS_UNUSED
op_assign
l_int|0
comma
DECL|enumerator|TS_IN_USE
id|TS_IN_USE
comma
DECL|enumerator|TS_INIT
id|TS_INIT
comma
DECL|enumerator|TS_NOT_OPER
id|TS_NOT_OPER
comma
DECL|enumerator|TS_SIZE
id|TS_SIZE
)brace
suffix:semicolon
DECL|enum|tape_op
r_enum
id|tape_op
(brace
DECL|enumerator|TO_BLOCK
id|TO_BLOCK
comma
multiline_comment|/* Block read */
DECL|enumerator|TO_BSB
id|TO_BSB
comma
multiline_comment|/* Backward space block */
DECL|enumerator|TO_BSF
id|TO_BSF
comma
multiline_comment|/* Backward space filemark */
DECL|enumerator|TO_DSE
id|TO_DSE
comma
multiline_comment|/* Data security erase */
DECL|enumerator|TO_FSB
id|TO_FSB
comma
multiline_comment|/* Forward space block */
DECL|enumerator|TO_FSF
id|TO_FSF
comma
multiline_comment|/* Forward space filemark */
DECL|enumerator|TO_LBL
id|TO_LBL
comma
multiline_comment|/* Locate block label */
DECL|enumerator|TO_NOP
id|TO_NOP
comma
multiline_comment|/* No operation */
DECL|enumerator|TO_RBA
id|TO_RBA
comma
multiline_comment|/* Read backward */
DECL|enumerator|TO_RBI
id|TO_RBI
comma
multiline_comment|/* Read block information */
DECL|enumerator|TO_RFO
id|TO_RFO
comma
multiline_comment|/* Read forward */
DECL|enumerator|TO_REW
id|TO_REW
comma
multiline_comment|/* Rewind tape */
DECL|enumerator|TO_RUN
id|TO_RUN
comma
multiline_comment|/* Rewind and unload tape */
DECL|enumerator|TO_WRI
id|TO_WRI
comma
multiline_comment|/* Write block */
DECL|enumerator|TO_WTM
id|TO_WTM
comma
multiline_comment|/* Write tape mark */
DECL|enumerator|TO_MSEN
id|TO_MSEN
comma
multiline_comment|/* Medium sense */
DECL|enumerator|TO_LOAD
id|TO_LOAD
comma
multiline_comment|/* Load tape */
DECL|enumerator|TO_READ_CONFIG
id|TO_READ_CONFIG
comma
multiline_comment|/* Read configuration data */
DECL|enumerator|TO_READ_ATTMSG
id|TO_READ_ATTMSG
comma
multiline_comment|/* Read attention message */
DECL|enumerator|TO_DIS
id|TO_DIS
comma
multiline_comment|/* Tape display */
DECL|enumerator|TO_ASSIGN
id|TO_ASSIGN
comma
multiline_comment|/* Assign tape to channel path */
DECL|enumerator|TO_UNASSIGN
id|TO_UNASSIGN
comma
multiline_comment|/* Unassign tape from channel path */
DECL|enumerator|TO_SIZE
id|TO_SIZE
multiline_comment|/* #entries in tape_op_t */
)brace
suffix:semicolon
multiline_comment|/* Forward declaration */
r_struct
id|tape_device
suffix:semicolon
multiline_comment|/* tape_request-&gt;status can be: */
DECL|enum|tape_request_status
r_enum
id|tape_request_status
(brace
DECL|enumerator|TAPE_REQUEST_INIT
id|TAPE_REQUEST_INIT
comma
multiline_comment|/* request is ready to be processed */
DECL|enumerator|TAPE_REQUEST_QUEUED
id|TAPE_REQUEST_QUEUED
comma
multiline_comment|/* request is queued to be processed */
DECL|enumerator|TAPE_REQUEST_IN_IO
id|TAPE_REQUEST_IN_IO
comma
multiline_comment|/* request is currently in IO */
DECL|enumerator|TAPE_REQUEST_DONE
id|TAPE_REQUEST_DONE
comma
multiline_comment|/* request is completed. */
)brace
suffix:semicolon
multiline_comment|/* Tape CCW request */
DECL|struct|tape_request
r_struct
id|tape_request
(brace
DECL|member|list
r_struct
id|list_head
id|list
suffix:semicolon
multiline_comment|/* list head for request queueing. */
DECL|member|device
r_struct
id|tape_device
op_star
id|device
suffix:semicolon
multiline_comment|/* tape device of this request */
DECL|member|cpaddr
r_struct
id|ccw1
op_star
id|cpaddr
suffix:semicolon
multiline_comment|/* address of the channel program. */
DECL|member|cpdata
r_void
op_star
id|cpdata
suffix:semicolon
multiline_comment|/* pointer to ccw data. */
DECL|member|status
r_enum
id|tape_request_status
id|status
suffix:semicolon
multiline_comment|/* status of this request */
DECL|member|options
r_int
id|options
suffix:semicolon
multiline_comment|/* options for execution. */
DECL|member|retries
r_int
id|retries
suffix:semicolon
multiline_comment|/* retry counter for error recovery. */
DECL|member|rescnt
r_int
id|rescnt
suffix:semicolon
multiline_comment|/* residual count from devstat. */
multiline_comment|/* Callback for delivering final status. */
DECL|member|callback
r_void
(paren
op_star
id|callback
)paren
(paren
r_struct
id|tape_request
op_star
comma
r_void
op_star
)paren
suffix:semicolon
DECL|member|callback_data
r_void
op_star
id|callback_data
suffix:semicolon
DECL|member|op
r_enum
id|tape_op
id|op
suffix:semicolon
DECL|member|rc
r_int
id|rc
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Function type for magnetic tape commands */
DECL|typedef|tape_mtop_fn
r_typedef
r_int
(paren
op_star
id|tape_mtop_fn
)paren
(paren
r_struct
id|tape_device
op_star
comma
r_int
)paren
suffix:semicolon
multiline_comment|/* Size of the array containing the mtops for a discipline */
DECL|macro|TAPE_NR_MTOPS
mdefine_line|#define TAPE_NR_MTOPS (MTMKPART+1)
multiline_comment|/* Tape Discipline */
DECL|struct|tape_discipline
r_struct
id|tape_discipline
(brace
DECL|member|owner
r_struct
id|module
op_star
id|owner
suffix:semicolon
DECL|member|setup_device
r_int
(paren
op_star
id|setup_device
)paren
(paren
r_struct
id|tape_device
op_star
)paren
suffix:semicolon
DECL|member|cleanup_device
r_void
(paren
op_star
id|cleanup_device
)paren
(paren
r_struct
id|tape_device
op_star
)paren
suffix:semicolon
DECL|member|assign
r_int
(paren
op_star
id|assign
)paren
(paren
r_struct
id|tape_device
op_star
)paren
suffix:semicolon
DECL|member|unassign
r_int
(paren
op_star
id|unassign
)paren
(paren
r_struct
id|tape_device
op_star
)paren
suffix:semicolon
DECL|member|irq
r_int
(paren
op_star
id|irq
)paren
(paren
r_struct
id|tape_device
op_star
comma
r_struct
id|tape_request
op_star
comma
r_struct
id|irb
op_star
)paren
suffix:semicolon
DECL|member|read_block
r_struct
id|tape_request
op_star
(paren
op_star
id|read_block
)paren
(paren
r_struct
id|tape_device
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|write_block
r_struct
id|tape_request
op_star
(paren
op_star
id|write_block
)paren
(paren
r_struct
id|tape_device
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|process_eov
r_void
(paren
op_star
id|process_eov
)paren
(paren
r_struct
id|tape_device
op_star
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_S390_TAPE_BLOCK
multiline_comment|/* Block device stuff. */
DECL|member|bread
r_struct
id|tape_request
op_star
(paren
op_star
id|bread
)paren
(paren
r_struct
id|tape_device
op_star
comma
r_struct
id|request
op_star
)paren
suffix:semicolon
DECL|member|check_locate
r_void
(paren
op_star
id|check_locate
)paren
(paren
r_struct
id|tape_device
op_star
comma
r_struct
id|tape_request
op_star
)paren
suffix:semicolon
DECL|member|free_bread
r_void
(paren
op_star
id|free_bread
)paren
(paren
r_struct
id|tape_request
op_star
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/* ioctl function for additional ioctls. */
DECL|member|ioctl_fn
r_int
(paren
op_star
id|ioctl_fn
)paren
(paren
r_struct
id|tape_device
op_star
comma
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
multiline_comment|/* Array of tape commands with TAPE_NR_MTOPS entries */
DECL|member|mtop_array
id|tape_mtop_fn
op_star
id|mtop_array
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * The discipline irq function either returns an error code (&lt;0) which&n; * means that the request has failed with an error or one of the following:&n; */
DECL|macro|TAPE_IO_SUCCESS
mdefine_line|#define TAPE_IO_SUCCESS 0&t;/* request successful */
DECL|macro|TAPE_IO_PENDING
mdefine_line|#define TAPE_IO_PENDING 1&t;/* request still running */
DECL|macro|TAPE_IO_RETRY
mdefine_line|#define TAPE_IO_RETRY&t;2&t;/* retry to current request */
DECL|macro|TAPE_IO_STOP
mdefine_line|#define TAPE_IO_STOP&t;3&t;/* stop the running request */
multiline_comment|/* Char Frontend Data */
DECL|struct|tape_char_data
r_struct
id|tape_char_data
(brace
DECL|member|idal_buf
r_struct
id|idal_buffer
op_star
id|idal_buf
suffix:semicolon
multiline_comment|/* idal buffer for user char data */
DECL|member|block_size
r_int
id|block_size
suffix:semicolon
multiline_comment|/*   of size block_size. */
)brace
suffix:semicolon
macro_line|#ifdef CONFIG_S390_TAPE_BLOCK
multiline_comment|/* Block Frontend Data */
DECL|struct|tape_blk_data
r_struct
id|tape_blk_data
(brace
multiline_comment|/* Block device request queue. */
DECL|member|request_queue
id|request_queue_t
id|request_queue
suffix:semicolon
DECL|member|request_queue_lock
id|spinlock_t
id|request_queue_lock
suffix:semicolon
multiline_comment|/* Block frontend tasklet */
DECL|member|tasklet
r_struct
id|tasklet_struct
id|tasklet
suffix:semicolon
multiline_comment|/* Current position on the tape. */
DECL|member|block_position
r_int
id|block_position
suffix:semicolon
DECL|member|disk
r_struct
id|gendisk
op_star
id|disk
suffix:semicolon
)brace
suffix:semicolon
macro_line|#endif
multiline_comment|/* Tape Info */
DECL|struct|tape_device
r_struct
id|tape_device
(brace
multiline_comment|/* entry in tape_device_list */
DECL|member|node
r_struct
id|list_head
id|node
suffix:semicolon
DECL|member|cdev
r_struct
id|ccw_device
op_star
id|cdev
suffix:semicolon
multiline_comment|/* Device discipline information. */
DECL|member|discipline
r_struct
id|tape_discipline
op_star
id|discipline
suffix:semicolon
DECL|member|discdata
r_void
op_star
id|discdata
suffix:semicolon
multiline_comment|/* Generic status flags */
DECL|member|tape_generic_status
r_int
id|tape_generic_status
suffix:semicolon
multiline_comment|/* Device state information. */
DECL|member|state_change_wq
id|wait_queue_head_t
id|state_change_wq
suffix:semicolon
DECL|member|tape_state
r_enum
id|tape_state
id|tape_state
suffix:semicolon
DECL|member|medium_state
r_enum
id|tape_medium_state
id|medium_state
suffix:semicolon
DECL|member|modeset_byte
r_int
r_char
op_star
id|modeset_byte
suffix:semicolon
multiline_comment|/* Reference count. */
DECL|member|ref_count
id|atomic_t
id|ref_count
suffix:semicolon
multiline_comment|/* Request queue. */
DECL|member|req_queue
r_struct
id|list_head
id|req_queue
suffix:semicolon
DECL|member|first_minor
r_int
id|first_minor
suffix:semicolon
multiline_comment|/* each tape device has two minors */
multiline_comment|/* Character device frontend data */
DECL|member|char_data
r_struct
id|tape_char_data
id|char_data
suffix:semicolon
macro_line|#ifdef CONFIG_S390_TAPE_BLOCK
multiline_comment|/* Block dev frontend data */
DECL|member|blk_data
r_struct
id|tape_blk_data
id|blk_data
suffix:semicolon
macro_line|#endif
)brace
suffix:semicolon
multiline_comment|/* Externals from tape_core.c */
r_extern
r_struct
id|tape_request
op_star
id|tape_alloc_request
c_func
(paren
r_int
id|cplength
comma
r_int
id|datasize
)paren
suffix:semicolon
r_extern
r_void
id|tape_free_request
c_func
(paren
r_struct
id|tape_request
op_star
)paren
suffix:semicolon
r_extern
r_int
id|tape_do_io
c_func
(paren
r_struct
id|tape_device
op_star
comma
r_struct
id|tape_request
op_star
)paren
suffix:semicolon
r_extern
r_int
id|tape_do_io_async
c_func
(paren
r_struct
id|tape_device
op_star
comma
r_struct
id|tape_request
op_star
)paren
suffix:semicolon
r_extern
r_int
id|tape_do_io_interruptible
c_func
(paren
r_struct
id|tape_device
op_star
comma
r_struct
id|tape_request
op_star
)paren
suffix:semicolon
r_static
r_inline
r_int
DECL|function|tape_do_io_free
id|tape_do_io_free
c_func
(paren
r_struct
id|tape_device
op_star
id|device
comma
r_struct
id|tape_request
op_star
id|request
)paren
(brace
r_int
id|rc
suffix:semicolon
id|rc
op_assign
id|tape_do_io
c_func
(paren
id|device
comma
id|request
)paren
suffix:semicolon
id|tape_free_request
c_func
(paren
id|request
)paren
suffix:semicolon
r_return
id|rc
suffix:semicolon
)brace
r_extern
r_int
id|tape_oper_handler
c_func
(paren
r_int
id|irq
comma
r_int
id|status
)paren
suffix:semicolon
r_extern
r_void
id|tape_noper_handler
c_func
(paren
r_int
id|irq
comma
r_int
id|status
)paren
suffix:semicolon
r_extern
r_int
id|tape_open
c_func
(paren
r_struct
id|tape_device
op_star
)paren
suffix:semicolon
r_extern
r_int
id|tape_release
c_func
(paren
r_struct
id|tape_device
op_star
)paren
suffix:semicolon
r_extern
r_int
id|tape_assign
c_func
(paren
r_struct
id|tape_device
op_star
)paren
suffix:semicolon
r_extern
r_int
id|tape_unassign
c_func
(paren
r_struct
id|tape_device
op_star
)paren
suffix:semicolon
r_extern
r_int
id|tape_mtop
c_func
(paren
r_struct
id|tape_device
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|tape_enable_device
c_func
(paren
r_struct
id|tape_device
op_star
comma
r_struct
id|tape_discipline
op_star
)paren
suffix:semicolon
r_extern
r_void
id|tape_disable_device
c_func
(paren
r_struct
id|tape_device
op_star
id|device
)paren
suffix:semicolon
multiline_comment|/* Externals from tape_devmap.c */
r_extern
r_int
id|tape_generic_probe
c_func
(paren
r_struct
id|ccw_device
op_star
)paren
suffix:semicolon
r_extern
r_int
id|tape_generic_remove
c_func
(paren
r_struct
id|ccw_device
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|tape_device
op_star
id|tape_get_device
c_func
(paren
r_int
id|devindex
)paren
suffix:semicolon
r_extern
r_void
id|tape_put_device
c_func
(paren
r_struct
id|tape_device
op_star
)paren
suffix:semicolon
multiline_comment|/* Externals from tape_char.c */
r_extern
r_int
id|tapechar_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|tapechar_exit
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|tapechar_setup_device
c_func
(paren
r_struct
id|tape_device
op_star
)paren
suffix:semicolon
r_extern
r_void
id|tapechar_cleanup_device
c_func
(paren
r_struct
id|tape_device
op_star
)paren
suffix:semicolon
multiline_comment|/* Externals from tape_block.c */
macro_line|#ifdef CONFIG_S390_TAPE_BLOCK
r_extern
r_int
id|tapeblock_init
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|tapeblock_exit
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|tapeblock_setup_device
c_func
(paren
r_struct
id|tape_device
op_star
)paren
suffix:semicolon
r_extern
r_void
id|tapeblock_cleanup_device
c_func
(paren
r_struct
id|tape_device
op_star
)paren
suffix:semicolon
macro_line|#else
DECL|function|tapeblock_init
r_static
r_inline
r_int
id|tapeblock_init
(paren
r_void
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|tapeblock_exit
r_static
r_inline
r_void
id|tapeblock_exit
(paren
r_void
)paren
(brace
suffix:semicolon
)brace
DECL|function|tapeblock_setup_device
r_static
r_inline
r_int
id|tapeblock_setup_device
c_func
(paren
r_struct
id|tape_device
op_star
id|t
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|tapeblock_cleanup_device
r_static
r_inline
r_void
id|tapeblock_cleanup_device
(paren
r_struct
id|tape_device
op_star
id|t
)paren
(brace
suffix:semicolon
)brace
macro_line|#endif
multiline_comment|/* tape initialisation functions */
macro_line|#ifdef CONFIG_PROC_FS
r_extern
r_void
id|tape_proc_init
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|tape_proc_cleanup
(paren
r_void
)paren
suffix:semicolon
macro_line|#else
DECL|function|tape_proc_init
r_static
r_inline
r_void
id|tape_proc_init
(paren
r_void
)paren
(brace
suffix:semicolon
)brace
DECL|function|tape_proc_cleanup
r_static
r_inline
r_void
id|tape_proc_cleanup
(paren
r_void
)paren
(brace
suffix:semicolon
)brace
macro_line|#endif
multiline_comment|/* a function for dumping device sense info */
r_extern
r_void
id|tape_dump_sense
c_func
(paren
r_struct
id|tape_device
op_star
comma
r_struct
id|tape_request
op_star
comma
r_struct
id|irb
op_star
)paren
suffix:semicolon
r_extern
r_void
id|tape_dump_sense_dbf
c_func
(paren
r_struct
id|tape_device
op_star
comma
r_struct
id|tape_request
op_star
comma
r_struct
id|irb
op_star
)paren
suffix:semicolon
multiline_comment|/* functions for handling the status of a device */
r_extern
r_void
id|tape_med_state_set
c_func
(paren
r_struct
id|tape_device
op_star
comma
r_enum
id|tape_medium_state
)paren
suffix:semicolon
multiline_comment|/* The debug area */
r_extern
id|debug_info_t
op_star
id|tape_dbf_area
suffix:semicolon
multiline_comment|/* functions for building ccws */
r_static
r_inline
r_struct
id|ccw1
op_star
DECL|function|tape_ccw_cc
id|tape_ccw_cc
c_func
(paren
r_struct
id|ccw1
op_star
id|ccw
comma
id|__u8
id|cmd_code
comma
id|__u16
id|memsize
comma
r_void
op_star
id|cda
)paren
(brace
id|ccw-&gt;cmd_code
op_assign
id|cmd_code
suffix:semicolon
id|ccw-&gt;flags
op_assign
id|CCW_FLAG_CC
suffix:semicolon
id|ccw-&gt;count
op_assign
id|memsize
suffix:semicolon
id|ccw-&gt;cda
op_assign
(paren
id|__u32
)paren
(paren
id|addr_t
)paren
id|cda
suffix:semicolon
r_return
id|ccw
op_plus
l_int|1
suffix:semicolon
)brace
r_static
r_inline
r_struct
id|ccw1
op_star
DECL|function|tape_ccw_end
id|tape_ccw_end
c_func
(paren
r_struct
id|ccw1
op_star
id|ccw
comma
id|__u8
id|cmd_code
comma
id|__u16
id|memsize
comma
r_void
op_star
id|cda
)paren
(brace
id|ccw-&gt;cmd_code
op_assign
id|cmd_code
suffix:semicolon
id|ccw-&gt;flags
op_assign
l_int|0
suffix:semicolon
id|ccw-&gt;count
op_assign
id|memsize
suffix:semicolon
id|ccw-&gt;cda
op_assign
(paren
id|__u32
)paren
(paren
id|addr_t
)paren
id|cda
suffix:semicolon
r_return
id|ccw
op_plus
l_int|1
suffix:semicolon
)brace
r_static
r_inline
r_struct
id|ccw1
op_star
DECL|function|tape_ccw_cmd
id|tape_ccw_cmd
c_func
(paren
r_struct
id|ccw1
op_star
id|ccw
comma
id|__u8
id|cmd_code
)paren
(brace
id|ccw-&gt;cmd_code
op_assign
id|cmd_code
suffix:semicolon
id|ccw-&gt;flags
op_assign
l_int|0
suffix:semicolon
id|ccw-&gt;count
op_assign
l_int|0
suffix:semicolon
id|ccw-&gt;cda
op_assign
(paren
id|__u32
)paren
(paren
id|addr_t
)paren
op_amp
id|ccw-&gt;cmd_code
suffix:semicolon
r_return
id|ccw
op_plus
l_int|1
suffix:semicolon
)brace
r_static
r_inline
r_struct
id|ccw1
op_star
DECL|function|tape_ccw_repeat
id|tape_ccw_repeat
c_func
(paren
r_struct
id|ccw1
op_star
id|ccw
comma
id|__u8
id|cmd_code
comma
r_int
id|count
)paren
(brace
r_while
c_loop
(paren
id|count
op_decrement
OG
l_int|0
)paren
(brace
id|ccw-&gt;cmd_code
op_assign
id|cmd_code
suffix:semicolon
id|ccw-&gt;flags
op_assign
id|CCW_FLAG_CC
suffix:semicolon
id|ccw-&gt;count
op_assign
l_int|0
suffix:semicolon
id|ccw-&gt;cda
op_assign
(paren
id|__u32
)paren
(paren
id|addr_t
)paren
op_amp
id|ccw-&gt;cmd_code
suffix:semicolon
id|ccw
op_increment
suffix:semicolon
)brace
r_return
id|ccw
suffix:semicolon
)brace
r_static
r_inline
r_struct
id|ccw1
op_star
DECL|function|tape_ccw_cc_idal
id|tape_ccw_cc_idal
c_func
(paren
r_struct
id|ccw1
op_star
id|ccw
comma
id|__u8
id|cmd_code
comma
r_struct
id|idal_buffer
op_star
id|idal
)paren
(brace
id|ccw-&gt;cmd_code
op_assign
id|cmd_code
suffix:semicolon
id|ccw-&gt;flags
op_assign
id|CCW_FLAG_CC
suffix:semicolon
id|idal_buffer_set_cda
c_func
(paren
id|idal
comma
id|ccw
)paren
suffix:semicolon
r_return
id|ccw
op_increment
suffix:semicolon
)brace
r_static
r_inline
r_struct
id|ccw1
op_star
DECL|function|tape_ccw_end_idal
id|tape_ccw_end_idal
c_func
(paren
r_struct
id|ccw1
op_star
id|ccw
comma
id|__u8
id|cmd_code
comma
r_struct
id|idal_buffer
op_star
id|idal
)paren
(brace
id|ccw-&gt;cmd_code
op_assign
id|cmd_code
suffix:semicolon
id|ccw-&gt;flags
op_assign
l_int|0
suffix:semicolon
id|idal_buffer_set_cda
c_func
(paren
id|idal
comma
id|ccw
)paren
suffix:semicolon
r_return
id|ccw
op_increment
suffix:semicolon
)brace
multiline_comment|/* Global vars */
r_extern
r_const
r_char
op_star
id|tape_state_verbose
(braket
)braket
suffix:semicolon
r_extern
r_const
r_char
op_star
id|tape_op_verbose
(braket
)braket
suffix:semicolon
macro_line|#endif /* for ifdef tape.h */
eof
