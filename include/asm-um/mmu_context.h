multiline_comment|/* &n; * Copyright (C) 2002 Jeff Dike (jdike@karaya.com)&n; * Licensed under the GPL&n; */
macro_line|#ifndef __UM_MMU_CONTEXT_H
DECL|macro|__UM_MMU_CONTEXT_H
mdefine_line|#define __UM_MMU_CONTEXT_H
macro_line|#include &quot;linux/sched.h&quot;
macro_line|#include &quot;choose-mode.h&quot;
DECL|macro|get_mmu_context
mdefine_line|#define get_mmu_context(task) do ; while(0)
DECL|macro|activate_context
mdefine_line|#define activate_context(tsk) do ; while(0)
DECL|macro|deactivate_mm
mdefine_line|#define deactivate_mm(tsk,mm)&t;do { } while (0)
DECL|function|activate_mm
r_static
r_inline
r_void
id|activate_mm
c_func
(paren
r_struct
id|mm_struct
op_star
id|old
comma
r_struct
id|mm_struct
op_star
r_new
)paren
(brace
)brace
r_extern
r_void
id|switch_mm_skas
c_func
(paren
r_int
id|mm_fd
)paren
suffix:semicolon
DECL|function|switch_mm
r_static
r_inline
r_void
id|switch_mm
c_func
(paren
r_struct
id|mm_struct
op_star
id|prev
comma
r_struct
id|mm_struct
op_star
id|next
comma
r_struct
id|task_struct
op_star
id|tsk
comma
r_int
id|cpu
)paren
(brace
r_if
c_cond
(paren
id|prev
op_ne
id|next
)paren
(brace
id|clear_bit
c_func
(paren
id|cpu
comma
op_amp
id|prev-&gt;cpu_vm_mask
)paren
suffix:semicolon
id|set_bit
c_func
(paren
id|cpu
comma
op_amp
id|next-&gt;cpu_vm_mask
)paren
suffix:semicolon
r_if
c_cond
(paren
id|next
op_ne
op_amp
id|init_mm
)paren
(brace
id|CHOOSE_MODE
c_func
(paren
(paren
r_void
)paren
l_int|0
comma
id|switch_mm_skas
c_func
(paren
id|next-&gt;context.skas.mm_fd
)paren
)paren
suffix:semicolon
)brace
)brace
)brace
DECL|function|enter_lazy_tlb
r_static
r_inline
r_void
id|enter_lazy_tlb
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_struct
id|task_struct
op_star
id|tsk
comma
r_int
id|cpu
)paren
(brace
)brace
r_extern
r_int
id|init_new_context_skas
c_func
(paren
r_struct
id|task_struct
op_star
id|task
comma
r_struct
id|mm_struct
op_star
id|mm
)paren
suffix:semicolon
DECL|function|init_new_context_tt
r_static
r_inline
r_int
id|init_new_context_tt
c_func
(paren
r_struct
id|task_struct
op_star
id|task
comma
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|init_new_context
r_static
r_inline
r_int
id|init_new_context
c_func
(paren
r_struct
id|task_struct
op_star
id|task
comma
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
r_return
id|CHOOSE_MODE_PROC
c_func
(paren
id|init_new_context_tt
comma
id|init_new_context_skas
comma
id|task
comma
id|mm
)paren
suffix:semicolon
)brace
r_extern
r_void
id|destroy_context_skas
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
suffix:semicolon
DECL|function|destroy_context
r_static
r_inline
r_void
id|destroy_context
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
id|CHOOSE_MODE
c_func
(paren
(paren
r_void
)paren
l_int|0
comma
id|destroy_context_skas
c_func
(paren
id|mm
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif
multiline_comment|/*&n; * Overrides for Emacs so that we follow Linus&squot;s tabbing style.&n; * Emacs will notice this stuff at the end of the file and automatically&n; * adjust the settings for this buffer only.  This must remain at the end&n; * of the file.&n; * ---------------------------------------------------------------------------&n; * Local variables:&n; * c-file-style: &quot;linux&quot;&n; * End:&n; */
eof
