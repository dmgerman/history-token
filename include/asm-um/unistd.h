multiline_comment|/* &n; * Copyright (C) 2000, 2001  Jeff Dike (jdike@karaya.com)&n; * Licensed under the GPL&n; */
macro_line|#ifndef _UM_UNISTD_H_
DECL|macro|_UM_UNISTD_H_
mdefine_line|#define _UM_UNISTD_H_
macro_line|#include &lt;linux/syscalls.h&gt;
macro_line|#include &quot;linux/resource.h&quot;
macro_line|#include &quot;asm/uaccess.h&quot;
r_extern
r_int
id|um_execve
c_func
(paren
r_const
r_char
op_star
id|file
comma
r_char
op_star
r_const
id|argv
(braket
)braket
comma
r_char
op_star
r_const
id|env
(braket
)braket
)paren
suffix:semicolon
macro_line|#ifdef __KERNEL__
DECL|macro|__ARCH_WANT_IPC_PARSE_VERSION
mdefine_line|#define __ARCH_WANT_IPC_PARSE_VERSION
DECL|macro|__ARCH_WANT_OLD_READDIR
mdefine_line|#define __ARCH_WANT_OLD_READDIR
DECL|macro|__ARCH_WANT_OLD_STAT
mdefine_line|#define __ARCH_WANT_OLD_STAT
DECL|macro|__ARCH_WANT_STAT64
mdefine_line|#define __ARCH_WANT_STAT64
DECL|macro|__ARCH_WANT_SYS_ALARM
mdefine_line|#define __ARCH_WANT_SYS_ALARM
DECL|macro|__ARCH_WANT_SYS_GETHOSTNAME
mdefine_line|#define __ARCH_WANT_SYS_GETHOSTNAME
DECL|macro|__ARCH_WANT_SYS_PAUSE
mdefine_line|#define __ARCH_WANT_SYS_PAUSE
DECL|macro|__ARCH_WANT_SYS_SGETMASK
mdefine_line|#define __ARCH_WANT_SYS_SGETMASK
DECL|macro|__ARCH_WANT_SYS_SIGNAL
mdefine_line|#define __ARCH_WANT_SYS_SIGNAL
DECL|macro|__ARCH_WANT_SYS_TIME
mdefine_line|#define __ARCH_WANT_SYS_TIME
DECL|macro|__ARCH_WANT_SYS_UTIME
mdefine_line|#define __ARCH_WANT_SYS_UTIME
DECL|macro|__ARCH_WANT_SYS_WAITPID
mdefine_line|#define __ARCH_WANT_SYS_WAITPID
DECL|macro|__ARCH_WANT_SYS_SOCKETCALL
mdefine_line|#define __ARCH_WANT_SYS_SOCKETCALL
DECL|macro|__ARCH_WANT_SYS_FADVISE64
mdefine_line|#define __ARCH_WANT_SYS_FADVISE64
DECL|macro|__ARCH_WANT_SYS_GETPGRP
mdefine_line|#define __ARCH_WANT_SYS_GETPGRP
DECL|macro|__ARCH_WANT_SYS_LLSEEK
mdefine_line|#define __ARCH_WANT_SYS_LLSEEK
DECL|macro|__ARCH_WANT_SYS_NICE
mdefine_line|#define __ARCH_WANT_SYS_NICE
DECL|macro|__ARCH_WANT_SYS_OLD_GETRLIMIT
mdefine_line|#define __ARCH_WANT_SYS_OLD_GETRLIMIT
DECL|macro|__ARCH_WANT_SYS_OLDUMOUNT
mdefine_line|#define __ARCH_WANT_SYS_OLDUMOUNT
DECL|macro|__ARCH_WANT_SYS_SIGPENDING
mdefine_line|#define __ARCH_WANT_SYS_SIGPENDING
DECL|macro|__ARCH_WANT_SYS_SIGPROCMASK
mdefine_line|#define __ARCH_WANT_SYS_SIGPROCMASK
macro_line|#endif
macro_line|#ifdef __KERNEL_SYSCALLS__
macro_line|#include &lt;linux/compiler.h&gt;
macro_line|#include &lt;linux/types.h&gt;
DECL|macro|KERNEL_CALL
mdefine_line|#define KERNEL_CALL(ret_t, sys, args...)&t;&bslash;&n;&t;mm_segment_t fs = get_fs();&t;&t;&bslash;&n;&t;ret_t ret;&t;&t;&t;&t;&bslash;&n;&t;set_fs(KERNEL_DS);&t;&t;&t;&bslash;&n;&t;ret = sys(args);&t;&t;&t;&bslash;&n;&t;set_fs(fs);&t;&t;&t;&t;&bslash;&n;&t;return ret;
DECL|function|open
r_static
r_inline
r_int
id|open
c_func
(paren
r_const
r_char
op_star
id|pathname
comma
r_int
id|flags
comma
r_int
id|mode
)paren
(brace
id|KERNEL_CALL
c_func
(paren
r_int
comma
id|sys_open
comma
id|pathname
comma
id|flags
comma
id|mode
)paren
)brace
DECL|function|dup
r_static
r_inline
r_int
id|dup
c_func
(paren
r_int
r_int
id|fd
)paren
(brace
id|KERNEL_CALL
c_func
(paren
r_int
comma
id|sys_dup
comma
id|fd
)paren
suffix:semicolon
)brace
DECL|function|close
r_static
r_inline
r_int
id|close
c_func
(paren
r_int
r_int
id|fd
)paren
(brace
id|KERNEL_CALL
c_func
(paren
r_int
comma
id|sys_close
comma
id|fd
)paren
suffix:semicolon
)brace
DECL|function|execve
r_static
r_inline
r_int
id|execve
c_func
(paren
r_const
r_char
op_star
id|filename
comma
r_char
op_star
r_const
id|argv
(braket
)braket
comma
r_char
op_star
r_const
id|envp
(braket
)braket
)paren
(brace
id|KERNEL_CALL
c_func
(paren
r_int
comma
id|um_execve
comma
id|filename
comma
id|argv
comma
id|envp
)paren
suffix:semicolon
)brace
DECL|function|waitpid
r_static
r_inline
r_int
id|waitpid
c_func
(paren
id|pid_t
id|pid
comma
r_int
r_int
op_star
id|status
comma
r_int
id|options
)paren
(brace
id|KERNEL_CALL
c_func
(paren
id|pid_t
comma
id|sys_wait4
comma
id|pid
comma
id|status
comma
id|options
comma
l_int|NULL
)paren
)brace
DECL|function|setsid
r_static
r_inline
id|pid_t
id|setsid
c_func
(paren
r_void
)paren
(brace
id|KERNEL_CALL
c_func
(paren
id|pid_t
comma
id|sys_setsid
)paren
)brace
DECL|function|lseek
r_static
r_inline
r_int
id|lseek
c_func
(paren
r_int
r_int
id|fd
comma
id|off_t
id|offset
comma
r_int
r_int
id|whence
)paren
(brace
id|KERNEL_CALL
c_func
(paren
r_int
comma
id|sys_lseek
comma
id|fd
comma
id|offset
comma
id|whence
)paren
)brace
DECL|function|read
r_static
r_inline
r_int
id|read
c_func
(paren
r_int
r_int
id|fd
comma
r_char
op_star
id|buf
comma
r_int
id|len
)paren
(brace
id|KERNEL_CALL
c_func
(paren
r_int
comma
id|sys_read
comma
id|fd
comma
id|buf
comma
id|len
)paren
)brace
DECL|function|write
r_static
r_inline
r_int
id|write
c_func
(paren
r_int
r_int
id|fd
comma
r_char
op_star
id|buf
comma
r_int
id|len
)paren
(brace
id|KERNEL_CALL
c_func
(paren
r_int
comma
id|sys_write
comma
id|fd
comma
id|buf
comma
id|len
)paren
)brace
r_int
id|sys_mmap2
c_func
(paren
r_int
r_int
id|addr
comma
r_int
r_int
id|len
comma
r_int
r_int
id|prot
comma
r_int
r_int
id|flags
comma
r_int
r_int
id|fd
comma
r_int
r_int
id|pgoff
)paren
suffix:semicolon
r_int
id|sys_execve
c_func
(paren
r_char
op_star
id|file
comma
r_char
op_star
op_star
id|argv
comma
r_char
op_star
op_star
id|env
)paren
suffix:semicolon
r_int
id|sys_clone
c_func
(paren
r_int
r_int
id|clone_flags
comma
r_int
r_int
id|newsp
comma
r_int
op_star
id|parent_tid
comma
r_int
op_star
id|child_tid
)paren
suffix:semicolon
r_int
id|sys_fork
c_func
(paren
r_void
)paren
suffix:semicolon
r_int
id|sys_vfork
c_func
(paren
r_void
)paren
suffix:semicolon
r_int
id|sys_pipe
c_func
(paren
r_int
r_int
op_star
id|fildes
)paren
suffix:semicolon
r_int
id|sys_ptrace
c_func
(paren
r_int
id|request
comma
r_int
id|pid
comma
r_int
id|addr
comma
r_int
id|data
)paren
suffix:semicolon
r_struct
id|sigaction
suffix:semicolon
id|asmlinkage
r_int
id|sys_rt_sigaction
c_func
(paren
r_int
id|sig
comma
r_const
r_struct
id|sigaction
id|__user
op_star
id|act
comma
r_struct
id|sigaction
id|__user
op_star
id|oact
comma
r_int
id|sigsetsize
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/* Save the value of __KERNEL_SYSCALLS__, undefine it, include the underlying&n; * arch&squot;s unistd.h for the system call numbers, and restore the old &n; * __KERNEL_SYSCALLS__.&n; */
macro_line|#ifdef __KERNEL_SYSCALLS__
DECL|macro|__SAVE_KERNEL_SYSCALLS__
mdefine_line|#define __SAVE_KERNEL_SYSCALLS__ __KERNEL_SYSCALLS__
macro_line|#endif
DECL|macro|__KERNEL_SYSCALLS__
macro_line|#undef __KERNEL_SYSCALLS__
macro_line|#include &quot;asm/arch/unistd.h&quot;
macro_line|#ifdef __KERNEL_SYSCALLS__
DECL|macro|__KERNEL_SYSCALLS__
mdefine_line|#define __KERNEL_SYSCALLS__ __SAVE_KERNEL_SYSCALLS__
macro_line|#endif
macro_line|#endif
multiline_comment|/*&n; * Overrides for Emacs so that we follow Linus&squot;s tabbing style.&n; * Emacs will notice this stuff at the end of the file and automatically&n; * adjust the settings for this buffer only.  This must remain at the end&n; * of the file.&n; * ---------------------------------------------------------------------------&n; * Local variables:&n; * c-file-style: &quot;linux&quot;&n; * End:&n; */
eof
