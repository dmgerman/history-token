multiline_comment|/* &n; * Copyright (C) 2000, 2001, 2002 Jeff Dike (jdike@karaya.com)&n; * Licensed under the GPL&n; */
macro_line|#ifndef __UM_PROCESSOR_GENERIC_H
DECL|macro|__UM_PROCESSOR_GENERIC_H
mdefine_line|#define __UM_PROCESSOR_GENERIC_H
r_struct
id|pt_regs
suffix:semicolon
r_struct
id|task_struct
suffix:semicolon
macro_line|#include &quot;linux/config.h&quot;
macro_line|#include &quot;asm/ptrace.h&quot;
macro_line|#include &quot;choose-mode.h&quot;
r_struct
id|mm_struct
suffix:semicolon
DECL|macro|cpu_relax
mdefine_line|#define cpu_relax()   barrier()
DECL|struct|thread_struct
r_struct
id|thread_struct
(brace
DECL|member|forking
r_int
id|forking
suffix:semicolon
DECL|member|nsyscalls
r_int
id|nsyscalls
suffix:semicolon
DECL|member|regs
r_struct
id|pt_regs
id|regs
suffix:semicolon
DECL|member|cr2
r_int
r_int
id|cr2
suffix:semicolon
DECL|member|err
r_int
id|err
suffix:semicolon
DECL|member|trap_no
r_int
r_int
id|trap_no
suffix:semicolon
DECL|member|fault_addr
r_void
op_star
id|fault_addr
suffix:semicolon
DECL|member|fault_catcher
r_void
op_star
id|fault_catcher
suffix:semicolon
DECL|member|prev_sched
r_struct
id|task_struct
op_star
id|prev_sched
suffix:semicolon
DECL|member|temp_stack
r_int
r_int
id|temp_stack
suffix:semicolon
DECL|member|exec_buf
r_void
op_star
id|exec_buf
suffix:semicolon
DECL|member|arch
r_struct
id|arch_thread
id|arch
suffix:semicolon
r_union
(brace
macro_line|#ifdef CONFIG_MODE_TT
r_struct
(brace
DECL|member|extern_pid
r_int
id|extern_pid
suffix:semicolon
DECL|member|tracing
r_int
id|tracing
suffix:semicolon
DECL|member|switch_pipe
r_int
id|switch_pipe
(braket
l_int|2
)braket
suffix:semicolon
DECL|member|singlestep_syscall
r_int
id|singlestep_syscall
suffix:semicolon
DECL|member|vm_seq
r_int
id|vm_seq
suffix:semicolon
DECL|member|tt
)brace
id|tt
suffix:semicolon
macro_line|#endif
macro_line|#ifdef CONFIG_MODE_SKAS
r_struct
(brace
DECL|member|switch_buf
r_void
op_star
id|switch_buf
suffix:semicolon
DECL|member|fork_buf
r_void
op_star
id|fork_buf
suffix:semicolon
DECL|member|mm_count
r_int
id|mm_count
suffix:semicolon
DECL|member|skas
)brace
id|skas
suffix:semicolon
macro_line|#endif
DECL|member|mode
)brace
id|mode
suffix:semicolon
r_struct
(brace
DECL|member|op
r_int
id|op
suffix:semicolon
r_union
(brace
r_struct
(brace
DECL|member|pid
r_int
id|pid
suffix:semicolon
DECL|member|fork
DECL|member|exec
)brace
id|fork
comma
id|exec
suffix:semicolon
r_struct
(brace
DECL|member|proc
r_int
(paren
op_star
id|proc
)paren
(paren
r_void
op_star
)paren
suffix:semicolon
DECL|member|arg
r_void
op_star
id|arg
suffix:semicolon
DECL|member|thread
)brace
id|thread
suffix:semicolon
r_struct
(brace
DECL|member|proc
r_void
(paren
op_star
id|proc
)paren
(paren
r_void
op_star
)paren
suffix:semicolon
DECL|member|arg
r_void
op_star
id|arg
suffix:semicolon
DECL|member|cb
)brace
id|cb
suffix:semicolon
DECL|member|u
)brace
id|u
suffix:semicolon
DECL|member|request
)brace
id|request
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|INIT_THREAD
mdefine_line|#define INIT_THREAD &bslash;&n;{ &bslash;&n;&t;.forking&t;&t;= 0, &bslash;&n;&t;.nsyscalls&t;&t;= 0, &bslash;&n;        .regs&t;&t;   &t;= EMPTY_REGS, &bslash;&n;&t;.cr2&t;&t;&t;= 0, &bslash;&n;&t;.err&t;&t;&t;= 0, &bslash;&n;&t;.fault_addr&t;&t;= NULL, &bslash;&n;&t;.prev_sched&t;&t;= NULL, &bslash;&n;&t;.temp_stack&t;&t;= 0, &bslash;&n;&t;.exec_buf&t;&t;= NULL, &bslash;&n;&t;.arch&t;&t;&t;= INIT_ARCH_THREAD, &bslash;&n;&t;.request&t;&t;= { 0 } &bslash;&n;}
r_typedef
r_struct
(brace
DECL|member|seg
r_int
r_int
id|seg
suffix:semicolon
DECL|typedef|mm_segment_t
)brace
id|mm_segment_t
suffix:semicolon
r_extern
r_struct
id|task_struct
op_star
id|alloc_task_struct
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|release_thread
c_func
(paren
r_struct
id|task_struct
op_star
)paren
suffix:semicolon
r_extern
r_int
id|kernel_thread
c_func
(paren
r_int
(paren
op_star
id|fn
)paren
(paren
r_void
op_star
)paren
comma
r_void
op_star
id|arg
comma
r_int
r_int
id|flags
)paren
suffix:semicolon
r_extern
r_void
id|dump_thread
c_func
(paren
r_struct
id|pt_regs
op_star
id|regs
comma
r_struct
id|user
op_star
id|u
)paren
suffix:semicolon
r_extern
r_void
id|prepare_to_copy
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
)paren
suffix:semicolon
r_extern
r_int
r_int
id|thread_saved_pc
c_func
(paren
r_struct
id|task_struct
op_star
id|t
)paren
suffix:semicolon
DECL|function|mm_copy_segments
r_static
r_inline
r_void
id|mm_copy_segments
c_func
(paren
r_struct
id|mm_struct
op_star
id|from_mm
comma
r_struct
id|mm_struct
op_star
id|new_mm
)paren
(brace
)brace
DECL|macro|init_stack
mdefine_line|#define init_stack&t;(init_thread_union.stack)
multiline_comment|/*&n; * User space process size: 3GB (default).&n; */
r_extern
r_int
r_int
id|task_size
suffix:semicolon
DECL|macro|TASK_SIZE
mdefine_line|#define TASK_SIZE&t;(task_size)
multiline_comment|/* This decides where the kernel will search for a free chunk of vm&n; * space during mmap&squot;s.&n; */
DECL|macro|TASK_UNMAPPED_BASE
mdefine_line|#define TASK_UNMAPPED_BASE&t;(0x40000000)
r_extern
r_void
id|start_thread
c_func
(paren
r_struct
id|pt_regs
op_star
id|regs
comma
r_int
r_int
id|entry
comma
r_int
r_int
id|stack
)paren
suffix:semicolon
DECL|struct|cpuinfo_um
r_struct
id|cpuinfo_um
(brace
DECL|member|loops_per_jiffy
r_int
r_int
id|loops_per_jiffy
suffix:semicolon
DECL|member|ipi_pipe
r_int
id|ipi_pipe
(braket
l_int|2
)braket
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|cpuinfo_um
id|boot_cpu_data
suffix:semicolon
DECL|macro|my_cpu_data
mdefine_line|#define my_cpu_data&t;&t;cpu_data[smp_processor_id()]
macro_line|#ifdef CONFIG_SMP
r_extern
r_struct
id|cpuinfo_um
id|cpu_data
(braket
)braket
suffix:semicolon
DECL|macro|current_cpu_data
mdefine_line|#define current_cpu_data cpu_data[smp_processor_id()]
macro_line|#else
DECL|macro|cpu_data
mdefine_line|#define cpu_data (&amp;boot_cpu_data)
DECL|macro|current_cpu_data
mdefine_line|#define current_cpu_data boot_cpu_data
macro_line|#endif
DECL|macro|KSTK_EIP
mdefine_line|#define KSTK_EIP(tsk) (PT_REGS_IP(&amp;tsk-&gt;thread.regs))
DECL|macro|KSTK_ESP
mdefine_line|#define KSTK_ESP(tsk) (PT_REGS_SP(&amp;tsk-&gt;thread.regs))
DECL|macro|get_wchan
mdefine_line|#define get_wchan(p) (0)
macro_line|#endif
multiline_comment|/*&n; * Overrides for Emacs so that we follow Linus&squot;s tabbing style.&n; * Emacs will notice this stuff at the end of the file and automatically&n; * adjust the settings for this buffer only.  This must remain at the end&n; * of the file.&n; * ---------------------------------------------------------------------------&n; * Local variables:&n; * c-file-style: &quot;linux&quot;&n; * End:&n; */
eof
