multiline_comment|/*&n; *  linux/include/asm-arm/mach/irq.h&n; *&n; *  Copyright (C) 1995-2000 Russell King.&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License version 2 as&n; * published by the Free Software Foundation.&n; */
macro_line|#ifndef __ASM_ARM_MACH_IRQ_H
DECL|macro|__ASM_ARM_MACH_IRQ_H
mdefine_line|#define __ASM_ARM_MACH_IRQ_H
DECL|struct|irqdesc
r_struct
id|irqdesc
(brace
DECL|member|nomask
r_int
r_int
id|nomask
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* IRQ does not mask in IRQ   */
DECL|member|enabled
r_int
r_int
id|enabled
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* IRQ is currently enabled   */
DECL|member|triggered
r_int
r_int
id|triggered
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* IRQ has occurred&t;      */
DECL|member|probing
r_int
r_int
id|probing
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* IRQ in use for a probe     */
DECL|member|probe_ok
r_int
r_int
id|probe_ok
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* IRQ can be used for probe  */
DECL|member|valid
r_int
r_int
id|valid
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* IRQ claimable&t;      */
DECL|member|noautoenable
r_int
r_int
id|noautoenable
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* don&squot;t automatically enable IRQ */
DECL|member|unused
r_int
r_int
id|unused
suffix:colon
l_int|25
suffix:semicolon
DECL|member|mask_ack
r_void
(paren
op_star
id|mask_ack
)paren
(paren
r_int
r_int
id|irq
)paren
suffix:semicolon
multiline_comment|/* Mask and acknowledge IRQ   */
DECL|member|mask
r_void
(paren
op_star
id|mask
)paren
(paren
r_int
r_int
id|irq
)paren
suffix:semicolon
multiline_comment|/* Mask IRQ&t;&t;      */
DECL|member|unmask
r_void
(paren
op_star
id|unmask
)paren
(paren
r_int
r_int
id|irq
)paren
suffix:semicolon
multiline_comment|/* Unmask IRQ&t;&t;      */
DECL|member|action
r_struct
id|irqaction
op_star
id|action
suffix:semicolon
multiline_comment|/*&n;&t; * IRQ lock detection&n;&t; */
DECL|member|lck_cnt
r_int
r_int
id|lck_cnt
suffix:semicolon
DECL|member|lck_pc
r_int
r_int
id|lck_pc
suffix:semicolon
DECL|member|lck_jif
r_int
r_int
id|lck_jif
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|irqdesc
id|irq_desc
(braket
)braket
suffix:semicolon
r_extern
r_void
(paren
op_star
id|init_arch_irq
)paren
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|setup_arm_irq
c_func
(paren
r_int
comma
r_struct
id|irqaction
op_star
)paren
suffix:semicolon
r_extern
r_int
id|show_fiq_list
c_func
(paren
r_struct
id|seq_file
op_star
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_void
id|init_FIQ
c_func
(paren
r_void
)paren
suffix:semicolon
macro_line|#endif
eof
