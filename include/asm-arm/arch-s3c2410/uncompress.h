multiline_comment|/* linux/include/asm-arm/arch-s3c2410/uncompress.h&n; *&n; * (c) 2003 Simtec Electronics&n; *    Ben Dooks &lt;ben@simtec.co.uk&gt;&n; *&n; * S3C2410 - uncompress code&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License version 2 as&n; * published by the Free Software Foundation.&n; *&n; * Changelog:&n; *  22-May-2003 BJD  Created&n; *  08-Sep-2003 BJD  Moved to linux v2.6&n; *  12-Mar-2004 BJD  Updated header protection&n;*/
macro_line|#ifndef __ASM_ARCH_UNCOMPRESS_H
DECL|macro|__ASM_ARCH_UNCOMPRESS_H
mdefine_line|#define __ASM_ARCH_UNCOMPRESS_H
multiline_comment|/* defines for UART registers */
macro_line|#include &quot;asm/arch/regs-serial.h&quot;
macro_line|#include &lt;asm/arch/map.h&gt;
multiline_comment|/* how many bytes we allow into the FIFO at a time in FIFO mode */
DECL|macro|FIFO_MAX
mdefine_line|#define FIFO_MAX&t; (14)
macro_line|#if 1
DECL|macro|uart_base
mdefine_line|#define uart_base S3C2410_PA_UART
macro_line|#else
DECL|variable|uart_base
r_static
r_int
r_int
id|uart_base
op_assign
id|S3C2410_PA_UART
suffix:semicolon
macro_line|#endif
r_static
id|__inline__
r_void
DECL|function|uart_wr
id|uart_wr
c_func
(paren
r_int
r_int
id|reg
comma
r_int
r_int
id|val
)paren
(brace
r_volatile
r_int
r_int
op_star
id|ptr
suffix:semicolon
id|ptr
op_assign
(paren
r_volatile
r_int
r_int
op_star
)paren
(paren
id|reg
op_plus
id|uart_base
)paren
suffix:semicolon
op_star
id|ptr
op_assign
id|val
suffix:semicolon
)brace
r_static
id|__inline__
r_int
r_int
DECL|function|uart_rd
id|uart_rd
c_func
(paren
r_int
r_int
id|reg
)paren
(brace
r_volatile
r_int
r_int
op_star
id|ptr
suffix:semicolon
id|ptr
op_assign
(paren
r_volatile
r_int
r_int
op_star
)paren
(paren
id|reg
op_plus
id|uart_base
)paren
suffix:semicolon
r_return
op_star
id|ptr
suffix:semicolon
)brace
multiline_comment|/* currently we do not need the watchdog... */
DECL|macro|arch_decomp_wdog
mdefine_line|#define arch_decomp_wdog()
r_static
r_void
id|error
c_func
(paren
r_char
op_star
id|err
)paren
suffix:semicolon
r_static
r_void
DECL|function|arch_decomp_setup
id|arch_decomp_setup
c_func
(paren
r_void
)paren
(brace
multiline_comment|/* we may need to setup the uart(s) here if we are not running&n;&t; * on an BAST... the BAST will have left the uarts configured&n;&t; * after calling linux.&n;&t; */
)brace
multiline_comment|/* we can deal with the case the UARTs are being run&n; * in FIFO mode, so that we don&squot;t hold up our execution&n; * waiting for tx to happen...&n;*/
r_static
r_void
DECL|function|putc
id|putc
c_func
(paren
r_char
id|ch
)paren
(brace
r_if
c_cond
(paren
id|ch
op_eq
l_char|&squot;&bslash;n&squot;
)paren
id|putc
c_func
(paren
l_char|&squot;&bslash;r&squot;
)paren
suffix:semicolon
multiline_comment|/* expand newline to &bslash;r&bslash;n */
r_if
c_cond
(paren
id|uart_rd
c_func
(paren
id|S3C2410_UFCON
)paren
op_amp
id|S3C2410_UFCON_FIFOMODE
)paren
(brace
r_int
id|level
suffix:semicolon
r_while
c_loop
(paren
l_int|1
)paren
(brace
id|level
op_assign
id|uart_rd
c_func
(paren
id|S3C2410_UFSTAT
)paren
suffix:semicolon
id|level
op_and_assign
id|S3C2410_UFSTAT_TXMASK
suffix:semicolon
id|level
op_rshift_assign
id|S3C2410_UFSTAT_TXSHIFT
suffix:semicolon
r_if
c_cond
(paren
id|level
OL
id|FIFO_MAX
)paren
r_break
suffix:semicolon
)brace
)brace
r_else
(brace
multiline_comment|/* not using fifos */
r_while
c_loop
(paren
(paren
id|uart_rd
c_func
(paren
id|S3C2410_UTRSTAT
)paren
op_amp
id|S3C2410_UTRSTAT_TXFE
)paren
op_ne
id|S3C2410_UTRSTAT_TXFE
)paren
suffix:semicolon
)brace
multiline_comment|/* write byte to transmission register */
id|uart_wr
c_func
(paren
id|S3C2410_UTXH
comma
id|ch
)paren
suffix:semicolon
)brace
r_static
r_void
DECL|function|puts
id|puts
c_func
(paren
r_const
r_char
op_star
id|ptr
)paren
(brace
r_for
c_loop
(paren
suffix:semicolon
op_star
id|ptr
op_ne
l_char|&squot;&bslash;0&squot;
suffix:semicolon
id|ptr
op_increment
)paren
(brace
id|putc
c_func
(paren
op_star
id|ptr
)paren
suffix:semicolon
)brace
)brace
macro_line|#endif /* __ASM_ARCH_UNCOMPRESS_H */
eof
