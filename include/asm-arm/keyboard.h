multiline_comment|/*&n; *  linux/include/asm-arm/keyboard.h&n; *&n; *  Copyright (C) 1998 Russell King&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License version 2 as&n; * published by the Free Software Foundation.&n; *&n; *  Keyboard driver definitions for ARM&n; */
macro_line|#ifndef __ASM_ARM_KEYBOARD_H
DECL|macro|__ASM_ARM_KEYBOARD_H
mdefine_line|#define __ASM_ARM_KEYBOARD_H
macro_line|#include &lt;linux/kd.h&gt;
macro_line|#include &lt;linux/pm.h&gt;
multiline_comment|/*&n; * We provide a unified keyboard interface when in VC_MEDIUMRAW&n; * mode.  This means that all keycodes must be common between&n; * all supported keyboards.  This unfortunately puts us at odds&n; * with the PC keyboard interface chip... but we can&squot;t do anything&n; * about that now.&n; */
macro_line|#ifdef __KERNEL__
r_extern
r_int
(paren
op_star
id|k_setkeycode
)paren
(paren
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
(paren
op_star
id|k_getkeycode
)paren
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
(paren
op_star
id|k_translate
)paren
(paren
r_int
r_char
comma
r_int
r_char
op_star
comma
r_char
)paren
suffix:semicolon
r_extern
r_char
(paren
op_star
id|k_unexpected_up
)paren
(paren
r_int
r_char
)paren
suffix:semicolon
r_extern
r_void
(paren
op_star
id|k_leds
)paren
(paren
r_int
r_char
)paren
suffix:semicolon
DECL|function|kbd_setkeycode
r_static
r_inline
r_int
id|kbd_setkeycode
c_func
(paren
r_int
r_int
id|sc
comma
r_int
r_int
id|kc
)paren
(brace
r_int
id|ret
op_assign
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|k_setkeycode
)paren
id|ret
op_assign
id|k_setkeycode
c_func
(paren
id|sc
comma
id|kc
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|kbd_getkeycode
r_static
r_inline
r_int
id|kbd_getkeycode
c_func
(paren
r_int
r_int
id|sc
)paren
(brace
r_int
id|ret
op_assign
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|k_getkeycode
)paren
id|ret
op_assign
id|k_getkeycode
c_func
(paren
id|sc
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|kbd_leds
r_static
r_inline
r_void
id|kbd_leds
c_func
(paren
r_int
r_char
id|leds
)paren
(brace
r_if
c_cond
(paren
id|k_leds
)paren
id|k_leds
c_func
(paren
id|leds
)paren
suffix:semicolon
)brace
r_extern
r_int
id|k_sysrq_key
suffix:semicolon
r_extern
r_int
r_char
op_star
id|k_sysrq_xlate
suffix:semicolon
DECL|macro|SYSRQ_KEY
mdefine_line|#define SYSRQ_KEY&t;&t;k_sysrq_key
DECL|macro|kbd_sysrq_xlate
mdefine_line|#define kbd_sysrq_xlate&t;&t;k_sysrq_xlate
DECL|macro|kbd_translate
mdefine_line|#define kbd_translate&t;&t;k_translate
DECL|macro|kbd_unexpected_up
mdefine_line|#define kbd_unexpected_up&t;k_unexpected_up
macro_line|#include &lt;asm/arch/keyboard.h&gt;
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* __ASM_ARM_KEYBOARD_H */
eof
