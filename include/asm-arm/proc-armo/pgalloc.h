multiline_comment|/*&n; *  linux/include/asm-arm/proc-armo/pgalloc.h&n; *&n; *  Copyright (C) 2001-2002 Russell King&n; *&n; * Page table allocation/freeing primitives for 26-bit ARM processors.&n; */
macro_line|#include &lt;linux/slab.h&gt;
r_extern
id|kmem_cache_t
op_star
id|pte_cache
suffix:semicolon
r_static
r_inline
id|pte_t
op_star
DECL|function|pte_alloc_one_kernel
id|pte_alloc_one_kernel
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|addr
)paren
(brace
r_return
id|kmem_cache_alloc
c_func
(paren
id|pte_cache
comma
id|GFP_KERNEL
)paren
suffix:semicolon
)brace
DECL|function|pte_free_kernel
r_static
r_inline
r_void
id|pte_free_kernel
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
r_if
c_cond
(paren
id|pte
)paren
id|kmem_cache_free
c_func
(paren
id|pte_cache
comma
id|pte
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Populate the pmdp entry with a pointer to the pte.  This pmd is part&n; * of the mm address space.&n; *&n; * If &squot;mm&squot; is the init tasks mm, then we are doing a vmalloc, and we&n; * need to set stuff up correctly for it.&n; */
r_static
r_inline
r_void
DECL|function|pmd_populate_kernel
id|pmd_populate_kernel
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
id|pmd_t
op_star
id|pmdp
comma
id|pte_t
op_star
id|ptep
)paren
(brace
id|set_pmd
c_func
(paren
id|pmdp
comma
id|__mk_pmd
c_func
(paren
id|ptep
comma
id|_PAGE_TABLE
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * We use the old 2.5.5-rmk1 hack for this.&n; * This is not truly correct, but should be functional.&n; */
DECL|macro|pte_alloc_one
mdefine_line|#define pte_alloc_one(mm,addr)&t;((struct page *)pte_alloc_one_kernel(mm,addr))
DECL|macro|pte_free
mdefine_line|#define pte_free(pte)&t;&t;pte_free_kernel((pte_t *)pte)
DECL|macro|pmd_populate
mdefine_line|#define pmd_populate(mm,pmdp,ptep) pmd_populate_kernel(mm,pmdp,(pte_t *)ptep)
eof
