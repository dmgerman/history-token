multiline_comment|/*&n; * linux/include/asm-arm/arch-omap/uncompress.h&n; *&n; * Serial port stubs for kernel decompress status messages&n; *&n; * Initially based on:&n; * linux-2.4.15-rmk1-dsplinux1.6/include/asm-arm/arch-omap1510/uncompress.h&n; * Copyright (C) 2000 RidgeRun, Inc.&n; * Author: Greg Lonnon &lt;glonnon@ridgerun.com&gt;&n; *&n; * Rewritten by:&n; * Author: &lt;source@mvista.com&gt;&n; * 2004 (c) MontaVista Software, Inc.&n; *&n; * This file is licensed under the terms of the GNU General Public License&n; * version 2. This program is licensed &quot;as is&quot; without any warranty of any&n; * kind, whether express or implied.&n; */
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/serial_reg.h&gt;
macro_line|#include &lt;asm/mach-types.h&gt;
macro_line|#include &lt;asm/hardware.h&gt;
macro_line|#include &lt;asm/arch/serial.h&gt;
DECL|macro|check_port
mdefine_line|#define check_port(base, shift) ((base[UART_OMAP_MDR1 &lt;&lt; shift] &amp; 7) == 0)
r_static
r_void
DECL|function|puts
id|puts
c_func
(paren
r_const
r_char
op_star
id|s
)paren
(brace
r_volatile
id|u8
op_star
id|uart
op_assign
l_int|0
suffix:semicolon
r_int
id|shift
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* Determine which serial port to use */
r_do
(brace
r_if
c_cond
(paren
id|machine_is_innovator
c_func
(paren
)paren
)paren
(brace
id|shift
op_assign
l_int|2
suffix:semicolon
id|uart
op_assign
(paren
r_volatile
id|u8
op_star
)paren
(paren
id|OMAP1510_UART1_BASE
)paren
suffix:semicolon
)brace
r_else
(brace
multiline_comment|/* Assume nothing for unknown machines.&n;&t;&t;&t; * Add an entry for your machine to select&n;&t;&t;&t; * the default serial console here. If the&n;&t;&t;&t; * serial port is enabled, we&squot;ll use it to&n;&t;&t;&t; * display status messages. Else we&squot;ll be&n;&t;&t;&t; * quiet.&n;&t;&t;&t; */
r_return
suffix:semicolon
)brace
r_if
c_cond
(paren
id|check_port
c_func
(paren
id|uart
comma
id|shift
)paren
)paren
r_break
suffix:semicolon
multiline_comment|/* Silent boot if no serial ports are enabled. */
r_return
suffix:semicolon
)brace
r_while
c_loop
(paren
l_int|0
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * Now, xmit each character&n;&t; */
r_while
c_loop
(paren
op_star
id|s
)paren
(brace
r_while
c_loop
(paren
op_logical_neg
(paren
id|uart
(braket
id|UART_LSR
op_lshift
id|shift
)braket
op_amp
id|UART_LSR_THRE
)paren
)paren
id|barrier
c_func
(paren
)paren
suffix:semicolon
id|uart
(braket
id|UART_TX
op_lshift
id|shift
)braket
op_assign
op_star
id|s
suffix:semicolon
r_if
c_cond
(paren
op_star
id|s
op_increment
op_eq
l_char|&squot;&bslash;n&squot;
)paren
(brace
r_while
c_loop
(paren
op_logical_neg
(paren
id|uart
(braket
id|UART_LSR
op_lshift
id|shift
)braket
op_amp
id|UART_LSR_THRE
)paren
)paren
id|barrier
c_func
(paren
)paren
suffix:semicolon
id|uart
(braket
id|UART_TX
op_lshift
id|shift
)braket
op_assign
l_char|&squot;&bslash;r&squot;
suffix:semicolon
)brace
)brace
)brace
multiline_comment|/*&n; * nothing to do&n; */
DECL|macro|arch_decomp_setup
mdefine_line|#define arch_decomp_setup()
DECL|macro|arch_decomp_wdog
mdefine_line|#define arch_decomp_wdog()
eof
