macro_line|#ifndef ASMARM_DMA_MAPPING_H
DECL|macro|ASMARM_DMA_MAPPING_H
mdefine_line|#define ASMARM_DMA_MAPPING_H
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/mm.h&gt; /* need struct page */
macro_line|#include &lt;asm/scatterlist.h&gt;
multiline_comment|/*&n; * DMA-consistent mapping functions.  These allocate/free a region of&n; * uncached, unwrite-buffered mapped memory space for use with DMA&n; * devices.  This is the &quot;generic&quot; version.  The PCI specific version&n; * is in pci.h&n; */
r_extern
r_void
op_star
id|consistent_alloc
c_func
(paren
r_int
id|gfp
comma
r_int
id|size
comma
id|dma_addr_t
op_star
id|handle
)paren
suffix:semicolon
r_extern
r_void
id|consistent_free
c_func
(paren
r_void
op_star
id|vaddr
comma
r_int
id|size
comma
id|dma_addr_t
id|handle
)paren
suffix:semicolon
r_extern
r_void
id|consistent_sync
c_func
(paren
r_void
op_star
id|kaddr
comma
r_int
id|size
comma
r_int
id|rw
)paren
suffix:semicolon
multiline_comment|/*&n; * For SA-1111 these functions are &quot;magic&quot; and utilize bounce&n; * bufferes as needed to work around SA-1111 DMA bugs.&n; */
id|dma_addr_t
id|sa1111_map_single
c_func
(paren
r_void
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_void
id|sa1111_unmap_single
c_func
(paren
id|dma_addr_t
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_int
id|sa1111_map_sg
c_func
(paren
r_struct
id|scatterlist
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_void
id|sa1111_unmap_sg
c_func
(paren
r_struct
id|scatterlist
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_void
id|sa1111_dma_sync_single
c_func
(paren
id|dma_addr_t
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_void
id|sa1111_dma_sync_sg
c_func
(paren
r_struct
id|scatterlist
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_SA1111
r_extern
r_struct
id|bus_type
id|sa1111_bus_type
suffix:semicolon
DECL|macro|dmadev_is_sa1111
mdefine_line|#define dmadev_is_sa1111(dev)&t;((dev)-&gt;bus == &amp;sa1111_bus_type)
macro_line|#else
DECL|macro|dmadev_is_sa1111
mdefine_line|#define dmadev_is_sa1111(dev)&t;(0)
macro_line|#endif
multiline_comment|/*&n; * Return whether the given device DMA address mask can be supported&n; * properly.  For example, if your device can only drive the low 24-bits&n; * during PCI bus mastering, then you would pass 0x00ffffff as the mask&n; * to this function.&n; */
DECL|function|dma_supported
r_static
r_inline
r_int
id|dma_supported
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|u64
id|mask
)paren
(brace
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|dma_set_mask
r_static
r_inline
r_int
id|dma_set_mask
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|u64
id|dma_mask
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|dev-&gt;dma_mask
op_logical_or
op_logical_neg
id|dma_supported
c_func
(paren
id|dev
comma
id|dma_mask
)paren
)paren
r_return
op_minus
id|EIO
suffix:semicolon
op_star
id|dev-&gt;dma_mask
op_assign
id|dma_mask
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|dma_get_cache_alignment
r_static
r_inline
r_int
id|dma_get_cache_alignment
c_func
(paren
r_void
)paren
(brace
r_return
l_int|32
suffix:semicolon
)brace
DECL|function|dma_is_consistent
r_static
r_inline
r_int
id|dma_is_consistent
c_func
(paren
id|dma_addr_t
id|handle
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/**&n; * dma_alloc_coherent - allocate consistent memory for DMA&n; * @dev: valid struct device pointer, or NULL for ISA and EISA-like devices&n; * @size: required memory size&n; * @handle: bus-specific DMA address&n; *&n; * Allocate some uncached, unbuffered memory for a device for&n; * performing DMA.  This function allocates pages, and will&n; * return the CPU-viewed address, and sets @handle to be the&n; * device-viewed address.&n; */
r_static
r_inline
r_void
op_star
DECL|function|dma_alloc_coherent
id|dma_alloc_coherent
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_int
id|size
comma
id|dma_addr_t
op_star
id|handle
)paren
(brace
r_int
id|gfp
op_assign
id|GFP_KERNEL
suffix:semicolon
r_if
c_cond
(paren
id|dev
op_eq
l_int|NULL
op_logical_or
id|dmadev_is_sa1111
c_func
(paren
id|dev
)paren
op_logical_or
op_star
id|dev-&gt;dma_mask
op_ne
l_int|0xffffffff
)paren
id|gfp
op_or_assign
id|GFP_DMA
suffix:semicolon
r_return
id|consistent_alloc
c_func
(paren
id|gfp
comma
id|size
comma
id|handle
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * dma_free_coherent - free memory allocated by dma_alloc_coherent&n; * @dev: valid struct device pointer, or NULL for ISA and EISA-like devices&n; * @size: size of memory originally requested in dma_alloc_coherent&n; * @cpu_addr: CPU-view address returned from dma_alloc_coherent&n; * @handle: device-view address returned from dma_alloc_coherent&n; *&n; * Free (and unmap) a DMA buffer previously allocated by&n; * dma_alloc_coherent().&n; *&n; * References to memory and mappings associated with cpu_addr/handle&n; * during and after this call executing are illegal.&n; */
r_static
r_inline
r_void
DECL|function|dma_free_coherent
id|dma_free_coherent
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_int
id|size
comma
r_void
op_star
id|cpu_addr
comma
id|dma_addr_t
id|handle
)paren
(brace
id|consistent_free
c_func
(paren
id|cpu_addr
comma
id|size
comma
id|handle
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * dma_map_single - map a single buffer for streaming DMA&n; * @dev: valid struct device pointer, or NULL for ISA and EISA-like devices&n; * @cpu_addr: CPU direct mapped address of buffer&n; * @size: size of buffer to map&n; * @dir: DMA transfer direction&n; *&n; * Ensure that any data held in the cache is appropriately discarded&n; * or written back.&n; *&n; * The device owns this memory once this call has completed.  The CPU&n; * can regain ownership by calling dma_unmap_single() or dma_sync_single().&n; */
r_static
r_inline
id|dma_addr_t
DECL|function|dma_map_single
id|dma_map_single
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_void
op_star
id|cpu_addr
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|dir
)paren
(brace
r_if
c_cond
(paren
id|dmadev_is_sa1111
c_func
(paren
id|dev
)paren
)paren
r_return
id|sa1111_map_single
c_func
(paren
id|cpu_addr
comma
id|size
comma
id|dir
)paren
suffix:semicolon
id|consistent_sync
c_func
(paren
id|cpu_addr
comma
id|size
comma
id|dir
)paren
suffix:semicolon
r_return
id|__virt_to_bus
c_func
(paren
(paren
r_int
r_int
)paren
id|cpu_addr
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * dma_unmap_single - unmap a single buffer previously mapped&n; * @dev: valid struct device pointer, or NULL for ISA and EISA-like devices&n; * @handle: DMA address of buffer&n; * @size: size of buffer to map&n; * @dir: DMA transfer direction&n; *&n; * Unmap a single streaming mode DMA translation.  The handle and size&n; * must match what was provided in the previous dma_map_single() call.&n; * All other usages are undefined.&n; *&n; * After this call, reads by the CPU to the buffer are guaranteed to see&n; * whatever the device wrote there.&n; */
r_static
r_inline
r_void
DECL|function|dma_unmap_single
id|dma_unmap_single
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|handle
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|dir
)paren
(brace
r_if
c_cond
(paren
id|dmadev_is_sa1111
c_func
(paren
id|dev
)paren
)paren
id|sa1111_unmap_single
c_func
(paren
id|handle
comma
id|size
comma
id|dir
)paren
suffix:semicolon
multiline_comment|/* nothing to do */
)brace
macro_line|#if 0
r_static
r_inline
id|dma_addr_t
id|dma_map_page
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|page
op_star
id|page
comma
r_int
r_int
id|off
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|dir
)paren
(brace
multiline_comment|/* fixme */
)brace
r_static
r_inline
r_void
id|dma_unmap_page
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|handle
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|dir
)paren
(brace
multiline_comment|/* fixme */
)brace
macro_line|#endif
multiline_comment|/**&n; * dma_map_sg - map a set of SG buffers for streaming mode DMA&n; * @dev: valid struct device pointer, or NULL for ISA and EISA-like devices&n; * @sg: list of buffers&n; * @nents: number of buffers to map&n; * @dir: DMA transfer direction&n; *&n; * Map a set of buffers described by scatterlist in streaming&n; * mode for DMA.  This is the scather-gather version of the&n; * above pci_map_single interface.  Here the scatter gather list&n; * elements are each tagged with the appropriate dma address&n; * and length.  They are obtained via sg_dma_{address,length}(SG).&n; *&n; * NOTE: An implementation may be able to use a smaller number of&n; *       DMA address/length pairs than there are SG table elements.&n; *       (for example via virtual mapping capabilities)&n; *       The routine returns the number of addr/length pairs actually&n; *       used, at most nents.&n; *&n; * Device ownership issues as mentioned above for pci_map_single are&n; * the same here.&n; */
r_static
r_inline
r_int
DECL|function|dma_map_sg
id|dma_map_sg
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nents
comma
r_enum
id|dma_data_direction
id|dir
)paren
(brace
r_int
id|i
suffix:semicolon
r_if
c_cond
(paren
id|dmadev_is_sa1111
c_func
(paren
id|dev
)paren
)paren
r_return
id|sa1111_map_sg
c_func
(paren
id|sg
comma
id|nents
comma
id|dir
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|nents
suffix:semicolon
id|i
op_increment
comma
id|sg
op_increment
)paren
(brace
r_char
op_star
id|virt
suffix:semicolon
id|sg-&gt;dma_address
op_assign
id|page_to_bus
c_func
(paren
id|sg-&gt;page
)paren
op_plus
id|sg-&gt;offset
suffix:semicolon
id|virt
op_assign
id|page_address
c_func
(paren
id|sg-&gt;page
)paren
op_plus
id|sg-&gt;offset
suffix:semicolon
id|consistent_sync
c_func
(paren
id|virt
comma
id|sg-&gt;length
comma
id|dir
)paren
suffix:semicolon
)brace
r_return
id|nents
suffix:semicolon
)brace
multiline_comment|/**&n; * dma_unmap_sg - unmap a set of SG buffers mapped by dma_map_sg&n; * @dev: valid struct device pointer, or NULL for ISA and EISA-like devices&n; * @sg: list of buffers&n; * @nents: number of buffers to map&n; * @dir: DMA transfer direction&n; *&n; * Unmap a set of streaming mode DMA translations.&n; * Again, CPU read rules concerning calls here are the same as for&n; * pci_unmap_single() above.&n; */
r_static
r_inline
r_void
DECL|function|dma_unmap_sg
id|dma_unmap_sg
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nents
comma
r_enum
id|dma_data_direction
id|dir
)paren
(brace
r_if
c_cond
(paren
id|dmadev_is_sa1111
c_func
(paren
id|dev
)paren
)paren
(brace
id|sa1111_unmap_sg
c_func
(paren
id|sg
comma
id|nents
comma
id|dir
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
multiline_comment|/* nothing to do */
)brace
multiline_comment|/**&n; * dma_sync_single&n; * @dev: valid struct device pointer, or NULL for ISA and EISA-like devices&n; * @handle: DMA address of buffer&n; * @size: size of buffer to map&n; * @dir: DMA transfer direction&n; *&n; * Make physical memory consistent for a single streaming mode DMA&n; * translation after a transfer.&n; *&n; * If you perform a pci_map_single() but wish to interrogate the&n; * buffer using the cpu, yet do not wish to teardown the PCI dma&n; * mapping, you must call this function before doing so.  At the&n; * next point you give the PCI dma address back to the card, the&n; * device again owns the buffer.&n; */
r_static
r_inline
r_void
DECL|function|dma_sync_single
id|dma_sync_single
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|handle
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|dir
)paren
(brace
r_if
c_cond
(paren
id|dmadev_is_sa1111
c_func
(paren
id|dev
)paren
)paren
(brace
id|sa1111_dma_sync_single
c_func
(paren
id|handle
comma
id|size
comma
id|dir
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
id|consistent_sync
c_func
(paren
(paren
r_void
op_star
)paren
id|__bus_to_virt
c_func
(paren
id|handle
)paren
comma
id|size
comma
id|dir
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * dma_sync_sg&n; * @dev: valid struct device pointer, or NULL for ISA and EISA-like devices&n; * @sg: list of buffers&n; * @nents: number of buffers to map&n; * @dir: DMA transfer direction&n; *&n; * Make physical memory consistent for a set of streaming&n; * mode DMA translations after a transfer.&n; *&n; * The same as pci_dma_sync_single but for a scatter-gather list,&n; * same rules and usage.&n; */
r_static
r_inline
r_void
DECL|function|dma_sync_sg
id|dma_sync_sg
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nents
comma
r_enum
id|dma_data_direction
id|dir
)paren
(brace
r_int
id|i
suffix:semicolon
r_if
c_cond
(paren
id|dmadev_is_sa1111
c_func
(paren
id|dev
)paren
)paren
(brace
id|sa1111_dma_sync_sg
c_func
(paren
id|sg
comma
id|nents
comma
id|dir
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|nents
suffix:semicolon
id|i
op_increment
comma
id|sg
op_increment
)paren
(brace
r_char
op_star
id|virt
op_assign
id|page_address
c_func
(paren
id|sg-&gt;page
)paren
op_plus
id|sg-&gt;offset
suffix:semicolon
id|consistent_sync
c_func
(paren
id|virt
comma
id|sg-&gt;length
comma
id|dir
)paren
suffix:semicolon
)brace
)brace
macro_line|#endif /* __KERNEL__ */
macro_line|#endif
eof
