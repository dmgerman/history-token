multiline_comment|/*&n; *  linux/include/asm-arm/checksum.h&n; *&n; * IP checksum routines&n; *&n; * Copyright (C) Original authors of ../asm-i386/checksum.h&n; * Copyright (C) 1996-1999 Russell King&n; */
macro_line|#ifndef __ASM_ARM_CHECKSUM_H
DECL|macro|__ASM_ARM_CHECKSUM_H
mdefine_line|#define __ASM_ARM_CHECKSUM_H
multiline_comment|/*&n; * computes the checksum of a memory block at buff, length len,&n; * and adds in &quot;sum&quot; (32-bit)&n; *&n; * returns a 32-bit number suitable for feeding into itself&n; * or csum_tcpudp_magic&n; *&n; * this function must be called with even lengths, except&n; * for the last fragment, which may be odd&n; *&n; * it&squot;s best to have buff aligned on a 32-bit boundary&n; */
r_int
r_int
id|csum_partial
c_func
(paren
r_const
r_int
r_char
op_star
id|buff
comma
r_int
id|len
comma
r_int
r_int
id|sum
)paren
suffix:semicolon
multiline_comment|/*&n; * the same as csum_partial, but copies from src while it&n; * checksums, and handles user-space pointer exceptions correctly, when needed.&n; *&n; * here even more important to align src and dst on a 32-bit (or even&n; * better 64-bit) boundary&n; */
r_int
r_int
id|csum_partial_copy_nocheck
c_func
(paren
r_const
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
id|sum
)paren
suffix:semicolon
r_int
r_int
id|csum_partial_copy_from_user
c_func
(paren
r_const
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
id|sum
comma
r_int
op_star
id|err_ptr
)paren
suffix:semicolon
multiline_comment|/*&n; * This is the old (and unsafe) way of doing checksums, a warning message will&n; * be printed if it is used and an exception occurs.&n; *&n; * this functions should go away after some time.&n; */
DECL|macro|csum_partial_copy
mdefine_line|#define csum_partial_copy(src,dst,len,sum)&t;csum_partial_copy_nocheck(src,dst,len,sum)
multiline_comment|/*&n; *&t;This is a version of ip_compute_csum() optimized for IP headers,&n; *&t;which always checksum on 4 octet boundaries.&n; */
r_static
r_inline
r_int
r_int
DECL|function|ip_fast_csum
id|ip_fast_csum
c_func
(paren
r_int
r_char
op_star
id|iph
comma
r_int
r_int
id|ihl
)paren
(brace
r_int
r_int
id|sum
comma
id|tmp1
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;ldr&t;%0, [%1], #4&t;&t;@ ip_fast_csum&t;&t;&bslash;n&bslash;&n;&t;ldr&t;%3, [%1], #4&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;sub&t;%2, %2, #5&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;adds&t;%0, %0, %3&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;ldr&t;%3, [%1], #4&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;adcs&t;%0, %0, %3&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;ldr&t;%3, [%1], #4&t;&t;&t;&t;&t;&bslash;n&bslash;&n;1:&t;adcs&t;%0, %0, %3&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;ldr&t;%3, [%1], #4&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;tst&t;%2, #15&t;&t;&t;@ do this carefully&t;&bslash;n&bslash;&n;&t;subne&t;%2, %2, #1&t;&t;@ without destroying&t;&bslash;n&bslash;&n;&t;bne&t;1b&t;&t;&t;@ the carry flag&t;&bslash;n&bslash;&n;&t;adcs&t;%0, %0, %3&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;adc&t;%0, %0, #0&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;adds&t;%0, %0, %0, lsl #16&t;&t;&t;&t;&bslash;n&bslash;&n;&t;addcs&t;%0, %0, #0x10000&t;&t;&t;&t;&bslash;n&bslash;&n;&t;mvn&t;%0, %0&t;&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;mov&t;%0, %0, lsr #16&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|sum
)paren
comma
l_string|&quot;=r&quot;
(paren
id|iph
)paren
comma
l_string|&quot;=r&quot;
(paren
id|ihl
)paren
comma
l_string|&quot;=r&quot;
(paren
id|tmp1
)paren
suffix:colon
l_string|&quot;1&quot;
(paren
id|iph
)paren
comma
l_string|&quot;2&quot;
(paren
id|ihl
)paren
suffix:colon
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
multiline_comment|/*&n; * &t;Fold a partial checksum without adding pseudo headers&n; */
r_static
r_inline
r_int
r_int
DECL|function|csum_fold
id|csum_fold
c_func
(paren
r_int
r_int
id|sum
)paren
(brace
id|__asm__
c_func
(paren
l_string|&quot;adds&t;%0, %1, %1, lsl #16&t;@ csum_fold&t;&t;&bslash;n&bslash;&n;&t;addcs&t;%0, %0, #0x10000&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
(paren
op_complement
id|sum
)paren
op_rshift
l_int|16
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
DECL|function|csum_tcpudp_nofold
id|csum_tcpudp_nofold
c_func
(paren
r_int
r_int
id|saddr
comma
r_int
r_int
id|daddr
comma
r_int
r_int
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
id|__asm__
c_func
(paren
l_string|&quot;adds&t;%0, %1, %2&t;&t;@ csum_tcpudp_nofold&t;&bslash;n&bslash;&n;&t;adcs&t;%0, %0, %3&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;adcs&t;%0, %0, %4&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;adcs&t;%0, %0, %5&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;adc&t;%0, %0, #0&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|sum
)paren
comma
l_string|&quot;r&quot;
(paren
id|daddr
)paren
comma
l_string|&quot;r&quot;
(paren
id|saddr
)paren
comma
l_string|&quot;r&quot;
(paren
id|ntohs
c_func
(paren
id|len
)paren
)paren
comma
l_string|&quot;Ir&quot;
(paren
id|ntohs
c_func
(paren
id|proto
)paren
)paren
suffix:colon
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
multiline_comment|/*&n; * computes the checksum of the TCP/UDP pseudo-header&n; * returns a 16-bit checksum, already complemented&n; */
r_static
r_inline
r_int
r_int
r_int
DECL|function|csum_tcpudp_magic
id|csum_tcpudp_magic
c_func
(paren
r_int
r_int
id|saddr
comma
r_int
r_int
id|daddr
comma
r_int
r_int
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
id|__asm__
c_func
(paren
l_string|&quot;adds&t;%0, %1, %2&t;&t;@ csum_tcpudp_magic&t;&bslash;n&bslash;&n;&t;adcs&t;%0, %0, %3&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;adcs&t;%0, %0, %4&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;adcs&t;%0, %0, %5&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;adc&t;%0, %0, #0&t;&t;&t;&t;&t;&bslash;n&bslash;&n;&t;adds&t;%0, %0, %0, lsl #16&t;&t;&t;&t;&bslash;n&bslash;&n;&t;addcs&t;%0, %0, #0x10000&t;&t;&t;&t;&bslash;n&bslash;&n;&t;mvn&t;%0, %0&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|sum
)paren
comma
l_string|&quot;r&quot;
(paren
id|daddr
)paren
comma
l_string|&quot;r&quot;
(paren
id|saddr
)paren
comma
l_string|&quot;r&quot;
(paren
id|ntohs
c_func
(paren
id|len
)paren
)paren
comma
l_string|&quot;Ir&quot;
(paren
id|ntohs
c_func
(paren
id|proto
)paren
)paren
suffix:colon
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|sum
op_rshift
l_int|16
suffix:semicolon
)brace
multiline_comment|/*&n; * this routine is used for miscellaneous IP-like checksums, mainly&n; * in icmp.c&n; */
r_static
r_inline
r_int
r_int
DECL|function|ip_compute_csum
id|ip_compute_csum
c_func
(paren
r_int
r_char
op_star
id|buff
comma
r_int
id|len
)paren
(brace
r_return
id|csum_fold
c_func
(paren
id|csum_partial
c_func
(paren
id|buff
comma
id|len
comma
l_int|0
)paren
)paren
suffix:semicolon
)brace
DECL|macro|_HAVE_ARCH_IPV6_CSUM
mdefine_line|#define _HAVE_ARCH_IPV6_CSUM
r_extern
r_int
r_int
id|__csum_ipv6_magic
c_func
(paren
r_struct
id|in6_addr
op_star
id|saddr
comma
r_struct
id|in6_addr
op_star
id|daddr
comma
id|__u32
id|len
comma
id|__u32
id|proto
comma
r_int
r_int
id|sum
)paren
suffix:semicolon
r_static
r_inline
r_int
r_int
r_int
DECL|function|csum_ipv6_magic
id|csum_ipv6_magic
c_func
(paren
r_struct
id|in6_addr
op_star
id|saddr
comma
r_struct
id|in6_addr
op_star
id|daddr
comma
id|__u32
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
r_return
id|csum_fold
c_func
(paren
id|__csum_ipv6_magic
c_func
(paren
id|saddr
comma
id|daddr
comma
id|htonl
c_func
(paren
id|len
)paren
comma
id|htonl
c_func
(paren
id|proto
)paren
comma
id|sum
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif
eof
