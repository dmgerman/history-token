multiline_comment|/* &n; * inclue/asm-generic/rtc.h&n; *&n; * Author: Tom Rini &lt;trini@mvista.com&gt;&n; *&n; * Based on:&n; * drivers/char/rtc.c&n; *&n; * Please read the COPYING file for all license details.&n; */
macro_line|#ifndef __ASM_RTC_H__
DECL|macro|__ASM_RTC_H__
mdefine_line|#define __ASM_RTC_H__
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/mc146818rtc.h&gt;
macro_line|#include &lt;linux/rtc.h&gt;
DECL|macro|RTC_PIE
mdefine_line|#define RTC_PIE 0x40&t;&t;/* periodic interrupt enable */
DECL|macro|RTC_AIE
mdefine_line|#define RTC_AIE 0x20&t;&t;/* alarm interrupt enable */
DECL|macro|RTC_UIE
mdefine_line|#define RTC_UIE 0x10&t;&t;/* update-finished interrupt enable */
r_extern
r_void
id|gen_rtc_interrupt
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
multiline_comment|/* some dummy definitions */
DECL|macro|RTC_SQWE
mdefine_line|#define RTC_SQWE 0x08&t;&t;/* enable square-wave output */
DECL|macro|RTC_DM_BINARY
mdefine_line|#define RTC_DM_BINARY 0x04&t;/* all time/date values are BCD if clear */
DECL|macro|RTC_24H
mdefine_line|#define RTC_24H 0x02&t;&t;/* 24 hour mode - else hours bit 7 means pm */
DECL|macro|RTC_DST_EN
mdefine_line|#define RTC_DST_EN 0x01&t;        /* auto switch DST - works f. USA only */
multiline_comment|/*&n; * Returns true if a clock update is in progress&n; */
DECL|function|rtc_is_updating
r_static
r_inline
r_int
r_char
id|rtc_is_updating
c_func
(paren
r_void
)paren
(brace
r_int
r_char
id|uip
suffix:semicolon
id|spin_lock_irq
c_func
(paren
op_amp
id|rtc_lock
)paren
suffix:semicolon
id|uip
op_assign
(paren
id|CMOS_READ
c_func
(paren
id|RTC_FREQ_SELECT
)paren
op_amp
id|RTC_UIP
)paren
suffix:semicolon
id|spin_unlock_irq
c_func
(paren
op_amp
id|rtc_lock
)paren
suffix:semicolon
r_return
id|uip
suffix:semicolon
)brace
DECL|function|get_rtc_time
r_static
r_inline
r_void
id|get_rtc_time
c_func
(paren
r_struct
id|rtc_time
op_star
id|time
)paren
(brace
r_int
r_int
id|uip_watchdog
op_assign
id|jiffies
suffix:semicolon
r_int
r_char
id|ctrl
suffix:semicolon
macro_line|#ifdef CONFIG_DECSTATION
r_int
r_int
id|real_year
suffix:semicolon
macro_line|#endif
multiline_comment|/*&n;&t; * read RTC once any update in progress is done. The update&n;&t; * can take just over 2ms. We wait 10 to 20ms. There is no need to&n;&t; * to poll-wait (up to 1s - eeccch) for the falling edge of RTC_UIP.&n;&t; * If you need to know *exactly* when a second has started, enable&n;&t; * periodic update complete interrupts, (via ioctl) and then &n;&t; * immediately read /dev/rtc which will block until you get the IRQ.&n;&t; * Once the read clears, read the RTC time (again via ioctl). Easy.&n;&t; */
r_if
c_cond
(paren
id|rtc_is_updating
c_func
(paren
)paren
op_ne
l_int|0
)paren
r_while
c_loop
(paren
id|jiffies
op_minus
id|uip_watchdog
OL
l_int|2
op_star
id|HZ
op_div
l_int|100
)paren
(brace
id|barrier
c_func
(paren
)paren
suffix:semicolon
id|cpu_relax
c_func
(paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n;&t; * Only the values that we read from the RTC are set. We leave&n;&t; * tm_wday, tm_yday and tm_isdst untouched. Even though the&n;&t; * RTC has RTC_DAY_OF_WEEK, we ignore it, as it is only updated&n;&t; * by the RTC when initially set to a non-zero value.&n;&t; */
id|spin_lock_irq
c_func
(paren
op_amp
id|rtc_lock
)paren
suffix:semicolon
id|time-&gt;tm_sec
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_SECONDS
)paren
suffix:semicolon
id|time-&gt;tm_min
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_MINUTES
)paren
suffix:semicolon
id|time-&gt;tm_hour
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_HOURS
)paren
suffix:semicolon
id|time-&gt;tm_mday
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_DAY_OF_MONTH
)paren
suffix:semicolon
id|time-&gt;tm_mon
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_MONTH
)paren
suffix:semicolon
id|time-&gt;tm_year
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_YEAR
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_DECSTATION
id|real_year
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_DEC_YEAR
)paren
suffix:semicolon
macro_line|#endif
id|ctrl
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_CONTROL
)paren
suffix:semicolon
id|spin_unlock_irq
c_func
(paren
op_amp
id|rtc_lock
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|ctrl
op_amp
id|RTC_DM_BINARY
)paren
op_logical_or
id|RTC_ALWAYS_BCD
)paren
(brace
id|BCD_TO_BIN
c_func
(paren
id|time-&gt;tm_sec
)paren
suffix:semicolon
id|BCD_TO_BIN
c_func
(paren
id|time-&gt;tm_min
)paren
suffix:semicolon
id|BCD_TO_BIN
c_func
(paren
id|time-&gt;tm_hour
)paren
suffix:semicolon
id|BCD_TO_BIN
c_func
(paren
id|time-&gt;tm_mday
)paren
suffix:semicolon
id|BCD_TO_BIN
c_func
(paren
id|time-&gt;tm_mon
)paren
suffix:semicolon
id|BCD_TO_BIN
c_func
(paren
id|time-&gt;tm_year
)paren
suffix:semicolon
)brace
macro_line|#ifdef CONFIG_DECSTATION
id|time-&gt;tm_year
op_add_assign
id|real_year
op_minus
l_int|72
suffix:semicolon
macro_line|#endif
multiline_comment|/*&n;&t; * Account for differences between how the RTC uses the values&n;&t; * and how they are defined in a struct rtc_time;&n;&t; */
r_if
c_cond
(paren
id|time-&gt;tm_year
op_le
l_int|69
)paren
id|time-&gt;tm_year
op_add_assign
l_int|100
suffix:semicolon
id|time-&gt;tm_mon
op_decrement
suffix:semicolon
)brace
multiline_comment|/* Set the current date and time in the real time clock. */
DECL|function|set_rtc_time
r_static
r_inline
r_int
id|set_rtc_time
c_func
(paren
r_struct
id|rtc_time
op_star
id|time
)paren
(brace
r_int
r_char
id|mon
comma
id|day
comma
id|hrs
comma
id|min
comma
id|sec
suffix:semicolon
r_int
r_char
id|save_control
comma
id|save_freq_select
suffix:semicolon
r_int
r_int
id|yrs
suffix:semicolon
macro_line|#ifdef CONFIG_DECSTATION
r_int
r_int
id|real_yrs
comma
id|leap_yr
suffix:semicolon
macro_line|#endif
id|yrs
op_assign
id|time-&gt;tm_year
suffix:semicolon
id|mon
op_assign
id|time-&gt;tm_mon
op_plus
l_int|1
suffix:semicolon
multiline_comment|/* tm_mon starts at zero */
id|day
op_assign
id|time-&gt;tm_mday
suffix:semicolon
id|hrs
op_assign
id|time-&gt;tm_hour
suffix:semicolon
id|min
op_assign
id|time-&gt;tm_min
suffix:semicolon
id|sec
op_assign
id|time-&gt;tm_sec
suffix:semicolon
r_if
c_cond
(paren
id|yrs
OG
l_int|255
)paren
multiline_comment|/* They are unsigned */
r_return
op_minus
id|EINVAL
suffix:semicolon
id|spin_lock_irq
c_func
(paren
op_amp
id|rtc_lock
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_DECSTATION
id|real_yrs
op_assign
id|yrs
suffix:semicolon
id|leap_yr
op_assign
(paren
(paren
op_logical_neg
(paren
(paren
id|yrs
op_plus
l_int|1900
)paren
op_mod
l_int|4
)paren
op_logical_and
(paren
(paren
id|yrs
op_plus
l_int|1900
)paren
op_mod
l_int|100
)paren
)paren
op_logical_or
op_logical_neg
(paren
(paren
id|yrs
op_plus
l_int|1900
)paren
op_mod
l_int|400
)paren
)paren
suffix:semicolon
id|yrs
op_assign
l_int|72
suffix:semicolon
multiline_comment|/*&n;&t; * We want to keep the year set to 73 until March&n;&t; * for non-leap years, so that Feb, 29th is handled&n;&t; * correctly.&n;&t; */
r_if
c_cond
(paren
op_logical_neg
id|leap_yr
op_logical_and
id|mon
OL
l_int|3
)paren
(brace
id|real_yrs
op_decrement
suffix:semicolon
id|yrs
op_assign
l_int|73
suffix:semicolon
)brace
macro_line|#endif
multiline_comment|/* These limits and adjustments are independant of&n;&t; * whether the chip is in binary mode or not.&n;&t; */
r_if
c_cond
(paren
id|yrs
OG
l_int|169
)paren
(brace
id|spin_unlock_irq
c_func
(paren
op_amp
id|rtc_lock
)paren
suffix:semicolon
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
r_if
c_cond
(paren
id|yrs
op_ge
l_int|100
)paren
id|yrs
op_sub_assign
l_int|100
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|CMOS_READ
c_func
(paren
id|RTC_CONTROL
)paren
op_amp
id|RTC_DM_BINARY
)paren
op_logical_or
id|RTC_ALWAYS_BCD
)paren
(brace
id|BIN_TO_BCD
c_func
(paren
id|sec
)paren
suffix:semicolon
id|BIN_TO_BCD
c_func
(paren
id|min
)paren
suffix:semicolon
id|BIN_TO_BCD
c_func
(paren
id|hrs
)paren
suffix:semicolon
id|BIN_TO_BCD
c_func
(paren
id|day
)paren
suffix:semicolon
id|BIN_TO_BCD
c_func
(paren
id|mon
)paren
suffix:semicolon
id|BIN_TO_BCD
c_func
(paren
id|yrs
)paren
suffix:semicolon
)brace
id|save_control
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_CONTROL
)paren
suffix:semicolon
id|CMOS_WRITE
c_func
(paren
(paren
id|save_control
op_or
id|RTC_SET
)paren
comma
id|RTC_CONTROL
)paren
suffix:semicolon
id|save_freq_select
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_FREQ_SELECT
)paren
suffix:semicolon
id|CMOS_WRITE
c_func
(paren
(paren
id|save_freq_select
op_or
id|RTC_DIV_RESET2
)paren
comma
id|RTC_FREQ_SELECT
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_DECSTATION
id|CMOS_WRITE
c_func
(paren
id|real_yrs
comma
id|RTC_DEC_YEAR
)paren
suffix:semicolon
macro_line|#endif
id|CMOS_WRITE
c_func
(paren
id|yrs
comma
id|RTC_YEAR
)paren
suffix:semicolon
id|CMOS_WRITE
c_func
(paren
id|mon
comma
id|RTC_MONTH
)paren
suffix:semicolon
id|CMOS_WRITE
c_func
(paren
id|day
comma
id|RTC_DAY_OF_MONTH
)paren
suffix:semicolon
id|CMOS_WRITE
c_func
(paren
id|hrs
comma
id|RTC_HOURS
)paren
suffix:semicolon
id|CMOS_WRITE
c_func
(paren
id|min
comma
id|RTC_MINUTES
)paren
suffix:semicolon
id|CMOS_WRITE
c_func
(paren
id|sec
comma
id|RTC_SECONDS
)paren
suffix:semicolon
id|CMOS_WRITE
c_func
(paren
id|save_control
comma
id|RTC_CONTROL
)paren
suffix:semicolon
id|CMOS_WRITE
c_func
(paren
id|save_freq_select
comma
id|RTC_FREQ_SELECT
)paren
suffix:semicolon
id|spin_unlock_irq
c_func
(paren
op_amp
id|rtc_lock
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|get_rtc_ss
r_static
r_inline
r_int
r_int
id|get_rtc_ss
c_func
(paren
r_void
)paren
(brace
r_struct
id|rtc_time
id|h
suffix:semicolon
id|get_rtc_time
c_func
(paren
op_amp
id|h
)paren
suffix:semicolon
r_return
id|h.tm_sec
suffix:semicolon
)brace
DECL|function|get_rtc_pll
r_static
r_inline
r_int
id|get_rtc_pll
c_func
(paren
r_struct
id|rtc_pll_info
op_star
id|pll
)paren
(brace
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
DECL|function|set_rtc_pll
r_static
r_inline
r_int
id|set_rtc_pll
c_func
(paren
r_struct
id|rtc_pll_info
op_star
id|pll
)paren
(brace
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* __ASM_RTC_H__ */
eof
