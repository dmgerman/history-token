multiline_comment|/* include this file if the platform implements the dma_ DMA Mapping API&n; * and wants to provide the pci_ DMA Mapping API in terms of it */
macro_line|#ifndef _ASM_GENERIC_PCI_DMA_COMPAT_H
DECL|macro|_ASM_GENERIC_PCI_DMA_COMPAT_H
mdefine_line|#define _ASM_GENERIC_PCI_DMA_COMPAT_H
macro_line|#include &lt;linux/dma-mapping.h&gt;
multiline_comment|/* note pci_set_dma_mask isn&squot;t here, since it&squot;s a public function&n; * exported from drivers/pci, use dma_supported instead */
r_static
r_inline
r_int
DECL|function|pci_dma_supported
id|pci_dma_supported
c_func
(paren
r_struct
id|pci_dev
op_star
id|hwdev
comma
id|u64
id|mask
)paren
(brace
r_return
id|dma_supported
c_func
(paren
id|hwdev
op_eq
l_int|NULL
ques
c_cond
l_int|NULL
suffix:colon
op_amp
id|hwdev-&gt;dev
comma
id|mask
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
op_star
DECL|function|pci_alloc_consistent
id|pci_alloc_consistent
c_func
(paren
r_struct
id|pci_dev
op_star
id|hwdev
comma
r_int
id|size
comma
id|dma_addr_t
op_star
id|dma_handle
)paren
(brace
r_return
id|dma_alloc_coherent
c_func
(paren
id|hwdev
op_eq
l_int|NULL
ques
c_cond
l_int|NULL
suffix:colon
op_amp
id|hwdev-&gt;dev
comma
id|size
comma
id|dma_handle
comma
id|GFP_ATOMIC
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|pci_free_consistent
id|pci_free_consistent
c_func
(paren
r_struct
id|pci_dev
op_star
id|hwdev
comma
r_int
id|size
comma
r_void
op_star
id|vaddr
comma
id|dma_addr_t
id|dma_handle
)paren
(brace
id|dma_free_coherent
c_func
(paren
id|hwdev
op_eq
l_int|NULL
ques
c_cond
l_int|NULL
suffix:colon
op_amp
id|hwdev-&gt;dev
comma
id|size
comma
id|vaddr
comma
id|dma_handle
)paren
suffix:semicolon
)brace
r_static
r_inline
id|dma_addr_t
DECL|function|pci_map_single
id|pci_map_single
c_func
(paren
r_struct
id|pci_dev
op_star
id|hwdev
comma
r_void
op_star
id|ptr
comma
r_int
id|size
comma
r_int
id|direction
)paren
(brace
r_return
id|dma_map_single
c_func
(paren
id|hwdev
op_eq
l_int|NULL
ques
c_cond
l_int|NULL
suffix:colon
op_amp
id|hwdev-&gt;dev
comma
id|ptr
comma
id|size
comma
(paren
r_enum
id|dma_data_direction
)paren
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|pci_unmap_single
id|pci_unmap_single
c_func
(paren
r_struct
id|pci_dev
op_star
id|hwdev
comma
id|dma_addr_t
id|dma_addr
comma
r_int
id|size
comma
r_int
id|direction
)paren
(brace
id|dma_unmap_single
c_func
(paren
id|hwdev
op_eq
l_int|NULL
ques
c_cond
l_int|NULL
suffix:colon
op_amp
id|hwdev-&gt;dev
comma
id|dma_addr
comma
id|size
comma
(paren
r_enum
id|dma_data_direction
)paren
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
id|dma_addr_t
DECL|function|pci_map_page
id|pci_map_page
c_func
(paren
r_struct
id|pci_dev
op_star
id|hwdev
comma
r_struct
id|page
op_star
id|page
comma
r_int
r_int
id|offset
comma
r_int
id|size
comma
r_int
id|direction
)paren
(brace
r_return
id|dma_map_page
c_func
(paren
id|hwdev
op_eq
l_int|NULL
ques
c_cond
l_int|NULL
suffix:colon
op_amp
id|hwdev-&gt;dev
comma
id|page
comma
id|offset
comma
id|size
comma
(paren
r_enum
id|dma_data_direction
)paren
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|pci_unmap_page
id|pci_unmap_page
c_func
(paren
r_struct
id|pci_dev
op_star
id|hwdev
comma
id|dma_addr_t
id|dma_address
comma
r_int
id|size
comma
r_int
id|direction
)paren
(brace
id|dma_unmap_page
c_func
(paren
id|hwdev
op_eq
l_int|NULL
ques
c_cond
l_int|NULL
suffix:colon
op_amp
id|hwdev-&gt;dev
comma
id|dma_address
comma
id|size
comma
(paren
r_enum
id|dma_data_direction
)paren
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|pci_map_sg
id|pci_map_sg
c_func
(paren
r_struct
id|pci_dev
op_star
id|hwdev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nents
comma
r_int
id|direction
)paren
(brace
r_return
id|dma_map_sg
c_func
(paren
id|hwdev
op_eq
l_int|NULL
ques
c_cond
l_int|NULL
suffix:colon
op_amp
id|hwdev-&gt;dev
comma
id|sg
comma
id|nents
comma
(paren
r_enum
id|dma_data_direction
)paren
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|pci_unmap_sg
id|pci_unmap_sg
c_func
(paren
r_struct
id|pci_dev
op_star
id|hwdev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nents
comma
r_int
id|direction
)paren
(brace
id|dma_unmap_sg
c_func
(paren
id|hwdev
op_eq
l_int|NULL
ques
c_cond
l_int|NULL
suffix:colon
op_amp
id|hwdev-&gt;dev
comma
id|sg
comma
id|nents
comma
(paren
r_enum
id|dma_data_direction
)paren
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|pci_dma_sync_single
id|pci_dma_sync_single
c_func
(paren
r_struct
id|pci_dev
op_star
id|hwdev
comma
id|dma_addr_t
id|dma_handle
comma
r_int
id|size
comma
r_int
id|direction
)paren
(brace
id|dma_sync_single
c_func
(paren
id|hwdev
op_eq
l_int|NULL
ques
c_cond
l_int|NULL
suffix:colon
op_amp
id|hwdev-&gt;dev
comma
id|dma_handle
comma
id|size
comma
(paren
r_enum
id|dma_data_direction
)paren
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|pci_dma_sync_sg
id|pci_dma_sync_sg
c_func
(paren
r_struct
id|pci_dev
op_star
id|hwdev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nelems
comma
r_int
id|direction
)paren
(brace
id|dma_sync_sg
c_func
(paren
id|hwdev
op_eq
l_int|NULL
ques
c_cond
l_int|NULL
suffix:colon
op_amp
id|hwdev-&gt;dev
comma
id|sg
comma
id|nelems
comma
(paren
r_enum
id|dma_data_direction
)paren
id|direction
)paren
suffix:semicolon
)brace
macro_line|#endif
eof
