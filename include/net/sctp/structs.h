multiline_comment|/* SCTP kernel reference Implementation&n; * Copyright (c) 1999-2000 Cisco, Inc.&n; * Copyright (c) 1999-2001 Motorola, Inc.&n; * Copyright (c) 2001 Intel Corp.&n; * Copyright (c) 2001 International Business Machines Corp.&n; * &n; * This file is part of the SCTP kernel reference Implementation&n; * &n; * The SCTP reference implementation is free software; &n; * you can redistribute it and/or modify it under the terms of &n; * the GNU General Public License as published by&n; * the Free Software Foundation; either version 2, or (at your option)&n; * any later version.&n; * &n; * The SCTP reference implementation is distributed in the hope that it &n; * will be useful, but WITHOUT ANY WARRANTY; without even the implied&n; *                 ************************&n; * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&n; * See the GNU General Public License for more details.&n; * &n; * You should have received a copy of the GNU General Public License&n; * along with GNU CC; see the file COPYING.  If not, write to&n; * the Free Software Foundation, 59 Temple Place - Suite 330,&n; * Boston, MA 02111-1307, USA.  &n; * &n; * Please send any bug reports or fixes you make to the&n; * email addresses:&n; *    lksctp developers &lt;lksctp-developers@lists.sourceforge.net&gt;&n; * &n; * Or submit a bug report through the following website:&n; *    http://www.sf.net/projects/lksctp&n; *&n; * Written or modified by: &n; *    Randall Stewart       &lt;randall@sctp.chicago.il.us&gt;&n; *    Ken Morneau           &lt;kmorneau@cisco.com&gt;&n; *    Qiaobing Xie          &lt;qxie1@email.mot.com&gt;&n; *    La Monte H.P. Yarroll &lt;piggy@acm.org&gt;&n; *    Karl Knutson          &lt;karl@athena.chicago.il.us&gt;&n; *    Jon Grimm             &lt;jgrimm@us.ibm.com&gt;&n; *    Xingang Guo           &lt;xingang.guo@intel.com&gt;&n; *    Hui Huang             &lt;hui.huang@nokia.com&gt;&n; *    Sridhar Samudrala     &lt;sri@us.ibm.com&gt;&n; *    Daisy Chang&t;    &lt;daisyc@us.ibm.com&gt;&n; *    Dajiang Zhang         &lt;dajiang.zhang@nokia.com&gt; &n; * &n; * Any bugs reported given to us we will try to fix... any fixes shared will&n; * be incorporated into the next SCTP release.&n; */
macro_line|#ifndef __sctp_structs_h__
DECL|macro|__sctp_structs_h__
mdefine_line|#define __sctp_structs_h__
macro_line|#include &lt;linux/time.h&gt;&t;&t;/* We get struct timespec.    */
macro_line|#include &lt;linux/socket.h&gt;&t;/* linux/in.h needs this!!    */
macro_line|#include &lt;linux/in.h&gt;&t;&t;/* We get struct sockaddr_in. */
macro_line|#include &lt;linux/in6.h&gt;          /* We get struct in6_addr     */
macro_line|#include &lt;asm/param.h&gt;&t;&t;/* We get MAXHOSTNAMELEN.     */
macro_line|#include &lt;asm/atomic.h&gt;&t;&t;/* This gets us atomic counters.  */
macro_line|#include &lt;linux/skbuff.h&gt;&t;/* We need sk_buff_head. */
macro_line|#include &lt;linux/tqueue.h&gt;&t;/* We need tq_struct.    */
macro_line|#include &lt;linux/sctp.h&gt;         /* We need sctp* header structs.  */
multiline_comment|/*&n; * This is (almost) a direct quote from RFC 2553.&n; */
multiline_comment|/*&n; * Desired design of maximum size and alignment&n; */
DECL|macro|_SS_MAXSIZE
mdefine_line|#define _SS_MAXSIZE    128&t;&t;/* Implementation specific max size */
DECL|macro|_SS_ALIGNSIZE
mdefine_line|#define _SS_ALIGNSIZE  (sizeof (__s64))
multiline_comment|/* Implementation specific desired alignment */
multiline_comment|/*&n; * Definitions used for sockaddr_storage structure paddings design.&n; */
DECL|macro|_SS_PAD1SIZE
mdefine_line|#define _SS_PAD1SIZE   (_SS_ALIGNSIZE - sizeof (sa_family_t))
DECL|macro|_SS_PAD2SIZE
mdefine_line|#define _SS_PAD2SIZE   (_SS_MAXSIZE - (sizeof (sa_family_t)+ &bslash;&n;                              _SS_PAD1SIZE + _SS_ALIGNSIZE))
DECL|struct|sockaddr_storage
r_struct
id|sockaddr_storage
(brace
DECL|member|__ss_family
id|sa_family_t
id|__ss_family
suffix:semicolon
multiline_comment|/* address family */
multiline_comment|/* Following fields are implementation specific */
DECL|member|__ss_pad1
r_char
id|__ss_pad1
(braket
id|_SS_PAD1SIZE
)braket
suffix:semicolon
multiline_comment|/* 6 byte pad, to make implementation */
multiline_comment|/* specific pad up to alignment field that */
multiline_comment|/* follows explicit in the data structure */
DECL|member|__ss_align
id|__s64
id|__ss_align
suffix:semicolon
multiline_comment|/* field to force desired structure */
multiline_comment|/* storage alignment */
DECL|member|__ss_pad2
r_char
id|__ss_pad2
(braket
id|_SS_PAD2SIZE
)braket
suffix:semicolon
multiline_comment|/* 112 byte pad to achieve desired size, */
multiline_comment|/* _SS_MAXSIZE value minus size of ss_family */
multiline_comment|/* __ss_pad1, __ss_align fields is 112 */
)brace
suffix:semicolon
multiline_comment|/* A convenience structure for handling sockaddr structures.&n; * We should wean ourselves off this.&n; */
r_typedef
r_union
(brace
DECL|member|v4
r_struct
id|sockaddr_in
id|v4
suffix:semicolon
DECL|member|v6
r_struct
id|sockaddr_in6
id|v6
suffix:semicolon
DECL|member|sa
r_struct
id|sockaddr
id|sa
suffix:semicolon
DECL|typedef|sockaddr_storage_t
)brace
id|sockaddr_storage_t
suffix:semicolon
multiline_comment|/* Forward declarations for data structures. */
r_struct
id|SCTP_protocol
suffix:semicolon
r_struct
id|SCTP_endpoint
suffix:semicolon
r_struct
id|SCTP_association
suffix:semicolon
r_struct
id|SCTP_transport
suffix:semicolon
r_struct
id|SCTP_packet
suffix:semicolon
r_struct
id|SCTP_chunk
suffix:semicolon
r_struct
id|SCTP_inqueue
suffix:semicolon
r_struct
id|SCTP_outqueue
suffix:semicolon
r_struct
id|SCTP_bind_addr
suffix:semicolon
r_struct
id|sctp_opt
suffix:semicolon
r_struct
id|sctp_endpoint_common
suffix:semicolon
DECL|typedef|sctp_protocol_t
r_typedef
r_struct
id|SCTP_protocol
id|sctp_protocol_t
suffix:semicolon
DECL|typedef|sctp_endpoint_t
r_typedef
r_struct
id|SCTP_endpoint
id|sctp_endpoint_t
suffix:semicolon
DECL|typedef|sctp_association_t
r_typedef
r_struct
id|SCTP_association
id|sctp_association_t
suffix:semicolon
DECL|typedef|sctp_transport_t
r_typedef
r_struct
id|SCTP_transport
id|sctp_transport_t
suffix:semicolon
DECL|typedef|sctp_packet_t
r_typedef
r_struct
id|SCTP_packet
id|sctp_packet_t
suffix:semicolon
DECL|typedef|sctp_chunk_t
r_typedef
r_struct
id|SCTP_chunk
id|sctp_chunk_t
suffix:semicolon
DECL|typedef|sctp_inqueue_t
r_typedef
r_struct
id|SCTP_inqueue
id|sctp_inqueue_t
suffix:semicolon
DECL|typedef|sctp_outqueue_t
r_typedef
r_struct
id|SCTP_outqueue
id|sctp_outqueue_t
suffix:semicolon
DECL|typedef|sctp_bind_addr_t
r_typedef
r_struct
id|SCTP_bind_addr
id|sctp_bind_addr_t
suffix:semicolon
DECL|typedef|sctp_opt_t
r_typedef
r_struct
id|sctp_opt
id|sctp_opt_t
suffix:semicolon
DECL|typedef|sctp_endpoint_common_t
r_typedef
r_struct
id|sctp_endpoint_common
id|sctp_endpoint_common_t
suffix:semicolon
macro_line|#include &lt;net/sctp/tsnmap.h&gt;
macro_line|#include &lt;net/sctp/ulpevent.h&gt;
macro_line|#include &lt;net/sctp/ulpqueue.h&gt;
multiline_comment|/* Structures useful for managing bind/connect. */
DECL|struct|sctp_bind_bucket
r_typedef
r_struct
id|sctp_bind_bucket
(brace
DECL|member|port
r_int
r_int
id|port
suffix:semicolon
DECL|member|fastreuse
r_int
r_int
id|fastreuse
suffix:semicolon
DECL|member|next
r_struct
id|sctp_bind_bucket
op_star
id|next
suffix:semicolon
DECL|member|pprev
r_struct
id|sctp_bind_bucket
op_star
op_star
id|pprev
suffix:semicolon
DECL|member|sk
r_struct
id|sock
op_star
id|sk
suffix:semicolon
DECL|typedef|sctp_bind_bucket_t
)brace
id|sctp_bind_bucket_t
suffix:semicolon
DECL|struct|sctp_bind_hashbucket
r_typedef
r_struct
id|sctp_bind_hashbucket
(brace
DECL|member|lock
id|spinlock_t
id|lock
suffix:semicolon
DECL|member|chain
r_struct
id|sctp_bind_bucket
op_star
id|chain
suffix:semicolon
DECL|typedef|sctp_bind_hashbucket_t
)brace
id|sctp_bind_hashbucket_t
suffix:semicolon
multiline_comment|/* Used for hashing all associations.  */
DECL|struct|sctp_hashbucket
r_typedef
r_struct
id|sctp_hashbucket
(brace
DECL|member|lock
id|rwlock_t
id|lock
suffix:semicolon
DECL|member|chain
id|sctp_endpoint_common_t
op_star
id|chain
suffix:semicolon
DECL|typedef|sctp_hashbucket_t
)brace
id|sctp_hashbucket_t
id|__attribute__
c_func
(paren
(paren
id|__aligned__
c_func
(paren
l_int|8
)paren
)paren
)paren
suffix:semicolon
multiline_comment|/* The SCTP protocol structure. */
DECL|struct|SCTP_protocol
r_struct
id|SCTP_protocol
(brace
multiline_comment|/* RFC2960 Section 14. Suggested SCTP Protocol Parameter Values&n;&t; *&n;&t; * The following protocol parameters are RECOMMENDED:&n;&t; *&n;&t; * RTO.Initial              - 3  seconds&n;&t; * RTO.Min                  - 1  second&n;&t; * RTO.Max                 -  60 seconds&n;&t; * RTO.Alpha                - 1/8  (3 when converted to right shifts.)&n;&t; * RTO.Beta                 - 1/4  (2 when converted to right shifts.)&n;&t; */
DECL|member|rto_initial
id|__u32
id|rto_initial
suffix:semicolon
DECL|member|rto_min
id|__u32
id|rto_min
suffix:semicolon
DECL|member|rto_max
id|__u32
id|rto_max
suffix:semicolon
multiline_comment|/* Note: rto_alpha and rto_beta are really defined as inverse&n;&t; * powers of two to facilitate integer operations.&n;&t; */
DECL|member|rto_alpha
r_int
id|rto_alpha
suffix:semicolon
DECL|member|rto_beta
r_int
id|rto_beta
suffix:semicolon
multiline_comment|/* Max.Burst&t;&t;    - 4 */
DECL|member|max_burst
r_int
id|max_burst
suffix:semicolon
multiline_comment|/* Valid.Cookie.Life        - 60  seconds  */
DECL|member|valid_cookie_life
r_int
id|valid_cookie_life
suffix:semicolon
multiline_comment|/* Association.Max.Retrans  - 10 attempts&n;&t; * Path.Max.Retrans         - 5  attempts (per destination address)&n;&t; * Max.Init.Retransmits     - 8  attempts&n;&t; */
DECL|member|max_retrans_association
r_int
id|max_retrans_association
suffix:semicolon
DECL|member|max_retrans_path
r_int
id|max_retrans_path
suffix:semicolon
DECL|member|max_retrans_init
r_int
id|max_retrans_init
suffix:semicolon
multiline_comment|/* HB.interval              - 30 seconds  */
DECL|member|hb_interval
r_int
id|hb_interval
suffix:semicolon
multiline_comment|/* The following variables are implementation specific.  */
multiline_comment|/* Default initialization values to be applied to new associations. */
DECL|member|max_instreams
id|__u16
id|max_instreams
suffix:semicolon
DECL|member|max_outstreams
id|__u16
id|max_outstreams
suffix:semicolon
multiline_comment|/* This is a list of groups of functions for each address&n;&t; * family that we support.&n;&t; */
DECL|member|address_families
r_struct
id|list_head
id|address_families
suffix:semicolon
multiline_comment|/* This is the hash of all endpoints. */
DECL|member|ep_hashsize
r_int
id|ep_hashsize
suffix:semicolon
DECL|member|ep_hashbucket
id|sctp_hashbucket_t
op_star
id|ep_hashbucket
suffix:semicolon
multiline_comment|/* This is the hash of all associations. */
DECL|member|assoc_hashsize
r_int
id|assoc_hashsize
suffix:semicolon
DECL|member|assoc_hashbucket
id|sctp_hashbucket_t
op_star
id|assoc_hashbucket
suffix:semicolon
multiline_comment|/* This is the sctp port control hash.  */
DECL|member|port_hashsize
r_int
id|port_hashsize
suffix:semicolon
DECL|member|port_rover
r_int
id|port_rover
suffix:semicolon
DECL|member|port_alloc_lock
id|spinlock_t
id|port_alloc_lock
suffix:semicolon
multiline_comment|/* Protects port_rover. */
DECL|member|port_hashtable
id|sctp_bind_hashbucket_t
op_star
id|port_hashtable
suffix:semicolon
multiline_comment|/* This is the global local address list.&n;&t; * We actively maintain this complete list of interfaces on&n;&t; * the system by catching routing events.&n;&t; *&n;&t; * It is a list of struct sockaddr_storage_list.&n;&t; */
DECL|member|local_addr_list
r_struct
id|list_head
id|local_addr_list
suffix:semicolon
DECL|member|local_addr_lock
id|spinlock_t
id|local_addr_lock
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * Pointers to address related SCTP functions.&n; * (i.e. things that depend on the address family.)&n; */
DECL|struct|sctp_func
r_typedef
r_struct
id|sctp_func
(brace
DECL|member|queue_xmit
r_int
(paren
op_star
id|queue_xmit
)paren
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
DECL|member|setsockopt
r_int
(paren
op_star
id|setsockopt
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
id|level
comma
r_int
id|optname
comma
r_char
op_star
id|optval
comma
r_int
id|optlen
)paren
suffix:semicolon
DECL|member|getsockopt
r_int
(paren
op_star
id|getsockopt
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
id|level
comma
r_int
id|optname
comma
r_char
op_star
id|optval
comma
r_int
op_star
id|optlen
)paren
suffix:semicolon
DECL|member|get_dst_mtu
r_int
(paren
op_star
id|get_dst_mtu
)paren
(paren
r_const
id|sockaddr_storage_t
op_star
id|address
)paren
suffix:semicolon
DECL|member|net_header_len
id|__u16
id|net_header_len
suffix:semicolon
DECL|member|sockaddr_len
r_int
id|sockaddr_len
suffix:semicolon
DECL|member|sa_family
id|sa_family_t
id|sa_family
suffix:semicolon
DECL|member|list
r_struct
id|list_head
id|list
suffix:semicolon
DECL|typedef|sctp_func_t
)brace
id|sctp_func_t
suffix:semicolon
id|sctp_func_t
op_star
id|sctp_get_af_specific
c_func
(paren
r_const
id|sockaddr_storage_t
op_star
id|address
)paren
suffix:semicolon
multiline_comment|/* SCTP Socket type: UDP or TCP style. */
r_typedef
r_enum
(brace
DECL|enumerator|SCTP_SOCKET_UDP
id|SCTP_SOCKET_UDP
op_assign
l_int|0
comma
DECL|enumerator|SCTP_SOCKET_UDP_HIGH_BANDWIDTH
id|SCTP_SOCKET_UDP_HIGH_BANDWIDTH
comma
DECL|enumerator|SCTP_SOCKET_TCP
id|SCTP_SOCKET_TCP
DECL|typedef|sctp_socket_type_t
)brace
id|sctp_socket_type_t
suffix:semicolon
multiline_comment|/* Per socket SCTP information. */
DECL|struct|sctp_opt
r_struct
id|sctp_opt
(brace
multiline_comment|/* What kind of a socket is this? */
DECL|member|type
id|sctp_socket_type_t
id|type
suffix:semicolon
multiline_comment|/* What is our base endpointer? */
DECL|member|ep
id|sctp_endpoint_t
op_star
id|ep
suffix:semicolon
multiline_comment|/* Various Socket Options.  */
DECL|member|default_stream
id|__u16
id|default_stream
suffix:semicolon
DECL|member|default_ppid
id|__u32
id|default_ppid
suffix:semicolon
DECL|member|initmsg
r_struct
id|sctp_initmsg
id|initmsg
suffix:semicolon
DECL|member|rtoinfo
r_struct
id|sctp_rtoinfo
id|rtoinfo
suffix:semicolon
DECL|member|paddrparam
r_struct
id|sctp_paddrparams
id|paddrparam
suffix:semicolon
DECL|member|subscribe
r_struct
id|sctp_event_subscribe
id|subscribe
suffix:semicolon
DECL|member|autoclose
id|__u32
id|autoclose
suffix:semicolon
DECL|member|nodelay
id|__u8
id|nodelay
suffix:semicolon
DECL|member|disable_fragments
id|__u8
id|disable_fragments
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* This is our APPLICATION-SPECIFIC state cookie.&n; * THIS IS NOT DICTATED BY THE SPECIFICATION.&n; */
multiline_comment|/* These are the parts of an association which we send in the cookie.&n; * Most of these are straight out of:&n; * RFC2960 12.2 Parameters necessary per association (i.e. the TCB)&n; *&n; */
DECL|struct|sctp_cookie
r_typedef
r_struct
id|sctp_cookie
(brace
multiline_comment|/* My          : Tag expected in every inbound packet and sent&n;         * Verification: in the INIT or INIT ACK chunk.&n;         * Tag         :&n;         */
DECL|member|my_vtag
id|__u32
id|my_vtag
suffix:semicolon
multiline_comment|/* Peer&squot;s      : Tag expected in every outbound packet except&n;         * Verification: in the INIT chunk.&n;         * Tag         :&n;         */
DECL|member|peer_vtag
id|__u32
id|peer_vtag
suffix:semicolon
multiline_comment|/* The rest of these are not from the spec, but really need to&n;         * be in the cookie.&n;         */
multiline_comment|/* My Tie Tag  : Assist in discovering a restarting association. */
DECL|member|my_ttag
id|__u32
id|my_ttag
suffix:semicolon
multiline_comment|/* Peer&squot;s Tie Tag: Assist in discovering a restarting association. */
DECL|member|peer_ttag
id|__u32
id|peer_ttag
suffix:semicolon
multiline_comment|/* When does this cookie expire? */
DECL|member|expiration
r_struct
id|timeval
id|expiration
suffix:semicolon
multiline_comment|/* Number of inbound/outbound streams which are set&n;&t; * and negotiated during the INIT process. */
DECL|member|sinit_num_ostreams
id|__u16
id|sinit_num_ostreams
suffix:semicolon
DECL|member|sinit_max_instreams
id|__u16
id|sinit_max_instreams
suffix:semicolon
multiline_comment|/* This is the first sequence number I used.  */
DECL|member|initial_tsn
id|__u32
id|initial_tsn
suffix:semicolon
multiline_comment|/* This holds the originating address of the INIT packet.  */
DECL|member|peer_addr
id|sockaddr_storage_t
id|peer_addr
suffix:semicolon
multiline_comment|/* This is a shim for my peer&squot;s INIT packet, followed by&n;&t; * a copy of the raw address list of the association.&n;&t; * The length of the raw address list is saved in the&n;&t; * raw_addr_list_len field, which will be used at the time when&n;&t; * the association TCB is re-constructed from the cookie.&n;&t; */
DECL|member|raw_addr_list_len
id|__u32
id|raw_addr_list_len
suffix:semicolon
DECL|member|peer_init
id|sctp_init_chunk_t
id|peer_init
(braket
l_int|0
)braket
suffix:semicolon
DECL|typedef|sctp_cookie_t
)brace
id|sctp_cookie_t
suffix:semicolon
multiline_comment|/* The format of our cookie that we send to our peer. */
DECL|struct|sctp_signed_cookie
r_typedef
r_struct
id|sctp_signed_cookie
(brace
DECL|member|signature
id|__u8
id|signature
(braket
id|SCTP_SECRET_SIZE
)braket
suffix:semicolon
DECL|member|c
id|sctp_cookie_t
id|c
suffix:semicolon
DECL|typedef|sctp_signed_cookie_t
)brace
id|sctp_signed_cookie_t
suffix:semicolon
multiline_comment|/* This convenience type allows us to avoid casting when walking&n; * through a parameter list.&n; */
r_typedef
r_union
(brace
DECL|member|v
id|__u8
op_star
id|v
suffix:semicolon
DECL|member|p
id|sctp_paramhdr_t
op_star
id|p
suffix:semicolon
DECL|member|bht
id|sctp_cookie_preserve_param_t
op_star
id|bht
suffix:semicolon
DECL|member|dns
id|sctp_hostname_param_t
op_star
id|dns
suffix:semicolon
DECL|member|cookie
id|sctp_cookie_param_t
op_star
id|cookie
suffix:semicolon
DECL|member|sat
id|sctp_supported_addrs_param_t
op_star
id|sat
suffix:semicolon
DECL|member|v4
id|sctp_ipv4addr_param_t
op_star
id|v4
suffix:semicolon
DECL|member|v6
id|sctp_ipv6addr_param_t
op_star
id|v6
suffix:semicolon
DECL|typedef|sctpParam_t
)brace
id|sctpParam_t
suffix:semicolon
multiline_comment|/* This is another convenience type to allocate memory for address&n; * params for the maximum size and pass such structures around&n; * internally.&n; */
r_typedef
r_union
(brace
DECL|member|v4
id|sctp_ipv4addr_param_t
id|v4
suffix:semicolon
DECL|member|v6
id|sctp_ipv6addr_param_t
id|v6
suffix:semicolon
DECL|typedef|sctpIpAddress_t
)brace
id|sctpIpAddress_t
suffix:semicolon
multiline_comment|/* RFC 2960.  Section 3.3.5 Heartbeat.&n; *    Heartbeat Information: variable length&n; *    The Sender-specific Heartbeat Info field should normally include&n; *    information about the sender&squot;s current time when this HEARTBEAT&n; *    chunk is sent and the destination transport address to which this&n; *    HEARTBEAT is sent (see Section 8.3).&n; */
DECL|struct|sctp_sender_hb_info
r_typedef
r_struct
id|sctp_sender_hb_info
(brace
DECL|member|param_hdr
id|sctp_paramhdr_t
id|param_hdr
suffix:semicolon
DECL|member|daddr
id|sockaddr_storage_t
id|daddr
suffix:semicolon
DECL|member|sent_at
r_int
r_int
id|sent_at
suffix:semicolon
DECL|typedef|sctp_sender_hb_info_t
)brace
id|sctp_sender_hb_info_t
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* RFC2960 1.4 Key Terms&n; *&n; * o Chunk: A unit of information within an SCTP packet, consisting of&n; * a chunk header and chunk-specific content.&n; *&n; * As a matter of convenience, we remember the SCTP common header for&n; * each chunk as well as a few other header pointers...&n; */
DECL|struct|SCTP_chunk
r_struct
id|SCTP_chunk
(brace
multiline_comment|/* These first three elements MUST PRECISELY match the first&n;&t; * three elements of struct sk_buff.  This allows us to reuse&n;&t; * all the skb_* queue management functions.&n;&t; */
DECL|member|next
id|sctp_chunk_t
op_star
id|next
suffix:semicolon
DECL|member|prev
id|sctp_chunk_t
op_star
id|prev
suffix:semicolon
DECL|member|list
r_struct
id|sk_buff_head
op_star
id|list
suffix:semicolon
multiline_comment|/* This is our link to the per-transport transmitted list.  */
DECL|member|transmitted_list
r_struct
id|list_head
id|transmitted_list
suffix:semicolon
multiline_comment|/* This field is used by chunks that hold fragmented data.&n;&t; * For the first fragment this is the list that holds the rest of&n;&t; * fragments. For the remaining fragments, this is the link to the&n;&t; * frag_list maintained in the first fragment.&n;&t; */
DECL|member|frag_list
r_struct
id|list_head
id|frag_list
suffix:semicolon
multiline_comment|/* This points to the sk_buff containing the actual data.  */
DECL|member|skb
r_struct
id|sk_buff
op_star
id|skb
suffix:semicolon
multiline_comment|/* These are the SCTP headers by reverse order in a packet.&n;&t; * Note that some of these may happen more than once.  In that&n;&t; * case, we point at the &quot;current&quot; one, whatever that means&n;&t; * for that level of header.&n;&t; */
multiline_comment|/* We point this at the FIRST TLV parameter to chunk_hdr.  */
DECL|member|param_hdr
id|sctpParam_t
id|param_hdr
suffix:semicolon
r_union
(brace
DECL|member|v
id|__u8
op_star
id|v
suffix:semicolon
DECL|member|data_hdr
id|sctp_datahdr_t
op_star
id|data_hdr
suffix:semicolon
DECL|member|init_hdr
id|sctp_inithdr_t
op_star
id|init_hdr
suffix:semicolon
DECL|member|sack_hdr
id|sctp_sackhdr_t
op_star
id|sack_hdr
suffix:semicolon
DECL|member|hb_hdr
id|sctp_heartbeathdr_t
op_star
id|hb_hdr
suffix:semicolon
DECL|member|hbs_hdr
id|sctp_sender_hb_info_t
op_star
id|hbs_hdr
suffix:semicolon
DECL|member|shutdown_hdr
id|sctp_shutdownhdr_t
op_star
id|shutdown_hdr
suffix:semicolon
DECL|member|cookie_hdr
id|sctp_signed_cookie_t
op_star
id|cookie_hdr
suffix:semicolon
DECL|member|ecne_hdr
id|sctp_ecnehdr_t
op_star
id|ecne_hdr
suffix:semicolon
DECL|member|ecn_cwr_hdr
id|sctp_cwrhdr_t
op_star
id|ecn_cwr_hdr
suffix:semicolon
DECL|member|err_hdr
id|sctp_errhdr_t
op_star
id|err_hdr
suffix:semicolon
DECL|member|subh
)brace
id|subh
suffix:semicolon
DECL|member|chunk_end
id|__u8
op_star
id|chunk_end
suffix:semicolon
DECL|member|chunk_hdr
id|sctp_chunkhdr_t
op_star
id|chunk_hdr
suffix:semicolon
DECL|member|sctp_hdr
id|sctp_sctphdr_t
op_star
id|sctp_hdr
suffix:semicolon
multiline_comment|/* This needs to be recoverable for SCTP_SEND_FAILED events. */
DECL|member|sinfo
r_struct
id|sctp_sndrcvinfo
id|sinfo
suffix:semicolon
multiline_comment|/* Which association does this belong to?  */
DECL|member|asoc
id|sctp_association_t
op_star
id|asoc
suffix:semicolon
multiline_comment|/* What endpoint received this chunk? */
DECL|member|rcvr
id|sctp_endpoint_common_t
op_star
id|rcvr
suffix:semicolon
multiline_comment|/* We fill this in if we are calculating RTT. */
DECL|member|sent_at
r_int
r_int
id|sent_at
suffix:semicolon
DECL|member|rtt_in_progress
id|__u8
id|rtt_in_progress
suffix:semicolon
multiline_comment|/* Is this chunk used for RTT calculation? */
DECL|member|num_times_sent
id|__u8
id|num_times_sent
suffix:semicolon
multiline_comment|/* How man times did we send this? */
DECL|member|has_tsn
id|__u8
id|has_tsn
suffix:semicolon
multiline_comment|/* Does this chunk have a TSN yet? */
DECL|member|singleton
id|__u8
id|singleton
suffix:semicolon
multiline_comment|/* Was this the only chunk in the packet? */
DECL|member|end_of_packet
id|__u8
id|end_of_packet
suffix:semicolon
multiline_comment|/* Was this the last chunk in the packet? */
DECL|member|ecn_ce_done
id|__u8
id|ecn_ce_done
suffix:semicolon
multiline_comment|/* Have we processed the ECN CE bit? */
DECL|member|pdiscard
id|__u8
id|pdiscard
suffix:semicolon
multiline_comment|/* Discard the whole packet now? */
DECL|member|tsn_gap_acked
id|__u8
id|tsn_gap_acked
suffix:semicolon
multiline_comment|/* Is this chunk acked by a GAP ACK? */
DECL|member|fast_retransmit
id|__u8
id|fast_retransmit
suffix:semicolon
multiline_comment|/* Is this chunk fast retransmitted? */
DECL|member|tsn_missing_report
id|__u8
id|tsn_missing_report
suffix:semicolon
multiline_comment|/* Data chunk missing counter. */
multiline_comment|/* What is the origin IP address for this chunk?  */
DECL|member|source
id|sockaddr_storage_t
id|source
suffix:semicolon
multiline_comment|/* For an inbound chunk, this tells us where it came from.&n;&t; * For an outbound chunk, it tells us where we&squot;d like it to&n;&t; * go.  It is NULL if we have no preference.&n;&t; */
DECL|member|transport
id|sctp_transport_t
op_star
id|transport
suffix:semicolon
)brace
suffix:semicolon
id|sctp_chunk_t
op_star
id|sctp_make_chunk
c_func
(paren
r_const
id|sctp_association_t
op_star
comma
id|__u8
id|type
comma
id|__u8
id|flags
comma
r_int
id|size
)paren
suffix:semicolon
r_void
id|sctp_free_chunk
c_func
(paren
id|sctp_chunk_t
op_star
)paren
suffix:semicolon
id|sctp_chunk_t
op_star
id|sctp_copy_chunk
c_func
(paren
id|sctp_chunk_t
op_star
comma
r_int
id|flags
)paren
suffix:semicolon
r_void
op_star
id|sctp_addto_chunk
c_func
(paren
id|sctp_chunk_t
op_star
id|chunk
comma
r_int
id|len
comma
r_const
r_void
op_star
id|data
)paren
suffix:semicolon
r_int
id|sctp_user_addto_chunk
c_func
(paren
id|sctp_chunk_t
op_star
id|chunk
comma
r_int
id|len
comma
r_struct
id|iovec
op_star
id|data
)paren
suffix:semicolon
id|sctp_chunk_t
op_star
id|sctp_chunkify
c_func
(paren
r_struct
id|sk_buff
op_star
comma
r_const
id|sctp_association_t
op_star
comma
r_struct
id|sock
op_star
)paren
suffix:semicolon
r_void
id|sctp_init_source
c_func
(paren
id|sctp_chunk_t
op_star
id|chunk
)paren
suffix:semicolon
r_const
id|sockaddr_storage_t
op_star
id|sctp_source
c_func
(paren
r_const
id|sctp_chunk_t
op_star
id|chunk
)paren
suffix:semicolon
multiline_comment|/* This is a structure for holding either an IPv6 or an IPv4 address.  */
multiline_comment|/* sin_family -- AF_INET or AF_INET6&n; * sin_port -- ordinary port number&n; * sin_addr -- cast to either (struct in_addr) or (struct in6_addr)&n; */
DECL|struct|sockaddr_storage_list
r_struct
id|sockaddr_storage_list
(brace
DECL|member|list
r_struct
id|list_head
id|list
suffix:semicolon
DECL|member|a
id|sockaddr_storage_t
id|a
suffix:semicolon
)brace
suffix:semicolon
DECL|typedef|sctp_packet_phandler_t
r_typedef
id|sctp_chunk_t
op_star
(paren
id|sctp_packet_phandler_t
)paren
(paren
id|sctp_association_t
op_star
)paren
suffix:semicolon
multiline_comment|/* This structure holds lists of chunks as we are assembling for&n; * transmission.&n; */
DECL|struct|SCTP_packet
r_struct
id|SCTP_packet
(brace
multiline_comment|/* These are the SCTP header values (host order) for the packet. */
DECL|member|source_port
id|__u16
id|source_port
suffix:semicolon
DECL|member|destination_port
id|__u16
id|destination_port
suffix:semicolon
DECL|member|vtag
id|__u32
id|vtag
suffix:semicolon
multiline_comment|/* This contains the payload chunks.  */
DECL|member|chunks
r_struct
id|sk_buff_head
id|chunks
suffix:semicolon
multiline_comment|/* This is the total size of all chunks INCLUDING padding.  */
DECL|member|size
r_int
id|size
suffix:semicolon
multiline_comment|/* The packet is destined for this transport address.&n;&t; * The function we finally use to pass down to the next lower&n;&t; * layer lives in the transport structure.&n;&t; */
DECL|member|transport
id|sctp_transport_t
op_star
id|transport
suffix:semicolon
multiline_comment|/* Allow a callback for getting a high priority chunk&n;&t; * bundled early into the packet (This is used for ECNE).&n;&t; */
DECL|member|get_prepend_chunk
id|sctp_packet_phandler_t
op_star
id|get_prepend_chunk
suffix:semicolon
multiline_comment|/* This packet should advertise ECN capability to the network&n;&t; * via the ECT bit.&n;&t; */
DECL|member|ecn_capable
r_int
id|ecn_capable
suffix:semicolon
multiline_comment|/* This packet contains a COOKIE-ECHO chunk. */
DECL|member|has_cookie_echo
r_int
id|has_cookie_echo
suffix:semicolon
DECL|member|malloced
r_int
id|malloced
suffix:semicolon
)brace
suffix:semicolon
DECL|typedef|sctp_outqueue_thandler_t
r_typedef
r_int
(paren
id|sctp_outqueue_thandler_t
)paren
(paren
id|sctp_outqueue_t
op_star
comma
r_void
op_star
)paren
suffix:semicolon
DECL|typedef|sctp_outqueue_ehandler_t
r_typedef
r_int
(paren
id|sctp_outqueue_ehandler_t
)paren
(paren
id|sctp_outqueue_t
op_star
)paren
suffix:semicolon
DECL|typedef|sctp_outqueue_ohandler_init_t
r_typedef
id|sctp_packet_t
op_star
(paren
id|sctp_outqueue_ohandler_init_t
)paren
(paren
id|sctp_packet_t
op_star
comma
id|sctp_transport_t
op_star
comma
id|__u16
id|sport
comma
id|__u16
id|dport
)paren
suffix:semicolon
DECL|typedef|sctp_outqueue_ohandler_config_t
r_typedef
id|sctp_packet_t
op_star
(paren
id|sctp_outqueue_ohandler_config_t
)paren
(paren
id|sctp_packet_t
op_star
comma
id|__u32
id|vtag
comma
r_int
id|ecn_capable
comma
id|sctp_packet_phandler_t
op_star
id|get_prepend_chunk
)paren
suffix:semicolon
DECL|typedef|sctp_outqueue_ohandler_t
r_typedef
id|sctp_xmit_t
(paren
id|sctp_outqueue_ohandler_t
)paren
(paren
id|sctp_packet_t
op_star
comma
id|sctp_chunk_t
op_star
)paren
suffix:semicolon
DECL|typedef|sctp_outqueue_ohandler_force_t
r_typedef
r_int
(paren
id|sctp_outqueue_ohandler_force_t
)paren
(paren
id|sctp_packet_t
op_star
)paren
suffix:semicolon
DECL|variable|sctp_packet_init
id|sctp_outqueue_ohandler_init_t
id|sctp_packet_init
suffix:semicolon
DECL|variable|sctp_packet_config
id|sctp_outqueue_ohandler_config_t
id|sctp_packet_config
suffix:semicolon
DECL|variable|sctp_packet_append_chunk
id|sctp_outqueue_ohandler_t
id|sctp_packet_append_chunk
suffix:semicolon
DECL|variable|sctp_packet_transmit_chunk
id|sctp_outqueue_ohandler_t
id|sctp_packet_transmit_chunk
suffix:semicolon
DECL|variable|sctp_packet_transmit
id|sctp_outqueue_ohandler_force_t
id|sctp_packet_transmit
suffix:semicolon
r_void
id|sctp_packet_free
c_func
(paren
id|sctp_packet_t
op_star
)paren
suffix:semicolon
multiline_comment|/* This represents a remote transport address.&n; * For local transport addresses, we just use sockaddr_storage_t.&n; *&n; * RFC2960 Section 1.4 Key Terms&n; *&n; *   o  Transport address:  A Transport Address is traditionally defined&n; *      by Network Layer address, Transport Layer protocol and Transport&n; *      Layer port number.  In the case of SCTP running over IP, a&n; *      transport address is defined by the combination of an IP address&n; *      and an SCTP port number (where SCTP is the Transport protocol).&n; *&n; * RFC2960 Section 7.1 SCTP Differences from TCP Congestion control&n; *&n; *   o  The sender keeps a separate congestion control parameter set for&n; *      each of the destination addresses it can send to (not each&n; *      source-destination pair but for each destination).  The parameters&n; *      should decay if the address is not used for a long enough time&n; *      period.&n; *&n; */
DECL|struct|SCTP_transport
r_struct
id|SCTP_transport
(brace
multiline_comment|/* A list of transports. */
DECL|member|transports
r_struct
id|list_head
id|transports
suffix:semicolon
multiline_comment|/* Reference counting. */
DECL|member|refcnt
id|atomic_t
id|refcnt
suffix:semicolon
DECL|member|dead
r_int
id|dead
suffix:semicolon
multiline_comment|/* This is the peer&squot;s IP address and port. */
DECL|member|ipaddr
id|sockaddr_storage_t
id|ipaddr
suffix:semicolon
multiline_comment|/* These are the functions we call to handle LLP stuff.  */
DECL|member|af_specific
id|sctp_func_t
op_star
id|af_specific
suffix:semicolon
multiline_comment|/* Which association do we belong to?  */
DECL|member|asoc
id|sctp_association_t
op_star
id|asoc
suffix:semicolon
multiline_comment|/* RFC2960&n;&t; *&n;&t; * 12.3 Per Transport Address Data&n;&t; *&n;&t; * For each destination transport address in the peer&squot;s&n;&t; * address list derived from the INIT or INIT ACK chunk, a&n;&t; * number of data elements needs to be maintained including:&n;&t; */
DECL|member|rtt
id|__u32
id|rtt
suffix:semicolon
multiline_comment|/* This is the most recent RTT.  */
multiline_comment|/* RTO         : The current retransmission timeout value.  */
DECL|member|rto
id|__u32
id|rto
suffix:semicolon
multiline_comment|/* RTTVAR      : The current RTT variation.  */
DECL|member|rttvar
id|__u32
id|rttvar
suffix:semicolon
multiline_comment|/* SRTT        : The current smoothed round trip time.  */
DECL|member|srtt
id|__u32
id|srtt
suffix:semicolon
multiline_comment|/* RTO-Pending : A flag used to track if one of the DATA&n;&t; *              chunks sent to this address is currently being&n;&t; *              used to compute a RTT. If this flag is 0,&n;&t; *              the next DATA chunk sent to this destination&n;&t; *              should be used to compute a RTT and this flag&n;&t; *              should be set. Every time the RTT&n;&t; *              calculation completes (i.e. the DATA chunk&n;&t; *              is SACK&squot;d) clear this flag.&n;         */
DECL|member|rto_pending
r_int
id|rto_pending
suffix:semicolon
multiline_comment|/*&n;&t; * These are the congestion stats.&n;&t; */
multiline_comment|/* cwnd        : The current congestion window.  */
DECL|member|cwnd
id|__u32
id|cwnd
suffix:semicolon
multiline_comment|/* This is the actual cwnd.  */
multiline_comment|/* ssthresh    : The current slow start threshold value.  */
DECL|member|ssthresh
id|__u32
id|ssthresh
suffix:semicolon
multiline_comment|/* partial     : The tracking method for increase of cwnd when in&n;&t; * bytes acked : congestion avoidance mode (see Section 6.2.2)&n;&t; */
DECL|member|partial_bytes_acked
id|__u32
id|partial_bytes_acked
suffix:semicolon
multiline_comment|/* Data that has been sent, but not acknowledged. */
DECL|member|flight_size
id|__u32
id|flight_size
suffix:semicolon
multiline_comment|/* PMTU       : The current known path MTU.  */
DECL|member|pmtu
id|__u32
id|pmtu
suffix:semicolon
multiline_comment|/* When was the last time(in jiffies) that a data packet was sent on&n;&t; * this transport?  This is used to adjust the cwnd when the transport&n;&t; * becomes inactive.&n;&t; */
DECL|member|last_time_used
r_int
r_int
id|last_time_used
suffix:semicolon
multiline_comment|/* Heartbeat interval: The endpoint sends out a Heartbeat chunk to&n;&t; * the destination address every heartbeat interval.&n;&t; */
DECL|member|hb_interval
r_int
id|hb_interval
suffix:semicolon
multiline_comment|/* When was the last time (in jiffies) that we heard from this&n;&t; * transport?  We use this to pick new active and retran paths.&n;&t; */
DECL|member|last_time_heard
r_int
r_int
id|last_time_heard
suffix:semicolon
multiline_comment|/* Last time(in jiffies) when cwnd is reduced due to the congestion&n;&t; * indication based on ECNE chunk.&n;&t; */
DECL|member|last_time_ecne_reduced
r_int
r_int
id|last_time_ecne_reduced
suffix:semicolon
multiline_comment|/* state       : The current state of this destination,&n;&t; *             :  i.e. DOWN, UP, ALLOW-HB, NO-HEARTBEAT, etc.&n;&t; */
r_struct
(brace
DECL|member|active
r_int
id|active
suffix:semicolon
DECL|member|hb_allowed
r_int
id|hb_allowed
suffix:semicolon
DECL|member|state
)brace
id|state
suffix:semicolon
multiline_comment|/* These are the error stats for this destination.  */
multiline_comment|/* Error count : The current error count for this destination.  */
DECL|member|error_count
r_int
r_int
id|error_count
suffix:semicolon
multiline_comment|/* Error       : Current error threshold for this destination&n;&t; * Threshold   : i.e. what value marks the destination down if&n;&t; *             : errorCount reaches this value.&n;&t; */
DECL|member|error_threshold
r_int
r_int
id|error_threshold
suffix:semicolon
multiline_comment|/* This is the max_retrans value for the transport and will&n;&t; * be initialized to proto.max_retrans.path.  This can be changed&n;&t; * using SCTP_SET_PEER_ADDR_PARAMS socket option.&n;&t; */
DECL|member|max_retrans
r_int
id|max_retrans
suffix:semicolon
multiline_comment|/* We use this name for debugging output... */
DECL|member|debug_name
r_char
op_star
id|debug_name
suffix:semicolon
multiline_comment|/* Per         : A timer used by each destination.&n;&t; * Destination :&n;&t; * Timer       :&n;&t; *&n;&t; * [Everywhere else in the text this is called T3-rtx. -ed]&n;&t; */
DECL|member|T3_rtx_timer
r_struct
id|timer_list
id|T3_rtx_timer
suffix:semicolon
multiline_comment|/* Heartbeat timer is per destination. */
DECL|member|hb_timer
r_struct
id|timer_list
id|hb_timer
suffix:semicolon
multiline_comment|/* Since we&squot;re using per-destination retransmission timers&n;&t; * (see above), we&squot;re also using per-destination &quot;transmitted&quot;&n;&t; * queues.  This probably ought to be a private struct&n;&t; * accessible only within the outqueue, but it&squot;s not, yet.&n;&t; */
DECL|member|transmitted
r_struct
id|list_head
id|transmitted
suffix:semicolon
multiline_comment|/* We build bundle-able packets for this transport here.  */
DECL|member|packet
id|sctp_packet_t
id|packet
suffix:semicolon
multiline_comment|/* This is the list of transports that have chunks to send.  */
DECL|member|send_ready
r_struct
id|list_head
id|send_ready
suffix:semicolon
DECL|member|malloced
r_int
id|malloced
suffix:semicolon
multiline_comment|/* Is this structure kfree()able? */
)brace
suffix:semicolon
r_extern
id|sctp_transport_t
op_star
id|sctp_transport_new
c_func
(paren
r_const
id|sockaddr_storage_t
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
id|sctp_transport_t
op_star
id|sctp_transport_init
c_func
(paren
id|sctp_transport_t
op_star
comma
r_const
id|sockaddr_storage_t
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|sctp_transport_set_owner
c_func
(paren
id|sctp_transport_t
op_star
comma
id|sctp_association_t
op_star
)paren
suffix:semicolon
r_extern
r_void
id|sctp_transport_free
c_func
(paren
id|sctp_transport_t
op_star
)paren
suffix:semicolon
r_extern
r_void
id|sctp_transport_destroy
c_func
(paren
id|sctp_transport_t
op_star
)paren
suffix:semicolon
r_extern
r_void
id|sctp_transport_reset_timers
c_func
(paren
id|sctp_transport_t
op_star
)paren
suffix:semicolon
r_extern
r_void
id|sctp_transport_hold
c_func
(paren
id|sctp_transport_t
op_star
)paren
suffix:semicolon
r_extern
r_void
id|sctp_transport_put
c_func
(paren
id|sctp_transport_t
op_star
)paren
suffix:semicolon
r_extern
r_void
id|sctp_transport_update_rto
c_func
(paren
id|sctp_transport_t
op_star
comma
id|__u32
)paren
suffix:semicolon
r_extern
r_void
id|sctp_transport_raise_cwnd
c_func
(paren
id|sctp_transport_t
op_star
comma
id|__u32
comma
id|__u32
)paren
suffix:semicolon
r_extern
r_void
id|sctp_transport_lower_cwnd
c_func
(paren
id|sctp_transport_t
op_star
comma
id|sctp_lower_cwnd_t
)paren
suffix:semicolon
multiline_comment|/* This is the structure we use to queue packets as they come into&n; * SCTP.  We write packets to it and read chunks from it.  It handles&n; * fragment reassembly and chunk unbundling.&n; */
DECL|struct|SCTP_inqueue
r_struct
id|SCTP_inqueue
(brace
multiline_comment|/* This is actually a queue of sctp_chunk_t each&n;&t; * containing a partially decoded packet.&n;&t; */
DECL|member|in
r_struct
id|sk_buff_head
id|in
suffix:semicolon
multiline_comment|/* This is the packet which is currently off the in queue and is&n;&t; * being worked on through the inbound chunk processing.&n;&t; */
DECL|member|in_progress
id|sctp_chunk_t
op_star
id|in_progress
suffix:semicolon
multiline_comment|/* This is the delayed task to finish delivering inbound&n;&t; * messages.&n;&t; */
DECL|member|immediate
r_struct
id|tq_struct
id|immediate
suffix:semicolon
DECL|member|malloced
r_int
id|malloced
suffix:semicolon
multiline_comment|/* Is this structure kfree()able?  */
)brace
suffix:semicolon
id|sctp_inqueue_t
op_star
id|sctp_inqueue_new
c_func
(paren
r_void
)paren
suffix:semicolon
r_void
id|sctp_inqueue_init
c_func
(paren
id|sctp_inqueue_t
op_star
)paren
suffix:semicolon
r_void
id|sctp_inqueue_free
c_func
(paren
id|sctp_inqueue_t
op_star
)paren
suffix:semicolon
r_void
id|sctp_push_inqueue
c_func
(paren
id|sctp_inqueue_t
op_star
comma
id|sctp_chunk_t
op_star
id|packet
)paren
suffix:semicolon
id|sctp_chunk_t
op_star
id|sctp_pop_inqueue
c_func
(paren
id|sctp_inqueue_t
op_star
)paren
suffix:semicolon
r_void
id|sctp_inqueue_set_th_handler
c_func
(paren
id|sctp_inqueue_t
op_star
comma
r_void
(paren
op_star
)paren
(paren
r_void
op_star
)paren
comma
r_void
op_star
)paren
suffix:semicolon
multiline_comment|/* This is the structure we use to hold outbound chunks.  You push&n; * chunks in and they automatically pop out the other end as bundled&n; * packets (it calls (*output_handler)()).&n; *&n; * This structure covers sections 6.3, 6.4, 6.7, 6.8, 6.10, 7., 8.1,&n; * and 8.2 of the v13 draft.&n; *&n; * It handles retransmissions.  The connection to the timeout portion&n; * of the state machine is through sctp_..._timeout() and timeout_handler.&n; *&n; * If you feed it SACKs, it will eat them.&n; *&n; * If you give it big chunks, it will fragment them.&n; *&n; * It assigns TSN&squot;s to data chunks.  This happens at the last possible&n; * instant before transmission.&n; *&n; * When free()&squot;d, it empties itself out via output_handler().&n; */
DECL|struct|SCTP_outqueue
r_struct
id|SCTP_outqueue
(brace
DECL|member|asoc
id|sctp_association_t
op_star
id|asoc
suffix:semicolon
multiline_comment|/* BUG: This really should be an array of streams.&n;&t; * This really holds a list of chunks (one stream).&n;&t; * FIXME: If true, why so?&n;&t; */
DECL|member|out
r_struct
id|sk_buff_head
id|out
suffix:semicolon
multiline_comment|/* These are control chunks we want to send.  */
DECL|member|control
r_struct
id|sk_buff_head
id|control
suffix:semicolon
multiline_comment|/* These are chunks that have been sacked but are above the&n;&t; * CTSN, or cumulative tsn ack point.&n;&t; */
DECL|member|sacked
r_struct
id|list_head
id|sacked
suffix:semicolon
multiline_comment|/* Put chunks on this list to schedule them for&n;&t; * retransmission.&n;&t; */
DECL|member|retransmit
r_struct
id|list_head
id|retransmit
suffix:semicolon
multiline_comment|/* Call these functions to send chunks down to the next lower&n;&t; * layer.  This is always SCTP_packet, but we separate the two&n;&t; * structures to make testing simpler.&n;&t; */
DECL|member|init_output
id|sctp_outqueue_ohandler_init_t
op_star
id|init_output
suffix:semicolon
DECL|member|config_output
id|sctp_outqueue_ohandler_config_t
op_star
id|config_output
suffix:semicolon
DECL|member|append_output
id|sctp_outqueue_ohandler_t
op_star
id|append_output
suffix:semicolon
DECL|member|build_output
id|sctp_outqueue_ohandler_t
op_star
id|build_output
suffix:semicolon
DECL|member|force_output
id|sctp_outqueue_ohandler_force_t
op_star
id|force_output
suffix:semicolon
multiline_comment|/* How many unackd bytes do we have in-flight?  */
DECL|member|outstanding_bytes
id|__u32
id|outstanding_bytes
suffix:semicolon
multiline_comment|/* Is this structure empty?  */
DECL|member|empty
r_int
id|empty
suffix:semicolon
multiline_comment|/* Are we kfree()able? */
DECL|member|malloced
r_int
id|malloced
suffix:semicolon
)brace
suffix:semicolon
id|sctp_outqueue_t
op_star
id|sctp_outqueue_new
c_func
(paren
id|sctp_association_t
op_star
)paren
suffix:semicolon
r_void
id|sctp_outqueue_init
c_func
(paren
id|sctp_association_t
op_star
comma
id|sctp_outqueue_t
op_star
)paren
suffix:semicolon
r_void
id|sctp_outqueue_teardown
c_func
(paren
id|sctp_outqueue_t
op_star
)paren
suffix:semicolon
r_void
id|sctp_outqueue_free
c_func
(paren
id|sctp_outqueue_t
op_star
)paren
suffix:semicolon
r_void
id|sctp_force_outqueue
c_func
(paren
id|sctp_outqueue_t
op_star
)paren
suffix:semicolon
r_int
id|sctp_push_outqueue
c_func
(paren
id|sctp_outqueue_t
op_star
comma
id|sctp_chunk_t
op_star
id|chunk
)paren
suffix:semicolon
r_int
id|sctp_flush_outqueue
c_func
(paren
id|sctp_outqueue_t
op_star
comma
r_int
)paren
suffix:semicolon
r_int
id|sctp_sack_outqueue
c_func
(paren
id|sctp_outqueue_t
op_star
comma
id|sctp_sackhdr_t
op_star
)paren
suffix:semicolon
r_int
id|sctp_outqueue_is_empty
c_func
(paren
r_const
id|sctp_outqueue_t
op_star
)paren
suffix:semicolon
r_int
id|sctp_outqueue_set_output_handlers
c_func
(paren
id|sctp_outqueue_t
op_star
comma
id|sctp_outqueue_ohandler_init_t
id|init
comma
id|sctp_outqueue_ohandler_config_t
id|config
comma
id|sctp_outqueue_ohandler_t
id|append
comma
id|sctp_outqueue_ohandler_t
id|build
comma
id|sctp_outqueue_ohandler_force_t
id|force
)paren
suffix:semicolon
r_void
id|sctp_outqueue_restart
c_func
(paren
id|sctp_outqueue_t
op_star
)paren
suffix:semicolon
r_void
id|sctp_retransmit
c_func
(paren
id|sctp_outqueue_t
op_star
comma
id|sctp_transport_t
op_star
comma
id|__u8
)paren
suffix:semicolon
multiline_comment|/* These bind address data fields common between endpoints and associations */
DECL|struct|SCTP_bind_addr
r_struct
id|SCTP_bind_addr
(brace
multiline_comment|/* RFC 2960 12.1 Parameters necessary for the SCTP instance&n;&t; *&n;&t; * SCTP Port:   The local SCTP port number the endpoint is&n;&t; * &t;&t;bound to.&n;&t; */
DECL|member|port
id|__u16
id|port
suffix:semicolon
multiline_comment|/* RFC 2960 12.1 Parameters necessary for the SCTP instance&n;&t; *&n;&t; * Address List: The list of IP addresses that this instance&n;&t; *&t;has bound.  This information is passed to one&squot;s&n;&t; *&t;peer(s) in INIT and INIT ACK chunks.&n;&t; */
DECL|member|address_list
r_struct
id|list_head
id|address_list
suffix:semicolon
DECL|member|malloced
r_int
id|malloced
suffix:semicolon
multiline_comment|/* Are we kfree()able?  */
)brace
suffix:semicolon
id|sctp_bind_addr_t
op_star
id|sctp_bind_addr_new
c_func
(paren
r_int
id|gfp_mask
)paren
suffix:semicolon
r_void
id|sctp_bind_addr_init
c_func
(paren
id|sctp_bind_addr_t
op_star
comma
id|__u16
id|port
)paren
suffix:semicolon
r_void
id|sctp_bind_addr_free
c_func
(paren
id|sctp_bind_addr_t
op_star
)paren
suffix:semicolon
r_int
id|sctp_bind_addr_copy
c_func
(paren
id|sctp_bind_addr_t
op_star
id|dest
comma
r_const
id|sctp_bind_addr_t
op_star
id|src
comma
id|sctp_scope_t
id|scope
comma
r_int
id|priority
comma
r_int
id|flags
)paren
suffix:semicolon
r_int
id|sctp_add_bind_addr
c_func
(paren
id|sctp_bind_addr_t
op_star
comma
id|sockaddr_storage_t
op_star
comma
r_int
id|priority
)paren
suffix:semicolon
r_int
id|sctp_del_bind_addr
c_func
(paren
id|sctp_bind_addr_t
op_star
comma
id|sockaddr_storage_t
op_star
)paren
suffix:semicolon
r_int
id|sctp_bind_addr_has_addr
c_func
(paren
id|sctp_bind_addr_t
op_star
comma
r_const
id|sockaddr_storage_t
op_star
)paren
suffix:semicolon
id|sctpParam_t
id|sctp_bind_addrs_to_raw
c_func
(paren
r_const
id|sctp_bind_addr_t
op_star
id|bp
comma
r_int
op_star
id|addrs_len
comma
r_int
id|priority
)paren
suffix:semicolon
r_int
id|sctp_raw_to_bind_addrs
c_func
(paren
id|sctp_bind_addr_t
op_star
id|bp
comma
id|__u8
op_star
id|raw_addr_list
comma
r_int
id|addrs_len
comma
r_int
r_int
id|port
comma
r_int
id|priority
)paren
suffix:semicolon
id|sctp_scope_t
id|sctp_scope
c_func
(paren
r_const
id|sockaddr_storage_t
op_star
)paren
suffix:semicolon
r_int
id|sctp_in_scope
c_func
(paren
r_const
id|sockaddr_storage_t
op_star
id|addr
comma
r_const
id|sctp_scope_t
id|scope
)paren
suffix:semicolon
r_int
id|sctp_is_any
c_func
(paren
r_const
id|sockaddr_storage_t
op_star
id|addr
)paren
suffix:semicolon
r_int
id|sctp_addr_is_valid
c_func
(paren
r_const
id|sockaddr_storage_t
op_star
id|addr
)paren
suffix:semicolon
multiline_comment|/* What type of sctp_endpoint_common?  */
r_typedef
r_enum
(brace
DECL|enumerator|SCTP_EP_TYPE_SOCKET
id|SCTP_EP_TYPE_SOCKET
comma
DECL|enumerator|SCTP_EP_TYPE_ASSOCIATION
id|SCTP_EP_TYPE_ASSOCIATION
comma
DECL|typedef|sctp_endpoint_type_t
)brace
id|sctp_endpoint_type_t
suffix:semicolon
multiline_comment|/*&n; * A common base class to bridge the implmentation view of a&n; * socket (usually listening) endpoint versus an association&squot;s&n; * local endpoint.&n; * This common structure is useful for several purposes:&n; *   1) Common interface for lookup routines.&n; *      a) Subfunctions work for either endpoint or association&n; *      b) Single interface to lookup allows hiding the lookup lock rather&n; *         than acquiring it externally.&n; *   2) Common interface for the inbound chunk handling/state machine.&n; *   3) Common object handling routines for reference counting, etc.&n; *   4) Disentangle association lookup from endpoint lookup, where we&n; *      do not have to find our endpoint to find our association.&n; *&n; */
DECL|struct|sctp_endpoint_common
r_struct
id|sctp_endpoint_common
(brace
multiline_comment|/* Fields to help us manage our entries in the hash tables. */
DECL|member|next
id|sctp_endpoint_common_t
op_star
id|next
suffix:semicolon
DECL|member|pprev
id|sctp_endpoint_common_t
op_star
op_star
id|pprev
suffix:semicolon
DECL|member|hashent
r_int
id|hashent
suffix:semicolon
multiline_comment|/* Runtime type information.  What kind of endpoint is this? */
DECL|member|type
id|sctp_endpoint_type_t
id|type
suffix:semicolon
multiline_comment|/* Some fields to help us manage this object.&n;&t; *   refcnt   - Reference count access to this object.&n;&t; *   dead     - Do not attempt to use this object.&n;&t; *   malloced - Do we need to kfree this object?&n;&t; */
DECL|member|refcnt
id|atomic_t
id|refcnt
suffix:semicolon
DECL|member|dead
r_char
id|dead
suffix:semicolon
DECL|member|malloced
r_char
id|malloced
suffix:semicolon
multiline_comment|/* What socket does this endpoint belong to?  */
DECL|member|sk
r_struct
id|sock
op_star
id|sk
suffix:semicolon
multiline_comment|/* This is where we receive inbound chunks.  */
DECL|member|inqueue
id|sctp_inqueue_t
id|inqueue
suffix:semicolon
multiline_comment|/* This substructure includes the defining parameters of the&n;&t; * endpoint:&n;&t; * bind_addr.port is our shared port number.&n;&t; * bind_addr.address_list is our set of local IP addresses.&n;&t; */
DECL|member|bind_addr
id|sctp_bind_addr_t
id|bind_addr
suffix:semicolon
multiline_comment|/* Protection during address list comparisons. */
DECL|member|addr_lock
id|rwlock_t
id|addr_lock
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* RFC Section 1.4 Key Terms&n; *&n; * o SCTP endpoint: The logical sender/receiver of SCTP packets. On a&n; *   multi-homed host, an SCTP endpoint is represented to its peers as a&n; *   combination of a set of eligible destination transport addresses to&n; *   which SCTP packets can be sent and a set of eligible source&n; *   transport addresses from which SCTP packets can be received.&n; *   All transport addresses used by an SCTP endpoint must use the&n; *   same port number, but can use multiple IP addresses. A transport&n; *   address used by an SCTP endpoint must not be used by another&n; *   SCTP endpoint. In other words, a transport address is unique&n; *   to an SCTP endpoint.&n; *&n; * From an implementation perspective, each socket has one of these.&n; * A TCP-style socket will have exactly one association on one of&n; * these.  An UDP-style socket will have multiple associations hanging&n; * off one of these.&n; */
DECL|struct|SCTP_endpoint
r_struct
id|SCTP_endpoint
(brace
multiline_comment|/* Common substructure for endpoint and association. */
DECL|member|base
id|sctp_endpoint_common_t
id|base
suffix:semicolon
multiline_comment|/* These are the system-wide defaults and other stuff which is&n;&t; * endpoint-independent.&n;&t; */
DECL|member|proto
id|sctp_protocol_t
op_star
id|proto
suffix:semicolon
multiline_comment|/* Associations: A list of current associations and mappings&n;&t; *            to the data consumers for each association. This&n;&t; *            may be in the form of a hash table or other&n;&t; *            implementation dependent structure. The data&n;&t; *            consumers may be process identification&n;&t; *            information such as file descriptors, named pipe&n;&t; *            pointer, or table pointers dependent on how SCTP&n;&t; *            is implemented.&n;&t; */
multiline_comment|/* This is really a list of sctp_association_t entries. */
DECL|member|asocs
r_struct
id|list_head
id|asocs
suffix:semicolon
multiline_comment|/* Secret Key: A secret key used by this endpoint to compute&n;&t; *            the MAC.  This SHOULD be a cryptographic quality&n;&t; *            random number with a sufficient length.&n;&t; *&t;      Discussion in [RFC1750] can be helpful in&n;&t; * &t;      selection of the key.&n;&t; */
DECL|member|secret_key
id|__u8
id|secret_key
(braket
id|SCTP_HOW_MANY_SECRETS
)braket
(braket
id|SCTP_SECRET_SIZE
)braket
suffix:semicolon
DECL|member|current_key
r_int
id|current_key
suffix:semicolon
DECL|member|last_key
r_int
id|last_key
suffix:semicolon
DECL|member|key_changed_at
r_int
id|key_changed_at
suffix:semicolon
multiline_comment|/* Default timeouts.  */
DECL|member|timeouts
r_int
id|timeouts
(braket
id|SCTP_NUM_TIMEOUT_TYPES
)braket
suffix:semicolon
multiline_comment|/* Various thresholds.  */
multiline_comment|/* Name for debugging output... */
DECL|member|debug_name
r_char
op_star
id|debug_name
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Recover the outter endpoint structure. */
DECL|function|sctp_ep
r_static
r_inline
id|sctp_endpoint_t
op_star
id|sctp_ep
c_func
(paren
id|sctp_endpoint_common_t
op_star
id|base
)paren
(brace
id|sctp_endpoint_t
op_star
id|ep
suffix:semicolon
multiline_comment|/* We are not really a list, but the list_entry() macro is&n;&t; * really quite generic to find the address of an outter struct.&n;&t; */
id|ep
op_assign
id|list_entry
c_func
(paren
id|base
comma
id|sctp_endpoint_t
comma
id|base
)paren
suffix:semicolon
r_return
id|ep
suffix:semicolon
)brace
multiline_comment|/* These are function signatures for manipulating endpoints.  */
id|sctp_endpoint_t
op_star
id|sctp_endpoint_new
c_func
(paren
id|sctp_protocol_t
op_star
comma
r_struct
id|sock
op_star
comma
r_int
)paren
suffix:semicolon
id|sctp_endpoint_t
op_star
id|sctp_endpoint_init
c_func
(paren
id|sctp_endpoint_t
op_star
comma
id|sctp_protocol_t
op_star
comma
r_struct
id|sock
op_star
comma
r_int
id|priority
)paren
suffix:semicolon
r_void
id|sctp_endpoint_free
c_func
(paren
id|sctp_endpoint_t
op_star
)paren
suffix:semicolon
r_void
id|sctp_endpoint_put
c_func
(paren
id|sctp_endpoint_t
op_star
)paren
suffix:semicolon
r_void
id|sctp_endpoint_hold
c_func
(paren
id|sctp_endpoint_t
op_star
)paren
suffix:semicolon
r_void
id|sctp_endpoint_add_asoc
c_func
(paren
id|sctp_endpoint_t
op_star
comma
id|sctp_association_t
op_star
id|asoc
)paren
suffix:semicolon
id|sctp_association_t
op_star
id|sctp_endpoint_lookup_assoc
c_func
(paren
r_const
id|sctp_endpoint_t
op_star
id|ep
comma
r_const
id|sockaddr_storage_t
op_star
id|paddr
comma
id|sctp_transport_t
op_star
op_star
)paren
suffix:semicolon
id|sctp_endpoint_t
op_star
id|sctp_endpoint_is_match
c_func
(paren
id|sctp_endpoint_t
op_star
comma
r_const
id|sockaddr_storage_t
op_star
)paren
suffix:semicolon
r_void
id|sctp_process_init
c_func
(paren
id|sctp_association_t
op_star
id|asoc
comma
id|sctp_cid_t
id|cid
comma
r_const
id|sockaddr_storage_t
op_star
id|peer_addr
comma
id|sctp_init_chunk_t
op_star
id|peer_init
comma
r_int
id|priority
)paren
suffix:semicolon
r_int
id|sctp_process_param
c_func
(paren
id|sctp_association_t
op_star
id|asoc
comma
id|sctpParam_t
id|param
comma
r_const
id|sockaddr_storage_t
op_star
id|peer_addr
comma
id|sctp_cid_t
id|cid
comma
r_int
id|priority
)paren
suffix:semicolon
id|__u32
id|sctp_generate_tag
c_func
(paren
r_const
id|sctp_endpoint_t
op_star
id|ep
)paren
suffix:semicolon
id|__u32
id|sctp_generate_tsn
c_func
(paren
r_const
id|sctp_endpoint_t
op_star
id|ep
)paren
suffix:semicolon
multiline_comment|/* RFC2960&n; *&n; * 12. Recommended Transmission Control Block (TCB) Parameters&n; *&n; * This section details a recommended set of parameters that should&n; * be contained within the TCB for an implementation. This section is&n; * for illustrative purposes and should not be deemed as requirements&n; * on an implementation or as an exhaustive list of all parameters&n; * inside an SCTP TCB. Each implementation may need its own additional&n; * parameters for optimization.&n; */
multiline_comment|/* Here we have information about each individual association. */
DECL|struct|SCTP_association
r_struct
id|SCTP_association
(brace
multiline_comment|/* A base structure common to endpoint and association.&n;&t; * In this context, it represents the associations&squot;s view&n;&t; * of the local endpoint of the association.&n;&t; */
DECL|member|base
id|sctp_endpoint_common_t
id|base
suffix:semicolon
multiline_comment|/* Associations on the same socket. */
DECL|member|asocs
r_struct
id|list_head
id|asocs
suffix:semicolon
multiline_comment|/* This is a signature that lets us know that this is a&n;&t; * sctp_association_t data structure.  Used for mapping an&n;&t; * association id to an association.&n;&t; */
DECL|member|eyecatcher
id|__u32
id|eyecatcher
suffix:semicolon
multiline_comment|/* This is our parent endpoint.  */
DECL|member|ep
id|sctp_endpoint_t
op_star
id|ep
suffix:semicolon
multiline_comment|/* These are those association elements needed in the cookie.  */
DECL|member|c
id|sctp_cookie_t
id|c
suffix:semicolon
multiline_comment|/* This is all information about our peer.  */
r_struct
(brace
multiline_comment|/* rwnd&n;&t;&t; *&n;&t;&t; * Peer Rwnd   : Current calculated value of the peer&squot;s rwnd.&n;&t;&t; */
DECL|member|rwnd
id|__u32
id|rwnd
suffix:semicolon
multiline_comment|/* transport_addr_list&n;&t;&t; *&n;&t;&t; * Peer        : A list of SCTP transport addresses that the&n;&t;&t; * Transport   : peer is bound to. This information is derived&n;&t;&t; * Address     : from the INIT or INIT ACK and is used to&n;&t;&t; * List        : associate an inbound packet with a given&n;&t;&t; *             : association. Normally this information is&n;&t;&t; *&t;       : hashed or keyed for quick lookup and access&n;&t;&t; *&t;       : of the TCB.&n;&t;&t; *&n;&t;&t; * It is a list of SCTP_transport&squot;s.&n;&t;&t; */
DECL|member|transport_addr_list
r_struct
id|list_head
id|transport_addr_list
suffix:semicolon
multiline_comment|/* port&n;&t;&t; *   The transport layer port number.&n;&t;&t; */
DECL|member|port
id|__u16
id|port
suffix:semicolon
multiline_comment|/* primary_path&n;&t;&t; *&n;&t;&t; * Primary     : This is the current primary destination&n;&t;&t; * Path        : transport address of the peer endpoint.  It&n;&t;&t; *             : may also specify a source transport address&n;&t;&t; *&t;       : on this endpoint.&n;&t;&t; *&n;&t;&t; * All of these paths live on transport_addr_list.&n;&t;&t; *&n;&t;&t; * At the bakeoffs, we discovered that the intent of&n;&t;&t; * primaryPath is that it only changes when the ULP&n;&t;&t; * asks to have it changed.  We add the activePath to&n;&t;&t; * designate the connection we are currently using to&n;&t;&t; * transmit new data and most control chunks.&n;&t;&t; */
DECL|member|primary_path
id|sctp_transport_t
op_star
id|primary_path
suffix:semicolon
multiline_comment|/* active_path&n;&t;&t; *   The path that we are currently using to&n;&t;&t; *   transmit new data and most control chunks.&n;&t;&t; */
DECL|member|active_path
id|sctp_transport_t
op_star
id|active_path
suffix:semicolon
multiline_comment|/* retran_path&n;&t;&t; *&n;&t;&t; * RFC2960 6.4 Multi-homed SCTP Endpoints&n;&t;&t; * ...&n;&t;&t; * Furthermore, when its peer is multi-homed, an&n;&t;&t; * endpoint SHOULD try to retransmit a chunk to an&n;&t;&t; * active destination transport address that is&n;&t;&t; * different from the last destination address to&n;&t;&t; * which the DATA chunk was sent.&n;&t;&t; */
DECL|member|retran_path
id|sctp_transport_t
op_star
id|retran_path
suffix:semicolon
multiline_comment|/* Pointer to last transport I have sent on.  */
DECL|member|last_sent_to
id|sctp_transport_t
op_star
id|last_sent_to
suffix:semicolon
multiline_comment|/* This is the last transport I have recieved DATA on.  */
DECL|member|last_data_from
id|sctp_transport_t
op_star
id|last_data_from
suffix:semicolon
multiline_comment|/*&n;&t;&t; * Mapping  An array of bits or bytes indicating which out of&n;&t;&t; * Array    order TSN&squot;s have been received (relative to the&n;&t;&t; *          Last Rcvd TSN). If no gaps exist, i.e. no out of&n;&t;&t; *          order packets have been received, this array&n;&t;&t; *          will be set to all zero. This structure may be&n;&t;&t; *          in the form of a circular buffer or bit array.&n;&t;&t; *&n;&t;&t; * Last Rcvd   : This is the last TSN received in&n;&t;&t; * TSN&t;       : sequence. This value is set initially by&n;&t;&t; *             : taking the peer&squot;s Initial TSN, received in&n;&t;&t; *             : the INIT or INIT ACK chunk, and subtracting&n;&t;&t; *             : one from it.&n;&t;&t; *&n;&t;&t; * Throughout most of the specification this is called the&n;&t;&t; * &quot;Cumulative TSN ACK Point&quot;.  In this case, we&n;&t;&t; * ignore the advice in 12.2 in favour of the term&n;&t;&t; * used in the bulk of the text.  This value is hidden&n;&t;&t; * in tsn_map--we get it by calling sctp_tsnmap_get_ctsn().&n;&t;&t; */
DECL|member|tsn_map
id|sctp_tsnmap_t
id|tsn_map
suffix:semicolon
DECL|member|_map
id|__u8
id|_map
(braket
id|sctp_tsnmap_storage_size
c_func
(paren
id|SCTP_TSN_MAP_SIZE
)paren
)braket
suffix:semicolon
multiline_comment|/* We record duplicate TSNs here.  We clear this after&n;&t;&t; * every SACK.&n;&t;&t; * FIXME: We should move this into the tsnmap? --jgrimm&n;&t;&t; */
DECL|member|dup_tsns
id|sctp_dup_tsn_t
id|dup_tsns
(braket
id|SCTP_MAX_DUP_TSNS
)braket
suffix:semicolon
DECL|member|next_dup_tsn
r_int
id|next_dup_tsn
suffix:semicolon
multiline_comment|/* Do we need to sack the peer? */
DECL|member|sack_needed
r_int
id|sack_needed
suffix:semicolon
multiline_comment|/* These are capabilities which our peer advertised.  */
DECL|member|ecn_capable
id|__u8
id|ecn_capable
suffix:semicolon
multiline_comment|/* Can peer do ECN? */
DECL|member|ipv4_address
id|__u8
id|ipv4_address
suffix:semicolon
multiline_comment|/* Peer understands IPv4 addresses? */
DECL|member|ipv6_address
id|__u8
id|ipv6_address
suffix:semicolon
multiline_comment|/* Peer understands IPv6 addresses? */
DECL|member|hostname_address
id|__u8
id|hostname_address
suffix:semicolon
multiline_comment|/* Peer understands DNS addresses? */
DECL|member|i
id|sctp_inithdr_t
id|i
suffix:semicolon
DECL|member|cookie_len
r_int
id|cookie_len
suffix:semicolon
DECL|member|cookie
r_void
op_star
id|cookie
suffix:semicolon
multiline_comment|/* ADDIP Extention (ADDIP)&t;&t;--xguo */
multiline_comment|/* &lt;expected peer-serial-number&gt; minus 1 (ADDIP sec. 4.2 C1) */
DECL|member|addip_serial
id|__u32
id|addip_serial
suffix:semicolon
DECL|member|peer
)brace
id|peer
suffix:semicolon
multiline_comment|/* State       : A state variable indicating what state the&n;&t; *&t;       : association is in, i.e. COOKIE-WAIT,&n;&t; *             : COOKIE-ECHOED, ESTABLISHED, SHUTDOWN-PENDING,&n;&t; *             : SHUTDOWN-SENT, SHUTDOWN-RECEIVED, SHUTDOWN-ACK-SENT.&n;&t; *&n;&t; *              Note: No &quot;CLOSED&quot; state is illustrated since if a&n;&t; *              association is &quot;CLOSED&quot; its TCB SHOULD be removed.&n;&t; *&n;&t; * &t;&t;In this implementation we DO have a CLOSED&n;&t; *&t;&t;state which is used during initiation and shutdown.&n;&t; *&n;&t; * &t;&t;State takes values from SCTP_STATE_*.&n;&t; */
DECL|member|state
id|sctp_state_t
id|state
suffix:semicolon
multiline_comment|/* When did we enter this state?  */
DECL|member|state_timestamp
r_int
id|state_timestamp
suffix:semicolon
multiline_comment|/* The cookie life I award for any cookie.  */
DECL|member|cookie_life
r_struct
id|timeval
id|cookie_life
suffix:semicolon
DECL|member|cookie_preserve
id|__u32
id|cookie_preserve
suffix:semicolon
multiline_comment|/* Overall     : The overall association error count.&n;&t; * Error Count : [Clear this any time I get something.]&n;&t; */
DECL|member|overall_error_count
r_int
id|overall_error_count
suffix:semicolon
multiline_comment|/* Overall     : The threshold for this association that if&n;&t; * Error       : the Overall Error Count reaches will cause&n;&t; * Threshold   : this association to be torn down. &n;&t; */
DECL|member|overall_error_threshold
r_int
id|overall_error_threshold
suffix:semicolon
multiline_comment|/* These are the association&squot;s initial, max, and min RTO values.&n;&t; * These values will be initialized by system defaults, but can&n;&t; * be modified via the SCTP_RTOINFO socket option.&n;&t; */
DECL|member|rto_initial
id|__u32
id|rto_initial
suffix:semicolon
DECL|member|rto_max
id|__u32
id|rto_max
suffix:semicolon
DECL|member|rto_min
id|__u32
id|rto_min
suffix:semicolon
multiline_comment|/* Maximum number of new data packets that can be sent in a burst.  */
DECL|member|max_burst
r_int
id|max_burst
suffix:semicolon
multiline_comment|/* This is the max_retrans value for the association.  This value will&n;&t; * be initialized initialized from system defaults, but can be&n;&t; * modified by the SCTP_ASSOCINFO socket option.&n;&t; */
DECL|member|max_retrans
r_int
id|max_retrans
suffix:semicolon
multiline_comment|/* Maximum number of times the endpoint will retransmit INIT  */
DECL|member|max_init_attempts
id|__u16
id|max_init_attempts
suffix:semicolon
multiline_comment|/* How many times have we resent an INIT? */
DECL|member|init_retries
id|__u16
id|init_retries
suffix:semicolon
multiline_comment|/* The largest timeout or RTO value to use in attempting an INIT */
DECL|member|max_init_timeo
id|__u16
id|max_init_timeo
suffix:semicolon
DECL|member|timeouts
r_int
id|timeouts
(braket
id|SCTP_NUM_TIMEOUT_TYPES
)braket
suffix:semicolon
DECL|member|timers
r_struct
id|timer_list
id|timers
(braket
id|SCTP_NUM_TIMEOUT_TYPES
)braket
suffix:semicolon
multiline_comment|/* Transport to which SHUTDOWN chunk was last sent.  */
DECL|member|shutdown_last_sent_to
id|sctp_transport_t
op_star
id|shutdown_last_sent_to
suffix:semicolon
multiline_comment|/* Next TSN    : The next TSN number to be assigned to a new&n;&t; *             : DATA chunk.  This is sent in the INIT or INIT&n;&t; *             : ACK chunk to the peer and incremented each&n;&t; *             : time a DATA chunk is assigned a TSN&n;&t; *             : (normally just prior to transmit or during&n;&t; *&t;       : fragmentation).&n;&t; */
DECL|member|next_tsn
id|__u32
id|next_tsn
suffix:semicolon
multiline_comment|/* &n;&t; * Last Rcvd   : This is the last TSN received in sequence.  This value&n;&t; * TSN         : is set initially by taking the peer&squot;s Initial TSN,&n;&t; *             : received in the INIT or INIT ACK chunk, and&n;&t; *             : subtracting one from it.&n;&t; *&n;&t; * Most of RFC 2960 refers to this as the Cumulative TSN Ack Point. &n;&t; */
DECL|member|ctsn_ack_point
id|__u32
id|ctsn_ack_point
suffix:semicolon
multiline_comment|/* The number of unacknowledged data chunks.  Reported through&n;&t; * the SCTP_STATUS sockopt.&n;&t; */
DECL|member|unack_data
id|__u16
id|unack_data
suffix:semicolon
multiline_comment|/* This is the association&squot;s receive buffer space.  This value is used&n;&t; * to set a_rwnd field in an INIT or a SACK chunk.&n;&t; */
DECL|member|rwnd
id|__u32
id|rwnd
suffix:semicolon
multiline_comment|/* Number of bytes by which the rwnd has slopped.  The rwnd is allowed&n;&t; * to slop over a maximum of the association&squot;s frag_point.&n;&t; */
DECL|member|rwnd_over
id|__u32
id|rwnd_over
suffix:semicolon
multiline_comment|/* This is the sndbuf size in use for the association.&n;&t; * This corresponds to the sndbuf size for the association,&n;&t; * as specified in the sk-&gt;sndbuf.&n;&t; */
DECL|member|sndbuf_used
r_int
id|sndbuf_used
suffix:semicolon
multiline_comment|/* This is the wait queue head for send requests waiting on&n;&t; * the association sndbuf space.&n;&t; */
DECL|member|wait
id|wait_queue_head_t
id|wait
suffix:semicolon
multiline_comment|/* Association : The smallest PMTU discovered for all of the&n;&t; * PMTU        : peer&squot;s transport addresses.&n;&t; */
DECL|member|pmtu
id|__u32
id|pmtu
suffix:semicolon
multiline_comment|/* The message size at which SCTP fragmentation will occur. */
DECL|member|frag_point
id|__u32
id|frag_point
suffix:semicolon
multiline_comment|/* Ack State   : This flag indicates if the next received&n;&t; *             : packet is to be responded to with a&n;&t; *             : SACK. This is initializedto 0.  When a packet&n;&t; *             : is received it is incremented. If this value&n;&t; *             : reaches 2 or more, a SACK is sent and the&n;&t; *             : value is reset to 0. Note: This is used only&n;&t; *             : when no DATA chunks are received out of&n;&t; *&t;       : order.  When DATA chunks are out of order,&n;&t; *             : SACK&squot;s are not delayed (see Section 6).&n;&t; */
multiline_comment|/* Do we need to send an ack?&n;&t; * When counters[SctpCounterAckState] is above 1 we do!&n;&t; */
DECL|member|counters
r_int
id|counters
(braket
id|SCTP_NUMBER_COUNTERS
)braket
suffix:semicolon
r_struct
(brace
DECL|member|stream
id|__u16
id|stream
suffix:semicolon
DECL|member|ppid
id|__u32
id|ppid
suffix:semicolon
DECL|member|defaults
)brace
id|defaults
suffix:semicolon
multiline_comment|/* This tracks outbound ssn for a given stream.  */
DECL|member|ssn
id|__u16
id|ssn
(braket
id|SCTP_MAX_STREAM
)braket
suffix:semicolon
multiline_comment|/* All outbound chunks go through this structure.  */
DECL|member|outqueue
id|sctp_outqueue_t
id|outqueue
suffix:semicolon
multiline_comment|/* A smart pipe that will handle reordering and fragmentation,&n;&t; * as well as handle passing events up to the ULP.&n;&t; * In the future, we should make this at least dynamic, if&n;&t; * not also some sparse structure.&n;&t; */
DECL|member|ulpq
id|sctp_ulpqueue_t
id|ulpq
suffix:semicolon
DECL|member|_ssnmap
id|__u8
id|_ssnmap
(braket
id|sctp_ulpqueue_storage_size
c_func
(paren
id|SCTP_MAX_STREAM
)paren
)braket
suffix:semicolon
multiline_comment|/* Need to send an ECNE Chunk? */
DECL|member|need_ecne
r_int
id|need_ecne
suffix:semicolon
multiline_comment|/* Last TSN that caused an ECNE Chunk to be sent.  */
DECL|member|last_ecne_tsn
id|__u32
id|last_ecne_tsn
suffix:semicolon
multiline_comment|/* Last TSN that caused a CWR Chunk to be sent.  */
DECL|member|last_cwr_tsn
id|__u32
id|last_cwr_tsn
suffix:semicolon
multiline_comment|/* How many duplicated TSNs have we seen?  */
DECL|member|numduptsns
r_int
id|numduptsns
suffix:semicolon
multiline_comment|/* Number of seconds of idle time before an association is closed.  */
DECL|member|autoclose
id|__u32
id|autoclose
suffix:semicolon
multiline_comment|/* Name for debugging output... */
DECL|member|debug_name
r_char
op_star
id|debug_name
suffix:semicolon
multiline_comment|/* These are to support&n;&t; * &quot;SCTP Extensions for Dynamic Reconfiguration of IP Addresses&n;&t; *  and Enforcement of Flow and Message Limits&quot;&n;&t; * &lt;draft-ietf-tsvwg-addip-sctp-02.txt&gt;&n;&t; * or &quot;ADDIP&quot; for short.&n;&t; */
multiline_comment|/* Is the ADDIP extension enabled for this association? */
DECL|member|addip_enable
r_int
id|addip_enable
suffix:semicolon
multiline_comment|/* ADDIP Section 4.1.1 Congestion Control of ASCONF Chunks&n;&t; *&n;&t; * R1) One and only one ASCONF Chunk MAY be in transit and&n;&t; * unacknowledged at any one time.  If a sender, after sending&n;&t; * an ASCONF chunk, decides it needs to transfer another&n;&t; * ASCONF Chunk, it MUST wait until the ASCONF-ACK Chunk&n;&t; * returns from the previous ASCONF Chunk before sending a&n;&t; * subsequent ASCONF. Note this restriction binds each side,&n;&t; * so at any time two ASCONF may be in-transit on any given&n;&t; * association (one sent from each endpoint).&n;&t; *&n;&t; * [This is our one-and-only-one ASCONF in flight.  If we do&n;&t; * not have an ASCONF in flight, this is NULL.]&n;&t; */
DECL|member|addip_last_asconf
id|sctp_chunk_t
op_star
id|addip_last_asconf
suffix:semicolon
multiline_comment|/* ADDIP Section 4.2 Upon reception of an ASCONF Chunk.&n;&t; *&n;&t; * IMPLEMENTATION NOTE: As an optimization a receiver may wish&n;&t; * to save the last ASCONF-ACK for some predetermined period&n;&t; * of time and instead of re-processing the ASCONF (with the&n;&t; * same serial number) it may just re-transmit the&n;&t; * ASCONF-ACK. It may wish to use the arrival of a new serial&n;&t; * number to discard the previously saved ASCONF-ACK or any&n;&t; * other means it may choose to expire the saved ASCONF-ACK.&n;&t; *&n;&t; * [This is our saved ASCONF-ACK.  We invalidate it when a new&n;&t; * ASCONF serial number arrives.]&n;&t; */
DECL|member|addip_last_asconf_ack
id|sctp_chunk_t
op_star
id|addip_last_asconf_ack
suffix:semicolon
multiline_comment|/* These ASCONF chunks are waiting to be sent.&n;&t; *&n;&t; * These chunaks can&squot;t be pushed to outqueue until receiving&n;&t; * ASCONF_ACK for the previous ASCONF indicated by&n;&t; * addip_last_asconf, so as to guarantee that only one ASCONF&n;&t; * is in flight at any time.&n;&t; *&n;&t; * ADDIP Section 4.1.1 Congestion Control of ASCONF Chunks&n;&t; *&n;&t; * In defining the ASCONF Chunk transfer procedures, it is&n;&t; * essential that these transfers MUST NOT cause congestion&n;&t; * within the network.  To achieve this, we place these&n;&t; * restrictions on the transfer of ASCONF Chunks:&n;&t; *&n;&t; * R1) One and only one ASCONF Chunk MAY be in transit and&n;&t; * unacknowledged at any one time.  If a sender, after sending&n;&t; * an ASCONF chunk, decides it needs to transfer another&n;&t; * ASCONF Chunk, it MUST wait until the ASCONF-ACK Chunk&n;&t; * returns from the previous ASCONF Chunk before sending a&n;&t; * subsequent ASCONF. Note this restriction binds each side,&n;&t; * so at any time two ASCONF may be in-transit on any given&n;&t; * association (one sent from each endpoint).&n;&t; *&n;&t; *&n;&t; * [I really think this is EXACTLY the sort of intelligence&n;&t; *  which already resides in SCTP_outqueue.  Please move this&n;&t; *  queue and its supporting logic down there.  --piggy]&n;&t; */
DECL|member|addip_chunks
r_struct
id|sk_buff_head
id|addip_chunks
suffix:semicolon
multiline_comment|/* ADDIP Section 4.1 ASCONF Chunk Procedures&n;&t; *&n;&t; * A2) A serial number should be assigned to the Chunk. The&n;&t; * serial number should be a monotonically increasing&n;&t; * number. All serial numbers are defined to be initialized at&n;&t; * the start of the association to the same value as the&n;&t; * Initial TSN.&n;&t; *&n;&t; * [and]&n;&t; *&n;&t; * ADDIP&n;&t; * 3.1.1  Address/Stream Configuration Change Chunk (ASCONF)&n;&t; *&n;&t; * Serial Number : 32 bits (unsigned integer)&n;&t; *&n;&t; * This value represents a Serial Number for the ASCONF&n;&t; * Chunk. The valid range of Serial Number is from 0 to&n;&t; * 4294967295 (2**32 - 1).  Serial Numbers wrap back to 0&n;&t; * after reaching 4294967295.&n;&t; */
DECL|member|addip_serial
id|__u32
id|addip_serial
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* An eyecatcher for determining if we are really looking at an&n; * association data structure.&n; */
r_enum
(brace
DECL|enumerator|SCTP_ASSOC_EYECATCHER
id|SCTP_ASSOC_EYECATCHER
op_assign
l_int|0xa550c123
comma
)brace
suffix:semicolon
multiline_comment|/* Recover the outter association structure. */
DECL|function|sctp_assoc
r_static
r_inline
id|sctp_association_t
op_star
id|sctp_assoc
c_func
(paren
id|sctp_endpoint_common_t
op_star
id|base
)paren
(brace
id|sctp_association_t
op_star
id|asoc
suffix:semicolon
multiline_comment|/* We are not really a list, but the list_entry() macro is&n;&t; * really quite generic find the address of an outter struct.&n;&t; */
id|asoc
op_assign
id|list_entry
c_func
(paren
id|base
comma
id|sctp_association_t
comma
id|base
)paren
suffix:semicolon
r_return
id|asoc
suffix:semicolon
)brace
multiline_comment|/* These are function signatures for manipulating associations.  */
id|sctp_association_t
op_star
id|sctp_association_new
c_func
(paren
r_const
id|sctp_endpoint_t
op_star
comma
r_const
r_struct
id|sock
op_star
comma
id|sctp_scope_t
id|scope
comma
r_int
id|priority
)paren
suffix:semicolon
id|sctp_association_t
op_star
id|sctp_association_init
c_func
(paren
id|sctp_association_t
op_star
comma
r_const
id|sctp_endpoint_t
op_star
comma
r_const
r_struct
id|sock
op_star
comma
id|sctp_scope_t
id|scope
comma
r_int
id|priority
)paren
suffix:semicolon
r_void
id|sctp_association_free
c_func
(paren
id|sctp_association_t
op_star
)paren
suffix:semicolon
r_void
id|sctp_association_put
c_func
(paren
id|sctp_association_t
op_star
)paren
suffix:semicolon
r_void
id|sctp_association_hold
c_func
(paren
id|sctp_association_t
op_star
)paren
suffix:semicolon
id|sctp_transport_t
op_star
id|sctp_assoc_choose_shutdown_transport
c_func
(paren
id|sctp_association_t
op_star
)paren
suffix:semicolon
id|sctp_transport_t
op_star
id|sctp_assoc_lookup_paddr
c_func
(paren
r_const
id|sctp_association_t
op_star
comma
r_const
id|sockaddr_storage_t
op_star
)paren
suffix:semicolon
id|sctp_transport_t
op_star
id|sctp_assoc_add_peer
c_func
(paren
id|sctp_association_t
op_star
comma
r_const
id|sockaddr_storage_t
op_star
id|address
comma
r_const
r_int
id|priority
)paren
suffix:semicolon
r_void
id|sctp_assoc_control_transport
c_func
(paren
id|sctp_association_t
op_star
comma
id|sctp_transport_t
op_star
comma
id|sctp_transport_cmd_t
comma
id|sctp_sn_error_t
)paren
suffix:semicolon
id|sctp_transport_t
op_star
id|sctp_assoc_lookup_tsn
c_func
(paren
id|sctp_association_t
op_star
comma
id|__u32
)paren
suffix:semicolon
id|sctp_transport_t
op_star
id|sctp_assoc_is_match
c_func
(paren
id|sctp_association_t
op_star
comma
r_const
id|sockaddr_storage_t
op_star
comma
r_const
id|sockaddr_storage_t
op_star
)paren
suffix:semicolon
r_void
id|sctp_assoc_migrate
c_func
(paren
id|sctp_association_t
op_star
comma
r_struct
id|sock
op_star
)paren
suffix:semicolon
r_void
id|sctp_assoc_update
c_func
(paren
id|sctp_association_t
op_star
id|dst
comma
id|sctp_association_t
op_star
id|src
)paren
suffix:semicolon
id|__u32
id|__sctp_association_get_next_tsn
c_func
(paren
id|sctp_association_t
op_star
)paren
suffix:semicolon
id|__u32
id|__sctp_association_get_tsn_block
c_func
(paren
id|sctp_association_t
op_star
comma
r_int
)paren
suffix:semicolon
id|__u16
id|__sctp_association_get_next_ssn
c_func
(paren
id|sctp_association_t
op_star
comma
id|__u16
id|sid
)paren
suffix:semicolon
r_int
id|sctp_cmp_addr
c_func
(paren
r_const
id|sockaddr_storage_t
op_star
id|ss1
comma
r_const
id|sockaddr_storage_t
op_star
id|ss2
)paren
suffix:semicolon
r_int
id|sctp_cmp_addr_exact
c_func
(paren
r_const
id|sockaddr_storage_t
op_star
id|ss1
comma
r_const
id|sockaddr_storage_t
op_star
id|ss2
)paren
suffix:semicolon
id|sctp_chunk_t
op_star
id|sctp_get_ecne_prepend
c_func
(paren
id|sctp_association_t
op_star
id|asoc
)paren
suffix:semicolon
id|sctp_chunk_t
op_star
id|sctp_get_no_prepend
c_func
(paren
id|sctp_association_t
op_star
id|asoc
)paren
suffix:semicolon
multiline_comment|/* A convenience structure to parse out SCTP specific CMSGs. */
DECL|struct|sctp_cmsgs
r_typedef
r_struct
id|sctp_cmsgs
(brace
DECL|member|init
r_struct
id|sctp_initmsg
op_star
id|init
suffix:semicolon
DECL|member|info
r_struct
id|sctp_sndrcvinfo
op_star
id|info
suffix:semicolon
DECL|typedef|sctp_cmsgs_t
)brace
id|sctp_cmsgs_t
suffix:semicolon
multiline_comment|/* Structure for tracking memory objects */
r_typedef
r_struct
(brace
DECL|member|label
r_char
op_star
id|label
suffix:semicolon
DECL|member|counter
id|atomic_t
op_star
id|counter
suffix:semicolon
DECL|typedef|sctp_dbg_objcnt_entry_t
)brace
id|sctp_dbg_objcnt_entry_t
suffix:semicolon
macro_line|#endif /* __sctp_structs_h__ */
eof
