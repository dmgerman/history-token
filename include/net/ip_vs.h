multiline_comment|/*&n; *      IP Virtual Server&n; *      data structure and functionality definitions&n; */
macro_line|#ifndef _IP_VS_H
DECL|macro|_IP_VS_H
mdefine_line|#define _IP_VS_H
macro_line|#include &lt;asm/types.h&gt;&t;&t;/* For __uXX types */
DECL|macro|IP_VS_VERSION_CODE
mdefine_line|#define IP_VS_VERSION_CODE&t;0x010107
DECL|macro|NVERSION
mdefine_line|#define NVERSION(version)&t;&t;&t;&bslash;&n;&t;(version &gt;&gt; 16) &amp; 0xFF,&t;&t;&t;&bslash;&n;&t;(version &gt;&gt; 8) &amp; 0xFF,&t;&t;&t;&bslash;&n;&t;version &amp; 0xFF
multiline_comment|/*&n; *      Virtual Service Flags&n; */
DECL|macro|IP_VS_SVC_F_PERSISTENT
mdefine_line|#define IP_VS_SVC_F_PERSISTENT&t;0x0001&t;&t;/* persistent port */
DECL|macro|IP_VS_SVC_F_HASHED
mdefine_line|#define IP_VS_SVC_F_HASHED&t;0x0002&t;&t;/* hashed entry */
multiline_comment|/*&n; *      Destination Server Flags&n; */
DECL|macro|IP_VS_DEST_F_AVAILABLE
mdefine_line|#define IP_VS_DEST_F_AVAILABLE&t;0x0001&t;&t;/* server is available */
DECL|macro|IP_VS_DEST_F_OVERLOAD
mdefine_line|#define IP_VS_DEST_F_OVERLOAD&t;0x0002&t;&t;/* server is overloaded */
multiline_comment|/*&n; *      IPVS sync daemon states&n; */
DECL|macro|IP_VS_STATE_NONE
mdefine_line|#define IP_VS_STATE_NONE&t;0x0000&t;&t;/* daemon is stopped */
DECL|macro|IP_VS_STATE_MASTER
mdefine_line|#define IP_VS_STATE_MASTER&t;0x0001&t;&t;/* started as master */
DECL|macro|IP_VS_STATE_BACKUP
mdefine_line|#define IP_VS_STATE_BACKUP&t;0x0002&t;&t;/* started as backup */
multiline_comment|/*&n; *      IPVS socket options&n; */
DECL|macro|IP_VS_BASE_CTL
mdefine_line|#define IP_VS_BASE_CTL&t;&t;(64+1024+64)&t;&t;/* base */
DECL|macro|IP_VS_SO_SET_NONE
mdefine_line|#define IP_VS_SO_SET_NONE&t;IP_VS_BASE_CTL&t;&t;/* just peek */
DECL|macro|IP_VS_SO_SET_INSERT
mdefine_line|#define IP_VS_SO_SET_INSERT&t;(IP_VS_BASE_CTL+1)
DECL|macro|IP_VS_SO_SET_ADD
mdefine_line|#define IP_VS_SO_SET_ADD&t;(IP_VS_BASE_CTL+2)
DECL|macro|IP_VS_SO_SET_EDIT
mdefine_line|#define IP_VS_SO_SET_EDIT&t;(IP_VS_BASE_CTL+3)
DECL|macro|IP_VS_SO_SET_DEL
mdefine_line|#define IP_VS_SO_SET_DEL&t;(IP_VS_BASE_CTL+4)
DECL|macro|IP_VS_SO_SET_FLUSH
mdefine_line|#define IP_VS_SO_SET_FLUSH&t;(IP_VS_BASE_CTL+5)
DECL|macro|IP_VS_SO_SET_LIST
mdefine_line|#define IP_VS_SO_SET_LIST&t;(IP_VS_BASE_CTL+6)
DECL|macro|IP_VS_SO_SET_ADDDEST
mdefine_line|#define IP_VS_SO_SET_ADDDEST&t;(IP_VS_BASE_CTL+7)
DECL|macro|IP_VS_SO_SET_DELDEST
mdefine_line|#define IP_VS_SO_SET_DELDEST&t;(IP_VS_BASE_CTL+8)
DECL|macro|IP_VS_SO_SET_EDITDEST
mdefine_line|#define IP_VS_SO_SET_EDITDEST&t;(IP_VS_BASE_CTL+9)
DECL|macro|IP_VS_SO_SET_TIMEOUT
mdefine_line|#define IP_VS_SO_SET_TIMEOUT&t;(IP_VS_BASE_CTL+10)
DECL|macro|IP_VS_SO_SET_STARTDAEMON
mdefine_line|#define IP_VS_SO_SET_STARTDAEMON (IP_VS_BASE_CTL+11)
DECL|macro|IP_VS_SO_SET_STOPDAEMON
mdefine_line|#define IP_VS_SO_SET_STOPDAEMON (IP_VS_BASE_CTL+12)
DECL|macro|IP_VS_SO_SET_RESTORE
mdefine_line|#define IP_VS_SO_SET_RESTORE    (IP_VS_BASE_CTL+13)
DECL|macro|IP_VS_SO_SET_SAVE
mdefine_line|#define IP_VS_SO_SET_SAVE       (IP_VS_BASE_CTL+14)
DECL|macro|IP_VS_SO_SET_ZERO
mdefine_line|#define IP_VS_SO_SET_ZERO&t;(IP_VS_BASE_CTL+15)
DECL|macro|IP_VS_SO_SET_MAX
mdefine_line|#define IP_VS_SO_SET_MAX&t;IP_VS_SO_SET_ZERO
DECL|macro|IP_VS_SO_GET_VERSION
mdefine_line|#define IP_VS_SO_GET_VERSION&t;IP_VS_BASE_CTL
DECL|macro|IP_VS_SO_GET_INFO
mdefine_line|#define IP_VS_SO_GET_INFO&t;(IP_VS_BASE_CTL+1)
DECL|macro|IP_VS_SO_GET_SERVICES
mdefine_line|#define IP_VS_SO_GET_SERVICES&t;(IP_VS_BASE_CTL+2)
DECL|macro|IP_VS_SO_GET_SERVICE
mdefine_line|#define IP_VS_SO_GET_SERVICE&t;(IP_VS_BASE_CTL+3)
DECL|macro|IP_VS_SO_GET_DESTS
mdefine_line|#define IP_VS_SO_GET_DESTS&t;(IP_VS_BASE_CTL+4)
DECL|macro|IP_VS_SO_GET_DEST
mdefine_line|#define IP_VS_SO_GET_DEST&t;(IP_VS_BASE_CTL+5)&t;/* not used now */
DECL|macro|IP_VS_SO_GET_TIMEOUT
mdefine_line|#define IP_VS_SO_GET_TIMEOUT&t;(IP_VS_BASE_CTL+6)
DECL|macro|IP_VS_SO_GET_DAEMON
mdefine_line|#define IP_VS_SO_GET_DAEMON&t;(IP_VS_BASE_CTL+7)
DECL|macro|IP_VS_SO_GET_MAX
mdefine_line|#define IP_VS_SO_GET_MAX&t;IP_VS_SO_GET_DAEMON
multiline_comment|/*&n; *      IPVS Connection Flags&n; */
DECL|macro|IP_VS_CONN_F_FWD_MASK
mdefine_line|#define IP_VS_CONN_F_FWD_MASK&t;0x0007&t;&t;/* mask for the fwd methods */
DECL|macro|IP_VS_CONN_F_MASQ
mdefine_line|#define IP_VS_CONN_F_MASQ&t;0x0000&t;&t;/* masquerading/NAT */
DECL|macro|IP_VS_CONN_F_LOCALNODE
mdefine_line|#define IP_VS_CONN_F_LOCALNODE&t;0x0001&t;&t;/* local node */
DECL|macro|IP_VS_CONN_F_TUNNEL
mdefine_line|#define IP_VS_CONN_F_TUNNEL&t;0x0002&t;&t;/* tunneling */
DECL|macro|IP_VS_CONN_F_DROUTE
mdefine_line|#define IP_VS_CONN_F_DROUTE&t;0x0003&t;&t;/* direct routing */
DECL|macro|IP_VS_CONN_F_BYPASS
mdefine_line|#define IP_VS_CONN_F_BYPASS&t;0x0004&t;&t;/* cache bypass */
DECL|macro|IP_VS_CONN_F_SYNC
mdefine_line|#define IP_VS_CONN_F_SYNC&t;0x0020&t;&t;/* entry created by sync */
DECL|macro|IP_VS_CONN_F_HASHED
mdefine_line|#define IP_VS_CONN_F_HASHED&t;0x0040&t;&t;/* hashed entry */
DECL|macro|IP_VS_CONN_F_NOOUTPUT
mdefine_line|#define IP_VS_CONN_F_NOOUTPUT&t;0x0080&t;&t;/* no output packets */
DECL|macro|IP_VS_CONN_F_INACTIVE
mdefine_line|#define IP_VS_CONN_F_INACTIVE&t;0x0100&t;&t;/* not established */
DECL|macro|IP_VS_CONN_F_OUT_SEQ
mdefine_line|#define IP_VS_CONN_F_OUT_SEQ&t;0x0200&t;&t;/* must do output seq adjust */
DECL|macro|IP_VS_CONN_F_IN_SEQ
mdefine_line|#define IP_VS_CONN_F_IN_SEQ&t;0x0400&t;&t;/* must do input seq adjust */
DECL|macro|IP_VS_CONN_F_SEQ_MASK
mdefine_line|#define IP_VS_CONN_F_SEQ_MASK&t;0x0600&t;&t;/* in/out sequence mask */
DECL|macro|IP_VS_CONN_F_NO_CPORT
mdefine_line|#define IP_VS_CONN_F_NO_CPORT&t;0x0800&t;&t;/* no client port set yet */
multiline_comment|/* Move it to better place one day, for now keep it unique */
DECL|macro|NFC_IPVS_PROPERTY
mdefine_line|#define NFC_IPVS_PROPERTY&t;0x10000
DECL|macro|IP_VS_SCHEDNAME_MAXLEN
mdefine_line|#define IP_VS_SCHEDNAME_MAXLEN&t;16
DECL|macro|IP_VS_IFNAME_MAXLEN
mdefine_line|#define IP_VS_IFNAME_MAXLEN&t;16
multiline_comment|/*&n; *&t;The struct ip_vs_service_user and struct ip_vs_dest_user are&n; *&t;used to set IPVS rules through setsockopt.&n; */
DECL|struct|ip_vs_service_user
r_struct
id|ip_vs_service_user
(brace
multiline_comment|/* virtual service addresses */
DECL|member|protocol
id|u_int16_t
id|protocol
suffix:semicolon
DECL|member|addr
id|u_int32_t
id|addr
suffix:semicolon
multiline_comment|/* virtual ip address */
DECL|member|port
id|u_int16_t
id|port
suffix:semicolon
DECL|member|fwmark
id|u_int32_t
id|fwmark
suffix:semicolon
multiline_comment|/* firwall mark of service */
multiline_comment|/* virtual service options */
DECL|member|sched_name
r_char
id|sched_name
(braket
id|IP_VS_SCHEDNAME_MAXLEN
)braket
suffix:semicolon
DECL|member|flags
r_int
id|flags
suffix:semicolon
multiline_comment|/* virtual service flags */
DECL|member|timeout
r_int
id|timeout
suffix:semicolon
multiline_comment|/* persistent timeout in sec */
DECL|member|netmask
id|u_int32_t
id|netmask
suffix:semicolon
multiline_comment|/* persistent netmask */
)brace
suffix:semicolon
DECL|struct|ip_vs_dest_user
r_struct
id|ip_vs_dest_user
(brace
multiline_comment|/* destination server address */
DECL|member|addr
id|u_int32_t
id|addr
suffix:semicolon
DECL|member|port
id|u_int16_t
id|port
suffix:semicolon
multiline_comment|/* real server options */
DECL|member|conn_flags
r_int
id|conn_flags
suffix:semicolon
multiline_comment|/* connection flags */
DECL|member|weight
r_int
id|weight
suffix:semicolon
multiline_comment|/* destination weight */
multiline_comment|/* thresholds for active connections */
DECL|member|u_threshold
id|u_int32_t
id|u_threshold
suffix:semicolon
multiline_comment|/* upper threshold */
DECL|member|l_threshold
id|u_int32_t
id|l_threshold
suffix:semicolon
multiline_comment|/* lower threshold */
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;IPVS statistics object (for user space)&n; */
DECL|struct|ip_vs_stats_user
r_struct
id|ip_vs_stats_user
(brace
DECL|member|conns
id|__u32
id|conns
suffix:semicolon
multiline_comment|/* connections scheduled */
DECL|member|inpkts
id|__u32
id|inpkts
suffix:semicolon
multiline_comment|/* incoming packets */
DECL|member|outpkts
id|__u32
id|outpkts
suffix:semicolon
multiline_comment|/* outgoing packets */
DECL|member|inbytes
id|__u64
id|inbytes
suffix:semicolon
multiline_comment|/* incoming bytes */
DECL|member|outbytes
id|__u64
id|outbytes
suffix:semicolon
multiline_comment|/* outgoing bytes */
DECL|member|cps
id|__u32
id|cps
suffix:semicolon
multiline_comment|/* current connection rate */
DECL|member|inpps
id|__u32
id|inpps
suffix:semicolon
multiline_comment|/* current in packet rate */
DECL|member|outpps
id|__u32
id|outpps
suffix:semicolon
multiline_comment|/* current out packet rate */
DECL|member|inbps
id|__u32
id|inbps
suffix:semicolon
multiline_comment|/* current in byte rate */
DECL|member|outbps
id|__u32
id|outbps
suffix:semicolon
multiline_comment|/* current out byte rate */
)brace
suffix:semicolon
multiline_comment|/* The argument to IP_VS_SO_GET_INFO */
DECL|struct|ip_vs_getinfo
r_struct
id|ip_vs_getinfo
(brace
multiline_comment|/* version number */
DECL|member|version
r_int
r_int
id|version
suffix:semicolon
multiline_comment|/* size of connection hash table */
DECL|member|size
r_int
r_int
id|size
suffix:semicolon
multiline_comment|/* number of virtual services */
DECL|member|num_services
r_int
r_int
id|num_services
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* The argument to IP_VS_SO_GET_SERVICE */
DECL|struct|ip_vs_service_entry
r_struct
id|ip_vs_service_entry
(brace
multiline_comment|/* which service: user fills in these */
DECL|member|protocol
id|u_int16_t
id|protocol
suffix:semicolon
DECL|member|addr
id|u_int32_t
id|addr
suffix:semicolon
multiline_comment|/* virtual address */
DECL|member|port
id|u_int16_t
id|port
suffix:semicolon
DECL|member|fwmark
id|u_int32_t
id|fwmark
suffix:semicolon
multiline_comment|/* firwall mark of service */
multiline_comment|/* service options */
DECL|member|sched_name
r_char
id|sched_name
(braket
id|IP_VS_SCHEDNAME_MAXLEN
)braket
suffix:semicolon
DECL|member|flags
r_int
id|flags
suffix:semicolon
multiline_comment|/* virtual service flags */
DECL|member|timeout
r_int
id|timeout
suffix:semicolon
multiline_comment|/* persistent timeout */
DECL|member|netmask
id|u_int32_t
id|netmask
suffix:semicolon
multiline_comment|/* persistent netmask */
multiline_comment|/* number of real servers */
DECL|member|num_dests
r_int
r_int
id|num_dests
suffix:semicolon
multiline_comment|/* statistics */
DECL|member|stats
r_struct
id|ip_vs_stats_user
id|stats
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ip_vs_dest_entry
r_struct
id|ip_vs_dest_entry
(brace
DECL|member|addr
id|u_int32_t
id|addr
suffix:semicolon
multiline_comment|/* destination address */
DECL|member|port
id|u_int16_t
id|port
suffix:semicolon
DECL|member|conn_flags
r_int
id|conn_flags
suffix:semicolon
multiline_comment|/* connection flags */
DECL|member|weight
r_int
id|weight
suffix:semicolon
multiline_comment|/* destination weight */
DECL|member|u_threshold
id|u_int32_t
id|u_threshold
suffix:semicolon
multiline_comment|/* upper threshold */
DECL|member|l_threshold
id|u_int32_t
id|l_threshold
suffix:semicolon
multiline_comment|/* lower threshold */
DECL|member|activeconns
id|u_int32_t
id|activeconns
suffix:semicolon
multiline_comment|/* active connections */
DECL|member|inactconns
id|u_int32_t
id|inactconns
suffix:semicolon
multiline_comment|/* inactive connections */
DECL|member|persistconns
id|u_int32_t
id|persistconns
suffix:semicolon
multiline_comment|/* persistent connections */
multiline_comment|/* statistics */
DECL|member|stats
r_struct
id|ip_vs_stats_user
id|stats
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* The argument to IP_VS_SO_GET_DESTS */
DECL|struct|ip_vs_get_dests
r_struct
id|ip_vs_get_dests
(brace
multiline_comment|/* which service: user fills in these */
DECL|member|protocol
id|u_int16_t
id|protocol
suffix:semicolon
DECL|member|addr
id|u_int32_t
id|addr
suffix:semicolon
multiline_comment|/* virtual address */
DECL|member|port
id|u_int16_t
id|port
suffix:semicolon
DECL|member|fwmark
id|u_int32_t
id|fwmark
suffix:semicolon
multiline_comment|/* firwall mark of service */
multiline_comment|/* number of real servers */
DECL|member|num_dests
r_int
r_int
id|num_dests
suffix:semicolon
multiline_comment|/* the real servers */
DECL|member|entrytable
r_struct
id|ip_vs_dest_entry
id|entrytable
(braket
l_int|0
)braket
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* The argument to IP_VS_SO_GET_SERVICES */
DECL|struct|ip_vs_get_services
r_struct
id|ip_vs_get_services
(brace
multiline_comment|/* number of virtual services */
DECL|member|num_services
r_int
r_int
id|num_services
suffix:semicolon
multiline_comment|/* service table */
DECL|member|entrytable
r_struct
id|ip_vs_service_entry
id|entrytable
(braket
l_int|0
)braket
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* The argument to IP_VS_SO_GET_TIMEOUT */
DECL|struct|ip_vs_timeout_user
r_struct
id|ip_vs_timeout_user
(brace
DECL|member|tcp_timeout
r_int
id|tcp_timeout
suffix:semicolon
DECL|member|tcp_fin_timeout
r_int
id|tcp_fin_timeout
suffix:semicolon
DECL|member|udp_timeout
r_int
id|udp_timeout
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* The argument to IP_VS_SO_GET_DAEMON */
DECL|struct|ip_vs_daemon_user
r_struct
id|ip_vs_daemon_user
(brace
multiline_comment|/* sync daemon state (master/backup) */
DECL|member|state
r_int
id|state
suffix:semicolon
multiline_comment|/* multicast interface name */
DECL|member|mcast_ifn
r_char
id|mcast_ifn
(braket
id|IP_VS_IFNAME_MAXLEN
)braket
suffix:semicolon
multiline_comment|/* SyncID we belong to */
DECL|member|syncid
r_int
id|syncid
suffix:semicolon
)brace
suffix:semicolon
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/list.h&gt;                 /* for struct list_head */
macro_line|#include &lt;linux/spinlock.h&gt;             /* for struct rwlock_t */
macro_line|#include &lt;linux/skbuff.h&gt;               /* for struct sk_buff */
macro_line|#include &lt;linux/ip.h&gt;                   /* for struct iphdr */
macro_line|#include &lt;asm/atomic.h&gt;                 /* for struct atomic_t */
macro_line|#include &lt;linux/netdevice.h&gt;&t;&t;/* for struct neighbour */
macro_line|#include &lt;net/dst.h&gt;&t;&t;&t;/* for struct dst_entry */
macro_line|#include &lt;net/tcp.h&gt;
macro_line|#include &lt;net/udp.h&gt;
macro_line|#include &lt;linux/compiler.h&gt;
macro_line|#ifdef CONFIG_IP_VS_DEBUG
r_extern
r_int
id|ip_vs_get_debug_level
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|macro|IP_VS_DBG
mdefine_line|#define IP_VS_DBG(level, msg...)&t;&t;&t;&bslash;&n;    do {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    if (level &lt;= ip_vs_get_debug_level())&t;&bslash;&n;&t;&t;    printk(KERN_DEBUG &quot;IPVS: &quot; msg);&t;&bslash;&n;    } while (0)
DECL|macro|IP_VS_DBG_RL
mdefine_line|#define IP_VS_DBG_RL(msg...)&t;&t;&t;&t;&bslash;&n;    do {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    if (net_ratelimit())&t;&t;&t;&bslash;&n;&t;&t;    printk(KERN_DEBUG &quot;IPVS: &quot; msg);&t;&bslash;&n;    } while (0)
DECL|macro|IP_VS_DBG_PKT
mdefine_line|#define IP_VS_DBG_PKT(level, pp, iph, msg)&t;&t;&bslash;&n;    do {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    if (level &lt;= ip_vs_get_debug_level())&t;&bslash;&n;&t;&t;pp-&gt;debug_packet(pp, iph, msg);&t;&t;&bslash;&n;    } while (0)
DECL|macro|IP_VS_DBG_RL_PKT
mdefine_line|#define IP_VS_DBG_RL_PKT(level, pp, iph, msg)&t;&t;&bslash;&n;    do {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    if (level &lt;= ip_vs_get_debug_level() &amp;&amp;&t;&bslash;&n;&t;&t;net_ratelimit())&t;&t;&t;&bslash;&n;&t;&t;pp-&gt;debug_packet(pp, iph, msg);&t;&t;&bslash;&n;    } while (0)
macro_line|#else&t;/* NO DEBUGGING at ALL */
DECL|macro|IP_VS_DBG
mdefine_line|#define IP_VS_DBG(level, msg...)  do {} while (0)
DECL|macro|IP_VS_DBG_RL
mdefine_line|#define IP_VS_DBG_RL(msg...)  do {} while (0)
DECL|macro|IP_VS_DBG_PKT
mdefine_line|#define IP_VS_DBG_PKT(level, pp, iph, msg)&t;do {} while (0)
DECL|macro|IP_VS_DBG_RL_PKT
mdefine_line|#define IP_VS_DBG_RL_PKT(level, pp, iph, msg)&t;do {} while (0)
macro_line|#endif
DECL|macro|IP_VS_BUG
mdefine_line|#define IP_VS_BUG() BUG()
DECL|macro|IP_VS_ERR
mdefine_line|#define IP_VS_ERR(msg...) printk(KERN_ERR &quot;IPVS: &quot; msg)
DECL|macro|IP_VS_INFO
mdefine_line|#define IP_VS_INFO(msg...) printk(KERN_INFO &quot;IPVS: &quot; msg)
DECL|macro|IP_VS_WARNING
mdefine_line|#define IP_VS_WARNING(msg...) &bslash;&n;&t;printk(KERN_WARNING &quot;IPVS: &quot; msg)
DECL|macro|IP_VS_ERR_RL
mdefine_line|#define IP_VS_ERR_RL(msg...)&t;&t;&t;&t;&bslash;&n;    do {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    if (net_ratelimit())&t;&t;&t;&bslash;&n;&t;&t;    printk(KERN_ERR &quot;IPVS: &quot; msg);&t;&bslash;&n;    } while (0)
macro_line|#ifdef CONFIG_IP_VS_DEBUG
DECL|macro|EnterFunction
mdefine_line|#define EnterFunction(level)&t;&t;&t;&t;&t;&t;&bslash;&n;    do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    if (level &lt;= ip_vs_get_debug_level())&t;&t;&t;&bslash;&n;&t;&t;    printk(KERN_DEBUG &quot;Enter: %s, %s line %i&bslash;n&quot;,&t;&bslash;&n;&t;&t;&t;   __FUNCTION__, __FILE__, __LINE__);&t;&t;&bslash;&n;    } while (0)
DECL|macro|LeaveFunction
mdefine_line|#define LeaveFunction(level)                                            &bslash;&n;    do {                                                                &bslash;&n;&t;    if (level &lt;= ip_vs_get_debug_level())                       &bslash;&n;&t;&t;&t;printk(KERN_DEBUG &quot;Leave: %s, %s line %i&bslash;n&quot;,    &bslash;&n;&t;&t;&t;       __FUNCTION__, __FILE__, __LINE__);       &bslash;&n;    } while (0)
macro_line|#else
DECL|macro|EnterFunction
mdefine_line|#define EnterFunction(level)   do {} while (0)
DECL|macro|LeaveFunction
mdefine_line|#define LeaveFunction(level)   do {} while (0)
macro_line|#endif
DECL|macro|IP_VS_WAIT_WHILE
mdefine_line|#define&t;IP_VS_WAIT_WHILE(expr)&t;while (expr) { cpu_relax(); }
multiline_comment|/*&n; *      The port number of FTP service (in network order).&n; */
DECL|macro|FTPPORT
mdefine_line|#define FTPPORT  __constant_htons(21)
DECL|macro|FTPDATA
mdefine_line|#define FTPDATA  __constant_htons(20)
multiline_comment|/*&n; *      IPVS sysctl variables under the /proc/sys/net/ipv4/vs/&n; */
DECL|macro|NET_IPV4_VS
mdefine_line|#define NET_IPV4_VS              21
r_enum
(brace
DECL|enumerator|NET_IPV4_VS_DEBUG_LEVEL
id|NET_IPV4_VS_DEBUG_LEVEL
op_assign
l_int|1
comma
DECL|enumerator|NET_IPV4_VS_AMEMTHRESH
id|NET_IPV4_VS_AMEMTHRESH
op_assign
l_int|2
comma
DECL|enumerator|NET_IPV4_VS_AMDROPRATE
id|NET_IPV4_VS_AMDROPRATE
op_assign
l_int|3
comma
DECL|enumerator|NET_IPV4_VS_DROP_ENTRY
id|NET_IPV4_VS_DROP_ENTRY
op_assign
l_int|4
comma
DECL|enumerator|NET_IPV4_VS_DROP_PACKET
id|NET_IPV4_VS_DROP_PACKET
op_assign
l_int|5
comma
DECL|enumerator|NET_IPV4_VS_SECURE_TCP
id|NET_IPV4_VS_SECURE_TCP
op_assign
l_int|6
comma
DECL|enumerator|NET_IPV4_VS_TO_ES
id|NET_IPV4_VS_TO_ES
op_assign
l_int|7
comma
DECL|enumerator|NET_IPV4_VS_TO_SS
id|NET_IPV4_VS_TO_SS
op_assign
l_int|8
comma
DECL|enumerator|NET_IPV4_VS_TO_SR
id|NET_IPV4_VS_TO_SR
op_assign
l_int|9
comma
DECL|enumerator|NET_IPV4_VS_TO_FW
id|NET_IPV4_VS_TO_FW
op_assign
l_int|10
comma
DECL|enumerator|NET_IPV4_VS_TO_TW
id|NET_IPV4_VS_TO_TW
op_assign
l_int|11
comma
DECL|enumerator|NET_IPV4_VS_TO_CL
id|NET_IPV4_VS_TO_CL
op_assign
l_int|12
comma
DECL|enumerator|NET_IPV4_VS_TO_CW
id|NET_IPV4_VS_TO_CW
op_assign
l_int|13
comma
DECL|enumerator|NET_IPV4_VS_TO_LA
id|NET_IPV4_VS_TO_LA
op_assign
l_int|14
comma
DECL|enumerator|NET_IPV4_VS_TO_LI
id|NET_IPV4_VS_TO_LI
op_assign
l_int|15
comma
DECL|enumerator|NET_IPV4_VS_TO_SA
id|NET_IPV4_VS_TO_SA
op_assign
l_int|16
comma
DECL|enumerator|NET_IPV4_VS_TO_UDP
id|NET_IPV4_VS_TO_UDP
op_assign
l_int|17
comma
DECL|enumerator|NET_IPV4_VS_TO_ICMP
id|NET_IPV4_VS_TO_ICMP
op_assign
l_int|18
comma
DECL|enumerator|NET_IPV4_VS_LBLC_EXPIRE
id|NET_IPV4_VS_LBLC_EXPIRE
op_assign
l_int|19
comma
DECL|enumerator|NET_IPV4_VS_LBLCR_EXPIRE
id|NET_IPV4_VS_LBLCR_EXPIRE
op_assign
l_int|20
comma
DECL|enumerator|NET_IPV4_VS_CACHE_BYPASS
id|NET_IPV4_VS_CACHE_BYPASS
op_assign
l_int|22
comma
DECL|enumerator|NET_IPV4_VS_EXPIRE_NODEST_CONN
id|NET_IPV4_VS_EXPIRE_NODEST_CONN
op_assign
l_int|23
comma
DECL|enumerator|NET_IPV4_VS_SYNC_THRESHOLD
id|NET_IPV4_VS_SYNC_THRESHOLD
op_assign
l_int|24
comma
DECL|enumerator|NET_IPV4_VS_NAT_ICMP_SEND
id|NET_IPV4_VS_NAT_ICMP_SEND
op_assign
l_int|25
comma
DECL|enumerator|NET_IPV4_VS_LAST
id|NET_IPV4_VS_LAST
)brace
suffix:semicolon
multiline_comment|/*&n; *      TCP State Values&n; */
r_enum
(brace
DECL|enumerator|IP_VS_TCP_S_NONE
id|IP_VS_TCP_S_NONE
op_assign
l_int|0
comma
DECL|enumerator|IP_VS_TCP_S_ESTABLISHED
id|IP_VS_TCP_S_ESTABLISHED
comma
DECL|enumerator|IP_VS_TCP_S_SYN_SENT
id|IP_VS_TCP_S_SYN_SENT
comma
DECL|enumerator|IP_VS_TCP_S_SYN_RECV
id|IP_VS_TCP_S_SYN_RECV
comma
DECL|enumerator|IP_VS_TCP_S_FIN_WAIT
id|IP_VS_TCP_S_FIN_WAIT
comma
DECL|enumerator|IP_VS_TCP_S_TIME_WAIT
id|IP_VS_TCP_S_TIME_WAIT
comma
DECL|enumerator|IP_VS_TCP_S_CLOSE
id|IP_VS_TCP_S_CLOSE
comma
DECL|enumerator|IP_VS_TCP_S_CLOSE_WAIT
id|IP_VS_TCP_S_CLOSE_WAIT
comma
DECL|enumerator|IP_VS_TCP_S_LAST_ACK
id|IP_VS_TCP_S_LAST_ACK
comma
DECL|enumerator|IP_VS_TCP_S_LISTEN
id|IP_VS_TCP_S_LISTEN
comma
DECL|enumerator|IP_VS_TCP_S_SYNACK
id|IP_VS_TCP_S_SYNACK
comma
DECL|enumerator|IP_VS_TCP_S_LAST
id|IP_VS_TCP_S_LAST
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;UDP State Values&n; */
r_enum
(brace
DECL|enumerator|IP_VS_UDP_S_NORMAL
id|IP_VS_UDP_S_NORMAL
comma
DECL|enumerator|IP_VS_UDP_S_LAST
id|IP_VS_UDP_S_LAST
comma
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;ICMP State Values&n; */
r_enum
(brace
DECL|enumerator|IP_VS_ICMP_S_NORMAL
id|IP_VS_ICMP_S_NORMAL
comma
DECL|enumerator|IP_VS_ICMP_S_LAST
id|IP_VS_ICMP_S_LAST
comma
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;Transport protocol header&n; */
DECL|union|ip_vs_tphdr
r_union
id|ip_vs_tphdr
(brace
DECL|member|raw
r_int
r_char
op_star
id|raw
suffix:semicolon
DECL|member|uh
r_struct
id|udphdr
op_star
id|uh
suffix:semicolon
DECL|member|th
r_struct
id|tcphdr
op_star
id|th
suffix:semicolon
DECL|member|icmph
r_struct
id|icmphdr
op_star
id|icmph
suffix:semicolon
DECL|member|portp
id|__u16
op_star
id|portp
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;Slow timer for IPVS connections&n; */
DECL|struct|sltimer_list
r_struct
id|sltimer_list
(brace
DECL|member|list
r_struct
id|list_head
id|list
suffix:semicolon
DECL|member|expires
r_int
r_int
id|expires
suffix:semicolon
DECL|member|data
r_int
r_int
id|data
suffix:semicolon
DECL|member|function
r_void
(paren
op_star
id|function
)paren
(paren
r_int
r_int
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;Delta sequence info structure&n; *&t;Each ip_vs_conn has 2 (output AND input seq. changes).&n; *      Only used in the VS/NAT.&n; */
DECL|struct|ip_vs_seq
r_struct
id|ip_vs_seq
(brace
DECL|member|init_seq
id|__u32
id|init_seq
suffix:semicolon
multiline_comment|/* Add delta from this seq */
DECL|member|delta
id|__u32
id|delta
suffix:semicolon
multiline_comment|/* Delta in sequence numbers */
DECL|member|previous_delta
id|__u32
id|previous_delta
suffix:semicolon
multiline_comment|/* Delta in sequence numbers&n;&t;&t;&t;&t;&t;&t;   before last resized pkt */
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;IPVS statistics object&n; */
DECL|struct|ip_vs_stats
r_struct
id|ip_vs_stats
(brace
DECL|member|conns
id|__u32
id|conns
suffix:semicolon
multiline_comment|/* connections scheduled */
DECL|member|inpkts
id|__u32
id|inpkts
suffix:semicolon
multiline_comment|/* incoming packets */
DECL|member|outpkts
id|__u32
id|outpkts
suffix:semicolon
multiline_comment|/* outgoing packets */
DECL|member|inbytes
id|__u64
id|inbytes
suffix:semicolon
multiline_comment|/* incoming bytes */
DECL|member|outbytes
id|__u64
id|outbytes
suffix:semicolon
multiline_comment|/* outgoing bytes */
DECL|member|cps
id|__u32
id|cps
suffix:semicolon
multiline_comment|/* current connection rate */
DECL|member|inpps
id|__u32
id|inpps
suffix:semicolon
multiline_comment|/* current in packet rate */
DECL|member|outpps
id|__u32
id|outpps
suffix:semicolon
multiline_comment|/* current out packet rate */
DECL|member|inbps
id|__u32
id|inbps
suffix:semicolon
multiline_comment|/* current in byte rate */
DECL|member|outbps
id|__u32
id|outbps
suffix:semicolon
multiline_comment|/* current out byte rate */
DECL|member|lock
id|spinlock_t
id|lock
suffix:semicolon
multiline_comment|/* spin lock */
)brace
suffix:semicolon
r_struct
id|ip_vs_conn
suffix:semicolon
r_struct
id|ip_vs_app
suffix:semicolon
DECL|macro|CONFIG_IP_VS_PROTO_UDP
mdefine_line|#define&t;CONFIG_IP_VS_PROTO_UDP
DECL|macro|CONFIG_IP_VS_PROTO_TCP
mdefine_line|#define&t;CONFIG_IP_VS_PROTO_TCP
DECL|macro|CONFIG_IP_VS_PROTO_ICMP
mdefine_line|#define&t;CONFIG_IP_VS_PROTO_ICMP
DECL|macro|CONFIG_IP_VS_PROTO_ESP
mdefine_line|#define&t;CONFIG_IP_VS_PROTO_ESP
DECL|macro|CONFIG_IP_VS_PROTO_AH
mdefine_line|#define&t;CONFIG_IP_VS_PROTO_AH
DECL|struct|ip_vs_protocol
r_struct
id|ip_vs_protocol
(brace
DECL|member|next
r_struct
id|ip_vs_protocol
op_star
id|next
suffix:semicolon
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|protocol
id|__u16
id|protocol
suffix:semicolon
DECL|member|minhlen
r_int
id|minhlen
suffix:semicolon
DECL|member|minhlen_icmp
r_int
id|minhlen_icmp
suffix:semicolon
DECL|member|dont_defrag
r_int
id|dont_defrag
suffix:semicolon
DECL|member|skip_nonexisting
r_int
id|skip_nonexisting
suffix:semicolon
DECL|member|slave
r_int
id|slave
suffix:semicolon
multiline_comment|/* if controlled by others */
DECL|member|appcnt
id|atomic_t
id|appcnt
suffix:semicolon
multiline_comment|/* counter of proto app incs */
DECL|member|timeout_table
r_int
op_star
id|timeout_table
suffix:semicolon
multiline_comment|/* protocol timeout table */
DECL|member|init
r_void
(paren
op_star
id|init
)paren
(paren
r_struct
id|ip_vs_protocol
op_star
id|pp
)paren
suffix:semicolon
DECL|member|exit
r_void
(paren
op_star
m_exit
)paren
(paren
r_struct
id|ip_vs_protocol
op_star
id|pp
)paren
suffix:semicolon
DECL|member|conn_schedule
r_int
(paren
op_star
id|conn_schedule
)paren
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_protocol
op_star
id|pp
comma
r_struct
id|iphdr
op_star
id|iph
comma
r_union
id|ip_vs_tphdr
id|h
comma
r_int
op_star
id|verdict
comma
r_struct
id|ip_vs_conn
op_star
op_star
id|cpp
)paren
suffix:semicolon
r_struct
id|ip_vs_conn
op_star
DECL|member|conn_in_get
(paren
op_star
id|conn_in_get
)paren
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_protocol
op_star
id|pp
comma
r_struct
id|iphdr
op_star
id|iph
comma
r_union
id|ip_vs_tphdr
id|h
comma
r_int
id|inverse
)paren
suffix:semicolon
r_struct
id|ip_vs_conn
op_star
DECL|member|conn_out_get
(paren
op_star
id|conn_out_get
)paren
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_protocol
op_star
id|pp
comma
r_struct
id|iphdr
op_star
id|iph
comma
r_union
id|ip_vs_tphdr
id|h
comma
r_int
id|inverse
)paren
suffix:semicolon
DECL|member|snat_handler
r_int
(paren
op_star
id|snat_handler
)paren
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_protocol
op_star
id|pp
comma
r_struct
id|ip_vs_conn
op_star
id|cp
comma
r_struct
id|iphdr
op_star
id|iph
comma
r_union
id|ip_vs_tphdr
id|h
comma
r_int
id|size
)paren
suffix:semicolon
DECL|member|dnat_handler
r_int
(paren
op_star
id|dnat_handler
)paren
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_protocol
op_star
id|pp
comma
r_struct
id|ip_vs_conn
op_star
id|cp
comma
r_struct
id|iphdr
op_star
id|iph
comma
r_union
id|ip_vs_tphdr
id|h
comma
r_int
id|size
)paren
suffix:semicolon
DECL|member|csum_check
r_int
(paren
op_star
id|csum_check
)paren
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_protocol
op_star
id|pp
comma
r_struct
id|iphdr
op_star
id|iph
comma
r_union
id|ip_vs_tphdr
id|h
comma
r_int
id|size
)paren
suffix:semicolon
DECL|member|state_name
r_const
r_char
op_star
(paren
op_star
id|state_name
)paren
(paren
r_int
id|state
)paren
suffix:semicolon
DECL|member|state_transition
r_int
(paren
op_star
id|state_transition
)paren
(paren
r_struct
id|ip_vs_conn
op_star
id|cp
comma
r_int
id|direction
comma
r_struct
id|iphdr
op_star
id|iph
comma
r_union
id|ip_vs_tphdr
id|h
comma
r_struct
id|ip_vs_protocol
op_star
id|pp
)paren
suffix:semicolon
DECL|member|register_app
r_int
(paren
op_star
id|register_app
)paren
(paren
r_struct
id|ip_vs_app
op_star
id|inc
)paren
suffix:semicolon
DECL|member|unregister_app
r_void
(paren
op_star
id|unregister_app
)paren
(paren
r_struct
id|ip_vs_app
op_star
id|inc
)paren
suffix:semicolon
DECL|member|app_conn_bind
r_int
(paren
op_star
id|app_conn_bind
)paren
(paren
r_struct
id|ip_vs_conn
op_star
id|cp
)paren
suffix:semicolon
DECL|member|debug_packet
r_void
(paren
op_star
id|debug_packet
)paren
(paren
r_struct
id|ip_vs_protocol
op_star
id|pp
comma
r_struct
id|iphdr
op_star
id|iph
comma
r_char
op_star
id|msg
)paren
suffix:semicolon
DECL|member|timeout_change
r_void
(paren
op_star
id|timeout_change
)paren
(paren
r_struct
id|ip_vs_protocol
op_star
id|pp
comma
r_int
id|flags
)paren
suffix:semicolon
DECL|member|set_state_timeout
r_int
(paren
op_star
id|set_state_timeout
)paren
(paren
r_struct
id|ip_vs_protocol
op_star
id|pp
comma
r_char
op_star
id|sname
comma
r_int
id|to
)paren
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|ip_vs_protocol
op_star
id|ip_vs_proto_get
c_func
(paren
r_int
r_int
id|proto
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;IP_VS structure allocated for each dynamically scheduled connection&n; */
DECL|struct|ip_vs_conn
r_struct
id|ip_vs_conn
(brace
DECL|member|c_list
r_struct
id|list_head
id|c_list
suffix:semicolon
multiline_comment|/* hashed list heads */
multiline_comment|/* Protocol, addresses and port numbers */
DECL|member|caddr
id|__u32
id|caddr
suffix:semicolon
multiline_comment|/* client address */
DECL|member|vaddr
id|__u32
id|vaddr
suffix:semicolon
multiline_comment|/* virtual address */
DECL|member|daddr
id|__u32
id|daddr
suffix:semicolon
multiline_comment|/* destination address */
DECL|member|cport
id|__u16
id|cport
suffix:semicolon
DECL|member|vport
id|__u16
id|vport
suffix:semicolon
DECL|member|dport
id|__u16
id|dport
suffix:semicolon
DECL|member|protocol
id|__u16
id|protocol
suffix:semicolon
multiline_comment|/* Which protocol (TCP/UDP) */
multiline_comment|/* counter and timer */
DECL|member|refcnt
id|atomic_t
id|refcnt
suffix:semicolon
multiline_comment|/* reference count */
DECL|member|timer
r_struct
id|sltimer_list
id|timer
suffix:semicolon
multiline_comment|/* Expiration timer */
DECL|member|timeout
r_volatile
r_int
r_int
id|timeout
suffix:semicolon
multiline_comment|/* timeout */
multiline_comment|/* Flags and state transition */
DECL|member|lock
id|spinlock_t
id|lock
suffix:semicolon
multiline_comment|/* lock for state transition */
DECL|member|flags
r_volatile
id|__u16
id|flags
suffix:semicolon
multiline_comment|/* status flags */
DECL|member|state
r_volatile
id|__u16
id|state
suffix:semicolon
multiline_comment|/* state info */
multiline_comment|/* Control members */
DECL|member|control
r_struct
id|ip_vs_conn
op_star
id|control
suffix:semicolon
multiline_comment|/* Master control connection */
DECL|member|n_control
id|atomic_t
id|n_control
suffix:semicolon
multiline_comment|/* Number of controlled ones */
DECL|member|dest
r_struct
id|ip_vs_dest
op_star
id|dest
suffix:semicolon
multiline_comment|/* real server */
DECL|member|in_pkts
id|atomic_t
id|in_pkts
suffix:semicolon
multiline_comment|/* incoming packet counter */
multiline_comment|/* packet transmitter for different forwarding methods */
DECL|member|packet_xmit
r_int
(paren
op_star
id|packet_xmit
)paren
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_conn
op_star
id|cp
comma
r_struct
id|ip_vs_protocol
op_star
id|pp
)paren
suffix:semicolon
multiline_comment|/* Note: we can group the following members into a structure,&n;&t;   in order to save more space, and the following members are&n;&t;   only used in VS/NAT anyway */
DECL|member|app
r_struct
id|ip_vs_app
op_star
id|app
suffix:semicolon
multiline_comment|/* bound ip_vs_app object */
DECL|member|app_data
r_void
op_star
id|app_data
suffix:semicolon
multiline_comment|/* Application private data */
DECL|member|in_seq
r_struct
id|ip_vs_seq
id|in_seq
suffix:semicolon
multiline_comment|/* incoming seq. struct */
DECL|member|out_seq
r_struct
id|ip_vs_seq
id|out_seq
suffix:semicolon
multiline_comment|/* outgoing seq. struct */
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;The information about the virtual service offered to the net&n; *&t;and the forwarding entries&n; */
DECL|struct|ip_vs_service
r_struct
id|ip_vs_service
(brace
DECL|member|s_list
r_struct
id|list_head
id|s_list
suffix:semicolon
multiline_comment|/* for normal service table */
DECL|member|f_list
r_struct
id|list_head
id|f_list
suffix:semicolon
multiline_comment|/* for fwmark-based service table */
DECL|member|refcnt
id|atomic_t
id|refcnt
suffix:semicolon
multiline_comment|/* reference counter */
DECL|member|usecnt
id|atomic_t
id|usecnt
suffix:semicolon
multiline_comment|/* use counter */
DECL|member|protocol
id|__u16
id|protocol
suffix:semicolon
multiline_comment|/* which protocol (TCP/UDP) */
DECL|member|addr
id|__u32
id|addr
suffix:semicolon
multiline_comment|/* IP address for virtual service */
DECL|member|port
id|__u16
id|port
suffix:semicolon
multiline_comment|/* port number for the service */
DECL|member|fwmark
id|__u32
id|fwmark
suffix:semicolon
multiline_comment|/* firewall mark of the service */
DECL|member|flags
r_int
id|flags
suffix:semicolon
multiline_comment|/* service status flags */
DECL|member|timeout
r_int
id|timeout
suffix:semicolon
multiline_comment|/* persistent timeout in ticks */
DECL|member|netmask
id|__u32
id|netmask
suffix:semicolon
multiline_comment|/* grouping granularity */
DECL|member|destinations
r_struct
id|list_head
id|destinations
suffix:semicolon
multiline_comment|/* real server d-linked list */
DECL|member|num_dests
id|__u32
id|num_dests
suffix:semicolon
multiline_comment|/* number of servers */
DECL|member|stats
r_struct
id|ip_vs_stats
id|stats
suffix:semicolon
multiline_comment|/* statistics for the service */
DECL|member|inc
r_struct
id|ip_vs_app
op_star
id|inc
suffix:semicolon
multiline_comment|/* bind conns to this app inc */
multiline_comment|/* for scheduling */
DECL|member|scheduler
r_struct
id|ip_vs_scheduler
op_star
id|scheduler
suffix:semicolon
multiline_comment|/* bound scheduler object */
DECL|member|sched_lock
id|rwlock_t
id|sched_lock
suffix:semicolon
multiline_comment|/* lock sched_data */
DECL|member|sched_data
r_void
op_star
id|sched_data
suffix:semicolon
multiline_comment|/* scheduler application data */
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;The real server destination forwarding entry&n; *&t;with ip address, port number, and so on.&n; */
DECL|struct|ip_vs_dest
r_struct
id|ip_vs_dest
(brace
DECL|member|n_list
r_struct
id|list_head
id|n_list
suffix:semicolon
multiline_comment|/* for the dests in the service */
DECL|member|d_list
r_struct
id|list_head
id|d_list
suffix:semicolon
multiline_comment|/* for table with all the dests */
DECL|member|addr
id|__u32
id|addr
suffix:semicolon
multiline_comment|/* IP address of the server */
DECL|member|port
id|__u16
id|port
suffix:semicolon
multiline_comment|/* port number of the server */
DECL|member|flags
r_volatile
r_int
id|flags
suffix:semicolon
multiline_comment|/* dest status flags */
DECL|member|conn_flags
id|atomic_t
id|conn_flags
suffix:semicolon
multiline_comment|/* flags to copy to conn */
DECL|member|weight
id|atomic_t
id|weight
suffix:semicolon
multiline_comment|/* server weight */
DECL|member|refcnt
id|atomic_t
id|refcnt
suffix:semicolon
multiline_comment|/* reference counter */
DECL|member|stats
r_struct
id|ip_vs_stats
id|stats
suffix:semicolon
multiline_comment|/* statistics */
multiline_comment|/* connection counters and thresholds */
DECL|member|activeconns
id|atomic_t
id|activeconns
suffix:semicolon
multiline_comment|/* active connections */
DECL|member|inactconns
id|atomic_t
id|inactconns
suffix:semicolon
multiline_comment|/* inactive connections */
DECL|member|persistconns
id|atomic_t
id|persistconns
suffix:semicolon
multiline_comment|/* persistent connections */
DECL|member|u_threshold
id|__u32
id|u_threshold
suffix:semicolon
multiline_comment|/* upper threshold */
DECL|member|l_threshold
id|__u32
id|l_threshold
suffix:semicolon
multiline_comment|/* lower threshold */
multiline_comment|/* for destination cache */
DECL|member|dst_lock
id|spinlock_t
id|dst_lock
suffix:semicolon
multiline_comment|/* lock of dst_cache */
DECL|member|dst_cache
r_struct
id|dst_entry
op_star
id|dst_cache
suffix:semicolon
multiline_comment|/* destination cache entry */
DECL|member|dst_rtos
id|u32
id|dst_rtos
suffix:semicolon
multiline_comment|/* RT_TOS(tos) for dst */
multiline_comment|/* for virtual service */
DECL|member|svc
r_struct
id|ip_vs_service
op_star
id|svc
suffix:semicolon
multiline_comment|/* service it belongs to */
DECL|member|protocol
id|__u16
id|protocol
suffix:semicolon
multiline_comment|/* which protocol (TCP/UDP) */
DECL|member|vaddr
id|__u32
id|vaddr
suffix:semicolon
multiline_comment|/* virtual IP address */
DECL|member|vport
id|__u16
id|vport
suffix:semicolon
multiline_comment|/* virtual port number */
DECL|member|vfwmark
id|__u32
id|vfwmark
suffix:semicolon
multiline_comment|/* firewall mark of service */
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;The scheduler object&n; */
DECL|struct|ip_vs_scheduler
r_struct
id|ip_vs_scheduler
(brace
DECL|member|n_list
r_struct
id|list_head
id|n_list
suffix:semicolon
multiline_comment|/* d-linked list head */
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
multiline_comment|/* scheduler name */
DECL|member|refcnt
id|atomic_t
id|refcnt
suffix:semicolon
multiline_comment|/* reference counter */
DECL|member|module
r_struct
id|module
op_star
id|module
suffix:semicolon
multiline_comment|/* THIS_MODULE/NULL */
multiline_comment|/* scheduler initializing service */
DECL|member|init_service
r_int
(paren
op_star
id|init_service
)paren
(paren
r_struct
id|ip_vs_service
op_star
id|svc
)paren
suffix:semicolon
multiline_comment|/* scheduling service finish */
DECL|member|done_service
r_int
(paren
op_star
id|done_service
)paren
(paren
r_struct
id|ip_vs_service
op_star
id|svc
)paren
suffix:semicolon
multiline_comment|/* scheduler updating service */
DECL|member|update_service
r_int
(paren
op_star
id|update_service
)paren
(paren
r_struct
id|ip_vs_service
op_star
id|svc
)paren
suffix:semicolon
multiline_comment|/* selecting a server from the given service */
DECL|member|schedule
r_struct
id|ip_vs_dest
op_star
(paren
op_star
id|schedule
)paren
(paren
r_struct
id|ip_vs_service
op_star
id|svc
comma
r_struct
id|iphdr
op_star
id|iph
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;The application module object (a.k.a. app incarnation)&n; */
DECL|struct|ip_vs_app
r_struct
id|ip_vs_app
(brace
DECL|member|a_list
r_struct
id|list_head
id|a_list
suffix:semicolon
multiline_comment|/* member in app list */
DECL|member|type
r_int
id|type
suffix:semicolon
multiline_comment|/* IP_VS_APP_TYPE_xxx */
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
multiline_comment|/* application module name */
DECL|member|protocol
id|__u16
id|protocol
suffix:semicolon
DECL|member|module
r_struct
id|module
op_star
id|module
suffix:semicolon
multiline_comment|/* THIS_MODULE/NULL */
DECL|member|incs_list
r_struct
id|list_head
id|incs_list
suffix:semicolon
multiline_comment|/* list of incarnations */
multiline_comment|/* members for application incarnations */
DECL|member|p_list
r_struct
id|list_head
id|p_list
suffix:semicolon
multiline_comment|/* member in proto app list */
DECL|member|app
r_struct
id|ip_vs_app
op_star
id|app
suffix:semicolon
multiline_comment|/* its real application */
DECL|member|port
id|__u16
id|port
suffix:semicolon
multiline_comment|/* port number in net order */
DECL|member|usecnt
id|atomic_t
id|usecnt
suffix:semicolon
multiline_comment|/* usage counter */
multiline_comment|/* output hook */
DECL|member|pkt_out
r_int
(paren
op_star
id|pkt_out
)paren
(paren
r_struct
id|ip_vs_app
op_star
comma
r_struct
id|ip_vs_conn
op_star
comma
r_struct
id|sk_buff
op_star
)paren
suffix:semicolon
multiline_comment|/* input hook */
DECL|member|pkt_in
r_int
(paren
op_star
id|pkt_in
)paren
(paren
r_struct
id|ip_vs_app
op_star
comma
r_struct
id|ip_vs_conn
op_star
comma
r_struct
id|sk_buff
op_star
)paren
suffix:semicolon
multiline_comment|/* ip_vs_app initializer */
DECL|member|init_conn
r_int
(paren
op_star
id|init_conn
)paren
(paren
r_struct
id|ip_vs_app
op_star
comma
r_struct
id|ip_vs_conn
op_star
)paren
suffix:semicolon
multiline_comment|/* ip_vs_app finish */
DECL|member|done_conn
r_int
(paren
op_star
id|done_conn
)paren
(paren
r_struct
id|ip_vs_app
op_star
comma
r_struct
id|ip_vs_conn
op_star
)paren
suffix:semicolon
multiline_comment|/* not used now */
DECL|member|bind_conn
r_int
(paren
op_star
id|bind_conn
)paren
(paren
r_struct
id|ip_vs_app
op_star
comma
r_struct
id|ip_vs_conn
op_star
comma
r_struct
id|ip_vs_protocol
op_star
)paren
suffix:semicolon
DECL|member|unbind_conn
r_void
(paren
op_star
id|unbind_conn
)paren
(paren
r_struct
id|ip_vs_app
op_star
comma
r_struct
id|ip_vs_conn
op_star
)paren
suffix:semicolon
DECL|member|timeout_table
r_int
op_star
id|timeout_table
suffix:semicolon
DECL|member|timeouts
r_int
op_star
id|timeouts
suffix:semicolon
DECL|member|timeouts_size
r_int
id|timeouts_size
suffix:semicolon
DECL|member|conn_schedule
r_int
(paren
op_star
id|conn_schedule
)paren
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_app
op_star
id|app
comma
r_struct
id|iphdr
op_star
id|iph
comma
r_union
id|ip_vs_tphdr
id|h
comma
r_int
op_star
id|verdict
comma
r_struct
id|ip_vs_conn
op_star
op_star
id|cpp
)paren
suffix:semicolon
r_struct
id|ip_vs_conn
op_star
DECL|member|conn_in_get
(paren
op_star
id|conn_in_get
)paren
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_app
op_star
id|app
comma
r_struct
id|iphdr
op_star
id|iph
comma
r_union
id|ip_vs_tphdr
id|h
comma
r_int
id|inverse
)paren
suffix:semicolon
r_struct
id|ip_vs_conn
op_star
DECL|member|conn_out_get
(paren
op_star
id|conn_out_get
)paren
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_app
op_star
id|app
comma
r_struct
id|iphdr
op_star
id|iph
comma
r_union
id|ip_vs_tphdr
id|h
comma
r_int
id|inverse
)paren
suffix:semicolon
DECL|member|state_transition
r_int
(paren
op_star
id|state_transition
)paren
(paren
r_struct
id|ip_vs_conn
op_star
id|cp
comma
r_int
id|direction
comma
r_struct
id|iphdr
op_star
id|iph
comma
r_union
id|ip_vs_tphdr
id|h
comma
r_struct
id|ip_vs_app
op_star
id|app
)paren
suffix:semicolon
DECL|member|timeout_change
r_void
(paren
op_star
id|timeout_change
)paren
(paren
r_struct
id|ip_vs_app
op_star
id|app
comma
r_int
id|flags
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; *      IPVS core functions&n; *      (from ip_vs_core.c)&n; */
r_extern
r_const
r_char
op_star
id|ip_vs_proto_name
c_func
(paren
r_int
id|proto
)paren
suffix:semicolon
r_extern
r_int
r_int
id|check_for_ip_vs_out
c_func
(paren
r_struct
id|sk_buff
op_star
op_star
id|skb_p
comma
r_int
(paren
op_star
id|okfn
)paren
(paren
r_struct
id|sk_buff
op_star
)paren
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_init_hash_table
c_func
(paren
r_struct
id|list_head
op_star
id|table
comma
r_int
id|rows
)paren
suffix:semicolon
DECL|macro|IP_VS_INIT_HASH_TABLE
mdefine_line|#define IP_VS_INIT_HASH_TABLE(t) ip_vs_init_hash_table(t, sizeof(t)/sizeof(t[0]))
DECL|macro|IP_VS_APP_TYPE_UNSPEC
mdefine_line|#define IP_VS_APP_TYPE_UNSPEC&t;0
DECL|macro|IP_VS_APP_TYPE_FTP
mdefine_line|#define IP_VS_APP_TYPE_FTP&t;1
multiline_comment|/*&n; *     ip_vs_conn handling functions&n; *     (from ip_vs_conn.c)&n; */
multiline_comment|/*&n; *     IPVS connection entry hash table&n; */
macro_line|#ifndef CONFIG_IP_VS_TAB_BITS
DECL|macro|CONFIG_IP_VS_TAB_BITS
mdefine_line|#define CONFIG_IP_VS_TAB_BITS   12
macro_line|#endif
multiline_comment|/* make sure that IP_VS_CONN_TAB_BITS is located in [8, 20] */
macro_line|#if CONFIG_IP_VS_TAB_BITS &lt; 8
DECL|macro|IP_VS_CONN_TAB_BITS
mdefine_line|#define IP_VS_CONN_TAB_BITS&t;8
macro_line|#endif
macro_line|#if CONFIG_IP_VS_TAB_BITS &gt; 20
DECL|macro|IP_VS_CONN_TAB_BITS
mdefine_line|#define IP_VS_CONN_TAB_BITS&t;20
macro_line|#endif
macro_line|#if 8 &lt;= CONFIG_IP_VS_TAB_BITS &amp;&amp; CONFIG_IP_VS_TAB_BITS &lt;= 20
DECL|macro|IP_VS_CONN_TAB_BITS
mdefine_line|#define IP_VS_CONN_TAB_BITS&t;CONFIG_IP_VS_TAB_BITS
macro_line|#endif
DECL|macro|IP_VS_CONN_TAB_SIZE
mdefine_line|#define IP_VS_CONN_TAB_SIZE     (1 &lt;&lt; IP_VS_CONN_TAB_BITS)
DECL|macro|IP_VS_CONN_TAB_MASK
mdefine_line|#define IP_VS_CONN_TAB_MASK     (IP_VS_CONN_TAB_SIZE - 1)
r_enum
(brace
DECL|enumerator|IP_VS_DIR_INPUT
id|IP_VS_DIR_INPUT
op_assign
l_int|0
comma
DECL|enumerator|IP_VS_DIR_OUTPUT
id|IP_VS_DIR_OUTPUT
comma
DECL|enumerator|IP_VS_DIR_INPUT_ONLY
id|IP_VS_DIR_INPUT_ONLY
comma
DECL|enumerator|IP_VS_DIR_LAST
id|IP_VS_DIR_LAST
comma
)brace
suffix:semicolon
r_extern
r_struct
id|ip_vs_conn
op_star
id|ip_vs_conn_in_get
(paren
r_int
id|protocol
comma
id|__u32
id|s_addr
comma
id|__u16
id|s_port
comma
id|__u32
id|d_addr
comma
id|__u16
id|d_port
)paren
suffix:semicolon
r_extern
r_struct
id|ip_vs_conn
op_star
id|ip_vs_conn_out_get
(paren
r_int
id|protocol
comma
id|__u32
id|s_addr
comma
id|__u16
id|s_port
comma
id|__u32
id|d_addr
comma
id|__u16
id|d_port
)paren
suffix:semicolon
multiline_comment|/* put back the conn without restarting its timer */
DECL|function|__ip_vs_conn_put
r_static
r_inline
r_void
id|__ip_vs_conn_put
c_func
(paren
r_struct
id|ip_vs_conn
op_star
id|cp
)paren
(brace
id|atomic_dec
c_func
(paren
op_amp
id|cp-&gt;refcnt
)paren
suffix:semicolon
)brace
r_extern
r_void
id|ip_vs_conn_put
c_func
(paren
r_struct
id|ip_vs_conn
op_star
id|cp
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_conn_fill_cport
c_func
(paren
r_struct
id|ip_vs_conn
op_star
id|cp
comma
id|__u16
id|cport
)paren
suffix:semicolon
r_extern
r_struct
id|ip_vs_conn
op_star
id|ip_vs_conn_new
c_func
(paren
r_int
id|proto
comma
id|__u32
id|caddr
comma
id|__u16
id|cport
comma
id|__u32
id|vaddr
comma
id|__u16
id|vport
comma
id|__u32
id|daddr
comma
id|__u16
id|dport
comma
r_int
id|flags
comma
r_struct
id|ip_vs_dest
op_star
id|dest
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_conn_expire_now
c_func
(paren
r_struct
id|ip_vs_conn
op_star
id|cp
)paren
suffix:semicolon
r_extern
r_const
r_char
op_star
id|ip_vs_state_name
c_func
(paren
id|__u16
id|proto
comma
r_int
id|state
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_tcp_conn_listen
c_func
(paren
r_struct
id|ip_vs_conn
op_star
id|cp
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_check_template
c_func
(paren
r_struct
id|ip_vs_conn
op_star
id|ct
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_secure_tcp_set
c_func
(paren
r_int
id|on
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_random_dropentry
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_conn_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_conn_cleanup
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|function|ip_vs_control_del
r_static
r_inline
r_void
id|ip_vs_control_del
c_func
(paren
r_struct
id|ip_vs_conn
op_star
id|cp
)paren
(brace
r_struct
id|ip_vs_conn
op_star
id|ctl_cp
op_assign
id|cp-&gt;control
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|ctl_cp
)paren
(brace
id|IP_VS_ERR
c_func
(paren
l_string|&quot;request control DEL for uncontrolled: &quot;
l_string|&quot;%d.%d.%d.%d:%d to %d.%d.%d.%d:%d&bslash;n&quot;
comma
id|NIPQUAD
c_func
(paren
id|cp-&gt;caddr
)paren
comma
id|ntohs
c_func
(paren
id|cp-&gt;cport
)paren
comma
id|NIPQUAD
c_func
(paren
id|cp-&gt;vaddr
)paren
comma
id|ntohs
c_func
(paren
id|cp-&gt;vport
)paren
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
id|IP_VS_DBG
c_func
(paren
l_int|7
comma
l_string|&quot;DELeting control for: &quot;
l_string|&quot;cp.dst=%d.%d.%d.%d:%d ctl_cp.dst=%d.%d.%d.%d:%d&bslash;n&quot;
comma
id|NIPQUAD
c_func
(paren
id|cp-&gt;caddr
)paren
comma
id|ntohs
c_func
(paren
id|cp-&gt;cport
)paren
comma
id|NIPQUAD
c_func
(paren
id|ctl_cp-&gt;caddr
)paren
comma
id|ntohs
c_func
(paren
id|ctl_cp-&gt;cport
)paren
)paren
suffix:semicolon
id|cp-&gt;control
op_assign
l_int|NULL
suffix:semicolon
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|ctl_cp-&gt;n_control
)paren
op_eq
l_int|0
)paren
(brace
id|IP_VS_ERR
c_func
(paren
l_string|&quot;BUG control DEL with n=0 : &quot;
l_string|&quot;%d.%d.%d.%d:%d to %d.%d.%d.%d:%d&bslash;n&quot;
comma
id|NIPQUAD
c_func
(paren
id|cp-&gt;caddr
)paren
comma
id|ntohs
c_func
(paren
id|cp-&gt;cport
)paren
comma
id|NIPQUAD
c_func
(paren
id|cp-&gt;vaddr
)paren
comma
id|ntohs
c_func
(paren
id|cp-&gt;vport
)paren
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
id|atomic_dec
c_func
(paren
op_amp
id|ctl_cp-&gt;n_control
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|ip_vs_control_add
id|ip_vs_control_add
c_func
(paren
r_struct
id|ip_vs_conn
op_star
id|cp
comma
r_struct
id|ip_vs_conn
op_star
id|ctl_cp
)paren
(brace
r_if
c_cond
(paren
id|cp-&gt;control
)paren
(brace
id|IP_VS_ERR
c_func
(paren
l_string|&quot;request control ADD for already controlled: &quot;
l_string|&quot;%d.%d.%d.%d:%d to %d.%d.%d.%d:%d&bslash;n&quot;
comma
id|NIPQUAD
c_func
(paren
id|cp-&gt;caddr
)paren
comma
id|ntohs
c_func
(paren
id|cp-&gt;cport
)paren
comma
id|NIPQUAD
c_func
(paren
id|cp-&gt;vaddr
)paren
comma
id|ntohs
c_func
(paren
id|cp-&gt;vport
)paren
)paren
suffix:semicolon
id|ip_vs_control_del
c_func
(paren
id|cp
)paren
suffix:semicolon
)brace
id|IP_VS_DBG
c_func
(paren
l_int|7
comma
l_string|&quot;ADDing control for: &quot;
l_string|&quot;cp.dst=%d.%d.%d.%d:%d ctl_cp.dst=%d.%d.%d.%d:%d&bslash;n&quot;
comma
id|NIPQUAD
c_func
(paren
id|cp-&gt;caddr
)paren
comma
id|ntohs
c_func
(paren
id|cp-&gt;cport
)paren
comma
id|NIPQUAD
c_func
(paren
id|ctl_cp-&gt;caddr
)paren
comma
id|ntohs
c_func
(paren
id|ctl_cp-&gt;cport
)paren
)paren
suffix:semicolon
id|cp-&gt;control
op_assign
id|ctl_cp
suffix:semicolon
id|atomic_inc
c_func
(paren
op_amp
id|ctl_cp-&gt;n_control
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; *      IPVS application functions&n; *      (from ip_vs_app.c)&n; */
DECL|macro|IP_VS_APP_MAX_PORTS
mdefine_line|#define IP_VS_APP_MAX_PORTS  8
r_extern
r_int
id|register_ip_vs_app
c_func
(paren
r_struct
id|ip_vs_app
op_star
id|app
)paren
suffix:semicolon
r_extern
r_void
id|unregister_ip_vs_app
c_func
(paren
r_struct
id|ip_vs_app
op_star
id|app
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_bind_app
c_func
(paren
r_struct
id|ip_vs_conn
op_star
id|cp
comma
r_struct
id|ip_vs_protocol
op_star
id|pp
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_unbind_app
c_func
(paren
r_struct
id|ip_vs_conn
op_star
id|cp
)paren
suffix:semicolon
r_extern
r_int
id|register_ip_vs_app_inc
c_func
(paren
r_struct
id|ip_vs_app
op_star
id|app
comma
id|__u16
id|proto
comma
id|__u16
id|port
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_app_inc_get
c_func
(paren
r_struct
id|ip_vs_app
op_star
id|inc
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_app_inc_put
c_func
(paren
r_struct
id|ip_vs_app
op_star
id|inc
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_app_pkt_out
c_func
(paren
r_struct
id|ip_vs_conn
op_star
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_app_pkt_in
c_func
(paren
r_struct
id|ip_vs_conn
op_star
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_skb_replace
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_int
id|pri
comma
r_char
op_star
id|o_buf
comma
r_int
id|o_len
comma
r_char
op_star
id|n_buf
comma
r_int
id|n_len
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_app_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_app_cleanup
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;IPVS protocol functions (from ip_vs_proto.c)&n; */
r_extern
r_int
id|ip_vs_protocol_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_protocol_cleanup
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_protocol_timeout_change
c_func
(paren
r_int
id|flags
)paren
suffix:semicolon
r_extern
r_int
op_star
id|ip_vs_create_timeout_table
c_func
(paren
r_int
op_star
id|table
comma
r_int
id|size
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_set_state_timeout
c_func
(paren
r_int
op_star
id|table
comma
r_int
id|num
comma
r_char
op_star
op_star
id|names
comma
r_char
op_star
id|name
comma
r_int
id|to
)paren
suffix:semicolon
r_extern
r_struct
id|ip_vs_protocol
id|ip_vs_protocol_tcp
suffix:semicolon
r_extern
r_struct
id|ip_vs_protocol
id|ip_vs_protocol_udp
suffix:semicolon
r_extern
r_struct
id|ip_vs_protocol
id|ip_vs_protocol_icmp
suffix:semicolon
r_extern
r_struct
id|ip_vs_protocol
id|ip_vs_protocol_esp
suffix:semicolon
r_extern
r_struct
id|ip_vs_protocol
id|ip_vs_protocol_ah
suffix:semicolon
multiline_comment|/*&n; *      Registering/unregistering scheduler functions&n; *      (from ip_vs_sched.c)&n; */
r_extern
r_int
id|register_ip_vs_scheduler
c_func
(paren
r_struct
id|ip_vs_scheduler
op_star
id|scheduler
)paren
suffix:semicolon
r_extern
r_int
id|unregister_ip_vs_scheduler
c_func
(paren
r_struct
id|ip_vs_scheduler
op_star
id|scheduler
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_bind_scheduler
c_func
(paren
r_struct
id|ip_vs_service
op_star
id|svc
comma
r_struct
id|ip_vs_scheduler
op_star
id|scheduler
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_unbind_scheduler
c_func
(paren
r_struct
id|ip_vs_service
op_star
id|svc
)paren
suffix:semicolon
r_extern
r_struct
id|ip_vs_scheduler
op_star
id|ip_vs_scheduler_get
c_func
(paren
r_const
r_char
op_star
id|sched_name
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_scheduler_put
c_func
(paren
r_struct
id|ip_vs_scheduler
op_star
id|scheduler
)paren
suffix:semicolon
r_extern
r_struct
id|ip_vs_conn
op_star
id|ip_vs_schedule
c_func
(paren
r_struct
id|ip_vs_service
op_star
id|svc
comma
r_struct
id|iphdr
op_star
id|iph
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_leave
c_func
(paren
r_struct
id|ip_vs_service
op_star
id|svc
comma
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_protocol
op_star
id|pp
comma
r_union
id|ip_vs_tphdr
id|h
)paren
suffix:semicolon
multiline_comment|/*&n; *      IPVS control data and functions (from ip_vs_ctl.c)&n; */
r_extern
r_int
id|sysctl_ip_vs_cache_bypass
suffix:semicolon
r_extern
r_int
id|sysctl_ip_vs_expire_nodest_conn
suffix:semicolon
r_extern
r_int
id|sysctl_ip_vs_sync_threshold
(braket
l_int|2
)braket
suffix:semicolon
r_extern
r_int
id|sysctl_ip_vs_nat_icmp_send
suffix:semicolon
r_extern
id|atomic_t
id|ip_vs_dropentry
suffix:semicolon
r_extern
r_struct
id|ip_vs_stats
id|ip_vs_stats
suffix:semicolon
r_extern
r_struct
id|ip_vs_service
op_star
id|ip_vs_service_get
c_func
(paren
id|__u32
id|fwmark
comma
id|__u16
id|protocol
comma
id|__u32
id|vaddr
comma
id|__u16
id|vport
)paren
suffix:semicolon
DECL|function|ip_vs_service_put
r_static
r_inline
r_void
id|ip_vs_service_put
c_func
(paren
r_struct
id|ip_vs_service
op_star
id|svc
)paren
(brace
id|atomic_dec
c_func
(paren
op_amp
id|svc-&gt;usecnt
)paren
suffix:semicolon
)brace
r_extern
r_struct
id|ip_vs_dest
op_star
id|ip_vs_lookup_real_service
c_func
(paren
id|__u16
id|protocol
comma
id|__u32
id|daddr
comma
id|__u16
id|dport
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_use_count_inc
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_use_count_dec
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|update_defense_level
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_control_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_control_cleanup
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*&n; *      IPVS sync daemon data and function prototypes&n; *      (from ip_vs_sync.c)&n; */
r_extern
r_volatile
r_int
id|ip_vs_sync_state
suffix:semicolon
r_extern
r_volatile
r_int
id|ip_vs_master_syncid
suffix:semicolon
r_extern
r_volatile
r_int
id|ip_vs_backup_syncid
suffix:semicolon
r_extern
r_char
id|ip_vs_master_mcast_ifn
(braket
id|IP_VS_IFNAME_MAXLEN
)braket
suffix:semicolon
r_extern
r_char
id|ip_vs_backup_mcast_ifn
(braket
id|IP_VS_IFNAME_MAXLEN
)braket
suffix:semicolon
r_extern
r_int
id|start_sync_thread
c_func
(paren
r_int
id|state
comma
r_char
op_star
id|mcast_ifn
comma
id|__u8
id|syncid
)paren
suffix:semicolon
r_extern
r_int
id|stop_sync_thread
c_func
(paren
r_int
id|state
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_sync_conn
c_func
(paren
r_struct
id|ip_vs_conn
op_star
id|cp
)paren
suffix:semicolon
multiline_comment|/*&n; *      IPVS rate estimator prototypes (from ip_vs_est.c)&n; */
r_extern
r_int
id|ip_vs_new_estimator
c_func
(paren
r_struct
id|ip_vs_stats
op_star
id|stats
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_kill_estimator
c_func
(paren
r_struct
id|ip_vs_stats
op_star
id|stats
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_zero_estimator
c_func
(paren
r_struct
id|ip_vs_stats
op_star
id|stats
)paren
suffix:semicolon
multiline_comment|/*&n; *      Slow timer functions for IPVS&n; *      (from ip_vs_timer.c)&n; */
r_extern
r_void
id|add_sltimer
c_func
(paren
r_struct
id|sltimer_list
op_star
id|timer
)paren
suffix:semicolon
r_extern
r_int
id|del_sltimer
c_func
(paren
r_struct
id|sltimer_list
op_star
id|timer
)paren
suffix:semicolon
r_extern
r_void
id|mod_sltimer
c_func
(paren
r_struct
id|sltimer_list
op_star
id|timer
comma
r_int
r_int
id|expires
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_sltimer_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_sltimer_cleanup
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|function|init_sltimer
r_static
r_inline
r_void
id|init_sltimer
c_func
(paren
r_struct
id|sltimer_list
op_star
id|timer
)paren
(brace
id|timer-&gt;list.next
op_assign
id|timer-&gt;list.prev
op_assign
l_int|NULL
suffix:semicolon
)brace
DECL|function|sltimer_pending
r_static
r_inline
r_int
id|sltimer_pending
c_func
(paren
r_const
r_struct
id|sltimer_list
op_star
id|timer
)paren
(brace
r_return
id|timer-&gt;list.next
op_ne
l_int|NULL
suffix:semicolon
)brace
multiline_comment|/*&n; *&t;Various IPVS packet transmitters (from ip_vs_xmit.c)&n; */
r_extern
r_int
id|ip_vs_null_xmit
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_conn
op_star
id|cp
comma
r_struct
id|ip_vs_protocol
op_star
id|pp
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_bypass_xmit
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_conn
op_star
id|cp
comma
r_struct
id|ip_vs_protocol
op_star
id|pp
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_nat_xmit
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_conn
op_star
id|cp
comma
r_struct
id|ip_vs_protocol
op_star
id|pp
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_tunnel_xmit
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_conn
op_star
id|cp
comma
r_struct
id|ip_vs_protocol
op_star
id|pp
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_dr_xmit
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_conn
op_star
id|cp
comma
r_struct
id|ip_vs_protocol
op_star
id|pp
)paren
suffix:semicolon
r_extern
r_int
id|ip_vs_icmp_xmit
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|ip_vs_conn
op_star
id|cp
comma
r_struct
id|ip_vs_protocol
op_star
id|pp
)paren
suffix:semicolon
r_extern
r_void
id|ip_vs_dst_reset
c_func
(paren
r_struct
id|ip_vs_dest
op_star
id|dest
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;This is a simple mechanism to ignore packets when&n; *&t;we are loaded. Just set ip_vs_drop_rate to &squot;n&squot; and&n; *&t;we start to drop 1/rate of the packets&n; */
r_extern
r_int
id|ip_vs_drop_rate
suffix:semicolon
r_extern
r_int
id|ip_vs_drop_counter
suffix:semicolon
DECL|function|ip_vs_todrop
r_static
id|__inline__
r_int
id|ip_vs_todrop
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|ip_vs_drop_rate
)paren
r_return
l_int|0
suffix:semicolon
r_if
c_cond
(paren
op_decrement
id|ip_vs_drop_counter
OG
l_int|0
)paren
r_return
l_int|0
suffix:semicolon
id|ip_vs_drop_counter
op_assign
id|ip_vs_drop_rate
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
multiline_comment|/*&n; *      ip_vs_fwd_tag returns the forwarding tag of the connection&n; */
DECL|macro|IP_VS_FWD_METHOD
mdefine_line|#define IP_VS_FWD_METHOD(cp)  (cp-&gt;flags &amp; IP_VS_CONN_F_FWD_MASK)
DECL|function|ip_vs_fwd_tag
r_extern
id|__inline__
r_char
id|ip_vs_fwd_tag
c_func
(paren
r_struct
id|ip_vs_conn
op_star
id|cp
)paren
(brace
r_char
id|fwd
suffix:semicolon
r_switch
c_cond
(paren
id|IP_VS_FWD_METHOD
c_func
(paren
id|cp
)paren
)paren
(brace
r_case
id|IP_VS_CONN_F_MASQ
suffix:colon
id|fwd
op_assign
l_char|&squot;M&squot;
suffix:semicolon
r_break
suffix:semicolon
r_case
id|IP_VS_CONN_F_LOCALNODE
suffix:colon
id|fwd
op_assign
l_char|&squot;L&squot;
suffix:semicolon
r_break
suffix:semicolon
r_case
id|IP_VS_CONN_F_TUNNEL
suffix:colon
id|fwd
op_assign
l_char|&squot;T&squot;
suffix:semicolon
r_break
suffix:semicolon
r_case
id|IP_VS_CONN_F_DROUTE
suffix:colon
id|fwd
op_assign
l_char|&squot;R&squot;
suffix:semicolon
r_break
suffix:semicolon
r_case
id|IP_VS_CONN_F_BYPASS
suffix:colon
id|fwd
op_assign
l_char|&squot;B&squot;
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|fwd
op_assign
l_char|&squot;?&squot;
suffix:semicolon
r_break
suffix:semicolon
)brace
r_return
id|fwd
suffix:semicolon
)brace
DECL|function|ip_vs_check_diff
r_static
r_inline
id|u16
id|ip_vs_check_diff
c_func
(paren
id|u32
id|old
comma
id|u32
r_new
comma
id|u16
id|oldsum
)paren
(brace
id|u32
id|diff
(braket
l_int|2
)braket
op_assign
(brace
id|old
comma
r_new
)brace
suffix:semicolon
r_return
id|csum_fold
c_func
(paren
id|csum_partial
c_func
(paren
(paren
r_char
op_star
)paren
id|diff
comma
r_sizeof
(paren
id|diff
)paren
comma
id|oldsum
op_xor
l_int|0xFFFF
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif /* __KERNEL__ */
macro_line|#endif&t;/* _IP_VS_H */
eof
