macro_line|#ifndef LLC_MAC_H
DECL|macro|LLC_MAC_H
mdefine_line|#define LLC_MAC_H
multiline_comment|/*&n; * Copyright (c) 1997 by Procom Technology, Inc.&n; * &t;&t; 2001, 2002 by Arnaldo Carvalho de Melo &lt;acme@conectiva.com.br&gt;&n; *&n; * This program can be redistributed or modified under the terms of the&n; * GNU General Public License as published by the Free Software Foundation.&n; * This program is distributed without any warranty or implied warranty&n; * of merchantability or fitness for a particular purpose.&n; *&n; * See the GNU General Public License for more details.&n; */
r_extern
r_int
id|llc_rcv
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|net_device
op_star
id|dev
comma
r_struct
id|packet_type
op_star
id|pt
)paren
suffix:semicolon
r_extern
id|u16
id|lan_hdrs_init
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
id|u8
op_star
id|sa
comma
id|u8
op_star
id|da
)paren
suffix:semicolon
r_extern
r_int
id|llc_conn_rcv
c_func
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
DECL|function|llc_set_backlog_type
r_static
id|__inline__
r_void
id|llc_set_backlog_type
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_char
id|type
)paren
(brace
id|skb-&gt;cb
(braket
r_sizeof
(paren
id|skb-&gt;cb
)paren
op_minus
l_int|1
)braket
op_assign
id|type
suffix:semicolon
)brace
DECL|function|llc_backlog_type
r_static
id|__inline__
r_char
id|llc_backlog_type
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
(brace
r_return
id|skb-&gt;cb
(braket
r_sizeof
(paren
id|skb-&gt;cb
)paren
op_minus
l_int|1
)braket
suffix:semicolon
)brace
r_extern
id|u8
id|llc_mac_null_var
(braket
id|IFHWADDRLEN
)braket
suffix:semicolon
multiline_comment|/**&n; *      llc_mac_null - determines if a address is a null mac address&n; *      @mac: Mac address to test if null.&n; *&n; *      Determines if a given address is a null mac address.  Returns 0 if the&n; *      address is not a null mac, 1 if the address is a null mac.&n; */
DECL|function|llc_mac_null
r_static
id|__inline__
r_int
id|llc_mac_null
c_func
(paren
id|u8
op_star
id|mac
)paren
(brace
r_return
op_logical_neg
id|memcmp
c_func
(paren
id|mac
comma
id|llc_mac_null_var
comma
id|IFHWADDRLEN
)paren
suffix:semicolon
)brace
DECL|function|llc_addrany
r_static
id|__inline__
r_int
id|llc_addrany
c_func
(paren
r_struct
id|llc_addr
op_star
id|addr
)paren
(brace
r_return
id|llc_mac_null
c_func
(paren
id|addr-&gt;mac
)paren
op_logical_and
op_logical_neg
id|addr-&gt;lsap
suffix:semicolon
)brace
multiline_comment|/**&n; *&t;llc_mac_match - determines if two mac addresses are the same&n; *&t;@mac1: First mac address to compare.&n; *&t;@mac2: Second mac address to compare.&n; *&n; *&t;Determines if two given mac address are the same.  Returns 0 if there&n; *&t;is not a complete match up to len, 1 if a complete match up to len is&n; *&t;found.&n; */
DECL|function|llc_mac_match
r_static
id|__inline__
r_int
id|llc_mac_match
c_func
(paren
id|u8
op_star
id|mac1
comma
id|u8
op_star
id|mac2
)paren
(brace
r_return
op_logical_neg
id|memcmp
c_func
(paren
id|mac1
comma
id|mac2
comma
id|IFHWADDRLEN
)paren
suffix:semicolon
)brace
macro_line|#endif /* LLC_MAC_H */
eof
