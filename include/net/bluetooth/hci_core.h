multiline_comment|/* &n;   BlueZ - Bluetooth protocol stack for Linux&n;   Copyright (C) 2000-2001 Qualcomm Incorporated&n;&n;   Written 2000,2001 by Maxim Krasnyansky &lt;maxk@qualcomm.com&gt;&n;&n;   This program is free software; you can redistribute it and/or modify&n;   it under the terms of the GNU General Public License version 2 as&n;   published by the Free Software Foundation;&n;&n;   THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS&n;   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&n;   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS.&n;   IN NO EVENT SHALL THE COPYRIGHT HOLDER(S) AND AUTHOR(S) BE LIABLE FOR ANY&n;   CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES &n;   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN &n;   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF &n;   OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.&n;&n;   ALL LIABILITY, INCLUDING LIABILITY FOR INFRINGEMENT OF ANY PATENTS, &n;   COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS, RELATING TO USE OF THIS &n;   SOFTWARE IS DISCLAIMED.&n;*/
multiline_comment|/* &n; * $Id: hci_core.h,v 1.1 2001/06/01 08:12:11 davem Exp $ &n; */
macro_line|#ifndef __IF_HCI_CORE_H
DECL|macro|__IF_HCI_CORE_H
mdefine_line|#define __IF_HCI_CORE_H
macro_line|#include &quot;hci.h&quot;
multiline_comment|/* HCI upper protocols */
DECL|macro|HCI_MAX_PROTO
mdefine_line|#define HCI_MAX_PROTO &t;1
DECL|macro|HCI_PROTO_L2CAP
mdefine_line|#define HCI_PROTO_L2CAP&t;0
DECL|macro|HCI_INIT_TIMEOUT
mdefine_line|#define HCI_INIT_TIMEOUT (HZ * 10)
multiline_comment|/* ----- Inquiry cache ----- */
DECL|macro|INQUIRY_CACHE_AGE_MAX
mdefine_line|#define INQUIRY_CACHE_AGE_MAX   (HZ*5)    
singleline_comment|// 5 seconds
DECL|macro|INQUIRY_ENTRY_AGE_MAX
mdefine_line|#define INQUIRY_ENTRY_AGE_MAX   (HZ*60)   
singleline_comment|// 60 seconds
DECL|struct|inquiry_entry
r_struct
id|inquiry_entry
(brace
DECL|member|next
r_struct
id|inquiry_entry
op_star
id|next
suffix:semicolon
DECL|member|timestamp
id|__u32
id|timestamp
suffix:semicolon
DECL|member|info
id|inquiry_info
id|info
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|inquiry_cache
r_struct
id|inquiry_cache
(brace
DECL|member|lock
id|spinlock_t
id|lock
suffix:semicolon
DECL|member|timestamp
id|__u32
id|timestamp
suffix:semicolon
DECL|member|list
r_struct
id|inquiry_entry
op_star
id|list
suffix:semicolon
)brace
suffix:semicolon
DECL|function|inquiry_cache_init
r_static
id|__inline__
r_void
id|inquiry_cache_init
c_func
(paren
r_struct
id|inquiry_cache
op_star
id|cache
)paren
(brace
id|spin_lock_init
c_func
(paren
op_amp
id|cache-&gt;lock
)paren
suffix:semicolon
id|cache-&gt;list
op_assign
l_int|NULL
suffix:semicolon
)brace
DECL|function|inquiry_cache_lock
r_static
id|__inline__
r_void
id|inquiry_cache_lock
c_func
(paren
r_struct
id|inquiry_cache
op_star
id|cache
)paren
(brace
id|spin_lock
c_func
(paren
op_amp
id|cache-&gt;lock
)paren
suffix:semicolon
)brace
DECL|function|inquiry_cache_unlock
r_static
id|__inline__
r_void
id|inquiry_cache_unlock
c_func
(paren
r_struct
id|inquiry_cache
op_star
id|cache
)paren
(brace
id|spin_unlock
c_func
(paren
op_amp
id|cache-&gt;lock
)paren
suffix:semicolon
)brace
DECL|function|inquiry_cache_lock_bh
r_static
id|__inline__
r_void
id|inquiry_cache_lock_bh
c_func
(paren
r_struct
id|inquiry_cache
op_star
id|cache
)paren
(brace
id|spin_lock_bh
c_func
(paren
op_amp
id|cache-&gt;lock
)paren
suffix:semicolon
)brace
DECL|function|inquiry_cache_unlock_bh
r_static
id|__inline__
r_void
id|inquiry_cache_unlock_bh
c_func
(paren
r_struct
id|inquiry_cache
op_star
id|cache
)paren
(brace
id|spin_unlock_bh
c_func
(paren
op_amp
id|cache-&gt;lock
)paren
suffix:semicolon
)brace
DECL|function|inquiry_cache_age
r_static
id|__inline__
r_int
id|inquiry_cache_age
c_func
(paren
r_struct
id|inquiry_cache
op_star
id|cache
)paren
(brace
r_return
id|jiffies
op_minus
id|cache-&gt;timestamp
suffix:semicolon
)brace
DECL|function|inquiry_entry_age
r_static
id|__inline__
r_int
id|inquiry_entry_age
c_func
(paren
r_struct
id|inquiry_entry
op_star
id|e
)paren
(brace
r_return
id|jiffies
op_minus
id|e-&gt;timestamp
suffix:semicolon
)brace
r_extern
r_void
id|inquiry_cache_flush
c_func
(paren
r_struct
id|inquiry_cache
op_star
id|cache
)paren
suffix:semicolon
multiline_comment|/* ----- Connection hash ----- */
DECL|macro|HCI_MAX_CONN
mdefine_line|#define HCI_MAX_CONN &t;10
multiline_comment|/* FIXME:&n; * We assume that handle is a number - 0 ... HCI_MAX_CONN.&n; */
DECL|struct|conn_hash
r_struct
id|conn_hash
(brace
DECL|member|lock
id|spinlock_t
id|lock
suffix:semicolon
DECL|member|num
r_int
r_int
id|num
suffix:semicolon
DECL|member|conn
r_void
op_star
id|conn
(braket
id|HCI_MAX_CONN
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|function|conn_hash_init
r_static
id|__inline__
r_void
id|conn_hash_init
c_func
(paren
r_struct
id|conn_hash
op_star
id|h
)paren
(brace
id|memset
c_func
(paren
id|h
comma
l_int|0
comma
r_sizeof
(paren
r_struct
id|conn_hash
)paren
)paren
suffix:semicolon
id|spin_lock_init
c_func
(paren
op_amp
id|h-&gt;lock
)paren
suffix:semicolon
)brace
DECL|function|conn_hash_lock
r_static
id|__inline__
r_void
id|conn_hash_lock
c_func
(paren
r_struct
id|conn_hash
op_star
id|h
)paren
(brace
id|spin_lock
c_func
(paren
op_amp
id|h-&gt;lock
)paren
suffix:semicolon
)brace
DECL|function|conn_hash_unlock
r_static
id|__inline__
r_void
id|conn_hash_unlock
c_func
(paren
r_struct
id|conn_hash
op_star
id|h
)paren
(brace
id|spin_unlock
c_func
(paren
op_amp
id|h-&gt;lock
)paren
suffix:semicolon
)brace
DECL|function|__conn_hash_add
r_static
id|__inline__
r_void
op_star
id|__conn_hash_add
c_func
(paren
r_struct
id|conn_hash
op_star
id|h
comma
id|__u16
id|handle
comma
r_void
op_star
id|conn
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|h-&gt;conn
(braket
id|handle
)braket
)paren
(brace
id|h-&gt;conn
(braket
id|handle
)braket
op_assign
id|conn
suffix:semicolon
id|h-&gt;num
op_increment
suffix:semicolon
r_return
id|conn
suffix:semicolon
)brace
r_else
r_return
l_int|NULL
suffix:semicolon
)brace
DECL|function|conn_hash_add
r_static
id|__inline__
r_void
op_star
id|conn_hash_add
c_func
(paren
r_struct
id|conn_hash
op_star
id|h
comma
id|__u16
id|handle
comma
r_void
op_star
id|conn
)paren
(brace
r_if
c_cond
(paren
id|handle
op_ge
id|HCI_MAX_CONN
)paren
r_return
l_int|NULL
suffix:semicolon
id|conn_hash_lock
c_func
(paren
id|h
)paren
suffix:semicolon
id|conn
op_assign
id|__conn_hash_add
c_func
(paren
id|h
comma
id|handle
comma
id|conn
)paren
suffix:semicolon
id|conn_hash_unlock
c_func
(paren
id|h
)paren
suffix:semicolon
r_return
id|conn
suffix:semicolon
)brace
DECL|function|__conn_hash_del
r_static
id|__inline__
r_void
op_star
id|__conn_hash_del
c_func
(paren
r_struct
id|conn_hash
op_star
id|h
comma
id|__u16
id|handle
)paren
(brace
r_void
op_star
id|conn
op_assign
id|h-&gt;conn
(braket
id|handle
)braket
suffix:semicolon
r_if
c_cond
(paren
id|conn
)paren
(brace
id|h-&gt;conn
(braket
id|handle
)braket
op_assign
l_int|NULL
suffix:semicolon
id|h-&gt;num
op_decrement
suffix:semicolon
r_return
id|conn
suffix:semicolon
)brace
r_else
r_return
l_int|NULL
suffix:semicolon
)brace
DECL|function|conn_hash_del
r_static
id|__inline__
r_void
op_star
id|conn_hash_del
c_func
(paren
r_struct
id|conn_hash
op_star
id|h
comma
id|__u16
id|handle
)paren
(brace
r_void
op_star
id|conn
suffix:semicolon
r_if
c_cond
(paren
id|handle
op_ge
id|HCI_MAX_CONN
)paren
r_return
l_int|NULL
suffix:semicolon
id|conn_hash_lock
c_func
(paren
id|h
)paren
suffix:semicolon
id|conn
op_assign
id|__conn_hash_del
c_func
(paren
id|h
comma
id|handle
)paren
suffix:semicolon
id|conn_hash_unlock
c_func
(paren
id|h
)paren
suffix:semicolon
r_return
id|conn
suffix:semicolon
)brace
DECL|function|__conn_hash_lookup
r_static
id|__inline__
r_void
op_star
id|__conn_hash_lookup
c_func
(paren
r_struct
id|conn_hash
op_star
id|h
comma
id|__u16
id|handle
)paren
(brace
r_return
id|h-&gt;conn
(braket
id|handle
)braket
suffix:semicolon
)brace
DECL|function|conn_hash_lookup
r_static
id|__inline__
r_void
op_star
id|conn_hash_lookup
c_func
(paren
r_struct
id|conn_hash
op_star
id|h
comma
id|__u16
id|handle
)paren
(brace
r_void
op_star
id|conn
suffix:semicolon
r_if
c_cond
(paren
id|handle
op_ge
id|HCI_MAX_CONN
)paren
r_return
l_int|NULL
suffix:semicolon
id|conn_hash_lock
c_func
(paren
id|h
)paren
suffix:semicolon
id|conn
op_assign
id|__conn_hash_lookup
c_func
(paren
id|h
comma
id|handle
)paren
suffix:semicolon
id|conn_hash_unlock
c_func
(paren
id|h
)paren
suffix:semicolon
r_return
id|conn
suffix:semicolon
)brace
r_struct
id|hci_dev
suffix:semicolon
multiline_comment|/* ----- HCI Connections ----- */
DECL|struct|hci_conn
r_struct
id|hci_conn
(brace
DECL|member|dst
id|bdaddr_t
id|dst
suffix:semicolon
DECL|member|handle
id|__u16
id|handle
suffix:semicolon
DECL|member|acl_sent
r_int
r_int
id|acl_sent
suffix:semicolon
DECL|member|sco_sent
r_int
r_int
id|sco_sent
suffix:semicolon
DECL|member|hdev
r_struct
id|hci_dev
op_star
id|hdev
suffix:semicolon
DECL|member|l2cap_data
r_void
op_star
id|l2cap_data
suffix:semicolon
DECL|member|priv
r_void
op_star
id|priv
suffix:semicolon
DECL|member|acl_q
r_struct
id|sk_buff_head
id|acl_q
suffix:semicolon
DECL|member|sco_q
r_struct
id|sk_buff_head
id|sco_q
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* ----- HCI Devices ----- */
DECL|struct|hci_dev
r_struct
id|hci_dev
(brace
DECL|member|refcnt
id|atomic_t
id|refcnt
suffix:semicolon
DECL|member|name
r_char
id|name
(braket
l_int|8
)braket
suffix:semicolon
DECL|member|flags
id|__u32
id|flags
suffix:semicolon
DECL|member|id
id|__u16
id|id
suffix:semicolon
DECL|member|type
id|__u8
id|type
suffix:semicolon
DECL|member|bdaddr
id|bdaddr_t
id|bdaddr
suffix:semicolon
DECL|member|cmd_cnt
id|atomic_t
id|cmd_cnt
suffix:semicolon
DECL|member|acl_cnt
r_int
r_int
id|acl_cnt
suffix:semicolon
DECL|member|sco_cnt
r_int
r_int
id|sco_cnt
suffix:semicolon
DECL|member|acl_mtu
r_int
r_int
id|acl_mtu
suffix:semicolon
DECL|member|sco_mtu
r_int
r_int
id|sco_mtu
suffix:semicolon
DECL|member|acl_max
r_int
r_int
id|acl_max
suffix:semicolon
DECL|member|sco_max
r_int
r_int
id|sco_max
suffix:semicolon
DECL|member|driver_data
r_void
op_star
id|driver_data
suffix:semicolon
DECL|member|l2cap_data
r_void
op_star
id|l2cap_data
suffix:semicolon
DECL|member|priv
r_void
op_star
id|priv
suffix:semicolon
DECL|member|cmd_task
r_struct
id|tasklet_struct
id|cmd_task
suffix:semicolon
DECL|member|rx_task
r_struct
id|tasklet_struct
id|rx_task
suffix:semicolon
DECL|member|tx_task
r_struct
id|tasklet_struct
id|tx_task
suffix:semicolon
DECL|member|rx_q
r_struct
id|sk_buff_head
id|rx_q
suffix:semicolon
DECL|member|raw_q
r_struct
id|sk_buff_head
id|raw_q
suffix:semicolon
DECL|member|cmd_q
r_struct
id|sk_buff_head
id|cmd_q
suffix:semicolon
DECL|member|cmd_sent
r_struct
id|sk_buff
op_star
id|cmd_sent
suffix:semicolon
DECL|member|req_lock
r_struct
id|semaphore
id|req_lock
suffix:semicolon
DECL|member|req_wait_q
id|wait_queue_head_t
id|req_wait_q
suffix:semicolon
DECL|member|req_status
id|__u32
id|req_status
suffix:semicolon
DECL|member|req_result
id|__u32
id|req_result
suffix:semicolon
DECL|member|inq_cache
r_struct
id|inquiry_cache
id|inq_cache
suffix:semicolon
DECL|member|conn_hash
r_struct
id|conn_hash
id|conn_hash
suffix:semicolon
DECL|member|stat
r_struct
id|hci_dev_stats
id|stat
suffix:semicolon
DECL|member|open
r_int
(paren
op_star
id|open
)paren
(paren
r_struct
id|hci_dev
op_star
id|hdev
)paren
suffix:semicolon
DECL|member|close
r_int
(paren
op_star
id|close
)paren
(paren
r_struct
id|hci_dev
op_star
id|hdev
)paren
suffix:semicolon
DECL|member|flush
r_int
(paren
op_star
id|flush
)paren
(paren
r_struct
id|hci_dev
op_star
id|hdev
)paren
suffix:semicolon
DECL|member|send
r_int
(paren
op_star
id|send
)paren
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|function|hci_dev_hold
r_static
id|__inline__
r_void
id|hci_dev_hold
c_func
(paren
r_struct
id|hci_dev
op_star
id|hdev
)paren
(brace
id|atomic_inc
c_func
(paren
op_amp
id|hdev-&gt;refcnt
)paren
suffix:semicolon
)brace
DECL|function|hci_dev_put
r_static
id|__inline__
r_void
id|hci_dev_put
c_func
(paren
r_struct
id|hci_dev
op_star
id|hdev
)paren
(brace
id|atomic_dec
c_func
(paren
op_amp
id|hdev-&gt;refcnt
)paren
suffix:semicolon
)brace
r_extern
r_struct
id|hci_dev
op_star
id|hci_dev_get
c_func
(paren
r_int
id|index
)paren
suffix:semicolon
DECL|macro|SENT_CMD_PARAM
mdefine_line|#define SENT_CMD_PARAM(X)&t;(((X-&gt;cmd_sent-&gt;data) + HCI_COMMAND_HDR_SIZE))
r_extern
r_int
id|hci_register_dev
c_func
(paren
r_struct
id|hci_dev
op_star
id|hdev
)paren
suffix:semicolon
r_extern
r_int
id|hci_unregister_dev
c_func
(paren
r_struct
id|hci_dev
op_star
id|hdev
)paren
suffix:semicolon
r_extern
r_int
id|hci_dev_open
c_func
(paren
id|__u16
id|dev
)paren
suffix:semicolon
r_extern
r_int
id|hci_dev_close
c_func
(paren
id|__u16
id|dev
)paren
suffix:semicolon
r_extern
r_int
id|hci_dev_reset
c_func
(paren
id|__u16
id|dev
)paren
suffix:semicolon
r_extern
r_int
id|hci_dev_reset_stat
c_func
(paren
id|__u16
id|dev
)paren
suffix:semicolon
r_extern
r_int
id|hci_dev_info
c_func
(paren
r_int
r_int
id|arg
)paren
suffix:semicolon
r_extern
r_int
id|hci_dev_list
c_func
(paren
r_int
r_int
id|arg
)paren
suffix:semicolon
r_extern
r_int
id|hci_dev_setscan
c_func
(paren
r_int
r_int
id|arg
)paren
suffix:semicolon
r_extern
r_int
id|hci_dev_setauth
c_func
(paren
r_int
r_int
id|arg
)paren
suffix:semicolon
r_extern
r_int
id|hci_inquiry
c_func
(paren
r_int
r_int
id|arg
)paren
suffix:semicolon
r_extern
id|__u32
id|hci_dev_setmode
c_func
(paren
r_struct
id|hci_dev
op_star
id|hdev
comma
id|__u32
id|mode
)paren
suffix:semicolon
r_extern
id|__u32
id|hci_dev_getmode
c_func
(paren
r_struct
id|hci_dev
op_star
id|hdev
)paren
suffix:semicolon
r_extern
r_int
id|hci_recv_frame
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
multiline_comment|/* ----- HCI tasks ----- */
DECL|function|hci_sched_cmd
r_static
id|__inline__
r_void
id|hci_sched_cmd
c_func
(paren
r_struct
id|hci_dev
op_star
id|hdev
)paren
(brace
id|tasklet_schedule
c_func
(paren
op_amp
id|hdev-&gt;cmd_task
)paren
suffix:semicolon
)brace
DECL|function|hci_sched_rx
r_static
id|__inline__
r_void
id|hci_sched_rx
c_func
(paren
r_struct
id|hci_dev
op_star
id|hdev
)paren
(brace
id|tasklet_schedule
c_func
(paren
op_amp
id|hdev-&gt;rx_task
)paren
suffix:semicolon
)brace
DECL|function|hci_sched_tx
r_static
id|__inline__
r_void
id|hci_sched_tx
c_func
(paren
r_struct
id|hci_dev
op_star
id|hdev
)paren
(brace
id|tasklet_schedule
c_func
(paren
op_amp
id|hdev-&gt;tx_task
)paren
suffix:semicolon
)brace
multiline_comment|/* ----- HCI protocols ----- */
DECL|struct|hci_proto
r_struct
id|hci_proto
(brace
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|id
id|__u32
id|id
suffix:semicolon
DECL|member|flags
id|__u32
id|flags
suffix:semicolon
DECL|member|priv
r_void
op_star
id|priv
suffix:semicolon
DECL|member|connect_ind
r_int
(paren
op_star
id|connect_ind
)paren
(paren
r_struct
id|hci_dev
op_star
id|hdev
comma
id|bdaddr_t
op_star
id|bdaddr
)paren
suffix:semicolon
DECL|member|connect_cfm
r_int
(paren
op_star
id|connect_cfm
)paren
(paren
r_struct
id|hci_dev
op_star
id|hdev
comma
id|bdaddr_t
op_star
id|bdaddr
comma
id|__u8
id|status
comma
r_struct
id|hci_conn
op_star
id|conn
)paren
suffix:semicolon
DECL|member|disconn_ind
r_int
(paren
op_star
id|disconn_ind
)paren
(paren
r_struct
id|hci_conn
op_star
id|conn
comma
id|__u8
id|reason
)paren
suffix:semicolon
DECL|member|recv_acldata
r_int
(paren
op_star
id|recv_acldata
)paren
(paren
r_struct
id|hci_conn
op_star
id|conn
comma
r_struct
id|sk_buff
op_star
id|skb
comma
id|__u16
id|flags
)paren
suffix:semicolon
DECL|member|recv_scodata
r_int
(paren
op_star
id|recv_scodata
)paren
(paren
r_struct
id|hci_conn
op_star
id|conn
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_int
id|hci_register_proto
c_func
(paren
r_struct
id|hci_proto
op_star
id|hproto
)paren
suffix:semicolon
r_extern
r_int
id|hci_unregister_proto
c_func
(paren
r_struct
id|hci_proto
op_star
id|hproto
)paren
suffix:semicolon
r_extern
r_int
id|hci_register_notifier
c_func
(paren
r_struct
id|notifier_block
op_star
id|nb
)paren
suffix:semicolon
r_extern
r_int
id|hci_unregister_notifier
c_func
(paren
r_struct
id|notifier_block
op_star
id|nb
)paren
suffix:semicolon
r_extern
r_int
id|hci_connect
c_func
(paren
r_struct
id|hci_dev
op_star
id|hdev
comma
id|bdaddr_t
op_star
id|bdaddr
)paren
suffix:semicolon
r_extern
r_int
id|hci_disconnect
c_func
(paren
r_struct
id|hci_conn
op_star
id|conn
comma
id|__u8
id|reason
)paren
suffix:semicolon
r_extern
r_int
id|hci_send_cmd
c_func
(paren
r_struct
id|hci_dev
op_star
id|hdev
comma
id|__u16
id|ogf
comma
id|__u16
id|ocf
comma
id|__u32
id|plen
comma
r_void
op_star
id|param
)paren
suffix:semicolon
r_extern
r_int
id|hci_send_raw
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_extern
r_int
id|hci_send_acl
c_func
(paren
r_struct
id|hci_conn
op_star
id|conn
comma
r_struct
id|sk_buff
op_star
id|skb
comma
id|__u16
id|flags
)paren
suffix:semicolon
r_extern
r_int
id|hci_send_sco
c_func
(paren
r_struct
id|hci_conn
op_star
id|conn
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
multiline_comment|/* ----- HCI Sockets ----- */
r_extern
r_void
id|hci_send_to_sock
c_func
(paren
r_struct
id|hci_dev
op_star
id|hdev
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
multiline_comment|/* HCI info for socket */
DECL|macro|hci_pi
mdefine_line|#define hci_pi(sk)&t;((struct hci_pinfo *) &amp;sk-&gt;protinfo)
DECL|struct|hci_pinfo
r_struct
id|hci_pinfo
(brace
DECL|member|hdev
r_struct
id|hci_dev
op_star
id|hdev
suffix:semicolon
DECL|member|cmsg_flags
id|__u32
id|cmsg_flags
suffix:semicolon
DECL|member|mask
id|__u32
id|mask
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* ----- HCI requests ----- */
DECL|macro|HCI_REQ_DONE
mdefine_line|#define HCI_REQ_DONE&t;  0
DECL|macro|HCI_REQ_PEND
mdefine_line|#define HCI_REQ_PEND&t;  1
DECL|macro|HCI_REQ_CANCELED
mdefine_line|#define HCI_REQ_CANCELED  2
macro_line|#endif /* __IF_HCI_CORE_H */
eof
