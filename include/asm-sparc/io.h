multiline_comment|/*&n; * $Id: io.h,v 1.30 2001/12/21 01:23:21 davem Exp $&n; */
macro_line|#ifndef __SPARC_IO_H
DECL|macro|__SPARC_IO_H
mdefine_line|#define __SPARC_IO_H
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/ioport.h&gt;  /* struct resource */
macro_line|#include &lt;asm/page.h&gt;      /* IO address mapping routines need this */
macro_line|#include &lt;asm/system.h&gt;
DECL|macro|page_to_phys
mdefine_line|#define page_to_phys(page)&t;((page - mem_map) &lt;&lt; PAGE_SHIFT)
DECL|function|flip_dword
r_static
id|__inline__
id|u32
id|flip_dword
(paren
id|u32
id|d
)paren
(brace
r_return
(paren
(paren
id|d
op_amp
l_int|0xff
)paren
op_lshift
l_int|24
)paren
op_or
(paren
(paren
(paren
id|d
op_rshift
l_int|8
)paren
op_amp
l_int|0xff
)paren
op_lshift
l_int|16
)paren
op_or
(paren
(paren
(paren
id|d
op_rshift
l_int|16
)paren
op_amp
l_int|0xff
)paren
op_lshift
l_int|8
)paren
op_or
(paren
(paren
id|d
op_rshift
l_int|24
)paren
op_amp
l_int|0xff
)paren
suffix:semicolon
)brace
DECL|function|flip_word
r_static
id|__inline__
id|u16
id|flip_word
(paren
id|u16
id|d
)paren
(brace
r_return
(paren
(paren
id|d
op_amp
l_int|0xff
)paren
op_lshift
l_int|8
)paren
op_or
(paren
(paren
id|d
op_rshift
l_int|8
)paren
op_amp
l_int|0xff
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Memory mapped I/O to PCI&n; *&n; * Observe that ioremap returns void* cookie, but accessors, such&n; * as readb, take unsigned long as address, by API. This mismatch&n; * happened historically. The ioremap is much older than accessors,&n; * so at one time ioremap&squot;s cookie was used as address (*a = val).&n; * When accessors came about, they were designed to be compatible across&n; * buses, so that drivers can select proper ones like sunhme.c did.&n; * To make that easier, they use same aruments (ulong) for sbus, pci, isa.&n; * The offshot is, we must cast readb et. al. arguments with a #define.&n; */
DECL|function|__raw_readb
r_static
id|__inline__
id|u8
id|__raw_readb
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
id|u8
op_star
)paren
id|addr
suffix:semicolon
)brace
DECL|function|__raw_readw
r_static
id|__inline__
id|u16
id|__raw_readw
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
id|u16
op_star
)paren
id|addr
suffix:semicolon
)brace
DECL|function|__raw_readl
r_static
id|__inline__
id|u32
id|__raw_readl
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
id|u32
op_star
)paren
id|addr
suffix:semicolon
)brace
DECL|function|__raw_writeb
r_static
id|__inline__
r_void
id|__raw_writeb
c_func
(paren
id|u8
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
id|u8
op_star
)paren
id|addr
op_assign
id|b
suffix:semicolon
)brace
DECL|function|__raw_writew
r_static
id|__inline__
r_void
id|__raw_writew
c_func
(paren
id|u16
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
id|u16
op_star
)paren
id|addr
op_assign
id|b
suffix:semicolon
)brace
DECL|function|__raw_writel
r_static
id|__inline__
r_void
id|__raw_writel
c_func
(paren
id|u32
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
id|u32
op_star
)paren
id|addr
op_assign
id|b
suffix:semicolon
)brace
DECL|macro|readb
mdefine_line|#define readb(addr)&t;(*(volatile u8 *)(addr))
DECL|macro|readw
mdefine_line|#define readw(addr)&t;flip_word(*(volatile u16 *)(addr))
DECL|macro|readl
mdefine_line|#define readl(addr)&t;flip_dword(*(volatile u32 *)(addr))
DECL|macro|writeb
mdefine_line|#define writeb(b, a)&t;(*(volatile u8 *)(a) = b)
DECL|macro|writew
mdefine_line|#define writew(b, a)&t;(*(volatile u16 *)(a) = flip_word(b))
DECL|macro|writel
mdefine_line|#define writel(b, a)&t;(*(volatile u32 *)(a) = flip_dword(b))
multiline_comment|/*&n; * I/O space operations&n; *&n; * Arrangement on a Sun is somewhat complicated.&n; *&n; * First of all, we want to use standard Linux drivers&n; * for keyboard, PC serial, etc. These drivers think&n; * they access I/O space and use inb/outb.&n; * On the other hand, EBus bridge accepts PCI *memory*&n; * cycles and converts them into ISA *I/O* cycles.&n; * Ergo, we want inb &amp; outb to generate PCI memory cycles.&n; *&n; * If we want to issue PCI *I/O* cycles, we do this&n; * with a low 64K fixed window in PCIC. This window gets&n; * mapped somewhere into virtual kernel space and we&n; * can use inb/outb again.&n; */
DECL|macro|inb_local
mdefine_line|#define inb_local(addr)&t;&t;readb(addr)
DECL|macro|inb
mdefine_line|#define inb(addr)&t;&t;readb(addr)
DECL|macro|inw
mdefine_line|#define inw(addr)&t;&t;readw(addr)
DECL|macro|inl
mdefine_line|#define inl(addr)&t;&t;readl(addr)
DECL|macro|inb_p
mdefine_line|#define inb_p(addr)&t;&t;readb(addr)
DECL|macro|outb_local
mdefine_line|#define outb_local(b, addr)&t;writeb(b, addr)
DECL|macro|outb
mdefine_line|#define outb(b, addr)&t;&t;writeb(b, addr)
DECL|macro|outw
mdefine_line|#define outw(b, addr)&t;&t;writew(b, addr)
DECL|macro|outl
mdefine_line|#define outl(b, addr)&t;&t;writel(b, addr)
DECL|macro|outb_p
mdefine_line|#define outb_p(b, addr)&t;&t;writeb(b, addr)
r_extern
r_void
id|outsb
c_func
(paren
r_int
r_int
id|addr
comma
r_const
r_void
op_star
id|src
comma
r_int
r_int
id|cnt
)paren
suffix:semicolon
r_extern
r_void
id|outsw
c_func
(paren
r_int
r_int
id|addr
comma
r_const
r_void
op_star
id|src
comma
r_int
r_int
id|cnt
)paren
suffix:semicolon
r_extern
r_void
id|outsl
c_func
(paren
r_int
r_int
id|addr
comma
r_const
r_void
op_star
id|src
comma
r_int
r_int
id|cnt
)paren
suffix:semicolon
r_extern
r_void
id|insb
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|dst
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|insw
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|dst
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|insl
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|dst
comma
r_int
r_int
id|count
)paren
suffix:semicolon
DECL|macro|IO_SPACE_LIMIT
mdefine_line|#define IO_SPACE_LIMIT 0xffffffff
multiline_comment|/*&n; * SBus accessors.&n; *&n; * SBus has only one, memory mapped, I/O space.&n; * We do not need to flip bytes for SBus of course.&n; */
DECL|function|_sbus_readb
r_static
id|__inline__
id|u8
id|_sbus_readb
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
id|u8
op_star
)paren
id|addr
suffix:semicolon
)brace
DECL|function|_sbus_readw
r_static
id|__inline__
id|u16
id|_sbus_readw
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
id|u16
op_star
)paren
id|addr
suffix:semicolon
)brace
DECL|function|_sbus_readl
r_static
id|__inline__
id|u32
id|_sbus_readl
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
id|u32
op_star
)paren
id|addr
suffix:semicolon
)brace
DECL|function|_sbus_writeb
r_static
id|__inline__
r_void
id|_sbus_writeb
c_func
(paren
id|u8
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
id|u8
op_star
)paren
id|addr
op_assign
id|b
suffix:semicolon
)brace
DECL|function|_sbus_writew
r_static
id|__inline__
r_void
id|_sbus_writew
c_func
(paren
id|u16
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
id|u16
op_star
)paren
id|addr
op_assign
id|b
suffix:semicolon
)brace
DECL|function|_sbus_writel
r_static
id|__inline__
r_void
id|_sbus_writel
c_func
(paren
id|u32
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
id|u32
op_star
)paren
id|addr
op_assign
id|b
suffix:semicolon
)brace
multiline_comment|/*&n; * The only reason for #define&squot;s is to hide casts to unsigned long.&n; */
DECL|macro|sbus_readb
mdefine_line|#define sbus_readb(a)&t;&t;_sbus_readb((unsigned long)(a))
DECL|macro|sbus_readw
mdefine_line|#define sbus_readw(a)&t;&t;_sbus_readw((unsigned long)(a))
DECL|macro|sbus_readl
mdefine_line|#define sbus_readl(a)&t;&t;_sbus_readl((unsigned long)(a))
DECL|macro|sbus_writeb
mdefine_line|#define sbus_writeb(v, a)&t;_sbus_writeb(v, (unsigned long)(a))
DECL|macro|sbus_writew
mdefine_line|#define sbus_writew(v, a)&t;_sbus_writew(v, (unsigned long)(a))
DECL|macro|sbus_writel
mdefine_line|#define sbus_writel(v, a)&t;_sbus_writel(v, (unsigned long)(a))
DECL|function|sbus_memset_io
r_static
r_inline
r_void
op_star
id|sbus_memset_io
c_func
(paren
r_void
op_star
id|__dst
comma
r_int
id|c
comma
id|__kernel_size_t
id|n
)paren
(brace
r_int
r_int
id|dst
op_assign
(paren
r_int
r_int
)paren
id|__dst
suffix:semicolon
r_while
c_loop
(paren
id|n
op_decrement
)paren
(brace
id|sbus_writeb
c_func
(paren
id|c
comma
id|dst
)paren
suffix:semicolon
id|dst
op_increment
suffix:semicolon
)brace
r_return
(paren
r_void
op_star
)paren
id|dst
suffix:semicolon
)brace
macro_line|#ifdef __KERNEL__
multiline_comment|/*&n; * Bus number may be embedded in the higher bits of the physical address.&n; * This is why we have no bus number argument to ioremap().&n; */
r_extern
r_void
op_star
id|ioremap
c_func
(paren
r_int
r_int
id|offset
comma
r_int
r_int
id|size
)paren
suffix:semicolon
DECL|macro|ioremap_nocache
mdefine_line|#define ioremap_nocache(X,Y)&t;ioremap((X),(Y))
r_extern
r_void
id|iounmap
c_func
(paren
r_void
op_star
id|addr
)paren
suffix:semicolon
multiline_comment|/*&n; * Bus number may be in res-&gt;flags... somewhere.&n; */
r_extern
r_int
r_int
id|sbus_ioremap
c_func
(paren
r_struct
id|resource
op_star
id|res
comma
r_int
r_int
id|offset
comma
r_int
r_int
id|size
comma
r_char
op_star
id|name
)paren
suffix:semicolon
r_extern
r_void
id|sbus_iounmap
c_func
(paren
r_int
r_int
id|vaddr
comma
r_int
r_int
id|size
)paren
suffix:semicolon
multiline_comment|/*&n; * At the moment, we do not use CMOS_READ anywhere outside of rtc.c,&n; * so rtc_port is static in it. This should not change unless a new&n; * hardware pops up.&n; */
DECL|macro|RTC_PORT
mdefine_line|#define RTC_PORT(x)   (rtc_port + (x))
DECL|macro|RTC_ALWAYS_BCD
mdefine_line|#define RTC_ALWAYS_BCD  0
multiline_comment|/* Nothing to do */
multiline_comment|/* P3: Only IDE DMA may need these. XXX Verify that it still does... */
DECL|macro|dma_cache_inv
mdefine_line|#define dma_cache_inv(_start,_size)&t;&t;do { } while (0)
DECL|macro|dma_cache_wback
mdefine_line|#define dma_cache_wback(_start,_size)&t;&t;do { } while (0)
DECL|macro|dma_cache_wback_inv
mdefine_line|#define dma_cache_wback_inv(_start,_size)&t;do { } while (0)
macro_line|#endif
macro_line|#endif /* !(__SPARC_IO_H) */
eof
