multiline_comment|/* &n; * File...........: linux/include/asm-s390x/idals.h&n; * Author(s)......: Holger Smolinski &lt;Holger.Smolinski@de.ibm.com&gt;&n; *&t;&t;    Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;&n; * Bugreports.to..: &lt;Linux390@de.ibm.com&gt;&n; * (C) IBM Corporation, IBM Deutschland Entwicklung GmbH, 2000a&n; &n; * History of changes&n; * 07/24/00 new file&n; * 05/04/02 code restructuring.&n; */
macro_line|#ifndef _S390_IDALS_H
DECL|macro|_S390_IDALS_H
mdefine_line|#define _S390_IDALS_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/errno.h&gt;
macro_line|#include &lt;linux/err.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/slab.h&gt;
macro_line|#include &lt;asm/cio.h&gt;
macro_line|#include &lt;asm/uaccess.h&gt;
macro_line|#ifdef __s390x__
DECL|macro|IDA_SIZE_LOG
mdefine_line|#define IDA_SIZE_LOG 12 /* 11 for 2k , 12 for 4k */
macro_line|#else
DECL|macro|IDA_SIZE_LOG
mdefine_line|#define IDA_SIZE_LOG 11 /* 11 for 2k , 12 for 4k */
macro_line|#endif
DECL|macro|IDA_BLOCK_SIZE
mdefine_line|#define IDA_BLOCK_SIZE (1L&lt;&lt;IDA_SIZE_LOG)
multiline_comment|/*&n; * Test if an address/length pair needs an idal list.&n; */
r_static
r_inline
r_int
DECL|function|idal_is_needed
id|idal_is_needed
c_func
(paren
r_void
op_star
id|vaddr
comma
r_int
r_int
id|length
)paren
(brace
macro_line|#ifdef __s390x__
r_return
(paren
(paren
id|__pa
c_func
(paren
id|vaddr
)paren
op_plus
id|length
)paren
op_rshift
l_int|31
)paren
op_ne
l_int|0
suffix:semicolon
macro_line|#else
r_return
l_int|0
suffix:semicolon
macro_line|#endif
)brace
multiline_comment|/*&n; * Return the number of idal words needed for an address/length pair.&n; */
r_static
r_inline
r_int
r_int
DECL|function|idal_nr_words
id|idal_nr_words
c_func
(paren
r_void
op_star
id|vaddr
comma
r_int
r_int
id|length
)paren
(brace
macro_line|#ifdef __s390x__
r_if
c_cond
(paren
id|idal_is_needed
c_func
(paren
id|vaddr
comma
id|length
)paren
)paren
r_return
(paren
(paren
id|__pa
c_func
(paren
id|vaddr
)paren
op_amp
(paren
id|IDA_BLOCK_SIZE
op_minus
l_int|1
)paren
)paren
op_plus
id|length
op_plus
(paren
id|IDA_BLOCK_SIZE
op_minus
l_int|1
)paren
)paren
op_rshift
id|IDA_SIZE_LOG
suffix:semicolon
macro_line|#endif
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * Create the list of idal words for an address/length pair.&n; */
r_static
r_inline
r_int
r_int
op_star
DECL|function|idal_create_words
id|idal_create_words
c_func
(paren
r_int
r_int
op_star
id|idaws
comma
r_void
op_star
id|vaddr
comma
r_int
r_int
id|length
)paren
(brace
macro_line|#ifdef __s390x__
r_int
r_int
id|paddr
suffix:semicolon
r_int
r_int
id|cidaw
suffix:semicolon
id|paddr
op_assign
id|__pa
c_func
(paren
id|vaddr
)paren
suffix:semicolon
id|cidaw
op_assign
(paren
(paren
id|paddr
op_amp
(paren
id|IDA_BLOCK_SIZE
op_minus
l_int|1
)paren
)paren
op_plus
id|length
op_plus
(paren
id|IDA_BLOCK_SIZE
op_minus
l_int|1
)paren
)paren
op_rshift
id|IDA_SIZE_LOG
suffix:semicolon
op_star
id|idaws
op_increment
op_assign
id|paddr
suffix:semicolon
id|paddr
op_and_assign
op_minus
id|IDA_BLOCK_SIZE
suffix:semicolon
r_while
c_loop
(paren
op_decrement
id|cidaw
OG
l_int|0
)paren
(brace
id|paddr
op_add_assign
id|IDA_BLOCK_SIZE
suffix:semicolon
op_star
id|idaws
op_increment
op_assign
id|paddr
suffix:semicolon
)brace
macro_line|#endif
r_return
id|idaws
suffix:semicolon
)brace
multiline_comment|/*&n; * Sets the address of the data in CCW.&n; * If necessary it allocates an IDAL and sets the appropriate flags.&n; */
r_static
r_inline
r_int
DECL|function|set_normalized_cda
id|set_normalized_cda
c_func
(paren
r_struct
id|ccw1
op_star
id|ccw
comma
r_void
op_star
id|vaddr
)paren
(brace
macro_line|#ifdef __s390x__
r_int
r_int
id|nridaws
suffix:semicolon
r_int
r_int
op_star
id|idal
suffix:semicolon
r_if
c_cond
(paren
id|ccw-&gt;flags
op_amp
id|CCW_FLAG_IDA
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
id|nridaws
op_assign
id|idal_nr_words
c_func
(paren
id|vaddr
comma
id|ccw-&gt;count
)paren
suffix:semicolon
r_if
c_cond
(paren
id|nridaws
OG
l_int|0
)paren
(brace
id|idal
op_assign
id|kmalloc
c_func
(paren
id|nridaws
op_star
r_sizeof
(paren
r_int
r_int
)paren
comma
id|GFP_ATOMIC
op_or
id|GFP_DMA
)paren
suffix:semicolon
r_if
c_cond
(paren
id|idal
op_eq
l_int|NULL
)paren
r_return
op_minus
id|ENOMEM
suffix:semicolon
id|idal_create_words
c_func
(paren
id|idal
comma
id|vaddr
comma
id|ccw-&gt;count
)paren
suffix:semicolon
id|ccw-&gt;flags
op_or_assign
id|CCW_FLAG_IDA
suffix:semicolon
id|vaddr
op_assign
id|idal
suffix:semicolon
)brace
macro_line|#endif
id|ccw-&gt;cda
op_assign
(paren
id|__u32
)paren
(paren
r_int
r_int
)paren
id|vaddr
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * Releases any allocated IDAL related to the CCW.&n; */
r_static
r_inline
r_void
DECL|function|clear_normalized_cda
id|clear_normalized_cda
c_func
(paren
r_struct
id|ccw1
op_star
id|ccw
)paren
(brace
macro_line|#ifdef __s390x__
r_if
c_cond
(paren
id|ccw-&gt;flags
op_amp
id|CCW_FLAG_IDA
)paren
(brace
id|kfree
c_func
(paren
(paren
r_void
op_star
)paren
(paren
r_int
r_int
)paren
id|ccw-&gt;cda
)paren
suffix:semicolon
id|ccw-&gt;flags
op_and_assign
op_complement
id|CCW_FLAG_IDA
suffix:semicolon
)brace
macro_line|#endif
id|ccw-&gt;cda
op_assign
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * Idal buffer extension&n; */
DECL|struct|idal_buffer
r_struct
id|idal_buffer
(brace
DECL|member|size
r_int
id|size
suffix:semicolon
DECL|member|page_order
r_int
id|page_order
suffix:semicolon
DECL|member|data
r_void
op_star
id|data
(braket
l_int|0
)braket
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * Allocate an idal buffer&n; */
r_static
r_inline
r_struct
id|idal_buffer
op_star
DECL|function|idal_buffer_alloc
id|idal_buffer_alloc
c_func
(paren
r_int
id|size
comma
r_int
id|page_order
)paren
(brace
r_struct
id|idal_buffer
op_star
id|ib
suffix:semicolon
r_int
id|nr_chunks
comma
id|nr_ptrs
comma
id|i
suffix:semicolon
id|nr_ptrs
op_assign
(paren
id|size
op_plus
id|IDA_BLOCK_SIZE
op_minus
l_int|1
)paren
op_rshift
id|IDA_SIZE_LOG
suffix:semicolon
id|nr_chunks
op_assign
(paren
l_int|4096
op_lshift
id|page_order
)paren
op_rshift
id|IDA_SIZE_LOG
suffix:semicolon
id|ib
op_assign
id|kmalloc
c_func
(paren
r_sizeof
(paren
r_struct
id|idal_buffer
)paren
op_plus
id|nr_ptrs
op_star
r_sizeof
(paren
r_void
op_star
)paren
comma
id|GFP_DMA
op_or
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ib
op_eq
l_int|NULL
)paren
r_return
id|ERR_PTR
c_func
(paren
op_minus
id|ENOMEM
)paren
suffix:semicolon
id|ib-&gt;size
op_assign
id|size
suffix:semicolon
id|ib-&gt;page_order
op_assign
id|page_order
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|nr_ptrs
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
(paren
id|i
op_amp
(paren
id|nr_chunks
op_minus
l_int|1
)paren
)paren
op_ne
l_int|0
)paren
(brace
id|ib-&gt;data
(braket
id|i
)braket
op_assign
id|ib-&gt;data
(braket
id|i
op_minus
l_int|1
)braket
op_plus
id|IDA_BLOCK_SIZE
suffix:semicolon
r_continue
suffix:semicolon
)brace
id|ib-&gt;data
(braket
id|i
)braket
op_assign
(paren
r_void
op_star
)paren
id|__get_free_pages
c_func
(paren
id|GFP_KERNEL
comma
id|page_order
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ib-&gt;data
(braket
id|i
)braket
op_ne
l_int|NULL
)paren
r_continue
suffix:semicolon
singleline_comment|// Not enough memory
r_while
c_loop
(paren
id|i
op_ge
id|nr_chunks
)paren
(brace
id|i
op_sub_assign
id|nr_chunks
suffix:semicolon
id|free_pages
c_func
(paren
(paren
r_int
r_int
)paren
id|ib-&gt;data
(braket
id|i
)braket
comma
id|ib-&gt;page_order
)paren
suffix:semicolon
)brace
id|kfree
c_func
(paren
id|ib
)paren
suffix:semicolon
r_return
id|ERR_PTR
c_func
(paren
op_minus
id|ENOMEM
)paren
suffix:semicolon
)brace
r_return
id|ib
suffix:semicolon
)brace
multiline_comment|/*&n; * Free an idal buffer.&n; */
r_static
r_inline
r_void
DECL|function|idal_buffer_free
id|idal_buffer_free
c_func
(paren
r_struct
id|idal_buffer
op_star
id|ib
)paren
(brace
r_int
id|nr_chunks
comma
id|nr_ptrs
comma
id|i
suffix:semicolon
id|nr_ptrs
op_assign
(paren
id|ib-&gt;size
op_plus
id|IDA_BLOCK_SIZE
op_minus
l_int|1
)paren
op_rshift
id|IDA_SIZE_LOG
suffix:semicolon
id|nr_chunks
op_assign
(paren
l_int|4096
op_lshift
id|ib-&gt;page_order
)paren
op_rshift
id|IDA_SIZE_LOG
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|nr_ptrs
suffix:semicolon
id|i
op_add_assign
id|nr_chunks
)paren
id|free_pages
c_func
(paren
(paren
r_int
r_int
)paren
id|ib-&gt;data
(braket
id|i
)braket
comma
id|ib-&gt;page_order
)paren
suffix:semicolon
id|kfree
c_func
(paren
id|ib
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Test if a idal list is really needed.&n; */
r_static
r_inline
r_int
DECL|function|__idal_buffer_is_needed
id|__idal_buffer_is_needed
c_func
(paren
r_struct
id|idal_buffer
op_star
id|ib
)paren
(brace
macro_line|#ifdef __s390x__
r_return
id|ib-&gt;size
OG
(paren
l_int|4096ul
op_lshift
id|ib-&gt;page_order
)paren
op_logical_or
id|idal_is_needed
c_func
(paren
id|ib-&gt;data
(braket
l_int|0
)braket
comma
id|ib-&gt;size
)paren
suffix:semicolon
macro_line|#else
r_return
id|ib-&gt;size
OG
(paren
l_int|4096ul
op_lshift
id|ib-&gt;page_order
)paren
suffix:semicolon
macro_line|#endif
)brace
multiline_comment|/*&n; * Set channel data address to idal buffer.&n; */
r_static
r_inline
r_void
DECL|function|idal_buffer_set_cda
id|idal_buffer_set_cda
c_func
(paren
r_struct
id|idal_buffer
op_star
id|ib
comma
r_struct
id|ccw1
op_star
id|ccw
)paren
(brace
r_if
c_cond
(paren
id|__idal_buffer_is_needed
c_func
(paren
id|ib
)paren
)paren
(brace
singleline_comment|// setup idals;
id|ccw-&gt;cda
op_assign
(paren
id|u32
)paren
(paren
id|addr_t
)paren
id|ib-&gt;data
suffix:semicolon
id|ccw-&gt;flags
op_or_assign
id|CCW_FLAG_IDA
suffix:semicolon
)brace
r_else
singleline_comment|// we do not need idals - use direct addressing
id|ccw-&gt;cda
op_assign
(paren
id|u32
)paren
(paren
id|addr_t
)paren
id|ib-&gt;data
(braket
l_int|0
)braket
suffix:semicolon
id|ccw-&gt;count
op_assign
id|ib-&gt;size
suffix:semicolon
)brace
multiline_comment|/*&n; * Copy count bytes from an idal buffer to user memory&n; */
r_static
r_inline
r_int
DECL|function|idal_buffer_to_user
id|idal_buffer_to_user
c_func
(paren
r_struct
id|idal_buffer
op_star
id|ib
comma
r_void
op_star
id|to
comma
r_int
id|count
)paren
(brace
r_int
id|left
suffix:semicolon
r_int
id|i
suffix:semicolon
r_if
c_cond
(paren
id|count
OG
id|ib-&gt;size
)paren
id|BUG
c_func
(paren
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|count
OG
id|IDA_BLOCK_SIZE
suffix:semicolon
id|i
op_increment
)paren
(brace
id|left
op_assign
id|copy_to_user
c_func
(paren
id|to
comma
id|ib-&gt;data
(braket
id|i
)braket
comma
id|IDA_BLOCK_SIZE
)paren
suffix:semicolon
r_if
c_cond
(paren
id|left
)paren
r_return
id|left
op_plus
id|count
op_minus
id|IDA_BLOCK_SIZE
suffix:semicolon
(paren
id|addr_t
)paren
id|to
op_add_assign
id|IDA_BLOCK_SIZE
suffix:semicolon
id|count
op_sub_assign
id|IDA_BLOCK_SIZE
suffix:semicolon
)brace
r_return
id|copy_to_user
c_func
(paren
id|to
comma
id|ib-&gt;data
(braket
id|i
)braket
comma
id|count
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Copy count bytes from user memory to an idal buffer&n; */
r_static
r_inline
r_int
DECL|function|idal_buffer_from_user
id|idal_buffer_from_user
c_func
(paren
r_struct
id|idal_buffer
op_star
id|ib
comma
r_const
r_void
op_star
id|from
comma
r_int
id|count
)paren
(brace
r_int
id|left
suffix:semicolon
r_int
id|i
suffix:semicolon
r_if
c_cond
(paren
id|count
OG
id|ib-&gt;size
)paren
id|BUG
c_func
(paren
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|count
OG
id|IDA_BLOCK_SIZE
suffix:semicolon
id|i
op_increment
)paren
(brace
id|left
op_assign
id|copy_from_user
c_func
(paren
id|ib-&gt;data
(braket
id|i
)braket
comma
id|from
comma
id|IDA_BLOCK_SIZE
)paren
suffix:semicolon
r_if
c_cond
(paren
id|left
)paren
r_return
id|left
op_plus
id|count
op_minus
id|IDA_BLOCK_SIZE
suffix:semicolon
(paren
id|addr_t
)paren
id|from
op_add_assign
id|IDA_BLOCK_SIZE
suffix:semicolon
id|count
op_sub_assign
id|IDA_BLOCK_SIZE
suffix:semicolon
)brace
r_return
id|copy_from_user
c_func
(paren
id|ib-&gt;data
(braket
id|i
)braket
comma
id|from
comma
id|count
)paren
suffix:semicolon
)brace
macro_line|#endif
eof
