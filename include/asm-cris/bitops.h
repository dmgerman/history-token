multiline_comment|/* $Id: bitops.h,v 1.3 2000/10/17 14:56:27 bjornw Exp $ */
multiline_comment|/* all of these should probably be rewritten in assembler for speed. */
macro_line|#ifndef _CRIS_BITOPS_H
DECL|macro|_CRIS_BITOPS_H
mdefine_line|#define _CRIS_BITOPS_H
macro_line|#include &lt;asm/system.h&gt;
multiline_comment|/*&n; * These have to be done with inline assembly: that way the bit-setting&n; * is guaranteed to be atomic. All bit operations return 0 if the bit&n; * was cleared before the operation and != 0 if it was not.&n; *&n; * bit 0 is the LSB of addr; bit 32 is the LSB of (addr+1).&n; */
multiline_comment|/*&n; * Some hacks to defeat gcc over-optimizations..&n; */
DECL|struct|__dummy
DECL|member|a
r_struct
id|__dummy
(brace
r_int
r_int
id|a
(braket
l_int|100
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|ADDR
mdefine_line|#define ADDR (*(struct __dummy *) addr)
DECL|macro|CONST_ADDR
mdefine_line|#define CONST_ADDR (*(const struct __dummy *) addr)
DECL|macro|set_bit
mdefine_line|#define set_bit(nr, addr)    (void)test_and_set_bit(nr, addr)
DECL|macro|clear_bit
mdefine_line|#define clear_bit(nr, addr)  (void)test_and_clear_bit(nr, addr)
DECL|macro|change_bit
mdefine_line|#define change_bit(nr, addr) (void)test_and_change_bit(nr, addr)
DECL|function|test_and_set_bit
r_extern
id|__inline__
r_int
id|test_and_set_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|mask
comma
id|retval
suffix:semicolon
r_int
r_int
id|flags
suffix:semicolon
r_int
r_int
op_star
id|adr
op_assign
(paren
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
id|adr
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|adr
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|adr
op_or_assign
id|mask
suffix:semicolon
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
multiline_comment|/*&n; * clear_bit() doesn&squot;t provide any barrier for the compiler.&n; */
DECL|macro|smp_mb__before_clear_bit
mdefine_line|#define smp_mb__before_clear_bit()      barrier()
DECL|macro|smp_mb__after_clear_bit
mdefine_line|#define smp_mb__after_clear_bit()       barrier()
DECL|function|test_and_clear_bit
r_extern
id|__inline__
r_int
id|test_and_clear_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|mask
comma
id|retval
suffix:semicolon
r_int
r_int
id|flags
suffix:semicolon
r_int
r_int
op_star
id|adr
op_assign
(paren
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
id|adr
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|adr
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|adr
op_and_assign
op_complement
id|mask
suffix:semicolon
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
DECL|function|test_and_change_bit
r_extern
id|__inline__
r_int
id|test_and_change_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|mask
comma
id|retval
suffix:semicolon
r_int
r_int
id|flags
suffix:semicolon
r_int
r_int
op_star
id|adr
op_assign
(paren
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
id|adr
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|adr
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|adr
op_xor_assign
id|mask
suffix:semicolon
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
multiline_comment|/*&n; * This routine doesn&squot;t need to be atomic.&n; */
DECL|function|test_bit
r_extern
id|__inline__
r_int
id|test_bit
c_func
(paren
r_int
id|nr
comma
r_const
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|mask
suffix:semicolon
r_int
r_int
op_star
id|adr
op_assign
(paren
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
id|adr
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
r_return
(paren
(paren
id|mask
op_amp
op_star
id|adr
)paren
op_ne
l_int|0
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Find-bit routines..&n; */
multiline_comment|/*&n; * ffz = Find First Zero in word. Undefined if no zero exists,&n; * so code should check against ~0UL first..&n; */
DECL|function|ffz
r_extern
id|__inline__
r_int
r_int
id|ffz
c_func
(paren
r_int
r_int
id|word
)paren
(brace
r_int
r_int
id|result
op_assign
l_int|0
suffix:semicolon
r_while
c_loop
(paren
id|word
op_amp
l_int|1
)paren
(brace
id|result
op_increment
suffix:semicolon
id|word
op_rshift_assign
l_int|1
suffix:semicolon
)brace
r_return
id|result
suffix:semicolon
)brace
multiline_comment|/*&n; * Find first one in word. Undefined if no one exists,&n; * so code should check against 0UL first..&n; */
DECL|function|find_first_one
r_extern
id|__inline__
r_int
r_int
id|find_first_one
c_func
(paren
r_int
r_int
id|word
)paren
(brace
r_int
r_int
id|result
op_assign
l_int|0
suffix:semicolon
r_while
c_loop
(paren
op_logical_neg
(paren
id|word
op_amp
l_int|1
)paren
)paren
(brace
id|result
op_increment
suffix:semicolon
id|word
op_rshift_assign
l_int|1
suffix:semicolon
)brace
r_return
id|result
suffix:semicolon
)brace
DECL|function|find_next_zero_bit
r_extern
id|__inline__
r_int
id|find_next_zero_bit
(paren
r_void
op_star
id|addr
comma
r_int
id|size
comma
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|31UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|31UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_rshift
(paren
l_int|32
op_minus
id|offset
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|32
)paren
r_goto
id|found_first
suffix:semicolon
r_if
c_cond
(paren
op_complement
id|tmp
)paren
r_goto
id|found_middle
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
l_int|31UL
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
r_goto
id|found_middle
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
r_return
id|result
suffix:semicolon
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_rshift
id|size
suffix:semicolon
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|tmp
)paren
suffix:semicolon
)brace
DECL|macro|find_first_zero_bit
mdefine_line|#define find_first_zero_bit(addr, size) &bslash;&n;        find_next_zero_bit((addr), (size), 0)
macro_line|#ifdef __KERNEL__ 
DECL|macro|ext2_set_bit
mdefine_line|#define ext2_set_bit                 test_and_set_bit
DECL|macro|ext2_clear_bit
mdefine_line|#define ext2_clear_bit               test_and_clear_bit
DECL|macro|ext2_test_bit
mdefine_line|#define ext2_test_bit                test_bit
DECL|macro|ext2_find_first_zero_bit
mdefine_line|#define ext2_find_first_zero_bit     find_first_zero_bit
DECL|macro|ext2_find_next_zero_bit
mdefine_line|#define ext2_find_next_zero_bit      find_next_zero_bit
multiline_comment|/* Bitmap functions for the minix filesystem.  */
DECL|macro|minix_set_bit
mdefine_line|#define minix_set_bit(nr,addr) test_and_set_bit(nr,addr)
DECL|macro|minix_clear_bit
mdefine_line|#define minix_clear_bit(nr,addr) test_and_clear_bit(nr,addr)
DECL|macro|minix_test_bit
mdefine_line|#define minix_test_bit(nr,addr) test_bit(nr,addr)
DECL|macro|minix_find_first_zero_bit
mdefine_line|#define minix_find_first_zero_bit(addr,size) find_first_zero_bit(addr,size)
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _CRIS_BITOPS_H */
eof
