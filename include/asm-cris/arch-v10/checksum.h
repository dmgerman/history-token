macro_line|#ifndef _CRIS_ARCH_CHECKSUM_H
DECL|macro|_CRIS_ARCH_CHECKSUM_H
mdefine_line|#define _CRIS_ARCH_CHECKSUM_H
multiline_comment|/* Checksum some values used in TCP/UDP headers.&n; *&n; * The gain by doing this in asm is that C will not generate carry-additions&n; * for the 32-bit components of the checksum, so otherwise we would have had&n; * to split all of those into 16-bit components, then add.&n; */
r_extern
r_inline
r_int
r_int
DECL|function|csum_tcpudp_nofold
id|csum_tcpudp_nofold
c_func
(paren
r_int
r_int
id|saddr
comma
r_int
r_int
id|daddr
comma
r_int
r_int
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
r_int
id|res
suffix:semicolon
id|__asm__
(paren
l_string|&quot;add.d %2, %0&bslash;n&bslash;t&quot;
l_string|&quot;ax&bslash;n&bslash;t&quot;
l_string|&quot;add.d %3, %0&bslash;n&bslash;t&quot;
l_string|&quot;ax&bslash;n&bslash;t&quot;
l_string|&quot;add.d %4, %0&bslash;n&bslash;t&quot;
l_string|&quot;ax&bslash;n&bslash;t&quot;
l_string|&quot;addq 0, %0&bslash;n&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|res
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|sum
)paren
comma
l_string|&quot;r&quot;
(paren
id|daddr
)paren
comma
l_string|&quot;r&quot;
(paren
id|saddr
)paren
comma
l_string|&quot;r&quot;
(paren
(paren
id|ntohs
c_func
(paren
id|len
)paren
op_lshift
l_int|16
)paren
op_plus
(paren
id|proto
op_lshift
l_int|8
)paren
)paren
)paren
suffix:semicolon
r_return
id|res
suffix:semicolon
)brace
macro_line|#endif
eof
