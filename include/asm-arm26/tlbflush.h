macro_line|#ifndef __ASMARM_TLBFLUSH_H
DECL|macro|__ASMARM_TLBFLUSH_H
mdefine_line|#define __ASMARM_TLBFLUSH_H
multiline_comment|/*&n; * TLB flushing:&n; *&n; *  - flush_tlb_all() flushes all processes TLBs&n; *  - flush_tlb_mm(mm) flushes the specified mm context TLB&squot;s&n; *  - flush_tlb_page(vma, vmaddr) flushes one page&n; *  - flush_tlb_range(vma, start, end) flushes a range of pages&n; */
DECL|macro|flush_tlb_all
mdefine_line|#define flush_tlb_all()&t;&t;&t;&t;memc_update_all()
DECL|macro|flush_tlb_mm
mdefine_line|#define flush_tlb_mm(mm)&t;&t;&t;memc_update_mm(mm)
DECL|macro|flush_tlb_page
mdefine_line|#define flush_tlb_page(vma, vmaddr)&t;&t;do { printk(&quot;flush_tlb_page&bslash;n&quot;);} while (0)  
singleline_comment|// IS THIS RIGHT?
DECL|macro|flush_tlb_range
mdefine_line|#define flush_tlb_range(vma,start,end)&t;&t;&bslash;&n;&t;&t;do { memc_update_mm(vma-&gt;vm_mm); (void)(start); (void)(end); } while (0)
DECL|macro|flush_tlb_pgtables
mdefine_line|#define flush_tlb_pgtables(mm,start,end)        do { printk(&quot;flush_tlb_pgtables&bslash;n&quot;);} while (0)
DECL|macro|flush_tlb_kernel_range
mdefine_line|#define flush_tlb_kernel_range(s,e)             do { printk(&quot;flush_tlb_range&bslash;n&quot;);} while (0)
multiline_comment|/*&n; * The following handle the weird MEMC chip&n; */
DECL|function|memc_update_all
r_static
r_inline
r_void
id|memc_update_all
c_func
(paren
r_void
)paren
(brace
r_struct
id|task_struct
op_star
id|p
suffix:semicolon
id|cpu_memc_update_all
c_func
(paren
id|init_mm.pgd
)paren
suffix:semicolon
id|for_each_process
c_func
(paren
id|p
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|p-&gt;mm
)paren
r_continue
suffix:semicolon
id|cpu_memc_update_all
c_func
(paren
id|p-&gt;mm-&gt;pgd
)paren
suffix:semicolon
)brace
id|processor
dot
id|_set_pgd
c_func
(paren
id|current-&gt;active_mm-&gt;pgd
)paren
suffix:semicolon
)brace
DECL|function|memc_update_mm
r_static
r_inline
r_void
id|memc_update_mm
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
id|cpu_memc_update_all
c_func
(paren
id|mm-&gt;pgd
)paren
suffix:semicolon
r_if
c_cond
(paren
id|mm
op_eq
id|current-&gt;active_mm
)paren
id|processor
dot
id|_set_pgd
c_func
(paren
id|mm-&gt;pgd
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|memc_clear
id|memc_clear
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_struct
id|page
op_star
id|page
)paren
(brace
id|cpu_memc_update_entry
c_func
(paren
id|mm-&gt;pgd
comma
(paren
r_int
r_int
)paren
id|page_address
c_func
(paren
id|page
)paren
comma
l_int|0
)paren
suffix:semicolon
r_if
c_cond
(paren
id|mm
op_eq
id|current-&gt;active_mm
)paren
id|processor
dot
id|_set_pgd
c_func
(paren
id|mm-&gt;pgd
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|memc_update_addr
id|memc_update_addr
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
id|pte_t
id|pte
comma
r_int
r_int
id|vaddr
)paren
(brace
id|cpu_memc_update_entry
c_func
(paren
id|mm-&gt;pgd
comma
id|pte_val
c_func
(paren
id|pte
)paren
comma
id|vaddr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|mm
op_eq
id|current-&gt;active_mm
)paren
id|processor
dot
id|_set_pgd
c_func
(paren
id|mm-&gt;pgd
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|update_mmu_cache
id|update_mmu_cache
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|addr
comma
id|pte_t
id|pte
)paren
(brace
r_struct
id|mm_struct
op_star
id|mm
op_assign
id|vma-&gt;vm_mm
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;update_mmu_cache&bslash;n&quot;
)paren
suffix:semicolon
id|memc_update_addr
c_func
(paren
id|mm
comma
id|pte
comma
id|addr
)paren
suffix:semicolon
)brace
macro_line|#endif
eof
