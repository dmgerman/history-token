multiline_comment|/* Written 2000 by Andi Kleen */
macro_line|#ifndef __ARCH_DESC_H
DECL|macro|__ARCH_DESC_H
mdefine_line|#define __ARCH_DESC_H
macro_line|#include &lt;linux/threads.h&gt;
macro_line|#include &lt;asm/ldt.h&gt;
macro_line|#ifndef __ASSEMBLY__
multiline_comment|/* Keep this syncronized with kernel/head.S */
DECL|macro|TSS_START
mdefine_line|#define TSS_START (7 * 8)
DECL|macro|LDT_START
mdefine_line|#define LDT_START (TSS_START + NR_CPUS*16) 
DECL|macro|__TSS
mdefine_line|#define __TSS(n)  (TSS_START + (n)*16)
DECL|macro|__LDT
mdefine_line|#define __LDT(n)  (LDT_START + (n)*16)
r_extern
id|__u8
id|tss_start
(braket
)braket
suffix:semicolon
r_extern
id|__u8
id|gdt_table
(braket
)braket
suffix:semicolon
r_extern
id|__u8
id|ldt_start
(braket
)braket
suffix:semicolon
r_extern
id|__u8
id|gdt_end
(braket
)braket
suffix:semicolon
r_enum
(brace
DECL|enumerator|GATE_INTERRUPT
id|GATE_INTERRUPT
op_assign
l_int|0xE
comma
DECL|enumerator|GATE_TRAP
id|GATE_TRAP
op_assign
l_int|0xF
comma
DECL|enumerator|GATE_CALL
id|GATE_CALL
op_assign
l_int|0xC
comma
)brace
suffix:semicolon
singleline_comment|// 16byte gate
DECL|struct|gate_struct
r_struct
id|gate_struct
(brace
DECL|member|offset_low
id|u16
id|offset_low
suffix:semicolon
DECL|member|segment
id|u16
id|segment
suffix:semicolon
DECL|member|ist
DECL|member|zero0
DECL|member|type
DECL|member|dpl
DECL|member|p
r_int
id|ist
suffix:colon
l_int|3
comma
id|zero0
suffix:colon
l_int|5
comma
id|type
suffix:colon
l_int|5
comma
id|dpl
suffix:colon
l_int|2
comma
id|p
suffix:colon
l_int|1
suffix:semicolon
DECL|member|offset_middle
id|u16
id|offset_middle
suffix:semicolon
DECL|member|offset_high
id|u32
id|offset_high
suffix:semicolon
DECL|member|zero1
id|u32
id|zero1
suffix:semicolon
)brace
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|macro|PTR_LOW
mdefine_line|#define PTR_LOW(x) ((unsigned long)(x) &amp; 0xFFFF) 
DECL|macro|PTR_MIDDLE
mdefine_line|#define PTR_MIDDLE(x) (((unsigned long)(x) &gt;&gt; 16) &amp; 0xFFFF)
DECL|macro|PTR_HIGH
mdefine_line|#define PTR_HIGH(x) ((unsigned long)(x) &gt;&gt; 32)
singleline_comment|// 8 byte segment descriptor
DECL|struct|desc_struct
r_struct
id|desc_struct
(brace
DECL|member|limit0
id|u16
id|limit0
suffix:semicolon
DECL|member|base0
id|u16
id|base0
suffix:semicolon
DECL|member|base1
DECL|member|type
DECL|member|s
DECL|member|dpl
DECL|member|p
r_int
id|base1
suffix:colon
l_int|8
comma
id|type
suffix:colon
l_int|4
comma
id|s
suffix:colon
l_int|1
comma
id|dpl
suffix:colon
l_int|2
comma
id|p
suffix:colon
l_int|1
suffix:semicolon
DECL|member|limit
DECL|member|avl
DECL|member|l
DECL|member|d
DECL|member|g
DECL|member|base2
r_int
id|limit
suffix:colon
l_int|4
comma
id|avl
suffix:colon
l_int|1
comma
id|l
suffix:colon
l_int|1
comma
id|d
suffix:colon
l_int|1
comma
id|g
suffix:colon
l_int|1
comma
id|base2
suffix:colon
l_int|8
suffix:semicolon
)brace
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
r_enum
(brace
DECL|enumerator|DESC_TSS
id|DESC_TSS
op_assign
l_int|0x9
comma
DECL|enumerator|DESC_LDT
id|DESC_LDT
op_assign
l_int|0x2
comma
DECL|enumerator|TSSLIMIT
id|TSSLIMIT
op_assign
l_int|0x67
comma
)brace
suffix:semicolon
singleline_comment|// LDT or TSS descriptor in the GDT. 16 bytes.
DECL|struct|ldttss_desc
r_struct
id|ldttss_desc
(brace
DECL|member|limit0
id|u16
id|limit0
suffix:semicolon
DECL|member|base0
id|u16
id|base0
suffix:semicolon
DECL|member|base1
DECL|member|type
DECL|member|dpl
DECL|member|p
r_int
id|base1
suffix:colon
l_int|8
comma
id|type
suffix:colon
l_int|5
comma
id|dpl
suffix:colon
l_int|2
comma
id|p
suffix:colon
l_int|1
suffix:semicolon
DECL|member|limit1
DECL|member|zero0
DECL|member|g
DECL|member|base2
r_int
id|limit1
suffix:colon
l_int|4
comma
id|zero0
suffix:colon
l_int|3
comma
id|g
suffix:colon
l_int|1
comma
id|base2
suffix:colon
l_int|8
suffix:semicolon
DECL|member|base3
id|u32
id|base3
suffix:semicolon
DECL|member|zero1
id|u32
id|zero1
suffix:semicolon
)brace
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|struct|desc_ptr
r_struct
id|desc_ptr
(brace
DECL|member|size
r_int
r_int
id|size
suffix:semicolon
DECL|member|address
r_int
r_int
id|address
suffix:semicolon
)brace
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* FIXME: these should use more generic register classes */
DECL|macro|load_TR
mdefine_line|#define load_TR(n) asm volatile(&quot;ltr %%ax&quot;::&quot;a&quot; (__TSS(n)))
DECL|macro|__load_LDT
mdefine_line|#define __load_LDT(n) asm volatile(&quot;lldt %%ax&quot;::&quot;a&quot; (__LDT(n)))
multiline_comment|/*&n; * This is the ldt that every process will get unless we need&n; * something other than this.&n; */
r_extern
r_struct
id|desc_struct
id|default_ldt
(braket
)braket
suffix:semicolon
r_extern
r_struct
id|gate_struct
id|idt_table
(braket
)braket
suffix:semicolon
DECL|function|_set_gate
r_static
r_inline
r_void
id|_set_gate
c_func
(paren
r_void
op_star
id|adr
comma
r_int
id|type
comma
r_int
r_int
id|func
comma
r_int
id|dpl
comma
r_int
id|ist
)paren
(brace
r_struct
id|gate_struct
id|s
suffix:semicolon
id|s.offset_low
op_assign
id|PTR_LOW
c_func
(paren
id|func
)paren
suffix:semicolon
id|s.segment
op_assign
id|__KERNEL_CS
suffix:semicolon
id|s.ist
op_assign
id|ist
suffix:semicolon
id|s.p
op_assign
l_int|1
suffix:semicolon
id|s.dpl
op_assign
id|dpl
suffix:semicolon
id|s.zero0
op_assign
l_int|0
suffix:semicolon
id|s.zero1
op_assign
l_int|0
suffix:semicolon
id|s.type
op_assign
id|type
suffix:semicolon
id|s.offset_middle
op_assign
id|PTR_MIDDLE
c_func
(paren
id|func
)paren
suffix:semicolon
id|s.offset_high
op_assign
id|PTR_HIGH
c_func
(paren
id|func
)paren
suffix:semicolon
multiline_comment|/* does not need to be atomic because it is only done once at setup time */
id|memcpy
c_func
(paren
id|adr
comma
op_amp
id|s
comma
l_int|16
)paren
suffix:semicolon
)brace
DECL|function|set_intr_gate
r_static
r_inline
r_void
id|set_intr_gate
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|func
)paren
(brace
id|_set_gate
c_func
(paren
op_amp
id|idt_table
(braket
id|nr
)braket
comma
id|GATE_INTERRUPT
comma
(paren
r_int
r_int
)paren
id|func
comma
l_int|3
comma
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|set_intr_gate_ist
r_static
r_inline
r_void
id|set_intr_gate_ist
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|func
comma
r_int
id|ist
)paren
(brace
id|_set_gate
c_func
(paren
op_amp
id|idt_table
(braket
id|nr
)braket
comma
id|GATE_INTERRUPT
comma
(paren
r_int
r_int
)paren
id|func
comma
l_int|3
comma
id|ist
)paren
suffix:semicolon
)brace
DECL|function|set_system_gate
r_static
r_inline
r_void
id|set_system_gate
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|func
)paren
(brace
id|_set_gate
c_func
(paren
op_amp
id|idt_table
(braket
id|nr
)braket
comma
id|GATE_INTERRUPT
comma
(paren
r_int
r_int
)paren
id|func
comma
l_int|3
comma
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|set_trap_gate
r_static
r_inline
r_void
id|set_trap_gate
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|func
)paren
(brace
id|_set_gate
c_func
(paren
op_amp
id|idt_table
(braket
id|nr
)braket
comma
id|GATE_TRAP
comma
(paren
r_int
r_int
)paren
id|func
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|set_call_gate
r_static
r_inline
r_void
id|set_call_gate
c_func
(paren
r_void
op_star
id|adr
comma
r_void
op_star
id|func
)paren
(brace
id|_set_gate
c_func
(paren
id|adr
comma
id|GATE_CALL
comma
(paren
r_int
r_int
)paren
id|func
comma
l_int|3
comma
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|set_priv_gate
r_static
r_inline
r_void
id|set_priv_gate
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|func
)paren
(brace
id|_set_gate
c_func
(paren
op_amp
id|idt_table
(braket
id|nr
)braket
comma
id|GATE_TRAP
comma
(paren
r_int
r_int
)paren
id|func
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|set_tssldt_descriptor
r_static
r_inline
r_void
id|set_tssldt_descriptor
c_func
(paren
r_void
op_star
id|ptr
comma
r_int
r_int
id|tss
comma
r_int
id|type
comma
r_int
id|size
)paren
(brace
r_struct
id|ldttss_desc
id|d
suffix:semicolon
id|memset
c_func
(paren
op_amp
id|d
comma
l_int|0
comma
r_sizeof
(paren
id|d
)paren
)paren
suffix:semicolon
id|d.limit0
op_assign
id|size
op_amp
l_int|0xFFFF
suffix:semicolon
id|d.base0
op_assign
id|PTR_LOW
c_func
(paren
id|tss
)paren
suffix:semicolon
id|d.base1
op_assign
id|PTR_MIDDLE
c_func
(paren
id|tss
)paren
op_amp
l_int|0xFF
suffix:semicolon
id|d.type
op_assign
id|type
suffix:semicolon
id|d.p
op_assign
l_int|1
suffix:semicolon
id|d.limit1
op_assign
l_int|0xF
suffix:semicolon
id|d.base2
op_assign
(paren
id|PTR_MIDDLE
c_func
(paren
id|tss
)paren
op_rshift
l_int|8
)paren
op_amp
l_int|0xFF
suffix:semicolon
id|d.base3
op_assign
id|PTR_HIGH
c_func
(paren
id|tss
)paren
suffix:semicolon
id|memcpy
c_func
(paren
id|ptr
comma
op_amp
id|d
comma
l_int|16
)paren
suffix:semicolon
)brace
DECL|function|set_tss_desc
r_static
r_inline
r_void
id|set_tss_desc
c_func
(paren
r_int
id|n
comma
r_void
op_star
id|addr
)paren
(brace
id|set_tssldt_descriptor
c_func
(paren
(paren
id|__u8
op_star
)paren
id|gdt_table
op_plus
id|__TSS
c_func
(paren
id|n
)paren
comma
(paren
r_int
r_int
)paren
id|addr
comma
id|DESC_TSS
comma
id|TSSLIMIT
)paren
suffix:semicolon
)brace
DECL|function|set_ldt_desc
r_static
r_inline
r_void
id|set_ldt_desc
c_func
(paren
r_int
id|n
comma
r_void
op_star
id|addr
comma
r_int
id|size
)paren
(brace
id|set_tssldt_descriptor
c_func
(paren
(paren
id|__u8
op_star
)paren
id|gdt_table
op_plus
id|__LDT
c_func
(paren
id|n
)paren
comma
(paren
r_int
r_int
)paren
id|addr
comma
id|DESC_LDT
comma
id|size
)paren
suffix:semicolon
)brace
macro_line|#ifndef MINIKERNEL
DECL|function|clear_LDT
r_extern
r_inline
r_void
id|clear_LDT
c_func
(paren
r_void
)paren
(brace
r_int
id|cpu
op_assign
id|smp_processor_id
c_func
(paren
)paren
suffix:semicolon
id|set_ldt_desc
c_func
(paren
id|cpu
comma
op_amp
id|default_ldt
(braket
l_int|0
)braket
comma
l_int|5
)paren
suffix:semicolon
id|__load_LDT
c_func
(paren
id|cpu
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * load one particular LDT into the current CPU&n; */
DECL|function|load_LDT
r_extern
r_inline
r_void
id|load_LDT
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
r_int
id|cpu
op_assign
id|smp_processor_id
c_func
(paren
)paren
suffix:semicolon
r_void
op_star
id|segments
op_assign
id|mm-&gt;context.segments
suffix:semicolon
r_int
id|count
op_assign
id|LDT_ENTRIES
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|segments
)paren
(brace
id|segments
op_assign
op_amp
id|default_ldt
(braket
l_int|0
)braket
suffix:semicolon
id|count
op_assign
l_int|5
suffix:semicolon
)brace
id|set_ldt_desc
c_func
(paren
id|cpu
comma
id|segments
comma
id|count
)paren
suffix:semicolon
id|__load_LDT
c_func
(paren
id|cpu
)paren
suffix:semicolon
)brace
macro_line|#endif
macro_line|#endif /* !__ASSEMBLY__ */
macro_line|#endif
eof
