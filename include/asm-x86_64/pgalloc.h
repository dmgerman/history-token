macro_line|#ifndef _X86_64_PGALLOC_H
DECL|macro|_X86_64_PGALLOC_H
mdefine_line|#define _X86_64_PGALLOC_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;asm/processor.h&gt;
macro_line|#include &lt;asm/fixmap.h&gt;
macro_line|#include &lt;asm/pda.h&gt;
macro_line|#include &lt;linux/threads.h&gt;
macro_line|#include &lt;linux/mm.h&gt;
DECL|macro|inc_pgcache_size
mdefine_line|#define inc_pgcache_size() add_pda(pgtable_cache_sz,1UL)
DECL|macro|dec_pgcache_size
mdefine_line|#define dec_pgcache_size() sub_pda(pgtable_cache_sz,1UL)
DECL|macro|pmd_populate
mdefine_line|#define pmd_populate(mm, pmd, pte) &bslash;&n;&t;&t;set_pmd(pmd, __pmd(_PAGE_TABLE | __pa(pte)))
DECL|macro|pgd_populate
mdefine_line|#define pgd_populate(mm, pgd, pmd) &bslash;&n;&t;&t;set_pgd(pgd, __pgd(_PAGE_TABLE | __pa(pmd)))
DECL|function|get_pmd_slow
r_extern
id|__inline__
id|pmd_t
op_star
id|get_pmd_slow
c_func
(paren
r_void
)paren
(brace
id|pmd_t
op_star
id|ret
op_assign
(paren
id|pmd_t
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ret
)paren
id|memset
c_func
(paren
id|ret
comma
l_int|0
comma
id|PAGE_SIZE
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|get_pmd_fast
r_extern
id|__inline__
id|pmd_t
op_star
id|get_pmd_fast
c_func
(paren
r_void
)paren
(brace
r_int
r_int
op_star
id|ret
suffix:semicolon
id|preempt_disable
c_func
(paren
)paren
suffix:semicolon
id|ret
op_assign
id|read_pda
c_func
(paren
id|pmd_quick
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ret
)paren
(brace
id|write_pda
c_func
(paren
id|pmd_quick
comma
(paren
r_int
r_int
op_star
)paren
(paren
op_star
id|ret
)paren
)paren
suffix:semicolon
id|ret
(braket
l_int|0
)braket
op_assign
l_int|0
suffix:semicolon
id|dec_pgcache_size
c_func
(paren
)paren
suffix:semicolon
)brace
id|preempt_enable
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|ret
)paren
id|ret
op_assign
(paren
r_int
r_int
op_star
)paren
id|get_pmd_slow
c_func
(paren
)paren
suffix:semicolon
r_return
(paren
id|pmd_t
op_star
)paren
id|ret
suffix:semicolon
)brace
DECL|function|pmd_free
r_extern
id|__inline__
r_void
id|pmd_free
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
id|preempt_disable
c_func
(paren
)paren
suffix:semicolon
op_star
(paren
r_int
r_int
op_star
)paren
id|pmd
op_assign
(paren
r_int
r_int
)paren
id|read_pda
c_func
(paren
id|pmd_quick
)paren
suffix:semicolon
id|write_pda
c_func
(paren
id|pmd_quick
comma
(paren
r_int
r_int
op_star
)paren
id|pmd
)paren
suffix:semicolon
id|inc_pgcache_size
c_func
(paren
)paren
suffix:semicolon
id|preempt_enable
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|pmd_free_slow
r_extern
id|__inline__
r_void
id|pmd_free_slow
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
r_if
c_cond
(paren
(paren
r_int
r_int
)paren
id|pmd
op_amp
(paren
id|PAGE_SIZE
op_minus
l_int|1
)paren
)paren
id|BUG
c_func
(paren
)paren
suffix:semicolon
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pmd
)paren
suffix:semicolon
)brace
DECL|function|pmd_alloc_one_fast
r_static
r_inline
id|pmd_t
op_star
id|pmd_alloc_one_fast
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|addr
)paren
(brace
r_int
r_int
op_star
id|ret
suffix:semicolon
id|preempt_disable
c_func
(paren
)paren
suffix:semicolon
id|ret
op_assign
(paren
r_int
r_int
op_star
)paren
id|read_pda
c_func
(paren
id|pmd_quick
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__builtin_expect
c_func
(paren
id|ret
op_ne
l_int|NULL
comma
l_int|1
)paren
)paren
(brace
id|write_pda
c_func
(paren
id|pmd_quick
comma
(paren
r_int
r_int
op_star
)paren
(paren
op_star
id|ret
)paren
)paren
suffix:semicolon
id|ret
(braket
l_int|0
)braket
op_assign
l_int|0
suffix:semicolon
id|dec_pgcache_size
c_func
(paren
)paren
suffix:semicolon
)brace
id|preempt_enable
c_func
(paren
)paren
suffix:semicolon
r_return
(paren
id|pmd_t
op_star
)paren
id|ret
suffix:semicolon
)brace
DECL|function|pmd_alloc_one
r_static
r_inline
id|pmd_t
op_star
id|pmd_alloc_one
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|addr
)paren
(brace
id|pmd_t
op_star
id|pmd
op_assign
(paren
id|pmd_t
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__builtin_expect
c_func
(paren
id|pmd
op_ne
l_int|NULL
comma
l_int|1
)paren
)paren
id|clear_page
c_func
(paren
id|pmd
)paren
suffix:semicolon
r_return
id|pmd
suffix:semicolon
)brace
DECL|function|pgd_alloc_one_fast
r_static
r_inline
id|pgd_t
op_star
id|pgd_alloc_one_fast
(paren
r_void
)paren
(brace
r_int
r_int
op_star
id|ret
suffix:semicolon
id|preempt_disable
c_func
(paren
)paren
suffix:semicolon
id|ret
op_assign
id|read_pda
c_func
(paren
id|pgd_quick
)paren
suffix:semicolon
r_if
c_cond
(paren
id|likely
c_func
(paren
id|ret
op_ne
l_int|NULL
)paren
)paren
(brace
id|write_pda
c_func
(paren
id|pgd_quick
comma
(paren
r_int
r_int
op_star
)paren
(paren
op_star
id|ret
)paren
)paren
suffix:semicolon
id|ret
(braket
l_int|0
)braket
op_assign
l_int|0
suffix:semicolon
id|dec_pgcache_size
c_func
(paren
)paren
suffix:semicolon
)brace
id|preempt_enable
c_func
(paren
)paren
suffix:semicolon
r_return
(paren
id|pgd_t
op_star
)paren
id|ret
suffix:semicolon
)brace
DECL|function|pgd_alloc
r_static
r_inline
id|pgd_t
op_star
id|pgd_alloc
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
multiline_comment|/* the VM system never calls pgd_alloc_one_fast(), so we do it here. */
id|pgd_t
op_star
id|pgd
op_assign
id|pgd_alloc_one_fast
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pgd
op_eq
l_int|NULL
)paren
(brace
id|pgd
op_assign
(paren
id|pgd_t
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__builtin_expect
c_func
(paren
id|pgd
op_ne
l_int|NULL
comma
l_int|1
)paren
)paren
id|clear_page
c_func
(paren
id|pgd
)paren
suffix:semicolon
)brace
r_return
id|pgd
suffix:semicolon
)brace
DECL|function|pgd_free
r_static
r_inline
r_void
id|pgd_free
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
id|preempt_disable
c_func
(paren
)paren
suffix:semicolon
op_star
(paren
r_int
r_int
op_star
)paren
id|pgd
op_assign
(paren
r_int
r_int
)paren
id|read_pda
c_func
(paren
id|pgd_quick
)paren
suffix:semicolon
id|write_pda
c_func
(paren
id|pgd_quick
comma
(paren
r_int
r_int
op_star
)paren
id|pgd
)paren
suffix:semicolon
id|inc_pgcache_size
c_func
(paren
)paren
suffix:semicolon
id|preempt_enable
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|pgd_free_slow
r_static
r_inline
r_void
id|pgd_free_slow
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
r_if
c_cond
(paren
(paren
r_int
r_int
)paren
id|pgd
op_amp
(paren
id|PAGE_SIZE
op_minus
l_int|1
)paren
)paren
id|BUG
c_func
(paren
)paren
suffix:semicolon
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pgd
)paren
suffix:semicolon
)brace
DECL|function|pte_alloc_one
r_static
r_inline
id|pte_t
op_star
id|pte_alloc_one
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|address
)paren
(brace
id|pte_t
op_star
id|pte
suffix:semicolon
id|pte
op_assign
(paren
id|pte_t
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pte
)paren
id|clear_page
c_func
(paren
id|pte
)paren
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pte_alloc_one_fast
r_extern
id|__inline__
id|pte_t
op_star
id|pte_alloc_one_fast
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|address
)paren
(brace
r_int
r_int
op_star
id|ret
suffix:semicolon
id|preempt_disable
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__builtin_expect
c_func
(paren
(paren
id|ret
op_assign
id|read_pda
c_func
(paren
id|pte_quick
)paren
)paren
op_ne
l_int|NULL
comma
op_logical_neg
l_int|0
)paren
)paren
(brace
id|write_pda
c_func
(paren
id|pte_quick
comma
(paren
r_int
r_int
op_star
)paren
(paren
op_star
id|ret
)paren
)paren
suffix:semicolon
id|ret
(braket
l_int|0
)braket
op_assign
id|ret
(braket
l_int|1
)braket
suffix:semicolon
id|dec_pgcache_size
c_func
(paren
)paren
suffix:semicolon
)brace
id|preempt_enable
c_func
(paren
)paren
suffix:semicolon
r_return
(paren
id|pte_t
op_star
)paren
id|ret
suffix:semicolon
)brace
multiline_comment|/* Should really implement gc for free page table pages. This could be done with &n;   a reference count in struct page. */
DECL|function|pte_free
r_extern
id|__inline__
r_void
id|pte_free
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|preempt_disable
c_func
(paren
)paren
suffix:semicolon
op_star
(paren
r_int
r_int
op_star
)paren
id|pte
op_assign
(paren
r_int
r_int
)paren
id|read_pda
c_func
(paren
id|pte_quick
)paren
suffix:semicolon
id|write_pda
c_func
(paren
id|pte_quick
comma
(paren
r_int
r_int
op_star
)paren
id|pte
)paren
suffix:semicolon
id|inc_pgcache_size
c_func
(paren
)paren
suffix:semicolon
id|preempt_enable
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|pte_free_slow
r_extern
id|__inline__
r_void
id|pte_free_slow
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
r_if
c_cond
(paren
(paren
r_int
r_int
)paren
id|pte
op_amp
(paren
id|PAGE_SIZE
op_minus
l_int|1
)paren
)paren
id|BUG
c_func
(paren
)paren
suffix:semicolon
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
)brace
r_extern
r_int
id|do_check_pgt_cache
c_func
(paren
r_int
comma
r_int
)paren
suffix:semicolon
multiline_comment|/*&n; * TLB flushing:&n; *&n; *  - flush_tlb() flushes the current mm struct TLBs&n; *  - flush_tlb_all() flushes all processes TLBs&n; *  - flush_tlb_mm(mm) flushes the specified mm context TLB&squot;s&n; *  - flush_tlb_page(vma, vmaddr) flushes one page&n; *  - flush_tlb_range(vma, start, end) flushes a range of pages&n; *  - flush_tlb_pgtables(mm, start, end) flushes a range of page tables&n; *&n; * ..but the i386 has somewhat limited tlb flushing capabilities,&n; * and page-granular flushes are available only on i486 and up.&n; */
macro_line|#ifndef CONFIG_SMP
DECL|macro|flush_tlb
mdefine_line|#define flush_tlb() __flush_tlb()
DECL|macro|flush_tlb_all
mdefine_line|#define flush_tlb_all() __flush_tlb_all()
DECL|macro|local_flush_tlb
mdefine_line|#define local_flush_tlb() __flush_tlb()
DECL|function|flush_tlb_mm
r_static
r_inline
r_void
id|flush_tlb_mm
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
r_if
c_cond
(paren
id|mm
op_eq
id|current-&gt;active_mm
)paren
id|__flush_tlb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|flush_tlb_page
r_static
r_inline
r_void
id|flush_tlb_page
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|addr
)paren
(brace
r_if
c_cond
(paren
id|vma-&gt;vm_mm
op_eq
id|current-&gt;active_mm
)paren
id|__flush_tlb_one
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|flush_tlb_range
r_static
r_inline
r_void
id|flush_tlb_range
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
(brace
r_if
c_cond
(paren
id|vma-&gt;vm_mm
op_eq
id|current-&gt;active_mm
)paren
id|__flush_tlb
c_func
(paren
)paren
suffix:semicolon
)brace
macro_line|#else
macro_line|#include &lt;asm/smp.h&gt;
DECL|macro|local_flush_tlb
mdefine_line|#define local_flush_tlb() &bslash;&n;&t;__flush_tlb()
r_extern
r_void
id|flush_tlb_all
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|flush_tlb_current_task
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|flush_tlb_mm
c_func
(paren
r_struct
id|mm_struct
op_star
)paren
suffix:semicolon
r_extern
r_void
id|flush_tlb_page
c_func
(paren
r_struct
id|vm_area_struct
op_star
comma
r_int
r_int
)paren
suffix:semicolon
DECL|macro|flush_tlb
mdefine_line|#define flush_tlb()&t;flush_tlb_current_task()
DECL|function|flush_tlb_range
r_static
r_inline
r_void
id|flush_tlb_range
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
(brace
id|flush_tlb_mm
c_func
(paren
id|vma-&gt;vm_mm
)paren
suffix:semicolon
)brace
DECL|macro|TLBSTATE_OK
mdefine_line|#define TLBSTATE_OK&t;1
DECL|macro|TLBSTATE_LAZY
mdefine_line|#define TLBSTATE_LAZY&t;2
DECL|struct|tlb_state
r_struct
id|tlb_state
(brace
DECL|member|active_mm
r_struct
id|mm_struct
op_star
id|active_mm
suffix:semicolon
DECL|member|state
r_int
id|state
suffix:semicolon
DECL|member|__cacheline_padding
r_char
id|__cacheline_padding
(braket
l_int|24
)braket
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|tlb_state
id|cpu_tlbstate
(braket
id|NR_CPUS
)braket
suffix:semicolon
macro_line|#endif
DECL|function|flush_tlb_pgtables
r_extern
r_inline
r_void
id|flush_tlb_pgtables
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
(brace
multiline_comment|/* i386 does not keep any page table caches in TLB */
)brace
macro_line|#endif /* _X86_64_PGALLOC_H */
eof
