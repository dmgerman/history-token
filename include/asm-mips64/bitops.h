multiline_comment|/*&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (c) 1994, 95, 96, 97, 98, 99, 2000  Ralf Baechle&n; * Copyright (c) 1999, 2000  Silicon Graphics, Inc.&n; */
macro_line|#ifndef _ASM_BITOPS_H
DECL|macro|_ASM_BITOPS_H
mdefine_line|#define _ASM_BITOPS_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/compiler.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;asm/byteorder.h&gt;&t;&t;/* sigh ... */
macro_line|#if (_MIPS_SZLONG == 32)
DECL|macro|SZLONG_LOG
mdefine_line|#define SZLONG_LOG 5
DECL|macro|SZLONG_MASK
mdefine_line|#define SZLONG_MASK 31UL
macro_line|#elif (_MIPS_SZLONG == 64)
DECL|macro|SZLONG_LOG
mdefine_line|#define SZLONG_LOG 6
DECL|macro|SZLONG_MASK
mdefine_line|#define SZLONG_MASK 63UL
macro_line|#endif
macro_line|#ifndef __KERNEL__
macro_line|#error &quot;Don&squot;t do this, sucker ...&quot;
macro_line|#endif
macro_line|#include &lt;asm/system.h&gt;
macro_line|#include &lt;asm/sgidefs.h&gt;
multiline_comment|/*&n; * clear_bit() doesn&squot;t provide any barrier for the compiler.&n; */
DECL|macro|smp_mb__before_clear_bit
mdefine_line|#define smp_mb__before_clear_bit()&t;smp_mb()
DECL|macro|smp_mb__after_clear_bit
mdefine_line|#define smp_mb__after_clear_bit()&t;smp_mb()
multiline_comment|/*&n; * set_bit - Atomically set a bit in memory&n; * @nr: the bit to set&n; * @addr: the address to start counting from&n; *&n; * This function is atomic and may not be reordered.  See __set_bit()&n; * if you do not require the atomic guarantees.&n; * Note that @nr may be almost arbitrarily large; this function is not&n; * restricted to acting on a single-word quantity.&n; */
DECL|function|set_bit
r_static
r_inline
r_void
id|set_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|6
)paren
suffix:semicolon
r_int
r_int
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&bslash;tlld&bslash;t%0, %1&bslash;t&bslash;t# set_bit&bslash;n&bslash;t&quot;
l_string|&quot;or&bslash;t%0, %2&bslash;n&bslash;t&quot;
l_string|&quot;scd&bslash;t%0, %1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%0, 1b&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;ir&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x3f
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * __set_bit - Set a bit in memory&n; * @nr: the bit to set&n; * @addr: the address to start counting from&n; *&n; * Unlike set_bit(), this function is non-atomic and may be reordered.&n; * If it&squot;s called on the same region of memory simultaneously, the effect&n; * may be that only one operation succeeds.&n; */
DECL|function|__set_bit
r_static
r_inline
r_void
id|__set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|6
)paren
suffix:semicolon
op_star
id|m
op_or_assign
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x3f
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * clear_bit - Clears a bit in memory&n; * @nr: Bit to clear&n; * @addr: Address to start counting from&n; *&n; * clear_bit() is atomic and may not be reordered.  However, it does&n; * not contain a memory barrier, so if it is used for locking purposes,&n; * you should call smp_mb__before_clear_bit() and/or smp_mb__after_clear_bit()&n; * in order to ensure changes are visible on other processors.&n; */
DECL|function|clear_bit
r_static
r_inline
r_void
id|clear_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|6
)paren
suffix:semicolon
r_int
r_int
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&bslash;tlld&bslash;t%0, %1&bslash;t&bslash;t# clear_bit&bslash;n&bslash;t&quot;
l_string|&quot;and&bslash;t%0, %2&bslash;n&bslash;t&quot;
l_string|&quot;scd&bslash;t%0, %1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%0, 1b&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;ir&quot;
(paren
op_complement
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x3f
)paren
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * __clear_bit - Clears a bit in memory&n; * @nr: Bit to clear&n; * @addr: Address to start counting from&n; *&n; * Unlike clear_bit(), this function is non-atomic and may be reordered.&n; * If it&squot;s called on the same region of memory simultaneously, the effect&n; * may be that only one operation succeeds.&n; */
DECL|function|__clear_bit
r_static
r_inline
r_void
id|__clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|6
)paren
suffix:semicolon
op_star
id|m
op_and_assign
op_complement
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x3f
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * change_bit - Toggle a bit in memory&n; * @nr: Bit to change&n; * @addr: Address to start counting from&n; *&n; * change_bit() is atomic and may not be reordered.&n; * Note that @nr may be almost arbitrarily large; this function is not&n; * restricted to acting on a single-word quantity.&n; */
DECL|function|change_bit
r_static
r_inline
r_void
id|change_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|6
)paren
suffix:semicolon
r_int
r_int
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&bslash;tlld&bslash;t%0, %1&bslash;t&bslash;t# change_bit&bslash;n&bslash;t&quot;
l_string|&quot;xor&bslash;t%0, %2&bslash;n&bslash;t&quot;
l_string|&quot;scd&bslash;t%0, %1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%0, 1b&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;ir&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x3f
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * __change_bit - Toggle a bit in memory&n; * @nr: the bit to change&n; * @addr: the address to start counting from&n; *&n; * Unlike change_bit(), this function is non-atomic and may be reordered.&n; * If it&squot;s called on the same region of memory simultaneously, the effect&n; * may be that only one operation succeeds.&n; */
DECL|function|__change_bit
r_static
r_inline
r_void
id|__change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|6
)paren
suffix:semicolon
op_star
id|m
op_xor_assign
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x3f
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * test_and_set_bit - Set a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is atomic and cannot be reordered.&n; * It also implies a memory barrier.&n; */
DECL|function|test_and_set_bit
r_static
r_inline
r_int
r_int
id|test_and_set_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|6
)paren
suffix:semicolon
r_int
r_int
id|temp
comma
id|res
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set&bslash;tnoreorder&bslash;t&bslash;t# test_and_set_bit&bslash;n&quot;
l_string|&quot;1:&bslash;tlld&bslash;t%0, %1&bslash;n&bslash;t&quot;
l_string|&quot;or&bslash;t%2, %0, %3&bslash;n&bslash;t&quot;
l_string|&quot;scd&bslash;t%2, %1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%2, 1b&bslash;n&bslash;t&quot;
l_string|&quot; and&bslash;t%2, %0, %3&bslash;n&bslash;t&quot;
macro_line|#ifdef CONFIG_SMP
l_string|&quot;sync&bslash;n&bslash;t&quot;
macro_line|#endif
l_string|&quot;.set&bslash;treorder&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|res
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x3f
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|res
op_ne
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * __test_and_set_bit - Set a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is non-atomic and can be reordered.&n; * If two examples of this operation race, one can appear to succeed&n; * but actually fail.  You must protect multiple accesses with a lock.&n; */
DECL|function|__test_and_set_bit
r_static
r_inline
r_int
id|__test_and_set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
id|mask
comma
id|retval
suffix:semicolon
r_int
op_star
id|a
op_assign
(paren
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|6
)paren
suffix:semicolon
id|mask
op_assign
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x3f
)paren
suffix:semicolon
id|retval
op_assign
(paren
(paren
id|mask
op_amp
op_star
id|a
)paren
op_ne
l_int|0
)paren
suffix:semicolon
op_star
id|a
op_or_assign
id|mask
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
multiline_comment|/*&n; * test_and_clear_bit - Clear a bit and return its old value&n; * @nr: Bit to clear&n; * @addr: Address to count from&n; *&n; * This operation is atomic and cannot be reordered.&n; * It also implies a memory barrier.&n; */
DECL|function|test_and_clear_bit
r_static
r_inline
r_int
r_int
id|test_and_clear_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|6
)paren
suffix:semicolon
r_int
r_int
id|temp
comma
id|res
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set&bslash;tnoreorder&bslash;t&bslash;t# test_and_clear_bit&bslash;n&quot;
l_string|&quot;1:&bslash;tlld&bslash;t%0, %1&bslash;n&bslash;t&quot;
l_string|&quot;or&bslash;t%2, %0, %3&bslash;n&bslash;t&quot;
l_string|&quot;xor&bslash;t%2, %3&bslash;n&bslash;t&quot;
l_string|&quot;scd&bslash;t%2, %1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%2, 1b&bslash;n&bslash;t&quot;
l_string|&quot; and&bslash;t%2, %0, %3&bslash;n&bslash;t&quot;
macro_line|#ifdef CONFIG_SMP
l_string|&quot;sync&bslash;n&bslash;t&quot;
macro_line|#endif
l_string|&quot;.set&bslash;treorder&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|res
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x3f
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|res
op_ne
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * __test_and_clear_bit - Clear a bit and return its old value&n; * @nr: Bit to clear&n; * @addr: Address to count from&n; *&n; * This operation is non-atomic and can be reordered.&n; * If two examples of this operation race, one can appear to succeed&n; * but actually fail.  You must protect multiple accesses with a lock.&n; */
DECL|function|__test_and_clear_bit
r_static
r_inline
r_int
id|__test_and_clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
id|mask
comma
id|retval
suffix:semicolon
r_int
r_int
op_star
id|a
op_assign
(paren
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|6
)paren
suffix:semicolon
id|mask
op_assign
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x3f
)paren
suffix:semicolon
id|retval
op_assign
(paren
(paren
id|mask
op_amp
op_star
id|a
)paren
op_ne
l_int|0
)paren
suffix:semicolon
op_star
id|a
op_and_assign
op_complement
id|mask
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
multiline_comment|/*&n; * test_and_change_bit - Change a bit and return its new value&n; * @nr: Bit to change&n; * @addr: Address to count from&n; *&n; * This operation is atomic and cannot be reordered.&n; * It also implies a memory barrier.&n; */
DECL|function|test_and_change_bit
r_static
r_inline
r_int
r_int
id|test_and_change_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|6
)paren
suffix:semicolon
r_int
r_int
id|temp
comma
id|res
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set&bslash;tnoreorder&bslash;t&bslash;t# test_and_change_bit&bslash;n&quot;
l_string|&quot;1:&bslash;tlld&bslash;t%0, %1&bslash;n&bslash;t&quot;
l_string|&quot;xor&bslash;t%2, %0, %3&bslash;n&bslash;t&quot;
l_string|&quot;scd&bslash;t%2, %1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%2, 1b&bslash;n&bslash;t&quot;
l_string|&quot; and&bslash;t%2, %0, %3&bslash;n&bslash;t&quot;
macro_line|#ifdef CONFIG_SMP
l_string|&quot;sync&bslash;n&bslash;t&quot;
macro_line|#endif
l_string|&quot;.set&bslash;treorder&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|res
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x3f
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|res
op_ne
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * __test_and_change_bit - Change a bit and return its old value&n; * @nr: Bit to change&n; * @addr: Address to count from&n; *&n; * This operation is non-atomic and can be reordered.&n; * If two examples of this operation race, one can appear to succeed&n; * but actually fail.  You must protect multiple accesses with a lock.&n; */
DECL|function|__test_and_change_bit
r_static
r_inline
r_int
id|__test_and_change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
id|mask
comma
id|retval
suffix:semicolon
r_int
r_int
op_star
id|a
op_assign
(paren
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|6
)paren
suffix:semicolon
id|mask
op_assign
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x3f
)paren
suffix:semicolon
id|retval
op_assign
(paren
(paren
id|mask
op_amp
op_star
id|a
)paren
op_ne
l_int|0
)paren
suffix:semicolon
op_star
id|a
op_xor_assign
id|mask
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
multiline_comment|/*&n; * test_bit - Determine whether a bit is set&n; * @nr: bit number to test&n; * @addr: Address to start counting from&n; */
DECL|function|test_bit
r_static
r_inline
r_int
id|test_bit
c_func
(paren
r_int
id|nr
comma
r_const
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_return
l_int|1UL
op_amp
(paren
(paren
(paren
r_const
r_volatile
r_int
r_int
op_star
)paren
id|addr
)paren
(braket
id|nr
op_rshift
id|SZLONG_LOG
)braket
op_rshift
(paren
id|nr
op_amp
id|SZLONG_MASK
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * ffz - find first zero in word.&n; * @word: The word to search&n; *&n; * Undefined if no zero exists, so code should check against ~0UL first.&n; */
DECL|function|ffz
r_static
id|__inline__
r_int
r_int
id|ffz
c_func
(paren
r_int
r_int
id|word
)paren
(brace
r_int
id|b
op_assign
l_int|0
comma
id|s
suffix:semicolon
id|word
op_assign
op_complement
id|word
suffix:semicolon
id|s
op_assign
l_int|32
suffix:semicolon
r_if
c_cond
(paren
id|word
op_lshift
l_int|32
op_ne
l_int|0
)paren
id|s
op_assign
l_int|0
suffix:semicolon
id|b
op_add_assign
id|s
suffix:semicolon
id|word
op_rshift_assign
id|s
suffix:semicolon
id|s
op_assign
l_int|16
suffix:semicolon
r_if
c_cond
(paren
id|word
op_lshift
l_int|48
op_ne
l_int|0
)paren
id|s
op_assign
l_int|0
suffix:semicolon
id|b
op_add_assign
id|s
suffix:semicolon
id|word
op_rshift_assign
id|s
suffix:semicolon
id|s
op_assign
l_int|8
suffix:semicolon
r_if
c_cond
(paren
id|word
op_lshift
l_int|56
op_ne
l_int|0
)paren
id|s
op_assign
l_int|0
suffix:semicolon
id|b
op_add_assign
id|s
suffix:semicolon
id|word
op_rshift_assign
id|s
suffix:semicolon
id|s
op_assign
l_int|4
suffix:semicolon
r_if
c_cond
(paren
id|word
op_lshift
l_int|60
op_ne
l_int|0
)paren
id|s
op_assign
l_int|0
suffix:semicolon
id|b
op_add_assign
id|s
suffix:semicolon
id|word
op_rshift_assign
id|s
suffix:semicolon
id|s
op_assign
l_int|2
suffix:semicolon
r_if
c_cond
(paren
id|word
op_lshift
l_int|62
op_ne
l_int|0
)paren
id|s
op_assign
l_int|0
suffix:semicolon
id|b
op_add_assign
id|s
suffix:semicolon
id|word
op_rshift_assign
id|s
suffix:semicolon
id|s
op_assign
l_int|1
suffix:semicolon
r_if
c_cond
(paren
id|word
op_lshift
l_int|63
op_ne
l_int|0
)paren
id|s
op_assign
l_int|0
suffix:semicolon
id|b
op_add_assign
id|s
suffix:semicolon
r_return
id|b
suffix:semicolon
)brace
multiline_comment|/*&n; * __ffs - find first bit in word.&n; * @word: The word to search&n; *&n; * Undefined if no bit exists, so code should check against 0 first.&n; */
DECL|function|__ffs
r_static
id|__inline__
r_int
r_int
id|__ffs
c_func
(paren
r_int
r_int
id|word
)paren
(brace
r_return
id|ffz
c_func
(paren
op_complement
id|word
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * fls: find last bit set.&n; */
DECL|macro|fls
mdefine_line|#define fls(x) generic_fls(x)
multiline_comment|/*&n; * find_next_zero_bit - find the first zero bit in a memory region&n; * @addr: The address to base the search on&n; * @offset: The bitnumber to start searching at&n; * @size: The maximum size to search&n; */
DECL|function|find_next_zero_bit
r_static
r_inline
r_int
r_int
id|find_next_zero_bit
c_func
(paren
r_int
r_int
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
id|SZLONG_LOG
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
id|SZLONG_MASK
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
id|SZLONG_MASK
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_rshift
(paren
id|_MIPS_SZLONG
op_minus
id|offset
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
id|_MIPS_SZLONG
)paren
r_goto
id|found_first
suffix:semicolon
r_if
c_cond
(paren
op_complement
id|tmp
)paren
r_goto
id|found_middle
suffix:semicolon
id|size
op_sub_assign
id|_MIPS_SZLONG
suffix:semicolon
id|result
op_add_assign
id|_MIPS_SZLONG
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
id|SZLONG_MASK
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
r_goto
id|found_middle
suffix:semicolon
id|result
op_add_assign
id|_MIPS_SZLONG
suffix:semicolon
id|size
op_sub_assign
id|_MIPS_SZLONG
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
r_return
id|result
suffix:semicolon
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_lshift
id|size
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_eq
op_complement
l_int|0UL
)paren
multiline_comment|/* Are any bits zero? */
r_return
id|result
op_plus
id|size
suffix:semicolon
multiline_comment|/* Nope. */
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|tmp
)paren
suffix:semicolon
)brace
DECL|macro|find_first_zero_bit
mdefine_line|#define find_first_zero_bit(addr, size) &bslash;&n;&t;find_next_zero_bit((addr), (size), 0)
multiline_comment|/*&n; * find_next_bit - find the next set bit in a memory region&n; * @addr: The address to base the search on&n; * @offset: The bitnumber to start searching at&n; * @size: The maximum size to search&n; */
DECL|function|find_next_bit
r_static
r_inline
r_int
r_int
id|find_next_bit
c_func
(paren
r_int
r_int
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
id|addr
op_plus
(paren
id|offset
op_rshift
id|SZLONG_LOG
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
id|SZLONG_MASK
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
id|SZLONG_MASK
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_and_assign
op_complement
l_int|0UL
op_lshift
id|offset
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
id|_MIPS_SZLONG
)paren
r_goto
id|found_first
suffix:semicolon
r_if
c_cond
(paren
id|tmp
)paren
r_goto
id|found_middle
suffix:semicolon
id|size
op_sub_assign
id|_MIPS_SZLONG
suffix:semicolon
id|result
op_add_assign
id|_MIPS_SZLONG
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
id|SZLONG_MASK
)paren
(brace
r_if
c_cond
(paren
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
r_goto
id|found_middle
suffix:semicolon
id|result
op_add_assign
id|_MIPS_SZLONG
suffix:semicolon
id|size
op_sub_assign
id|_MIPS_SZLONG
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
r_return
id|result
suffix:semicolon
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
id|tmp
op_and_assign
op_complement
l_int|0UL
op_rshift
(paren
id|_MIPS_SZLONG
op_minus
id|size
)paren
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_eq
l_int|0UL
)paren
multiline_comment|/* Are any bits set? */
r_return
id|result
op_plus
id|size
suffix:semicolon
multiline_comment|/* Nope. */
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|__ffs
c_func
(paren
id|tmp
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * find_first_bit - find the first set bit in a memory region&n; * @addr: The address to start the search at&n; * @size: The maximum size to search&n; *&n; * Returns the bit-number of the first set bit, not the number of the byte&n; * containing a bit.&n; */
DECL|macro|find_first_bit
mdefine_line|#define find_first_bit(addr, size) &bslash;&n;&t;find_next_bit((addr), (size), 0)
macro_line|#ifdef __KERNEL__
multiline_comment|/*&n; * Every architecture must define this function. It&squot;s the fastest&n; * way of searching a 168-bit bitmap where the first 128 bits are&n; * unlikely to be set. It&squot;s guaranteed that at least one of the 168&n; * bits is cleared.&n; */
DECL|function|sched_find_first_bit
r_static
r_inline
r_int
id|sched_find_first_bit
c_func
(paren
r_int
r_int
op_star
id|b
)paren
(brace
r_if
c_cond
(paren
id|unlikely
c_func
(paren
id|b
(braket
l_int|0
)braket
)paren
)paren
r_return
id|__ffs
c_func
(paren
id|b
(braket
l_int|0
)braket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|unlikely
c_func
(paren
id|b
(braket
l_int|1
)braket
)paren
)paren
r_return
id|__ffs
c_func
(paren
id|b
(braket
l_int|1
)braket
)paren
op_plus
l_int|64
suffix:semicolon
r_return
id|__ffs
c_func
(paren
id|b
(braket
l_int|2
)braket
)paren
op_plus
l_int|128
suffix:semicolon
)brace
multiline_comment|/*&n; * ffs - find first bit set&n; * @x: the word to search&n; *&n; * This is defined the same way as&n; * the libc and compiler builtin ffs routines, therefore&n; * differs in spirit from the above ffz (man ffs).&n; */
DECL|macro|ffs
mdefine_line|#define ffs(x) generic_ffs(x)
multiline_comment|/*&n; * hweightN - returns the hamming weight of a N-bit word&n; * @x: the word to weigh&n; *&n; * The Hamming Weight of a number is the total number of bits set in it.&n; */
DECL|macro|hweight32
mdefine_line|#define hweight32(x) generic_hweight32(x)
DECL|macro|hweight16
mdefine_line|#define hweight16(x) generic_hweight16(x)
DECL|macro|hweight8
mdefine_line|#define hweight8(x)  generic_hweight8(x)
DECL|function|__test_and_set_le_bit
r_static
r_inline
r_int
id|__test_and_set_le_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_char
op_star
id|ADDR
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
r_int
id|mask
comma
id|retval
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|ADDR
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|ADDR
op_or_assign
id|mask
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
DECL|function|__test_and_clear_le_bit
r_static
r_inline
r_int
id|__test_and_clear_le_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_char
op_star
id|ADDR
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
r_int
id|mask
comma
id|retval
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|ADDR
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|ADDR
op_and_assign
op_complement
id|mask
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
DECL|function|test_le_bit
r_static
r_inline
r_int
id|test_le_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_const
r_int
r_int
op_star
id|addr
)paren
(brace
r_const
r_int
r_char
op_star
id|ADDR
op_assign
(paren
r_const
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
r_int
id|mask
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
r_return
(paren
(paren
id|mask
op_amp
op_star
id|ADDR
)paren
op_ne
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|ext2_ffz
r_static
r_inline
r_int
r_int
id|ext2_ffz
c_func
(paren
r_int
r_int
id|word
)paren
(brace
r_int
id|b
op_assign
l_int|0
comma
id|s
suffix:semicolon
id|word
op_assign
op_complement
id|word
suffix:semicolon
id|s
op_assign
l_int|16
suffix:semicolon
r_if
c_cond
(paren
id|word
op_lshift
l_int|16
op_ne
l_int|0
)paren
id|s
op_assign
l_int|0
suffix:semicolon
id|b
op_add_assign
id|s
suffix:semicolon
id|word
op_rshift_assign
id|s
suffix:semicolon
id|s
op_assign
l_int|8
suffix:semicolon
r_if
c_cond
(paren
id|word
op_lshift
l_int|24
op_ne
l_int|0
)paren
id|s
op_assign
l_int|0
suffix:semicolon
id|b
op_add_assign
id|s
suffix:semicolon
id|word
op_rshift_assign
id|s
suffix:semicolon
id|s
op_assign
l_int|4
suffix:semicolon
r_if
c_cond
(paren
id|word
op_lshift
l_int|28
op_ne
l_int|0
)paren
id|s
op_assign
l_int|0
suffix:semicolon
id|b
op_add_assign
id|s
suffix:semicolon
id|word
op_rshift_assign
id|s
suffix:semicolon
id|s
op_assign
l_int|2
suffix:semicolon
r_if
c_cond
(paren
id|word
op_lshift
l_int|30
op_ne
l_int|0
)paren
id|s
op_assign
l_int|0
suffix:semicolon
id|b
op_add_assign
id|s
suffix:semicolon
id|word
op_rshift_assign
id|s
suffix:semicolon
id|s
op_assign
l_int|1
suffix:semicolon
r_if
c_cond
(paren
id|word
op_lshift
l_int|31
op_ne
l_int|0
)paren
id|s
op_assign
l_int|0
suffix:semicolon
id|b
op_add_assign
id|s
suffix:semicolon
r_return
id|b
suffix:semicolon
)brace
DECL|function|find_next_zero_le_bit
r_static
r_inline
r_int
r_int
id|find_next_zero_le_bit
c_func
(paren
r_int
r_int
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|31
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|31
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
id|cpu_to_le32p
c_func
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
op_complement
l_int|0U
op_rshift
(paren
l_int|32
op_minus
id|offset
)paren
suffix:semicolon
multiline_comment|/* bug or feature ? */
r_if
c_cond
(paren
id|size
OL
l_int|32
)paren
r_goto
id|found_first
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_ne
op_complement
l_int|0U
)paren
r_goto
id|found_middle
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_ge
l_int|32
)paren
(brace
r_if
c_cond
(paren
(paren
id|tmp
op_assign
id|cpu_to_le32p
c_func
(paren
id|p
op_increment
)paren
)paren
op_ne
op_complement
l_int|0U
)paren
r_goto
id|found_middle
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
r_return
id|result
suffix:semicolon
id|tmp
op_assign
id|cpu_to_le32p
c_func
(paren
id|p
)paren
suffix:semicolon
id|found_first
suffix:colon
id|tmp
op_or_assign
op_complement
l_int|0
op_lshift
id|size
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_eq
op_complement
l_int|0U
)paren
multiline_comment|/* Are any bits zero? */
r_return
id|result
op_plus
id|size
suffix:semicolon
multiline_comment|/* Nope. */
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ext2_ffz
c_func
(paren
id|tmp
)paren
suffix:semicolon
)brace
DECL|macro|find_first_zero_le_bit
mdefine_line|#define find_first_zero_le_bit(addr, size) &bslash;&n;&t;find_next_zero_le_bit((addr), (size), 0)
DECL|macro|ext2_set_bit
mdefine_line|#define ext2_set_bit(nr,addr) &bslash;&n;&t;__test_and_set_le_bit((nr),(unsigned long*)addr)
DECL|macro|ext2_clear_bit
mdefine_line|#define ext2_clear_bit(nr, addr) &bslash;&n;&t;__test_and_clear_le_bit((nr),(unsigned long*)addr)
DECL|macro|ext2_set_bit_atomic
mdefine_line|#define ext2_set_bit_atomic(lock, nr, addr)&t;&t;&bslash;&n;({&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;int ret;&t;&t;&t;&t;&t;&bslash;&n;&t;spin_lock(lock);&t;&t;&t;&t;&bslash;&n;&t;ret = ext2_set_bit((nr), (addr));&t;&t;&bslash;&n;&t;spin_unlock(lock);&t;&t;&t;&t;&bslash;&n;&t;ret;&t;&t;&t;&t;&t;&t;&bslash;&n;})
DECL|macro|ext2_clear_bit_atomic
mdefine_line|#define ext2_clear_bit_atomic(lock, nr, addr)&t;&t;&bslash;&n;({&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;int ret;&t;&t;&t;&t;&t;&bslash;&n;&t;spin_lock(lock);&t;&t;&t;&t;&bslash;&n;&t;ret = ext2_clear_bit((nr), (addr));&t;&t;&bslash;&n;&t;spin_unlock(lock);&t;&t;&t;&t;&bslash;&n;&t;ret;&t;&t;&t;&t;&t;&t;&bslash;&n;})
DECL|macro|ext2_test_bit
mdefine_line|#define ext2_test_bit(nr, addr)&t;test_le_bit((nr),(unsigned long*)addr)
DECL|macro|ext2_find_first_zero_bit
mdefine_line|#define ext2_find_first_zero_bit(addr, size) &bslash;&n;&t;find_first_zero_le_bit((unsigned long*)addr, size)
DECL|macro|ext2_find_next_zero_bit
mdefine_line|#define ext2_find_next_zero_bit(addr, size, off) &bslash;&n;&t;find_next_zero_le_bit((unsigned long*)addr, size, off)
multiline_comment|/*&n; * Bitmap functions for the minix filesystem.&n; *&n; * FIXME: These assume that Minix uses the native byte/bitorder.&n; * This limits the Minix filesystem&squot;s value for data exchange very much.&n; */
DECL|macro|minix_test_and_set_bit
mdefine_line|#define minix_test_and_set_bit(nr,addr) test_and_set_bit(nr,addr)
DECL|macro|minix_set_bit
mdefine_line|#define minix_set_bit(nr,addr) set_bit(nr,addr)
DECL|macro|minix_test_and_clear_bit
mdefine_line|#define minix_test_and_clear_bit(nr,addr) test_and_clear_bit(nr,addr)
DECL|macro|minix_test_bit
mdefine_line|#define minix_test_bit(nr,addr) test_bit(nr,addr)
DECL|macro|minix_find_first_zero_bit
mdefine_line|#define minix_find_first_zero_bit(addr,size) find_first_zero_bit(addr,size)
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _ASM_BITOPS_H */
eof
