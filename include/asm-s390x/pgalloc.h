multiline_comment|/*&n; *  include/asm-s390/pgalloc.h&n; *&n; *  S390 version&n; *    Copyright (C) 1999, 2000 IBM Deutschland Entwicklung GmbH, IBM Corporation&n; *    Author(s): Hartmut Penner (hpenner@de.ibm.com)&n; *               Martin Schwidefsky (schwidefsky@de.ibm.com)&n; *&n; *  Derived from &quot;include/asm-i386/pgalloc.h&quot;&n; *    Copyright (C) 1994  Linus Torvalds&n; */
macro_line|#ifndef _S390_PGALLOC_H
DECL|macro|_S390_PGALLOC_H
mdefine_line|#define _S390_PGALLOC_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;asm/processor.h&gt;
macro_line|#include &lt;linux/threads.h&gt;
DECL|macro|check_pgt_cache
mdefine_line|#define check_pgt_cache()&t;do { } while (0)
multiline_comment|/*&n; * Allocate and free page tables. The xxx_kernel() versions are&n; * used to allocate a kernel page table - this turns on ASN bits&n; * if any.&n; */
DECL|function|pgd_alloc
r_static
r_inline
id|pgd_t
op_star
id|pgd_alloc
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
id|pgd_t
op_star
id|pgd
suffix:semicolon
r_int
id|i
suffix:semicolon
id|pgd
op_assign
(paren
id|pgd_t
op_star
)paren
id|__get_free_pages
c_func
(paren
id|GFP_KERNEL
comma
l_int|2
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pgd
op_ne
l_int|NULL
)paren
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|PTRS_PER_PGD
suffix:semicolon
id|i
op_increment
)paren
id|pgd_clear
c_func
(paren
id|pgd
op_plus
id|i
)paren
suffix:semicolon
r_return
id|pgd
suffix:semicolon
)brace
DECL|function|pgd_free
r_static
r_inline
r_void
id|pgd_free
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
id|free_pages
c_func
(paren
(paren
r_int
r_int
)paren
id|pgd
comma
l_int|2
)paren
suffix:semicolon
)brace
DECL|function|pgd_populate
r_static
r_inline
r_void
id|pgd_populate
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
id|pgd_t
op_star
id|pgd
comma
id|pmd_t
op_star
id|pmd
)paren
(brace
id|pgd_val
c_func
(paren
op_star
id|pgd
)paren
op_assign
id|_PGD_ENTRY
op_or
id|__pa
c_func
(paren
id|pmd
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * page middle directory allocation/free routines.&n; */
DECL|function|pmd_alloc_one
r_static
r_inline
id|pmd_t
op_star
id|pmd_alloc_one
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|vmaddr
)paren
(brace
id|pmd_t
op_star
id|pmd
suffix:semicolon
r_int
id|i
suffix:semicolon
id|pmd
op_assign
(paren
id|pmd_t
op_star
)paren
id|__get_free_pages
c_func
(paren
id|GFP_KERNEL
comma
l_int|2
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd
op_ne
l_int|NULL
)paren
(brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|PTRS_PER_PMD
suffix:semicolon
id|i
op_increment
)paren
id|pmd_clear
c_func
(paren
id|pmd
op_plus
id|i
)paren
suffix:semicolon
)brace
r_return
id|pmd
suffix:semicolon
)brace
DECL|function|pmd_free
r_static
r_inline
r_void
id|pmd_free
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
id|free_pages
c_func
(paren
(paren
r_int
r_int
)paren
id|pmd
comma
l_int|2
)paren
suffix:semicolon
)brace
DECL|macro|pmd_free_tlb
mdefine_line|#define pmd_free_tlb(tlb,pmd) pmd_free(pmd)
r_static
r_inline
r_void
DECL|function|pmd_populate_kernel
id|pmd_populate_kernel
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
id|pmd_t
op_star
id|pmd
comma
id|pte_t
op_star
id|pte
)paren
(brace
id|pmd_val
c_func
(paren
op_star
id|pmd
)paren
op_assign
id|_PMD_ENTRY
op_plus
id|__pa
c_func
(paren
id|pte
)paren
suffix:semicolon
id|pmd_val1
c_func
(paren
op_star
id|pmd
)paren
op_assign
id|_PMD_ENTRY
op_plus
id|__pa
c_func
(paren
id|pte
op_plus
l_int|256
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|pmd_populate
id|pmd_populate
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
id|pmd_t
op_star
id|pmd
comma
r_struct
id|page
op_star
id|page
)paren
(brace
id|pmd_populate_kernel
c_func
(paren
id|mm
comma
id|pmd
comma
(paren
id|pte_t
op_star
)paren
(paren
(paren
id|page
op_minus
id|mem_map
)paren
op_lshift
id|PAGE_SHIFT
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * page table entry allocation/free routines.&n; */
r_static
r_inline
id|pte_t
op_star
DECL|function|pte_alloc_one_kernel
id|pte_alloc_one_kernel
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|vmaddr
)paren
(brace
id|pte_t
op_star
id|pte
suffix:semicolon
r_int
id|count
suffix:semicolon
r_int
id|i
suffix:semicolon
id|count
op_assign
l_int|0
suffix:semicolon
r_do
(brace
id|pte
op_assign
(paren
id|pte_t
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pte
op_ne
l_int|NULL
)paren
(brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|PTRS_PER_PTE
suffix:semicolon
id|i
op_increment
)paren
id|pte_clear
c_func
(paren
id|pte
op_plus
id|i
)paren
suffix:semicolon
)brace
r_else
(brace
id|current-&gt;state
op_assign
id|TASK_UNINTERRUPTIBLE
suffix:semicolon
id|schedule_timeout
c_func
(paren
id|HZ
)paren
suffix:semicolon
)brace
)brace
r_while
c_loop
(paren
op_logical_neg
id|pte
op_logical_and
(paren
id|count
op_increment
OL
l_int|10
)paren
)paren
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
r_static
r_inline
r_struct
id|page
op_star
DECL|function|pte_alloc_one
id|pte_alloc_one
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|addr
)paren
(brace
r_return
id|virt_to_page
c_func
(paren
id|pte_alloc_one_kernel
c_func
(paren
id|mm
comma
id|addr
)paren
)paren
suffix:semicolon
)brace
DECL|function|pte_free_kernel
r_static
r_inline
r_void
id|pte_free_kernel
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
)brace
DECL|function|pte_free
r_static
r_inline
r_void
id|pte_free
c_func
(paren
r_struct
id|page
op_star
id|pte
)paren
(brace
id|__free_page
c_func
(paren
id|pte
)paren
suffix:semicolon
)brace
DECL|macro|pte_free_tlb
mdefine_line|#define pte_free_tlb(tlb,pte) tlb_remove_page((tlb),(pte))
multiline_comment|/*&n; * This establishes kernel virtual mappings (e.g., as a result of a&n; * vmalloc call).  Since s390-esame uses a separate kernel page table,&n; * there is nothing to do here... :)&n; */
DECL|macro|set_pgdir
mdefine_line|#define set_pgdir(vmaddr, entry)&t;do { } while(0)
DECL|function|ptep_invalidate
r_static
r_inline
id|pte_t
id|ptep_invalidate
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|address
comma
id|pte_t
op_star
id|ptep
)paren
(brace
id|pte_t
id|pte
op_assign
op_star
id|ptep
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_INVALID
)paren
)paren
id|__asm__
id|__volatile__
(paren
l_string|&quot;ipte %0,%1&quot;
suffix:colon
suffix:colon
l_string|&quot;a&quot;
(paren
id|ptep
)paren
comma
l_string|&quot;a&quot;
(paren
id|address
)paren
)paren
suffix:semicolon
id|pte_clear
c_func
(paren
id|ptep
)paren
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|function|ptep_establish
r_static
r_inline
r_void
id|ptep_establish
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|address
comma
id|pte_t
op_star
id|ptep
comma
id|pte_t
id|entry
)paren
(brace
id|ptep_invalidate
c_func
(paren
id|vma
comma
id|address
comma
id|ptep
)paren
suffix:semicolon
id|set_pte
c_func
(paren
id|ptep
comma
id|entry
)paren
suffix:semicolon
)brace
macro_line|#endif /* _S390_PGALLOC_H */
eof
