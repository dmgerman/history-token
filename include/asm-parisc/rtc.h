multiline_comment|/* &n; * inclue/asm-parisc/rtc.h&n; *&n; * Copyright 2002 Randolph CHung &lt;tausq@debian.org&gt;&n; *&n; * Based on: include/asm-ppc/rtc.h and the genrtc driver in the&n; * 2.4 parisc linux tree&n; */
macro_line|#ifndef __ASM_RTC_H__
DECL|macro|__ASM_RTC_H__
mdefine_line|#define __ASM_RTC_H__
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/rtc.h&gt;
macro_line|#include &lt;asm/pdc.h&gt;
DECL|macro|SECS_PER_HOUR
mdefine_line|#define SECS_PER_HOUR   (60 * 60)
DECL|macro|SECS_PER_DAY
mdefine_line|#define SECS_PER_DAY    (SECS_PER_HOUR * 24)
DECL|macro|RTC_PIE
mdefine_line|#define RTC_PIE 0x40&t;&t;/* periodic interrupt enable */
DECL|macro|RTC_AIE
mdefine_line|#define RTC_AIE 0x20&t;&t;/* alarm interrupt enable */
DECL|macro|RTC_UIE
mdefine_line|#define RTC_UIE 0x10&t;&t;/* update-finished interrupt enable */
DECL|macro|RTC_BATT_BAD
mdefine_line|#define RTC_BATT_BAD 0x100&t;/* battery bad */
multiline_comment|/* some dummy definitions */
DECL|macro|RTC_SQWE
mdefine_line|#define RTC_SQWE 0x08&t;&t;/* enable square-wave output */
DECL|macro|RTC_DM_BINARY
mdefine_line|#define RTC_DM_BINARY 0x04&t;/* all time/date values are BCD if clear */
DECL|macro|RTC_24H
mdefine_line|#define RTC_24H 0x02&t;&t;/* 24 hour mode - else hours bit 7 means pm */
DECL|macro|RTC_DST_EN
mdefine_line|#define RTC_DST_EN 0x01&t;        /* auto switch DST - works f. USA only */
DECL|macro|__isleap
macro_line|# define __isleap(year) &bslash;&n;  ((year) % 4 == 0 &amp;&amp; ((year) % 100 != 0 || (year) % 400 == 0))
multiline_comment|/* How many days come before each month (0-12).  */
DECL|variable|__mon_yday
r_static
r_const
r_int
r_int
r_int
id|__mon_yday
(braket
l_int|2
)braket
(braket
l_int|13
)braket
op_assign
(brace
multiline_comment|/* Normal years.  */
(brace
l_int|0
comma
l_int|31
comma
l_int|59
comma
l_int|90
comma
l_int|120
comma
l_int|151
comma
l_int|181
comma
l_int|212
comma
l_int|243
comma
l_int|273
comma
l_int|304
comma
l_int|334
comma
l_int|365
)brace
comma
multiline_comment|/* Leap years.  */
(brace
l_int|0
comma
l_int|31
comma
l_int|60
comma
l_int|91
comma
l_int|121
comma
l_int|152
comma
l_int|182
comma
l_int|213
comma
l_int|244
comma
l_int|274
comma
l_int|305
comma
l_int|335
comma
l_int|366
)brace
)brace
suffix:semicolon
DECL|function|get_rtc_time
r_static
r_inline
r_int
r_int
id|get_rtc_time
c_func
(paren
r_struct
id|rtc_time
op_star
id|wtime
)paren
(brace
r_struct
id|pdc_tod
id|tod_data
suffix:semicolon
r_int
r_int
id|days
comma
id|rem
comma
id|y
suffix:semicolon
r_const
r_int
r_int
r_int
op_star
id|ip
suffix:semicolon
r_if
c_cond
(paren
id|pdc_tod_read
c_func
(paren
op_amp
id|tod_data
)paren
OL
l_int|0
)paren
(brace
r_return
id|RTC_24H
op_or
id|RTC_BATT_BAD
suffix:semicolon
)brace
singleline_comment|// most of the remainder of this function is:
singleline_comment|//&t;Copyright (C) 1991, 1993, 1997, 1998 Free Software Foundation, Inc.
singleline_comment|//&t;This was originally a part of the GNU C Library.
singleline_comment|//      It is distributed under the GPL, and was swiped from offtime.c
id|days
op_assign
id|tod_data.tod_sec
op_div
id|SECS_PER_DAY
suffix:semicolon
id|rem
op_assign
id|tod_data.tod_sec
op_mod
id|SECS_PER_DAY
suffix:semicolon
id|wtime-&gt;tm_hour
op_assign
id|rem
op_div
id|SECS_PER_HOUR
suffix:semicolon
id|rem
op_mod_assign
id|SECS_PER_HOUR
suffix:semicolon
id|wtime-&gt;tm_min
op_assign
id|rem
op_div
l_int|60
suffix:semicolon
id|wtime-&gt;tm_sec
op_assign
id|rem
op_mod
l_int|60
suffix:semicolon
id|y
op_assign
l_int|1970
suffix:semicolon
DECL|macro|DIV
mdefine_line|#define DIV(a, b) ((a) / (b) - ((a) % (b) &lt; 0))
DECL|macro|LEAPS_THRU_END_OF
mdefine_line|#define LEAPS_THRU_END_OF(y) (DIV (y, 4) - DIV (y, 100) + DIV (y, 400))
r_while
c_loop
(paren
id|days
OL
l_int|0
op_logical_or
id|days
op_ge
(paren
id|__isleap
(paren
id|y
)paren
ques
c_cond
l_int|366
suffix:colon
l_int|365
)paren
)paren
(brace
multiline_comment|/* Guess a corrected year, assuming 365 days per year.  */
r_int
r_int
id|yg
op_assign
id|y
op_plus
id|days
op_div
l_int|365
op_minus
(paren
id|days
op_mod
l_int|365
OL
l_int|0
)paren
suffix:semicolon
multiline_comment|/* Adjust DAYS and Y to match the guessed year.  */
id|days
op_sub_assign
(paren
(paren
id|yg
op_minus
id|y
)paren
op_star
l_int|365
op_plus
id|LEAPS_THRU_END_OF
(paren
id|yg
op_minus
l_int|1
)paren
op_minus
id|LEAPS_THRU_END_OF
(paren
id|y
op_minus
l_int|1
)paren
)paren
suffix:semicolon
id|y
op_assign
id|yg
suffix:semicolon
)brace
id|wtime-&gt;tm_year
op_assign
id|y
op_minus
l_int|1900
suffix:semicolon
id|ip
op_assign
id|__mon_yday
(braket
id|__isleap
c_func
(paren
id|y
)paren
)braket
suffix:semicolon
r_for
c_loop
(paren
id|y
op_assign
l_int|11
suffix:semicolon
id|days
OL
(paren
r_int
r_int
)paren
id|ip
(braket
id|y
)braket
suffix:semicolon
op_decrement
id|y
)paren
r_continue
suffix:semicolon
id|days
op_sub_assign
id|ip
(braket
id|y
)braket
suffix:semicolon
id|wtime-&gt;tm_mon
op_assign
id|y
suffix:semicolon
id|wtime-&gt;tm_mday
op_assign
id|days
op_plus
l_int|1
suffix:semicolon
r_return
id|RTC_24H
suffix:semicolon
)brace
DECL|function|set_rtc_time
r_static
r_int
id|set_rtc_time
c_func
(paren
r_struct
id|rtc_time
op_star
id|wtime
)paren
(brace
id|u_int32_t
id|secs
suffix:semicolon
id|secs
op_assign
id|mktime
c_func
(paren
id|wtime-&gt;tm_year
op_plus
l_int|1900
comma
id|wtime-&gt;tm_mon
op_plus
l_int|1
comma
id|wtime-&gt;tm_mday
comma
id|wtime-&gt;tm_hour
comma
id|wtime-&gt;tm_min
comma
id|wtime-&gt;tm_sec
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pdc_tod_set
c_func
(paren
id|secs
comma
l_int|0
)paren
OL
l_int|0
)paren
(brace
r_return
op_minus
l_int|1
suffix:semicolon
)brace
r_else
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|get_rtc_ss
r_static
r_inline
r_int
r_int
id|get_rtc_ss
c_func
(paren
r_void
)paren
(brace
r_struct
id|rtc_time
id|h
suffix:semicolon
id|get_rtc_time
c_func
(paren
op_amp
id|h
)paren
suffix:semicolon
r_return
id|h.tm_sec
suffix:semicolon
)brace
DECL|function|get_rtc_pll
r_static
r_inline
r_int
id|get_rtc_pll
c_func
(paren
r_struct
id|rtc_pll_info
op_star
id|pll
)paren
(brace
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
DECL|function|set_rtc_pll
r_static
r_inline
r_int
id|set_rtc_pll
c_func
(paren
r_struct
id|rtc_pll_info
op_star
id|pll
)paren
(brace
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* __ASM_RTC_H__ */
eof
