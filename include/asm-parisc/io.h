macro_line|#ifndef _ASM_IO_H
DECL|macro|_ASM_IO_H
mdefine_line|#define _ASM_IO_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;asm/pgtable.h&gt;
r_extern
r_int
r_int
id|parisc_vmerge_boundary
suffix:semicolon
r_extern
r_int
r_int
id|parisc_vmerge_max_size
suffix:semicolon
DECL|macro|BIO_VMERGE_BOUNDARY
mdefine_line|#define BIO_VMERGE_BOUNDARY&t;parisc_vmerge_boundary
DECL|macro|BIO_VMERGE_MAX_SIZE
mdefine_line|#define BIO_VMERGE_MAX_SIZE&t;parisc_vmerge_max_size
DECL|macro|virt_to_phys
mdefine_line|#define virt_to_phys(a) ((unsigned long)__pa(a))
DECL|macro|phys_to_virt
mdefine_line|#define phys_to_virt(a) __va(a)
DECL|macro|virt_to_bus
mdefine_line|#define virt_to_bus virt_to_phys
DECL|macro|bus_to_virt
mdefine_line|#define bus_to_virt phys_to_virt
multiline_comment|/*&n; * Memory mapped I/O&n; *&n; * readX()/writeX() do byteswapping and take an ioremapped address&n; * __raw_readX()/__raw_writeX() don&squot;t byteswap and take an ioremapped address.&n; * gsc_*() don&squot;t byteswap and operate on physical addresses;&n; *   eg dev-&gt;hpa or 0xfee00000.&n; */
macro_line|#ifdef CONFIG_DEBUG_IOREMAP
macro_line|#ifdef CONFIG_64BIT
DECL|macro|NYBBLE_SHIFT
mdefine_line|#define NYBBLE_SHIFT 60
macro_line|#else
DECL|macro|NYBBLE_SHIFT
mdefine_line|#define NYBBLE_SHIFT 28
macro_line|#endif
r_extern
r_void
id|gsc_bad_addr
c_func
(paren
r_int
r_int
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|__raw_bad_addr
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
DECL|macro|gsc_check_addr
mdefine_line|#define gsc_check_addr(addr)&t;&t;&t;&t;&t;&bslash;&n;&t;if ((addr &gt;&gt; NYBBLE_SHIFT) != 0xf) {&t;&t;&t;&bslash;&n;&t;&t;gsc_bad_addr(addr);&t;&t;&t;&t;&bslash;&n;&t;&t;addr |= 0xfUL &lt;&lt; NYBBLE_SHIFT;&t;&t;&t;&bslash;&n;&t;}
DECL|macro|__raw_check_addr
mdefine_line|#define __raw_check_addr(addr)&t;&t;&t;&t;&t;&bslash;&n;&t;if (((unsigned long)addr &gt;&gt; NYBBLE_SHIFT) != 0xe)&t;&bslash;&n;&t;&t;__raw_bad_addr(addr);&t;&t;&t;&bslash;&n;&t;addr = (void *)((unsigned long)addr | (0xfUL &lt;&lt; NYBBLE_SHIFT));
macro_line|#else
DECL|macro|gsc_check_addr
mdefine_line|#define gsc_check_addr(addr)
DECL|macro|__raw_check_addr
mdefine_line|#define __raw_check_addr(addr)
macro_line|#endif
DECL|function|gsc_readb
r_static
r_inline
r_int
r_char
id|gsc_readb
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
id|flags
suffix:semicolon
r_int
r_char
id|ret
suffix:semicolon
id|gsc_check_addr
c_func
(paren
id|addr
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&t;rsm&t;2,%0&bslash;n&quot;
l_string|&quot;&t;ldbx&t;0(%2),%1&bslash;n&quot;
l_string|&quot;&t;mtsm&t;%0&bslash;n&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|flags
)paren
comma
l_string|&quot;=r&quot;
(paren
id|ret
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|gsc_readw
r_static
r_inline
r_int
r_int
id|gsc_readw
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
id|flags
suffix:semicolon
r_int
r_int
id|ret
suffix:semicolon
id|gsc_check_addr
c_func
(paren
id|addr
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&t;rsm&t;2,%0&bslash;n&quot;
l_string|&quot;&t;ldhx&t;0(%2),%1&bslash;n&quot;
l_string|&quot;&t;mtsm&t;%0&bslash;n&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|flags
)paren
comma
l_string|&quot;=r&quot;
(paren
id|ret
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|gsc_readl
r_static
r_inline
r_int
r_int
id|gsc_readl
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
id|u32
id|ret
suffix:semicolon
id|gsc_check_addr
c_func
(paren
id|addr
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&t;ldwax&t;0(%1),%0&bslash;n&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|ret
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|gsc_readq
r_static
r_inline
r_int
r_int
r_int
id|gsc_readq
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
r_int
r_int
id|ret
suffix:semicolon
id|gsc_check_addr
c_func
(paren
id|addr
)paren
suffix:semicolon
macro_line|#ifdef __LP64__
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&t;ldda&t;0(%1),%0&bslash;n&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|ret
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
macro_line|#else
multiline_comment|/* two reads may have side effects.. */
id|ret
op_assign
(paren
(paren
id|u64
)paren
id|gsc_readl
c_func
(paren
id|addr
)paren
)paren
op_lshift
l_int|32
suffix:semicolon
id|ret
op_or_assign
id|gsc_readl
c_func
(paren
id|addr
op_plus
l_int|4
)paren
suffix:semicolon
macro_line|#endif
r_return
id|ret
suffix:semicolon
)brace
DECL|function|gsc_writeb
r_static
r_inline
r_void
id|gsc_writeb
c_func
(paren
r_int
r_char
id|val
comma
r_int
r_int
id|addr
)paren
(brace
r_int
id|flags
suffix:semicolon
id|gsc_check_addr
c_func
(paren
id|addr
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&t;rsm&t;2,%0&bslash;n&quot;
l_string|&quot;&t;stbs&t;%1,0(%2)&bslash;n&quot;
l_string|&quot;&t;mtsm&t;%0&bslash;n&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|flags
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|val
)paren
comma
l_string|&quot;r&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
DECL|function|gsc_writew
r_static
r_inline
r_void
id|gsc_writew
c_func
(paren
r_int
r_int
id|val
comma
r_int
r_int
id|addr
)paren
(brace
r_int
id|flags
suffix:semicolon
id|gsc_check_addr
c_func
(paren
id|addr
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&t;rsm&t;2,%0&bslash;n&quot;
l_string|&quot;&t;sths&t;%1,0(%2)&bslash;n&quot;
l_string|&quot;&t;mtsm&t;%0&bslash;n&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|flags
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|val
)paren
comma
l_string|&quot;r&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
DECL|function|gsc_writel
r_static
r_inline
r_void
id|gsc_writel
c_func
(paren
r_int
r_int
id|val
comma
r_int
r_int
id|addr
)paren
(brace
id|gsc_check_addr
c_func
(paren
id|addr
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&t;stwas&t;%0,0(%1)&bslash;n&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|val
)paren
comma
l_string|&quot;r&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
DECL|function|gsc_writeq
r_static
r_inline
r_void
id|gsc_writeq
c_func
(paren
r_int
r_int
r_int
id|val
comma
r_int
r_int
id|addr
)paren
(brace
id|gsc_check_addr
c_func
(paren
id|addr
)paren
suffix:semicolon
macro_line|#ifdef __LP64__
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&t;stda&t;%0,0(%1)&bslash;n&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|val
)paren
comma
l_string|&quot;r&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
macro_line|#else
multiline_comment|/* two writes may have side effects.. */
id|gsc_writel
c_func
(paren
id|val
op_rshift
l_int|32
comma
id|addr
)paren
suffix:semicolon
id|gsc_writel
c_func
(paren
id|val
comma
id|addr
op_plus
l_int|4
)paren
suffix:semicolon
macro_line|#endif
)brace
multiline_comment|/*&n; * The standard PCI ioremap interfaces&n; */
r_extern
r_void
id|__iomem
op_star
id|__ioremap
c_func
(paren
r_int
r_int
id|offset
comma
r_int
r_int
id|size
comma
r_int
r_int
id|flags
)paren
suffix:semicolon
DECL|function|ioremap
r_extern
r_inline
r_void
id|__iomem
op_star
id|ioremap
c_func
(paren
r_int
r_int
id|offset
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|__ioremap
c_func
(paren
id|offset
comma
id|size
comma
l_int|0
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * This one maps high address device memory and turns off caching for that area.&n; * it&squot;s useful if some control registers are in such an area and write combining&n; * or read caching is not desirable:&n; */
DECL|function|ioremap_nocache
r_extern
r_inline
r_void
op_star
id|ioremap_nocache
c_func
(paren
r_int
r_int
id|offset
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|__ioremap
c_func
(paren
id|offset
comma
id|size
comma
id|_PAGE_NO_CACHE
multiline_comment|/* _PAGE_PCD */
)paren
suffix:semicolon
)brace
r_extern
r_void
id|iounmap
c_func
(paren
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
multiline_comment|/*&n; * USE_HPPA_IOREMAP is the magic flag to enable or disable real ioremap()&n; * functionality.  It&squot;s currently disabled because it may not work on some&n; * machines.&n; */
DECL|macro|USE_HPPA_IOREMAP
mdefine_line|#define USE_HPPA_IOREMAP 0
macro_line|#if USE_HPPA_IOREMAP
DECL|function|__raw_readb
r_static
r_inline
r_int
r_char
id|__raw_readb
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_return
(paren
op_star
(paren
r_volatile
r_int
r_char
id|__force
op_star
)paren
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
DECL|function|__raw_readw
r_static
r_inline
r_int
r_int
id|__raw_readw
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
r_int
r_int
id|__force
op_star
)paren
id|addr
suffix:semicolon
)brace
DECL|function|__raw_readl
r_static
r_inline
r_int
r_int
id|__raw_readl
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
r_int
r_int
id|__force
op_star
)paren
id|addr
suffix:semicolon
)brace
DECL|function|__raw_readq
r_static
r_inline
r_int
r_int
r_int
id|__raw_readq
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
r_int
r_int
r_int
id|__force
op_star
)paren
id|addr
suffix:semicolon
)brace
DECL|function|__raw_writeb
r_static
r_inline
r_void
id|__raw_writeb
c_func
(paren
r_int
r_char
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
op_star
(paren
r_volatile
r_int
r_char
id|__force
op_star
)paren
id|addr
op_assign
id|b
suffix:semicolon
)brace
DECL|function|__raw_writew
r_static
r_inline
r_void
id|__raw_writew
c_func
(paren
r_int
r_int
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
op_star
(paren
r_volatile
r_int
r_int
id|__force
op_star
)paren
id|addr
op_assign
id|b
suffix:semicolon
)brace
DECL|function|__raw_writel
r_static
r_inline
r_void
id|__raw_writel
c_func
(paren
r_int
r_int
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
op_star
(paren
r_volatile
r_int
r_int
id|__force
op_star
)paren
id|addr
op_assign
id|b
suffix:semicolon
)brace
DECL|function|__raw_writeq
r_static
r_inline
r_void
id|__raw_writeq
c_func
(paren
r_int
r_int
r_int
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
op_star
(paren
r_volatile
r_int
r_int
r_int
id|__force
op_star
)paren
id|addr
op_assign
id|b
suffix:semicolon
)brace
macro_line|#else /* !USE_HPPA_IOREMAP */
DECL|function|__raw_readb
r_static
r_inline
r_int
r_char
id|__raw_readb
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|__raw_check_addr
c_func
(paren
id|addr
)paren
suffix:semicolon
r_return
id|gsc_readb
c_func
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|__raw_readw
r_static
r_inline
r_int
r_int
id|__raw_readw
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|__raw_check_addr
c_func
(paren
id|addr
)paren
suffix:semicolon
r_return
id|gsc_readw
c_func
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|__raw_readl
r_static
r_inline
r_int
r_int
id|__raw_readl
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|__raw_check_addr
c_func
(paren
id|addr
)paren
suffix:semicolon
r_return
id|gsc_readl
c_func
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|__raw_readq
r_static
r_inline
r_int
r_int
r_int
id|__raw_readq
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|__raw_check_addr
c_func
(paren
id|addr
)paren
suffix:semicolon
r_return
id|gsc_readq
c_func
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|__raw_writeb
r_static
r_inline
r_void
id|__raw_writeb
c_func
(paren
r_int
r_char
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|__raw_check_addr
c_func
(paren
id|addr
)paren
suffix:semicolon
id|gsc_writeb
c_func
(paren
id|b
comma
(paren
r_int
r_int
)paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|__raw_writew
r_static
r_inline
r_void
id|__raw_writew
c_func
(paren
r_int
r_int
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|__raw_check_addr
c_func
(paren
id|addr
)paren
suffix:semicolon
id|gsc_writew
c_func
(paren
id|b
comma
(paren
r_int
r_int
)paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|__raw_writel
r_static
r_inline
r_void
id|__raw_writel
c_func
(paren
r_int
r_int
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|__raw_check_addr
c_func
(paren
id|addr
)paren
suffix:semicolon
id|gsc_writel
c_func
(paren
id|b
comma
(paren
r_int
r_int
)paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|__raw_writeq
r_static
r_inline
r_void
id|__raw_writeq
c_func
(paren
r_int
r_int
r_int
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|__raw_check_addr
c_func
(paren
id|addr
)paren
suffix:semicolon
id|gsc_writeq
c_func
(paren
id|b
comma
(paren
r_int
r_int
)paren
id|addr
)paren
suffix:semicolon
)brace
macro_line|#endif /* !USE_HPPA_IOREMAP */
multiline_comment|/* readb can never be const, so use __fswab instead of le*_to_cpu */
DECL|macro|readb
mdefine_line|#define readb(addr) __raw_readb(addr)
DECL|macro|readw
mdefine_line|#define readw(addr) __fswab16(__raw_readw(addr))
DECL|macro|readl
mdefine_line|#define readl(addr) __fswab32(__raw_readl(addr))
DECL|macro|readq
mdefine_line|#define readq(addr) __fswab64(__raw_readq(addr))
DECL|macro|writeb
mdefine_line|#define writeb(b, addr) __raw_writeb(b, addr)
DECL|macro|writew
mdefine_line|#define writew(b, addr) __raw_writew(cpu_to_le16(b), addr)
DECL|macro|writel
mdefine_line|#define writel(b, addr) __raw_writel(cpu_to_le32(b), addr)
DECL|macro|writeq
mdefine_line|#define writeq(b, addr) __raw_writeq(cpu_to_le64(b), addr)
DECL|macro|readb_relaxed
mdefine_line|#define readb_relaxed(addr) readb(addr)
DECL|macro|readw_relaxed
mdefine_line|#define readw_relaxed(addr) readw(addr)
DECL|macro|readl_relaxed
mdefine_line|#define readl_relaxed(addr) readl(addr)
DECL|macro|readq_relaxed
mdefine_line|#define readq_relaxed(addr) readq(addr)
DECL|macro|mmiowb
mdefine_line|#define mmiowb() do { } while (0)
r_void
id|memset_io
c_func
(paren
r_volatile
r_void
id|__iomem
op_star
id|addr
comma
r_int
r_char
id|val
comma
r_int
id|count
)paren
suffix:semicolon
r_void
id|memcpy_fromio
c_func
(paren
r_void
op_star
id|dst
comma
r_const
r_volatile
r_void
id|__iomem
op_star
id|src
comma
r_int
id|count
)paren
suffix:semicolon
r_void
id|memcpy_toio
c_func
(paren
r_volatile
r_void
id|__iomem
op_star
id|dst
comma
r_const
r_void
op_star
id|src
comma
r_int
id|count
)paren
suffix:semicolon
multiline_comment|/* Support old drivers which don&squot;t ioremap.&n; * NB this interface is scheduled to disappear in 2.5&n; */
DECL|macro|__isa_addr
mdefine_line|#define __isa_addr(x) (void __iomem *)(F_EXTEND(0xfc000000) | (x))
DECL|macro|isa_readb
mdefine_line|#define isa_readb(a) readb(__isa_addr(a))
DECL|macro|isa_readw
mdefine_line|#define isa_readw(a) readw(__isa_addr(a))
DECL|macro|isa_readl
mdefine_line|#define isa_readl(a) readl(__isa_addr(a))
DECL|macro|isa_writeb
mdefine_line|#define isa_writeb(b,a) writeb((b), __isa_addr(a))
DECL|macro|isa_writew
mdefine_line|#define isa_writew(b,a) writew((b), __isa_addr(a))
DECL|macro|isa_writel
mdefine_line|#define isa_writel(b,a) writel((b), __isa_addr(a))
DECL|macro|isa_memset_io
mdefine_line|#define isa_memset_io(a,b,c) memset_io(__isa_addr(a), (b), (c))
DECL|macro|isa_memcpy_fromio
mdefine_line|#define isa_memcpy_fromio(a,b,c) memcpy_fromio((a), __isa_addr(b), (c))
DECL|macro|isa_memcpy_toio
mdefine_line|#define isa_memcpy_toio(a,b,c) memcpy_toio(__isa_addr(a), (b), (c))
multiline_comment|/*&n; * XXX - We don&squot;t have csum_partial_copy_fromio() yet, so we cheat here and &n; * just copy it. The net code will then do the checksum later. Presently &n; * only used by some shared memory 8390 Ethernet cards anyway.&n; */
DECL|macro|eth_io_copy_and_sum
mdefine_line|#define eth_io_copy_and_sum(skb,src,len,unused) &bslash;&n;  memcpy_fromio((skb)-&gt;data,(src),(len))
DECL|macro|isa_eth_io_copy_and_sum
mdefine_line|#define isa_eth_io_copy_and_sum(skb,src,len,unused) &bslash;&n;  isa_memcpy_fromio((skb)-&gt;data,(src),(len))
multiline_comment|/* Port-space IO */
DECL|macro|inb_p
mdefine_line|#define inb_p inb
DECL|macro|inw_p
mdefine_line|#define inw_p inw
DECL|macro|inl_p
mdefine_line|#define inl_p inl
DECL|macro|outb_p
mdefine_line|#define outb_p outb
DECL|macro|outw_p
mdefine_line|#define outw_p outw
DECL|macro|outl_p
mdefine_line|#define outl_p outl
r_extern
r_int
r_char
id|eisa_in8
c_func
(paren
r_int
r_int
id|port
)paren
suffix:semicolon
r_extern
r_int
r_int
id|eisa_in16
c_func
(paren
r_int
r_int
id|port
)paren
suffix:semicolon
r_extern
r_int
r_int
id|eisa_in32
c_func
(paren
r_int
r_int
id|port
)paren
suffix:semicolon
r_extern
r_void
id|eisa_out8
c_func
(paren
r_int
r_char
id|data
comma
r_int
r_int
id|port
)paren
suffix:semicolon
r_extern
r_void
id|eisa_out16
c_func
(paren
r_int
r_int
id|data
comma
r_int
r_int
id|port
)paren
suffix:semicolon
r_extern
r_void
id|eisa_out32
c_func
(paren
r_int
r_int
id|data
comma
r_int
r_int
id|port
)paren
suffix:semicolon
macro_line|#if defined(CONFIG_PCI)
r_extern
r_int
r_char
id|inb
c_func
(paren
r_int
id|addr
)paren
suffix:semicolon
r_extern
r_int
r_int
id|inw
c_func
(paren
r_int
id|addr
)paren
suffix:semicolon
r_extern
r_int
r_int
id|inl
c_func
(paren
r_int
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|outb
c_func
(paren
r_int
r_char
id|b
comma
r_int
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|outw
c_func
(paren
r_int
r_int
id|b
comma
r_int
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|outl
c_func
(paren
r_int
r_int
id|b
comma
r_int
id|addr
)paren
suffix:semicolon
macro_line|#elif defined(CONFIG_EISA)
DECL|macro|inb
mdefine_line|#define inb eisa_in8
DECL|macro|inw
mdefine_line|#define inw eisa_in16
DECL|macro|inl
mdefine_line|#define inl eisa_in32
DECL|macro|outb
mdefine_line|#define outb eisa_out8
DECL|macro|outw
mdefine_line|#define outw eisa_out16
DECL|macro|outl
mdefine_line|#define outl eisa_out32
macro_line|#else
DECL|function|inb
r_static
r_inline
r_char
id|inb
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
id|BUG
c_func
(paren
)paren
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
DECL|function|inw
r_static
r_inline
r_int
id|inw
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
id|BUG
c_func
(paren
)paren
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
DECL|function|inl
r_static
r_inline
r_int
id|inl
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
id|BUG
c_func
(paren
)paren
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
DECL|macro|outb
mdefine_line|#define outb(x, y)&t;BUG()
DECL|macro|outw
mdefine_line|#define outw(x, y)&t;BUG()
DECL|macro|outl
mdefine_line|#define outl(x, y)&t;BUG()
macro_line|#endif
multiline_comment|/*&n; * String versions of in/out ops:&n; */
r_extern
r_void
id|insb
(paren
r_int
r_int
id|port
comma
r_void
op_star
id|dst
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|insw
(paren
r_int
r_int
id|port
comma
r_void
op_star
id|dst
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|insl
(paren
r_int
r_int
id|port
comma
r_void
op_star
id|dst
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|outsb
(paren
r_int
r_int
id|port
comma
r_const
r_void
op_star
id|src
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|outsw
(paren
r_int
r_int
id|port
comma
r_const
r_void
op_star
id|src
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|outsl
(paren
r_int
r_int
id|port
comma
r_const
r_void
op_star
id|src
comma
r_int
r_int
id|count
)paren
suffix:semicolon
multiline_comment|/* IO Port space is :      BBiiii   where BB is HBA number. */
DECL|macro|IO_SPACE_LIMIT
mdefine_line|#define IO_SPACE_LIMIT 0x00ffffff
DECL|macro|dma_cache_inv
mdefine_line|#define dma_cache_inv(_start,_size)&t;&t;do { flush_kernel_dcache_range(_start,_size); } while (0)
DECL|macro|dma_cache_wback
mdefine_line|#define dma_cache_wback(_start,_size)&t;&t;do { flush_kernel_dcache_range(_start,_size); } while (0)
DECL|macro|dma_cache_wback_inv
mdefine_line|#define dma_cache_wback_inv(_start,_size)&t;do { flush_kernel_dcache_range(_start,_size); } while (0)
multiline_comment|/* PA machines have an MM I/O space from 0xf0000000-0xffffffff in 32&n; * bit mode and from 0xfffffffff0000000-0xfffffffffffffff in 64 bit&n; * mode (essentially just sign extending.  This macro takes in a 32&n; * bit I/O address (still with the leading f) and outputs the correct&n; * value for either 32 or 64 bit mode */
DECL|macro|F_EXTEND
mdefine_line|#define F_EXTEND(x) ((unsigned long)((x) | (0xffffffff00000000ULL)))
macro_line|#include &lt;asm-generic/iomap.h&gt;
multiline_comment|/*&n; * Convert a physical pointer to a virtual kernel pointer for /dev/mem&n; * access&n; */
DECL|macro|xlate_dev_mem_ptr
mdefine_line|#define xlate_dev_mem_ptr(p)&t;__va(p)
multiline_comment|/*&n; * Convert a virtual cached pointer to an uncached pointer&n; */
DECL|macro|xlate_dev_kmem_ptr
mdefine_line|#define xlate_dev_kmem_ptr(p)&t;p
macro_line|#endif
eof
