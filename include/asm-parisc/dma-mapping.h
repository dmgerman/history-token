macro_line|#ifndef _PARISC_DMA_MAPPING_H
DECL|macro|_PARISC_DMA_MAPPING_H
mdefine_line|#define _PARISC_DMA_MAPPING_H
macro_line|#include &lt;linux/mm.h&gt;
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;asm/cacheflush.h&gt;
macro_line|#include &lt;asm/scatterlist.h&gt;
multiline_comment|/* See Documentation/DMA-mapping.txt */
DECL|struct|hppa_dma_ops
r_struct
id|hppa_dma_ops
(brace
DECL|member|dma_supported
r_int
(paren
op_star
id|dma_supported
)paren
(paren
r_struct
id|device
op_star
id|dev
comma
id|u64
id|mask
)paren
suffix:semicolon
DECL|member|alloc_consistent
r_void
op_star
(paren
op_star
id|alloc_consistent
)paren
(paren
r_struct
id|device
op_star
id|dev
comma
r_int
id|size
comma
id|dma_addr_t
op_star
id|iova
comma
r_int
id|flag
)paren
suffix:semicolon
DECL|member|alloc_noncoherent
r_void
op_star
(paren
op_star
id|alloc_noncoherent
)paren
(paren
r_struct
id|device
op_star
id|dev
comma
r_int
id|size
comma
id|dma_addr_t
op_star
id|iova
comma
r_int
id|flag
)paren
suffix:semicolon
DECL|member|free_consistent
r_void
(paren
op_star
id|free_consistent
)paren
(paren
r_struct
id|device
op_star
id|dev
comma
r_int
id|size
comma
r_void
op_star
id|vaddr
comma
id|dma_addr_t
id|iova
)paren
suffix:semicolon
DECL|member|map_single
id|dma_addr_t
(paren
op_star
id|map_single
)paren
(paren
r_struct
id|device
op_star
id|dev
comma
r_void
op_star
id|addr
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
suffix:semicolon
DECL|member|unmap_single
r_void
(paren
op_star
id|unmap_single
)paren
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|iova
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
suffix:semicolon
DECL|member|map_sg
r_int
(paren
op_star
id|map_sg
)paren
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nents
comma
r_enum
id|dma_data_direction
id|direction
)paren
suffix:semicolon
DECL|member|unmap_sg
r_void
(paren
op_star
id|unmap_sg
)paren
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nhwents
comma
r_enum
id|dma_data_direction
id|direction
)paren
suffix:semicolon
DECL|member|dma_sync_single_for_cpu
r_void
(paren
op_star
id|dma_sync_single_for_cpu
)paren
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|iova
comma
r_int
r_int
id|offset
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
suffix:semicolon
DECL|member|dma_sync_single_for_device
r_void
(paren
op_star
id|dma_sync_single_for_device
)paren
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|iova
comma
r_int
r_int
id|offset
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
suffix:semicolon
DECL|member|dma_sync_sg_for_cpu
r_void
(paren
op_star
id|dma_sync_sg_for_cpu
)paren
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nelems
comma
r_enum
id|dma_data_direction
id|direction
)paren
suffix:semicolon
DECL|member|dma_sync_sg_for_device
r_void
(paren
op_star
id|dma_sync_sg_for_device
)paren
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nelems
comma
r_enum
id|dma_data_direction
id|direction
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n;** We could live without the hppa_dma_ops indirection if we didn&squot;t want&n;** to support 4 different coherent dma models with one binary (they will&n;** someday be loadable modules):&n;**     I/O MMU        consistent method           dma_sync behavior&n;**  =============   ======================       =======================&n;**  a) PA-7x00LC    uncachable host memory          flush/purge&n;**  b) U2/Uturn      cachable host memory              NOP&n;**  c) Ike/Astro     cachable host memory              NOP&n;**  d) EPIC/SAGA     memory on EPIC/SAGA         flush/reset DMA channel&n;**&n;** PA-7[13]00LC processors have a GSC bus interface and no I/O MMU.&n;**&n;** Systems (eg PCX-T workstations) that don&squot;t fall into the above&n;** categories will need to modify the needed drivers to perform&n;** flush/purge and allocate &quot;regular&quot; cacheable pages for everything.&n;*/
macro_line|#ifdef CONFIG_PA11
r_extern
r_struct
id|hppa_dma_ops
id|pcxl_dma_ops
suffix:semicolon
r_extern
r_struct
id|hppa_dma_ops
id|pcx_dma_ops
suffix:semicolon
macro_line|#endif
r_extern
r_struct
id|hppa_dma_ops
op_star
id|hppa_dma_ops
suffix:semicolon
r_static
r_inline
r_void
op_star
DECL|function|dma_alloc_coherent
id|dma_alloc_coherent
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_int
id|size
comma
id|dma_addr_t
op_star
id|dma_handle
comma
r_int
id|flag
)paren
(brace
r_return
id|hppa_dma_ops
op_member_access_from_pointer
id|alloc_consistent
c_func
(paren
id|dev
comma
id|size
comma
id|dma_handle
comma
id|flag
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
op_star
DECL|function|dma_alloc_noncoherent
id|dma_alloc_noncoherent
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_int
id|size
comma
id|dma_addr_t
op_star
id|dma_handle
comma
r_int
id|flag
)paren
(brace
r_return
id|hppa_dma_ops
op_member_access_from_pointer
id|alloc_noncoherent
c_func
(paren
id|dev
comma
id|size
comma
id|dma_handle
comma
id|flag
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|dma_free_coherent
id|dma_free_coherent
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_int
id|size
comma
r_void
op_star
id|vaddr
comma
id|dma_addr_t
id|dma_handle
)paren
(brace
id|hppa_dma_ops
op_member_access_from_pointer
id|free_consistent
c_func
(paren
id|dev
comma
id|size
comma
id|vaddr
comma
id|dma_handle
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|dma_free_noncoherent
id|dma_free_noncoherent
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_int
id|size
comma
r_void
op_star
id|vaddr
comma
id|dma_addr_t
id|dma_handle
)paren
(brace
id|hppa_dma_ops
op_member_access_from_pointer
id|free_consistent
c_func
(paren
id|dev
comma
id|size
comma
id|vaddr
comma
id|dma_handle
)paren
suffix:semicolon
)brace
r_static
r_inline
id|dma_addr_t
DECL|function|dma_map_single
id|dma_map_single
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_void
op_star
id|ptr
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
r_return
id|hppa_dma_ops
op_member_access_from_pointer
id|map_single
c_func
(paren
id|dev
comma
id|ptr
comma
id|size
comma
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|dma_unmap_single
id|dma_unmap_single
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_addr
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
id|hppa_dma_ops
op_member_access_from_pointer
id|unmap_single
c_func
(paren
id|dev
comma
id|dma_addr
comma
id|size
comma
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|dma_map_sg
id|dma_map_sg
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nents
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
r_return
id|hppa_dma_ops
op_member_access_from_pointer
id|map_sg
c_func
(paren
id|dev
comma
id|sg
comma
id|nents
comma
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|dma_unmap_sg
id|dma_unmap_sg
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nhwentries
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
id|hppa_dma_ops
op_member_access_from_pointer
id|unmap_sg
c_func
(paren
id|dev
comma
id|sg
comma
id|nhwentries
comma
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
id|dma_addr_t
DECL|function|dma_map_page
id|dma_map_page
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|page
op_star
id|page
comma
r_int
r_int
id|offset
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
r_return
id|dma_map_single
c_func
(paren
id|dev
comma
(paren
id|page_address
c_func
(paren
id|page
)paren
op_plus
(paren
id|offset
)paren
)paren
comma
id|size
comma
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|dma_unmap_page
id|dma_unmap_page
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_address
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
id|dma_unmap_single
c_func
(paren
id|dev
comma
id|dma_address
comma
id|size
comma
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|dma_sync_single_for_cpu
id|dma_sync_single_for_cpu
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_handle
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
r_if
c_cond
(paren
id|hppa_dma_ops-&gt;dma_sync_single_for_cpu
)paren
(brace
id|hppa_dma_ops
op_member_access_from_pointer
id|dma_sync_single_for_cpu
c_func
(paren
id|dev
comma
id|dma_handle
comma
l_int|0
comma
id|size
comma
id|direction
)paren
suffix:semicolon
)brace
)brace
r_static
r_inline
r_void
DECL|function|dma_sync_single_for_device
id|dma_sync_single_for_device
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_handle
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
r_if
c_cond
(paren
id|hppa_dma_ops-&gt;dma_sync_single_for_device
)paren
(brace
id|hppa_dma_ops
op_member_access_from_pointer
id|dma_sync_single_for_device
c_func
(paren
id|dev
comma
id|dma_handle
comma
l_int|0
comma
id|size
comma
id|direction
)paren
suffix:semicolon
)brace
)brace
r_static
r_inline
r_void
DECL|function|dma_sync_single_range_for_cpu
id|dma_sync_single_range_for_cpu
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_handle
comma
r_int
r_int
id|offset
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
r_if
c_cond
(paren
id|hppa_dma_ops-&gt;dma_sync_single_for_cpu
)paren
(brace
id|hppa_dma_ops
op_member_access_from_pointer
id|dma_sync_single_for_cpu
c_func
(paren
id|dev
comma
id|dma_handle
comma
id|offset
comma
id|size
comma
id|direction
)paren
suffix:semicolon
)brace
)brace
r_static
r_inline
r_void
DECL|function|dma_sync_single_range_for_device
id|dma_sync_single_range_for_device
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_handle
comma
r_int
r_int
id|offset
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
r_if
c_cond
(paren
id|hppa_dma_ops-&gt;dma_sync_single_for_device
)paren
(brace
id|hppa_dma_ops
op_member_access_from_pointer
id|dma_sync_single_for_device
c_func
(paren
id|dev
comma
id|dma_handle
comma
id|offset
comma
id|size
comma
id|direction
)paren
suffix:semicolon
)brace
)brace
r_static
r_inline
r_void
DECL|function|dma_sync_sg_for_cpu
id|dma_sync_sg_for_cpu
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nelems
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
r_if
c_cond
(paren
id|hppa_dma_ops-&gt;dma_sync_sg_for_cpu
)paren
(brace
id|hppa_dma_ops
op_member_access_from_pointer
id|dma_sync_sg_for_cpu
c_func
(paren
id|dev
comma
id|sg
comma
id|nelems
comma
id|direction
)paren
suffix:semicolon
)brace
)brace
r_static
r_inline
r_void
DECL|function|dma_sync_sg_for_device
id|dma_sync_sg_for_device
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nelems
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
r_if
c_cond
(paren
id|hppa_dma_ops-&gt;dma_sync_sg_for_device
)paren
(brace
id|hppa_dma_ops
op_member_access_from_pointer
id|dma_sync_sg_for_device
c_func
(paren
id|dev
comma
id|sg
comma
id|nelems
comma
id|direction
)paren
suffix:semicolon
)brace
)brace
r_static
r_inline
r_int
DECL|function|dma_supported
id|dma_supported
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|u64
id|mask
)paren
(brace
r_return
id|hppa_dma_ops
op_member_access_from_pointer
id|dma_supported
c_func
(paren
id|dev
comma
id|mask
)paren
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|dma_set_mask
id|dma_set_mask
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|u64
id|mask
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|dev-&gt;dma_mask
op_logical_or
op_logical_neg
id|dma_supported
c_func
(paren
id|dev
comma
id|mask
)paren
)paren
(brace
r_return
op_minus
id|EIO
suffix:semicolon
)brace
op_star
id|dev-&gt;dma_mask
op_assign
id|mask
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|dma_get_cache_alignment
id|dma_get_cache_alignment
c_func
(paren
r_void
)paren
(brace
r_return
id|dcache_stride
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|dma_is_consistent
id|dma_is_consistent
c_func
(paren
id|dma_addr_t
id|dma_addr
)paren
(brace
r_return
(paren
id|hppa_dma_ops-&gt;dma_sync_single_for_cpu
op_eq
l_int|NULL
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|dma_cache_sync
id|dma_cache_sync
c_func
(paren
r_void
op_star
id|vaddr
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
r_if
c_cond
(paren
id|hppa_dma_ops-&gt;dma_sync_single_for_cpu
)paren
(brace
id|flush_kernel_dcache_range
c_func
(paren
(paren
r_int
r_int
)paren
id|vaddr
comma
id|size
)paren
suffix:semicolon
)brace
)brace
r_static
r_inline
r_void
op_star
DECL|function|parisc_walk_tree
id|parisc_walk_tree
c_func
(paren
r_struct
id|device
op_star
id|dev
)paren
(brace
r_struct
id|device
op_star
id|otherdev
suffix:semicolon
r_if
c_cond
(paren
id|likely
c_func
(paren
id|dev-&gt;platform_data
op_ne
l_int|NULL
)paren
)paren
(brace
r_return
id|dev-&gt;platform_data
suffix:semicolon
)brace
multiline_comment|/* OK, just traverse the bus to find it */
r_for
c_loop
(paren
id|otherdev
op_assign
id|dev-&gt;parent
suffix:semicolon
id|otherdev
suffix:semicolon
id|otherdev
op_assign
id|otherdev-&gt;parent
)paren
(brace
r_if
c_cond
(paren
id|otherdev-&gt;platform_data
)paren
(brace
id|dev-&gt;platform_data
op_assign
id|otherdev-&gt;platform_data
suffix:semicolon
r_break
suffix:semicolon
)brace
)brace
id|BUG_ON
c_func
(paren
op_logical_neg
id|dev-&gt;platform_data
)paren
suffix:semicolon
r_return
id|dev-&gt;platform_data
suffix:semicolon
)brace
DECL|macro|GET_IOC
mdefine_line|#define GET_IOC(dev) (HBA_DATA(parisc_walk_tree(dev))-&gt;iommu);&t;
macro_line|#ifdef CONFIG_IOMMU_CCIO
r_struct
id|parisc_device
suffix:semicolon
r_struct
id|ioc
suffix:semicolon
r_void
op_star
id|ccio_get_iommu
c_func
(paren
r_const
r_struct
id|parisc_device
op_star
id|dev
)paren
suffix:semicolon
r_int
id|ccio_request_resource
c_func
(paren
r_const
r_struct
id|parisc_device
op_star
id|dev
comma
r_struct
id|resource
op_star
id|res
)paren
suffix:semicolon
r_int
id|ccio_allocate_resource
c_func
(paren
r_const
r_struct
id|parisc_device
op_star
id|dev
comma
r_struct
id|resource
op_star
id|res
comma
r_int
r_int
id|size
comma
r_int
r_int
id|min
comma
r_int
r_int
id|max
comma
r_int
r_int
id|align
)paren
suffix:semicolon
macro_line|#else /* !CONFIG_IOMMU_CCIO */
DECL|macro|ccio_get_iommu
mdefine_line|#define ccio_get_iommu(dev) NULL
DECL|macro|ccio_request_resource
mdefine_line|#define ccio_request_resource(dev, res) request_resource(&amp;iomem_resource, res)
DECL|macro|ccio_allocate_resource
mdefine_line|#define ccio_allocate_resource(dev, res, size, min, max, align) &bslash;&n;&t;&t;allocate_resource(&amp;iomem_resource, res, size, min, max, &bslash;&n;&t;&t;&t;&t;align, NULL, NULL)
macro_line|#endif /* !CONFIG_IOMMU_CCIO */
macro_line|#ifdef CONFIG_IOMMU_SBA
r_struct
id|parisc_device
suffix:semicolon
r_void
op_star
id|sba_get_iommu
c_func
(paren
r_struct
id|parisc_device
op_star
id|dev
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/* At the moment, we panic on error for IOMMU resource exaustion */
DECL|macro|dma_mapping_error
mdefine_line|#define dma_mapping_error(x)&t;0
macro_line|#endif
eof
