macro_line|#ifndef _H8300_IO_H
DECL|macro|_H8300_IO_H
mdefine_line|#define _H8300_IO_H
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;asm/virtconvert.h&gt;
multiline_comment|/*&n; * These are for ISA/PCI shared memory _only_ and should never be used&n; * on any other type of memory, including Zorro memory. They are meant to&n; * access the bus in the bus byte order which is little-endian!.&n; *&n; * readX/writeX() are used to access memory mapped devices. On some&n; * architectures the memory mapped IO stuff needs to be accessed&n; * differently. On the m68k architecture, we just read/write the&n; * memory location directly.&n; */
multiline_comment|/* ++roman: The assignments to temp. vars avoid that gcc sometimes generates&n; * two accesses to memory, which may be undesireable for some devices.&n; */
multiline_comment|/*&n; * swap functions are sometimes needed to interface little-endian hardware&n; */
multiline_comment|/*&n; * CHANGES&n; * &n; * 020325   Added some #define&squot;s for the COBRA5272 board&n; *          (hede)&n; */
DECL|function|_swapw
r_static
r_inline
r_int
r_int
id|_swapw
c_func
(paren
r_volatile
r_int
r_int
id|v
)paren
(brace
r_return
(paren
(paren
id|v
op_lshift
l_int|8
)paren
op_or
(paren
id|v
op_rshift
l_int|8
)paren
)paren
suffix:semicolon
)brace
DECL|function|_swapl
r_static
r_inline
r_int
r_int
id|_swapl
c_func
(paren
r_volatile
r_int
r_int
id|v
)paren
(brace
r_return
(paren
(paren
id|v
op_lshift
l_int|24
)paren
op_or
(paren
(paren
id|v
op_amp
l_int|0xff00
)paren
op_lshift
l_int|8
)paren
op_or
(paren
(paren
id|v
op_amp
l_int|0xff0000
)paren
op_rshift
l_int|8
)paren
op_or
(paren
id|v
op_rshift
l_int|24
)paren
)paren
suffix:semicolon
)brace
DECL|macro|readb
mdefine_line|#define readb(addr) &bslash;&n;    ({ unsigned char __v = (*(volatile unsigned char *) (addr)); __v; })
DECL|macro|readw
mdefine_line|#define readw(addr) &bslash;&n;    ({ unsigned short __v = (*(volatile unsigned short *) (addr)); __v; })
DECL|macro|readl
mdefine_line|#define readl(addr) &bslash;&n;    ({ unsigned int __v = (*(volatile unsigned int *) (addr)); __v; })
DECL|macro|writeb
mdefine_line|#define writeb(b,addr) (void)((*(volatile unsigned char *) (addr)) = (b))
DECL|macro|writew
mdefine_line|#define writew(b,addr) (void)((*(volatile unsigned short *) (addr)) = (b))
DECL|macro|writel
mdefine_line|#define writel(b,addr) (void)((*(volatile unsigned int *) (addr)) = (b))
multiline_comment|/*&n; * The following are some defines we need for MTD with our&n; * COBRA5272 board.&n; * Because I don&squot;t know if they break something I have&n; * #ifdef&squot;d them.&n; * (020325 - hede)&n; */
macro_line|#ifdef CONFIG_senTec
DECL|macro|__raw_readb
mdefine_line|#define __raw_readb readb
DECL|macro|__raw_readw
mdefine_line|#define __raw_readw readw
DECL|macro|__raw_readl
mdefine_line|#define __raw_readl readl
DECL|macro|__raw_writeb
mdefine_line|#define __raw_writeb writeb
DECL|macro|__raw_writew
mdefine_line|#define __raw_writew writew
DECL|macro|__raw_writel
mdefine_line|#define __raw_writel writel
macro_line|#endif /* CONFIG_senTec */
DECL|function|io_outsb
r_static
r_inline
r_void
id|io_outsb
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|buf
comma
r_int
id|len
)paren
(brace
r_volatile
r_int
r_char
op_star
id|ap
op_assign
(paren
r_volatile
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
r_int
r_char
op_star
id|bp
op_assign
(paren
r_int
r_char
op_star
)paren
id|buf
suffix:semicolon
r_while
c_loop
(paren
id|len
op_decrement
)paren
op_star
id|ap
op_assign
op_star
id|bp
op_increment
suffix:semicolon
)brace
DECL|function|io_outsw
r_static
r_inline
r_void
id|io_outsw
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|buf
comma
r_int
id|len
)paren
(brace
r_volatile
r_int
r_int
op_star
id|ap
op_assign
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
r_int
r_int
op_star
id|bp
op_assign
(paren
r_int
r_int
op_star
)paren
id|buf
suffix:semicolon
r_while
c_loop
(paren
id|len
op_decrement
)paren
op_star
id|ap
op_assign
id|_swapw
c_func
(paren
op_star
id|bp
op_increment
)paren
suffix:semicolon
)brace
DECL|function|io_outsl
r_static
r_inline
r_void
id|io_outsl
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|buf
comma
r_int
id|len
)paren
(brace
r_volatile
r_int
r_int
op_star
id|ap
op_assign
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
r_int
r_int
op_star
id|bp
op_assign
(paren
r_int
r_int
op_star
)paren
id|buf
suffix:semicolon
r_while
c_loop
(paren
id|len
op_decrement
)paren
op_star
id|ap
op_assign
id|_swapl
c_func
(paren
op_star
id|bp
op_increment
)paren
suffix:semicolon
)brace
DECL|function|io_insb
r_static
r_inline
r_void
id|io_insb
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|buf
comma
r_int
id|len
)paren
(brace
r_volatile
r_int
r_char
op_star
id|ap
op_assign
(paren
r_volatile
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
r_int
r_char
op_star
id|bp
op_assign
(paren
r_int
r_char
op_star
)paren
id|buf
suffix:semicolon
r_while
c_loop
(paren
id|len
op_decrement
)paren
op_star
id|bp
op_increment
op_assign
op_star
id|ap
suffix:semicolon
)brace
DECL|function|io_insw
r_static
r_inline
r_void
id|io_insw
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|buf
comma
r_int
id|len
)paren
(brace
r_volatile
r_int
r_int
op_star
id|ap
op_assign
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
r_int
r_int
op_star
id|bp
op_assign
(paren
r_int
r_int
op_star
)paren
id|buf
suffix:semicolon
r_while
c_loop
(paren
id|len
op_decrement
)paren
op_star
id|bp
op_increment
op_assign
id|_swapw
c_func
(paren
op_star
id|ap
)paren
suffix:semicolon
)brace
DECL|function|io_insl
r_static
r_inline
r_void
id|io_insl
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|buf
comma
r_int
id|len
)paren
(brace
r_volatile
r_int
r_int
op_star
id|ap
op_assign
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
r_int
r_int
op_star
id|bp
op_assign
(paren
r_int
r_int
op_star
)paren
id|buf
suffix:semicolon
r_while
c_loop
(paren
id|len
op_decrement
)paren
op_star
id|bp
op_increment
op_assign
id|_swapl
c_func
(paren
op_star
id|ap
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; *&t;make the short names macros so specific devices&n; *&t;can override them as required&n; */
DECL|macro|memset_io
mdefine_line|#define memset_io(a,b,c)&t;memset((void *)(a),(b),(c))
DECL|macro|memcpy_fromio
mdefine_line|#define memcpy_fromio(a,b,c)&t;memcpy((a),(void *)(b),(c))
DECL|macro|memcpy_toio
mdefine_line|#define memcpy_toio(a,b,c)&t;memcpy((void *)(a),(b),(c))
DECL|macro|inb
mdefine_line|#define inb(addr)      readb(addr)
DECL|macro|inw
mdefine_line|#define inw(addr)    readw(addr)
DECL|macro|inl
mdefine_line|#define inl(addr)    readl(addr)
DECL|macro|outb
mdefine_line|#define outb(x,addr) ((void) writeb(x,addr))
DECL|macro|outw
mdefine_line|#define outw(x,addr) ((void) writew(x,addr))
DECL|macro|outl
mdefine_line|#define outl(x,addr) ((void) writel(x,addr))
DECL|macro|inb_p
mdefine_line|#define inb_p(addr)    inb(addr)
DECL|macro|inw_p
mdefine_line|#define inw_p(addr)    inw(addr)
DECL|macro|inl_p
mdefine_line|#define inl_p(addr)    inl(addr)
DECL|macro|outb_p
mdefine_line|#define outb_p(x,addr) outb(x,addr)
DECL|macro|outw_p
mdefine_line|#define outw_p(x,addr) outw(x,addr)
DECL|macro|outl_p
mdefine_line|#define outl_p(x,addr) outl(x,addr)
DECL|macro|outsb
mdefine_line|#define outsb(a,b,l) io_outsb(a,b,l)
DECL|macro|outsw
mdefine_line|#define outsw(a,b,l) io_outsw(a,b,l)
DECL|macro|outsl
mdefine_line|#define outsl(a,b,l) io_outsl(a,b,l)
DECL|macro|insb
mdefine_line|#define insb(a,b,l) io_insb(a,b,l)
DECL|macro|insw
mdefine_line|#define insw(a,b,l) io_insw(a,b,l)
DECL|macro|insl
mdefine_line|#define insl(a,b,l) io_insl(a,b,l)
DECL|macro|IO_SPACE_LIMIT
mdefine_line|#define IO_SPACE_LIMIT 0xffff
multiline_comment|/* Values for nocacheflag and cmode */
DECL|macro|IOMAP_FULL_CACHING
mdefine_line|#define IOMAP_FULL_CACHING&t;&t;0
DECL|macro|IOMAP_NOCACHE_SER
mdefine_line|#define IOMAP_NOCACHE_SER&t;&t;1
DECL|macro|IOMAP_NOCACHE_NONSER
mdefine_line|#define IOMAP_NOCACHE_NONSER&t;&t;2
DECL|macro|IOMAP_WRITETHROUGH
mdefine_line|#define IOMAP_WRITETHROUGH&t;&t;3
r_extern
r_void
op_star
id|__ioremap
c_func
(paren
r_int
r_int
id|physaddr
comma
r_int
r_int
id|size
comma
r_int
id|cacheflag
)paren
suffix:semicolon
r_extern
r_void
id|__iounmap
c_func
(paren
r_void
op_star
id|addr
comma
r_int
r_int
id|size
)paren
suffix:semicolon
DECL|function|ioremap
r_extern
r_inline
r_void
op_star
id|ioremap
c_func
(paren
r_int
r_int
id|physaddr
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|__ioremap
c_func
(paren
id|physaddr
comma
id|size
comma
id|IOMAP_NOCACHE_SER
)paren
suffix:semicolon
)brace
DECL|function|ioremap_nocache
r_extern
r_inline
r_void
op_star
id|ioremap_nocache
c_func
(paren
r_int
r_int
id|physaddr
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|__ioremap
c_func
(paren
id|physaddr
comma
id|size
comma
id|IOMAP_NOCACHE_SER
)paren
suffix:semicolon
)brace
DECL|function|ioremap_writethrough
r_extern
r_inline
r_void
op_star
id|ioremap_writethrough
c_func
(paren
r_int
r_int
id|physaddr
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|__ioremap
c_func
(paren
id|physaddr
comma
id|size
comma
id|IOMAP_WRITETHROUGH
)paren
suffix:semicolon
)brace
DECL|function|ioremap_fullcache
r_extern
r_inline
r_void
op_star
id|ioremap_fullcache
c_func
(paren
r_int
r_int
id|physaddr
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|__ioremap
c_func
(paren
id|physaddr
comma
id|size
comma
id|IOMAP_FULL_CACHING
)paren
suffix:semicolon
)brace
r_extern
r_void
id|iounmap
c_func
(paren
r_void
op_star
id|addr
)paren
suffix:semicolon
multiline_comment|/* Nothing to do */
DECL|macro|dma_cache_inv
mdefine_line|#define dma_cache_inv(_start,_size)&t;&t;do { } while (0)
DECL|macro|dma_cache_wback
mdefine_line|#define dma_cache_wback(_start,_size)&t;&t;do { } while (0)
DECL|macro|dma_cache_wback_inv
mdefine_line|#define dma_cache_wback_inv(_start,_size)&t;do { } while (0)
multiline_comment|/* H8/300 internal I/O functions */
DECL|function|ctrl_inb
r_static
id|__inline__
r_int
r_char
id|ctrl_inb
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
)brace
DECL|function|ctrl_inw
r_static
id|__inline__
r_int
r_int
id|ctrl_inw
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
)brace
DECL|function|ctrl_inl
r_static
id|__inline__
r_int
r_int
id|ctrl_inl
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
)brace
DECL|function|ctrl_outb
r_static
id|__inline__
r_void
id|ctrl_outb
c_func
(paren
r_int
r_char
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
r_int
r_char
op_star
)paren
id|addr
op_assign
id|b
suffix:semicolon
)brace
DECL|function|ctrl_outw
r_static
id|__inline__
r_void
id|ctrl_outw
c_func
(paren
r_int
r_int
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
op_assign
id|b
suffix:semicolon
)brace
DECL|function|ctrl_outl
r_static
id|__inline__
r_void
id|ctrl_outl
c_func
(paren
r_int
r_int
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
op_assign
id|b
suffix:semicolon
)brace
multiline_comment|/* Pages to physical address... */
DECL|macro|page_to_phys
mdefine_line|#define page_to_phys(page)      ((page - mem_map) &lt;&lt; PAGE_SHIFT)
DECL|macro|page_to_bus
mdefine_line|#define page_to_bus(page)       ((page - mem_map) &lt;&lt; PAGE_SHIFT)
multiline_comment|/*&n; * Macros used for converting between virtual and physical mappings.&n; */
DECL|macro|mm_ptov
mdefine_line|#define mm_ptov(vaddr)&t;&t;((void *) (vaddr))
DECL|macro|mm_vtop
mdefine_line|#define mm_vtop(vaddr)&t;&t;((unsigned long) (vaddr))
DECL|macro|phys_to_virt
mdefine_line|#define phys_to_virt(vaddr)&t;((void *) (vaddr))
DECL|macro|virt_to_phys
mdefine_line|#define virt_to_phys(vaddr)&t;((unsigned long) (vaddr))
DECL|macro|virt_to_bus
mdefine_line|#define virt_to_bus virt_to_phys
DECL|macro|bus_to_virt
mdefine_line|#define bus_to_virt phys_to_virt
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _H8300_IO_H */
eof
