macro_line|#ifndef _H8300_BITOPS_H
DECL|macro|_H8300_BITOPS_H
mdefine_line|#define _H8300_BITOPS_H
multiline_comment|/*&n; * Copyright 1992, Linus Torvalds.&n; * Copyright 2002, Yoshinori Sato&n; */
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/compiler.h&gt;
macro_line|#include &lt;asm/byteorder.h&gt;&t;/* swab32 */
macro_line|#include &lt;asm/system.h&gt;
macro_line|#ifdef __KERNEL__
multiline_comment|/*&n; * Function prototypes to keep gcc -Wall happy&n; */
multiline_comment|/*&n; * ffz = Find First Zero in word. Undefined if no zero exists,&n; * so code should check against ~0UL first..&n; */
DECL|function|ffz
r_static
id|__inline__
r_int
r_int
id|ffz
c_func
(paren
r_int
r_int
id|word
)paren
(brace
r_register
r_int
r_int
id|result
id|asm
c_func
(paren
l_string|&quot;er0&quot;
)paren
suffix:semicolon
r_register
r_int
r_int
id|_word
id|asm
c_func
(paren
l_string|&quot;er1&quot;
)paren
suffix:semicolon
id|_word
op_assign
id|word
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;sub.l %0,%0&bslash;n&bslash;t&quot;
l_string|&quot;dec.l #1,%0&bslash;n&quot;
l_string|&quot;1:&bslash;n&bslash;t&quot;
l_string|&quot;shlr.l %1&bslash;n&bslash;t&quot;
l_string|&quot;adds #1,%0&bslash;n&bslash;t&quot;
l_string|&quot;bcs 1b&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|result
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|_word
)paren
)paren
suffix:semicolon
r_return
id|result
suffix:semicolon
)brace
DECL|function|set_bit
r_static
id|__inline__
r_void
id|set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_char
op_star
id|a
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
op_complement
l_int|3
)paren
op_plus
(paren
l_int|3
op_minus
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
l_int|3
)paren
)paren
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;mov.l %1,er0&bslash;n&bslash;t&quot;
l_string|&quot;mov.l %0,er1&bslash;n&bslash;t&quot;
l_string|&quot;bset r0l,@er1&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|a
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|nr
op_amp
l_int|7
)paren
suffix:colon
l_string|&quot;er0&quot;
comma
l_string|&quot;er1&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
multiline_comment|/* Bigendian is complexed... */
DECL|macro|__set_bit
mdefine_line|#define __set_bit(nr, addr) set_bit(nr, addr)
multiline_comment|/*&n; * clear_bit() doesn&squot;t provide any barrier for the compiler.&n; */
DECL|macro|smp_mb__before_clear_bit
mdefine_line|#define smp_mb__before_clear_bit()&t;barrier()
DECL|macro|smp_mb__after_clear_bit
mdefine_line|#define smp_mb__after_clear_bit()&t;barrier()
DECL|function|clear_bit
r_static
id|__inline__
r_void
id|clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_char
op_star
id|a
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
op_complement
l_int|3
)paren
op_plus
(paren
l_int|3
op_minus
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
l_int|3
)paren
)paren
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;mov.l %1,er0&bslash;n&bslash;t&quot;
l_string|&quot;mov.l %0,er1&bslash;n&bslash;t&quot;
l_string|&quot;bclr r0l,@er1&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|a
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|nr
op_amp
l_int|7
)paren
suffix:colon
l_string|&quot;er0&quot;
comma
l_string|&quot;er1&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
DECL|macro|__clear_bit
mdefine_line|#define __clear_bit(nr, addr) clear_bit(nr, addr)
DECL|function|change_bit
r_static
id|__inline__
r_void
id|change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_char
op_star
id|a
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
op_complement
l_int|3
)paren
op_plus
(paren
l_int|3
op_minus
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
l_int|3
)paren
)paren
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;mov.l %1,er0&bslash;n&bslash;t&quot;
l_string|&quot;mov.l %0,er1&bslash;n&bslash;t&quot;
l_string|&quot;bnot r0l,@er1&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|a
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|nr
op_amp
l_int|7
)paren
suffix:colon
l_string|&quot;er0&quot;
comma
l_string|&quot;er1&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
DECL|macro|__change_bit
mdefine_line|#define __change_bit(nr, addr) change_bit(nr, addr)
macro_line|#if defined(__H8300H__)
DECL|function|test_and_set_bit
r_static
id|__inline__
r_int
id|test_and_set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
id|retval
suffix:semicolon
r_int
r_char
op_star
id|a
suffix:semicolon
id|a
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
op_complement
l_int|3
)paren
op_plus
(paren
l_int|3
op_minus
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
l_int|3
)paren
)paren
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;mov.l %2,er0&bslash;n&bslash;t&quot;
l_string|&quot;stc ccr,r0h&bslash;n&bslash;t&quot;
l_string|&quot;orc #0x80,ccr&bslash;n&bslash;t&quot;
l_string|&quot;mov.b %1,r1l&bslash;n&bslash;t&quot;
l_string|&quot;btst r0l,r1l&bslash;n&bslash;t&quot;
l_string|&quot;bset r0l,r1l&bslash;n&bslash;t&quot;
l_string|&quot;stc ccr,r0l&bslash;n&bslash;t&quot;
l_string|&quot;mov.b r1l,%1&bslash;n&bslash;t&quot;
l_string|&quot;ldc r0h,ccr&bslash;n&bslash;t&quot;
l_string|&quot;sub.l %0,%0&bslash;n&bslash;t&quot;
l_string|&quot;bild #2,r0l&bslash;n&bslash;t&quot;
l_string|&quot;rotxl.l %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|retval
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|a
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|nr
op_amp
l_int|7
)paren
suffix:colon
l_string|&quot;er0&quot;
comma
l_string|&quot;er1&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
macro_line|#endif
macro_line|#if defined(__H8300S__)
DECL|function|test_and_set_bit
r_static
id|__inline__
r_int
id|test_and_set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
id|retval
suffix:semicolon
r_int
r_char
op_star
id|a
suffix:semicolon
id|a
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
op_complement
l_int|3
)paren
op_plus
(paren
l_int|3
op_minus
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
l_int|3
)paren
)paren
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;mov.l %2,er0&bslash;n&bslash;t&quot;
l_string|&quot;stc exr,r0h&bslash;n&bslash;t&quot;
l_string|&quot;orc #0x07,exr&bslash;n&bslash;t&quot;
l_string|&quot;mov.b %1,r1l&bslash;n&bslash;t&quot;
l_string|&quot;btst r0l,r1l&bslash;n&bslash;t&quot;
l_string|&quot;bset r0l,r1l&bslash;n&bslash;t&quot;
l_string|&quot;stc ccr,r0l&bslash;n&bslash;t&quot;
l_string|&quot;mov.b r1l,%1&bslash;n&bslash;t&quot;
l_string|&quot;ldc r0h,exr&bslash;n&bslash;t&quot;
l_string|&quot;sub.l %0,%0&bslash;n&bslash;t&quot;
l_string|&quot;bild #2,r0l&bslash;n&bslash;t&quot;
l_string|&quot;rotxl.l %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|retval
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|a
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|nr
op_amp
l_int|7
)paren
suffix:colon
l_string|&quot;er0&quot;
comma
l_string|&quot;er1&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
macro_line|#endif
DECL|function|__test_and_set_bit
r_static
id|__inline__
r_int
id|__test_and_set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
id|retval
suffix:semicolon
r_int
r_char
op_star
id|a
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
op_complement
l_int|3
)paren
op_plus
(paren
l_int|3
op_minus
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
l_int|3
)paren
)paren
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;mov.l %2,er0&bslash;n&bslash;t&quot;
l_string|&quot;mov.b %1,r0h&bslash;n&bslash;t&quot;
l_string|&quot;btst r0l,r0h&bslash;n&bslash;t&quot;
l_string|&quot;bset r0l,r0h&bslash;n&bslash;t&quot;
l_string|&quot;stc ccr,r0l&bslash;n&bslash;t&quot;
l_string|&quot;mov.b r0h,%1&bslash;n&bslash;t&quot;
l_string|&quot;sub.l %0,%0&bslash;n&bslash;t&quot;
l_string|&quot;bild #2,r0l&bslash;n&bslash;t&quot;
l_string|&quot;rotxl.l %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|retval
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|a
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|nr
op_amp
l_int|7
)paren
suffix:colon
l_string|&quot;er0&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
macro_line|#if defined(__H8300H__)
DECL|function|test_and_clear_bit
r_static
id|__inline__
r_int
id|test_and_clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
id|retval
suffix:semicolon
r_int
r_char
op_star
id|a
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
op_complement
l_int|3
)paren
op_plus
(paren
l_int|3
op_minus
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
l_int|3
)paren
)paren
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;mov.l %2,er0&bslash;n&bslash;t&quot;
l_string|&quot;stc ccr,r0h&bslash;n&bslash;t&quot;
l_string|&quot;orc #0x80,ccr&bslash;n&bslash;t&quot;
l_string|&quot;mov.b %1,r1l&bslash;n&bslash;t&quot;
l_string|&quot;btst r0l,r1l&bslash;n&bslash;t&quot;
l_string|&quot;bclr r0l,r1l&bslash;n&bslash;t&quot;
l_string|&quot;stc ccr,r0l&bslash;n&bslash;t&quot;
l_string|&quot;mov.b r1l,%1&bslash;n&bslash;t&quot;
l_string|&quot;ldc r0h,ccr&bslash;n&bslash;t&quot;
l_string|&quot;sub.l %0,%0&bslash;n&bslash;t&quot;
l_string|&quot;bild #2,r0l&bslash;n&bslash;t&quot;
l_string|&quot;rotxl.l %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|retval
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|a
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|nr
op_amp
l_int|7
)paren
suffix:colon
l_string|&quot;er0&quot;
comma
l_string|&quot;er1&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
macro_line|#endif
macro_line|#if defined(__H8300S__)
DECL|function|test_and_clear_bit
r_static
id|__inline__
r_int
id|test_and_clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
id|retval
suffix:semicolon
r_int
r_char
op_star
id|a
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
op_complement
l_int|3
)paren
op_plus
(paren
l_int|3
op_minus
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
l_int|3
)paren
)paren
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;mov.l %2,er0&bslash;n&bslash;t&quot;
l_string|&quot;stc exr,r0h&bslash;n&bslash;t&quot;
l_string|&quot;orc #0x07,exr&bslash;n&bslash;t&quot;
l_string|&quot;mov.b %1,r1l&bslash;n&bslash;t&quot;
l_string|&quot;btst r0l,r1l&bslash;n&bslash;t&quot;
l_string|&quot;bclr r0l,r1l&bslash;n&bslash;t&quot;
l_string|&quot;stc ccr,r0l&bslash;n&bslash;t&quot;
l_string|&quot;mov.b r1l,%1&bslash;n&bslash;t&quot;
l_string|&quot;ldc r0h,exr&bslash;n&bslash;t&quot;
l_string|&quot;sub.l %0,%0&bslash;n&bslash;t&quot;
l_string|&quot;bild #2,r0l&bslash;n&bslash;t&quot;
l_string|&quot;rotxl.l %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|retval
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|a
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|nr
op_amp
l_int|7
)paren
suffix:colon
l_string|&quot;er0&quot;
comma
l_string|&quot;er1&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
macro_line|#endif
DECL|function|__test_and_clear_bit
r_static
id|__inline__
r_int
id|__test_and_clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
id|retval
suffix:semicolon
r_int
r_char
op_star
id|a
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
op_complement
l_int|3
)paren
op_plus
(paren
l_int|3
op_minus
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
l_int|3
)paren
)paren
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;mov.l %2,er0&bslash;n&bslash;t&quot;
l_string|&quot;mov.b %1,r0h&bslash;n&bslash;t&quot;
l_string|&quot;btst r0l,r0h&bslash;n&bslash;t&quot;
l_string|&quot;bclr r0l,r0h&bslash;n&bslash;t&quot;
l_string|&quot;stc ccr,r0l&bslash;n&bslash;t&quot;
l_string|&quot;mov.b r0h,%1&bslash;n&bslash;t&quot;
l_string|&quot;sub.l %0,%0&bslash;n&bslash;t&quot;
l_string|&quot;bild #2,r0l&bslash;n&bslash;t&quot;
l_string|&quot;rotxl.l %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|retval
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|a
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|nr
op_amp
l_int|7
)paren
suffix:colon
l_string|&quot;er0&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
macro_line|#if defined(__H8300H__)
DECL|function|test_and_change_bit
r_static
id|__inline__
r_int
id|test_and_change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
id|retval
suffix:semicolon
r_int
r_char
op_star
id|a
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
op_complement
l_int|3
)paren
op_plus
(paren
l_int|3
op_minus
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
l_int|3
)paren
)paren
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;mov.l %2,er0&bslash;n&bslash;t&quot;
l_string|&quot;stc ccr,r0h&bslash;n&bslash;t&quot;
l_string|&quot;orc #0x80,ccr&bslash;n&bslash;t&quot;
l_string|&quot;mov.b %1,r1l&bslash;n&bslash;t&quot;
l_string|&quot;btst r0l,r1l&bslash;n&bslash;t&quot;
l_string|&quot;bnot r0l,r1l&bslash;n&bslash;t&quot;
l_string|&quot;stc ccr,r0l&bslash;n&bslash;t&quot;
l_string|&quot;mov.b r1l,%1&bslash;n&bslash;t&quot;
l_string|&quot;ldc r0h,ccr&bslash;n&bslash;t&quot;
l_string|&quot;sub.l %0,%0&bslash;n&bslash;t&quot;
l_string|&quot;bild #2,r0l&bslash;n&bslash;t&quot;
l_string|&quot;rotxl.l %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|retval
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|a
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|nr
op_amp
l_int|7
)paren
suffix:colon
l_string|&quot;er0&quot;
comma
l_string|&quot;er1&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
macro_line|#endif
macro_line|#if defined(__H8300S__)
DECL|function|test_and_change_bit
r_static
id|__inline__
r_int
id|test_and_change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
id|retval
suffix:semicolon
r_int
r_char
op_star
id|a
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
op_complement
l_int|3
)paren
op_plus
(paren
l_int|3
op_minus
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
l_int|3
)paren
)paren
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;mov.l %2,er0&bslash;n&bslash;t&quot;
l_string|&quot;stc exr,r0h&bslash;n&bslash;t&quot;
l_string|&quot;orc #0x07,exr&bslash;n&bslash;t&quot;
l_string|&quot;mov.b %1,r1l&bslash;n&bslash;t&quot;
l_string|&quot;btst r0l,r1l&bslash;n&bslash;t&quot;
l_string|&quot;bnot r0l,r1l&bslash;n&bslash;t&quot;
l_string|&quot;stc ccr,r0l&bslash;n&bslash;t&quot;
l_string|&quot;mov.b r1l,%1&bslash;n&bslash;t&quot;
l_string|&quot;ldc r0h,exr&bslash;n&bslash;t&quot;
l_string|&quot;sub.l %0,%0&bslash;n&bslash;t&quot;
l_string|&quot;bild #2,r0l&bslash;n&bslash;t&quot;
l_string|&quot;rotxl.l %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|retval
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|a
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|nr
op_amp
l_int|7
)paren
suffix:colon
l_string|&quot;er0&quot;
comma
l_string|&quot;er1&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
macro_line|#endif
DECL|function|__test_and_change_bit
r_static
id|__inline__
r_int
id|__test_and_change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
id|retval
suffix:semicolon
r_int
r_char
op_star
id|a
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
op_complement
l_int|3
)paren
op_plus
(paren
l_int|3
op_minus
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
l_int|3
)paren
)paren
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;mov.l %2,er0&bslash;n&bslash;t&quot;
l_string|&quot;mov.b %1,r0h&bslash;n&bslash;t&quot;
l_string|&quot;btst r0l,r0h&bslash;n&bslash;t&quot;
l_string|&quot;bnot r0l,r0h&bslash;n&bslash;t&quot;
l_string|&quot;stc ccr,r0l&bslash;n&bslash;t&quot;
l_string|&quot;mov.b r0h,%1&bslash;n&bslash;t&quot;
l_string|&quot;sub.l %0,%0&bslash;n&bslash;t&quot;
l_string|&quot;bild #2,r0l&bslash;n&bslash;t&quot;
l_string|&quot;rotxl.l %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|retval
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|a
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|nr
op_amp
l_int|7
)paren
suffix:colon
l_string|&quot;er0&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
multiline_comment|/*&n; * This routine doesn&squot;t need to be atomic.&n; */
DECL|function|__constant_test_bit
r_static
id|__inline__
r_int
id|__constant_test_bit
c_func
(paren
r_int
id|nr
comma
r_const
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_return
(paren
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
op_amp
(paren
(paren
(paren
r_const
r_volatile
r_int
r_int
op_star
)paren
id|addr
)paren
(braket
id|nr
op_rshift
l_int|5
)braket
)paren
)paren
op_ne
l_int|0
suffix:semicolon
)brace
DECL|function|__test_bit
r_static
id|__inline__
r_int
id|__test_bit
c_func
(paren
r_int
id|nr
comma
r_const
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
id|retval
suffix:semicolon
r_int
r_char
op_star
id|a
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
op_complement
l_int|3
)paren
op_plus
(paren
l_int|3
op_minus
(paren
(paren
id|nr
op_rshift
l_int|3
)paren
op_amp
l_int|3
)paren
)paren
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;mov.l %1,er0&bslash;n&bslash;t&quot;
l_string|&quot;btst r0l,@%2&bslash;n&bslash;t&quot;
l_string|&quot;beq 1f&bslash;n&bslash;t&quot;
l_string|&quot;sub.l %0,%0&bslash;n&bslash;t&quot;
l_string|&quot;inc.l #1,%0&bslash;n&quot;
l_string|&quot;bra 2f&bslash;n&quot;
l_string|&quot;1:&bslash;n&bslash;t&quot;
l_string|&quot;sub.l %0,%0&bslash;n&quot;
l_string|&quot;2:&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|retval
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|nr
op_amp
l_int|7
)paren
comma
l_string|&quot;r&quot;
(paren
id|a
)paren
suffix:colon
l_string|&quot;er0&quot;
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
DECL|macro|test_bit
mdefine_line|#define test_bit(nr,addr) &bslash;&n;(__builtin_constant_p(nr) ? &bslash;&n; __constant_test_bit((nr),(addr)) : &bslash;&n; __test_bit((nr),(addr)))
DECL|macro|find_first_zero_bit
mdefine_line|#define find_first_zero_bit(addr, size) &bslash;&n;        find_next_zero_bit((addr), (size), 0)
DECL|function|find_next_zero_bit
r_static
id|__inline__
r_int
id|find_next_zero_bit
(paren
r_void
op_star
id|addr
comma
r_int
id|size
comma
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|31UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|31UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_rshift
(paren
l_int|32
op_minus
id|offset
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|32
)paren
r_goto
id|found_first
suffix:semicolon
r_if
c_cond
(paren
op_complement
id|tmp
)paren
r_goto
id|found_middle
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
l_int|31UL
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
r_goto
id|found_middle
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
r_return
id|result
suffix:semicolon
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_rshift
id|size
suffix:semicolon
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|tmp
)paren
suffix:semicolon
)brace
DECL|function|ffs
r_static
id|__inline__
r_int
r_int
id|ffs
c_func
(paren
r_int
r_int
id|word
)paren
(brace
r_register
r_int
r_int
id|result
id|asm
c_func
(paren
l_string|&quot;er0&quot;
)paren
suffix:semicolon
r_register
r_int
r_int
id|_word
id|asm
c_func
(paren
l_string|&quot;er1&quot;
)paren
suffix:semicolon
id|_word
op_assign
id|word
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;sub.l %0,%0&bslash;n&bslash;t&quot;
l_string|&quot;dec.l #1,%0&bslash;n&quot;
l_string|&quot;1:&bslash;n&bslash;t&quot;
l_string|&quot;shlr.l %1&bslash;n&bslash;t&quot;
l_string|&quot;adds #1,%0&bslash;n&bslash;t&quot;
l_string|&quot;bcc 1b&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|result
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|_word
)paren
)paren
suffix:semicolon
r_return
id|result
suffix:semicolon
)brace
DECL|macro|__ffs
mdefine_line|#define __ffs(x) ffs(x)
multiline_comment|/*&n; * fls: find last bit set.&n; */
DECL|macro|fls
mdefine_line|#define fls(x) generic_fls(x)
multiline_comment|/*&n; * Every architecture must define this function. It&squot;s the fastest&n; * way of searching a 140-bit bitmap where the first 100 bits are&n; * unlikely to be set. It&squot;s guaranteed that at least one of the 140&n; * bits is cleared.&n; */
DECL|function|sched_find_first_bit
r_static
r_inline
r_int
id|sched_find_first_bit
c_func
(paren
r_int
r_int
op_star
id|b
)paren
(brace
r_if
c_cond
(paren
id|unlikely
c_func
(paren
id|b
(braket
l_int|0
)braket
)paren
)paren
r_return
id|__ffs
c_func
(paren
id|b
(braket
l_int|0
)braket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|unlikely
c_func
(paren
id|b
(braket
l_int|1
)braket
)paren
)paren
r_return
id|__ffs
c_func
(paren
id|b
(braket
l_int|1
)braket
)paren
op_plus
l_int|32
suffix:semicolon
r_if
c_cond
(paren
id|unlikely
c_func
(paren
id|b
(braket
l_int|2
)braket
)paren
)paren
r_return
id|__ffs
c_func
(paren
id|b
(braket
l_int|2
)braket
)paren
op_plus
l_int|64
suffix:semicolon
r_if
c_cond
(paren
id|b
(braket
l_int|3
)braket
)paren
r_return
id|__ffs
c_func
(paren
id|b
(braket
l_int|3
)braket
)paren
op_plus
l_int|96
suffix:semicolon
r_return
id|__ffs
c_func
(paren
id|b
(braket
l_int|4
)braket
)paren
op_plus
l_int|128
suffix:semicolon
)brace
multiline_comment|/*&n; * hweightN: returns the hamming weight (i.e. the number&n; * of bits set) of a N-bit word&n; */
DECL|macro|hweight32
mdefine_line|#define hweight32(x) generic_hweight32(x)
DECL|macro|hweight16
mdefine_line|#define hweight16(x) generic_hweight16(x)
DECL|macro|hweight8
mdefine_line|#define hweight8(x) generic_hweight8(x)
DECL|function|ext2_set_bit
r_static
id|__inline__
r_int
id|ext2_set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
comma
id|retval
suffix:semicolon
r_int
r_int
id|flags
suffix:semicolon
r_volatile
r_int
r_char
op_star
id|ADDR
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
id|local_irq_save
c_func
(paren
id|flags
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|ADDR
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|ADDR
op_or_assign
id|mask
suffix:semicolon
id|local_irq_restore
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
DECL|function|ext2_clear_bit
r_static
id|__inline__
r_int
id|ext2_clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
comma
id|retval
suffix:semicolon
r_int
r_int
id|flags
suffix:semicolon
r_volatile
r_int
r_char
op_star
id|ADDR
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
id|local_irq_save
c_func
(paren
id|flags
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|ADDR
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|ADDR
op_and_assign
op_complement
id|mask
suffix:semicolon
id|local_irq_restore
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
DECL|function|ext2_test_bit
r_static
id|__inline__
r_int
id|ext2_test_bit
c_func
(paren
r_int
id|nr
comma
r_const
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
suffix:semicolon
r_const
r_volatile
r_int
r_char
op_star
id|ADDR
op_assign
(paren
r_const
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
r_return
(paren
(paren
id|mask
op_amp
op_star
id|ADDR
)paren
op_ne
l_int|0
)paren
suffix:semicolon
)brace
DECL|macro|ext2_find_first_zero_bit
mdefine_line|#define ext2_find_first_zero_bit(addr, size) &bslash;&n;        ext2_find_next_zero_bit((addr), (size), 0)
DECL|function|ext2_find_next_zero_bit
r_static
id|__inline__
r_int
r_int
id|ext2_find_next_zero_bit
c_func
(paren
r_void
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|31UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|31UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
multiline_comment|/* We hold the little endian value in tmp, but then the&n;&t;&t; * shift is illegal. So we could keep a big endian value&n;&t;&t; * in tmp, like this:&n;&t;&t; *&n;&t;&t; * tmp = __swab32(*(p++));&n;&t;&t; * tmp |= ~0UL &gt;&gt; (32-offset);&n;&t;&t; *&n;&t;&t; * but this would decrease performance, so we change the&n;&t;&t; * shift:&n;&t;&t; */
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
id|__swab32
c_func
(paren
op_complement
l_int|0UL
op_rshift
(paren
l_int|32
op_minus
id|offset
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|32
)paren
(brace
r_goto
id|found_first
suffix:semicolon
)brace
r_if
c_cond
(paren
op_complement
id|tmp
)paren
(brace
r_goto
id|found_middle
suffix:semicolon
)brace
id|size
op_sub_assign
l_int|32
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
l_int|31UL
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
(brace
r_goto
id|found_middle
suffix:semicolon
)brace
id|result
op_add_assign
l_int|32
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
(brace
r_return
id|result
suffix:semicolon
)brace
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
multiline_comment|/* tmp is little endian, so we would have to swab the shift,&n;&t; * see above. But then we have to swab tmp below for ffz, so&n;&t; * we might as well do this here.&n;&t; */
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|__swab32
c_func
(paren
id|tmp
)paren
op_or
(paren
op_complement
l_int|0UL
op_lshift
id|size
)paren
)paren
suffix:semicolon
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|__swab32
c_func
(paren
id|tmp
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/* Bitmap functions for the minix filesystem.  */
DECL|macro|minix_test_and_set_bit
mdefine_line|#define minix_test_and_set_bit(nr,addr) test_and_set_bit(nr,addr)
DECL|macro|minix_set_bit
mdefine_line|#define minix_set_bit(nr,addr) set_bit(nr,addr)
DECL|macro|minix_test_and_clear_bit
mdefine_line|#define minix_test_and_clear_bit(nr,addr) test_and_clear_bit(nr,addr)
DECL|macro|minix_test_bit
mdefine_line|#define minix_test_bit(nr,addr) test_bit(nr,addr)
DECL|macro|minix_find_first_zero_bit
mdefine_line|#define minix_find_first_zero_bit(addr,size) find_first_zero_bit(addr,size)
multiline_comment|/**&n; * hweightN - returns the hamming weight of a N-bit word&n; * @x: the word to weigh&n; *&n; * The Hamming Weight of a number is the total number of bits set in it.&n; */
DECL|macro|hweight32
mdefine_line|#define hweight32(x) generic_hweight32(x)
DECL|macro|hweight16
mdefine_line|#define hweight16(x) generic_hweight16(x)
DECL|macro|hweight8
mdefine_line|#define hweight8(x) generic_hweight8(x)
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _H8300_BITOPS_H */
eof
