macro_line|#ifndef __ALPHA_IO_H
DECL|macro|__ALPHA_IO_H
mdefine_line|#define __ALPHA_IO_H
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;asm/compiler.h&gt;
macro_line|#include &lt;asm/system.h&gt;
macro_line|#include &lt;asm/pgtable.h&gt;
macro_line|#include &lt;asm/machvec.h&gt;
macro_line|#include &lt;asm/hwrpb.h&gt;
multiline_comment|/* The generic header contains only prototypes.  Including it ensures that&n;   the implementation we have here matches that interface.  */
macro_line|#include &lt;asm-generic/iomap.h&gt;
multiline_comment|/* We don&squot;t use IO slowdowns on the Alpha, but.. */
DECL|macro|__SLOW_DOWN_IO
mdefine_line|#define __SLOW_DOWN_IO&t;do { } while (0)
DECL|macro|SLOW_DOWN_IO
mdefine_line|#define SLOW_DOWN_IO&t;do { } while (0)
multiline_comment|/*&n; * Virtual -&gt; physical identity mapping starts at this offset&n; */
macro_line|#ifdef USE_48_BIT_KSEG
DECL|macro|IDENT_ADDR
mdefine_line|#define IDENT_ADDR     0xffff800000000000UL
macro_line|#else
DECL|macro|IDENT_ADDR
mdefine_line|#define IDENT_ADDR     0xfffffc0000000000UL
macro_line|#endif
multiline_comment|/*&n; * We try to avoid hae updates (thus the cache), but when we&n; * do need to update the hae, we need to do it atomically, so&n; * that any interrupts wouldn&squot;t get confused with the hae&n; * register not being up-to-date with respect to the hardware&n; * value.&n; */
DECL|function|__set_hae
r_static
r_inline
r_void
id|__set_hae
c_func
(paren
r_int
r_int
id|new_hae
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
id|local_irq_save
c_func
(paren
id|flags
)paren
suffix:semicolon
id|alpha_mv.hae_cache
op_assign
id|new_hae
suffix:semicolon
op_star
id|alpha_mv.hae_register
op_assign
id|new_hae
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
multiline_comment|/* Re-read to make sure it was written.  */
id|new_hae
op_assign
op_star
id|alpha_mv.hae_register
suffix:semicolon
id|local_irq_restore
c_func
(paren
id|flags
)paren
suffix:semicolon
)brace
DECL|function|set_hae
r_static
r_inline
r_void
id|set_hae
c_func
(paren
r_int
r_int
id|new_hae
)paren
(brace
r_if
c_cond
(paren
id|new_hae
op_ne
id|alpha_mv.hae_cache
)paren
id|__set_hae
c_func
(paren
id|new_hae
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Change virtual addresses to physical addresses and vv.&n; */
macro_line|#ifdef USE_48_BIT_KSEG
DECL|function|virt_to_phys
r_static
r_inline
r_int
r_int
id|virt_to_phys
c_func
(paren
r_void
op_star
id|address
)paren
(brace
r_return
(paren
r_int
r_int
)paren
id|address
op_minus
id|IDENT_ADDR
suffix:semicolon
)brace
DECL|function|phys_to_virt
r_static
r_inline
r_void
op_star
id|phys_to_virt
c_func
(paren
r_int
r_int
id|address
)paren
(brace
r_return
(paren
r_void
op_star
)paren
(paren
id|address
op_plus
id|IDENT_ADDR
)paren
suffix:semicolon
)brace
macro_line|#else
DECL|function|virt_to_phys
r_static
r_inline
r_int
r_int
id|virt_to_phys
c_func
(paren
r_void
op_star
id|address
)paren
(brace
r_int
r_int
id|phys
op_assign
(paren
r_int
r_int
)paren
id|address
suffix:semicolon
multiline_comment|/* Sign-extend from bit 41.  */
id|phys
op_lshift_assign
(paren
l_int|64
op_minus
l_int|41
)paren
suffix:semicolon
id|phys
op_assign
(paren
r_int
)paren
id|phys
op_rshift
(paren
l_int|64
op_minus
l_int|41
)paren
suffix:semicolon
multiline_comment|/* Crop to the physical address width of the processor.  */
id|phys
op_and_assign
(paren
l_int|1ul
op_lshift
id|hwrpb-&gt;pa_bits
)paren
op_minus
l_int|1
suffix:semicolon
r_return
id|phys
suffix:semicolon
)brace
DECL|function|phys_to_virt
r_static
r_inline
r_void
op_star
id|phys_to_virt
c_func
(paren
r_int
r_int
id|address
)paren
(brace
r_return
(paren
r_void
op_star
)paren
(paren
id|IDENT_ADDR
op_plus
(paren
id|address
op_amp
(paren
(paren
l_int|1ul
op_lshift
l_int|41
)paren
op_minus
l_int|1
)paren
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif
DECL|macro|page_to_phys
mdefine_line|#define page_to_phys(page)&t;page_to_pa(page)
multiline_comment|/* This depends on working iommu.  */
DECL|macro|BIO_VMERGE_BOUNDARY
mdefine_line|#define BIO_VMERGE_BOUNDARY&t;(alpha_mv.mv_pci_tbi ? PAGE_SIZE : 0)
multiline_comment|/* Maximum PIO space address supported?  */
DECL|macro|IO_SPACE_LIMIT
mdefine_line|#define IO_SPACE_LIMIT 0xffff
multiline_comment|/*&n; * Change addresses as seen by the kernel (virtual) to addresses as&n; * seen by a device (bus), and vice versa.&n; *&n; * Note that this only works for a limited range of kernel addresses,&n; * and very well may not span all memory.  Consider this interface &n; * deprecated in favour of the mapping functions in &lt;asm/pci.h&gt;.&n; */
r_extern
r_int
r_int
id|__direct_map_base
suffix:semicolon
r_extern
r_int
r_int
id|__direct_map_size
suffix:semicolon
DECL|function|virt_to_bus
r_static
r_inline
r_int
r_int
id|virt_to_bus
c_func
(paren
r_void
op_star
id|address
)paren
(brace
r_int
r_int
id|phys
op_assign
id|virt_to_phys
c_func
(paren
id|address
)paren
suffix:semicolon
r_int
r_int
id|bus
op_assign
id|phys
op_plus
id|__direct_map_base
suffix:semicolon
r_return
id|phys
op_le
id|__direct_map_size
ques
c_cond
id|bus
suffix:colon
l_int|0
suffix:semicolon
)brace
DECL|function|bus_to_virt
r_static
r_inline
r_void
op_star
id|bus_to_virt
c_func
(paren
r_int
r_int
id|address
)paren
(brace
r_void
op_star
id|virt
suffix:semicolon
multiline_comment|/* This check is a sanity check but also ensures that bus address 0&n;&t;   maps to virtual address 0 which is useful to detect null pointers&n;&t;   (the NCR driver is much simpler if NULL pointers are preserved).  */
id|address
op_sub_assign
id|__direct_map_base
suffix:semicolon
id|virt
op_assign
id|phys_to_virt
c_func
(paren
id|address
)paren
suffix:semicolon
r_return
(paren
r_int
)paren
id|address
op_le
l_int|0
ques
c_cond
l_int|NULL
suffix:colon
id|virt
suffix:semicolon
)brace
multiline_comment|/*&n; * There are different chipsets to interface the Alpha CPUs to the world.&n; */
DECL|macro|IO_CONCAT
mdefine_line|#define IO_CONCAT(a,b)&t;_IO_CONCAT(a,b)
DECL|macro|_IO_CONCAT
mdefine_line|#define _IO_CONCAT(a,b)&t;a ## _ ## b
macro_line|#ifdef CONFIG_ALPHA_GENERIC
multiline_comment|/* In a generic kernel, we always go through the machine vector.  */
DECL|macro|REMAP1
mdefine_line|#define REMAP1(TYPE, NAME, QUAL)&t;&t;&t;&t;&t;&bslash;&n;static inline TYPE generic_##NAME(QUAL void __iomem *addr)&t;&t;&bslash;&n;{&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;return alpha_mv.mv_##NAME(addr);&t;&t;&t;&t;&bslash;&n;}
DECL|macro|REMAP2
mdefine_line|#define REMAP2(TYPE, NAME, QUAL)&t;&t;&t;&t;&t;&bslash;&n;static inline void generic_##NAME(TYPE b, QUAL void __iomem *addr)&t;&bslash;&n;{&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;alpha_mv.mv_##NAME(b, addr);&t;&t;&t;&t;&t;&bslash;&n;}
id|REMAP1
c_func
(paren
r_int
r_int
comma
id|ioread8
comma
multiline_comment|/**/
)paren
id|REMAP1
c_func
(paren
r_int
r_int
comma
id|ioread16
comma
multiline_comment|/**/
)paren
id|REMAP1
c_func
(paren
r_int
r_int
comma
id|ioread32
comma
multiline_comment|/**/
)paren
id|REMAP1
c_func
(paren
id|u8
comma
id|readb
comma
r_const
r_volatile
)paren
id|REMAP1
c_func
(paren
id|u16
comma
id|readw
comma
r_const
r_volatile
)paren
id|REMAP1
c_func
(paren
id|u32
comma
id|readl
comma
r_const
r_volatile
)paren
id|REMAP1
c_func
(paren
id|u64
comma
id|readq
comma
r_const
r_volatile
)paren
id|REMAP2
c_func
(paren
id|u8
comma
id|iowrite8
comma
multiline_comment|/**/
)paren
id|REMAP2
c_func
(paren
id|u16
comma
id|iowrite16
comma
multiline_comment|/**/
)paren
id|REMAP2
c_func
(paren
id|u32
comma
id|iowrite32
comma
multiline_comment|/**/
)paren
id|REMAP2
c_func
(paren
id|u8
comma
id|writeb
comma
r_volatile
)paren
id|REMAP2
c_func
(paren
id|u16
comma
id|writew
comma
r_volatile
)paren
id|REMAP2
c_func
(paren
id|u32
comma
id|writel
comma
r_volatile
)paren
id|REMAP2
c_func
(paren
id|u64
comma
id|writeq
comma
r_volatile
)paren
DECL|macro|REMAP1
macro_line|#undef REMAP1
DECL|macro|REMAP2
macro_line|#undef REMAP2
DECL|function|generic_ioportmap
r_static
r_inline
r_void
id|__iomem
op_star
id|generic_ioportmap
c_func
(paren
r_int
r_int
id|a
)paren
(brace
r_return
id|alpha_mv
dot
id|mv_ioportmap
c_func
(paren
id|a
)paren
suffix:semicolon
)brace
DECL|function|generic_ioremap
r_static
r_inline
r_void
id|__iomem
op_star
id|generic_ioremap
c_func
(paren
r_int
r_int
id|a
comma
r_int
r_int
id|s
)paren
(brace
r_return
id|alpha_mv
dot
id|mv_ioremap
c_func
(paren
id|a
comma
id|s
)paren
suffix:semicolon
)brace
DECL|function|generic_iounmap
r_static
r_inline
r_void
id|generic_iounmap
c_func
(paren
r_volatile
r_void
id|__iomem
op_star
id|a
)paren
(brace
r_return
id|alpha_mv
dot
id|mv_iounmap
c_func
(paren
id|a
)paren
suffix:semicolon
)brace
DECL|function|generic_is_ioaddr
r_static
r_inline
r_int
id|generic_is_ioaddr
c_func
(paren
r_int
r_int
id|a
)paren
(brace
r_return
id|alpha_mv
dot
id|mv_is_ioaddr
c_func
(paren
id|a
)paren
suffix:semicolon
)brace
DECL|function|generic_is_mmio
r_static
r_inline
r_int
id|generic_is_mmio
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|a
)paren
(brace
r_return
id|alpha_mv
dot
id|mv_is_mmio
c_func
(paren
id|a
)paren
suffix:semicolon
)brace
DECL|macro|__IO_PREFIX
mdefine_line|#define __IO_PREFIX&t;&t;generic
DECL|macro|generic_trivial_rw_bw
mdefine_line|#define generic_trivial_rw_bw&t;0
DECL|macro|generic_trivial_rw_lq
mdefine_line|#define generic_trivial_rw_lq&t;0
DECL|macro|generic_trivial_io_bw
mdefine_line|#define generic_trivial_io_bw&t;0
DECL|macro|generic_trivial_io_lq
mdefine_line|#define generic_trivial_io_lq&t;0
DECL|macro|generic_trivial_iounmap
mdefine_line|#define generic_trivial_iounmap&t;0
macro_line|#else
macro_line|#if defined(CONFIG_ALPHA_APECS)
macro_line|# include &lt;asm/core_apecs.h&gt;
macro_line|#elif defined(CONFIG_ALPHA_CIA)
macro_line|# include &lt;asm/core_cia.h&gt;
macro_line|#elif defined(CONFIG_ALPHA_IRONGATE)
macro_line|# include &lt;asm/core_irongate.h&gt;
macro_line|#elif defined(CONFIG_ALPHA_JENSEN)
macro_line|# include &lt;asm/jensen.h&gt;
macro_line|#elif defined(CONFIG_ALPHA_LCA)
macro_line|# include &lt;asm/core_lca.h&gt;
macro_line|#elif defined(CONFIG_ALPHA_MARVEL)
macro_line|# include &lt;asm/core_marvel.h&gt;
macro_line|#elif defined(CONFIG_ALPHA_MCPCIA)
macro_line|# include &lt;asm/core_mcpcia.h&gt;
macro_line|#elif defined(CONFIG_ALPHA_POLARIS)
macro_line|# include &lt;asm/core_polaris.h&gt;
macro_line|#elif defined(CONFIG_ALPHA_T2)
macro_line|# include &lt;asm/core_t2.h&gt;
macro_line|#elif defined(CONFIG_ALPHA_TSUNAMI)
macro_line|# include &lt;asm/core_tsunami.h&gt;
macro_line|#elif defined(CONFIG_ALPHA_TITAN)
macro_line|# include &lt;asm/core_titan.h&gt;
macro_line|#elif defined(CONFIG_ALPHA_WILDFIRE)
macro_line|# include &lt;asm/core_wildfire.h&gt;
macro_line|#else
macro_line|#error &quot;What system is this?&quot;
macro_line|#endif
macro_line|#endif /* GENERIC */
multiline_comment|/*&n; * We always have external versions of these routines.&n; */
r_extern
id|u8
id|inb
c_func
(paren
r_int
r_int
id|port
)paren
suffix:semicolon
r_extern
id|u16
id|inw
c_func
(paren
r_int
r_int
id|port
)paren
suffix:semicolon
r_extern
id|u32
id|inl
c_func
(paren
r_int
r_int
id|port
)paren
suffix:semicolon
r_extern
r_void
id|outb
c_func
(paren
id|u8
id|b
comma
r_int
r_int
id|port
)paren
suffix:semicolon
r_extern
r_void
id|outw
c_func
(paren
id|u16
id|b
comma
r_int
r_int
id|port
)paren
suffix:semicolon
r_extern
r_void
id|outl
c_func
(paren
id|u32
id|b
comma
r_int
r_int
id|port
)paren
suffix:semicolon
r_extern
id|u8
id|readb
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
r_extern
id|u16
id|readw
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
r_extern
id|u32
id|readl
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
r_extern
id|u64
id|readq
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|writeb
c_func
(paren
id|u8
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|writew
c_func
(paren
id|u16
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|writel
c_func
(paren
id|u32
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|writeq
c_func
(paren
id|u64
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
r_extern
id|u8
id|__raw_readb
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
r_extern
id|u16
id|__raw_readw
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
r_extern
id|u32
id|__raw_readl
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
r_extern
id|u64
id|__raw_readq
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|__raw_writeb
c_func
(paren
id|u8
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|__raw_writew
c_func
(paren
id|u16
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|__raw_writel
c_func
(paren
id|u32
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|__raw_writeq
c_func
(paren
id|u64
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
multiline_comment|/*&n; * Mapping from port numbers to __iomem space is pretty easy.&n; */
multiline_comment|/* These two have to be extern inline so that we don&squot;t get redefinition&n;   errors building lib/iomap.c.  Which we don&squot;t want anyway, but...  */
DECL|function|ioport_map
r_extern
r_inline
r_void
id|__iomem
op_star
id|ioport_map
c_func
(paren
r_int
r_int
id|port
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|ioportmap
)paren
(paren
id|port
)paren
suffix:semicolon
)brace
DECL|function|ioport_unmap
r_extern
r_inline
r_void
id|ioport_unmap
c_func
(paren
r_void
id|__iomem
op_star
id|addr
)paren
(brace
)brace
DECL|function|ioremap
r_static
r_inline
r_void
id|__iomem
op_star
id|ioremap
c_func
(paren
r_int
r_int
id|port
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|ioremap
)paren
(paren
id|port
comma
id|size
)paren
suffix:semicolon
)brace
DECL|function|ioremap_nocache
r_static
r_inline
r_void
id|__iomem
op_star
id|ioremap_nocache
c_func
(paren
r_int
r_int
id|offset
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|ioremap
c_func
(paren
id|offset
comma
id|size
)paren
suffix:semicolon
)brace
DECL|function|iounmap
r_static
r_inline
r_void
id|iounmap
c_func
(paren
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|iounmap
)paren
(paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|__is_ioaddr
r_static
r_inline
r_int
id|__is_ioaddr
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|is_ioaddr
)paren
(paren
id|addr
)paren
suffix:semicolon
)brace
DECL|macro|__is_ioaddr
mdefine_line|#define __is_ioaddr(a)&t;&t;__is_ioaddr((unsigned long)(a))
DECL|function|__is_mmio
r_static
r_inline
r_int
id|__is_mmio
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_return
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|is_mmio
)paren
(paren
id|addr
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * If the actual I/O bits are sufficiently trivial, then expand inline.&n; */
macro_line|#if IO_CONCAT(__IO_PREFIX,trivial_io_bw)
DECL|function|ioread8
r_extern
r_inline
r_int
r_int
id|ioread8
c_func
(paren
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_int
r_int
id|ret
op_assign
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|ioread8
)paren
(paren
id|addr
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|ioread16
r_extern
r_inline
r_int
r_int
id|ioread16
c_func
(paren
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_int
r_int
id|ret
op_assign
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|ioread16
)paren
(paren
id|addr
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|iowrite8
r_extern
r_inline
r_void
id|iowrite8
c_func
(paren
id|u8
id|b
comma
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|iowrite8
)paren
(paren
id|b
comma
id|addr
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|iowrite16
r_extern
r_inline
r_void
id|iowrite16
c_func
(paren
id|u16
id|b
comma
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|iowrite16
)paren
(paren
id|b
comma
id|addr
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|inb
r_extern
r_inline
id|u8
id|inb
c_func
(paren
r_int
r_int
id|port
)paren
(brace
r_return
id|ioread8
c_func
(paren
id|ioport_map
c_func
(paren
id|port
comma
l_int|1
)paren
)paren
suffix:semicolon
)brace
DECL|function|inw
r_extern
r_inline
id|u16
id|inw
c_func
(paren
r_int
r_int
id|port
)paren
(brace
r_return
id|ioread16
c_func
(paren
id|ioport_map
c_func
(paren
id|port
comma
l_int|2
)paren
)paren
suffix:semicolon
)brace
DECL|function|outb
r_extern
r_inline
r_void
id|outb
c_func
(paren
id|u8
id|b
comma
r_int
r_int
id|port
)paren
(brace
id|iowrite8
c_func
(paren
id|b
comma
id|ioport_map
c_func
(paren
id|port
comma
l_int|1
)paren
)paren
suffix:semicolon
)brace
DECL|function|outw
r_extern
r_inline
r_void
id|outw
c_func
(paren
id|u16
id|b
comma
r_int
r_int
id|port
)paren
(brace
id|iowrite16
c_func
(paren
id|b
comma
id|ioport_map
c_func
(paren
id|port
comma
l_int|2
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif
macro_line|#if IO_CONCAT(__IO_PREFIX,trivial_io_lq)
DECL|function|ioread32
r_extern
r_inline
r_int
r_int
id|ioread32
c_func
(paren
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_int
r_int
id|ret
op_assign
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|ioread32
)paren
(paren
id|addr
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|iowrite32
r_extern
r_inline
r_void
id|iowrite32
c_func
(paren
id|u32
id|b
comma
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|iowrite32
)paren
(paren
id|b
comma
id|addr
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|inl
r_extern
r_inline
id|u32
id|inl
c_func
(paren
r_int
r_int
id|port
)paren
(brace
r_return
id|ioread32
c_func
(paren
id|ioport_map
c_func
(paren
id|port
comma
l_int|4
)paren
)paren
suffix:semicolon
)brace
DECL|function|outl
r_extern
r_inline
r_void
id|outl
c_func
(paren
id|u32
id|b
comma
r_int
r_int
id|port
)paren
(brace
id|iowrite32
c_func
(paren
id|b
comma
id|ioport_map
c_func
(paren
id|port
comma
l_int|4
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif
macro_line|#if IO_CONCAT(__IO_PREFIX,trivial_rw_bw) == 1
DECL|function|__raw_readb
r_extern
r_inline
id|u8
id|__raw_readb
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_return
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|readb
)paren
(paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|__raw_readw
r_extern
r_inline
id|u16
id|__raw_readw
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_return
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|readw
)paren
(paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|__raw_writeb
r_extern
r_inline
r_void
id|__raw_writeb
c_func
(paren
id|u8
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|writeb
)paren
(paren
id|b
comma
id|addr
)paren
suffix:semicolon
)brace
DECL|function|__raw_writew
r_extern
r_inline
r_void
id|__raw_writew
c_func
(paren
id|u16
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|writew
)paren
(paren
id|b
comma
id|addr
)paren
suffix:semicolon
)brace
DECL|function|readb
r_extern
r_inline
id|u8
id|readb
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|u8
id|ret
op_assign
id|__raw_readb
c_func
(paren
id|addr
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|readw
r_extern
r_inline
id|u16
id|readw
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|u16
id|ret
op_assign
id|__raw_readw
c_func
(paren
id|addr
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|writeb
r_extern
r_inline
r_void
id|writeb
c_func
(paren
id|u8
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|__raw_writeb
c_func
(paren
id|b
comma
id|addr
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|writew
r_extern
r_inline
r_void
id|writew
c_func
(paren
id|u16
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|__raw_writew
c_func
(paren
id|b
comma
id|addr
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
macro_line|#endif
macro_line|#if IO_CONCAT(__IO_PREFIX,trivial_rw_lq) == 1
DECL|function|__raw_readl
r_extern
r_inline
id|u32
id|__raw_readl
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_return
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|readl
)paren
(paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|__raw_readq
r_extern
r_inline
id|u64
id|__raw_readq
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_return
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|readq
)paren
(paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|__raw_writel
r_extern
r_inline
r_void
id|__raw_writel
c_func
(paren
id|u32
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|writel
)paren
(paren
id|b
comma
id|addr
)paren
suffix:semicolon
)brace
DECL|function|__raw_writeq
r_extern
r_inline
r_void
id|__raw_writeq
c_func
(paren
id|u64
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|IO_CONCAT
c_func
(paren
id|__IO_PREFIX
comma
id|writeq
)paren
(paren
id|b
comma
id|addr
)paren
suffix:semicolon
)brace
DECL|function|readl
r_extern
r_inline
id|u32
id|readl
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|u32
id|ret
op_assign
id|__raw_readl
c_func
(paren
id|addr
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|readq
r_extern
r_inline
id|u64
id|readq
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|u64
id|ret
op_assign
id|__raw_readq
c_func
(paren
id|addr
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|writel
r_extern
r_inline
r_void
id|writel
c_func
(paren
id|u32
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|__raw_writel
c_func
(paren
id|b
comma
id|addr
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|writeq
r_extern
r_inline
r_void
id|writeq
c_func
(paren
id|u64
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|__raw_writeq
c_func
(paren
id|b
comma
id|addr
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
macro_line|#endif
DECL|macro|inb_p
mdefine_line|#define inb_p&t;&t;inb
DECL|macro|inw_p
mdefine_line|#define inw_p&t;&t;inw
DECL|macro|inl_p
mdefine_line|#define inl_p&t;&t;inl
DECL|macro|outb_p
mdefine_line|#define outb_p&t;&t;outb
DECL|macro|outw_p
mdefine_line|#define outw_p&t;&t;outw
DECL|macro|outl_p
mdefine_line|#define outl_p&t;&t;outl
DECL|macro|readb_relaxed
mdefine_line|#define readb_relaxed(addr) __raw_readb(addr)
DECL|macro|readw_relaxed
mdefine_line|#define readw_relaxed(addr) __raw_readw(addr)
DECL|macro|readl_relaxed
mdefine_line|#define readl_relaxed(addr) __raw_readl(addr)
DECL|macro|readq_relaxed
mdefine_line|#define readq_relaxed(addr) __raw_readq(addr)
multiline_comment|/*&n; * String version of IO memory access ops:&n; */
r_extern
r_void
id|memcpy_fromio
c_func
(paren
r_void
op_star
comma
r_const
r_volatile
r_void
id|__iomem
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|memcpy_toio
c_func
(paren
r_volatile
r_void
id|__iomem
op_star
comma
r_const
r_void
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|_memset_c_io
c_func
(paren
r_volatile
r_void
id|__iomem
op_star
comma
r_int
r_int
comma
r_int
)paren
suffix:semicolon
DECL|function|memset_io
r_static
r_inline
r_void
id|memset_io
c_func
(paren
r_volatile
r_void
id|__iomem
op_star
id|addr
comma
id|u8
id|c
comma
r_int
id|len
)paren
(brace
id|_memset_c_io
c_func
(paren
id|addr
comma
l_int|0x0101010101010101UL
op_star
id|c
comma
id|len
)paren
suffix:semicolon
)brace
DECL|macro|__HAVE_ARCH_MEMSETW_IO
mdefine_line|#define __HAVE_ARCH_MEMSETW_IO
DECL|function|memsetw_io
r_static
r_inline
r_void
id|memsetw_io
c_func
(paren
r_volatile
r_void
id|__iomem
op_star
id|addr
comma
id|u16
id|c
comma
r_int
id|len
)paren
(brace
id|_memset_c_io
c_func
(paren
id|addr
comma
l_int|0x0001000100010001UL
op_star
id|c
comma
id|len
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * String versions of in/out ops:&n; */
r_extern
r_void
id|insb
(paren
r_int
r_int
id|port
comma
r_void
op_star
id|dst
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|insw
(paren
r_int
r_int
id|port
comma
r_void
op_star
id|dst
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|insl
(paren
r_int
r_int
id|port
comma
r_void
op_star
id|dst
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|outsb
(paren
r_int
r_int
id|port
comma
r_const
r_void
op_star
id|src
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|outsw
(paren
r_int
r_int
id|port
comma
r_const
r_void
op_star
id|src
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|outsl
(paren
r_int
r_int
id|port
comma
r_const
r_void
op_star
id|src
comma
r_int
r_int
id|count
)paren
suffix:semicolon
multiline_comment|/*&n; * XXX - We don&squot;t have csum_partial_copy_fromio() yet, so we cheat here and &n; * just copy it. The net code will then do the checksum later. Presently &n; * only used by some shared memory 8390 Ethernet cards anyway.&n; */
DECL|macro|eth_io_copy_and_sum
mdefine_line|#define eth_io_copy_and_sum(skb,src,len,unused) &bslash;&n;  memcpy_fromio((skb)-&gt;data,src,len)
DECL|macro|isa_eth_io_copy_and_sum
mdefine_line|#define isa_eth_io_copy_and_sum(skb,src,len,unused) &bslash;&n;  isa_memcpy_fromio((skb)-&gt;data,src,len)
r_static
r_inline
r_int
DECL|function|check_signature
id|check_signature
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|io_addr
comma
r_const
r_int
r_char
op_star
id|signature
comma
r_int
id|length
)paren
(brace
r_do
(brace
r_if
c_cond
(paren
id|readb
c_func
(paren
id|io_addr
)paren
op_ne
op_star
id|signature
)paren
r_return
l_int|0
suffix:semicolon
id|io_addr
op_increment
suffix:semicolon
id|signature
op_increment
suffix:semicolon
)brace
r_while
c_loop
(paren
op_decrement
id|length
)paren
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
multiline_comment|/*&n; * ISA space is mapped to some machine-specific location on Alpha.&n; * Call into the existing hooks to get the address translated.&n; */
r_static
r_inline
id|u8
DECL|function|isa_readb
id|isa_readb
c_func
(paren
r_int
r_int
id|offset
)paren
(brace
r_void
id|__iomem
op_star
id|addr
op_assign
id|ioremap
c_func
(paren
id|offset
comma
l_int|1
)paren
suffix:semicolon
id|u8
id|ret
op_assign
id|readb
c_func
(paren
id|addr
)paren
suffix:semicolon
id|iounmap
c_func
(paren
id|addr
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
r_static
r_inline
id|u16
DECL|function|isa_readw
id|isa_readw
c_func
(paren
r_int
r_int
id|offset
)paren
(brace
r_void
id|__iomem
op_star
id|addr
op_assign
id|ioremap
c_func
(paren
id|offset
comma
l_int|2
)paren
suffix:semicolon
id|u16
id|ret
op_assign
id|readw
c_func
(paren
id|addr
)paren
suffix:semicolon
id|iounmap
c_func
(paren
id|addr
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
r_static
r_inline
id|u32
DECL|function|isa_readl
id|isa_readl
c_func
(paren
r_int
r_int
id|offset
)paren
(brace
r_void
id|__iomem
op_star
id|addr
op_assign
id|ioremap
c_func
(paren
id|offset
comma
l_int|2
)paren
suffix:semicolon
id|u32
id|ret
op_assign
id|readl
c_func
(paren
id|addr
)paren
suffix:semicolon
id|iounmap
c_func
(paren
id|addr
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|isa_writeb
id|isa_writeb
c_func
(paren
id|u8
id|b
comma
r_int
r_int
id|offset
)paren
(brace
r_void
id|__iomem
op_star
id|addr
op_assign
id|ioremap
c_func
(paren
id|offset
comma
l_int|2
)paren
suffix:semicolon
id|writeb
c_func
(paren
id|b
comma
id|addr
)paren
suffix:semicolon
id|iounmap
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|isa_writew
id|isa_writew
c_func
(paren
id|u16
id|w
comma
r_int
r_int
id|offset
)paren
(brace
r_void
id|__iomem
op_star
id|addr
op_assign
id|ioremap
c_func
(paren
id|offset
comma
l_int|2
)paren
suffix:semicolon
id|writew
c_func
(paren
id|w
comma
id|addr
)paren
suffix:semicolon
id|iounmap
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|isa_writel
id|isa_writel
c_func
(paren
id|u32
id|l
comma
r_int
r_int
id|offset
)paren
(brace
r_void
id|__iomem
op_star
id|addr
op_assign
id|ioremap
c_func
(paren
id|offset
comma
l_int|2
)paren
suffix:semicolon
id|writel
c_func
(paren
id|l
comma
id|addr
)paren
suffix:semicolon
id|iounmap
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|isa_memset_io
id|isa_memset_io
c_func
(paren
r_int
r_int
id|offset
comma
id|u8
id|val
comma
r_int
id|n
)paren
(brace
r_void
id|__iomem
op_star
id|addr
op_assign
id|ioremap
c_func
(paren
id|offset
comma
id|n
)paren
suffix:semicolon
id|memset_io
c_func
(paren
id|addr
comma
id|val
comma
id|n
)paren
suffix:semicolon
id|iounmap
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|isa_memcpy_fromio
id|isa_memcpy_fromio
c_func
(paren
r_void
op_star
id|dest
comma
r_int
r_int
id|offset
comma
r_int
id|n
)paren
(brace
r_void
id|__iomem
op_star
id|addr
op_assign
id|ioremap
c_func
(paren
id|offset
comma
id|n
)paren
suffix:semicolon
id|memcpy_fromio
c_func
(paren
id|dest
comma
id|addr
comma
id|n
)paren
suffix:semicolon
id|iounmap
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|isa_memcpy_toio
id|isa_memcpy_toio
c_func
(paren
r_int
r_int
id|offset
comma
r_const
r_void
op_star
id|src
comma
r_int
id|n
)paren
(brace
r_void
id|__iomem
op_star
id|addr
op_assign
id|ioremap
c_func
(paren
id|offset
comma
id|n
)paren
suffix:semicolon
id|memcpy_toio
c_func
(paren
id|addr
comma
id|src
comma
id|n
)paren
suffix:semicolon
id|iounmap
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|isa_check_signature
id|isa_check_signature
c_func
(paren
r_int
r_int
id|offset
comma
r_const
r_int
r_char
op_star
id|sig
comma
r_int
id|len
)paren
(brace
r_void
id|__iomem
op_star
id|addr
op_assign
id|ioremap
c_func
(paren
id|offset
comma
id|len
)paren
suffix:semicolon
r_int
id|ret
op_assign
id|check_signature
c_func
(paren
id|addr
comma
id|sig
comma
id|len
)paren
suffix:semicolon
id|iounmap
c_func
(paren
id|addr
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
multiline_comment|/*&n; * The Alpha Jensen hardware for some rather strange reason puts&n; * the RTC clock at 0x170 instead of 0x70. Probably due to some&n; * misguided idea about using 0x70 for NMI stuff.&n; *&n; * These defines will override the defaults when doing RTC queries&n; */
macro_line|#ifdef CONFIG_ALPHA_GENERIC
DECL|macro|RTC_PORT
macro_line|# define RTC_PORT(x)&t;((x) + alpha_mv.rtc_port)
macro_line|#else
macro_line|# ifdef CONFIG_ALPHA_JENSEN
DECL|macro|RTC_PORT
macro_line|#  define RTC_PORT(x)&t;(0x170+(x))
macro_line|# else
DECL|macro|RTC_PORT
macro_line|#  define RTC_PORT(x)&t;(0x70 + (x))
macro_line|# endif
macro_line|#endif
DECL|macro|RTC_ALWAYS_BCD
mdefine_line|#define RTC_ALWAYS_BCD&t;0
multiline_comment|/* Nothing to do */
DECL|macro|dma_cache_inv
mdefine_line|#define dma_cache_inv(_start,_size)&t;&t;do { } while (0)
DECL|macro|dma_cache_wback
mdefine_line|#define dma_cache_wback(_start,_size)&t;&t;do { } while (0)
DECL|macro|dma_cache_wback_inv
mdefine_line|#define dma_cache_wback_inv(_start,_size)&t;do { } while (0)
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* __ALPHA_IO_H */
eof
