macro_line|#ifndef _ALPHA_RWSEM_H
DECL|macro|_ALPHA_RWSEM_H
mdefine_line|#define _ALPHA_RWSEM_H
multiline_comment|/*&n; * Written by Ivan Kokshaysky &lt;ink@jurassic.park.msu.ru&gt;, 2001.&n; * Based on asm-alpha/semaphore.h and asm-i386/rwsem.h&n; */
macro_line|#ifndef _LINUX_RWSEM_H
macro_line|#error please dont include asm/rwsem.h directly, use linux/rwsem.h instead
macro_line|#endif
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/compiler.h&gt;
macro_line|#include &lt;linux/list.h&gt;
macro_line|#include &lt;linux/spinlock.h&gt;
r_struct
id|rwsem_waiter
suffix:semicolon
r_extern
r_struct
id|rw_semaphore
op_star
id|rwsem_down_read_failed
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
suffix:semicolon
r_extern
r_struct
id|rw_semaphore
op_star
id|rwsem_down_write_failed
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
suffix:semicolon
r_extern
r_struct
id|rw_semaphore
op_star
id|rwsem_wake
c_func
(paren
r_struct
id|rw_semaphore
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * the semaphore definition&n; */
DECL|struct|rw_semaphore
r_struct
id|rw_semaphore
(brace
DECL|member|count
r_int
id|count
suffix:semicolon
DECL|macro|RWSEM_UNLOCKED_VALUE
mdefine_line|#define RWSEM_UNLOCKED_VALUE&t;&t;0x0000000000000000L
DECL|macro|RWSEM_ACTIVE_BIAS
mdefine_line|#define RWSEM_ACTIVE_BIAS&t;&t;0x0000000000000001L
DECL|macro|RWSEM_ACTIVE_MASK
mdefine_line|#define RWSEM_ACTIVE_MASK&t;&t;0x00000000ffffffffL
DECL|macro|RWSEM_WAITING_BIAS
mdefine_line|#define RWSEM_WAITING_BIAS&t;&t;(-0x0000000100000000L)
DECL|macro|RWSEM_ACTIVE_READ_BIAS
mdefine_line|#define RWSEM_ACTIVE_READ_BIAS&t;&t;RWSEM_ACTIVE_BIAS
DECL|macro|RWSEM_ACTIVE_WRITE_BIAS
mdefine_line|#define RWSEM_ACTIVE_WRITE_BIAS&t;&t;(RWSEM_WAITING_BIAS + RWSEM_ACTIVE_BIAS)
DECL|member|wait_lock
id|spinlock_t
id|wait_lock
suffix:semicolon
DECL|member|wait_list
r_struct
id|list_head
id|wait_list
suffix:semicolon
macro_line|#if RWSEM_DEBUG
DECL|member|debug
r_int
id|debug
suffix:semicolon
macro_line|#endif
)brace
suffix:semicolon
macro_line|#if RWSEM_DEBUG
DECL|macro|__RWSEM_DEBUG_INIT
mdefine_line|#define __RWSEM_DEBUG_INIT      , 0
macro_line|#else
DECL|macro|__RWSEM_DEBUG_INIT
mdefine_line|#define __RWSEM_DEBUG_INIT&t;/* */
macro_line|#endif
DECL|macro|__RWSEM_INITIALIZER
mdefine_line|#define __RWSEM_INITIALIZER(name) &bslash;&n;&t;{ RWSEM_UNLOCKED_VALUE, SPIN_LOCK_UNLOCKED, &bslash;&n;&t;LIST_HEAD_INIT((name).wait_list) __RWSEM_DEBUG_INIT }
DECL|macro|DECLARE_RWSEM
mdefine_line|#define DECLARE_RWSEM(name) &bslash;&n;&t;struct rw_semaphore name = __RWSEM_INITIALIZER(name)
DECL|function|init_rwsem
r_static
r_inline
r_void
id|init_rwsem
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|sem-&gt;count
op_assign
id|RWSEM_UNLOCKED_VALUE
suffix:semicolon
id|spin_lock_init
c_func
(paren
op_amp
id|sem-&gt;wait_lock
)paren
suffix:semicolon
id|INIT_LIST_HEAD
c_func
(paren
op_amp
id|sem-&gt;wait_list
)paren
suffix:semicolon
macro_line|#if RWSEM_DEBUG
id|sem-&gt;debug
op_assign
l_int|0
suffix:semicolon
macro_line|#endif
)brace
DECL|function|__down_read
r_static
r_inline
r_void
id|__down_read
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|oldcount
suffix:semicolon
macro_line|#ifndef&t;CONFIG_SMP
id|oldcount
op_assign
id|sem-&gt;count
suffix:semicolon
id|sem-&gt;count
op_add_assign
id|RWSEM_ACTIVE_READ_BIAS
suffix:semicolon
macro_line|#else
r_int
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&t;ldq_l&t;%0,%1&bslash;n&quot;
l_string|&quot;&t;addq&t;%0,%3,%2&bslash;n&quot;
l_string|&quot;&t;stq_c&t;%2,%1&bslash;n&quot;
l_string|&quot;&t;beq&t;%2,2f&bslash;n&quot;
l_string|&quot;&t;mb&bslash;n&quot;
l_string|&quot;.subsection 2&bslash;n&quot;
l_string|&quot;2:&t;br&t;1b&bslash;n&quot;
l_string|&quot;.previous&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|oldcount
)paren
comma
l_string|&quot;=m&quot;
(paren
id|sem-&gt;count
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
suffix:colon
l_string|&quot;Ir&quot;
(paren
id|RWSEM_ACTIVE_READ_BIAS
)paren
comma
l_string|&quot;m&quot;
(paren
id|sem-&gt;count
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
macro_line|#endif
r_if
c_cond
(paren
id|__builtin_expect
c_func
(paren
id|oldcount
OL
l_int|0
comma
l_int|0
)paren
)paren
id|rwsem_down_read_failed
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
DECL|function|__down_write
r_static
r_inline
r_void
id|__down_write
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|oldcount
suffix:semicolon
macro_line|#ifndef&t;CONFIG_SMP
id|oldcount
op_assign
id|sem-&gt;count
suffix:semicolon
id|sem-&gt;count
op_add_assign
id|RWSEM_ACTIVE_WRITE_BIAS
suffix:semicolon
macro_line|#else
r_int
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&t;ldq_l&t;%0,%1&bslash;n&quot;
l_string|&quot;&t;addq&t;%0,%3,%2&bslash;n&quot;
l_string|&quot;&t;stq_c&t;%2,%1&bslash;n&quot;
l_string|&quot;&t;beq&t;%2,2f&bslash;n&quot;
l_string|&quot;&t;mb&bslash;n&quot;
l_string|&quot;.subsection 2&bslash;n&quot;
l_string|&quot;2:&t;br&t;1b&bslash;n&quot;
l_string|&quot;.previous&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|oldcount
)paren
comma
l_string|&quot;=m&quot;
(paren
id|sem-&gt;count
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
suffix:colon
l_string|&quot;Ir&quot;
(paren
id|RWSEM_ACTIVE_WRITE_BIAS
)paren
comma
l_string|&quot;m&quot;
(paren
id|sem-&gt;count
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
macro_line|#endif
r_if
c_cond
(paren
id|__builtin_expect
c_func
(paren
id|oldcount
comma
l_int|0
)paren
)paren
id|rwsem_down_write_failed
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
DECL|function|__up_read
r_static
r_inline
r_void
id|__up_read
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|oldcount
suffix:semicolon
macro_line|#ifndef&t;CONFIG_SMP
id|oldcount
op_assign
id|sem-&gt;count
suffix:semicolon
id|sem-&gt;count
op_sub_assign
id|RWSEM_ACTIVE_READ_BIAS
suffix:semicolon
macro_line|#else
r_int
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&t;mb&bslash;n&quot;
l_string|&quot;1:&t;ldq_l&t;%0,%1&bslash;n&quot;
l_string|&quot;&t;subq&t;%0,%3,%2&bslash;n&quot;
l_string|&quot;&t;stq_c&t;%2,%1&bslash;n&quot;
l_string|&quot;&t;beq&t;%2,2f&bslash;n&quot;
l_string|&quot;.subsection 2&bslash;n&quot;
l_string|&quot;2:&t;br&t;1b&bslash;n&quot;
l_string|&quot;.previous&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|oldcount
)paren
comma
l_string|&quot;=m&quot;
(paren
id|sem-&gt;count
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
suffix:colon
l_string|&quot;Ir&quot;
(paren
id|RWSEM_ACTIVE_READ_BIAS
)paren
comma
l_string|&quot;m&quot;
(paren
id|sem-&gt;count
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
macro_line|#endif
r_if
c_cond
(paren
id|__builtin_expect
c_func
(paren
id|oldcount
OL
l_int|0
comma
l_int|0
)paren
)paren
r_if
c_cond
(paren
(paren
r_int
)paren
id|oldcount
op_minus
id|RWSEM_ACTIVE_READ_BIAS
op_eq
l_int|0
)paren
id|rwsem_wake
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
DECL|function|__up_write
r_static
r_inline
r_void
id|__up_write
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|count
suffix:semicolon
macro_line|#ifndef&t;CONFIG_SMP
id|sem-&gt;count
op_sub_assign
id|RWSEM_ACTIVE_WRITE_BIAS
suffix:semicolon
id|count
op_assign
id|sem-&gt;count
suffix:semicolon
macro_line|#else
r_int
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&t;mb&bslash;n&quot;
l_string|&quot;1:&t;ldq_l&t;%0,%1&bslash;n&quot;
l_string|&quot;&t;subq&t;%0,%3,%2&bslash;n&quot;
l_string|&quot;&t;stq_c&t;%2,%1&bslash;n&quot;
l_string|&quot;&t;beq&t;%2,2f&bslash;n&quot;
l_string|&quot;&t;subq&t;%0,%3,%0&bslash;n&quot;
l_string|&quot;.subsection 2&bslash;n&quot;
l_string|&quot;2:&t;br&t;1b&bslash;n&quot;
l_string|&quot;.previous&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|count
)paren
comma
l_string|&quot;=m&quot;
(paren
id|sem-&gt;count
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
suffix:colon
l_string|&quot;Ir&quot;
(paren
id|RWSEM_ACTIVE_WRITE_BIAS
)paren
comma
l_string|&quot;m&quot;
(paren
id|sem-&gt;count
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
macro_line|#endif
r_if
c_cond
(paren
id|__builtin_expect
c_func
(paren
id|count
comma
l_int|0
)paren
)paren
r_if
c_cond
(paren
(paren
r_int
)paren
id|count
op_eq
l_int|0
)paren
id|rwsem_wake
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
DECL|function|rwsem_atomic_add
r_static
r_inline
r_void
id|rwsem_atomic_add
c_func
(paren
r_int
id|val
comma
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
macro_line|#ifndef&t;CONFIG_SMP
id|sem-&gt;count
op_add_assign
id|val
suffix:semicolon
macro_line|#else
r_int
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&t;ldq_l&t;%0,%1&bslash;n&quot;
l_string|&quot;&t;addq&t;%0,%2,%0&bslash;n&quot;
l_string|&quot;&t;stq_c&t;%0,%1&bslash;n&quot;
l_string|&quot;&t;beq&t;%0,2f&bslash;n&quot;
l_string|&quot;.subsection 2&bslash;n&quot;
l_string|&quot;2:&t;br&t;1b&bslash;n&quot;
l_string|&quot;.previous&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
id|sem-&gt;count
)paren
suffix:colon
l_string|&quot;Ir&quot;
(paren
id|val
)paren
comma
l_string|&quot;m&quot;
(paren
id|sem-&gt;count
)paren
)paren
suffix:semicolon
macro_line|#endif
)brace
DECL|function|rwsem_atomic_update
r_static
r_inline
r_int
id|rwsem_atomic_update
c_func
(paren
r_int
id|val
comma
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
macro_line|#ifndef&t;CONFIG_SMP
id|sem-&gt;count
op_add_assign
id|val
suffix:semicolon
r_return
id|sem-&gt;count
suffix:semicolon
macro_line|#else
r_int
id|ret
comma
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&t;ldq_l&t;%0,%1&bslash;n&quot;
l_string|&quot;&t;addq &t;%0,%3,%2&bslash;n&quot;
l_string|&quot;&t;addq&t;%0,%3,%0&bslash;n&quot;
l_string|&quot;&t;stq_c&t;%2,%1&bslash;n&quot;
l_string|&quot;&t;beq&t;%2,2f&bslash;n&quot;
l_string|&quot;.subsection 2&bslash;n&quot;
l_string|&quot;2:&t;br&t;1b&bslash;n&quot;
l_string|&quot;.previous&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|ret
)paren
comma
l_string|&quot;=m&quot;
(paren
id|sem-&gt;count
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
suffix:colon
l_string|&quot;Ir&quot;
(paren
id|val
)paren
comma
l_string|&quot;m&quot;
(paren
id|sem-&gt;count
)paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
macro_line|#endif
)brace
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _ALPHA_RWSEM_H */
eof
