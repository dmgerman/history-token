macro_line|#ifndef __ALPHA_JENSEN_H
DECL|macro|__ALPHA_JENSEN_H
mdefine_line|#define __ALPHA_JENSEN_H
macro_line|#include &lt;asm/compiler.h&gt;
multiline_comment|/*&n; * Defines for the AlphaPC EISA IO and memory address space.&n; */
multiline_comment|/*&n; * NOTE! The memory operations do not set any memory barriers, as it&squot;s&n; * not needed for cases like a frame buffer that is essentially memory-like.&n; * You need to do them by hand if the operations depend on ordering.&n; *&n; * Similarly, the port IO operations do a &quot;mb&quot; only after a write operation:&n; * if an mb is needed before (as in the case of doing memory mapped IO&n; * first, and then a port IO operation to the same device), it needs to be&n; * done by hand.&n; *&n; * After the above has bitten me 100 times, I&squot;ll give up and just do the&n; * mb all the time, but right now I&squot;m hoping this will work out.  Avoiding&n; * mb&squot;s may potentially be a noticeable speed improvement, but I can&squot;t&n; * honestly say I&squot;ve tested it.&n; *&n; * Handling interrupts that need to do mb&squot;s to synchronize to non-interrupts&n; * is another fun race area.  Don&squot;t do it (because if you do, I&squot;ll have to&n; * do *everything* with interrupts disabled, ugh).&n; */
multiline_comment|/*&n; * EISA Interrupt Acknowledge address&n; */
DECL|macro|EISA_INTA
mdefine_line|#define EISA_INTA&t;&t;(IDENT_ADDR + 0x100000000UL)
multiline_comment|/*&n; * FEPROM addresses&n; */
DECL|macro|EISA_FEPROM0
mdefine_line|#define EISA_FEPROM0&t;&t;(IDENT_ADDR + 0x180000000UL)
DECL|macro|EISA_FEPROM1
mdefine_line|#define EISA_FEPROM1&t;&t;(IDENT_ADDR + 0x1A0000000UL)
multiline_comment|/*&n; * VL82C106 base address&n; */
DECL|macro|EISA_VL82C106
mdefine_line|#define EISA_VL82C106&t;&t;(IDENT_ADDR + 0x1C0000000UL)
multiline_comment|/*&n; * EISA &quot;Host Address Extension&quot; address (bits 25-31 of the EISA address)&n; */
DECL|macro|EISA_HAE
mdefine_line|#define EISA_HAE&t;&t;(IDENT_ADDR + 0x1D0000000UL)
multiline_comment|/*&n; * &quot;SYSCTL&quot; register address&n; */
DECL|macro|EISA_SYSCTL
mdefine_line|#define EISA_SYSCTL&t;&t;(IDENT_ADDR + 0x1E0000000UL)
multiline_comment|/*&n; * &quot;spare&quot; register address&n; */
DECL|macro|EISA_SPARE
mdefine_line|#define EISA_SPARE&t;&t;(IDENT_ADDR + 0x1F0000000UL)
multiline_comment|/*&n; * EISA memory address offset&n; */
DECL|macro|EISA_MEM
mdefine_line|#define EISA_MEM&t;&t;(IDENT_ADDR + 0x200000000UL)
multiline_comment|/*&n; * EISA IO address offset&n; */
DECL|macro|EISA_IO
mdefine_line|#define EISA_IO&t;&t;&t;(IDENT_ADDR + 0x300000000UL)
macro_line|#ifdef __KERNEL__
macro_line|#ifndef __EXTERN_INLINE
DECL|macro|__EXTERN_INLINE
mdefine_line|#define __EXTERN_INLINE extern inline
DECL|macro|__IO_EXTERN_INLINE
mdefine_line|#define __IO_EXTERN_INLINE
macro_line|#endif
multiline_comment|/*&n; * Handle the &quot;host address register&quot;. This needs to be set&n; * to the high 7 bits of the EISA address.  This is also needed&n; * for EISA IO addresses, which are only 16 bits wide (the&n; * hae needs to be set to 0).&n; *&n; * HAE isn&squot;t needed for the local IO operations, though.&n; */
DECL|macro|JENSEN_HAE_ADDRESS
mdefine_line|#define JENSEN_HAE_ADDRESS&t;EISA_HAE
DECL|macro|JENSEN_HAE_MASK
mdefine_line|#define JENSEN_HAE_MASK&t;&t;0x1ffffff
DECL|function|jensen_set_hae
id|__EXTERN_INLINE
r_void
id|jensen_set_hae
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
multiline_comment|/* hae on the Jensen is bits 31:25 shifted right */
id|addr
op_rshift_assign
l_int|25
suffix:semicolon
r_if
c_cond
(paren
id|addr
op_ne
id|alpha_mv.hae_cache
)paren
id|set_hae
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
DECL|macro|vuip
mdefine_line|#define vuip&t;volatile unsigned int *
multiline_comment|/*&n; * IO functions&n; *&n; * The &quot;local&quot; functions are those that don&squot;t go out to the EISA bus,&n; * but instead act on the VL82C106 chip directly.. This is mainly the&n; * keyboard, RTC,  printer and first two serial lines..&n; *&n; * The local stuff makes for some complications, but it seems to be&n; * gone in the PCI version. I hope I can get DEC suckered^H^H^H^H^H^H^H^H&n; * convinced that I need one of the newer machines.&n; */
DECL|function|jensen_local_inb
r_static
r_inline
r_int
r_int
id|jensen_local_inb
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
l_int|0xff
op_amp
op_star
(paren
id|vuip
)paren
(paren
(paren
id|addr
op_lshift
l_int|9
)paren
op_plus
id|EISA_VL82C106
)paren
suffix:semicolon
)brace
DECL|function|jensen_local_outb
r_static
r_inline
r_void
id|jensen_local_outb
c_func
(paren
id|u8
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
id|vuip
)paren
(paren
(paren
id|addr
op_lshift
l_int|9
)paren
op_plus
id|EISA_VL82C106
)paren
op_assign
id|b
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|jensen_bus_inb
r_static
r_inline
r_int
r_int
id|jensen_bus_inb
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
id|result
suffix:semicolon
id|jensen_set_hae
c_func
(paren
l_int|0
)paren
suffix:semicolon
id|result
op_assign
op_star
(paren
r_volatile
r_int
op_star
)paren
(paren
(paren
id|addr
op_lshift
l_int|7
)paren
op_plus
id|EISA_IO
op_plus
l_int|0x00
)paren
suffix:semicolon
r_return
id|__kernel_extbl
c_func
(paren
id|result
comma
id|addr
op_amp
l_int|3
)paren
suffix:semicolon
)brace
DECL|function|jensen_bus_outb
r_static
r_inline
r_void
id|jensen_bus_outb
c_func
(paren
id|u8
id|b
comma
r_int
r_int
id|addr
)paren
(brace
id|jensen_set_hae
c_func
(paren
l_int|0
)paren
suffix:semicolon
op_star
(paren
id|vuip
)paren
(paren
(paren
id|addr
op_lshift
l_int|7
)paren
op_plus
id|EISA_IO
op_plus
l_int|0x00
)paren
op_assign
id|b
op_star
l_int|0x01010101
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * It seems gcc is not very good at optimizing away logical&n; * operations that result in operations across inline functions.&n; * Which is why this is a macro.&n; */
DECL|macro|jensen_is_local
mdefine_line|#define jensen_is_local(addr) ( &bslash;&n;/* keyboard */&t;(addr == 0x60 || addr == 0x64) || &bslash;&n;/* RTC */&t;(addr == 0x170 || addr == 0x171) || &bslash;&n;/* mb COM2 */&t;(addr &gt;= 0x2f8 &amp;&amp; addr &lt;= 0x2ff) || &bslash;&n;/* mb LPT1 */&t;(addr &gt;= 0x3bc &amp;&amp; addr &lt;= 0x3be) || &bslash;&n;/* mb COM2 */&t;(addr &gt;= 0x3f8 &amp;&amp; addr &lt;= 0x3ff))
DECL|function|jensen_inb
id|__EXTERN_INLINE
id|u8
id|jensen_inb
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_if
c_cond
(paren
id|jensen_is_local
c_func
(paren
id|addr
)paren
)paren
r_return
id|jensen_local_inb
c_func
(paren
id|addr
)paren
suffix:semicolon
r_else
r_return
id|jensen_bus_inb
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|jensen_outb
id|__EXTERN_INLINE
r_void
id|jensen_outb
c_func
(paren
id|u8
id|b
comma
r_int
r_int
id|addr
)paren
(brace
r_if
c_cond
(paren
id|jensen_is_local
c_func
(paren
id|addr
)paren
)paren
id|jensen_local_outb
c_func
(paren
id|b
comma
id|addr
)paren
suffix:semicolon
r_else
id|jensen_bus_outb
c_func
(paren
id|b
comma
id|addr
)paren
suffix:semicolon
)brace
DECL|function|jensen_inw
id|__EXTERN_INLINE
id|u16
id|jensen_inw
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
id|result
suffix:semicolon
id|jensen_set_hae
c_func
(paren
l_int|0
)paren
suffix:semicolon
id|result
op_assign
op_star
(paren
r_volatile
r_int
op_star
)paren
(paren
(paren
id|addr
op_lshift
l_int|7
)paren
op_plus
id|EISA_IO
op_plus
l_int|0x20
)paren
suffix:semicolon
id|result
op_rshift_assign
(paren
id|addr
op_amp
l_int|3
)paren
op_star
l_int|8
suffix:semicolon
r_return
l_int|0xffffUL
op_amp
id|result
suffix:semicolon
)brace
DECL|function|jensen_inl
id|__EXTERN_INLINE
id|u32
id|jensen_inl
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
id|jensen_set_hae
c_func
(paren
l_int|0
)paren
suffix:semicolon
r_return
op_star
(paren
id|vuip
)paren
(paren
(paren
id|addr
op_lshift
l_int|7
)paren
op_plus
id|EISA_IO
op_plus
l_int|0x60
)paren
suffix:semicolon
)brace
DECL|function|jensen_outw
id|__EXTERN_INLINE
r_void
id|jensen_outw
c_func
(paren
id|u16
id|b
comma
r_int
r_int
id|addr
)paren
(brace
id|jensen_set_hae
c_func
(paren
l_int|0
)paren
suffix:semicolon
op_star
(paren
id|vuip
)paren
(paren
(paren
id|addr
op_lshift
l_int|7
)paren
op_plus
id|EISA_IO
op_plus
l_int|0x20
)paren
op_assign
id|b
op_star
l_int|0x00010001
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|jensen_outl
id|__EXTERN_INLINE
r_void
id|jensen_outl
c_func
(paren
id|u32
id|b
comma
r_int
r_int
id|addr
)paren
(brace
id|jensen_set_hae
c_func
(paren
l_int|0
)paren
suffix:semicolon
op_star
(paren
id|vuip
)paren
(paren
(paren
id|addr
op_lshift
l_int|7
)paren
op_plus
id|EISA_IO
op_plus
l_int|0x60
)paren
op_assign
id|b
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Memory functions.&n; */
DECL|function|jensen_readb
id|__EXTERN_INLINE
id|u8
id|jensen_readb
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|xaddr
)paren
(brace
r_int
r_int
id|addr
op_assign
(paren
r_int
r_int
)paren
id|xaddr
suffix:semicolon
r_int
id|result
suffix:semicolon
id|jensen_set_hae
c_func
(paren
id|addr
)paren
suffix:semicolon
id|addr
op_and_assign
id|JENSEN_HAE_MASK
suffix:semicolon
id|result
op_assign
op_star
(paren
r_volatile
r_int
op_star
)paren
(paren
(paren
id|addr
op_lshift
l_int|7
)paren
op_plus
id|EISA_MEM
op_plus
l_int|0x00
)paren
suffix:semicolon
id|result
op_rshift_assign
(paren
id|addr
op_amp
l_int|3
)paren
op_star
l_int|8
suffix:semicolon
r_return
l_int|0xffUL
op_amp
id|result
suffix:semicolon
)brace
DECL|function|jensen_readw
id|__EXTERN_INLINE
id|u16
id|jensen_readw
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|xaddr
)paren
(brace
r_int
r_int
id|addr
op_assign
(paren
r_int
r_int
)paren
id|xaddr
suffix:semicolon
r_int
id|result
suffix:semicolon
id|jensen_set_hae
c_func
(paren
id|addr
)paren
suffix:semicolon
id|addr
op_and_assign
id|JENSEN_HAE_MASK
suffix:semicolon
id|result
op_assign
op_star
(paren
r_volatile
r_int
op_star
)paren
(paren
(paren
id|addr
op_lshift
l_int|7
)paren
op_plus
id|EISA_MEM
op_plus
l_int|0x20
)paren
suffix:semicolon
id|result
op_rshift_assign
(paren
id|addr
op_amp
l_int|3
)paren
op_star
l_int|8
suffix:semicolon
r_return
l_int|0xffffUL
op_amp
id|result
suffix:semicolon
)brace
DECL|function|jensen_readl
id|__EXTERN_INLINE
id|u32
id|jensen_readl
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|xaddr
)paren
(brace
r_int
r_int
id|addr
op_assign
(paren
r_int
r_int
)paren
id|xaddr
suffix:semicolon
id|jensen_set_hae
c_func
(paren
id|addr
)paren
suffix:semicolon
id|addr
op_and_assign
id|JENSEN_HAE_MASK
suffix:semicolon
r_return
op_star
(paren
id|vuip
)paren
(paren
(paren
id|addr
op_lshift
l_int|7
)paren
op_plus
id|EISA_MEM
op_plus
l_int|0x60
)paren
suffix:semicolon
)brace
DECL|function|jensen_readq
id|__EXTERN_INLINE
id|u64
id|jensen_readq
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|xaddr
)paren
(brace
r_int
r_int
id|addr
op_assign
(paren
r_int
r_int
)paren
id|xaddr
suffix:semicolon
r_int
r_int
id|r0
comma
id|r1
suffix:semicolon
id|jensen_set_hae
c_func
(paren
id|addr
)paren
suffix:semicolon
id|addr
op_and_assign
id|JENSEN_HAE_MASK
suffix:semicolon
id|addr
op_assign
(paren
id|addr
op_lshift
l_int|7
)paren
op_plus
id|EISA_MEM
op_plus
l_int|0x60
suffix:semicolon
id|r0
op_assign
op_star
(paren
id|vuip
)paren
(paren
id|addr
)paren
suffix:semicolon
id|r1
op_assign
op_star
(paren
id|vuip
)paren
(paren
id|addr
op_plus
(paren
l_int|4
op_lshift
l_int|7
)paren
)paren
suffix:semicolon
r_return
id|r1
op_lshift
l_int|32
op_or
id|r0
suffix:semicolon
)brace
DECL|function|jensen_writeb
id|__EXTERN_INLINE
r_void
id|jensen_writeb
c_func
(paren
id|u8
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|xaddr
)paren
(brace
r_int
r_int
id|addr
op_assign
(paren
r_int
r_int
)paren
id|xaddr
suffix:semicolon
id|jensen_set_hae
c_func
(paren
id|addr
)paren
suffix:semicolon
id|addr
op_and_assign
id|JENSEN_HAE_MASK
suffix:semicolon
op_star
(paren
id|vuip
)paren
(paren
(paren
id|addr
op_lshift
l_int|7
)paren
op_plus
id|EISA_MEM
op_plus
l_int|0x00
)paren
op_assign
id|b
op_star
l_int|0x01010101
suffix:semicolon
)brace
DECL|function|jensen_writew
id|__EXTERN_INLINE
r_void
id|jensen_writew
c_func
(paren
id|u16
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|xaddr
)paren
(brace
r_int
r_int
id|addr
op_assign
(paren
r_int
r_int
)paren
id|xaddr
suffix:semicolon
id|jensen_set_hae
c_func
(paren
id|addr
)paren
suffix:semicolon
id|addr
op_and_assign
id|JENSEN_HAE_MASK
suffix:semicolon
op_star
(paren
id|vuip
)paren
(paren
(paren
id|addr
op_lshift
l_int|7
)paren
op_plus
id|EISA_MEM
op_plus
l_int|0x20
)paren
op_assign
id|b
op_star
l_int|0x00010001
suffix:semicolon
)brace
DECL|function|jensen_writel
id|__EXTERN_INLINE
r_void
id|jensen_writel
c_func
(paren
id|u32
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|xaddr
)paren
(brace
r_int
r_int
id|addr
op_assign
(paren
r_int
r_int
)paren
id|xaddr
suffix:semicolon
id|jensen_set_hae
c_func
(paren
id|addr
)paren
suffix:semicolon
id|addr
op_and_assign
id|JENSEN_HAE_MASK
suffix:semicolon
op_star
(paren
id|vuip
)paren
(paren
(paren
id|addr
op_lshift
l_int|7
)paren
op_plus
id|EISA_MEM
op_plus
l_int|0x60
)paren
op_assign
id|b
suffix:semicolon
)brace
DECL|function|jensen_writeq
id|__EXTERN_INLINE
r_void
id|jensen_writeq
c_func
(paren
id|u64
id|b
comma
r_volatile
r_void
id|__iomem
op_star
id|xaddr
)paren
(brace
r_int
r_int
id|addr
op_assign
(paren
r_int
r_int
)paren
id|xaddr
suffix:semicolon
id|jensen_set_hae
c_func
(paren
id|addr
)paren
suffix:semicolon
id|addr
op_and_assign
id|JENSEN_HAE_MASK
suffix:semicolon
id|addr
op_assign
(paren
id|addr
op_lshift
l_int|7
)paren
op_plus
id|EISA_MEM
op_plus
l_int|0x60
suffix:semicolon
op_star
(paren
id|vuip
)paren
(paren
id|addr
)paren
op_assign
id|b
suffix:semicolon
op_star
(paren
id|vuip
)paren
(paren
id|addr
op_plus
(paren
l_int|4
op_lshift
l_int|7
)paren
)paren
op_assign
id|b
op_rshift
l_int|32
suffix:semicolon
)brace
DECL|function|jensen_ioportmap
id|__EXTERN_INLINE
r_void
id|__iomem
op_star
id|jensen_ioportmap
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
(paren
r_void
id|__iomem
op_star
)paren
id|addr
suffix:semicolon
)brace
DECL|function|jensen_ioremap
id|__EXTERN_INLINE
r_void
id|__iomem
op_star
id|jensen_ioremap
c_func
(paren
r_int
r_int
id|addr
comma
r_int
r_int
id|size
)paren
(brace
r_return
(paren
r_void
id|__iomem
op_star
)paren
(paren
id|addr
op_plus
l_int|0x100000000ul
)paren
suffix:semicolon
)brace
DECL|function|jensen_is_ioaddr
id|__EXTERN_INLINE
r_int
id|jensen_is_ioaddr
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
(paren
r_int
)paren
id|addr
op_ge
l_int|0
suffix:semicolon
)brace
DECL|function|jensen_is_mmio
id|__EXTERN_INLINE
r_int
id|jensen_is_mmio
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_return
(paren
r_int
r_int
)paren
id|addr
op_ge
l_int|0x100000000ul
suffix:semicolon
)brace
multiline_comment|/* New-style ioread interface.  All the routines are so ugly for Jensen&n;   that it doesn&squot;t make sense to merge them.  */
DECL|macro|IOPORT
mdefine_line|#define IOPORT(OS, NS)&t;&t;&t;&t;&t;&t;&t;&bslash;&n;__EXTERN_INLINE unsigned int jensen_ioread##NS(void __iomem *xaddr)&t;&bslash;&n;{&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if (jensen_is_mmio(xaddr))&t;&t;&t;&t;&t;&bslash;&n;&t;&t;return jensen_read##OS(xaddr - 0x100000000ul);&t;&t;&bslash;&n;&t;else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;return jensen_in##OS((unsigned long)xaddr);&t;&t;&bslash;&n;}&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;__EXTERN_INLINE void jensen_iowrite##NS(u##NS b, void __iomem *xaddr)&t;&bslash;&n;{&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if (jensen_is_mmio(xaddr))&t;&t;&t;&t;&t;&bslash;&n;&t;&t;jensen_write##OS(b, xaddr - 0x100000000ul);&t;&t;&bslash;&n;&t;else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;jensen_out##OS(b, (unsigned long)xaddr);&t;&t;&bslash;&n;}
id|IOPORT
c_func
(paren
id|b
comma
l_int|8
)paren
id|IOPORT
c_func
(paren
id|w
comma
l_int|16
)paren
id|IOPORT
c_func
(paren
id|l
comma
l_int|32
)paren
DECL|macro|IOPORT
macro_line|#undef IOPORT
DECL|macro|vuip
macro_line|#undef vuip
DECL|macro|__IO_PREFIX
macro_line|#undef __IO_PREFIX
DECL|macro|__IO_PREFIX
mdefine_line|#define __IO_PREFIX&t;&t;jensen
DECL|macro|jensen_trivial_rw_bw
mdefine_line|#define jensen_trivial_rw_bw&t;0
DECL|macro|jensen_trivial_rw_lq
mdefine_line|#define jensen_trivial_rw_lq&t;0
DECL|macro|jensen_trivial_io_bw
mdefine_line|#define jensen_trivial_io_bw&t;0
DECL|macro|jensen_trivial_io_lq
mdefine_line|#define jensen_trivial_io_lq&t;0
DECL|macro|jensen_trivial_iounmap
mdefine_line|#define jensen_trivial_iounmap&t;1
macro_line|#include &lt;asm/io_trivial.h&gt;
macro_line|#ifdef __IO_EXTERN_INLINE
DECL|macro|__EXTERN_INLINE
macro_line|#undef __EXTERN_INLINE
DECL|macro|__IO_EXTERN_INLINE
macro_line|#undef __IO_EXTERN_INLINE
macro_line|#endif
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* __ALPHA_JENSEN_H */
eof
