multiline_comment|/* packet.h: Rx packet layout and definitions&n; *&n; * Copyright (C) 2002 Red Hat, Inc. All Rights Reserved.&n; * Written by David Howells (dhowells@redhat.com)&n; *&n; * This program is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License&n; * as published by the Free Software Foundation; either version&n; * 2 of the License, or (at your option) any later version.&n; */
macro_line|#ifndef _LINUX_RXRPC_PACKET_H
DECL|macro|_LINUX_RXRPC_PACKET_H
mdefine_line|#define _LINUX_RXRPC_PACKET_H
macro_line|#include &lt;rxrpc/types.h&gt;
DECL|macro|RXRPC_IPUDP_SIZE
mdefine_line|#define RXRPC_IPUDP_SIZE&t;&t;28
r_extern
r_int
id|RXRPC_MAX_PACKET_SIZE
suffix:semicolon
DECL|macro|RXRPC_MAX_PACKET_DATA_SIZE
mdefine_line|#define RXRPC_MAX_PACKET_DATA_SIZE&t;(RXRPC_MAX_PACKET_SIZE - sizeof(struct rxrpc_header))
DECL|macro|RXRPC_LOCAL_PACKET_SIZE
mdefine_line|#define RXRPC_LOCAL_PACKET_SIZE&t;&t;RXRPC_MAX_PACKET_SIZE
DECL|macro|RXRPC_REMOTE_PACKET_SIZE
mdefine_line|#define RXRPC_REMOTE_PACKET_SIZE&t;(576 - RXRPC_IPUDP_SIZE)
multiline_comment|/*****************************************************************************/
multiline_comment|/*&n; * on-the-wire Rx packet header&n; * - all multibyte fields should be in network byte order&n; */
DECL|struct|rxrpc_header
r_struct
id|rxrpc_header
(brace
DECL|member|epoch
id|u32
id|epoch
suffix:semicolon
multiline_comment|/* client boot timestamp */
DECL|member|cid
id|u32
id|cid
suffix:semicolon
multiline_comment|/* connection and channel ID */
DECL|macro|RXRPC_MAXCALLS
mdefine_line|#define RXRPC_MAXCALLS&t;&t;4&t;&t;&t;/* max active calls per conn */
DECL|macro|RXRPC_CHANNELMASK
mdefine_line|#define RXRPC_CHANNELMASK&t;(RXRPC_MAXCALLS-1)&t;/* mask for channel ID */
DECL|macro|RXRPC_CIDMASK
mdefine_line|#define RXRPC_CIDMASK&t;&t;(~RXRPC_CHANNELMASK)&t;/* mask for connection ID */
DECL|macro|RXRPC_CIDSHIFT
mdefine_line|#define RXRPC_CIDSHIFT&t;&t;2&t;&t;&t;/* shift for connection ID */
DECL|member|callNumber
id|u32
id|callNumber
suffix:semicolon
multiline_comment|/* call ID (0 for connection-level packets) */
DECL|macro|RXRPC_PROCESS_MAXCALLS
mdefine_line|#define RXRPC_PROCESS_MAXCALLS&t;(1&lt;&lt;2)&t;/* maximum number of active calls per conn (power of 2) */
DECL|member|seq
id|u32
id|seq
suffix:semicolon
multiline_comment|/* sequence number of pkt in call stream */
DECL|member|serial
id|u32
id|serial
suffix:semicolon
multiline_comment|/* serial number of pkt sent to network */
DECL|member|type
id|u8
id|type
suffix:semicolon
multiline_comment|/* packet type */
DECL|macro|RXRPC_PACKET_TYPE_DATA
mdefine_line|#define RXRPC_PACKET_TYPE_DATA&t;&t;1&t;/* data */
DECL|macro|RXRPC_PACKET_TYPE_ACK
mdefine_line|#define RXRPC_PACKET_TYPE_ACK&t;&t;2&t;/* ACK */
DECL|macro|RXRPC_PACKET_TYPE_BUSY
mdefine_line|#define RXRPC_PACKET_TYPE_BUSY&t;&t;3&t;/* call reject */
DECL|macro|RXRPC_PACKET_TYPE_ABORT
mdefine_line|#define RXRPC_PACKET_TYPE_ABORT&t;&t;4&t;/* call/connection abort */
DECL|macro|RXRPC_PACKET_TYPE_ACKALL
mdefine_line|#define RXRPC_PACKET_TYPE_ACKALL&t;5&t;/* ACK all outstanding packets on call */
DECL|macro|RXRPC_PACKET_TYPE_CHALLENGE
mdefine_line|#define RXRPC_PACKET_TYPE_CHALLENGE&t;6&t;/* connection security challenge (SRVR-&gt;CLNT) */
DECL|macro|RXRPC_PACKET_TYPE_RESPONSE
mdefine_line|#define RXRPC_PACKET_TYPE_RESPONSE&t;7&t;/* connection secutity response (CLNT-&gt;SRVR) */
DECL|macro|RXRPC_PACKET_TYPE_DEBUG
mdefine_line|#define RXRPC_PACKET_TYPE_DEBUG&t;&t;8&t;/* debug info request */
DECL|macro|RXRPC_N_PACKET_TYPES
mdefine_line|#define RXRPC_N_PACKET_TYPES&t;&t;9&t;/* number of packet types (incl type 0) */
DECL|member|flags
id|u8
id|flags
suffix:semicolon
multiline_comment|/* packet flags */
DECL|macro|RXRPC_CLIENT_INITIATED
mdefine_line|#define RXRPC_CLIENT_INITIATED&t;0x01&t;&t;/* signifies a packet generated by a client */
DECL|macro|RXRPC_REQUEST_ACK
mdefine_line|#define RXRPC_REQUEST_ACK&t;0x02&t;&t;/* request an unconditional ACK of this packet */
DECL|macro|RXRPC_LAST_PACKET
mdefine_line|#define RXRPC_LAST_PACKET&t;0x04&t;&t;/* the last packet from this side for this call */
DECL|macro|RXRPC_MORE_PACKETS
mdefine_line|#define RXRPC_MORE_PACKETS&t;0x08&t;&t;/* more packets to come */
DECL|macro|RXRPC_JUMBO_PACKET
mdefine_line|#define RXRPC_JUMBO_PACKET&t;0x20&t;&t;/* [DATA] this is a jumbo packet */
DECL|macro|RXRPC_SLOW_START_OK
mdefine_line|#define RXRPC_SLOW_START_OK&t;0x20&t;&t;/* [ACK] slow start supported */
DECL|member|userStatus
id|u8
id|userStatus
suffix:semicolon
multiline_comment|/* app-layer defined status */
DECL|member|securityIndex
id|u8
id|securityIndex
suffix:semicolon
multiline_comment|/* security protocol ID */
DECL|member|_rsvd
id|u16
id|_rsvd
suffix:semicolon
multiline_comment|/* reserved (used by kerberos security as cksum) */
DECL|member|serviceId
id|u16
id|serviceId
suffix:semicolon
multiline_comment|/* service ID */
)brace
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|macro|__rxrpc_header_off
mdefine_line|#define __rxrpc_header_off(X) offsetof(struct rxrpc_header,X)
r_extern
r_const
r_char
op_star
id|rxrpc_pkts
(braket
)braket
suffix:semicolon
multiline_comment|/*****************************************************************************/
multiline_comment|/*&n; * jumbo packet secondary header&n; * - can be mapped to read header by:&n; *   - new_serial = serial + 1&n; *   - new_seq = seq + 1&n; *   - new_flags = j_flags&n; *   - new__rsvd = j__rsvd&n; *   - duplicating all other fields&n; */
DECL|struct|rxrpc_jumbo_header
r_struct
id|rxrpc_jumbo_header
(brace
DECL|member|flags
id|u8
id|flags
suffix:semicolon
multiline_comment|/* packet flags (as per rxrpc_header) */
DECL|member|pad
id|u8
id|pad
suffix:semicolon
DECL|member|_rsvd
id|u16
id|_rsvd
suffix:semicolon
multiline_comment|/* reserved (used by kerberos security as cksum) */
)brace
suffix:semicolon
DECL|macro|RXRPC_JUMBO_DATALEN
mdefine_line|#define RXRPC_JUMBO_DATALEN&t;1412&t;/* non-terminal jumbo packet data length */
multiline_comment|/*****************************************************************************/
multiline_comment|/*&n; * on-the-wire Rx ACK packet data payload&n; * - all multibyte fields should be in network byte order&n; */
DECL|struct|rxrpc_ackpacket
r_struct
id|rxrpc_ackpacket
(brace
DECL|member|bufferSpace
id|u16
id|bufferSpace
suffix:semicolon
multiline_comment|/* number of packet buffers available */
DECL|member|maxSkew
id|u16
id|maxSkew
suffix:semicolon
multiline_comment|/* diff between serno being ACK&squot;d and highest serial no received */
DECL|member|firstPacket
id|u32
id|firstPacket
suffix:semicolon
multiline_comment|/* sequence no of first ACK&squot;d packet in attached list */
DECL|member|previousPacket
id|u32
id|previousPacket
suffix:semicolon
multiline_comment|/* sequence no of previous packet received */
DECL|member|serial
id|u32
id|serial
suffix:semicolon
multiline_comment|/* serial no of packet that prompted this ACK */
DECL|member|reason
id|u8
id|reason
suffix:semicolon
multiline_comment|/* reason for ACK */
DECL|macro|RXRPC_ACK_REQUESTED
mdefine_line|#define RXRPC_ACK_REQUESTED&t;&t;1&t;/* ACK was requested on packet */
DECL|macro|RXRPC_ACK_DUPLICATE
mdefine_line|#define RXRPC_ACK_DUPLICATE&t;&t;2&t;/* duplicate packet received */
DECL|macro|RXRPC_ACK_OUT_OF_SEQUENCE
mdefine_line|#define RXRPC_ACK_OUT_OF_SEQUENCE&t;3&t;/* out of sequence packet received */
DECL|macro|RXRPC_ACK_EXCEEDS_WINDOW
mdefine_line|#define RXRPC_ACK_EXCEEDS_WINDOW&t;4&t;/* packet received beyond end of ACK window */
DECL|macro|RXRPC_ACK_NOSPACE
mdefine_line|#define RXRPC_ACK_NOSPACE&t;&t;5&t;/* packet discarded due to lack of buffer space */
DECL|macro|RXRPC_ACK_PING
mdefine_line|#define RXRPC_ACK_PING&t;&t;&t;6&t;/* keep alive ACK */
DECL|macro|RXRPC_ACK_PING_RESPONSE
mdefine_line|#define RXRPC_ACK_PING_RESPONSE&t;&t;7&t;/* response to RXRPC_ACK_PING */
DECL|macro|RXRPC_ACK_DELAY
mdefine_line|#define RXRPC_ACK_DELAY&t;&t;&t;8&t;/* nothing happened since received packet */
DECL|macro|RXRPC_ACK_IDLE
mdefine_line|#define RXRPC_ACK_IDLE&t;&t;&t;9&t;/* ACK due to fully received ACK window */
DECL|member|nAcks
id|u8
id|nAcks
suffix:semicolon
multiline_comment|/* number of ACKs */
DECL|macro|RXRPC_MAXACKS
mdefine_line|#define RXRPC_MAXACKS&t;255
DECL|member|acks
id|u8
id|acks
(braket
l_int|0
)braket
suffix:semicolon
multiline_comment|/* list of ACK/NAKs */
DECL|macro|RXRPC_ACK_TYPE_NACK
mdefine_line|#define RXRPC_ACK_TYPE_NACK&t;&t;0
DECL|macro|RXRPC_ACK_TYPE_ACK
mdefine_line|#define RXRPC_ACK_TYPE_ACK&t;&t;1
)brace
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
r_extern
r_const
r_char
op_star
id|rxrpc_acks
(braket
)braket
suffix:semicolon
macro_line|#endif /* _LINUX_RXRPC_PACKET_H */
eof
