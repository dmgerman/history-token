macro_line|#include &lt;linux/spinlock.h&gt;
id|u32
id|scx200_gpio_configure
c_func
(paren
r_int
id|index
comma
id|u32
id|set
comma
id|u32
id|clear
)paren
suffix:semicolon
r_extern
r_int
id|scx200_gpio_base
suffix:semicolon
r_extern
r_int
id|scx200_gpio_shadow
(braket
l_int|2
)braket
suffix:semicolon
DECL|macro|scx200_gpio_present
mdefine_line|#define scx200_gpio_present() (scx200_gpio_base!=0)
multiline_comment|/* Definitions to make sure I do the same thing in all functions */
DECL|macro|__SCx200_GPIO_BANK
mdefine_line|#define __SCx200_GPIO_BANK unsigned bank = index&gt;&gt;5
DECL|macro|__SCx200_GPIO_IOADDR
mdefine_line|#define __SCx200_GPIO_IOADDR unsigned short ioaddr = scx200_gpio_base+0x10*bank
DECL|macro|__SCx200_GPIO_SHADOW
mdefine_line|#define __SCx200_GPIO_SHADOW long *shadow = scx200_gpio_shadow+bank
DECL|macro|__SCx200_GPIO_INDEX
mdefine_line|#define __SCx200_GPIO_INDEX index &amp;= 31
DECL|macro|__SCx200_GPIO_OUT
mdefine_line|#define __SCx200_GPIO_OUT __asm__ __volatile__(&quot;outsl&quot;:&quot;=mS&quot; (shadow):&quot;d&quot; (ioaddr), &quot;0&quot; (shadow))
multiline_comment|/* returns the value of the GPIO pin */
DECL|function|scx200_gpio_get
r_static
r_inline
r_int
id|scx200_gpio_get
c_func
(paren
r_int
id|index
)paren
(brace
id|__SCx200_GPIO_BANK
suffix:semicolon
id|__SCx200_GPIO_IOADDR
op_plus
l_int|0x04
suffix:semicolon
id|__SCx200_GPIO_INDEX
suffix:semicolon
r_return
(paren
id|inl
c_func
(paren
id|ioaddr
)paren
op_amp
(paren
l_int|1
op_lshift
id|index
)paren
)paren
ques
c_cond
l_int|1
suffix:colon
l_int|0
suffix:semicolon
)brace
multiline_comment|/* return the value driven on the GPIO signal (the value that will be&n;   driven if the GPIO is configured as an output, it might not be the&n;   state of the GPIO right now if the GPIO is configured as an input) */
DECL|function|scx200_gpio_current
r_static
r_inline
r_int
id|scx200_gpio_current
c_func
(paren
r_int
id|index
)paren
(brace
id|__SCx200_GPIO_BANK
suffix:semicolon
id|__SCx200_GPIO_INDEX
suffix:semicolon
r_return
(paren
id|scx200_gpio_shadow
(braket
id|bank
)braket
op_amp
(paren
l_int|1
op_lshift
id|index
)paren
)paren
ques
c_cond
l_int|1
suffix:colon
l_int|0
suffix:semicolon
)brace
multiline_comment|/* drive the GPIO signal high */
DECL|function|scx200_gpio_set_high
r_static
r_inline
r_void
id|scx200_gpio_set_high
c_func
(paren
r_int
id|index
)paren
(brace
id|__SCx200_GPIO_BANK
suffix:semicolon
id|__SCx200_GPIO_IOADDR
suffix:semicolon
id|__SCx200_GPIO_SHADOW
suffix:semicolon
id|__SCx200_GPIO_INDEX
suffix:semicolon
id|set_bit
c_func
(paren
id|index
comma
id|shadow
)paren
suffix:semicolon
id|__SCx200_GPIO_OUT
suffix:semicolon
)brace
multiline_comment|/* drive the GPIO signal low */
DECL|function|scx200_gpio_set_low
r_static
r_inline
r_void
id|scx200_gpio_set_low
c_func
(paren
r_int
id|index
)paren
(brace
id|__SCx200_GPIO_BANK
suffix:semicolon
id|__SCx200_GPIO_IOADDR
suffix:semicolon
id|__SCx200_GPIO_SHADOW
suffix:semicolon
id|__SCx200_GPIO_INDEX
suffix:semicolon
id|clear_bit
c_func
(paren
id|index
comma
id|shadow
)paren
suffix:semicolon
id|__SCx200_GPIO_OUT
suffix:semicolon
)brace
multiline_comment|/* drive the GPIO signal to state */
DECL|function|scx200_gpio_set
r_static
r_inline
r_void
id|scx200_gpio_set
c_func
(paren
r_int
id|index
comma
r_int
id|state
)paren
(brace
id|__SCx200_GPIO_BANK
suffix:semicolon
id|__SCx200_GPIO_IOADDR
suffix:semicolon
id|__SCx200_GPIO_SHADOW
suffix:semicolon
id|__SCx200_GPIO_INDEX
suffix:semicolon
r_if
c_cond
(paren
id|state
)paren
id|set_bit
c_func
(paren
id|index
comma
id|shadow
)paren
suffix:semicolon
r_else
id|clear_bit
c_func
(paren
id|index
comma
id|shadow
)paren
suffix:semicolon
id|__SCx200_GPIO_OUT
suffix:semicolon
)brace
multiline_comment|/* toggle the GPIO signal */
DECL|function|scx200_gpio_change
r_static
r_inline
r_void
id|scx200_gpio_change
c_func
(paren
r_int
id|index
)paren
(brace
id|__SCx200_GPIO_BANK
suffix:semicolon
id|__SCx200_GPIO_IOADDR
suffix:semicolon
id|__SCx200_GPIO_SHADOW
suffix:semicolon
id|__SCx200_GPIO_INDEX
suffix:semicolon
id|change_bit
c_func
(paren
id|index
comma
id|shadow
)paren
suffix:semicolon
id|__SCx200_GPIO_OUT
suffix:semicolon
)brace
DECL|macro|__SCx200_GPIO_BANK
macro_line|#undef __SCx200_GPIO_BANK
DECL|macro|__SCx200_GPIO_IOADDR
macro_line|#undef __SCx200_GPIO_IOADDR
DECL|macro|__SCx200_GPIO_SHADOW
macro_line|#undef __SCx200_GPIO_SHADOW
DECL|macro|__SCx200_GPIO_INDEX
macro_line|#undef __SCx200_GPIO_INDEX
DECL|macro|__SCx200_GPIO_OUT
macro_line|#undef __SCx200_GPIO_OUT
multiline_comment|/*&n;    Local variables:&n;        compile-command: &quot;make -C ../.. bzImage modules&quot;&n;        c-basic-offset: 8&n;    End:&n;*/
eof
