multiline_comment|/*&n;    i2c-vid.h - Part of lm_sensors, Linux kernel modules for hardware&n;                monitoring&n;    Copyright (c) 2002 Mark D. Studebaker &lt;mdsxyz123@yahoo.com&gt;&n;    With assistance from Trent Piepho &lt;xyzzy@speakeasy.org&gt;&n;&n;    This program is free software; you can redistribute it and/or modify&n;    it under the terms of the GNU General Public License as published by&n;    the Free Software Foundation; either version 2 of the License, or&n;    (at your option) any later version.&n;&n;    This program is distributed in the hope that it will be useful,&n;    but WITHOUT ANY WARRANTY; without even the implied warranty of&n;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n;    GNU General Public License for more details.&n;&n;    You should have received a copy of the GNU General Public License&n;    along with this program; if not, write to the Free Software&n;    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.&n;*/
multiline_comment|/*&n;    This file contains common code for decoding VID pins.&n;    This file is #included in various chip drivers in this directory.&n;    As the user is unlikely to load more than one driver which&n;    includes this code we don&squot;t worry about the wasted space.&n;    Reference: VRM x.y DC-DC Converter Design Guidelines,&n;    available at http://developer.intel.com&n;*/
multiline_comment|/*&n;    AMD Opteron processors don&squot;t follow the Intel VRM spec.&n;    I&squot;m going to &quot;make up&quot; 2.4 as the VRM spec for the Opterons.&n;    No good reason just a mnemonic for the 24x Opteron processor&n;    series&n;&n;    Opteron VID encoding is:&n;&n;       00000  =  1.550 V&n;       00001  =  1.525 V&n;        . . . .&n;       11110  =  0.800 V&n;       11111  =  0.000 V (off)&n; */
multiline_comment|/*&n;    Legal val values 0x00 - 0x1f; except for VRD 10.0, 0x00 - 0x3f.&n;    vrm is the Intel VRM document version.&n;    Note: vrm version is scaled by 10 and the return value is scaled by 1000&n;    to avoid floating point in the kernel.&n;*/
r_int
id|i2c_which_vrm
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|macro|DEFAULT_VRM
mdefine_line|#define DEFAULT_VRM&t;82
DECL|function|vid_from_reg
r_static
r_inline
r_int
id|vid_from_reg
c_func
(paren
r_int
id|val
comma
r_int
id|vrm
)paren
(brace
r_int
id|vid
suffix:semicolon
r_switch
c_cond
(paren
id|vrm
)paren
(brace
r_case
l_int|0
suffix:colon
r_return
l_int|0
suffix:semicolon
r_case
l_int|100
suffix:colon
multiline_comment|/* VRD 10.0 */
r_if
c_cond
(paren
(paren
id|val
op_amp
l_int|0x1f
)paren
op_eq
l_int|0x1f
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
r_if
c_cond
(paren
(paren
id|val
op_amp
l_int|0x1f
)paren
op_le
l_int|0x09
op_logical_or
id|val
op_eq
l_int|0x0a
)paren
(brace
id|vid
op_assign
l_int|10875
op_minus
(paren
id|val
op_amp
l_int|0x1f
)paren
op_star
l_int|250
suffix:semicolon
)brace
r_else
id|vid
op_assign
l_int|18625
op_minus
(paren
id|val
op_amp
l_int|0x1f
)paren
op_star
l_int|250
suffix:semicolon
r_if
c_cond
(paren
id|val
op_amp
l_int|0x20
)paren
(brace
id|vid
op_sub_assign
l_int|125
suffix:semicolon
)brace
id|vid
op_div_assign
l_int|10
suffix:semicolon
multiline_comment|/* only return 3 dec. places for now */
r_return
id|vid
suffix:semicolon
r_case
l_int|24
suffix:colon
multiline_comment|/* Opteron processor */
r_return
id|val
op_eq
l_int|0x1f
ques
c_cond
l_int|0
suffix:colon
l_int|1550
op_minus
id|val
op_star
l_int|25
suffix:semicolon
r_case
l_int|91
suffix:colon
multiline_comment|/* VRM 9.1 */
r_case
l_int|90
suffix:colon
multiline_comment|/* VRM 9.0 */
r_return
id|val
op_eq
l_int|0x1f
ques
c_cond
l_int|0
suffix:colon
l_int|1850
op_minus
id|val
op_star
l_int|25
suffix:semicolon
r_case
l_int|85
suffix:colon
multiline_comment|/* VRM 8.5 */
r_return
(paren
id|val
op_amp
l_int|0x10
ques
c_cond
l_int|25
suffix:colon
l_int|0
)paren
op_plus
(paren
(paren
id|val
op_amp
l_int|0x0f
)paren
OG
l_int|0x04
ques
c_cond
l_int|2050
suffix:colon
l_int|1250
)paren
op_minus
(paren
(paren
id|val
op_amp
l_int|0x0f
)paren
op_star
l_int|50
)paren
suffix:semicolon
r_case
l_int|84
suffix:colon
multiline_comment|/* VRM 8.4 */
id|val
op_and_assign
l_int|0x0f
suffix:semicolon
multiline_comment|/* fall through */
r_default
suffix:colon
multiline_comment|/* VRM 8.2 */
r_return
id|val
op_eq
l_int|0x1f
ques
c_cond
l_int|0
suffix:colon
id|val
op_amp
l_int|0x10
ques
c_cond
l_int|5100
op_minus
(paren
id|val
)paren
op_star
l_int|100
suffix:colon
l_int|2050
op_minus
(paren
id|val
)paren
op_star
l_int|50
suffix:semicolon
)brace
)brace
eof
