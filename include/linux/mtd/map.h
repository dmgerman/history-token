multiline_comment|/* Overhauled routines for dealing with different mmap regions of flash */
multiline_comment|/* $Id: map.h,v 1.34 2003/05/28 12:42:22 dwmw2 Exp $ */
macro_line|#ifndef __LINUX_MTD_MAP_H__
DECL|macro|__LINUX_MTD_MAP_H__
mdefine_line|#define __LINUX_MTD_MAP_H__
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/list.h&gt;
macro_line|#include &lt;asm/system.h&gt;
macro_line|#include &lt;asm/io.h&gt;
multiline_comment|/* The map stuff is very simple. You fill in your struct map_info with&n;   a handful of routines for accessing the device, making sure they handle&n;   paging etc. correctly if your device needs it. Then you pass it off&n;   to a chip driver which deals with a mapped device - generally either&n;   do_cfi_probe() or do_ram_probe(), either of which will return a &n;   struct mtd_info if they liked what they saw. At which point, you&n;   fill in the mtd-&gt;module with your own module address, and register &n;   it.&n;   &n;   The mtd-&gt;priv field will point to the struct map_info, and any further&n;   private data required by the chip driver is linked from the &n;   mtd-&gt;priv-&gt;fldrv_priv field. This allows the map driver to get at &n;   the destructor function map-&gt;fldrv_destroy() when it&squot;s tired&n;   of living.&n;*/
DECL|struct|map_info
r_struct
id|map_info
(brace
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|size
r_int
r_int
id|size
suffix:semicolon
DECL|member|phys
r_int
r_int
id|phys
suffix:semicolon
DECL|macro|NO_XIP
mdefine_line|#define NO_XIP (-1UL)
DECL|member|virt
r_int
r_int
id|virt
suffix:semicolon
DECL|member|cached
r_void
op_star
id|cached
suffix:semicolon
DECL|member|buswidth
r_int
id|buswidth
suffix:semicolon
multiline_comment|/* in octets */
macro_line|#ifdef CONFIG_MTD_COMPLEX_MAPPINGS
DECL|member|read8
id|u8
(paren
op_star
id|read8
)paren
(paren
r_struct
id|map_info
op_star
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|read16
id|u16
(paren
op_star
id|read16
)paren
(paren
r_struct
id|map_info
op_star
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|read32
id|u32
(paren
op_star
id|read32
)paren
(paren
r_struct
id|map_info
op_star
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|read64
id|u64
(paren
op_star
id|read64
)paren
(paren
r_struct
id|map_info
op_star
comma
r_int
r_int
)paren
suffix:semicolon
multiline_comment|/* If it returned a &squot;long&squot; I&squot;d call it readl.&n;&t; * It doesn&squot;t.&n;&t; * I won&squot;t.&n;&t; * dwmw2 */
DECL|member|copy_from
r_void
(paren
op_star
id|copy_from
)paren
(paren
r_struct
id|map_info
op_star
comma
r_void
op_star
comma
r_int
r_int
comma
id|ssize_t
)paren
suffix:semicolon
DECL|member|write8
r_void
(paren
op_star
id|write8
)paren
(paren
r_struct
id|map_info
op_star
comma
id|u8
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|write16
r_void
(paren
op_star
id|write16
)paren
(paren
r_struct
id|map_info
op_star
comma
id|u16
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|write32
r_void
(paren
op_star
id|write32
)paren
(paren
r_struct
id|map_info
op_star
comma
id|u32
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|write64
r_void
(paren
op_star
id|write64
)paren
(paren
r_struct
id|map_info
op_star
comma
id|u64
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|copy_to
r_void
(paren
op_star
id|copy_to
)paren
(paren
r_struct
id|map_info
op_star
comma
r_int
r_int
comma
r_const
r_void
op_star
comma
id|ssize_t
)paren
suffix:semicolon
multiline_comment|/* We can perhaps put in &squot;point&squot; and &squot;unpoint&squot; methods, if we really&n;&t;   want to enable XIP for non-linear mappings. Not yet though. */
macro_line|#endif
multiline_comment|/* set_vpp() must handle being reentered -- enable, enable, disable &n;&t;   must leave it enabled. */
DECL|member|set_vpp
r_void
(paren
op_star
id|set_vpp
)paren
(paren
r_struct
id|map_info
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|map_priv_1
r_int
r_int
id|map_priv_1
suffix:semicolon
DECL|member|map_priv_2
r_int
r_int
id|map_priv_2
suffix:semicolon
DECL|member|fldrv_priv
r_void
op_star
id|fldrv_priv
suffix:semicolon
DECL|member|fldrv
r_struct
id|mtd_chip_driver
op_star
id|fldrv
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|mtd_chip_driver
r_struct
id|mtd_chip_driver
(brace
DECL|member|probe
r_struct
id|mtd_info
op_star
(paren
op_star
id|probe
)paren
(paren
r_struct
id|map_info
op_star
id|map
)paren
suffix:semicolon
DECL|member|destroy
r_void
(paren
op_star
id|destroy
)paren
(paren
r_struct
id|mtd_info
op_star
)paren
suffix:semicolon
DECL|member|module
r_struct
id|module
op_star
id|module
suffix:semicolon
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|list
r_struct
id|list_head
id|list
suffix:semicolon
)brace
suffix:semicolon
r_void
id|register_mtd_chip_driver
c_func
(paren
r_struct
id|mtd_chip_driver
op_star
)paren
suffix:semicolon
r_void
id|unregister_mtd_chip_driver
c_func
(paren
r_struct
id|mtd_chip_driver
op_star
)paren
suffix:semicolon
r_struct
id|mtd_info
op_star
id|do_map_probe
c_func
(paren
r_const
r_char
op_star
id|name
comma
r_struct
id|map_info
op_star
id|map
)paren
suffix:semicolon
r_void
id|map_destroy
c_func
(paren
r_struct
id|mtd_info
op_star
id|mtd
)paren
suffix:semicolon
DECL|macro|ENABLE_VPP
mdefine_line|#define ENABLE_VPP(map) do { if(map-&gt;set_vpp) map-&gt;set_vpp(map, 1); } while(0)
DECL|macro|DISABLE_VPP
mdefine_line|#define DISABLE_VPP(map) do { if(map-&gt;set_vpp) map-&gt;set_vpp(map, 0); } while(0)
macro_line|#ifdef CONFIG_MTD_COMPLEX_MAPPINGS
DECL|macro|map_read8
mdefine_line|#define map_read8(map, ofs) (map)-&gt;read8(map, ofs)
DECL|macro|map_read16
mdefine_line|#define map_read16(map, ofs) (map)-&gt;read16(map, ofs)
DECL|macro|map_read32
mdefine_line|#define map_read32(map, ofs) (map)-&gt;read32(map, ofs)
DECL|macro|map_read64
mdefine_line|#define map_read64(map, ofs) (map)-&gt;read64(map, ofs)
DECL|macro|map_copy_from
mdefine_line|#define map_copy_from(map, to, from, len) (map)-&gt;copy_from(map, to, from, len)
DECL|macro|map_write8
mdefine_line|#define map_write8(map, datum, ofs) (map)-&gt;write8(map, datum, ofs)
DECL|macro|map_write16
mdefine_line|#define map_write16(map, datum, ofs) (map)-&gt;write16(map, datum, ofs)
DECL|macro|map_write32
mdefine_line|#define map_write32(map, datum, ofs) (map)-&gt;write32(map, datum, ofs)
DECL|macro|map_write64
mdefine_line|#define map_write64(map, datum, ofs) (map)-&gt;write64(map, datum, ofs)
DECL|macro|map_copy_to
mdefine_line|#define map_copy_to(map, to, from, len) (map)-&gt;copy_to(map, to, from, len)
r_extern
r_void
id|simple_map_init
c_func
(paren
r_struct
id|map_info
op_star
)paren
suffix:semicolon
DECL|macro|map_is_linear
mdefine_line|#define map_is_linear(map) (map-&gt;phys != NO_XIP)
macro_line|#else
DECL|function|map_read8
r_static
r_inline
id|u8
id|map_read8
c_func
(paren
r_struct
id|map_info
op_star
id|map
comma
r_int
r_int
id|ofs
)paren
(brace
r_return
id|__raw_readb
c_func
(paren
id|map-&gt;virt
op_plus
id|ofs
)paren
suffix:semicolon
)brace
DECL|function|map_read16
r_static
r_inline
id|u16
id|map_read16
c_func
(paren
r_struct
id|map_info
op_star
id|map
comma
r_int
r_int
id|ofs
)paren
(brace
r_return
id|__raw_readw
c_func
(paren
id|map-&gt;virt
op_plus
id|ofs
)paren
suffix:semicolon
)brace
DECL|function|map_read32
r_static
r_inline
id|u32
id|map_read32
c_func
(paren
r_struct
id|map_info
op_star
id|map
comma
r_int
r_int
id|ofs
)paren
(brace
r_return
id|__raw_readl
c_func
(paren
id|map-&gt;virt
op_plus
id|ofs
)paren
suffix:semicolon
)brace
DECL|function|map_read64
r_static
r_inline
id|u64
id|map_read64
c_func
(paren
r_struct
id|map_info
op_star
id|map
comma
r_int
r_int
id|ofs
)paren
(brace
macro_line|#ifndef CONFIG_MTD_CFI_B8 /* 64-bit mappings */
id|BUG
c_func
(paren
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
macro_line|#else
r_return
id|__raw_readll
c_func
(paren
id|map-&gt;virt
op_plus
id|ofs
)paren
suffix:semicolon
macro_line|#endif
)brace
DECL|function|map_write8
r_static
r_inline
r_void
id|map_write8
c_func
(paren
r_struct
id|map_info
op_star
id|map
comma
id|u8
id|datum
comma
r_int
r_int
id|ofs
)paren
(brace
id|__raw_writeb
c_func
(paren
id|datum
comma
id|map-&gt;virt
op_plus
id|ofs
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|map_write16
r_static
r_inline
r_void
id|map_write16
c_func
(paren
r_struct
id|map_info
op_star
id|map
comma
id|u16
id|datum
comma
r_int
r_int
id|ofs
)paren
(brace
id|__raw_writew
c_func
(paren
id|datum
comma
id|map-&gt;virt
op_plus
id|ofs
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|map_write32
r_static
r_inline
r_void
id|map_write32
c_func
(paren
r_struct
id|map_info
op_star
id|map
comma
id|u32
id|datum
comma
r_int
r_int
id|ofs
)paren
(brace
id|__raw_writel
c_func
(paren
id|datum
comma
id|map-&gt;virt
op_plus
id|ofs
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|map_write64
r_static
r_inline
r_void
id|map_write64
c_func
(paren
r_struct
id|map_info
op_star
id|map
comma
id|u64
id|datum
comma
r_int
r_int
id|ofs
)paren
(brace
macro_line|#ifndef CONFIG_MTD_CFI_B8 /* 64-bit mappings */
id|BUG
c_func
(paren
)paren
suffix:semicolon
macro_line|#else
id|__raw_writell
c_func
(paren
id|datum
comma
id|map-&gt;virt
op_plus
id|ofs
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif /* CFI_B8 */
)brace
DECL|function|map_copy_from
r_static
r_inline
r_void
id|map_copy_from
c_func
(paren
r_struct
id|map_info
op_star
id|map
comma
r_void
op_star
id|to
comma
r_int
r_int
id|from
comma
id|ssize_t
id|len
)paren
(brace
id|memcpy_fromio
c_func
(paren
id|to
comma
id|map-&gt;virt
op_plus
id|from
comma
id|len
)paren
suffix:semicolon
)brace
DECL|function|map_copy_to
r_static
r_inline
r_void
id|map_copy_to
c_func
(paren
r_struct
id|map_info
op_star
id|map
comma
r_int
r_int
id|to
comma
r_const
r_void
op_star
id|from
comma
id|ssize_t
id|len
)paren
(brace
id|memcpy_toio
c_func
(paren
id|map-&gt;virt
op_plus
id|to
comma
id|from
comma
id|len
)paren
suffix:semicolon
)brace
DECL|macro|simple_map_init
mdefine_line|#define simple_map_init(map) do { } while (0)
DECL|macro|map_is_linear
mdefine_line|#define map_is_linear(map) (1)
macro_line|#endif /* !CONFIG_MTD_COMPLEX_MAPPINGS */
macro_line|#endif /* __LINUX_MTD_MAP_H__ */
eof
