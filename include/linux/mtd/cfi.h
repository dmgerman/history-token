multiline_comment|/* Common Flash Interface structures &n; * See http://support.intel.com/design/flash/technote/index.htm&n; * $Id: cfi.h,v 1.48 2004/10/20 23:08:05 dwmw2 Exp $&n; */
macro_line|#ifndef __MTD_CFI_H__
DECL|macro|__MTD_CFI_H__
mdefine_line|#define __MTD_CFI_H__
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/version.h&gt;
macro_line|#include &lt;linux/delay.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/interrupt.h&gt;
macro_line|#include &lt;linux/mtd/flashchip.h&gt;
macro_line|#include &lt;linux/mtd/map.h&gt;
macro_line|#include &lt;linux/mtd/cfi_endian.h&gt;
macro_line|#ifdef CONFIG_MTD_CFI_I1
DECL|macro|cfi_interleave
mdefine_line|#define cfi_interleave(cfi) 1
DECL|macro|cfi_interleave_is_1
mdefine_line|#define cfi_interleave_is_1(cfi) (cfi_interleave(cfi) == 1)
macro_line|#else
DECL|macro|cfi_interleave_is_1
mdefine_line|#define cfi_interleave_is_1(cfi) (0)
macro_line|#endif
macro_line|#ifdef CONFIG_MTD_CFI_I2
macro_line|# ifdef cfi_interleave
DECL|macro|cfi_interleave
macro_line|#  undef cfi_interleave
DECL|macro|cfi_interleave
macro_line|#  define cfi_interleave(cfi) ((cfi)-&gt;interleave)
macro_line|# else
DECL|macro|cfi_interleave
macro_line|#  define cfi_interleave(cfi) 2
macro_line|# endif
DECL|macro|cfi_interleave_is_2
mdefine_line|#define cfi_interleave_is_2(cfi) (cfi_interleave(cfi) == 2)
macro_line|#else
DECL|macro|cfi_interleave_is_2
mdefine_line|#define cfi_interleave_is_2(cfi) (0)
macro_line|#endif
macro_line|#ifdef CONFIG_MTD_CFI_I4
macro_line|# ifdef cfi_interleave
DECL|macro|cfi_interleave
macro_line|#  undef cfi_interleave
DECL|macro|cfi_interleave
macro_line|#  define cfi_interleave(cfi) ((cfi)-&gt;interleave)
macro_line|# else
DECL|macro|cfi_interleave
macro_line|#  define cfi_interleave(cfi) 4
macro_line|# endif
DECL|macro|cfi_interleave_is_4
mdefine_line|#define cfi_interleave_is_4(cfi) (cfi_interleave(cfi) == 4)
macro_line|#else
DECL|macro|cfi_interleave_is_4
mdefine_line|#define cfi_interleave_is_4(cfi) (0)
macro_line|#endif
macro_line|#ifdef CONFIG_MTD_CFI_I8
macro_line|# ifdef cfi_interleave
DECL|macro|cfi_interleave
macro_line|#  undef cfi_interleave
DECL|macro|cfi_interleave
macro_line|#  define cfi_interleave(cfi) ((cfi)-&gt;interleave)
macro_line|# else
DECL|macro|cfi_interleave
macro_line|#  define cfi_interleave(cfi) 8
macro_line|# endif
DECL|macro|cfi_interleave_is_8
mdefine_line|#define cfi_interleave_is_8(cfi) (cfi_interleave(cfi) == 8)
macro_line|#else
DECL|macro|cfi_interleave_is_8
mdefine_line|#define cfi_interleave_is_8(cfi) (0)
macro_line|#endif
DECL|function|cfi_interleave_supported
r_static
r_inline
r_int
id|cfi_interleave_supported
c_func
(paren
r_int
id|i
)paren
(brace
r_switch
c_cond
(paren
id|i
)paren
(brace
macro_line|#ifdef CONFIG_MTD_CFI_I1
r_case
l_int|1
suffix:colon
macro_line|#endif
macro_line|#ifdef CONFIG_MTD_CFI_I2
r_case
l_int|2
suffix:colon
macro_line|#endif
macro_line|#ifdef CONFIG_MTD_CFI_I4
r_case
l_int|4
suffix:colon
macro_line|#endif
macro_line|#ifdef CONFIG_MTD_CFI_I8
r_case
l_int|8
suffix:colon
macro_line|#endif
r_return
l_int|1
suffix:semicolon
r_default
suffix:colon
r_return
l_int|0
suffix:semicolon
)brace
)brace
multiline_comment|/* NB: these values must represents the number of bytes needed to meet the &n; *     device type (x8, x16, x32).  Eg. a 32 bit device is 4 x 8 bytes. &n; *     These numbers are used in calculations.&n; */
DECL|macro|CFI_DEVICETYPE_X8
mdefine_line|#define CFI_DEVICETYPE_X8  (8 / 8)
DECL|macro|CFI_DEVICETYPE_X16
mdefine_line|#define CFI_DEVICETYPE_X16 (16 / 8)
DECL|macro|CFI_DEVICETYPE_X32
mdefine_line|#define CFI_DEVICETYPE_X32 (32 / 8)
DECL|macro|CFI_DEVICETYPE_X64
mdefine_line|#define CFI_DEVICETYPE_X64 (64 / 8)
multiline_comment|/* NB: We keep these structures in memory in HOST byteorder, except&n; * where individually noted.&n; */
multiline_comment|/* Basic Query Structure */
DECL|struct|cfi_ident
r_struct
id|cfi_ident
(brace
DECL|member|qry
r_uint8
id|qry
(braket
l_int|3
)braket
suffix:semicolon
DECL|member|P_ID
r_uint16
id|P_ID
suffix:semicolon
DECL|member|P_ADR
r_uint16
id|P_ADR
suffix:semicolon
DECL|member|A_ID
r_uint16
id|A_ID
suffix:semicolon
DECL|member|A_ADR
r_uint16
id|A_ADR
suffix:semicolon
DECL|member|VccMin
r_uint8
id|VccMin
suffix:semicolon
DECL|member|VccMax
r_uint8
id|VccMax
suffix:semicolon
DECL|member|VppMin
r_uint8
id|VppMin
suffix:semicolon
DECL|member|VppMax
r_uint8
id|VppMax
suffix:semicolon
DECL|member|WordWriteTimeoutTyp
r_uint8
id|WordWriteTimeoutTyp
suffix:semicolon
DECL|member|BufWriteTimeoutTyp
r_uint8
id|BufWriteTimeoutTyp
suffix:semicolon
DECL|member|BlockEraseTimeoutTyp
r_uint8
id|BlockEraseTimeoutTyp
suffix:semicolon
DECL|member|ChipEraseTimeoutTyp
r_uint8
id|ChipEraseTimeoutTyp
suffix:semicolon
DECL|member|WordWriteTimeoutMax
r_uint8
id|WordWriteTimeoutMax
suffix:semicolon
DECL|member|BufWriteTimeoutMax
r_uint8
id|BufWriteTimeoutMax
suffix:semicolon
DECL|member|BlockEraseTimeoutMax
r_uint8
id|BlockEraseTimeoutMax
suffix:semicolon
DECL|member|ChipEraseTimeoutMax
r_uint8
id|ChipEraseTimeoutMax
suffix:semicolon
DECL|member|DevSize
r_uint8
id|DevSize
suffix:semicolon
DECL|member|InterfaceDesc
r_uint16
id|InterfaceDesc
suffix:semicolon
DECL|member|MaxBufWriteSize
r_uint16
id|MaxBufWriteSize
suffix:semicolon
DECL|member|NumEraseRegions
r_uint8
id|NumEraseRegions
suffix:semicolon
DECL|member|EraseRegionInfo
r_uint32
id|EraseRegionInfo
(braket
l_int|0
)braket
suffix:semicolon
multiline_comment|/* Not host ordered */
)brace
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* Extended Query Structure for both PRI and ALT */
DECL|struct|cfi_extquery
r_struct
id|cfi_extquery
(brace
DECL|member|pri
r_uint8
id|pri
(braket
l_int|3
)braket
suffix:semicolon
DECL|member|MajorVersion
r_uint8
id|MajorVersion
suffix:semicolon
DECL|member|MinorVersion
r_uint8
id|MinorVersion
suffix:semicolon
)brace
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* Vendor-Specific PRI for Intel/Sharp Extended Command Set (0x0001) */
DECL|struct|cfi_pri_intelext
r_struct
id|cfi_pri_intelext
(brace
DECL|member|pri
r_uint8
id|pri
(braket
l_int|3
)braket
suffix:semicolon
DECL|member|MajorVersion
r_uint8
id|MajorVersion
suffix:semicolon
DECL|member|MinorVersion
r_uint8
id|MinorVersion
suffix:semicolon
DECL|member|FeatureSupport
r_uint32
id|FeatureSupport
suffix:semicolon
multiline_comment|/* if bit 31 is set then an additional uint32_t feature&n;&t;&t;&t;&t;    block follows - FIXME - not currently supported */
DECL|member|SuspendCmdSupport
r_uint8
id|SuspendCmdSupport
suffix:semicolon
DECL|member|BlkStatusRegMask
r_uint16
id|BlkStatusRegMask
suffix:semicolon
DECL|member|VccOptimal
r_uint8
id|VccOptimal
suffix:semicolon
DECL|member|VppOptimal
r_uint8
id|VppOptimal
suffix:semicolon
DECL|member|NumProtectionFields
r_uint8
id|NumProtectionFields
suffix:semicolon
DECL|member|ProtRegAddr
r_uint16
id|ProtRegAddr
suffix:semicolon
DECL|member|FactProtRegSize
r_uint8
id|FactProtRegSize
suffix:semicolon
DECL|member|UserProtRegSize
r_uint8
id|UserProtRegSize
suffix:semicolon
)brace
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* Vendor-Specific PRI for AMD/Fujitsu Extended Command Set (0x0002) */
DECL|struct|cfi_pri_amdstd
r_struct
id|cfi_pri_amdstd
(brace
DECL|member|pri
r_uint8
id|pri
(braket
l_int|3
)braket
suffix:semicolon
DECL|member|MajorVersion
r_uint8
id|MajorVersion
suffix:semicolon
DECL|member|MinorVersion
r_uint8
id|MinorVersion
suffix:semicolon
DECL|member|SiliconRevision
r_uint8
id|SiliconRevision
suffix:semicolon
multiline_comment|/* bits 1-0: Address Sensitive Unlock */
DECL|member|EraseSuspend
r_uint8
id|EraseSuspend
suffix:semicolon
DECL|member|BlkProt
r_uint8
id|BlkProt
suffix:semicolon
DECL|member|TmpBlkUnprotect
r_uint8
id|TmpBlkUnprotect
suffix:semicolon
DECL|member|BlkProtUnprot
r_uint8
id|BlkProtUnprot
suffix:semicolon
DECL|member|SimultaneousOps
r_uint8
id|SimultaneousOps
suffix:semicolon
DECL|member|BurstMode
r_uint8
id|BurstMode
suffix:semicolon
DECL|member|PageMode
r_uint8
id|PageMode
suffix:semicolon
DECL|member|VppMin
r_uint8
id|VppMin
suffix:semicolon
DECL|member|VppMax
r_uint8
id|VppMax
suffix:semicolon
DECL|member|TopBottom
r_uint8
id|TopBottom
suffix:semicolon
)brace
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|struct|cfi_pri_query
r_struct
id|cfi_pri_query
(brace
DECL|member|NumFields
r_uint8
id|NumFields
suffix:semicolon
DECL|member|ProtField
r_uint32
id|ProtField
(braket
l_int|1
)braket
suffix:semicolon
multiline_comment|/* Not host ordered */
)brace
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|struct|cfi_bri_query
r_struct
id|cfi_bri_query
(brace
DECL|member|PageModeReadCap
r_uint8
id|PageModeReadCap
suffix:semicolon
DECL|member|NumFields
r_uint8
id|NumFields
suffix:semicolon
DECL|member|ConfField
r_uint32
id|ConfField
(braket
l_int|1
)braket
suffix:semicolon
multiline_comment|/* Not host ordered */
)brace
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|macro|P_ID_NONE
mdefine_line|#define P_ID_NONE               0x0000
DECL|macro|P_ID_INTEL_EXT
mdefine_line|#define P_ID_INTEL_EXT          0x0001
DECL|macro|P_ID_AMD_STD
mdefine_line|#define P_ID_AMD_STD            0x0002
DECL|macro|P_ID_INTEL_STD
mdefine_line|#define P_ID_INTEL_STD          0x0003
DECL|macro|P_ID_AMD_EXT
mdefine_line|#define P_ID_AMD_EXT            0x0004
DECL|macro|P_ID_WINBOND
mdefine_line|#define P_ID_WINBOND            0x0006
DECL|macro|P_ID_ST_ADV
mdefine_line|#define P_ID_ST_ADV             0x0020
DECL|macro|P_ID_MITSUBISHI_STD
mdefine_line|#define P_ID_MITSUBISHI_STD     0x0100
DECL|macro|P_ID_MITSUBISHI_EXT
mdefine_line|#define P_ID_MITSUBISHI_EXT     0x0101
DECL|macro|P_ID_SST_PAGE
mdefine_line|#define P_ID_SST_PAGE           0x0102
DECL|macro|P_ID_INTEL_PERFORMANCE
mdefine_line|#define P_ID_INTEL_PERFORMANCE  0x0200
DECL|macro|P_ID_INTEL_DATA
mdefine_line|#define P_ID_INTEL_DATA         0x0210
DECL|macro|P_ID_RESERVED
mdefine_line|#define P_ID_RESERVED           0xffff
DECL|macro|CFI_MODE_CFI
mdefine_line|#define CFI_MODE_CFI&t;1
DECL|macro|CFI_MODE_JEDEC
mdefine_line|#define CFI_MODE_JEDEC&t;0
DECL|struct|cfi_private
r_struct
id|cfi_private
(brace
DECL|member|cmdset
r_uint16
id|cmdset
suffix:semicolon
DECL|member|cmdset_priv
r_void
op_star
id|cmdset_priv
suffix:semicolon
DECL|member|interleave
r_int
id|interleave
suffix:semicolon
DECL|member|device_type
r_int
id|device_type
suffix:semicolon
DECL|member|cfi_mode
r_int
id|cfi_mode
suffix:semicolon
multiline_comment|/* Are we a JEDEC device pretending to be CFI? */
DECL|member|addr_unlock1
r_int
id|addr_unlock1
suffix:semicolon
DECL|member|addr_unlock2
r_int
id|addr_unlock2
suffix:semicolon
DECL|member|cmdset_setup
r_struct
id|mtd_info
op_star
(paren
op_star
id|cmdset_setup
)paren
(paren
r_struct
id|map_info
op_star
)paren
suffix:semicolon
DECL|member|cfiq
r_struct
id|cfi_ident
op_star
id|cfiq
suffix:semicolon
multiline_comment|/* For now only one. We insist that all devs&n;&t;&t;&t;&t;  must be of the same type. */
DECL|member|mfr
DECL|member|id
r_int
id|mfr
comma
id|id
suffix:semicolon
DECL|member|numchips
r_int
id|numchips
suffix:semicolon
DECL|member|chipshift
r_int
r_int
id|chipshift
suffix:semicolon
multiline_comment|/* Because they&squot;re of the same type */
DECL|member|im_name
r_const
r_char
op_star
id|im_name
suffix:semicolon
multiline_comment|/* inter_module name for cmdset_setup */
DECL|member|chips
r_struct
id|flchip
id|chips
(braket
l_int|0
)braket
suffix:semicolon
multiline_comment|/* per-chip data structure for each chip */
)brace
suffix:semicolon
multiline_comment|/*&n; * Returns the command address according to the given geometry.&n; */
DECL|function|cfi_build_cmd_addr
r_static
r_inline
r_uint32
id|cfi_build_cmd_addr
c_func
(paren
r_uint32
id|cmd_ofs
comma
r_int
id|interleave
comma
r_int
id|type
)paren
(brace
r_return
(paren
id|cmd_ofs
op_star
id|type
)paren
op_star
id|interleave
suffix:semicolon
)brace
multiline_comment|/*&n; * Transforms the CFI command for the given geometry (bus width &amp; interleave).&n; * It looks too long to be inline, but in the common case it should almost all&n; * get optimised away. &n; */
DECL|function|cfi_build_cmd
r_static
r_inline
id|map_word
id|cfi_build_cmd
c_func
(paren
id|u_char
id|cmd
comma
r_struct
id|map_info
op_star
id|map
comma
r_struct
id|cfi_private
op_star
id|cfi
)paren
(brace
id|map_word
id|val
op_assign
(brace
(brace
l_int|0
)brace
)brace
suffix:semicolon
r_int
id|wordwidth
comma
id|words_per_bus
comma
id|chip_mode
comma
id|chips_per_word
suffix:semicolon
r_int
r_int
id|onecmd
suffix:semicolon
r_int
id|i
suffix:semicolon
multiline_comment|/* We do it this way to give the compiler a fighting chance &n;&t;   of optimising away all the crap for &squot;bankwidth&squot; larger than&n;&t;   an unsigned long, in the common case where that support is&n;&t;   disabled */
r_if
c_cond
(paren
id|map_bankwidth_is_large
c_func
(paren
id|map
)paren
)paren
(brace
id|wordwidth
op_assign
r_sizeof
(paren
r_int
r_int
)paren
suffix:semicolon
id|words_per_bus
op_assign
(paren
id|map_bankwidth
c_func
(paren
id|map
)paren
)paren
op_div
id|wordwidth
suffix:semicolon
singleline_comment|// i.e. normally 1
)brace
r_else
(brace
id|wordwidth
op_assign
id|map_bankwidth
c_func
(paren
id|map
)paren
suffix:semicolon
id|words_per_bus
op_assign
l_int|1
suffix:semicolon
)brace
id|chip_mode
op_assign
id|map_bankwidth
c_func
(paren
id|map
)paren
op_div
id|cfi_interleave
c_func
(paren
id|cfi
)paren
suffix:semicolon
id|chips_per_word
op_assign
id|wordwidth
op_star
id|cfi_interleave
c_func
(paren
id|cfi
)paren
op_div
id|map_bankwidth
c_func
(paren
id|map
)paren
suffix:semicolon
multiline_comment|/* First, determine what the bit-pattern should be for a single&n;&t;   device, according to chip mode and endianness... */
r_switch
c_cond
(paren
id|chip_mode
)paren
(brace
r_default
suffix:colon
id|BUG
c_func
(paren
)paren
suffix:semicolon
r_case
l_int|1
suffix:colon
id|onecmd
op_assign
id|cmd
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|onecmd
op_assign
id|cpu_to_cfi16
c_func
(paren
id|cmd
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|4
suffix:colon
id|onecmd
op_assign
id|cpu_to_cfi32
c_func
(paren
id|cmd
)paren
suffix:semicolon
r_break
suffix:semicolon
)brace
multiline_comment|/* Now replicate it across the size of an unsigned long, or &n;&t;   just to the bus width as appropriate */
r_switch
c_cond
(paren
id|chips_per_word
)paren
(brace
r_default
suffix:colon
id|BUG
c_func
(paren
)paren
suffix:semicolon
macro_line|#if BITS_PER_LONG &gt;= 64
r_case
l_int|8
suffix:colon
id|onecmd
op_or_assign
(paren
id|onecmd
op_lshift
(paren
id|chip_mode
op_star
l_int|32
)paren
)paren
suffix:semicolon
macro_line|#endif
r_case
l_int|4
suffix:colon
id|onecmd
op_or_assign
(paren
id|onecmd
op_lshift
(paren
id|chip_mode
op_star
l_int|16
)paren
)paren
suffix:semicolon
r_case
l_int|2
suffix:colon
id|onecmd
op_or_assign
(paren
id|onecmd
op_lshift
(paren
id|chip_mode
op_star
l_int|8
)paren
)paren
suffix:semicolon
r_case
l_int|1
suffix:colon
suffix:semicolon
)brace
multiline_comment|/* And finally, for the multi-word case, replicate it &n;&t;   in all words in the structure */
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|words_per_bus
suffix:semicolon
id|i
op_increment
)paren
(brace
id|val.x
(braket
id|i
)braket
op_assign
id|onecmd
suffix:semicolon
)brace
r_return
id|val
suffix:semicolon
)brace
DECL|macro|CMD
mdefine_line|#define CMD(x)  cfi_build_cmd((x), map, cfi)
multiline_comment|/*&n; * Sends a CFI command to a bank of flash for the given geometry.&n; *&n; * Returns the offset in flash where the command was written.&n; * If prev_val is non-null, it will be set to the value at the command address,&n; * before the command was written.&n; */
DECL|function|cfi_send_gen_cmd
r_static
r_inline
r_uint32
id|cfi_send_gen_cmd
c_func
(paren
id|u_char
id|cmd
comma
r_uint32
id|cmd_addr
comma
r_uint32
id|base
comma
r_struct
id|map_info
op_star
id|map
comma
r_struct
id|cfi_private
op_star
id|cfi
comma
r_int
id|type
comma
id|map_word
op_star
id|prev_val
)paren
(brace
id|map_word
id|val
suffix:semicolon
r_uint32
id|addr
op_assign
id|base
op_plus
id|cfi_build_cmd_addr
c_func
(paren
id|cmd_addr
comma
id|cfi_interleave
c_func
(paren
id|cfi
)paren
comma
id|type
)paren
suffix:semicolon
id|val
op_assign
id|cfi_build_cmd
c_func
(paren
id|cmd
comma
id|map
comma
id|cfi
)paren
suffix:semicolon
r_if
c_cond
(paren
id|prev_val
)paren
op_star
id|prev_val
op_assign
id|map_read
c_func
(paren
id|map
comma
id|addr
)paren
suffix:semicolon
id|map_write
c_func
(paren
id|map
comma
id|val
comma
id|addr
)paren
suffix:semicolon
r_return
id|addr
op_minus
id|base
suffix:semicolon
)brace
DECL|function|cfi_read_query
r_static
r_inline
r_uint8
id|cfi_read_query
c_func
(paren
r_struct
id|map_info
op_star
id|map
comma
r_uint32
id|addr
)paren
(brace
id|map_word
id|val
op_assign
id|map_read
c_func
(paren
id|map
comma
id|addr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|map_bankwidth_is_1
c_func
(paren
id|map
)paren
)paren
(brace
r_return
id|val.x
(braket
l_int|0
)braket
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|map_bankwidth_is_2
c_func
(paren
id|map
)paren
)paren
(brace
r_return
id|cfi16_to_cpu
c_func
(paren
id|val.x
(braket
l_int|0
)braket
)paren
suffix:semicolon
)brace
r_else
(brace
multiline_comment|/* No point in a 64-bit byteswap since that would just be&n;&t;&t;   swapping the responses from different chips, and we are&n;&t;&t;   only interested in one chip (a representative sample) */
r_return
id|cfi32_to_cpu
c_func
(paren
id|val.x
(braket
l_int|0
)braket
)paren
suffix:semicolon
)brace
)brace
DECL|function|cfi_udelay
r_static
r_inline
r_void
id|cfi_udelay
c_func
(paren
r_int
id|us
)paren
(brace
r_int
r_int
id|t
op_assign
id|us
op_star
id|HZ
op_div
l_int|1000000
suffix:semicolon
r_if
c_cond
(paren
id|t
)paren
(brace
id|set_current_state
c_func
(paren
id|TASK_UNINTERRUPTIBLE
)paren
suffix:semicolon
id|schedule_timeout
c_func
(paren
id|t
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
id|udelay
c_func
(paren
id|us
)paren
suffix:semicolon
id|cond_resched
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|cfi_spin_lock
r_static
r_inline
r_void
id|cfi_spin_lock
c_func
(paren
id|spinlock_t
op_star
id|mutex
)paren
(brace
id|spin_lock_bh
c_func
(paren
id|mutex
)paren
suffix:semicolon
)brace
DECL|function|cfi_spin_unlock
r_static
r_inline
r_void
id|cfi_spin_unlock
c_func
(paren
id|spinlock_t
op_star
id|mutex
)paren
(brace
id|spin_unlock_bh
c_func
(paren
id|mutex
)paren
suffix:semicolon
)brace
r_struct
id|cfi_extquery
op_star
id|cfi_read_pri
c_func
(paren
r_struct
id|map_info
op_star
id|map
comma
r_uint16
id|adr
comma
r_uint16
id|size
comma
r_const
r_char
op_star
id|name
)paren
suffix:semicolon
DECL|struct|cfi_fixup
r_struct
id|cfi_fixup
(brace
DECL|member|mfr
r_uint16
id|mfr
suffix:semicolon
DECL|member|id
r_uint16
id|id
suffix:semicolon
DECL|member|fixup
r_void
(paren
op_star
id|fixup
)paren
(paren
r_struct
id|mtd_info
op_star
id|mtd
comma
r_void
op_star
id|param
)paren
suffix:semicolon
DECL|member|param
r_void
op_star
id|param
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|CFI_MFR_ANY
mdefine_line|#define CFI_MFR_ANY 0xffff
DECL|macro|CFI_ID_ANY
mdefine_line|#define CFI_ID_ANY  0xffff
DECL|macro|CFI_MFR_AMD
mdefine_line|#define CFI_MFR_AMD 0x0001
DECL|macro|CFI_MFR_ST
mdefine_line|#define CFI_MFR_ST  0x0020 &t;/* STMicroelectronics */
r_void
id|cfi_fixup
c_func
(paren
r_struct
id|mtd_info
op_star
id|mtd
comma
r_struct
id|cfi_fixup
op_star
id|fixups
)paren
suffix:semicolon
DECL|typedef|varsize_frob_t
r_typedef
r_int
(paren
op_star
id|varsize_frob_t
)paren
(paren
r_struct
id|map_info
op_star
id|map
comma
r_struct
id|flchip
op_star
id|chip
comma
r_int
r_int
id|adr
comma
r_int
id|len
comma
r_void
op_star
id|thunk
)paren
suffix:semicolon
r_int
id|cfi_varsize_frob
c_func
(paren
r_struct
id|mtd_info
op_star
id|mtd
comma
id|varsize_frob_t
id|frob
comma
id|loff_t
id|ofs
comma
r_int
id|len
comma
r_void
op_star
id|thunk
)paren
suffix:semicolon
macro_line|#endif /* __MTD_CFI_H__ */
eof
