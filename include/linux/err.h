macro_line|#ifndef _LINUX_ERR_H
DECL|macro|_LINUX_ERR_H
mdefine_line|#define _LINUX_ERR_H
macro_line|#include &lt;linux/compiler.h&gt;
macro_line|#include &lt;asm/errno.h&gt;
multiline_comment|/*&n; * Kernel pointers have redundant information, so we can use a&n; * scheme where we can return either an error code or a dentry&n; * pointer with the same return value.&n; *&n; * This should be a per-architecture thing, to allow different&n; * error and pointer decisions.&n; */
DECL|function|ERR_PTR
r_static
r_inline
r_void
op_star
id|ERR_PTR
c_func
(paren
r_int
id|error
)paren
(brace
r_return
(paren
r_void
op_star
)paren
id|error
suffix:semicolon
)brace
DECL|function|PTR_ERR
r_static
r_inline
r_int
id|PTR_ERR
c_func
(paren
r_const
r_void
op_star
id|ptr
)paren
(brace
r_return
(paren
r_int
)paren
id|ptr
suffix:semicolon
)brace
DECL|function|IS_ERR
r_static
r_inline
r_int
id|IS_ERR
c_func
(paren
r_const
r_void
op_star
id|ptr
)paren
(brace
r_return
id|unlikely
c_func
(paren
(paren
r_int
r_int
)paren
id|ptr
OG
(paren
r_int
r_int
)paren
op_minus
l_int|1000L
)paren
suffix:semicolon
)brace
macro_line|#endif /* _LINUX_ERR_H */
eof
