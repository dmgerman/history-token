multiline_comment|/*&n; * ntfs_fs.h - Defines for NTFS Linux kernel driver. Part of the Linux-NTFS&n; *&t;       project.&n; *&n; * Copyright (c) 2001 Anton Altaparmakov.&n; *&n; * This program/include file is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License as published&n; * by the Free Software Foundation; either version 2 of the License, or&n; * (at your option) any later version.&n; *&n; * This program/include file is distributed in the hope that it will be &n; * useful, but WITHOUT ANY WARRANTY; without even the implied warranty &n; * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; * GNU General Public License for more details.&n; *&n; * You should have received a copy of the GNU General Public License&n; * along with this program (in the main directory of the Linux-NTFS &n; * distribution in the file COPYING); if not, write to the Free Software&n; * Foundation,Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA&n; */
macro_line|#ifndef _LINUX_NTFS_FS_H
DECL|macro|_LINUX_NTFS_FS_H
mdefine_line|#define _LINUX_NTFS_FS_H
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;linux/module.h&gt;
macro_line|#include &lt;linux/fs.h&gt;
macro_line|#include &lt;linux/ntfs_layout.h&gt;
macro_line|#include &lt;linux/vmalloc.h&gt;&t;/* For __vmalloc() and PAGE_KERNEL. */
macro_line|#include &lt;linux/nls.h&gt;
macro_line|#include &lt;linux/slab.h&gt;
macro_line|#include &lt;linux/pagemap.h&gt;
r_typedef
r_enum
(brace
DECL|enumerator|NTFS_BLOCK_SIZE
id|NTFS_BLOCK_SIZE
op_assign
l_int|512
comma
DECL|enumerator|NTFS_BLOCK_SIZE_BITS
id|NTFS_BLOCK_SIZE_BITS
op_assign
l_int|9
comma
DECL|enumerator|NTFS_SB_MAGIC
id|NTFS_SB_MAGIC
op_assign
l_int|0x5346544e
comma
multiline_comment|/* &squot;NTFS&squot; */
DECL|enumerator|NTFS_MAX_NAME_LEN
id|NTFS_MAX_NAME_LEN
op_assign
l_int|255
comma
DECL|typedef|NTFS_CONSTANTS
)brace
id|NTFS_CONSTANTS
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|FALSE
id|FALSE
op_assign
l_int|0
comma
DECL|enumerator|TRUE
id|TRUE
op_assign
l_int|1
DECL|typedef|BOOL
)brace
id|BOOL
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|LCN_HOLE
id|LCN_HOLE
op_assign
op_minus
l_int|1
comma
DECL|enumerator|LCN_RL_NOT_MAPPED
id|LCN_RL_NOT_MAPPED
op_assign
op_minus
l_int|2
comma
DECL|enumerator|LCN_ENOENT
id|LCN_ENOENT
op_assign
op_minus
l_int|3
comma
DECL|enumerator|LCN_EINVAL
id|LCN_EINVAL
op_assign
op_minus
l_int|4
comma
DECL|typedef|LCN_SPECIAL_VALUES
)brace
id|LCN_SPECIAL_VALUES
suffix:semicolon
r_typedef
r_enum
(brace
DECL|enumerator|CASE_SENSITIVE
id|CASE_SENSITIVE
op_assign
l_int|0
comma
DECL|enumerator|IGNORE_CASE
id|IGNORE_CASE
op_assign
l_int|1
comma
DECL|typedef|IGNORE_CASE_BOOL
)brace
id|IGNORE_CASE_BOOL
suffix:semicolon
multiline_comment|/*&n; * Defined bits for the state field in the ntfs_inode_info structure.&n; * (f) = files only, (d) = directories only&n; */
r_typedef
r_enum
(brace
DECL|enumerator|NI_Dirty
id|NI_Dirty
comma
multiline_comment|/* 1: Mft record needs to be written to disk. */
DECL|enumerator|NI_AttrList
id|NI_AttrList
comma
multiline_comment|/* 1: Mft record contains an attribute list. */
DECL|enumerator|NI_NonResident
id|NI_NonResident
comma
multiline_comment|/* 1: Unnamed data attr is non-resident (f).&n;&t;&t;&t;&t;   1: $I30 index alloc attr is present (d). */
DECL|enumerator|NI_Compressed
id|NI_Compressed
comma
multiline_comment|/* 1: Unnamed data attr is compressed (f). */
DECL|enumerator|NI_Encrypted
id|NI_Encrypted
comma
multiline_comment|/* 1: Unnamed data attr is encrypted (f). */
DECL|enumerator|NI_BmpNonResident
id|NI_BmpNonResident
comma
multiline_comment|/* 1: $I30 bitmap attr is non resident (d). */
DECL|typedef|ntfs_inode_state_bits
)brace
id|ntfs_inode_state_bits
suffix:semicolon
multiline_comment|/*&n; * NOTE: We should be adding dirty mft records to a list somewhere and they&n; * should be independent of the (ntfs/vfs) inode structure so that an inode can&n; * be removed but the record can be left dirty for syncing later.&n; */
DECL|macro|NInoDirty
mdefine_line|#define NInoDirty(n_ino)&t;  test_bit(NI_Dirty, &amp;(n_ino)-&gt;state)
DECL|macro|NInoSetDirty
mdefine_line|#define NInoSetDirty(n_ino)&t;  set_bit(NI_Dirty, &amp;(n_ino)-&gt;state)
DECL|macro|NInoClearDirty
mdefine_line|#define NInoClearDirty(n_ino)&t;  clear_bit(NI_Dirty, &amp;(n_ino)-&gt;state)
DECL|macro|NInoAttrList
mdefine_line|#define NInoAttrList(n_ino)&t;  test_bit(NI_AttrList, &amp;(n_ino)-&gt;state)
DECL|macro|NInoNonResident
mdefine_line|#define NInoNonResident(n_ino)&t;  test_bit(NI_NonResident, &amp;(n_ino)-&gt;state)
DECL|macro|NInoIndexAllocPresent
mdefine_line|#define NInoIndexAllocPresent(n_ino) test_bit(NI_NonResident, &amp;(n_ino)-&gt;state)
DECL|macro|NInoCompressed
mdefine_line|#define NInoCompressed(n_ino)&t;  test_bit(NI_Compressed, &amp;(n_ino)-&gt;state)
DECL|macro|NInoEncrypted
mdefine_line|#define NInoEncrypted(n_ino)&t;  test_bit(NI_Encrypted, &amp;(n_ino)-&gt;state)
DECL|macro|NInoBmpNonResident
mdefine_line|#define NInoBmpNonResident(n_ino) test_bit(NI_Encrypted, &amp;(n_ino)-&gt;state)
multiline_comment|/* Global variables. */
multiline_comment|/* Slab cache of Unicode name strings (from super.c). */
r_extern
id|kmem_cache_t
op_star
id|ntfs_name_cache
suffix:semicolon
multiline_comment|/* The little endian Unicode string $I30 as a global constant. */
r_extern
r_const
id|uchar_t
"$"
id|I30
(braket
l_int|5
)braket
suffix:semicolon
multiline_comment|/* The various operations structs defined throughout the driver files. */
r_extern
r_struct
id|super_operations
id|ntfs_sops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|ntfs_file_ops
suffix:semicolon
r_extern
r_struct
id|inode_operations
id|ntfs_file_inode_ops
suffix:semicolon
r_extern
r_struct
id|address_space_operations
id|ntfs_file_aops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|ntfs_dir_ops
suffix:semicolon
r_extern
r_struct
id|inode_operations
id|ntfs_dir_inode_ops
suffix:semicolon
r_extern
r_struct
id|address_space_operations
id|ntfs_dir_aops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|ntfs_empty_file_ops
suffix:semicolon
r_extern
r_struct
id|inode_operations
id|ntfs_empty_inode_ops
suffix:semicolon
r_extern
r_struct
id|address_space_operations
id|ntfs_empty_aops
suffix:semicolon
r_extern
r_struct
id|address_space_operations
id|ntfs_mftbmp_aops
suffix:semicolon
multiline_comment|/* The classical max and min macros. */
macro_line|#ifndef max
DECL|macro|max
mdefine_line|#define max(a, b)&t;((a) &gt;= (b) ? (a): (b))
macro_line|#endif
macro_line|#ifndef min
DECL|macro|min
mdefine_line|#define min(a, b)&t;((a) &lt;= (b) ? (a): (b))
macro_line|#endif
multiline_comment|/* Generic macro to convert pointers to values for comparison purposes. */
macro_line|#ifndef p2n
DECL|macro|p2n
mdefine_line|#define p2n(p)          ((ptrdiff_t)((ptrdiff_t*)(p)))
macro_line|#endif
multiline_comment|/**&n; * vmalloc_nofs - allocate any pages but don&squot;t allow calls into fs layer&n; * @size:&t;number of bytes to allocate&n; *&n; * Allocate any pages but don&squot;t allow calls into fs layer.&n; */
DECL|function|vmalloc_nofs
r_static
r_inline
r_void
op_star
id|vmalloc_nofs
c_func
(paren
r_int
r_int
id|size
)paren
(brace
r_return
id|__vmalloc
c_func
(paren
id|size
comma
id|GFP_NOFS
op_or
id|__GFP_HIGHMEM
comma
id|PAGE_KERNEL
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * NTFS_SB - return the ntfs super block given a vfs super block&n; * @sb:&t;&t;VFS super block&n; *&n; * NTFS_SB() returns the ntfs super block associated with the VFS super block&n; * @sb. This function is here in case it is decided to get rid of the big union&n; * in the struct super_block definition in include/linux/fs.h in favour of using&n; * the generic_sbp field (or whatever).&n; */
DECL|function|NTFS_SB
r_static
r_inline
r_struct
id|ntfs_sb_info
op_star
id|NTFS_SB
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
(brace
r_return
op_amp
id|sb-&gt;u.ntfs_sb
suffix:semicolon
)brace
multiline_comment|/**&n; * NTFS_I - return the ntfs inode given a vfs inode&n; * @inode:&t;VFS inode&n; *&n; * NTFS_I() returns the ntfs inode associated with the VFS @inode. This&n; * function is here in case it is decided to get rid of the big union in the&n; * struct inode definition in include/linux/fs.h in favour of using the&n; * generic_ip field (or whatever).&n; */
DECL|function|NTFS_I
r_static
r_inline
r_struct
id|ntfs_inode_info
op_star
id|NTFS_I
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
r_return
op_amp
id|inode-&gt;u.ntfs_i
suffix:semicolon
)brace
macro_line|#if 0 /* Fool kernel-doc since it doesn&squot;t do macros yet */
multiline_comment|/**&n; * ntfs_debug - write a debug level message to syslog&n; * @f:&t;&t;a printf format string containing the message&n; * @...:&t;the variables to substitute into @f&n; *&n; * ntfs_debug() writes a DEBUG level message to the syslog but only if the&n; * driver was compiled with -DDEBUG. Otherwise, the call turns into a NOP.&n; */
r_static
r_void
id|ntfs_debug
c_func
(paren
r_const
r_char
op_star
id|f
comma
dot
dot
dot
)paren
suffix:semicolon
macro_line|#endif
macro_line|#ifdef DEBUG
DECL|macro|ntfs_debug
mdefine_line|#define ntfs_debug(f, a...)&t;&t;&t;&t;&t;&t;&bslash;&n;&t;do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;printk(KERN_DEBUG &quot;NTFS-fs DEBUG (%s, %d): %s: &quot;,&t;&bslash;&n;&t;&t;&t;&t;__FILE__, __LINE__, __FUNCTION__);&t;&bslash;&n;&t;&t;printk(f, ##a);&t;&t;&t;&t;&t;&t;&bslash;&n;&t;} while (0)
macro_line|#else&t;/* !DEBUG */
DECL|macro|ntfs_debug
mdefine_line|#define ntfs_debug(f, a...)&t;do {} while (0)
macro_line|#endif&t;/* !DEBUG */
multiline_comment|/*&n; * Signed endianness conversion defines.&n; */
DECL|macro|sle16_to_cpu
mdefine_line|#define sle16_to_cpu(x)&t;&t;((__s16)__le16_to_cpu((__s16)(x)))
DECL|macro|sle32_to_cpu
mdefine_line|#define sle32_to_cpu(x)&t;&t;((__s32)__le32_to_cpu((__s32)(x)))
DECL|macro|sle64_to_cpu
mdefine_line|#define sle64_to_cpu(x)&t;&t;((__s64)__le64_to_cpu((__s64)(x)))
DECL|macro|sle16_to_cpup
mdefine_line|#define sle16_to_cpup(x)&t;((__s16)__le16_to_cpu(*(__s16*)(x)))
DECL|macro|sle32_to_cpup
mdefine_line|#define sle32_to_cpup(x)&t;((__s32)__le32_to_cpu(*(__s32*)(x)))
DECL|macro|sle64_to_cpup
mdefine_line|#define sle64_to_cpup(x)&t;((__s64)__le64_to_cpu(*(__s64*)(x)))
DECL|macro|cpu_to_sle16
mdefine_line|#define cpu_to_sle16(x)&t;&t;((__s16)__cpu_to_le16((__s16)(x)))
DECL|macro|cpu_to_sle32
mdefine_line|#define cpu_to_sle32(x)&t;&t;((__s32)__cpu_to_le32((__s32)(x)))
DECL|macro|cpu_to_sle64
mdefine_line|#define cpu_to_sle64(x)&t;&t;((__s64)__cpu_to_le64((__s64)(x)))
DECL|macro|cpu_to_sle16p
mdefine_line|#define cpu_to_sle16p(x)&t;((__s16)__cpu_to_le16(*(__s16*)(x)))
DECL|macro|cpu_to_sle32p
mdefine_line|#define cpu_to_sle32p(x)&t;((__s32)__cpu_to_le32(*(__s32*)(x)))
DECL|macro|cpu_to_sle64p
mdefine_line|#define cpu_to_sle64p(x)&t;((__s64)__cpu_to_le64(*(__s64*)(x)))
multiline_comment|/**&n; * ntfs_unmap_page - release a page that was mapped using ntfs_map_page()&n; * @page:&t;the page to release&n; *&n; * Unpin, unmap and release a page that was obtained from ntfs_map_page().&n; */
DECL|function|ntfs_unmap_page
r_static
r_inline
r_void
id|ntfs_unmap_page
c_func
(paren
r_struct
id|page
op_star
id|page
)paren
(brace
id|kunmap
c_func
(paren
id|page
)paren
suffix:semicolon
id|page_cache_release
c_func
(paren
id|page
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * ntfs_map_page - map a page into accessible memory, reading it if necessary&n; * @mapping:&t;address space for which to obtain the page&n; * @index:&t;index into the page cache for @mapping of the page to map&n; *&n; * Read a page from the page cache of the address space @mapping at position&n; * @index, where @index is in units of PAGE_CACHE_SIZE, and not in bytes.&n; *&n; * If the page is not in memory it is loaded from disk first using the readpage&n; * method defined in the address space operations of @mapping and the page is&n; * added to the page cache of @mapping in the process.&n; *&n; * If the page is in high memory it is mapped into memory directly addressible&n; * by the kernel.&n; *&n; * Finally the page count is incremented, thus pinning the page into place.&n; *&n; * The above means that page_address(page) can be used on all pages obtained&n; * with ntfs_map_page() to get the kernel virtual address of the page.&n; *&n; * When finished with the page, the caller has to call ntfs_unmap_page() to&n; * unpin, unmap and release the page.&n; *&n; * Note this does not grant exclusive access. If such is desired, the caller&n; * must provide it independently of the ntfs_{un}map_page() calls by using&n; * a {rw_}semaphore or other means of serialization. A spin lock cannot be&n; * used as ntfs_map_page() can block.&n; *&n; * The unlocked and uptodate page is returned on success or an encoded error&n; * on failure. Caller has to test for error using the IS_ERR() macro on the&n; * return value. If that evaluates to TRUE, the negative error code can be&n; * obtained using PTR_ERR() on the return value of ntfs_map_page().&n; */
DECL|function|ntfs_map_page
r_static
r_inline
r_struct
id|page
op_star
id|ntfs_map_page
c_func
(paren
r_struct
id|address_space
op_star
id|mapping
comma
r_int
r_int
id|index
)paren
(brace
r_struct
id|page
op_star
id|page
op_assign
id|read_cache_page
c_func
(paren
id|mapping
comma
id|index
comma
(paren
id|filler_t
op_star
)paren
id|mapping-&gt;a_ops-&gt;readpage
comma
l_int|NULL
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|IS_ERR
c_func
(paren
id|page
)paren
)paren
(brace
id|wait_on_page
c_func
(paren
id|page
)paren
suffix:semicolon
id|kmap
c_func
(paren
id|page
)paren
suffix:semicolon
r_if
c_cond
(paren
id|Page_Uptodate
c_func
(paren
id|page
)paren
op_logical_and
op_logical_neg
id|PageError
c_func
(paren
id|page
)paren
)paren
r_return
id|page
suffix:semicolon
id|ntfs_unmap_page
c_func
(paren
id|page
)paren
suffix:semicolon
r_return
id|ERR_PTR
c_func
(paren
op_minus
id|EIO
)paren
suffix:semicolon
)brace
r_return
id|page
suffix:semicolon
)brace
multiline_comment|/**&n; * attr_search_context - used in attribute search functions&n; * @mrec:&t;buffer containing mft record to search&n; * @attr:&t;attribute record in @mrec where to begin/continue search&n; * @is_first:&t;if true lookup_attr() begins search with @attr, else after @attr&n; *&n; * Structure must be initialized to zero before the first call to one of the&n; * attribute search functions. Initialize @mrec to point to the mft record to&n; * search, and @attr to point to the first attribute within @mrec (not necessary&n; * if calling the _first() functions), and set @is_first to TRUE (not necessary&n; * if calling the _first() functions).&n; *&n; * If @is_first is TRUE, the search begins with @attr. If @is_first is FALSE,&n; * the search begins after @attr. This is so that, after the first call to one&n; * of the search attribute functions, we can call the function again, without&n; * any modification of the search context, to automagically get the next&n; * matching attribute.&n; */
r_typedef
r_struct
(brace
DECL|member|mrec
id|MFT_RECORD
op_star
id|mrec
suffix:semicolon
DECL|member|attr
id|ATTR_RECORD
op_star
id|attr
suffix:semicolon
DECL|member|is_first
id|BOOL
id|is_first
suffix:semicolon
DECL|typedef|attr_search_context
)brace
id|attr_search_context
suffix:semicolon
multiline_comment|/* Declarations of functions and global variables. */
multiline_comment|/* From fs/ntfs/aops.c */
r_extern
r_int
id|ntfs_file_get_block
c_func
(paren
r_struct
id|inode
op_star
id|vfs_ino
comma
r_const
r_int
id|blk
comma
r_struct
id|buffer_head
op_star
id|bh
comma
r_const
r_int
id|create
)paren
suffix:semicolon
multiline_comment|/* From fs/ntfs/compaops.c */
r_extern
r_int
id|ntfs_file_read_compressed_block
c_func
(paren
r_struct
id|page
op_star
id|page
)paren
suffix:semicolon
multiline_comment|/* From fs/ntfs/super.c */
DECL|macro|default_upcase_len
mdefine_line|#define default_upcase_len 0x10000
r_extern
m_wchar_t
op_star
id|default_upcase
suffix:semicolon
r_extern
r_int
r_int
id|ntfs_nr_upcase_users
suffix:semicolon
r_extern
r_int
r_int
id|ntfs_nr_mounts
suffix:semicolon
r_extern
r_struct
id|semaphore
id|ntfs_lock
suffix:semicolon
multiline_comment|/* From fs/ntfs/mst.c */
r_extern
r_inline
r_void
id|__post_read_mst_fixup
c_func
(paren
id|NTFS_RECORD
op_star
id|b
comma
r_const
id|__u32
id|size
)paren
suffix:semicolon
r_extern
r_int
id|post_read_mst_fixup
c_func
(paren
id|NTFS_RECORD
op_star
id|b
comma
r_const
id|__u32
id|size
)paren
suffix:semicolon
r_extern
r_int
id|pre_write_mst_fixup
c_func
(paren
id|NTFS_RECORD
op_star
id|b
comma
r_const
id|__u32
id|size
)paren
suffix:semicolon
multiline_comment|/* From fs/ntfs/time.c */
r_extern
r_inline
id|__s64
id|utc2ntfs
c_func
(paren
r_const
id|time_t
id|time
)paren
suffix:semicolon
r_extern
r_inline
id|__s64
id|get_current_ntfs_time
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_inline
id|time_t
id|ntfs2utc
c_func
(paren
r_const
id|__s64
id|time
)paren
suffix:semicolon
multiline_comment|/* From fs/ntfs/debug.c */
r_void
id|ntfs_warning
c_func
(paren
r_const
r_struct
id|super_block
op_star
id|sb
comma
r_const
r_char
op_star
id|fmt
comma
dot
dot
dot
)paren
suffix:semicolon
r_void
id|ntfs_error
c_func
(paren
r_const
r_struct
id|super_block
op_star
id|sb
comma
r_const
r_char
op_star
id|fmt
comma
dot
dot
dot
)paren
suffix:semicolon
multiline_comment|/* From fs/ntfs/inode.c */
r_void
id|ntfs_read_inode
c_func
(paren
r_struct
id|inode
op_star
id|vfs_ino
)paren
suffix:semicolon
r_void
id|ntfs_read_inode_mount
c_func
(paren
r_struct
id|inode
op_star
id|vfs_ino
)paren
suffix:semicolon
r_void
id|ntfs_dirty_inode
c_func
(paren
r_struct
id|inode
op_star
id|vfs_ino
)paren
suffix:semicolon
r_void
id|ntfs_clear_inode
c_func
(paren
r_struct
id|inode
op_star
id|vfs_ino
)paren
suffix:semicolon
multiline_comment|/* From fs/ntfs/dir.c */
id|__u64
id|ntfs_lookup_ino_by_name
c_func
(paren
r_struct
id|inode
op_star
id|dir_ino
comma
r_const
id|uchar_t
op_star
id|uname
comma
r_const
r_int
id|uname_len
)paren
suffix:semicolon
multiline_comment|/* From fs/ntfs/attrib.c */
id|run_list
op_star
id|decompress_mapping_pairs
c_func
(paren
r_const
id|ATTR_RECORD
op_star
id|attr
comma
id|run_list
op_star
id|run_list
)paren
suffix:semicolon
id|LCN
id|vcn_to_lcn
c_func
(paren
r_const
id|run_list
op_star
id|rl
comma
r_const
id|VCN
id|vcn
)paren
suffix:semicolon
id|BOOL
id|find_attr
c_func
(paren
r_const
id|ATTR_TYPES
id|type
comma
r_const
id|uchar_t
op_star
id|name
comma
r_const
id|__u32
id|name_len
comma
r_const
id|IGNORE_CASE_BOOL
id|ic
comma
r_const
id|uchar_t
op_star
id|upcase
comma
r_const
id|__u32
id|upcase_len
comma
r_const
id|__u8
op_star
id|val
comma
r_const
id|__u32
id|val_len
comma
id|attr_search_context
op_star
id|ctx
)paren
suffix:semicolon
r_extern
r_inline
id|BOOL
id|find_first_attr
c_func
(paren
r_const
id|ATTR_TYPES
id|type
comma
r_const
id|uchar_t
op_star
id|name
comma
r_const
id|__u32
id|name_len
comma
r_const
id|IGNORE_CASE_BOOL
id|ic
comma
r_const
id|uchar_t
op_star
id|upcase
comma
r_const
id|__u32
id|upcase_len
comma
r_const
id|__u8
op_star
id|val
comma
r_const
id|__u32
id|val_len
comma
id|attr_search_context
op_star
id|ctx
)paren
suffix:semicolon
multiline_comment|/* From fs/ntfs/mft.c */
r_int
id|format_mft_record
c_func
(paren
r_struct
id|inode
op_star
id|vfs_ino
comma
id|MFT_RECORD
op_star
id|m
)paren
suffix:semicolon
r_int
id|format_mft_record2
c_func
(paren
r_struct
id|super_block
op_star
id|vfs_sb
comma
r_const
r_int
r_int
id|inum
comma
id|MFT_RECORD
op_star
id|m
)paren
suffix:semicolon
id|MFT_RECORD
op_star
id|map_mft_record_for_read
c_func
(paren
r_struct
id|inode
op_star
id|vfs_ino
)paren
suffix:semicolon
id|MFT_RECORD
op_star
id|map_mft_record_for_read2
c_func
(paren
r_struct
id|super_block
op_star
id|vfs_sb
comma
r_const
r_int
r_int
id|inum
comma
r_struct
id|inode
op_star
op_star
id|vfs_ino
)paren
suffix:semicolon
id|MFT_RECORD
op_star
id|map_mft_record_for_write
c_func
(paren
r_struct
id|inode
op_star
id|vfs_ino
)paren
suffix:semicolon
id|MFT_RECORD
op_star
id|map_mft_record_for_write2
c_func
(paren
r_struct
id|super_block
op_star
id|vfs_sb
comma
r_const
r_int
r_int
id|inum
comma
r_struct
id|inode
op_star
op_star
id|vfs_ino
)paren
suffix:semicolon
r_void
id|unmap_mft_record_from_read
c_func
(paren
r_struct
id|inode
op_star
id|vfs_ino
)paren
suffix:semicolon
r_void
id|unmap_mft_record_from_write
c_func
(paren
r_struct
id|inode
op_star
id|vfs_ino
)paren
suffix:semicolon
multiline_comment|/* From fs/ntfs/unistr.c */
id|BOOL
id|ntfs_are_names_equal
c_func
(paren
r_const
id|uchar_t
op_star
id|s1
comma
r_int
id|s1_len
comma
r_const
id|uchar_t
op_star
id|s2
comma
r_int
id|s2_len
comma
r_const
id|IGNORE_CASE_BOOL
id|ic
comma
r_const
id|uchar_t
op_star
id|upcase
comma
r_const
id|__u32
id|upcase_size
)paren
suffix:semicolon
r_int
id|ntfs_collate_names
c_func
(paren
r_const
id|uchar_t
op_star
id|name1
comma
r_const
id|__u32
id|name1_len
comma
r_const
id|uchar_t
op_star
id|name2
comma
r_const
id|__u32
id|name2_len
comma
r_const
r_int
id|err_val
comma
r_const
id|IGNORE_CASE_BOOL
id|ic
comma
r_const
id|uchar_t
op_star
id|upcase
comma
r_const
id|__u32
id|upcase_len
)paren
suffix:semicolon
r_int
id|ntfs_ucsncmp
c_func
(paren
r_const
id|uchar_t
op_star
id|s1
comma
r_const
id|uchar_t
op_star
id|s2
comma
r_int
id|n
)paren
suffix:semicolon
r_int
id|ntfs_ucsncasecmp
c_func
(paren
r_const
id|uchar_t
op_star
id|s1
comma
r_const
id|uchar_t
op_star
id|s2
comma
r_int
id|n
comma
r_const
id|uchar_t
op_star
id|upcase
comma
r_const
id|__u32
id|upcase_size
)paren
suffix:semicolon
r_void
id|ntfs_upcase_name
c_func
(paren
id|uchar_t
op_star
id|name
comma
id|__u32
id|name_len
comma
r_const
id|uchar_t
op_star
id|upcase
comma
r_const
id|__u32
id|upcase_len
)paren
suffix:semicolon
r_void
id|ntfs_file_upcase_value
c_func
(paren
id|FILE_NAME_ATTR
op_star
id|file_name_attr
comma
r_const
id|uchar_t
op_star
id|upcase
comma
r_const
id|__u32
id|upcase_len
)paren
suffix:semicolon
r_int
id|ntfs_file_compare_values
c_func
(paren
id|FILE_NAME_ATTR
op_star
id|file_name_attr1
comma
id|FILE_NAME_ATTR
op_star
id|file_name_attr2
comma
r_const
r_int
id|err_val
comma
r_const
id|IGNORE_CASE_BOOL
id|ic
comma
r_const
id|uchar_t
op_star
id|upcase
comma
r_const
id|__u32
id|upcase_len
)paren
suffix:semicolon
r_int
id|ntfs_nlstoucs
c_func
(paren
r_const
r_struct
id|ntfs_sb_info
op_star
id|vol
comma
r_const
r_char
op_star
id|ins
comma
r_const
r_int
id|ins_len
comma
id|uchar_t
op_star
op_star
id|outs
)paren
suffix:semicolon
r_int
id|ntfs_ucstonls
c_func
(paren
r_const
r_struct
id|ntfs_sb_info
op_star
id|vol
comma
r_const
id|uchar_t
op_star
id|ins
comma
r_const
r_int
id|ins_len
comma
r_int
r_char
op_star
op_star
id|outs
comma
r_int
id|outs_len
)paren
suffix:semicolon
multiline_comment|/* From fs/ntfs/upcase.c */
id|uchar_t
op_star
id|generate_default_upcase
c_func
(paren
r_void
)paren
suffix:semicolon
macro_line|#endif /* _LINUX_NTFS_FS_H */
eof
