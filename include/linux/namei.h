macro_line|#ifndef _LINUX_NAMEI_H
DECL|macro|_LINUX_NAMEI_H
mdefine_line|#define _LINUX_NAMEI_H
r_struct
id|vfsmount
suffix:semicolon
DECL|struct|nameidata
r_struct
id|nameidata
(brace
DECL|member|dentry
r_struct
id|dentry
op_star
id|dentry
suffix:semicolon
DECL|member|mnt
r_struct
id|vfsmount
op_star
id|mnt
suffix:semicolon
DECL|member|last
r_struct
id|qstr
id|last
suffix:semicolon
DECL|member|flags
r_int
r_int
id|flags
suffix:semicolon
DECL|member|last_type
r_int
id|last_type
suffix:semicolon
DECL|member|old_dentry
r_struct
id|dentry
op_star
id|old_dentry
suffix:semicolon
DECL|member|old_mnt
r_struct
id|vfsmount
op_star
id|old_mnt
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * Type of the last component on LOOKUP_PARENT&n; */
DECL|enumerator|LAST_NORM
DECL|enumerator|LAST_ROOT
DECL|enumerator|LAST_DOT
DECL|enumerator|LAST_DOTDOT
DECL|enumerator|LAST_BIND
r_enum
(brace
id|LAST_NORM
comma
id|LAST_ROOT
comma
id|LAST_DOT
comma
id|LAST_DOTDOT
comma
id|LAST_BIND
)brace
suffix:semicolon
multiline_comment|/*&n; * The bitmask for a lookup event:&n; *  - follow links at the end&n; *  - require a directory&n; *  - ending slashes ok even for nonexistent files&n; *  - internal &quot;there are more path compnents&quot; flag&n; *  - locked when lookup done with dcache_lock held&n; */
DECL|macro|LOOKUP_FOLLOW
mdefine_line|#define LOOKUP_FOLLOW&t;&t; 1
DECL|macro|LOOKUP_DIRECTORY
mdefine_line|#define LOOKUP_DIRECTORY&t; 2
DECL|macro|LOOKUP_CONTINUE
mdefine_line|#define LOOKUP_CONTINUE&t;&t; 4
DECL|macro|LOOKUP_PARENT
mdefine_line|#define LOOKUP_PARENT&t;&t;16
DECL|macro|LOOKUP_NOALT
mdefine_line|#define LOOKUP_NOALT&t;&t;32
r_extern
r_int
id|FASTCALL
c_func
(paren
id|__user_walk
c_func
(paren
r_const
r_char
op_star
comma
r_int
comma
r_struct
id|nameidata
op_star
)paren
)paren
suffix:semicolon
DECL|macro|user_path_walk
mdefine_line|#define user_path_walk(name,nd) &bslash;&n;&t;__user_walk(name, LOOKUP_FOLLOW, nd)
DECL|macro|user_path_walk_link
mdefine_line|#define user_path_walk_link(name,nd) &bslash;&n;&t;__user_walk(name, 0, nd)
r_extern
r_int
id|FASTCALL
c_func
(paren
id|path_init
c_func
(paren
r_const
r_char
op_star
comma
r_int
comma
r_struct
id|nameidata
op_star
)paren
)paren
suffix:semicolon
r_extern
r_int
id|FASTCALL
c_func
(paren
id|path_lookup
c_func
(paren
r_const
r_char
op_star
comma
r_int
comma
r_struct
id|nameidata
op_star
)paren
)paren
suffix:semicolon
r_extern
r_int
id|FASTCALL
c_func
(paren
id|path_walk
c_func
(paren
r_const
r_char
op_star
comma
r_struct
id|nameidata
op_star
)paren
)paren
suffix:semicolon
r_extern
r_int
id|FASTCALL
c_func
(paren
id|link_path_walk
c_func
(paren
r_const
r_char
op_star
comma
r_struct
id|nameidata
op_star
)paren
)paren
suffix:semicolon
r_extern
r_void
id|path_release
c_func
(paren
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|dentry
op_star
id|lookup_one_len
c_func
(paren
r_const
r_char
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_struct
id|dentry
op_star
id|lookup_hash
c_func
(paren
r_struct
id|qstr
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
r_int
id|follow_down
c_func
(paren
r_struct
id|vfsmount
op_star
op_star
comma
r_struct
id|dentry
op_star
op_star
)paren
suffix:semicolon
r_extern
r_int
id|follow_up
c_func
(paren
r_struct
id|vfsmount
op_star
op_star
comma
r_struct
id|dentry
op_star
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|dentry
op_star
id|lock_rename
c_func
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
r_void
id|unlock_rename
c_func
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
macro_line|#endif /* _LINUX_NAMEI_H */
eof
