multiline_comment|/*&n; * VLAN&t;&t;An implementation of 802.1Q VLAN tagging.&n; *&n; * Authors:&t;Ben Greear &lt;greearb@candelatech.com&gt;&n; *&n; *&t;&t;This program is free software; you can redistribute it and/or&n; *&t;&t;modify it under the terms of the GNU General Public License&n; *&t;&t;as published by the Free Software Foundation; either version&n; *&t;&t;2 of the License, or (at your option) any later version.&n; *&n; */
macro_line|#ifndef _LINUX_IF_VLAN_H_
DECL|macro|_LINUX_IF_VLAN_H_
mdefine_line|#define _LINUX_IF_VLAN_H_
macro_line|#ifdef __KERNEL__
multiline_comment|/* externally defined structs */
r_struct
id|vlan_group
suffix:semicolon
r_struct
id|net_device
suffix:semicolon
r_struct
id|sk_buff
suffix:semicolon
r_struct
id|packet_type
suffix:semicolon
r_struct
id|vlan_collection
suffix:semicolon
r_struct
id|vlan_dev_info
suffix:semicolon
macro_line|#include &lt;linux/proc_fs.h&gt; /* for proc_dir_entry */
macro_line|#include &lt;linux/netdevice.h&gt;
DECL|macro|VLAN_HLEN
mdefine_line|#define VLAN_HLEN&t;4&t;&t;/* The additional bytes (on top of the Ethernet header)&n;&t;&t;&t;&t;&t; * that VLAN requires.&n;&t;&t;&t;&t;&t; */
DECL|macro|VLAN_ETH_ALEN
mdefine_line|#define VLAN_ETH_ALEN&t;6&t;&t;/* Octets in one ethernet addr&t; */
DECL|macro|VLAN_ETH_HLEN
mdefine_line|#define VLAN_ETH_HLEN&t;18&t;&t;/* Total octets in header.&t; */
DECL|macro|VLAN_ETH_ZLEN
mdefine_line|#define VLAN_ETH_ZLEN&t;64&t;&t;/* Min. octets in frame sans FCS */
multiline_comment|/*&n; * According to 802.3ac, the packet can be 4 bytes longer. --Klika Jan&n; */
DECL|macro|VLAN_ETH_DATA_LEN
mdefine_line|#define VLAN_ETH_DATA_LEN&t;1500&t;/* Max. octets in payload&t; */
DECL|macro|VLAN_ETH_FRAME_LEN
mdefine_line|#define VLAN_ETH_FRAME_LEN&t;1518&t;/* Max. octets in frame sans FCS */
DECL|struct|vlan_ethhdr
r_struct
id|vlan_ethhdr
(brace
DECL|member|h_dest
r_int
r_char
id|h_dest
(braket
id|ETH_ALEN
)braket
suffix:semicolon
multiline_comment|/* destination eth addr&t;*/
DECL|member|h_source
r_int
r_char
id|h_source
(braket
id|ETH_ALEN
)braket
suffix:semicolon
multiline_comment|/* source ether addr&t;*/
DECL|member|h_vlan_proto
r_int
r_int
id|h_vlan_proto
suffix:semicolon
multiline_comment|/* Should always be 0x8100 */
DECL|member|h_vlan_TCI
r_int
r_int
id|h_vlan_TCI
suffix:semicolon
multiline_comment|/* Encapsulates priority and VLAN ID */
DECL|member|h_vlan_encapsulated_proto
r_int
r_int
id|h_vlan_encapsulated_proto
suffix:semicolon
multiline_comment|/* packet type ID field (or len) */
)brace
suffix:semicolon
DECL|struct|vlan_hdr
r_struct
id|vlan_hdr
(brace
DECL|member|h_vlan_TCI
r_int
r_int
id|h_vlan_TCI
suffix:semicolon
multiline_comment|/* Encapsulates priority and VLAN ID */
DECL|member|h_vlan_encapsulated_proto
r_int
r_int
id|h_vlan_encapsulated_proto
suffix:semicolon
multiline_comment|/* packet type ID field (or len) */
)brace
suffix:semicolon
multiline_comment|/*  Find a VLAN device by the MAC address of it&squot;s Ethernet device, and&n; *  it&squot;s VLAN ID.  The default configuration is to have VLAN&squot;s scope&n; *  to be box-wide, so the MAC will be ignored.  The mac will only be&n; *  looked at if we are configured to have a seperate set of VLANs per&n; *  each MAC addressable interface.  Note that this latter option does&n; *  NOT follow the spec for VLANs, but may be useful for doing very&n; *  large quantities of VLAN MUX/DEMUX onto FrameRelay or ATM PVCs.&n; */
r_struct
id|net_device
op_star
id|find_802_1Q_vlan_dev
c_func
(paren
r_struct
id|net_device
op_star
id|real_dev
comma
r_int
r_int
id|VID
)paren
suffix:semicolon
multiline_comment|/* vlan.c */
multiline_comment|/* found in af_inet.c */
r_extern
r_int
(paren
op_star
id|vlan_ioctl_hook
)paren
(paren
r_int
r_int
id|arg
)paren
suffix:semicolon
multiline_comment|/* found in vlan_dev.c */
r_struct
id|net_device_stats
op_star
id|vlan_dev_get_stats
c_func
(paren
r_struct
id|net_device
op_star
id|dev
)paren
suffix:semicolon
r_int
id|vlan_dev_rebuild_header
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_int
id|vlan_skb_recv
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|net_device
op_star
id|dev
comma
r_struct
id|packet_type
op_star
id|ptype
)paren
suffix:semicolon
r_int
id|vlan_dev_hard_header
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|net_device
op_star
id|dev
comma
r_int
r_int
id|type
comma
r_void
op_star
id|daddr
comma
r_void
op_star
id|saddr
comma
r_int
id|len
)paren
suffix:semicolon
r_int
id|vlan_dev_hard_start_xmit
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|net_device
op_star
id|dev
)paren
suffix:semicolon
r_int
id|vlan_dev_change_mtu
c_func
(paren
r_struct
id|net_device
op_star
id|dev
comma
r_int
id|new_mtu
)paren
suffix:semicolon
r_int
id|vlan_dev_set_mac_address
c_func
(paren
r_struct
id|net_device
op_star
id|dev
comma
r_void
op_star
id|addr
)paren
suffix:semicolon
r_int
id|vlan_dev_open
c_func
(paren
r_struct
id|net_device
op_star
id|dev
)paren
suffix:semicolon
r_int
id|vlan_dev_stop
c_func
(paren
r_struct
id|net_device
op_star
id|dev
)paren
suffix:semicolon
r_int
id|vlan_dev_init
c_func
(paren
r_struct
id|net_device
op_star
id|dev
)paren
suffix:semicolon
r_void
id|vlan_dev_destruct
c_func
(paren
r_struct
id|net_device
op_star
id|dev
)paren
suffix:semicolon
r_void
id|vlan_dev_copy_and_sum
c_func
(paren
r_struct
id|sk_buff
op_star
id|dest
comma
r_int
r_char
op_star
id|src
comma
r_int
id|length
comma
r_int
id|base
)paren
suffix:semicolon
r_int
id|vlan_dev_set_ingress_priority
c_func
(paren
r_char
op_star
id|dev_name
comma
id|__u32
id|skb_prio
comma
r_int
id|vlan_prio
)paren
suffix:semicolon
r_int
id|vlan_dev_set_egress_priority
c_func
(paren
r_char
op_star
id|dev_name
comma
id|__u32
id|skb_prio
comma
r_int
id|vlan_prio
)paren
suffix:semicolon
r_int
id|vlan_dev_set_vlan_flag
c_func
(paren
r_char
op_star
id|dev_name
comma
id|__u32
id|flag
comma
r_int
id|flag_val
)paren
suffix:semicolon
multiline_comment|/* VLAN multicast stuff */
multiline_comment|/* Delete all of the MC list entries from this vlan device.  Also deals&n; * with the underlying device...&n; */
r_void
id|vlan_flush_mc_list
c_func
(paren
r_struct
id|net_device
op_star
id|dev
)paren
suffix:semicolon
multiline_comment|/* copy the mc_list into the vlan_info structure. */
r_void
id|vlan_copy_mc_list
c_func
(paren
r_struct
id|dev_mc_list
op_star
id|mc_list
comma
r_struct
id|vlan_dev_info
op_star
id|vlan_info
)paren
suffix:semicolon
multiline_comment|/** dmi is a single entry into a dev_mc_list, a single node.  mc_list is&n; *  an entire list, and we&squot;ll iterate through it.&n; */
r_int
id|vlan_should_add_mc
c_func
(paren
r_struct
id|dev_mc_list
op_star
id|dmi
comma
r_struct
id|dev_mc_list
op_star
id|mc_list
)paren
suffix:semicolon
multiline_comment|/** Taken from Gleb + Lennert&squot;s VLAN code, and modified... */
r_void
id|vlan_dev_set_multicast_list
c_func
(paren
r_struct
id|net_device
op_star
id|vlan_dev
)paren
suffix:semicolon
r_int
id|vlan_collection_add_vlan
c_func
(paren
r_struct
id|vlan_collection
op_star
id|vc
comma
r_int
r_int
id|vlan_id
comma
r_int
r_int
id|flags
)paren
suffix:semicolon
r_int
id|vlan_collection_remove_vlan
c_func
(paren
r_struct
id|vlan_collection
op_star
id|vc
comma
r_struct
id|net_device
op_star
id|vlan_dev
)paren
suffix:semicolon
r_int
id|vlan_collection_remove_vlan_id
c_func
(paren
r_struct
id|vlan_collection
op_star
id|vc
comma
r_int
r_int
id|vlan_id
)paren
suffix:semicolon
multiline_comment|/* found in vlan.c */
multiline_comment|/* Our listing of VLAN group(s) */
r_extern
r_struct
id|vlan_group
op_star
id|p802_1Q_vlan_list
suffix:semicolon
DECL|macro|VLAN_NAME
mdefine_line|#define VLAN_NAME &quot;vlan&quot;
multiline_comment|/* if this changes, algorithm will have to be reworked because this&n; * depends on completely exhausting the VLAN identifier space.  Thus&n; * it gives constant time look-up, but it many cases it wastes memory.&n; */
DECL|macro|VLAN_GROUP_ARRAY_LEN
mdefine_line|#define VLAN_GROUP_ARRAY_LEN 4096
DECL|struct|vlan_group
r_struct
id|vlan_group
(brace
DECL|member|real_dev_ifindex
r_int
id|real_dev_ifindex
suffix:semicolon
multiline_comment|/* The ifindex of the ethernet(like) device the vlan is attached to. */
DECL|member|vlan_devices
r_struct
id|net_device
op_star
id|vlan_devices
(braket
id|VLAN_GROUP_ARRAY_LEN
)braket
suffix:semicolon
DECL|member|next
r_struct
id|vlan_group
op_star
id|next
suffix:semicolon
multiline_comment|/* the next in the list */
)brace
suffix:semicolon
DECL|struct|vlan_priority_tci_mapping
r_struct
id|vlan_priority_tci_mapping
(brace
DECL|member|priority
r_int
r_int
id|priority
suffix:semicolon
DECL|member|vlan_qos
r_int
r_int
id|vlan_qos
suffix:semicolon
multiline_comment|/* This should be shifted when first set, so we only do it&n;&t;&t;&t;&t;  * at provisioning time.&n;&t;&t;&t;&t;  * ((skb-&gt;priority &lt;&lt; 13) &amp; 0xE000)&n;&t;&t;&t;&t;  */
DECL|member|next
r_struct
id|vlan_priority_tci_mapping
op_star
id|next
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Holds information that makes sense if this device is a VLAN device. */
DECL|struct|vlan_dev_info
r_struct
id|vlan_dev_info
(brace
multiline_comment|/** This will be the mapping that correlates skb-&gt;priority to&n;&t; * 3 bits of VLAN QOS tags...&n;&t; */
DECL|member|ingress_priority_map
r_int
r_int
id|ingress_priority_map
(braket
l_int|8
)braket
suffix:semicolon
DECL|member|egress_priority_map
r_struct
id|vlan_priority_tci_mapping
op_star
id|egress_priority_map
(braket
l_int|16
)braket
suffix:semicolon
multiline_comment|/* hash table */
DECL|member|vlan_id
r_int
r_int
id|vlan_id
suffix:semicolon
multiline_comment|/*  The VLAN Identifier for this interface. */
DECL|member|flags
r_int
r_int
id|flags
suffix:semicolon
multiline_comment|/* (1 &lt;&lt; 0) re_order_header   This option will cause the&n;                                        *   VLAN code to move around the ethernet header on&n;                                        *   ingress to make the skb look **exactly** like it&n;                                        *   came in from an ethernet port.  This destroys some of&n;                                        *   the VLAN information in the skb, but it fixes programs&n;                                        *   like DHCP that use packet-filtering and don&squot;t understand&n;                                        *   802.1Q&n;                                        */
DECL|member|old_mc_list
r_struct
id|dev_mc_list
op_star
id|old_mc_list
suffix:semicolon
multiline_comment|/* old multi-cast list for the VLAN interface..&n;                                           * we save this so we can tell what changes were&n;                                           * made, in order to feed the right changes down&n;                                           * to the real hardware...&n;                                           */
DECL|member|old_allmulti
r_int
id|old_allmulti
suffix:semicolon
multiline_comment|/* similar to above. */
DECL|member|old_promiscuity
r_int
id|old_promiscuity
suffix:semicolon
multiline_comment|/* similar to above. */
DECL|member|real_dev
r_struct
id|net_device
op_star
id|real_dev
suffix:semicolon
multiline_comment|/* the underlying device/interface */
DECL|member|dent
r_struct
id|proc_dir_entry
op_star
id|dent
suffix:semicolon
multiline_comment|/* Holds the proc data */
DECL|member|cnt_inc_headroom_on_tx
r_int
r_int
id|cnt_inc_headroom_on_tx
suffix:semicolon
multiline_comment|/* How many times did we have to grow the skb on TX. */
DECL|member|cnt_encap_on_xmit
r_int
r_int
id|cnt_encap_on_xmit
suffix:semicolon
multiline_comment|/* How many times did we have to encapsulate the skb on TX. */
DECL|member|dev_stats
r_struct
id|net_device_stats
id|dev_stats
suffix:semicolon
multiline_comment|/* Device stats (rx-bytes, tx-pkts, etc...) */
)brace
suffix:semicolon
DECL|macro|VLAN_DEV_INFO
mdefine_line|#define VLAN_DEV_INFO(x) ((struct vlan_dev_info *)(x-&gt;priv))
multiline_comment|/* inline functions */
multiline_comment|/* Used in vlan_skb_recv */
DECL|function|vlan_check_reorder_header
r_static
r_inline
r_struct
id|sk_buff
op_star
id|vlan_check_reorder_header
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
(brace
r_if
c_cond
(paren
id|VLAN_DEV_INFO
c_func
(paren
id|skb-&gt;dev
)paren
op_member_access_from_pointer
id|flags
op_amp
l_int|1
)paren
(brace
id|skb
op_assign
id|skb_share_check
c_func
(paren
id|skb
comma
id|GFP_ATOMIC
)paren
suffix:semicolon
r_if
c_cond
(paren
id|skb
)paren
(brace
multiline_comment|/* Lifted from Gleb&squot;s VLAN code... */
id|memmove
c_func
(paren
id|skb-&gt;data
op_minus
id|ETH_HLEN
comma
id|skb-&gt;data
op_minus
id|VLAN_ETH_HLEN
comma
l_int|12
)paren
suffix:semicolon
id|skb-&gt;mac.raw
op_add_assign
id|VLAN_HLEN
suffix:semicolon
)brace
)brace
r_return
id|skb
suffix:semicolon
)brace
DECL|function|vlan_dev_get_egress_qos_mask
r_static
r_inline
r_int
r_int
id|vlan_dev_get_egress_qos_mask
c_func
(paren
r_struct
id|net_device
op_star
id|dev
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
(brace
r_struct
id|vlan_priority_tci_mapping
op_star
id|mp
op_assign
id|VLAN_DEV_INFO
c_func
(paren
id|dev
)paren
op_member_access_from_pointer
id|egress_priority_map
(braket
(paren
id|skb-&gt;priority
op_amp
l_int|0xF
)paren
)braket
suffix:semicolon
r_while
c_loop
(paren
id|mp
)paren
(brace
r_if
c_cond
(paren
id|mp-&gt;priority
op_eq
id|skb-&gt;priority
)paren
(brace
r_return
id|mp-&gt;vlan_qos
suffix:semicolon
multiline_comment|/* This should already be shifted to mask&n;&t;&t;&t;&t;&t;      * correctly with the VLAN&squot;s TCI&n;&t;&t;&t;&t;&t;      */
)brace
id|mp
op_assign
id|mp-&gt;next
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|vlan_dmi_equals
r_static
r_inline
r_int
id|vlan_dmi_equals
c_func
(paren
r_struct
id|dev_mc_list
op_star
id|dmi1
comma
r_struct
id|dev_mc_list
op_star
id|dmi2
)paren
(brace
r_return
(paren
(paren
id|dmi1-&gt;dmi_addrlen
op_eq
id|dmi2-&gt;dmi_addrlen
)paren
op_logical_and
(paren
id|memcmp
c_func
(paren
id|dmi1-&gt;dmi_addr
comma
id|dmi2-&gt;dmi_addr
comma
id|dmi1-&gt;dmi_addrlen
)paren
op_eq
l_int|0
)paren
)paren
suffix:semicolon
)brace
DECL|function|vlan_destroy_mc_list
r_static
r_inline
r_void
id|vlan_destroy_mc_list
c_func
(paren
r_struct
id|dev_mc_list
op_star
id|mc_list
)paren
(brace
r_struct
id|dev_mc_list
op_star
id|dmi
op_assign
id|mc_list
suffix:semicolon
r_struct
id|dev_mc_list
op_star
id|next
suffix:semicolon
r_while
c_loop
(paren
id|dmi
)paren
(brace
id|next
op_assign
id|dmi-&gt;next
suffix:semicolon
id|kfree
c_func
(paren
id|dmi
)paren
suffix:semicolon
id|dmi
op_assign
id|next
suffix:semicolon
)brace
)brace
macro_line|#endif /* __KERNEL__ */
multiline_comment|/* VLAN IOCTLs are found in sockios.h */
multiline_comment|/* Passed in vlan_ioctl_args structure to determine behaviour. */
DECL|enum|vlan_ioctl_cmds
r_enum
id|vlan_ioctl_cmds
(brace
DECL|enumerator|ADD_VLAN_CMD
id|ADD_VLAN_CMD
comma
DECL|enumerator|DEL_VLAN_CMD
id|DEL_VLAN_CMD
comma
DECL|enumerator|SET_VLAN_INGRESS_PRIORITY_CMD
id|SET_VLAN_INGRESS_PRIORITY_CMD
comma
DECL|enumerator|SET_VLAN_EGRESS_PRIORITY_CMD
id|SET_VLAN_EGRESS_PRIORITY_CMD
comma
DECL|enumerator|GET_VLAN_INGRESS_PRIORITY_CMD
id|GET_VLAN_INGRESS_PRIORITY_CMD
comma
DECL|enumerator|GET_VLAN_EGRESS_PRIORITY_CMD
id|GET_VLAN_EGRESS_PRIORITY_CMD
comma
DECL|enumerator|SET_VLAN_NAME_TYPE_CMD
id|SET_VLAN_NAME_TYPE_CMD
comma
DECL|enumerator|SET_VLAN_FLAG_CMD
id|SET_VLAN_FLAG_CMD
)brace
suffix:semicolon
DECL|enum|vlan_name_types
r_enum
id|vlan_name_types
(brace
DECL|enumerator|VLAN_NAME_TYPE_PLUS_VID
id|VLAN_NAME_TYPE_PLUS_VID
comma
multiline_comment|/* Name will look like:  vlan0005 */
DECL|enumerator|VLAN_NAME_TYPE_RAW_PLUS_VID
id|VLAN_NAME_TYPE_RAW_PLUS_VID
comma
multiline_comment|/* name will look like:  eth1.0005 */
DECL|enumerator|VLAN_NAME_TYPE_PLUS_VID_NO_PAD
id|VLAN_NAME_TYPE_PLUS_VID_NO_PAD
comma
multiline_comment|/* Name will look like:  vlan5 */
DECL|enumerator|VLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD
id|VLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD
comma
multiline_comment|/* Name will look like:  eth0.5 */
DECL|enumerator|VLAN_NAME_TYPE_HIGHEST
id|VLAN_NAME_TYPE_HIGHEST
)brace
suffix:semicolon
DECL|struct|vlan_ioctl_args
r_struct
id|vlan_ioctl_args
(brace
DECL|member|cmd
r_int
id|cmd
suffix:semicolon
multiline_comment|/* Should be one of the vlan_ioctl_cmds enum above. */
DECL|member|device1
r_char
id|device1
(braket
l_int|24
)braket
suffix:semicolon
r_union
(brace
DECL|member|device2
r_char
id|device2
(braket
l_int|24
)braket
suffix:semicolon
DECL|member|VID
r_int
id|VID
suffix:semicolon
DECL|member|skb_priority
r_int
r_int
id|skb_priority
suffix:semicolon
DECL|member|name_type
r_int
r_int
id|name_type
suffix:semicolon
DECL|member|bind_type
r_int
r_int
id|bind_type
suffix:semicolon
DECL|member|flag
r_int
r_int
id|flag
suffix:semicolon
multiline_comment|/* Matches vlan_dev_info flags */
DECL|member|u
)brace
id|u
suffix:semicolon
DECL|member|vlan_qos
r_int
id|vlan_qos
suffix:semicolon
)brace
suffix:semicolon
macro_line|#endif /* !(_LINUX_IF_VLAN_H_) */
eof
