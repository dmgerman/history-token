macro_line|#ifndef _LINUX_PID_H
DECL|macro|_LINUX_PID_H
mdefine_line|#define _LINUX_PID_H
DECL|enum|pid_type
r_enum
id|pid_type
(brace
DECL|enumerator|PIDTYPE_PID
id|PIDTYPE_PID
comma
DECL|enumerator|PIDTYPE_PGID
id|PIDTYPE_PGID
comma
DECL|enumerator|PIDTYPE_SID
id|PIDTYPE_SID
comma
DECL|enumerator|PIDTYPE_MAX
id|PIDTYPE_MAX
)brace
suffix:semicolon
DECL|struct|pid
r_struct
id|pid
(brace
DECL|member|nr
r_int
id|nr
suffix:semicolon
DECL|member|count
id|atomic_t
id|count
suffix:semicolon
DECL|member|task
r_struct
id|task_struct
op_star
id|task
suffix:semicolon
DECL|member|task_list
r_struct
id|list_head
id|task_list
suffix:semicolon
DECL|member|hash_chain
r_struct
id|list_head
id|hash_chain
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|pid_link
r_struct
id|pid_link
(brace
DECL|member|pid_chain
r_struct
id|list_head
id|pid_chain
suffix:semicolon
DECL|member|pidptr
r_struct
id|pid
op_star
id|pidptr
suffix:semicolon
DECL|member|pid
r_struct
id|pid
id|pid
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|pid_task
mdefine_line|#define pid_task(elem, type) &bslash;&n;&t;list_entry(elem, struct task_struct, pids[type].pid_chain)
multiline_comment|/*&n; * attach_pid() must be called with the tasklist_lock write-held.&n; *&n; * It might unlock the tasklist_lock for allocation, so this&n; * function must be called after installing all other links of&n; * a new task.&n; */
r_extern
r_int
id|FASTCALL
c_func
(paren
id|attach_pid
c_func
(paren
r_struct
id|task_struct
op_star
comma
r_enum
id|pid_type
comma
r_int
)paren
)paren
suffix:semicolon
multiline_comment|/*&n; * detach_pid() must be called with the tasklist_lock write-held.&n; */
r_extern
r_void
id|FASTCALL
c_func
(paren
id|detach_pid
c_func
(paren
r_struct
id|task_struct
op_star
id|task
comma
r_enum
id|pid_type
)paren
)paren
suffix:semicolon
multiline_comment|/*&n; * look up a PID in the hash table. Must be called with the tasklist_lock&n; * held.&n; */
r_extern
r_struct
id|pid
op_star
id|FASTCALL
c_func
(paren
id|find_pid
c_func
(paren
r_enum
id|pid_type
comma
r_int
)paren
)paren
suffix:semicolon
r_extern
r_int
id|alloc_pidmap
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|FASTCALL
c_func
(paren
id|free_pidmap
c_func
(paren
r_int
)paren
)paren
suffix:semicolon
DECL|macro|for_each_task_pid
mdefine_line|#define for_each_task_pid(who, type, task, elem, pid)&t;&t;&bslash;&n;&t;if ((pid = find_pid(type, who)))&t;&t;&t;&bslash;&n;&t;        for (elem = pid-&gt;task_list.next,&t;&t;&t;&bslash;&n;&t;&t;&t;prefetch(elem-&gt;next),&t;&t;&t;&t;&bslash;&n;&t;&t;&t;task = pid_task(elem, type);&t;&t;&t;&bslash;&n;&t;&t;&t;elem != &amp;pid-&gt;task_list;&t;&t;&t;&bslash;&n;&t;&t;&t;elem = elem-&gt;next, prefetch(elem-&gt;next), &t;&bslash;&n;&t;&t;&t;task = pid_task(elem, type))
macro_line|#endif /* _LINUX_PID_H */
eof
