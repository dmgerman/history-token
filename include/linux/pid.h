macro_line|#ifndef _LINUX_PID_H
DECL|macro|_LINUX_PID_H
mdefine_line|#define _LINUX_PID_H
DECL|enum|pid_type
r_enum
id|pid_type
(brace
DECL|enumerator|PIDTYPE_PID
id|PIDTYPE_PID
comma
DECL|enumerator|PIDTYPE_TGID
id|PIDTYPE_TGID
comma
DECL|enumerator|PIDTYPE_PGID
id|PIDTYPE_PGID
comma
DECL|enumerator|PIDTYPE_SID
id|PIDTYPE_SID
comma
DECL|enumerator|PIDTYPE_MAX
id|PIDTYPE_MAX
)brace
suffix:semicolon
DECL|struct|pid
r_struct
id|pid
(brace
multiline_comment|/* Try to keep pid_chain in the same cacheline as nr for find_pid */
DECL|member|nr
r_int
id|nr
suffix:semicolon
DECL|member|pid_chain
r_struct
id|hlist_node
id|pid_chain
suffix:semicolon
multiline_comment|/* list of pids with the same nr, only one of them is in the hash */
DECL|member|pid_list
r_struct
id|list_head
id|pid_list
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|pid_task
mdefine_line|#define pid_task(elem, type) &bslash;&n;&t;list_entry(elem, struct task_struct, pids[type].pid_list)
multiline_comment|/*&n; * attach_pid() and detach_pid() must be called with the tasklist_lock&n; * write-held.&n; */
r_extern
r_int
id|FASTCALL
c_func
(paren
id|attach_pid
c_func
(paren
r_struct
id|task_struct
op_star
id|task
comma
r_enum
id|pid_type
id|type
comma
r_int
id|nr
)paren
)paren
suffix:semicolon
r_extern
r_void
id|FASTCALL
c_func
(paren
id|detach_pid
c_func
(paren
r_struct
id|task_struct
op_star
id|task
comma
r_enum
id|pid_type
)paren
)paren
suffix:semicolon
multiline_comment|/*&n; * look up a PID in the hash table. Must be called with the tasklist_lock&n; * held.&n; */
r_extern
r_struct
id|pid
op_star
id|FASTCALL
c_func
(paren
id|find_pid
c_func
(paren
r_enum
id|pid_type
comma
r_int
)paren
)paren
suffix:semicolon
r_extern
r_int
id|alloc_pidmap
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|FASTCALL
c_func
(paren
id|free_pidmap
c_func
(paren
r_int
)paren
)paren
suffix:semicolon
r_extern
r_void
id|switch_exec_pids
c_func
(paren
r_struct
id|task_struct
op_star
id|leader
comma
r_struct
id|task_struct
op_star
id|thread
)paren
suffix:semicolon
DECL|macro|do_each_task_pid
mdefine_line|#define do_each_task_pid(who, type, task)&t;&t;&t;&t;&bslash;&n;&t;if ((task = find_task_by_pid_type(type, who))) {&t;&t;&bslash;&n;&t;&t;prefetch((task)-&gt;pids[type].pid_list.next);&t;&t;&bslash;&n;&t;&t;do {
DECL|macro|while_each_task_pid
mdefine_line|#define while_each_task_pid(who, type, task)&t;&t;&t;&t;&bslash;&n;&t;&t;} while (task = pid_task((task)-&gt;pids[type].pid_list.next,&bslash;&n;&t;&t;&t;&t;&t;&t;type),&t;&t;&t;&bslash;&n;&t;&t;&t;prefetch((task)-&gt;pids[type].pid_list.next),&t;&bslash;&n;&t;&t;&t;hlist_unhashed(&amp;(task)-&gt;pids[type].pid_chain));&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;
macro_line|#endif /* _LINUX_PID_H */
eof
