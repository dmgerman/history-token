macro_line|#ifndef _LINUX_FS_H
DECL|macro|_LINUX_FS_H
mdefine_line|#define _LINUX_FS_H
multiline_comment|/*&n; * This file has definitions for some important file table&n; * structures etc.&n; */
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/linkage.h&gt;
macro_line|#include &lt;linux/limits.h&gt;
macro_line|#include &lt;linux/wait.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/kdev_t.h&gt;
macro_line|#include &lt;linux/ioctl.h&gt;
macro_line|#include &lt;linux/dcache.h&gt;
macro_line|#include &lt;linux/stat.h&gt;
macro_line|#include &lt;linux/cache.h&gt;
macro_line|#include &lt;linux/prio_tree.h&gt;
macro_line|#include &lt;linux/kobject.h&gt;
macro_line|#include &lt;asm/atomic.h&gt;
r_struct
id|iovec
suffix:semicolon
r_struct
id|nameidata
suffix:semicolon
r_struct
id|pipe_inode_info
suffix:semicolon
r_struct
id|poll_table_struct
suffix:semicolon
r_struct
id|kstatfs
suffix:semicolon
r_struct
id|vm_area_struct
suffix:semicolon
r_struct
id|vfsmount
suffix:semicolon
multiline_comment|/*&n; * It&squot;s silly to have NR_OPEN bigger than NR_FILE, but you can change&n; * the file limit at runtime and only root can increase the per-process&n; * nr_file rlimit, so it&squot;s safe to set up a ridiculously high absolute&n; * upper limit on files-per-process.&n; *&n; * Some programs (notably those using select()) may have to be &n; * recompiled to take full advantage of the new limits..  &n; */
multiline_comment|/* Fixed constants first: */
DECL|macro|NR_OPEN
macro_line|#undef NR_OPEN
DECL|macro|NR_OPEN
mdefine_line|#define NR_OPEN (1024*1024)&t;/* Absolute upper limit on fd num */
DECL|macro|INR_OPEN
mdefine_line|#define INR_OPEN 1024&t;&t;/* Initial setting for nfile rlimits */
DECL|macro|BLOCK_SIZE_BITS
mdefine_line|#define BLOCK_SIZE_BITS 10
DECL|macro|BLOCK_SIZE
mdefine_line|#define BLOCK_SIZE (1&lt;&lt;BLOCK_SIZE_BITS)
multiline_comment|/* And dynamically-tunable limits and defaults: */
DECL|struct|files_stat_struct
r_struct
id|files_stat_struct
(brace
DECL|member|nr_files
r_int
id|nr_files
suffix:semicolon
multiline_comment|/* read only */
DECL|member|nr_free_files
r_int
id|nr_free_files
suffix:semicolon
multiline_comment|/* read only */
DECL|member|max_files
r_int
id|max_files
suffix:semicolon
multiline_comment|/* tunable */
)brace
suffix:semicolon
r_extern
r_struct
id|files_stat_struct
id|files_stat
suffix:semicolon
DECL|struct|inodes_stat_t
r_struct
id|inodes_stat_t
(brace
DECL|member|nr_inodes
r_int
id|nr_inodes
suffix:semicolon
DECL|member|nr_unused
r_int
id|nr_unused
suffix:semicolon
DECL|member|dummy
r_int
id|dummy
(braket
l_int|5
)braket
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|inodes_stat_t
id|inodes_stat
suffix:semicolon
r_extern
r_int
id|leases_enable
comma
id|lease_break_time
suffix:semicolon
macro_line|#ifdef CONFIG_DNOTIFY
r_extern
r_int
id|dir_notify_enable
suffix:semicolon
macro_line|#endif
DECL|macro|NR_FILE
mdefine_line|#define NR_FILE  8192&t;/* this can well be larger on a larger system */
DECL|macro|MAY_EXEC
mdefine_line|#define MAY_EXEC 1
DECL|macro|MAY_WRITE
mdefine_line|#define MAY_WRITE 2
DECL|macro|MAY_READ
mdefine_line|#define MAY_READ 4
DECL|macro|MAY_APPEND
mdefine_line|#define MAY_APPEND 8
DECL|macro|FMODE_READ
mdefine_line|#define FMODE_READ 1
DECL|macro|FMODE_WRITE
mdefine_line|#define FMODE_WRITE 2
multiline_comment|/* Internal kernel extensions */
DECL|macro|FMODE_LSEEK
mdefine_line|#define FMODE_LSEEK&t;4
DECL|macro|FMODE_PREAD
mdefine_line|#define FMODE_PREAD&t;8
DECL|macro|FMODE_PWRITE
mdefine_line|#define FMODE_PWRITE&t;FMODE_PREAD&t;/* These go hand in hand */
DECL|macro|RW_MASK
mdefine_line|#define RW_MASK&t;&t;1
DECL|macro|RWA_MASK
mdefine_line|#define RWA_MASK&t;2
DECL|macro|READ
mdefine_line|#define READ 0
DECL|macro|WRITE
mdefine_line|#define WRITE 1
DECL|macro|READA
mdefine_line|#define READA 2&t;&t;/* read-ahead  - don&squot;t block if no resources */
DECL|macro|SPECIAL
mdefine_line|#define SPECIAL 4&t;/* For non-blockdevice requests in request queue */
DECL|macro|READ_SYNC
mdefine_line|#define READ_SYNC&t;(READ | (1 &lt;&lt; BIO_RW_SYNC))
DECL|macro|WRITE_SYNC
mdefine_line|#define WRITE_SYNC&t;(WRITE | (1 &lt;&lt; BIO_RW_SYNC))
DECL|macro|WRITE_BARRIER
mdefine_line|#define WRITE_BARRIER&t;((1 &lt;&lt; BIO_RW) | (1 &lt;&lt; BIO_RW_BARRIER))
DECL|macro|SEL_IN
mdefine_line|#define SEL_IN&t;&t;1
DECL|macro|SEL_OUT
mdefine_line|#define SEL_OUT&t;&t;2
DECL|macro|SEL_EX
mdefine_line|#define SEL_EX&t;&t;4
multiline_comment|/* public flags for file_system_type */
DECL|macro|FS_REQUIRES_DEV
mdefine_line|#define FS_REQUIRES_DEV 1 
DECL|macro|FS_BINARY_MOUNTDATA
mdefine_line|#define FS_BINARY_MOUNTDATA 2
DECL|macro|FS_REVAL_DOT
mdefine_line|#define FS_REVAL_DOT&t;16384&t;/* Check the paths &quot;.&quot;, &quot;..&quot; for staleness */
DECL|macro|FS_ODD_RENAME
mdefine_line|#define FS_ODD_RENAME&t;32768&t;/* Temporary stuff; will go away as soon&n;&t;&t;&t;&t;  * as nfs_rename() will be cleaned up&n;&t;&t;&t;&t;  */
multiline_comment|/*&n; * These are the fs-independent mount-flags: up to 32 flags are supported&n; */
DECL|macro|MS_RDONLY
mdefine_line|#define MS_RDONLY&t; 1&t;/* Mount read-only */
DECL|macro|MS_NOSUID
mdefine_line|#define MS_NOSUID&t; 2&t;/* Ignore suid and sgid bits */
DECL|macro|MS_NODEV
mdefine_line|#define MS_NODEV&t; 4&t;/* Disallow access to device special files */
DECL|macro|MS_NOEXEC
mdefine_line|#define MS_NOEXEC&t; 8&t;/* Disallow program execution */
DECL|macro|MS_SYNCHRONOUS
mdefine_line|#define MS_SYNCHRONOUS&t;16&t;/* Writes are synced at once */
DECL|macro|MS_REMOUNT
mdefine_line|#define MS_REMOUNT&t;32&t;/* Alter flags of a mounted FS */
DECL|macro|MS_MANDLOCK
mdefine_line|#define MS_MANDLOCK&t;64&t;/* Allow mandatory locks on an FS */
DECL|macro|MS_DIRSYNC
mdefine_line|#define MS_DIRSYNC&t;128&t;/* Directory modifications are synchronous */
DECL|macro|MS_NOATIME
mdefine_line|#define MS_NOATIME&t;1024&t;/* Do not update access times. */
DECL|macro|MS_NODIRATIME
mdefine_line|#define MS_NODIRATIME&t;2048&t;/* Do not update directory access times */
DECL|macro|MS_BIND
mdefine_line|#define MS_BIND&t;&t;4096
DECL|macro|MS_MOVE
mdefine_line|#define MS_MOVE&t;&t;8192
DECL|macro|MS_REC
mdefine_line|#define MS_REC&t;&t;16384
DECL|macro|MS_VERBOSE
mdefine_line|#define MS_VERBOSE&t;32768
DECL|macro|MS_POSIXACL
mdefine_line|#define MS_POSIXACL&t;(1&lt;&lt;16)&t;/* VFS does not apply the umask */
DECL|macro|MS_ACTIVE
mdefine_line|#define MS_ACTIVE&t;(1&lt;&lt;30)
DECL|macro|MS_NOUSER
mdefine_line|#define MS_NOUSER&t;(1&lt;&lt;31)
multiline_comment|/*&n; * Superblock flags that can be altered by MS_REMOUNT&n; */
DECL|macro|MS_RMT_MASK
mdefine_line|#define MS_RMT_MASK&t;(MS_RDONLY|MS_SYNCHRONOUS|MS_MANDLOCK|MS_NOATIME|&bslash;&n;&t;&t;&t; MS_NODIRATIME)
multiline_comment|/*&n; * Old magic mount flag and mask&n; */
DECL|macro|MS_MGC_VAL
mdefine_line|#define MS_MGC_VAL 0xC0ED0000
DECL|macro|MS_MGC_MSK
mdefine_line|#define MS_MGC_MSK 0xffff0000
multiline_comment|/* Inode flags - they have nothing to superblock flags now */
DECL|macro|S_SYNC
mdefine_line|#define S_SYNC&t;&t;1&t;/* Writes are synced at once */
DECL|macro|S_NOATIME
mdefine_line|#define S_NOATIME&t;2&t;/* Do not update access times */
DECL|macro|S_APPEND
mdefine_line|#define S_APPEND&t;4&t;/* Append-only file */
DECL|macro|S_IMMUTABLE
mdefine_line|#define S_IMMUTABLE&t;8&t;/* Immutable file */
DECL|macro|S_DEAD
mdefine_line|#define S_DEAD&t;&t;16&t;/* removed, but still open directory */
DECL|macro|S_NOQUOTA
mdefine_line|#define S_NOQUOTA&t;32&t;/* Inode is not counted to quota */
DECL|macro|S_DIRSYNC
mdefine_line|#define S_DIRSYNC&t;64&t;/* Directory modifications are synchronous */
DECL|macro|S_NOCMTIME
mdefine_line|#define S_NOCMTIME&t;128&t;/* Do not update file c/mtime */
DECL|macro|S_SWAPFILE
mdefine_line|#define S_SWAPFILE&t;256&t;/* Do not truncate: swapon got its bmaps */
multiline_comment|/*&n; * Note that nosuid etc flags are inode-specific: setting some file-system&n; * flags just means all the inodes inherit those flags by default. It might be&n; * possible to override it selectively if you really wanted to with some&n; * ioctl() that is not currently implemented.&n; *&n; * Exception: MS_RDONLY is always applied to the entire file system.&n; *&n; * Unfortunately, it is possible to change a filesystems flags with it mounted&n; * with files in use.  This means that all of the inodes will not have their&n; * i_flags updated.  Hence, i_flags no longer inherit the superblock mount&n; * flags, so these have to be checked separately. -- rmk@arm.uk.linux.org&n; */
DECL|macro|__IS_FLG
mdefine_line|#define __IS_FLG(inode,flg) ((inode)-&gt;i_sb-&gt;s_flags &amp; (flg))
DECL|macro|IS_RDONLY
mdefine_line|#define IS_RDONLY(inode) ((inode)-&gt;i_sb-&gt;s_flags &amp; MS_RDONLY)
DECL|macro|IS_SYNC
mdefine_line|#define IS_SYNC(inode)&t;&t;(__IS_FLG(inode, MS_SYNCHRONOUS) || &bslash;&n;&t;&t;&t;&t;&t;((inode)-&gt;i_flags &amp; S_SYNC))
DECL|macro|IS_DIRSYNC
mdefine_line|#define IS_DIRSYNC(inode)&t;(__IS_FLG(inode, MS_SYNCHRONOUS|MS_DIRSYNC) || &bslash;&n;&t;&t;&t;&t;&t;((inode)-&gt;i_flags &amp; (S_SYNC|S_DIRSYNC)))
DECL|macro|IS_MANDLOCK
mdefine_line|#define IS_MANDLOCK(inode)&t;__IS_FLG(inode, MS_MANDLOCK)
DECL|macro|IS_NOQUOTA
mdefine_line|#define IS_NOQUOTA(inode)&t;((inode)-&gt;i_flags &amp; S_NOQUOTA)
DECL|macro|IS_APPEND
mdefine_line|#define IS_APPEND(inode)&t;((inode)-&gt;i_flags &amp; S_APPEND)
DECL|macro|IS_IMMUTABLE
mdefine_line|#define IS_IMMUTABLE(inode)&t;((inode)-&gt;i_flags &amp; S_IMMUTABLE)
DECL|macro|IS_NOATIME
mdefine_line|#define IS_NOATIME(inode)&t;(__IS_FLG(inode, MS_NOATIME) || ((inode)-&gt;i_flags &amp; S_NOATIME))
DECL|macro|IS_NODIRATIME
mdefine_line|#define IS_NODIRATIME(inode)&t;__IS_FLG(inode, MS_NODIRATIME)
DECL|macro|IS_POSIXACL
mdefine_line|#define IS_POSIXACL(inode)&t;__IS_FLG(inode, MS_POSIXACL)
DECL|macro|IS_DEADDIR
mdefine_line|#define IS_DEADDIR(inode)&t;((inode)-&gt;i_flags &amp; S_DEAD)
DECL|macro|IS_NOCMTIME
mdefine_line|#define IS_NOCMTIME(inode)&t;((inode)-&gt;i_flags &amp; S_NOCMTIME)
DECL|macro|IS_SWAPFILE
mdefine_line|#define IS_SWAPFILE(inode)&t;((inode)-&gt;i_flags &amp; S_SWAPFILE)
multiline_comment|/* the read-only stuff doesn&squot;t really belong here, but any other place is&n;   probably as bad and I don&squot;t want to create yet another include file. */
DECL|macro|BLKROSET
mdefine_line|#define BLKROSET   _IO(0x12,93)&t;/* set device read-only (0 = read-write) */
DECL|macro|BLKROGET
mdefine_line|#define BLKROGET   _IO(0x12,94)&t;/* get read-only status (0 = read_write) */
DECL|macro|BLKRRPART
mdefine_line|#define BLKRRPART  _IO(0x12,95)&t;/* re-read partition table */
DECL|macro|BLKGETSIZE
mdefine_line|#define BLKGETSIZE _IO(0x12,96)&t;/* return device size /512 (long *arg) */
DECL|macro|BLKFLSBUF
mdefine_line|#define BLKFLSBUF  _IO(0x12,97)&t;/* flush buffer cache */
DECL|macro|BLKRASET
mdefine_line|#define BLKRASET   _IO(0x12,98)&t;/* set read ahead for block device */
DECL|macro|BLKRAGET
mdefine_line|#define BLKRAGET   _IO(0x12,99)&t;/* get current read ahead setting */
DECL|macro|BLKFRASET
mdefine_line|#define BLKFRASET  _IO(0x12,100)/* set filesystem (mm/filemap.c) read-ahead */
DECL|macro|BLKFRAGET
mdefine_line|#define BLKFRAGET  _IO(0x12,101)/* get filesystem (mm/filemap.c) read-ahead */
DECL|macro|BLKSECTSET
mdefine_line|#define BLKSECTSET _IO(0x12,102)/* set max sectors per request (ll_rw_blk.c) */
DECL|macro|BLKSECTGET
mdefine_line|#define BLKSECTGET _IO(0x12,103)/* get max sectors per request (ll_rw_blk.c) */
DECL|macro|BLKSSZGET
mdefine_line|#define BLKSSZGET  _IO(0x12,104)/* get block device sector size */
macro_line|#if 0
mdefine_line|#define BLKPG      _IO(0x12,105)/* See blkpg.h */
multiline_comment|/* Some people are morons.  Do not use sizeof! */
mdefine_line|#define BLKELVGET  _IOR(0x12,106,size_t)/* elevator get */
mdefine_line|#define BLKELVSET  _IOW(0x12,107,size_t)/* elevator set */
multiline_comment|/* This was here just to show that the number is taken -&n;   probably all these _IO(0x12,*) ioctls should be moved to blkpg.h. */
macro_line|#endif
multiline_comment|/* A jump here: 108-111 have been used for various private purposes. */
DECL|macro|BLKBSZGET
mdefine_line|#define BLKBSZGET  _IOR(0x12,112,size_t)
DECL|macro|BLKBSZSET
mdefine_line|#define BLKBSZSET  _IOW(0x12,113,size_t)
DECL|macro|BLKGETSIZE64
mdefine_line|#define BLKGETSIZE64 _IOR(0x12,114,size_t)&t;/* return device size in bytes (u64 *arg) */
DECL|macro|BMAP_IOCTL
mdefine_line|#define BMAP_IOCTL 1&t;&t;/* obsolete - kept for compatibility */
DECL|macro|FIBMAP
mdefine_line|#define FIBMAP&t;   _IO(0x00,1)&t;/* bmap access */
DECL|macro|FIGETBSZ
mdefine_line|#define FIGETBSZ   _IO(0x00,2)&t;/* get the block size used for bmap */
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/list.h&gt;
macro_line|#include &lt;linux/radix-tree.h&gt;
macro_line|#include &lt;linux/audit.h&gt;
macro_line|#include &lt;linux/init.h&gt;
macro_line|#include &lt;asm/semaphore.h&gt;
macro_line|#include &lt;asm/byteorder.h&gt;
multiline_comment|/* Used to be a macro which just called the function, now just a function */
r_extern
r_void
id|update_atime
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_void
id|__init
id|inode_init
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|__init
id|inode_init_early
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|__init
id|mnt_init
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|__init
id|files_init
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
r_struct
id|buffer_head
suffix:semicolon
DECL|typedef|get_block_t
r_typedef
r_int
(paren
id|get_block_t
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
id|sector_t
id|iblock
comma
r_struct
id|buffer_head
op_star
id|bh_result
comma
r_int
id|create
)paren
suffix:semicolon
DECL|typedef|get_blocks_t
r_typedef
r_int
(paren
id|get_blocks_t
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
id|sector_t
id|iblock
comma
r_int
r_int
id|max_blocks
comma
r_struct
id|buffer_head
op_star
id|bh_result
comma
r_int
id|create
)paren
suffix:semicolon
DECL|typedef|dio_iodone_t
r_typedef
r_void
(paren
id|dio_iodone_t
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
id|loff_t
id|offset
comma
id|ssize_t
id|bytes
comma
r_void
op_star
r_private
)paren
suffix:semicolon
multiline_comment|/*&n; * Attribute flags.  These should be or-ed together to figure out what&n; * has been changed!&n; */
DECL|macro|ATTR_MODE
mdefine_line|#define ATTR_MODE&t;1
DECL|macro|ATTR_UID
mdefine_line|#define ATTR_UID&t;2
DECL|macro|ATTR_GID
mdefine_line|#define ATTR_GID&t;4
DECL|macro|ATTR_SIZE
mdefine_line|#define ATTR_SIZE&t;8
DECL|macro|ATTR_ATIME
mdefine_line|#define ATTR_ATIME&t;16
DECL|macro|ATTR_MTIME
mdefine_line|#define ATTR_MTIME&t;32
DECL|macro|ATTR_CTIME
mdefine_line|#define ATTR_CTIME&t;64
DECL|macro|ATTR_ATIME_SET
mdefine_line|#define ATTR_ATIME_SET&t;128
DECL|macro|ATTR_MTIME_SET
mdefine_line|#define ATTR_MTIME_SET&t;256
DECL|macro|ATTR_FORCE
mdefine_line|#define ATTR_FORCE&t;512&t;/* Not a change, but a change it */
DECL|macro|ATTR_ATTR_FLAG
mdefine_line|#define ATTR_ATTR_FLAG&t;1024
DECL|macro|ATTR_KILL_SUID
mdefine_line|#define ATTR_KILL_SUID&t;2048
DECL|macro|ATTR_KILL_SGID
mdefine_line|#define ATTR_KILL_SGID&t;4096
multiline_comment|/*&n; * This is the Inode Attributes structure, used for notify_change().  It&n; * uses the above definitions as flags, to know which values have changed.&n; * Also, in this manner, a Filesystem can look at only the values it cares&n; * about.  Basically, these are the attributes that the VFS layer can&n; * request to change from the FS layer.&n; *&n; * Derek Atkins &lt;warlord@MIT.EDU&gt; 94-10-20&n; */
DECL|struct|iattr
r_struct
id|iattr
(brace
DECL|member|ia_valid
r_int
r_int
id|ia_valid
suffix:semicolon
DECL|member|ia_mode
id|umode_t
id|ia_mode
suffix:semicolon
DECL|member|ia_uid
id|uid_t
id|ia_uid
suffix:semicolon
DECL|member|ia_gid
id|gid_t
id|ia_gid
suffix:semicolon
DECL|member|ia_size
id|loff_t
id|ia_size
suffix:semicolon
DECL|member|ia_atime
r_struct
id|timespec
id|ia_atime
suffix:semicolon
DECL|member|ia_mtime
r_struct
id|timespec
id|ia_mtime
suffix:semicolon
DECL|member|ia_ctime
r_struct
id|timespec
id|ia_ctime
suffix:semicolon
DECL|member|ia_attr_flags
r_int
r_int
id|ia_attr_flags
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * This is the inode attributes flag definitions&n; */
DECL|macro|ATTR_FLAG_SYNCRONOUS
mdefine_line|#define ATTR_FLAG_SYNCRONOUS&t;1 &t;/* Syncronous write */
DECL|macro|ATTR_FLAG_NOATIME
mdefine_line|#define ATTR_FLAG_NOATIME&t;2 &t;/* Don&squot;t update atime */
DECL|macro|ATTR_FLAG_APPEND
mdefine_line|#define ATTR_FLAG_APPEND&t;4 &t;/* Append-only file */
DECL|macro|ATTR_FLAG_IMMUTABLE
mdefine_line|#define ATTR_FLAG_IMMUTABLE&t;8 &t;/* Immutable file */
DECL|macro|ATTR_FLAG_NODIRATIME
mdefine_line|#define ATTR_FLAG_NODIRATIME&t;16 &t;/* Don&squot;t update atime for directory */
multiline_comment|/*&n; * Includes for diskquotas.&n; */
macro_line|#include &lt;linux/quota.h&gt;
multiline_comment|/*&n; * oh the beauties of C type declarations.&n; */
r_struct
id|page
suffix:semicolon
r_struct
id|address_space
suffix:semicolon
r_struct
id|writeback_control
suffix:semicolon
r_struct
id|kiocb
suffix:semicolon
DECL|struct|address_space_operations
r_struct
id|address_space_operations
(brace
DECL|member|writepage
r_int
(paren
op_star
id|writepage
)paren
(paren
r_struct
id|page
op_star
id|page
comma
r_struct
id|writeback_control
op_star
id|wbc
)paren
suffix:semicolon
DECL|member|readpage
r_int
(paren
op_star
id|readpage
)paren
(paren
r_struct
id|file
op_star
comma
r_struct
id|page
op_star
)paren
suffix:semicolon
DECL|member|sync_page
r_int
(paren
op_star
id|sync_page
)paren
(paren
r_struct
id|page
op_star
)paren
suffix:semicolon
multiline_comment|/* Write back some dirty pages from this mapping. */
DECL|member|writepages
r_int
(paren
op_star
id|writepages
)paren
(paren
r_struct
id|address_space
op_star
comma
r_struct
id|writeback_control
op_star
)paren
suffix:semicolon
multiline_comment|/* Set a page dirty */
DECL|member|set_page_dirty
r_int
(paren
op_star
id|set_page_dirty
)paren
(paren
r_struct
id|page
op_star
id|page
)paren
suffix:semicolon
DECL|member|readpages
r_int
(paren
op_star
id|readpages
)paren
(paren
r_struct
id|file
op_star
id|filp
comma
r_struct
id|address_space
op_star
id|mapping
comma
r_struct
id|list_head
op_star
id|pages
comma
r_int
id|nr_pages
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * ext3 requires that a successful prepare_write() call be followed&n;&t; * by a commit_write() call - they must be balanced&n;&t; */
DECL|member|prepare_write
r_int
(paren
op_star
id|prepare_write
)paren
(paren
r_struct
id|file
op_star
comma
r_struct
id|page
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
DECL|member|commit_write
r_int
(paren
op_star
id|commit_write
)paren
(paren
r_struct
id|file
op_star
comma
r_struct
id|page
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
multiline_comment|/* Unfortunately this kludge is needed for FIBMAP. Don&squot;t use it */
DECL|member|bmap
id|sector_t
(paren
op_star
id|bmap
)paren
(paren
r_struct
id|address_space
op_star
comma
id|sector_t
)paren
suffix:semicolon
DECL|member|invalidatepage
r_int
(paren
op_star
id|invalidatepage
)paren
(paren
r_struct
id|page
op_star
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|releasepage
r_int
(paren
op_star
id|releasepage
)paren
(paren
r_struct
id|page
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|direct_IO
id|ssize_t
(paren
op_star
id|direct_IO
)paren
(paren
r_int
comma
r_struct
id|kiocb
op_star
comma
r_const
r_struct
id|iovec
op_star
id|iov
comma
id|loff_t
id|offset
comma
r_int
r_int
id|nr_segs
)paren
suffix:semicolon
)brace
suffix:semicolon
r_struct
id|backing_dev_info
suffix:semicolon
DECL|struct|address_space
r_struct
id|address_space
(brace
DECL|member|host
r_struct
id|inode
op_star
id|host
suffix:semicolon
multiline_comment|/* owner: inode, block_device */
DECL|member|page_tree
r_struct
id|radix_tree_root
id|page_tree
suffix:semicolon
multiline_comment|/* radix tree of all pages */
DECL|member|tree_lock
id|spinlock_t
id|tree_lock
suffix:semicolon
multiline_comment|/* and spinlock protecting it */
DECL|member|i_mmap_writable
r_int
r_int
id|i_mmap_writable
suffix:semicolon
multiline_comment|/* count VM_SHARED mappings */
DECL|member|i_mmap
r_struct
id|prio_tree_root
id|i_mmap
suffix:semicolon
multiline_comment|/* tree of private and shared mappings */
DECL|member|i_mmap_nonlinear
r_struct
id|list_head
id|i_mmap_nonlinear
suffix:semicolon
multiline_comment|/*list VM_NONLINEAR mappings */
DECL|member|i_mmap_lock
id|spinlock_t
id|i_mmap_lock
suffix:semicolon
multiline_comment|/* protect tree, count, list */
DECL|member|truncate_count
r_int
r_int
id|truncate_count
suffix:semicolon
multiline_comment|/* Cover race condition with truncate */
DECL|member|nrpages
r_int
r_int
id|nrpages
suffix:semicolon
multiline_comment|/* number of total pages */
DECL|member|writeback_index
id|pgoff_t
id|writeback_index
suffix:semicolon
multiline_comment|/* writeback starts here */
DECL|member|a_ops
r_struct
id|address_space_operations
op_star
id|a_ops
suffix:semicolon
multiline_comment|/* methods */
DECL|member|flags
r_int
r_int
id|flags
suffix:semicolon
multiline_comment|/* error bits/gfp mask */
DECL|member|backing_dev_info
r_struct
id|backing_dev_info
op_star
id|backing_dev_info
suffix:semicolon
multiline_comment|/* device readahead, etc */
DECL|member|private_lock
id|spinlock_t
id|private_lock
suffix:semicolon
multiline_comment|/* for use by the address_space */
DECL|member|private_list
r_struct
id|list_head
id|private_list
suffix:semicolon
multiline_comment|/* ditto */
DECL|member|assoc_mapping
r_struct
id|address_space
op_star
id|assoc_mapping
suffix:semicolon
multiline_comment|/* ditto */
)brace
id|__attribute__
c_func
(paren
(paren
id|aligned
c_func
(paren
r_sizeof
(paren
r_int
)paren
)paren
)paren
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * On most architectures that alignment is already the case; but&n;&t; * must be enforced here for CRIS, to let the least signficant bit&n;&t; * of struct page&squot;s &quot;mapping&quot; pointer be used for PAGE_MAPPING_ANON.&n;&t; */
DECL|struct|block_device
r_struct
id|block_device
(brace
DECL|member|bd_dev
id|dev_t
id|bd_dev
suffix:semicolon
multiline_comment|/* not a kdev_t - it&squot;s a search key */
DECL|member|bd_inode
r_struct
id|inode
op_star
id|bd_inode
suffix:semicolon
multiline_comment|/* will die */
DECL|member|bd_openers
r_int
id|bd_openers
suffix:semicolon
DECL|member|bd_sem
r_struct
id|semaphore
id|bd_sem
suffix:semicolon
multiline_comment|/* open/close mutex */
DECL|member|bd_mount_sem
r_struct
id|semaphore
id|bd_mount_sem
suffix:semicolon
multiline_comment|/* mount mutex */
DECL|member|bd_inodes
r_struct
id|list_head
id|bd_inodes
suffix:semicolon
DECL|member|bd_holder
r_void
op_star
id|bd_holder
suffix:semicolon
DECL|member|bd_holders
r_int
id|bd_holders
suffix:semicolon
DECL|member|bd_contains
r_struct
id|block_device
op_star
id|bd_contains
suffix:semicolon
DECL|member|bd_block_size
r_int
id|bd_block_size
suffix:semicolon
DECL|member|bd_part
r_struct
id|hd_struct
op_star
id|bd_part
suffix:semicolon
multiline_comment|/* number of times partitions within this device have been opened. */
DECL|member|bd_part_count
r_int
id|bd_part_count
suffix:semicolon
DECL|member|bd_invalidated
r_int
id|bd_invalidated
suffix:semicolon
DECL|member|bd_disk
r_struct
id|gendisk
op_star
id|bd_disk
suffix:semicolon
DECL|member|bd_list
r_struct
id|list_head
id|bd_list
suffix:semicolon
DECL|member|bd_inode_backing_dev_info
r_struct
id|backing_dev_info
op_star
id|bd_inode_backing_dev_info
suffix:semicolon
multiline_comment|/*&n;&t; * Private data.  You must have bd_claim&squot;ed the block_device&n;&t; * to use this.  NOTE:  bd_claim allows an owner to claim&n;&t; * the same device multiple times, the owner must take special&n;&t; * care to not mess up bd_private for that case.&n;&t; */
DECL|member|bd_private
r_int
r_int
id|bd_private
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * Radix-tree tags, for tagging dirty and writeback pages within the pagecache&n; * radix trees&n; */
DECL|macro|PAGECACHE_TAG_DIRTY
mdefine_line|#define PAGECACHE_TAG_DIRTY&t;0
DECL|macro|PAGECACHE_TAG_WRITEBACK
mdefine_line|#define PAGECACHE_TAG_WRITEBACK&t;1
r_int
id|mapping_tagged
c_func
(paren
r_struct
id|address_space
op_star
id|mapping
comma
r_int
id|tag
)paren
suffix:semicolon
multiline_comment|/*&n; * Might pages of this file be mapped into userspace?&n; */
DECL|function|mapping_mapped
r_static
r_inline
r_int
id|mapping_mapped
c_func
(paren
r_struct
id|address_space
op_star
id|mapping
)paren
(brace
r_return
op_logical_neg
id|prio_tree_empty
c_func
(paren
op_amp
id|mapping-&gt;i_mmap
)paren
op_logical_or
op_logical_neg
id|list_empty
c_func
(paren
op_amp
id|mapping-&gt;i_mmap_nonlinear
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Might pages of this file have been modified in userspace?&n; * Note that i_mmap_writable counts all VM_SHARED vmas: do_mmap_pgoff&n; * marks vma as VM_SHARED if it is shared, and the file was opened for&n; * writing i.e. vma may be mprotected writable even if now readonly.&n; */
DECL|function|mapping_writably_mapped
r_static
r_inline
r_int
id|mapping_writably_mapped
c_func
(paren
r_struct
id|address_space
op_star
id|mapping
)paren
(brace
r_return
id|mapping-&gt;i_mmap_writable
op_ne
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * Use sequence counter to get consistent i_size on 32-bit processors.&n; */
macro_line|#if BITS_PER_LONG==32 &amp;&amp; defined(CONFIG_SMP)
macro_line|#include &lt;linux/seqlock.h&gt;
DECL|macro|__NEED_I_SIZE_ORDERED
mdefine_line|#define __NEED_I_SIZE_ORDERED
DECL|macro|i_size_ordered_init
mdefine_line|#define i_size_ordered_init(inode) seqcount_init(&amp;inode-&gt;i_size_seqcount)
macro_line|#else
DECL|macro|i_size_ordered_init
mdefine_line|#define i_size_ordered_init(inode) do { } while (0)
macro_line|#endif
DECL|struct|inode
r_struct
id|inode
(brace
DECL|member|i_hash
r_struct
id|hlist_node
id|i_hash
suffix:semicolon
DECL|member|i_list
r_struct
id|list_head
id|i_list
suffix:semicolon
DECL|member|i_sb_list
r_struct
id|list_head
id|i_sb_list
suffix:semicolon
DECL|member|i_dentry
r_struct
id|list_head
id|i_dentry
suffix:semicolon
DECL|member|i_ino
r_int
r_int
id|i_ino
suffix:semicolon
DECL|member|i_count
id|atomic_t
id|i_count
suffix:semicolon
DECL|member|i_mode
id|umode_t
id|i_mode
suffix:semicolon
DECL|member|i_nlink
r_int
r_int
id|i_nlink
suffix:semicolon
DECL|member|i_uid
id|uid_t
id|i_uid
suffix:semicolon
DECL|member|i_gid
id|gid_t
id|i_gid
suffix:semicolon
DECL|member|i_rdev
id|dev_t
id|i_rdev
suffix:semicolon
DECL|member|i_size
id|loff_t
id|i_size
suffix:semicolon
DECL|member|i_atime
r_struct
id|timespec
id|i_atime
suffix:semicolon
DECL|member|i_mtime
r_struct
id|timespec
id|i_mtime
suffix:semicolon
DECL|member|i_ctime
r_struct
id|timespec
id|i_ctime
suffix:semicolon
DECL|member|i_blkbits
r_int
r_int
id|i_blkbits
suffix:semicolon
DECL|member|i_blksize
r_int
r_int
id|i_blksize
suffix:semicolon
DECL|member|i_version
r_int
r_int
id|i_version
suffix:semicolon
DECL|member|i_blocks
r_int
r_int
id|i_blocks
suffix:semicolon
DECL|member|i_bytes
r_int
r_int
id|i_bytes
suffix:semicolon
DECL|member|i_sock
r_int
r_char
id|i_sock
suffix:semicolon
DECL|member|i_lock
id|spinlock_t
id|i_lock
suffix:semicolon
multiline_comment|/* i_blocks, i_bytes, maybe i_size */
DECL|member|i_sem
r_struct
id|semaphore
id|i_sem
suffix:semicolon
DECL|member|i_alloc_sem
r_struct
id|rw_semaphore
id|i_alloc_sem
suffix:semicolon
DECL|member|i_op
r_struct
id|inode_operations
op_star
id|i_op
suffix:semicolon
DECL|member|i_fop
r_struct
id|file_operations
op_star
id|i_fop
suffix:semicolon
multiline_comment|/* former -&gt;i_op-&gt;default_file_ops */
DECL|member|i_sb
r_struct
id|super_block
op_star
id|i_sb
suffix:semicolon
DECL|member|i_flock
r_struct
id|file_lock
op_star
id|i_flock
suffix:semicolon
DECL|member|i_mapping
r_struct
id|address_space
op_star
id|i_mapping
suffix:semicolon
DECL|member|i_data
r_struct
id|address_space
id|i_data
suffix:semicolon
macro_line|#ifdef CONFIG_QUOTA
DECL|member|i_dquot
r_struct
id|dquot
op_star
id|i_dquot
(braket
id|MAXQUOTAS
)braket
suffix:semicolon
macro_line|#endif
multiline_comment|/* These three should probably be a union */
DECL|member|i_devices
r_struct
id|list_head
id|i_devices
suffix:semicolon
DECL|member|i_pipe
r_struct
id|pipe_inode_info
op_star
id|i_pipe
suffix:semicolon
DECL|member|i_bdev
r_struct
id|block_device
op_star
id|i_bdev
suffix:semicolon
DECL|member|i_cdev
r_struct
id|cdev
op_star
id|i_cdev
suffix:semicolon
DECL|member|i_cindex
r_int
id|i_cindex
suffix:semicolon
DECL|member|i_generation
id|__u32
id|i_generation
suffix:semicolon
macro_line|#ifdef CONFIG_DNOTIFY
DECL|member|i_dnotify_mask
r_int
r_int
id|i_dnotify_mask
suffix:semicolon
multiline_comment|/* Directory notify events */
DECL|member|i_dnotify
r_struct
id|dnotify_struct
op_star
id|i_dnotify
suffix:semicolon
multiline_comment|/* for directory notifications */
macro_line|#endif
DECL|member|i_state
r_int
r_int
id|i_state
suffix:semicolon
DECL|member|dirtied_when
r_int
r_int
id|dirtied_when
suffix:semicolon
multiline_comment|/* jiffies of first dirtying */
DECL|member|i_flags
r_int
r_int
id|i_flags
suffix:semicolon
DECL|member|i_writecount
id|atomic_t
id|i_writecount
suffix:semicolon
DECL|member|i_security
r_void
op_star
id|i_security
suffix:semicolon
r_union
(brace
DECL|member|generic_ip
r_void
op_star
id|generic_ip
suffix:semicolon
DECL|member|u
)brace
id|u
suffix:semicolon
macro_line|#ifdef __NEED_I_SIZE_ORDERED
DECL|member|i_size_seqcount
id|seqcount_t
id|i_size_seqcount
suffix:semicolon
macro_line|#endif
)brace
suffix:semicolon
multiline_comment|/*&n; * NOTE: in a 32bit arch with a preemptable kernel and&n; * an UP compile the i_size_read/write must be atomic&n; * with respect to the local cpu (unlike with preempt disabled),&n; * but they don&squot;t need to be atomic with respect to other cpus like in&n; * true SMP (so they need either to either locally disable irq around&n; * the read or for example on x86 they can be still implemented as a&n; * cmpxchg8b without the need of the lock prefix). For SMP compiles&n; * and 64bit archs it makes no difference if preempt is enabled or not.&n; */
DECL|function|i_size_read
r_static
r_inline
id|loff_t
id|i_size_read
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
macro_line|#if BITS_PER_LONG==32 &amp;&amp; defined(CONFIG_SMP)
id|loff_t
id|i_size
suffix:semicolon
r_int
r_int
id|seq
suffix:semicolon
r_do
(brace
id|seq
op_assign
id|read_seqcount_begin
c_func
(paren
op_amp
id|inode-&gt;i_size_seqcount
)paren
suffix:semicolon
id|i_size
op_assign
id|inode-&gt;i_size
suffix:semicolon
)brace
r_while
c_loop
(paren
id|read_seqcount_retry
c_func
(paren
op_amp
id|inode-&gt;i_size_seqcount
comma
id|seq
)paren
)paren
suffix:semicolon
r_return
id|i_size
suffix:semicolon
macro_line|#elif BITS_PER_LONG==32 &amp;&amp; defined(CONFIG_PREEMPT)
id|loff_t
id|i_size
suffix:semicolon
id|preempt_disable
c_func
(paren
)paren
suffix:semicolon
id|i_size
op_assign
id|inode-&gt;i_size
suffix:semicolon
id|preempt_enable
c_func
(paren
)paren
suffix:semicolon
r_return
id|i_size
suffix:semicolon
macro_line|#else
r_return
id|inode-&gt;i_size
suffix:semicolon
macro_line|#endif
)brace
DECL|function|i_size_write
r_static
r_inline
r_void
id|i_size_write
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
id|loff_t
id|i_size
)paren
(brace
macro_line|#if BITS_PER_LONG==32 &amp;&amp; defined(CONFIG_SMP)
id|write_seqcount_begin
c_func
(paren
op_amp
id|inode-&gt;i_size_seqcount
)paren
suffix:semicolon
id|inode-&gt;i_size
op_assign
id|i_size
suffix:semicolon
id|write_seqcount_end
c_func
(paren
op_amp
id|inode-&gt;i_size_seqcount
)paren
suffix:semicolon
macro_line|#elif BITS_PER_LONG==32 &amp;&amp; defined(CONFIG_PREEMPT)
id|preempt_disable
c_func
(paren
)paren
suffix:semicolon
id|inode-&gt;i_size
op_assign
id|i_size
suffix:semicolon
id|preempt_enable
c_func
(paren
)paren
suffix:semicolon
macro_line|#else
id|inode-&gt;i_size
op_assign
id|i_size
suffix:semicolon
macro_line|#endif
)brace
DECL|function|iminor
r_static
r_inline
r_int
id|iminor
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
r_return
id|MINOR
c_func
(paren
id|inode-&gt;i_rdev
)paren
suffix:semicolon
)brace
DECL|function|imajor
r_static
r_inline
r_int
id|imajor
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
r_return
id|MAJOR
c_func
(paren
id|inode-&gt;i_rdev
)paren
suffix:semicolon
)brace
r_extern
r_struct
id|block_device
op_star
id|I_BDEV
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
suffix:semicolon
DECL|struct|fown_struct
r_struct
id|fown_struct
(brace
DECL|member|lock
id|rwlock_t
id|lock
suffix:semicolon
multiline_comment|/* protects pid, uid, euid fields */
DECL|member|pid
r_int
id|pid
suffix:semicolon
multiline_comment|/* pid or -pgrp where SIGIO should be sent */
DECL|member|uid
DECL|member|euid
id|uid_t
id|uid
comma
id|euid
suffix:semicolon
multiline_comment|/* uid/euid of process setting the owner */
DECL|member|security
r_void
op_star
id|security
suffix:semicolon
DECL|member|signum
r_int
id|signum
suffix:semicolon
multiline_comment|/* posix.1b rt signal to be delivered on IO */
)brace
suffix:semicolon
multiline_comment|/*&n; * Track a single file&squot;s readahead state&n; */
DECL|struct|file_ra_state
r_struct
id|file_ra_state
(brace
DECL|member|start
r_int
r_int
id|start
suffix:semicolon
multiline_comment|/* Current window */
DECL|member|size
r_int
r_int
id|size
suffix:semicolon
DECL|member|flags
r_int
r_int
id|flags
suffix:semicolon
multiline_comment|/* ra flags RA_FLAG_xxx*/
DECL|member|cache_hit
r_int
r_int
id|cache_hit
suffix:semicolon
multiline_comment|/* cache hit count*/
DECL|member|prev_page
r_int
r_int
id|prev_page
suffix:semicolon
multiline_comment|/* Cache last read() position */
DECL|member|ahead_start
r_int
r_int
id|ahead_start
suffix:semicolon
multiline_comment|/* Ahead window */
DECL|member|ahead_size
r_int
r_int
id|ahead_size
suffix:semicolon
DECL|member|ra_pages
r_int
r_int
id|ra_pages
suffix:semicolon
multiline_comment|/* Maximum readahead window */
DECL|member|mmap_hit
r_int
r_int
id|mmap_hit
suffix:semicolon
multiline_comment|/* Cache hit stat for mmap accesses */
DECL|member|mmap_miss
r_int
r_int
id|mmap_miss
suffix:semicolon
multiline_comment|/* Cache miss stat for mmap accesses */
)brace
suffix:semicolon
DECL|macro|RA_FLAG_MISS
mdefine_line|#define RA_FLAG_MISS 0x01&t;/* a cache miss occured against this file */
DECL|macro|RA_FLAG_INCACHE
mdefine_line|#define RA_FLAG_INCACHE 0x02&t;/* file is already in cache */
DECL|struct|file
r_struct
id|file
(brace
DECL|member|f_list
r_struct
id|list_head
id|f_list
suffix:semicolon
DECL|member|f_dentry
r_struct
id|dentry
op_star
id|f_dentry
suffix:semicolon
DECL|member|f_vfsmnt
r_struct
id|vfsmount
op_star
id|f_vfsmnt
suffix:semicolon
DECL|member|f_op
r_struct
id|file_operations
op_star
id|f_op
suffix:semicolon
DECL|member|f_count
id|atomic_t
id|f_count
suffix:semicolon
DECL|member|f_flags
r_int
r_int
id|f_flags
suffix:semicolon
DECL|member|f_mode
id|mode_t
id|f_mode
suffix:semicolon
DECL|member|f_error
r_int
id|f_error
suffix:semicolon
DECL|member|f_pos
id|loff_t
id|f_pos
suffix:semicolon
DECL|member|f_owner
r_struct
id|fown_struct
id|f_owner
suffix:semicolon
DECL|member|f_uid
DECL|member|f_gid
r_int
r_int
id|f_uid
comma
id|f_gid
suffix:semicolon
DECL|member|f_ra
r_struct
id|file_ra_state
id|f_ra
suffix:semicolon
DECL|member|f_version
r_int
r_int
id|f_version
suffix:semicolon
DECL|member|f_security
r_void
op_star
id|f_security
suffix:semicolon
multiline_comment|/* needed for tty driver, and maybe others */
DECL|member|private_data
r_void
op_star
id|private_data
suffix:semicolon
macro_line|#ifdef CONFIG_EPOLL
multiline_comment|/* Used by fs/eventpoll.c to link all the hooks to this file */
DECL|member|f_ep_links
r_struct
id|list_head
id|f_ep_links
suffix:semicolon
DECL|member|f_ep_lock
id|spinlock_t
id|f_ep_lock
suffix:semicolon
macro_line|#endif /* #ifdef CONFIG_EPOLL */
DECL|member|f_mapping
r_struct
id|address_space
op_star
id|f_mapping
suffix:semicolon
)brace
suffix:semicolon
r_extern
id|spinlock_t
id|files_lock
suffix:semicolon
DECL|macro|file_list_lock
mdefine_line|#define file_list_lock() spin_lock(&amp;files_lock);
DECL|macro|file_list_unlock
mdefine_line|#define file_list_unlock() spin_unlock(&amp;files_lock);
DECL|macro|get_file
mdefine_line|#define get_file(x)&t;atomic_inc(&amp;(x)-&gt;f_count)
DECL|macro|file_count
mdefine_line|#define file_count(x)&t;atomic_read(&amp;(x)-&gt;f_count)
DECL|macro|MAX_NON_LFS
mdefine_line|#define&t;MAX_NON_LFS&t;((1UL&lt;&lt;31) - 1)
multiline_comment|/* Page cache limit. The filesystems should put that into their s_maxbytes &n;   limits, otherwise bad things can happen in VM. */
macro_line|#if BITS_PER_LONG==32
DECL|macro|MAX_LFS_FILESIZE
mdefine_line|#define MAX_LFS_FILESIZE&t;(((u64)PAGE_CACHE_SIZE &lt;&lt; (BITS_PER_LONG-1))-1) 
macro_line|#elif BITS_PER_LONG==64
DECL|macro|MAX_LFS_FILESIZE
mdefine_line|#define MAX_LFS_FILESIZE &t;0x7fffffffffffffffUL
macro_line|#endif
DECL|macro|FL_POSIX
mdefine_line|#define FL_POSIX&t;1
DECL|macro|FL_FLOCK
mdefine_line|#define FL_FLOCK&t;2
DECL|macro|FL_ACCESS
mdefine_line|#define FL_ACCESS&t;8&t;/* not trying to lock, just looking */
DECL|macro|FL_LOCKD
mdefine_line|#define FL_LOCKD&t;16&t;/* lock held by rpc.lockd */
DECL|macro|FL_LEASE
mdefine_line|#define FL_LEASE&t;32&t;/* lease held on this file */
DECL|macro|FL_SLEEP
mdefine_line|#define FL_SLEEP&t;128&t;/* A blocking lock */
multiline_comment|/*&n; * The POSIX file lock owner is determined by&n; * the &quot;struct files_struct&quot; in the thread group&n; * (or NULL for no owner - BSD locks).&n; *&n; * Lockd stuffs a &quot;host&quot; pointer into this.&n; */
DECL|typedef|fl_owner_t
r_typedef
r_struct
id|files_struct
op_star
id|fl_owner_t
suffix:semicolon
DECL|struct|file_lock_operations
r_struct
id|file_lock_operations
(brace
DECL|member|fl_insert
r_void
(paren
op_star
id|fl_insert
)paren
(paren
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
multiline_comment|/* lock insertion callback */
DECL|member|fl_remove
r_void
(paren
op_star
id|fl_remove
)paren
(paren
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
multiline_comment|/* lock removal callback */
DECL|member|fl_copy_lock
r_void
(paren
op_star
id|fl_copy_lock
)paren
(paren
r_struct
id|file_lock
op_star
comma
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
DECL|member|fl_release_private
r_void
(paren
op_star
id|fl_release_private
)paren
(paren
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|lock_manager_operations
r_struct
id|lock_manager_operations
(brace
DECL|member|fl_compare_owner
r_int
(paren
op_star
id|fl_compare_owner
)paren
(paren
r_struct
id|file_lock
op_star
comma
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
DECL|member|fl_notify
r_void
(paren
op_star
id|fl_notify
)paren
(paren
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
multiline_comment|/* unblock callback */
DECL|member|fl_copy_lock
r_void
(paren
op_star
id|fl_copy_lock
)paren
(paren
r_struct
id|file_lock
op_star
comma
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
DECL|member|fl_release_private
r_void
(paren
op_star
id|fl_release_private
)paren
(paren
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
DECL|member|fl_break
r_void
(paren
op_star
id|fl_break
)paren
(paren
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* that will die - we need it for nfs_lock_info */
macro_line|#include &lt;linux/nfs_fs_i.h&gt;
DECL|struct|file_lock
r_struct
id|file_lock
(brace
DECL|member|fl_next
r_struct
id|file_lock
op_star
id|fl_next
suffix:semicolon
multiline_comment|/* singly linked list for this inode  */
DECL|member|fl_link
r_struct
id|list_head
id|fl_link
suffix:semicolon
multiline_comment|/* doubly linked list of all locks */
DECL|member|fl_block
r_struct
id|list_head
id|fl_block
suffix:semicolon
multiline_comment|/* circular list of blocked processes */
DECL|member|fl_owner
id|fl_owner_t
id|fl_owner
suffix:semicolon
DECL|member|fl_pid
r_int
r_int
id|fl_pid
suffix:semicolon
DECL|member|fl_wait
id|wait_queue_head_t
id|fl_wait
suffix:semicolon
DECL|member|fl_file
r_struct
id|file
op_star
id|fl_file
suffix:semicolon
DECL|member|fl_flags
r_int
r_char
id|fl_flags
suffix:semicolon
DECL|member|fl_type
r_int
r_char
id|fl_type
suffix:semicolon
DECL|member|fl_start
id|loff_t
id|fl_start
suffix:semicolon
DECL|member|fl_end
id|loff_t
id|fl_end
suffix:semicolon
DECL|member|fl_fasync
r_struct
id|fasync_struct
op_star
id|fl_fasync
suffix:semicolon
multiline_comment|/* for lease break notifications */
DECL|member|fl_break_time
r_int
r_int
id|fl_break_time
suffix:semicolon
multiline_comment|/* for nonblocking lease breaks */
DECL|member|fl_ops
r_struct
id|file_lock_operations
op_star
id|fl_ops
suffix:semicolon
multiline_comment|/* Callbacks for filesystems */
DECL|member|fl_lmops
r_struct
id|lock_manager_operations
op_star
id|fl_lmops
suffix:semicolon
multiline_comment|/* Callbacks for lockmanagers */
r_union
(brace
DECL|member|nfs_fl
r_struct
id|nfs_lock_info
id|nfs_fl
suffix:semicolon
DECL|member|fl_u
)brace
id|fl_u
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* The following constant reflects the upper bound of the file/locking space */
macro_line|#ifndef OFFSET_MAX
DECL|macro|INT_LIMIT
mdefine_line|#define INT_LIMIT(x)&t;(~((x)1 &lt;&lt; (sizeof(x)*8 - 1)))
DECL|macro|OFFSET_MAX
mdefine_line|#define OFFSET_MAX&t;INT_LIMIT(loff_t)
DECL|macro|OFFT_OFFSET_MAX
mdefine_line|#define OFFT_OFFSET_MAX&t;INT_LIMIT(off_t)
macro_line|#endif
r_extern
r_struct
id|list_head
id|file_lock_list
suffix:semicolon
macro_line|#include &lt;linux/fcntl.h&gt;
r_extern
r_int
id|fcntl_getlk
c_func
(paren
r_struct
id|file
op_star
comma
r_struct
id|flock
id|__user
op_star
)paren
suffix:semicolon
r_extern
r_int
id|fcntl_setlk
c_func
(paren
r_struct
id|file
op_star
comma
r_int
r_int
comma
r_struct
id|flock
id|__user
op_star
)paren
suffix:semicolon
macro_line|#if BITS_PER_LONG == 32
r_extern
r_int
id|fcntl_getlk64
c_func
(paren
r_struct
id|file
op_star
comma
r_struct
id|flock64
id|__user
op_star
)paren
suffix:semicolon
r_extern
r_int
id|fcntl_setlk64
c_func
(paren
r_struct
id|file
op_star
comma
r_int
r_int
comma
r_struct
id|flock64
id|__user
op_star
)paren
suffix:semicolon
macro_line|#endif
r_extern
r_void
id|send_sigio
c_func
(paren
r_struct
id|fown_struct
op_star
id|fown
comma
r_int
id|fd
comma
r_int
id|band
)paren
suffix:semicolon
r_extern
r_int
id|fcntl_setlease
c_func
(paren
r_int
r_int
id|fd
comma
r_struct
id|file
op_star
id|filp
comma
r_int
id|arg
)paren
suffix:semicolon
r_extern
r_int
id|fcntl_getlease
c_func
(paren
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
multiline_comment|/* fs/locks.c */
r_extern
r_void
id|locks_init_lock
c_func
(paren
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
r_extern
r_void
id|locks_copy_lock
c_func
(paren
r_struct
id|file_lock
op_star
comma
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
r_extern
r_void
id|locks_remove_posix
c_func
(paren
r_struct
id|file
op_star
comma
id|fl_owner_t
)paren
suffix:semicolon
r_extern
r_void
id|locks_remove_flock
c_func
(paren
r_struct
id|file
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|file_lock
op_star
id|posix_test_lock
c_func
(paren
r_struct
id|file
op_star
comma
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
r_extern
r_int
id|posix_lock_file
c_func
(paren
r_struct
id|file
op_star
comma
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
r_extern
r_int
id|posix_lock_file_wait
c_func
(paren
r_struct
id|file
op_star
comma
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
r_extern
r_void
id|posix_block_lock
c_func
(paren
r_struct
id|file_lock
op_star
comma
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
r_extern
r_void
id|posix_unblock_lock
c_func
(paren
r_struct
id|file
op_star
comma
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
r_extern
r_int
id|posix_locks_deadlock
c_func
(paren
r_struct
id|file_lock
op_star
comma
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
r_extern
r_int
id|flock_lock_file_wait
c_func
(paren
r_struct
id|file
op_star
id|filp
comma
r_struct
id|file_lock
op_star
id|fl
)paren
suffix:semicolon
r_extern
r_int
id|__break_lease
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_int
r_int
id|flags
)paren
suffix:semicolon
r_extern
r_void
id|lease_get_mtime
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|timespec
op_star
id|time
)paren
suffix:semicolon
r_extern
r_int
id|setlease
c_func
(paren
r_struct
id|file
op_star
comma
r_int
comma
r_struct
id|file_lock
op_star
op_star
)paren
suffix:semicolon
r_extern
r_void
id|remove_lease
c_func
(paren
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
r_extern
r_int
id|lock_may_read
c_func
(paren
r_struct
id|inode
op_star
comma
id|loff_t
id|start
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_int
id|lock_may_write
c_func
(paren
r_struct
id|inode
op_star
comma
id|loff_t
id|start
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|steal_locks
c_func
(paren
id|fl_owner_t
id|from
)paren
suffix:semicolon
DECL|struct|fasync_struct
r_struct
id|fasync_struct
(brace
DECL|member|magic
r_int
id|magic
suffix:semicolon
DECL|member|fa_fd
r_int
id|fa_fd
suffix:semicolon
DECL|member|fa_next
r_struct
id|fasync_struct
op_star
id|fa_next
suffix:semicolon
multiline_comment|/* singly linked list */
DECL|member|fa_file
r_struct
id|file
op_star
id|fa_file
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|FASYNC_MAGIC
mdefine_line|#define FASYNC_MAGIC 0x4601
multiline_comment|/* SMP safe fasync helpers: */
r_extern
r_int
id|fasync_helper
c_func
(paren
r_int
comma
r_struct
id|file
op_star
comma
r_int
comma
r_struct
id|fasync_struct
op_star
op_star
)paren
suffix:semicolon
multiline_comment|/* can be called from interrupts */
r_extern
r_void
id|kill_fasync
c_func
(paren
r_struct
id|fasync_struct
op_star
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
multiline_comment|/* only for net: no internal synchronization */
r_extern
r_void
id|__kill_fasync
c_func
(paren
r_struct
id|fasync_struct
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|f_setown
c_func
(paren
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|arg
comma
r_int
id|force
)paren
suffix:semicolon
r_extern
r_void
id|f_delown
c_func
(paren
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
r_extern
r_int
id|send_sigurg
c_func
(paren
r_struct
id|fown_struct
op_star
id|fown
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;Umount options&n; */
DECL|macro|MNT_FORCE
mdefine_line|#define MNT_FORCE&t;0x00000001&t;/* Attempt to forcibily umount */
DECL|macro|MNT_DETACH
mdefine_line|#define MNT_DETACH&t;0x00000002&t;/* Just detach from the tree */
DECL|macro|MNT_EXPIRE
mdefine_line|#define MNT_EXPIRE&t;0x00000004&t;/* Mark for expiry */
r_extern
r_struct
id|list_head
id|super_blocks
suffix:semicolon
r_extern
id|spinlock_t
id|sb_lock
suffix:semicolon
DECL|macro|sb_entry
mdefine_line|#define sb_entry(list)&t;list_entry((list), struct super_block, s_list)
DECL|macro|S_BIAS
mdefine_line|#define S_BIAS (1&lt;&lt;30)
DECL|struct|super_block
r_struct
id|super_block
(brace
DECL|member|s_list
r_struct
id|list_head
id|s_list
suffix:semicolon
multiline_comment|/* Keep this first */
DECL|member|s_dev
id|dev_t
id|s_dev
suffix:semicolon
multiline_comment|/* search index; _not_ kdev_t */
DECL|member|s_blocksize
r_int
r_int
id|s_blocksize
suffix:semicolon
DECL|member|s_old_blocksize
r_int
r_int
id|s_old_blocksize
suffix:semicolon
DECL|member|s_blocksize_bits
r_int
r_char
id|s_blocksize_bits
suffix:semicolon
DECL|member|s_dirt
r_int
r_char
id|s_dirt
suffix:semicolon
DECL|member|s_maxbytes
r_int
r_int
r_int
id|s_maxbytes
suffix:semicolon
multiline_comment|/* Max file size */
DECL|member|s_type
r_struct
id|file_system_type
op_star
id|s_type
suffix:semicolon
DECL|member|s_op
r_struct
id|super_operations
op_star
id|s_op
suffix:semicolon
DECL|member|dq_op
r_struct
id|dquot_operations
op_star
id|dq_op
suffix:semicolon
DECL|member|s_qcop
r_struct
id|quotactl_ops
op_star
id|s_qcop
suffix:semicolon
DECL|member|s_export_op
r_struct
id|export_operations
op_star
id|s_export_op
suffix:semicolon
DECL|member|s_flags
r_int
r_int
id|s_flags
suffix:semicolon
DECL|member|s_magic
r_int
r_int
id|s_magic
suffix:semicolon
DECL|member|s_root
r_struct
id|dentry
op_star
id|s_root
suffix:semicolon
DECL|member|s_umount
r_struct
id|rw_semaphore
id|s_umount
suffix:semicolon
DECL|member|s_lock
r_struct
id|semaphore
id|s_lock
suffix:semicolon
DECL|member|s_count
r_int
id|s_count
suffix:semicolon
DECL|member|s_syncing
r_int
id|s_syncing
suffix:semicolon
DECL|member|s_need_sync_fs
r_int
id|s_need_sync_fs
suffix:semicolon
DECL|member|s_active
id|atomic_t
id|s_active
suffix:semicolon
DECL|member|s_security
r_void
op_star
id|s_security
suffix:semicolon
DECL|member|s_xattr
r_struct
id|xattr_handler
op_star
op_star
id|s_xattr
suffix:semicolon
DECL|member|s_inodes
r_struct
id|list_head
id|s_inodes
suffix:semicolon
multiline_comment|/* all inodes */
DECL|member|s_dirty
r_struct
id|list_head
id|s_dirty
suffix:semicolon
multiline_comment|/* dirty inodes */
DECL|member|s_io
r_struct
id|list_head
id|s_io
suffix:semicolon
multiline_comment|/* parked for writeback */
DECL|member|s_anon
r_struct
id|hlist_head
id|s_anon
suffix:semicolon
multiline_comment|/* anonymous dentries for (nfs) exporting */
DECL|member|s_files
r_struct
id|list_head
id|s_files
suffix:semicolon
DECL|member|s_bdev
r_struct
id|block_device
op_star
id|s_bdev
suffix:semicolon
DECL|member|s_instances
r_struct
id|list_head
id|s_instances
suffix:semicolon
DECL|member|s_dquot
r_struct
id|quota_info
id|s_dquot
suffix:semicolon
multiline_comment|/* Diskquota specific options */
DECL|member|s_frozen
r_int
id|s_frozen
suffix:semicolon
DECL|member|s_wait_unfrozen
id|wait_queue_head_t
id|s_wait_unfrozen
suffix:semicolon
DECL|member|s_id
r_char
id|s_id
(braket
l_int|32
)braket
suffix:semicolon
multiline_comment|/* Informational name */
DECL|member|s_fs_info
r_void
op_star
id|s_fs_info
suffix:semicolon
multiline_comment|/* Filesystem private info */
multiline_comment|/*&n;&t; * The next field is for VFS *only*. No filesystems have any business&n;&t; * even looking at it. You had been warned.&n;&t; */
DECL|member|s_vfs_rename_sem
r_struct
id|semaphore
id|s_vfs_rename_sem
suffix:semicolon
multiline_comment|/* Kludge */
multiline_comment|/* Granuality of c/m/atime in ns.&n;&t;   Cannot be worse than a second */
DECL|member|s_time_gran
id|u32
id|s_time_gran
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|timespec
id|current_fs_time
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
suffix:semicolon
multiline_comment|/*&n; * Snapshotting support.&n; */
r_enum
(brace
DECL|enumerator|SB_UNFROZEN
id|SB_UNFROZEN
op_assign
l_int|0
comma
DECL|enumerator|SB_FREEZE_WRITE
id|SB_FREEZE_WRITE
op_assign
l_int|1
comma
DECL|enumerator|SB_FREEZE_TRANS
id|SB_FREEZE_TRANS
op_assign
l_int|2
comma
)brace
suffix:semicolon
DECL|macro|vfs_check_frozen
mdefine_line|#define vfs_check_frozen(sb, level) &bslash;&n;&t;wait_event((sb)-&gt;s_wait_unfrozen, ((sb)-&gt;s_frozen &lt; (level)))
multiline_comment|/*&n; * Superblock locking.&n; */
DECL|function|lock_super
r_static
r_inline
r_void
id|lock_super
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
(brace
id|down
c_func
(paren
op_amp
id|sb-&gt;s_lock
)paren
suffix:semicolon
)brace
DECL|function|unlock_super
r_static
r_inline
r_void
id|unlock_super
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
(brace
id|up
c_func
(paren
op_amp
id|sb-&gt;s_lock
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * VFS helper functions..&n; */
r_extern
r_int
id|vfs_create
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
r_extern
r_int
id|vfs_mkdir
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|vfs_mknod
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
comma
id|dev_t
)paren
suffix:semicolon
r_extern
r_int
id|vfs_symlink
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_const
r_char
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|vfs_link
c_func
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
r_int
id|vfs_rmdir
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
r_int
id|vfs_unlink
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
r_int
id|vfs_rename
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * VFS dentry helper functions.&n; */
r_extern
r_void
id|dentry_unhash
c_func
(paren
r_struct
id|dentry
op_star
id|dentry
)paren
suffix:semicolon
multiline_comment|/*&n; * File types&n; *&n; * NOTE! These match bits 12..15 of stat.st_mode&n; * (ie &quot;(i_mode &gt;&gt; 12) &amp; 15&quot;).&n; */
DECL|macro|DT_UNKNOWN
mdefine_line|#define DT_UNKNOWN&t;0
DECL|macro|DT_FIFO
mdefine_line|#define DT_FIFO&t;&t;1
DECL|macro|DT_CHR
mdefine_line|#define DT_CHR&t;&t;2
DECL|macro|DT_DIR
mdefine_line|#define DT_DIR&t;&t;4
DECL|macro|DT_BLK
mdefine_line|#define DT_BLK&t;&t;6
DECL|macro|DT_REG
mdefine_line|#define DT_REG&t;&t;8
DECL|macro|DT_LNK
mdefine_line|#define DT_LNK&t;&t;10
DECL|macro|DT_SOCK
mdefine_line|#define DT_SOCK&t;&t;12
DECL|macro|DT_WHT
mdefine_line|#define DT_WHT&t;&t;14
DECL|macro|OSYNC_METADATA
mdefine_line|#define OSYNC_METADATA&t;(1&lt;&lt;0)
DECL|macro|OSYNC_DATA
mdefine_line|#define OSYNC_DATA&t;(1&lt;&lt;1)
DECL|macro|OSYNC_INODE
mdefine_line|#define OSYNC_INODE&t;(1&lt;&lt;2)
r_int
id|generic_osync_inode
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|address_space
op_star
comma
r_int
)paren
suffix:semicolon
multiline_comment|/*&n; * This is the &quot;filldir&quot; function type, used by readdir() to let&n; * the kernel specify what kind of dirent layout it wants to have.&n; * This allows the kernel to read directories into kernel space or&n; * to have different dirent layouts depending on the binary type.&n; */
DECL|typedef|filldir_t
r_typedef
r_int
(paren
op_star
id|filldir_t
)paren
(paren
r_void
op_star
comma
r_const
r_char
op_star
comma
r_int
comma
id|loff_t
comma
id|ino_t
comma
r_int
)paren
suffix:semicolon
DECL|struct|block_device_operations
r_struct
id|block_device_operations
(brace
DECL|member|open
r_int
(paren
op_star
id|open
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
)paren
suffix:semicolon
DECL|member|release
r_int
(paren
op_star
id|release
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
)paren
suffix:semicolon
DECL|member|ioctl
r_int
(paren
op_star
id|ioctl
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
comma
r_int
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|media_changed
r_int
(paren
op_star
id|media_changed
)paren
(paren
r_struct
id|gendisk
op_star
)paren
suffix:semicolon
DECL|member|revalidate_disk
r_int
(paren
op_star
id|revalidate_disk
)paren
(paren
r_struct
id|gendisk
op_star
)paren
suffix:semicolon
DECL|member|owner
r_struct
id|module
op_star
id|owner
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * &quot;descriptor&quot; for what we&squot;re up to with a read for sendfile().&n; * This allows us to use the same read code yet&n; * have multiple different users of the data that&n; * we read from a file.&n; *&n; * The simplest case just copies the data to user&n; * mode.&n; */
r_typedef
r_struct
(brace
DECL|member|written
r_int
id|written
suffix:semicolon
DECL|member|count
r_int
id|count
suffix:semicolon
r_union
(brace
DECL|member|buf
r_char
id|__user
op_star
id|buf
suffix:semicolon
DECL|member|data
r_void
op_star
id|data
suffix:semicolon
DECL|member|arg
)brace
id|arg
suffix:semicolon
DECL|member|error
r_int
id|error
suffix:semicolon
DECL|typedef|read_descriptor_t
)brace
id|read_descriptor_t
suffix:semicolon
DECL|typedef|read_actor_t
r_typedef
r_int
(paren
op_star
id|read_actor_t
)paren
(paren
id|read_descriptor_t
op_star
comma
r_struct
id|page
op_star
comma
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
multiline_comment|/* These macros are for out of kernel modules to test that&n; * the kernel supports the unlocked_ioctl and compat_ioctl&n; * fields in struct file_operations. */
DECL|macro|HAVE_COMPAT_IOCTL
mdefine_line|#define HAVE_COMPAT_IOCTL 1
DECL|macro|HAVE_UNLOCKED_IOCTL
mdefine_line|#define HAVE_UNLOCKED_IOCTL 1
multiline_comment|/*&n; * NOTE:&n; * read, write, poll, fsync, readv, writev, unlocked_ioctl and compat_ioctl&n; * can be called without the big kernel lock held in all filesystems.&n; */
DECL|struct|file_operations
r_struct
id|file_operations
(brace
DECL|member|owner
r_struct
id|module
op_star
id|owner
suffix:semicolon
DECL|member|llseek
id|loff_t
(paren
op_star
id|llseek
)paren
(paren
r_struct
id|file
op_star
comma
id|loff_t
comma
r_int
)paren
suffix:semicolon
DECL|member|read
id|ssize_t
(paren
op_star
id|read
)paren
(paren
r_struct
id|file
op_star
comma
r_char
id|__user
op_star
comma
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
DECL|member|aio_read
id|ssize_t
(paren
op_star
id|aio_read
)paren
(paren
r_struct
id|kiocb
op_star
comma
r_char
id|__user
op_star
comma
r_int
comma
id|loff_t
)paren
suffix:semicolon
DECL|member|write
id|ssize_t
(paren
op_star
id|write
)paren
(paren
r_struct
id|file
op_star
comma
r_const
r_char
id|__user
op_star
comma
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
DECL|member|aio_write
id|ssize_t
(paren
op_star
id|aio_write
)paren
(paren
r_struct
id|kiocb
op_star
comma
r_const
r_char
id|__user
op_star
comma
r_int
comma
id|loff_t
)paren
suffix:semicolon
DECL|member|readdir
r_int
(paren
op_star
id|readdir
)paren
(paren
r_struct
id|file
op_star
comma
r_void
op_star
comma
id|filldir_t
)paren
suffix:semicolon
DECL|member|poll
r_int
r_int
(paren
op_star
id|poll
)paren
(paren
r_struct
id|file
op_star
comma
r_struct
id|poll_table_struct
op_star
)paren
suffix:semicolon
DECL|member|ioctl
r_int
(paren
op_star
id|ioctl
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
comma
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|unlocked_ioctl
r_int
(paren
op_star
id|unlocked_ioctl
)paren
(paren
r_struct
id|file
op_star
comma
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|compat_ioctl
r_int
(paren
op_star
id|compat_ioctl
)paren
(paren
r_struct
id|file
op_star
comma
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|mmap
r_int
(paren
op_star
id|mmap
)paren
(paren
r_struct
id|file
op_star
comma
r_struct
id|vm_area_struct
op_star
)paren
suffix:semicolon
DECL|member|open
r_int
(paren
op_star
id|open
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
)paren
suffix:semicolon
DECL|member|flush
r_int
(paren
op_star
id|flush
)paren
(paren
r_struct
id|file
op_star
)paren
suffix:semicolon
DECL|member|release
r_int
(paren
op_star
id|release
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
)paren
suffix:semicolon
DECL|member|fsync
r_int
(paren
op_star
id|fsync
)paren
(paren
r_struct
id|file
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
id|datasync
)paren
suffix:semicolon
DECL|member|aio_fsync
r_int
(paren
op_star
id|aio_fsync
)paren
(paren
r_struct
id|kiocb
op_star
comma
r_int
id|datasync
)paren
suffix:semicolon
DECL|member|fasync
r_int
(paren
op_star
id|fasync
)paren
(paren
r_int
comma
r_struct
id|file
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|lock
r_int
(paren
op_star
id|lock
)paren
(paren
r_struct
id|file
op_star
comma
r_int
comma
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
DECL|member|readv
id|ssize_t
(paren
op_star
id|readv
)paren
(paren
r_struct
id|file
op_star
comma
r_const
r_struct
id|iovec
op_star
comma
r_int
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
DECL|member|writev
id|ssize_t
(paren
op_star
id|writev
)paren
(paren
r_struct
id|file
op_star
comma
r_const
r_struct
id|iovec
op_star
comma
r_int
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
DECL|member|sendfile
id|ssize_t
(paren
op_star
id|sendfile
)paren
(paren
r_struct
id|file
op_star
comma
id|loff_t
op_star
comma
r_int
comma
id|read_actor_t
comma
r_void
op_star
)paren
suffix:semicolon
DECL|member|sendpage
id|ssize_t
(paren
op_star
id|sendpage
)paren
(paren
r_struct
id|file
op_star
comma
r_struct
id|page
op_star
comma
r_int
comma
r_int
comma
id|loff_t
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|get_unmapped_area
r_int
r_int
(paren
op_star
id|get_unmapped_area
)paren
(paren
r_struct
id|file
op_star
comma
r_int
r_int
comma
r_int
r_int
comma
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|check_flags
r_int
(paren
op_star
id|check_flags
)paren
(paren
r_int
)paren
suffix:semicolon
DECL|member|dir_notify
r_int
(paren
op_star
id|dir_notify
)paren
(paren
r_struct
id|file
op_star
id|filp
comma
r_int
r_int
id|arg
)paren
suffix:semicolon
DECL|member|flock
r_int
(paren
op_star
id|flock
)paren
(paren
r_struct
id|file
op_star
comma
r_int
comma
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|inode_operations
r_struct
id|inode_operations
(brace
DECL|member|create
r_int
(paren
op_star
id|create
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
DECL|member|lookup
r_struct
id|dentry
op_star
(paren
op_star
id|lookup
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
DECL|member|link
r_int
(paren
op_star
id|link
)paren
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
DECL|member|unlink
r_int
(paren
op_star
id|unlink
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
DECL|member|symlink
r_int
(paren
op_star
id|symlink
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_const
r_char
op_star
)paren
suffix:semicolon
DECL|member|mkdir
r_int
(paren
op_star
id|mkdir
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|rmdir
r_int
(paren
op_star
id|rmdir
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
DECL|member|mknod
r_int
(paren
op_star
id|mknod
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
comma
id|dev_t
)paren
suffix:semicolon
DECL|member|rename
r_int
(paren
op_star
id|rename
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
DECL|member|readlink
r_int
(paren
op_star
id|readlink
)paren
(paren
r_struct
id|dentry
op_star
comma
r_char
id|__user
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|follow_link
r_int
(paren
op_star
id|follow_link
)paren
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
DECL|member|put_link
r_void
(paren
op_star
id|put_link
)paren
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
DECL|member|truncate
r_void
(paren
op_star
id|truncate
)paren
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|member|permission
r_int
(paren
op_star
id|permission
)paren
(paren
r_struct
id|inode
op_star
comma
r_int
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
DECL|member|setattr
r_int
(paren
op_star
id|setattr
)paren
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|iattr
op_star
)paren
suffix:semicolon
DECL|member|getattr
r_int
(paren
op_star
id|getattr
)paren
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_struct
id|dentry
op_star
comma
r_struct
id|kstat
op_star
)paren
suffix:semicolon
DECL|member|setxattr
r_int
(paren
op_star
id|setxattr
)paren
(paren
r_struct
id|dentry
op_star
comma
r_const
r_char
op_star
comma
r_const
r_void
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
DECL|member|getxattr
id|ssize_t
(paren
op_star
id|getxattr
)paren
(paren
r_struct
id|dentry
op_star
comma
r_const
r_char
op_star
comma
r_void
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|listxattr
id|ssize_t
(paren
op_star
id|listxattr
)paren
(paren
r_struct
id|dentry
op_star
comma
r_char
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|removexattr
r_int
(paren
op_star
id|removexattr
)paren
(paren
r_struct
id|dentry
op_star
comma
r_const
r_char
op_star
)paren
suffix:semicolon
)brace
suffix:semicolon
r_struct
id|seq_file
suffix:semicolon
r_extern
id|ssize_t
id|vfs_read
c_func
(paren
r_struct
id|file
op_star
comma
r_char
id|__user
op_star
comma
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
r_extern
id|ssize_t
id|vfs_write
c_func
(paren
r_struct
id|file
op_star
comma
r_const
r_char
id|__user
op_star
comma
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
r_extern
id|ssize_t
id|vfs_readv
c_func
(paren
r_struct
id|file
op_star
comma
r_const
r_struct
id|iovec
id|__user
op_star
comma
r_int
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
r_extern
id|ssize_t
id|vfs_writev
c_func
(paren
r_struct
id|file
op_star
comma
r_const
r_struct
id|iovec
id|__user
op_star
comma
r_int
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * NOTE: write_inode, delete_inode, clear_inode, put_inode can be called&n; * without the big kernel lock held in all filesystems.&n; */
DECL|struct|super_operations
r_struct
id|super_operations
(brace
DECL|member|alloc_inode
r_struct
id|inode
op_star
(paren
op_star
id|alloc_inode
)paren
(paren
r_struct
id|super_block
op_star
id|sb
)paren
suffix:semicolon
DECL|member|destroy_inode
r_void
(paren
op_star
id|destroy_inode
)paren
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|member|read_inode
r_void
(paren
op_star
id|read_inode
)paren
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|member|dirty_inode
r_void
(paren
op_star
id|dirty_inode
)paren
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|member|write_inode
r_int
(paren
op_star
id|write_inode
)paren
(paren
r_struct
id|inode
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|put_inode
r_void
(paren
op_star
id|put_inode
)paren
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|member|drop_inode
r_void
(paren
op_star
id|drop_inode
)paren
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|member|delete_inode
r_void
(paren
op_star
id|delete_inode
)paren
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|member|put_super
r_void
(paren
op_star
id|put_super
)paren
(paren
r_struct
id|super_block
op_star
)paren
suffix:semicolon
DECL|member|write_super
r_void
(paren
op_star
id|write_super
)paren
(paren
r_struct
id|super_block
op_star
)paren
suffix:semicolon
DECL|member|sync_fs
r_int
(paren
op_star
id|sync_fs
)paren
(paren
r_struct
id|super_block
op_star
id|sb
comma
r_int
id|wait
)paren
suffix:semicolon
DECL|member|write_super_lockfs
r_void
(paren
op_star
id|write_super_lockfs
)paren
(paren
r_struct
id|super_block
op_star
)paren
suffix:semicolon
DECL|member|unlockfs
r_void
(paren
op_star
id|unlockfs
)paren
(paren
r_struct
id|super_block
op_star
)paren
suffix:semicolon
DECL|member|statfs
r_int
(paren
op_star
id|statfs
)paren
(paren
r_struct
id|super_block
op_star
comma
r_struct
id|kstatfs
op_star
)paren
suffix:semicolon
DECL|member|remount_fs
r_int
(paren
op_star
id|remount_fs
)paren
(paren
r_struct
id|super_block
op_star
comma
r_int
op_star
comma
r_char
op_star
)paren
suffix:semicolon
DECL|member|clear_inode
r_void
(paren
op_star
id|clear_inode
)paren
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|member|umount_begin
r_void
(paren
op_star
id|umount_begin
)paren
(paren
r_struct
id|super_block
op_star
)paren
suffix:semicolon
DECL|member|show_options
r_int
(paren
op_star
id|show_options
)paren
(paren
r_struct
id|seq_file
op_star
comma
r_struct
id|vfsmount
op_star
)paren
suffix:semicolon
DECL|member|quota_read
id|ssize_t
(paren
op_star
id|quota_read
)paren
(paren
r_struct
id|super_block
op_star
comma
r_int
comma
r_char
op_star
comma
r_int
comma
id|loff_t
)paren
suffix:semicolon
DECL|member|quota_write
id|ssize_t
(paren
op_star
id|quota_write
)paren
(paren
r_struct
id|super_block
op_star
comma
r_int
comma
r_const
r_char
op_star
comma
r_int
comma
id|loff_t
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Inode state bits.  Protected by inode_lock. */
DECL|macro|I_DIRTY_SYNC
mdefine_line|#define I_DIRTY_SYNC&t;&t;1 /* Not dirty enough for O_DATASYNC */
DECL|macro|I_DIRTY_DATASYNC
mdefine_line|#define I_DIRTY_DATASYNC&t;2 /* Data-related inode changes pending */
DECL|macro|I_DIRTY_PAGES
mdefine_line|#define I_DIRTY_PAGES&t;&t;4 /* Data-related inode changes pending */
DECL|macro|__I_LOCK
mdefine_line|#define __I_LOCK&t;&t;3
DECL|macro|I_LOCK
mdefine_line|#define I_LOCK&t;&t;&t;(1 &lt;&lt; __I_LOCK)
DECL|macro|I_FREEING
mdefine_line|#define I_FREEING&t;&t;16
DECL|macro|I_CLEAR
mdefine_line|#define I_CLEAR&t;&t;&t;32
DECL|macro|I_NEW
mdefine_line|#define I_NEW&t;&t;&t;64
DECL|macro|I_DIRTY
mdefine_line|#define I_DIRTY (I_DIRTY_SYNC | I_DIRTY_DATASYNC | I_DIRTY_PAGES)
r_extern
r_void
id|__mark_inode_dirty
c_func
(paren
r_struct
id|inode
op_star
comma
r_int
)paren
suffix:semicolon
DECL|function|mark_inode_dirty
r_static
r_inline
r_void
id|mark_inode_dirty
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
id|__mark_inode_dirty
c_func
(paren
id|inode
comma
id|I_DIRTY
)paren
suffix:semicolon
)brace
DECL|function|mark_inode_dirty_sync
r_static
r_inline
r_void
id|mark_inode_dirty_sync
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
id|__mark_inode_dirty
c_func
(paren
id|inode
comma
id|I_DIRTY_SYNC
)paren
suffix:semicolon
)brace
DECL|function|touch_atime
r_static
r_inline
r_void
id|touch_atime
c_func
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_struct
id|dentry
op_star
id|dentry
)paren
(brace
multiline_comment|/* per-mountpoint checks will go here */
id|update_atime
c_func
(paren
id|dentry-&gt;d_inode
)paren
suffix:semicolon
)brace
DECL|function|file_accessed
r_static
r_inline
r_void
id|file_accessed
c_func
(paren
r_struct
id|file
op_star
id|file
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
(paren
id|file-&gt;f_flags
op_amp
id|O_NOATIME
)paren
)paren
id|touch_atime
c_func
(paren
id|file-&gt;f_vfsmnt
comma
id|file-&gt;f_dentry
)paren
suffix:semicolon
)brace
r_int
id|sync_inode
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|writeback_control
op_star
id|wbc
)paren
suffix:semicolon
multiline_comment|/**&n; * &amp;export_operations - for nfsd to communicate with file systems&n; * decode_fh:      decode a file handle fragment and return a &amp;struct dentry&n; * encode_fh:      encode a file handle fragment from a dentry&n; * get_name:       find the name for a given inode in a given directory&n; * get_parent:     find the parent of a given directory&n; * get_dentry:     find a dentry for the inode given a file handle sub-fragment&n; *&n; * Description:&n; *    The export_operations structure provides a means for nfsd to communicate&n; *    with a particular exported file system  - particularly enabling nfsd and&n; *    the filesystem to co-operate when dealing with file handles.&n; *&n; *    export_operations contains two basic operation for dealing with file handles,&n; *    decode_fh() and encode_fh(), and allows for some other operations to be defined&n; *    which standard helper routines use to get specific information from the&n; *    filesystem.&n; *&n; *    nfsd encodes information use to determine which filesystem a filehandle&n; *    applies to in the initial part of the file handle.  The remainder, termed a&n; *    file handle fragment, is controlled completely by the filesystem.&n; *    The standard helper routines assume that this fragment will contain one or two&n; *    sub-fragments, one which identifies the file, and one which may be used to&n; *    identify the (a) directory containing the file.&n; *&n; *    In some situations, nfsd needs to get a dentry which is connected into a&n; *    specific part of the file tree.  To allow for this, it passes the function&n; *    acceptable() together with a @context which can be used to see if the dentry&n; *    is acceptable.  As there can be multiple dentrys for a given file, the filesystem&n; *    should check each one for acceptability before looking for the next.  As soon&n; *    as an acceptable one is found, it should be returned.&n; *&n; * decode_fh:&n; *    @decode_fh is given a &amp;struct super_block (@sb), a file handle fragment (@fh, @fh_len)&n; *    and an acceptability testing function (@acceptable, @context).  It should return&n; *    a &amp;struct dentry which refers to the same file that the file handle fragment refers&n; *    to,  and which passes the acceptability test.  If it cannot, it should return&n; *    a %NULL pointer if the file was found but no acceptable &amp;dentries were available, or&n; *    a %ERR_PTR error code indicating why it couldn&squot;t be found (e.g. %ENOENT or %ENOMEM).&n; *&n; * encode_fh:&n; *    @encode_fh should store in the file handle fragment @fh (using at most @max_len bytes)&n; *    information that can be used by @decode_fh to recover the file refered to by the&n; *    &amp;struct dentry @de.  If the @connectable flag is set, the encode_fh() should store&n; *    sufficient information so that a good attempt can be made to find not only&n; *    the file but also it&squot;s place in the filesystem.   This typically means storing&n; *    a reference to de-&gt;d_parent in the filehandle fragment.&n; *    encode_fh() should return the number of bytes stored or a negative error code&n; *    such as %-ENOSPC&n; *&n; * get_name:&n; *    @get_name should find a name for the given @child in the given @parent directory.&n; *    The name should be stored in the @name (with the understanding that it is already&n; *    pointing to a a %NAME_MAX+1 sized buffer.   get_name() should return %0 on success,&n; *    a negative error code or error.&n; *    @get_name will be called without @parent-&gt;i_sem held.&n; *&n; * get_parent:&n; *    @get_parent should find the parent directory for the given @child which is also&n; *    a directory.  In the event that it cannot be found, or storage space cannot be&n; *    allocated, a %ERR_PTR should be returned.&n; *&n; * get_dentry:&n; *    Given a &amp;super_block (@sb) and a pointer to a file-system specific inode identifier,&n; *    possibly an inode number, (@inump) get_dentry() should find the identified inode and&n; *    return a dentry for that inode.&n; *    Any suitable dentry can be returned including, if necessary, a new dentry created&n; *    with d_alloc_root.  The caller can then find any other extant dentrys by following the&n; *    d_alias links.  If a new dentry was created using d_alloc_root, DCACHE_NFSD_DISCONNECTED&n; *    should be set, and the dentry should be d_rehash()ed.&n; *&n; *    If the inode cannot be found, either a %NULL pointer or an %ERR_PTR code can be returned.&n; *    The @inump will be whatever was passed to nfsd_find_fh_dentry() in either the&n; *    @obj or @parent parameters.&n; *&n; * Locking rules:&n; *  get_parent is called with child-&gt;d_inode-&gt;i_sem down&n; *  get_name is not (which is possibly inconsistent)&n; */
DECL|struct|export_operations
r_struct
id|export_operations
(brace
DECL|member|decode_fh
r_struct
id|dentry
op_star
(paren
op_star
id|decode_fh
)paren
(paren
r_struct
id|super_block
op_star
id|sb
comma
id|__u32
op_star
id|fh
comma
r_int
id|fh_len
comma
r_int
id|fh_type
comma
r_int
(paren
op_star
id|acceptable
)paren
(paren
r_void
op_star
id|context
comma
r_struct
id|dentry
op_star
id|de
)paren
comma
r_void
op_star
id|context
)paren
suffix:semicolon
DECL|member|encode_fh
r_int
(paren
op_star
id|encode_fh
)paren
(paren
r_struct
id|dentry
op_star
id|de
comma
id|__u32
op_star
id|fh
comma
r_int
op_star
id|max_len
comma
r_int
id|connectable
)paren
suffix:semicolon
multiline_comment|/* the following are only called from the filesystem itself */
DECL|member|get_name
r_int
(paren
op_star
id|get_name
)paren
(paren
r_struct
id|dentry
op_star
id|parent
comma
r_char
op_star
id|name
comma
r_struct
id|dentry
op_star
id|child
)paren
suffix:semicolon
DECL|member|get_parent
r_struct
id|dentry
op_star
(paren
op_star
id|get_parent
)paren
(paren
r_struct
id|dentry
op_star
id|child
)paren
suffix:semicolon
DECL|member|get_dentry
r_struct
id|dentry
op_star
(paren
op_star
id|get_dentry
)paren
(paren
r_struct
id|super_block
op_star
id|sb
comma
r_void
op_star
id|inump
)paren
suffix:semicolon
multiline_comment|/* This is set by the exporting module to a standard helper */
DECL|member|find_exported_dentry
r_struct
id|dentry
op_star
(paren
op_star
id|find_exported_dentry
)paren
(paren
r_struct
id|super_block
op_star
id|sb
comma
r_void
op_star
id|obj
comma
r_void
op_star
id|parent
comma
r_int
(paren
op_star
id|acceptable
)paren
(paren
r_void
op_star
id|context
comma
r_struct
id|dentry
op_star
id|de
)paren
comma
r_void
op_star
id|context
)paren
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|dentry
op_star
id|find_exported_dentry
c_func
(paren
r_struct
id|super_block
op_star
id|sb
comma
r_void
op_star
id|obj
comma
r_void
op_star
id|parent
comma
r_int
(paren
op_star
id|acceptable
)paren
(paren
r_void
op_star
id|context
comma
r_struct
id|dentry
op_star
id|de
)paren
comma
r_void
op_star
id|context
)paren
suffix:semicolon
DECL|struct|file_system_type
r_struct
id|file_system_type
(brace
DECL|member|name
r_const
r_char
op_star
id|name
suffix:semicolon
DECL|member|fs_flags
r_int
id|fs_flags
suffix:semicolon
DECL|member|get_sb
r_struct
id|super_block
op_star
(paren
op_star
id|get_sb
)paren
(paren
r_struct
id|file_system_type
op_star
comma
r_int
comma
r_const
r_char
op_star
comma
r_void
op_star
)paren
suffix:semicolon
DECL|member|kill_sb
r_void
(paren
op_star
id|kill_sb
)paren
(paren
r_struct
id|super_block
op_star
)paren
suffix:semicolon
DECL|member|owner
r_struct
id|module
op_star
id|owner
suffix:semicolon
DECL|member|next
r_struct
id|file_system_type
op_star
id|next
suffix:semicolon
DECL|member|fs_supers
r_struct
id|list_head
id|fs_supers
suffix:semicolon
)brace
suffix:semicolon
r_struct
id|super_block
op_star
id|get_sb_bdev
c_func
(paren
r_struct
id|file_system_type
op_star
id|fs_type
comma
r_int
id|flags
comma
r_const
r_char
op_star
id|dev_name
comma
r_void
op_star
id|data
comma
r_int
(paren
op_star
id|fill_super
)paren
(paren
r_struct
id|super_block
op_star
comma
r_void
op_star
comma
r_int
)paren
)paren
suffix:semicolon
r_struct
id|super_block
op_star
id|get_sb_single
c_func
(paren
r_struct
id|file_system_type
op_star
id|fs_type
comma
r_int
id|flags
comma
r_void
op_star
id|data
comma
r_int
(paren
op_star
id|fill_super
)paren
(paren
r_struct
id|super_block
op_star
comma
r_void
op_star
comma
r_int
)paren
)paren
suffix:semicolon
r_struct
id|super_block
op_star
id|get_sb_nodev
c_func
(paren
r_struct
id|file_system_type
op_star
id|fs_type
comma
r_int
id|flags
comma
r_void
op_star
id|data
comma
r_int
(paren
op_star
id|fill_super
)paren
(paren
r_struct
id|super_block
op_star
comma
r_void
op_star
comma
r_int
)paren
)paren
suffix:semicolon
r_void
id|generic_shutdown_super
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
suffix:semicolon
r_void
id|kill_block_super
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
suffix:semicolon
r_void
id|kill_anon_super
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
suffix:semicolon
r_void
id|kill_litter_super
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
suffix:semicolon
r_void
id|deactivate_super
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
suffix:semicolon
r_int
id|set_anon_super
c_func
(paren
r_struct
id|super_block
op_star
id|s
comma
r_void
op_star
id|data
)paren
suffix:semicolon
r_struct
id|super_block
op_star
id|sget
c_func
(paren
r_struct
id|file_system_type
op_star
id|type
comma
r_int
(paren
op_star
id|test
)paren
(paren
r_struct
id|super_block
op_star
comma
r_void
op_star
)paren
comma
r_int
(paren
op_star
id|set
)paren
(paren
r_struct
id|super_block
op_star
comma
r_void
op_star
)paren
comma
r_void
op_star
id|data
)paren
suffix:semicolon
r_struct
id|super_block
op_star
id|get_sb_pseudo
c_func
(paren
r_struct
id|file_system_type
op_star
comma
r_char
op_star
comma
r_struct
id|super_operations
op_star
id|ops
comma
r_int
r_int
)paren
suffix:semicolon
r_int
id|__put_super
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
suffix:semicolon
r_int
id|__put_super_and_need_restart
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
suffix:semicolon
r_void
id|unnamed_dev_init
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/* Alas, no aliases. Too much hassle with bringing module.h everywhere */
DECL|macro|fops_get
mdefine_line|#define fops_get(fops) &bslash;&n;&t;(((fops) &amp;&amp; try_module_get((fops)-&gt;owner) ? (fops) : NULL))
DECL|macro|fops_put
mdefine_line|#define fops_put(fops) &bslash;&n;&t;do { if (fops) module_put((fops)-&gt;owner); } while(0)
r_extern
r_int
id|register_filesystem
c_func
(paren
r_struct
id|file_system_type
op_star
)paren
suffix:semicolon
r_extern
r_int
id|unregister_filesystem
c_func
(paren
r_struct
id|file_system_type
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|vfsmount
op_star
id|kern_mount
c_func
(paren
r_struct
id|file_system_type
op_star
)paren
suffix:semicolon
r_extern
r_int
id|may_umount_tree
c_func
(paren
r_struct
id|vfsmount
op_star
)paren
suffix:semicolon
r_extern
r_int
id|may_umount
c_func
(paren
r_struct
id|vfsmount
op_star
)paren
suffix:semicolon
r_extern
r_int
id|do_mount
c_func
(paren
r_char
op_star
comma
r_char
op_star
comma
r_char
op_star
comma
r_int
r_int
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_int
id|vfs_statfs
c_func
(paren
r_struct
id|super_block
op_star
comma
r_struct
id|kstatfs
op_star
)paren
suffix:semicolon
DECL|macro|FLOCK_VERIFY_READ
mdefine_line|#define FLOCK_VERIFY_READ  1
DECL|macro|FLOCK_VERIFY_WRITE
mdefine_line|#define FLOCK_VERIFY_WRITE 2
r_extern
r_int
id|locks_mandatory_locked
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_int
id|locks_mandatory_area
c_func
(paren
r_int
comma
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
comma
id|loff_t
comma
r_int
)paren
suffix:semicolon
multiline_comment|/*&n; * Candidates for mandatory locking have the setgid bit set&n; * but no group execute bit -  an otherwise meaningless combination.&n; */
DECL|macro|MANDATORY_LOCK
mdefine_line|#define MANDATORY_LOCK(inode) &bslash;&n;&t;(IS_MANDLOCK(inode) &amp;&amp; ((inode)-&gt;i_mode &amp; (S_ISGID | S_IXGRP)) == S_ISGID)
DECL|function|locks_verify_locked
r_static
r_inline
r_int
id|locks_verify_locked
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
r_if
c_cond
(paren
id|MANDATORY_LOCK
c_func
(paren
id|inode
)paren
)paren
r_return
id|locks_mandatory_locked
c_func
(paren
id|inode
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|locks_verify_area
r_static
r_inline
r_int
id|locks_verify_area
c_func
(paren
r_int
id|read_write
comma
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
id|loff_t
id|offset
comma
r_int
id|count
)paren
(brace
r_if
c_cond
(paren
id|inode-&gt;i_flock
op_logical_and
id|MANDATORY_LOCK
c_func
(paren
id|inode
)paren
)paren
r_return
id|locks_mandatory_area
c_func
(paren
id|read_write
comma
id|inode
comma
id|filp
comma
id|offset
comma
id|count
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|locks_verify_truncate
r_static
r_inline
r_int
id|locks_verify_truncate
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
id|loff_t
id|size
)paren
(brace
r_if
c_cond
(paren
id|inode-&gt;i_flock
op_logical_and
id|MANDATORY_LOCK
c_func
(paren
id|inode
)paren
)paren
r_return
id|locks_mandatory_area
c_func
(paren
id|FLOCK_VERIFY_WRITE
comma
id|inode
comma
id|filp
comma
id|size
OL
id|inode-&gt;i_size
ques
c_cond
id|size
suffix:colon
id|inode-&gt;i_size
comma
(paren
id|size
OL
id|inode-&gt;i_size
ques
c_cond
id|inode-&gt;i_size
op_minus
id|size
suffix:colon
id|size
op_minus
id|inode-&gt;i_size
)paren
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|break_lease
r_static
r_inline
r_int
id|break_lease
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_int
r_int
id|mode
)paren
(brace
r_if
c_cond
(paren
id|inode-&gt;i_flock
)paren
r_return
id|__break_lease
c_func
(paren
id|inode
comma
id|mode
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/* fs/open.c */
r_extern
r_int
id|do_truncate
c_func
(paren
r_struct
id|dentry
op_star
comma
id|loff_t
id|start
)paren
suffix:semicolon
r_extern
r_struct
id|file
op_star
id|filp_open
c_func
(paren
r_const
r_char
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_struct
id|file
op_star
id|dentry_open
c_func
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|vfsmount
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|filp_close
c_func
(paren
r_struct
id|file
op_star
comma
id|fl_owner_t
id|id
)paren
suffix:semicolon
r_extern
r_char
op_star
id|getname
c_func
(paren
r_const
r_char
id|__user
op_star
)paren
suffix:semicolon
multiline_comment|/* fs/dcache.c */
r_extern
r_void
id|__init
id|vfs_caches_init_early
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|__init
id|vfs_caches_init
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
DECL|macro|__getname
mdefine_line|#define __getname()&t;kmem_cache_alloc(names_cachep, SLAB_KERNEL)
DECL|macro|__putname
mdefine_line|#define __putname(name) kmem_cache_free(names_cachep, (void *)(name))
macro_line|#ifndef CONFIG_AUDITSYSCALL
DECL|macro|putname
mdefine_line|#define putname(name)   __putname(name)
macro_line|#else
DECL|macro|putname
mdefine_line|#define putname(name)&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;if (unlikely(current-&gt;audit_context))&t;&t;&t;&bslash;&n;&t;&t;&t;audit_putname(name);&t;&t;&t;&t;&bslash;&n;&t;&t;else&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;__putname(name);&t;&t;&t;&t;&bslash;&n;&t;} while (0)
macro_line|#endif
r_extern
r_int
id|register_blkdev
c_func
(paren
r_int
r_int
comma
r_const
r_char
op_star
)paren
suffix:semicolon
r_extern
r_int
id|unregister_blkdev
c_func
(paren
r_int
r_int
comma
r_const
r_char
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|block_device
op_star
id|bdget
c_func
(paren
id|dev_t
)paren
suffix:semicolon
r_extern
r_void
id|bd_set_size
c_func
(paren
r_struct
id|block_device
op_star
comma
id|loff_t
id|size
)paren
suffix:semicolon
r_extern
r_void
id|bd_forget
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
suffix:semicolon
r_extern
r_void
id|bdput
c_func
(paren
r_struct
id|block_device
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|block_device
op_star
id|open_by_devnum
c_func
(paren
id|dev_t
comma
r_int
)paren
suffix:semicolon
r_extern
r_struct
id|file_operations
id|def_blk_fops
suffix:semicolon
r_extern
r_struct
id|address_space_operations
id|def_blk_aops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|def_chr_fops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|bad_sock_fops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|def_fifo_fops
suffix:semicolon
r_extern
r_int
id|ioctl_by_bdev
c_func
(paren
r_struct
id|block_device
op_star
comma
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
id|blkdev_ioctl
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
comma
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
id|blkdev_get
c_func
(paren
r_struct
id|block_device
op_star
comma
id|mode_t
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|blkdev_put
c_func
(paren
r_struct
id|block_device
op_star
)paren
suffix:semicolon
r_extern
r_int
id|bd_claim
c_func
(paren
r_struct
id|block_device
op_star
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_void
id|bd_release
c_func
(paren
r_struct
id|block_device
op_star
)paren
suffix:semicolon
multiline_comment|/* fs/char_dev.c */
r_extern
r_int
id|alloc_chrdev_region
c_func
(paren
id|dev_t
op_star
comma
r_int
comma
r_int
comma
r_const
r_char
op_star
)paren
suffix:semicolon
r_extern
r_int
id|register_chrdev_region
c_func
(paren
id|dev_t
comma
r_int
comma
r_const
r_char
op_star
)paren
suffix:semicolon
r_extern
r_int
id|register_chrdev
c_func
(paren
r_int
r_int
comma
r_const
r_char
op_star
comma
r_struct
id|file_operations
op_star
)paren
suffix:semicolon
r_extern
r_int
id|unregister_chrdev
c_func
(paren
r_int
r_int
comma
r_const
r_char
op_star
)paren
suffix:semicolon
r_extern
r_void
id|unregister_chrdev_region
c_func
(paren
id|dev_t
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|chrdev_open
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
)paren
suffix:semicolon
multiline_comment|/* fs/block_dev.c */
DECL|macro|BDEVNAME_SIZE
mdefine_line|#define BDEVNAME_SIZE&t;32&t;/* Largest string for a blockdev identifier */
r_extern
r_const
r_char
op_star
id|__bdevname
c_func
(paren
id|dev_t
comma
r_char
op_star
id|buffer
)paren
suffix:semicolon
r_extern
r_const
r_char
op_star
id|bdevname
c_func
(paren
r_struct
id|block_device
op_star
id|bdev
comma
r_char
op_star
id|buffer
)paren
suffix:semicolon
r_extern
r_struct
id|block_device
op_star
id|lookup_bdev
c_func
(paren
r_const
r_char
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|block_device
op_star
id|open_bdev_excl
c_func
(paren
r_const
r_char
op_star
comma
r_int
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_void
id|close_bdev_excl
c_func
(paren
r_struct
id|block_device
op_star
)paren
suffix:semicolon
r_extern
r_void
id|init_special_inode
c_func
(paren
r_struct
id|inode
op_star
comma
id|umode_t
comma
id|dev_t
)paren
suffix:semicolon
multiline_comment|/* Invalid inode operations -- fs/bad_inode.c */
r_extern
r_void
id|make_bad_inode
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_int
id|is_bad_inode
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|file_operations
id|read_fifo_fops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|write_fifo_fops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|rdwr_fifo_fops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|read_pipe_fops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|write_pipe_fops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|rdwr_pipe_fops
suffix:semicolon
r_extern
r_int
id|fs_may_remount_ro
c_func
(paren
r_struct
id|super_block
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * return READ, READA, or WRITE&n; */
DECL|macro|bio_rw
mdefine_line|#define bio_rw(bio)&t;&t;((bio)-&gt;bi_rw &amp; (RW_MASK | RWA_MASK))
multiline_comment|/*&n; * return data direction, READ or WRITE&n; */
DECL|macro|bio_data_dir
mdefine_line|#define bio_data_dir(bio)&t;((bio)-&gt;bi_rw &amp; 1)
r_extern
r_int
id|check_disk_change
c_func
(paren
r_struct
id|block_device
op_star
)paren
suffix:semicolon
r_extern
r_int
id|invalidate_inodes
c_func
(paren
r_struct
id|super_block
op_star
)paren
suffix:semicolon
r_extern
r_int
id|__invalidate_device
c_func
(paren
r_struct
id|block_device
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|invalidate_partition
c_func
(paren
r_struct
id|gendisk
op_star
comma
r_int
)paren
suffix:semicolon
r_int
r_int
id|invalidate_mapping_pages
c_func
(paren
r_struct
id|address_space
op_star
id|mapping
comma
id|pgoff_t
id|start
comma
id|pgoff_t
id|end
)paren
suffix:semicolon
r_int
r_int
id|invalidate_inode_pages
c_func
(paren
r_struct
id|address_space
op_star
id|mapping
)paren
suffix:semicolon
DECL|function|invalidate_remote_inode
r_static
r_inline
r_void
id|invalidate_remote_inode
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
r_if
c_cond
(paren
id|S_ISREG
c_func
(paren
id|inode-&gt;i_mode
)paren
op_logical_or
id|S_ISDIR
c_func
(paren
id|inode-&gt;i_mode
)paren
op_logical_or
id|S_ISLNK
c_func
(paren
id|inode-&gt;i_mode
)paren
)paren
id|invalidate_inode_pages
c_func
(paren
id|inode-&gt;i_mapping
)paren
suffix:semicolon
)brace
r_extern
r_int
id|invalidate_inode_pages2
c_func
(paren
r_struct
id|address_space
op_star
id|mapping
)paren
suffix:semicolon
r_extern
r_int
id|write_inode_now
c_func
(paren
r_struct
id|inode
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|filemap_fdatawrite
c_func
(paren
r_struct
id|address_space
op_star
)paren
suffix:semicolon
r_extern
r_int
id|filemap_flush
c_func
(paren
r_struct
id|address_space
op_star
)paren
suffix:semicolon
r_extern
r_int
id|filemap_fdatawait
c_func
(paren
r_struct
id|address_space
op_star
)paren
suffix:semicolon
r_extern
r_int
id|filemap_write_and_wait
c_func
(paren
r_struct
id|address_space
op_star
id|mapping
)paren
suffix:semicolon
r_extern
r_void
id|sync_supers
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|sync_filesystems
c_func
(paren
r_int
id|wait
)paren
suffix:semicolon
r_extern
r_void
id|emergency_sync
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|emergency_remount
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|do_remount_sb
c_func
(paren
r_struct
id|super_block
op_star
id|sb
comma
r_int
id|flags
comma
r_void
op_star
id|data
comma
r_int
id|force
)paren
suffix:semicolon
r_extern
id|sector_t
id|bmap
c_func
(paren
r_struct
id|inode
op_star
comma
id|sector_t
)paren
suffix:semicolon
r_extern
r_int
id|setattr_mask
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
id|notify_change
c_func
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|iattr
op_star
)paren
suffix:semicolon
r_extern
r_int
id|permission
c_func
(paren
r_struct
id|inode
op_star
comma
r_int
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
r_extern
r_int
id|generic_permission
c_func
(paren
r_struct
id|inode
op_star
comma
r_int
comma
r_int
(paren
op_star
id|check_acl
)paren
(paren
r_struct
id|inode
op_star
comma
r_int
)paren
)paren
suffix:semicolon
r_extern
r_int
id|get_write_access
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_int
id|deny_write_access
c_func
(paren
r_struct
id|file
op_star
)paren
suffix:semicolon
DECL|function|put_write_access
r_static
r_inline
r_void
id|put_write_access
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
id|atomic_dec
c_func
(paren
op_amp
id|inode-&gt;i_writecount
)paren
suffix:semicolon
)brace
DECL|function|allow_write_access
r_static
r_inline
r_void
id|allow_write_access
c_func
(paren
r_struct
id|file
op_star
id|file
)paren
(brace
r_if
c_cond
(paren
id|file
)paren
id|atomic_inc
c_func
(paren
op_amp
id|file-&gt;f_dentry-&gt;d_inode-&gt;i_writecount
)paren
suffix:semicolon
)brace
r_extern
r_int
id|do_pipe
c_func
(paren
r_int
op_star
)paren
suffix:semicolon
r_extern
r_int
id|open_namei
c_func
(paren
r_const
r_char
op_star
comma
r_int
comma
r_int
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
r_extern
r_int
id|may_open
c_func
(paren
r_struct
id|nameidata
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|kernel_read
c_func
(paren
r_struct
id|file
op_star
comma
r_int
r_int
comma
r_char
op_star
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_struct
id|file
op_star
id|open_exec
c_func
(paren
r_const
r_char
op_star
)paren
suffix:semicolon
multiline_comment|/* fs/dcache.c -- generic fs support functions */
r_extern
r_int
id|is_subdir
c_func
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
id|ino_t
id|find_inode_number
c_func
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|qstr
op_star
)paren
suffix:semicolon
macro_line|#include &lt;linux/err.h&gt;
multiline_comment|/* needed for stackable file system support */
r_extern
id|loff_t
id|default_llseek
c_func
(paren
r_struct
id|file
op_star
id|file
comma
id|loff_t
id|offset
comma
r_int
id|origin
)paren
suffix:semicolon
r_extern
id|loff_t
id|vfs_llseek
c_func
(paren
r_struct
id|file
op_star
id|file
comma
id|loff_t
id|offset
comma
r_int
id|origin
)paren
suffix:semicolon
r_extern
r_void
id|inode_init_once
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_void
id|iput
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|inode
op_star
id|igrab
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
id|ino_t
id|iunique
c_func
(paren
r_struct
id|super_block
op_star
comma
id|ino_t
)paren
suffix:semicolon
r_extern
r_int
id|inode_needs_sync
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
suffix:semicolon
r_extern
r_void
id|generic_delete_inode
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
suffix:semicolon
r_extern
r_struct
id|inode
op_star
id|ilookup5
c_func
(paren
r_struct
id|super_block
op_star
id|sb
comma
r_int
r_int
id|hashval
comma
r_int
(paren
op_star
id|test
)paren
(paren
r_struct
id|inode
op_star
comma
r_void
op_star
)paren
comma
r_void
op_star
id|data
)paren
suffix:semicolon
r_extern
r_struct
id|inode
op_star
id|ilookup
c_func
(paren
r_struct
id|super_block
op_star
id|sb
comma
r_int
r_int
id|ino
)paren
suffix:semicolon
r_extern
r_struct
id|inode
op_star
id|iget5_locked
c_func
(paren
r_struct
id|super_block
op_star
comma
r_int
r_int
comma
r_int
(paren
op_star
id|test
)paren
(paren
r_struct
id|inode
op_star
comma
r_void
op_star
)paren
comma
r_int
(paren
op_star
id|set
)paren
(paren
r_struct
id|inode
op_star
comma
r_void
op_star
)paren
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|inode
op_star
id|iget_locked
c_func
(paren
r_struct
id|super_block
op_star
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|unlock_new_inode
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|function|iget
r_static
r_inline
r_struct
id|inode
op_star
id|iget
c_func
(paren
r_struct
id|super_block
op_star
id|sb
comma
r_int
r_int
id|ino
)paren
(brace
r_struct
id|inode
op_star
id|inode
op_assign
id|iget_locked
c_func
(paren
id|sb
comma
id|ino
)paren
suffix:semicolon
r_if
c_cond
(paren
id|inode
op_logical_and
(paren
id|inode-&gt;i_state
op_amp
id|I_NEW
)paren
)paren
(brace
id|sb-&gt;s_op
op_member_access_from_pointer
id|read_inode
c_func
(paren
id|inode
)paren
suffix:semicolon
id|unlock_new_inode
c_func
(paren
id|inode
)paren
suffix:semicolon
)brace
r_return
id|inode
suffix:semicolon
)brace
r_extern
r_void
id|__iget
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
suffix:semicolon
r_extern
r_void
id|clear_inode
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_void
id|destroy_inode
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|inode
op_star
id|new_inode
c_func
(paren
r_struct
id|super_block
op_star
)paren
suffix:semicolon
r_extern
r_int
id|remove_suid
c_func
(paren
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
r_void
id|remove_dquot_ref
c_func
(paren
r_struct
id|super_block
op_star
comma
r_int
comma
r_struct
id|list_head
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|semaphore
id|iprune_sem
suffix:semicolon
r_extern
r_void
id|__insert_inode_hash
c_func
(paren
r_struct
id|inode
op_star
comma
r_int
r_int
id|hashval
)paren
suffix:semicolon
r_extern
r_void
id|remove_inode_hash
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|function|insert_inode_hash
r_static
r_inline
r_void
id|insert_inode_hash
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
id|__insert_inode_hash
c_func
(paren
id|inode
comma
id|inode-&gt;i_ino
)paren
suffix:semicolon
)brace
r_extern
r_struct
id|file
op_star
id|get_empty_filp
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|file_move
c_func
(paren
r_struct
id|file
op_star
id|f
comma
r_struct
id|list_head
op_star
id|list
)paren
suffix:semicolon
r_extern
r_void
id|file_kill
c_func
(paren
r_struct
id|file
op_star
id|f
)paren
suffix:semicolon
r_struct
id|bio
suffix:semicolon
r_extern
r_void
id|submit_bio
c_func
(paren
r_int
comma
r_struct
id|bio
op_star
)paren
suffix:semicolon
r_extern
r_int
id|bdev_read_only
c_func
(paren
r_struct
id|block_device
op_star
)paren
suffix:semicolon
r_extern
r_int
id|set_blocksize
c_func
(paren
r_struct
id|block_device
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|sb_set_blocksize
c_func
(paren
r_struct
id|super_block
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|sb_min_blocksize
c_func
(paren
r_struct
id|super_block
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|generic_file_mmap
c_func
(paren
r_struct
id|file
op_star
comma
r_struct
id|vm_area_struct
op_star
)paren
suffix:semicolon
r_extern
r_int
id|generic_file_readonly_mmap
c_func
(paren
r_struct
id|file
op_star
comma
r_struct
id|vm_area_struct
op_star
)paren
suffix:semicolon
r_extern
r_int
id|file_read_actor
c_func
(paren
id|read_descriptor_t
op_star
id|desc
comma
r_struct
id|page
op_star
id|page
comma
r_int
r_int
id|offset
comma
r_int
r_int
id|size
)paren
suffix:semicolon
r_extern
r_int
id|file_send_actor
c_func
(paren
id|read_descriptor_t
op_star
id|desc
comma
r_struct
id|page
op_star
id|page
comma
r_int
r_int
id|offset
comma
r_int
r_int
id|size
)paren
suffix:semicolon
r_extern
id|ssize_t
id|generic_file_read
c_func
(paren
r_struct
id|file
op_star
comma
r_char
id|__user
op_star
comma
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
r_int
id|generic_write_checks
c_func
(paren
r_struct
id|file
op_star
id|file
comma
id|loff_t
op_star
id|pos
comma
r_int
op_star
id|count
comma
r_int
id|isblk
)paren
suffix:semicolon
r_extern
id|ssize_t
id|generic_file_write
c_func
(paren
r_struct
id|file
op_star
comma
r_const
r_char
id|__user
op_star
comma
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
r_extern
id|ssize_t
id|generic_file_aio_read
c_func
(paren
r_struct
id|kiocb
op_star
comma
r_char
id|__user
op_star
comma
r_int
comma
id|loff_t
)paren
suffix:semicolon
r_extern
id|ssize_t
id|__generic_file_aio_read
c_func
(paren
r_struct
id|kiocb
op_star
comma
r_const
r_struct
id|iovec
op_star
comma
r_int
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
r_extern
id|ssize_t
id|generic_file_aio_write
c_func
(paren
r_struct
id|kiocb
op_star
comma
r_const
r_char
id|__user
op_star
comma
r_int
comma
id|loff_t
)paren
suffix:semicolon
r_extern
id|ssize_t
id|generic_file_aio_write_nolock
c_func
(paren
r_struct
id|kiocb
op_star
comma
r_const
r_struct
id|iovec
op_star
comma
r_int
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
r_extern
id|ssize_t
id|generic_file_direct_write
c_func
(paren
r_struct
id|kiocb
op_star
comma
r_const
r_struct
id|iovec
op_star
comma
r_int
r_int
op_star
comma
id|loff_t
comma
id|loff_t
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
id|ssize_t
id|generic_file_buffered_write
c_func
(paren
r_struct
id|kiocb
op_star
comma
r_const
r_struct
id|iovec
op_star
comma
r_int
r_int
comma
id|loff_t
comma
id|loff_t
op_star
comma
r_int
comma
id|ssize_t
)paren
suffix:semicolon
r_extern
id|ssize_t
id|do_sync_read
c_func
(paren
r_struct
id|file
op_star
id|filp
comma
r_char
id|__user
op_star
id|buf
comma
r_int
id|len
comma
id|loff_t
op_star
id|ppos
)paren
suffix:semicolon
r_extern
id|ssize_t
id|do_sync_write
c_func
(paren
r_struct
id|file
op_star
id|filp
comma
r_const
r_char
id|__user
op_star
id|buf
comma
r_int
id|len
comma
id|loff_t
op_star
id|ppos
)paren
suffix:semicolon
id|ssize_t
id|generic_file_write_nolock
c_func
(paren
r_struct
id|file
op_star
id|file
comma
r_const
r_struct
id|iovec
op_star
id|iov
comma
r_int
r_int
id|nr_segs
comma
id|loff_t
op_star
id|ppos
)paren
suffix:semicolon
r_extern
id|ssize_t
id|generic_file_sendfile
c_func
(paren
r_struct
id|file
op_star
comma
id|loff_t
op_star
comma
r_int
comma
id|read_actor_t
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_void
id|do_generic_mapping_read
c_func
(paren
r_struct
id|address_space
op_star
id|mapping
comma
r_struct
id|file_ra_state
op_star
comma
r_struct
id|file
op_star
comma
id|loff_t
op_star
comma
id|read_descriptor_t
op_star
comma
id|read_actor_t
)paren
suffix:semicolon
r_extern
r_void
id|file_ra_state_init
c_func
(paren
r_struct
id|file_ra_state
op_star
id|ra
comma
r_struct
id|address_space
op_star
id|mapping
)paren
suffix:semicolon
r_extern
id|ssize_t
id|generic_file_direct_IO
c_func
(paren
r_int
id|rw
comma
r_struct
id|kiocb
op_star
id|iocb
comma
r_const
r_struct
id|iovec
op_star
id|iov
comma
id|loff_t
id|offset
comma
r_int
r_int
id|nr_segs
)paren
suffix:semicolon
r_extern
id|ssize_t
id|generic_file_readv
c_func
(paren
r_struct
id|file
op_star
id|filp
comma
r_const
r_struct
id|iovec
op_star
id|iov
comma
r_int
r_int
id|nr_segs
comma
id|loff_t
op_star
id|ppos
)paren
suffix:semicolon
id|ssize_t
id|generic_file_writev
c_func
(paren
r_struct
id|file
op_star
id|filp
comma
r_const
r_struct
id|iovec
op_star
id|iov
comma
r_int
r_int
id|nr_segs
comma
id|loff_t
op_star
id|ppos
)paren
suffix:semicolon
r_extern
id|loff_t
id|no_llseek
c_func
(paren
r_struct
id|file
op_star
id|file
comma
id|loff_t
id|offset
comma
r_int
id|origin
)paren
suffix:semicolon
r_extern
id|loff_t
id|generic_file_llseek
c_func
(paren
r_struct
id|file
op_star
id|file
comma
id|loff_t
id|offset
comma
r_int
id|origin
)paren
suffix:semicolon
r_extern
id|loff_t
id|remote_llseek
c_func
(paren
r_struct
id|file
op_star
id|file
comma
id|loff_t
id|offset
comma
r_int
id|origin
)paren
suffix:semicolon
r_extern
r_int
id|generic_file_open
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
r_extern
r_int
id|nonseekable_open
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
DECL|function|do_generic_file_read
r_static
r_inline
r_void
id|do_generic_file_read
c_func
(paren
r_struct
id|file
op_star
id|filp
comma
id|loff_t
op_star
id|ppos
comma
id|read_descriptor_t
op_star
id|desc
comma
id|read_actor_t
id|actor
)paren
(brace
id|do_generic_mapping_read
c_func
(paren
id|filp-&gt;f_mapping
comma
op_amp
id|filp-&gt;f_ra
comma
id|filp
comma
id|ppos
comma
id|desc
comma
id|actor
)paren
suffix:semicolon
)brace
id|ssize_t
id|__blockdev_direct_IO
c_func
(paren
r_int
id|rw
comma
r_struct
id|kiocb
op_star
id|iocb
comma
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|block_device
op_star
id|bdev
comma
r_const
r_struct
id|iovec
op_star
id|iov
comma
id|loff_t
id|offset
comma
r_int
r_int
id|nr_segs
comma
id|get_blocks_t
id|get_blocks
comma
id|dio_iodone_t
id|end_io
comma
r_int
id|lock_type
)paren
suffix:semicolon
r_enum
(brace
DECL|enumerator|DIO_LOCKING
id|DIO_LOCKING
op_assign
l_int|1
comma
multiline_comment|/* need locking between buffered and direct access */
DECL|enumerator|DIO_NO_LOCKING
id|DIO_NO_LOCKING
comma
multiline_comment|/* bdev; no locking at all between buffered/direct */
DECL|enumerator|DIO_OWN_LOCKING
id|DIO_OWN_LOCKING
comma
multiline_comment|/* filesystem locks buffered and direct internally */
)brace
suffix:semicolon
DECL|function|blockdev_direct_IO
r_static
r_inline
id|ssize_t
id|blockdev_direct_IO
c_func
(paren
r_int
id|rw
comma
r_struct
id|kiocb
op_star
id|iocb
comma
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|block_device
op_star
id|bdev
comma
r_const
r_struct
id|iovec
op_star
id|iov
comma
id|loff_t
id|offset
comma
r_int
r_int
id|nr_segs
comma
id|get_blocks_t
id|get_blocks
comma
id|dio_iodone_t
id|end_io
)paren
(brace
r_return
id|__blockdev_direct_IO
c_func
(paren
id|rw
comma
id|iocb
comma
id|inode
comma
id|bdev
comma
id|iov
comma
id|offset
comma
id|nr_segs
comma
id|get_blocks
comma
id|end_io
comma
id|DIO_LOCKING
)paren
suffix:semicolon
)brace
DECL|function|blockdev_direct_IO_no_locking
r_static
r_inline
id|ssize_t
id|blockdev_direct_IO_no_locking
c_func
(paren
r_int
id|rw
comma
r_struct
id|kiocb
op_star
id|iocb
comma
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|block_device
op_star
id|bdev
comma
r_const
r_struct
id|iovec
op_star
id|iov
comma
id|loff_t
id|offset
comma
r_int
r_int
id|nr_segs
comma
id|get_blocks_t
id|get_blocks
comma
id|dio_iodone_t
id|end_io
)paren
(brace
r_return
id|__blockdev_direct_IO
c_func
(paren
id|rw
comma
id|iocb
comma
id|inode
comma
id|bdev
comma
id|iov
comma
id|offset
comma
id|nr_segs
comma
id|get_blocks
comma
id|end_io
comma
id|DIO_NO_LOCKING
)paren
suffix:semicolon
)brace
DECL|function|blockdev_direct_IO_own_locking
r_static
r_inline
id|ssize_t
id|blockdev_direct_IO_own_locking
c_func
(paren
r_int
id|rw
comma
r_struct
id|kiocb
op_star
id|iocb
comma
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|block_device
op_star
id|bdev
comma
r_const
r_struct
id|iovec
op_star
id|iov
comma
id|loff_t
id|offset
comma
r_int
r_int
id|nr_segs
comma
id|get_blocks_t
id|get_blocks
comma
id|dio_iodone_t
id|end_io
)paren
(brace
r_return
id|__blockdev_direct_IO
c_func
(paren
id|rw
comma
id|iocb
comma
id|inode
comma
id|bdev
comma
id|iov
comma
id|offset
comma
id|nr_segs
comma
id|get_blocks
comma
id|end_io
comma
id|DIO_OWN_LOCKING
)paren
suffix:semicolon
)brace
r_extern
r_struct
id|file_operations
id|generic_ro_fops
suffix:semicolon
DECL|macro|special_file
mdefine_line|#define special_file(m) (S_ISCHR(m)||S_ISBLK(m)||S_ISFIFO(m)||S_ISSOCK(m))
r_extern
r_int
id|vfs_readlink
c_func
(paren
r_struct
id|dentry
op_star
comma
r_char
id|__user
op_star
comma
r_int
comma
r_const
r_char
op_star
)paren
suffix:semicolon
r_extern
r_int
id|vfs_follow_link
c_func
(paren
r_struct
id|nameidata
op_star
comma
r_const
r_char
op_star
)paren
suffix:semicolon
r_extern
r_int
id|page_readlink
c_func
(paren
r_struct
id|dentry
op_star
comma
r_char
id|__user
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|page_follow_link_light
c_func
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
r_extern
r_void
id|page_put_link
c_func
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
r_extern
r_int
id|page_symlink
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_const
r_char
op_star
id|symname
comma
r_int
id|len
)paren
suffix:semicolon
r_extern
r_struct
id|inode_operations
id|page_symlink_inode_operations
suffix:semicolon
r_extern
r_int
id|generic_readlink
c_func
(paren
r_struct
id|dentry
op_star
comma
r_char
id|__user
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|generic_fillattr
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|kstat
op_star
)paren
suffix:semicolon
r_extern
r_int
id|vfs_getattr
c_func
(paren
r_struct
id|vfsmount
op_star
comma
r_struct
id|dentry
op_star
comma
r_struct
id|kstat
op_star
)paren
suffix:semicolon
r_void
id|inode_add_bytes
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
id|loff_t
id|bytes
)paren
suffix:semicolon
r_void
id|inode_sub_bytes
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
id|loff_t
id|bytes
)paren
suffix:semicolon
id|loff_t
id|inode_get_bytes
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
suffix:semicolon
r_void
id|inode_set_bytes
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
id|loff_t
id|bytes
)paren
suffix:semicolon
r_extern
r_int
id|vfs_readdir
c_func
(paren
r_struct
id|file
op_star
comma
id|filldir_t
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_int
id|vfs_stat
c_func
(paren
r_char
id|__user
op_star
comma
r_struct
id|kstat
op_star
)paren
suffix:semicolon
r_extern
r_int
id|vfs_lstat
c_func
(paren
r_char
id|__user
op_star
comma
r_struct
id|kstat
op_star
)paren
suffix:semicolon
r_extern
r_int
id|vfs_fstat
c_func
(paren
r_int
r_int
comma
r_struct
id|kstat
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|file_system_type
op_star
id|get_fs_type
c_func
(paren
r_const
r_char
op_star
id|name
)paren
suffix:semicolon
r_extern
r_struct
id|super_block
op_star
id|get_super
c_func
(paren
r_struct
id|block_device
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|super_block
op_star
id|user_get_super
c_func
(paren
id|dev_t
)paren
suffix:semicolon
r_extern
r_void
id|drop_super
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
suffix:semicolon
r_extern
r_int
id|dcache_dir_open
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
)paren
suffix:semicolon
r_extern
r_int
id|dcache_dir_close
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
)paren
suffix:semicolon
r_extern
id|loff_t
id|dcache_dir_lseek
c_func
(paren
r_struct
id|file
op_star
comma
id|loff_t
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|dcache_readdir
c_func
(paren
r_struct
id|file
op_star
comma
r_void
op_star
comma
id|filldir_t
)paren
suffix:semicolon
r_extern
r_int
id|simple_getattr
c_func
(paren
r_struct
id|vfsmount
op_star
comma
r_struct
id|dentry
op_star
comma
r_struct
id|kstat
op_star
)paren
suffix:semicolon
r_extern
r_int
id|simple_statfs
c_func
(paren
r_struct
id|super_block
op_star
comma
r_struct
id|kstatfs
op_star
)paren
suffix:semicolon
r_extern
r_int
id|simple_link
c_func
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
r_int
id|simple_unlink
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
r_int
id|simple_rmdir
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
r_int
id|simple_rename
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
r_int
id|simple_sync_file
c_func
(paren
r_struct
id|file
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|simple_empty
c_func
(paren
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
r_int
id|simple_readpage
c_func
(paren
r_struct
id|file
op_star
id|file
comma
r_struct
id|page
op_star
id|page
)paren
suffix:semicolon
r_extern
r_int
id|simple_prepare_write
c_func
(paren
r_struct
id|file
op_star
id|file
comma
r_struct
id|page
op_star
id|page
comma
r_int
id|offset
comma
r_int
id|to
)paren
suffix:semicolon
r_extern
r_int
id|simple_commit_write
c_func
(paren
r_struct
id|file
op_star
id|file
comma
r_struct
id|page
op_star
id|page
comma
r_int
id|offset
comma
r_int
id|to
)paren
suffix:semicolon
r_extern
r_struct
id|dentry
op_star
id|simple_lookup
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
r_extern
id|ssize_t
id|generic_read_dir
c_func
(paren
r_struct
id|file
op_star
comma
r_char
id|__user
op_star
comma
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|file_operations
id|simple_dir_operations
suffix:semicolon
r_extern
r_struct
id|inode_operations
id|simple_dir_inode_operations
suffix:semicolon
DECL|struct|tree_descr
DECL|member|name
DECL|member|ops
DECL|member|mode
r_struct
id|tree_descr
(brace
r_char
op_star
id|name
suffix:semicolon
r_struct
id|file_operations
op_star
id|ops
suffix:semicolon
r_int
id|mode
suffix:semicolon
)brace
suffix:semicolon
r_struct
id|dentry
op_star
id|d_alloc_name
c_func
(paren
r_struct
id|dentry
op_star
comma
r_const
r_char
op_star
)paren
suffix:semicolon
r_extern
r_int
id|simple_fill_super
c_func
(paren
r_struct
id|super_block
op_star
comma
r_int
comma
r_struct
id|tree_descr
op_star
)paren
suffix:semicolon
r_extern
r_int
id|simple_pin_fs
c_func
(paren
r_char
op_star
id|name
comma
r_struct
id|vfsmount
op_star
op_star
id|mount
comma
r_int
op_star
id|count
)paren
suffix:semicolon
r_extern
r_void
id|simple_release_fs
c_func
(paren
r_struct
id|vfsmount
op_star
op_star
id|mount
comma
r_int
op_star
id|count
)paren
suffix:semicolon
r_extern
id|ssize_t
id|simple_read_from_buffer
c_func
(paren
r_void
id|__user
op_star
comma
r_int
comma
id|loff_t
op_star
comma
r_const
r_void
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|inode_change_ok
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|iattr
op_star
)paren
suffix:semicolon
r_extern
r_int
id|__must_check
id|inode_setattr
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|iattr
op_star
)paren
suffix:semicolon
r_extern
r_void
id|inode_update_time
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_int
id|ctime_too
)paren
suffix:semicolon
DECL|function|parent_ino
r_static
r_inline
id|ino_t
id|parent_ino
c_func
(paren
r_struct
id|dentry
op_star
id|dentry
)paren
(brace
id|ino_t
id|res
suffix:semicolon
id|spin_lock
c_func
(paren
op_amp
id|dentry-&gt;d_lock
)paren
suffix:semicolon
id|res
op_assign
id|dentry-&gt;d_parent-&gt;d_inode-&gt;i_ino
suffix:semicolon
id|spin_unlock
c_func
(paren
op_amp
id|dentry-&gt;d_lock
)paren
suffix:semicolon
r_return
id|res
suffix:semicolon
)brace
multiline_comment|/* kernel/fork.c */
r_extern
r_int
id|unshare_files
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/* Transaction based IO helpers */
multiline_comment|/*&n; * An argresp is stored in an allocated page and holds the&n; * size of the argument or response, along with its content&n; */
DECL|struct|simple_transaction_argresp
r_struct
id|simple_transaction_argresp
(brace
DECL|member|size
id|ssize_t
id|size
suffix:semicolon
DECL|member|data
r_char
id|data
(braket
l_int|0
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|SIMPLE_TRANSACTION_LIMIT
mdefine_line|#define SIMPLE_TRANSACTION_LIMIT (PAGE_SIZE - sizeof(struct simple_transaction_argresp))
r_char
op_star
id|simple_transaction_get
c_func
(paren
r_struct
id|file
op_star
id|file
comma
r_const
r_char
id|__user
op_star
id|buf
comma
r_int
id|size
)paren
suffix:semicolon
id|ssize_t
id|simple_transaction_read
c_func
(paren
r_struct
id|file
op_star
id|file
comma
r_char
id|__user
op_star
id|buf
comma
r_int
id|size
comma
id|loff_t
op_star
id|pos
)paren
suffix:semicolon
r_int
id|simple_transaction_release
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|file
)paren
suffix:semicolon
DECL|function|simple_transaction_set
r_static
r_inline
r_void
id|simple_transaction_set
c_func
(paren
r_struct
id|file
op_star
id|file
comma
r_int
id|n
)paren
(brace
r_struct
id|simple_transaction_argresp
op_star
id|ar
op_assign
id|file-&gt;private_data
suffix:semicolon
id|BUG_ON
c_func
(paren
id|n
OG
id|SIMPLE_TRANSACTION_LIMIT
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * The barrier ensures that ar-&gt;size will really remain zero until&n;&t; * ar-&gt;data is ready for reading.&n;&t; */
id|smp_mb
c_func
(paren
)paren
suffix:semicolon
id|ar-&gt;size
op_assign
id|n
suffix:semicolon
)brace
macro_line|#ifdef CONFIG_SECURITY
DECL|function|alloc_secdata
r_static
r_inline
r_char
op_star
id|alloc_secdata
c_func
(paren
r_void
)paren
(brace
r_return
(paren
r_char
op_star
)paren
id|get_zeroed_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
)brace
DECL|function|free_secdata
r_static
r_inline
r_void
id|free_secdata
c_func
(paren
r_void
op_star
id|secdata
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|secdata
)paren
suffix:semicolon
)brace
macro_line|#else
DECL|function|alloc_secdata
r_static
r_inline
r_char
op_star
id|alloc_secdata
c_func
(paren
r_void
)paren
(brace
r_return
(paren
r_char
op_star
)paren
l_int|1
suffix:semicolon
)brace
DECL|function|free_secdata
r_static
r_inline
r_void
id|free_secdata
c_func
(paren
r_void
op_star
id|secdata
)paren
(brace
)brace
macro_line|#endif&t;/* CONFIG_SECURITY */
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _LINUX_FS_H */
eof
