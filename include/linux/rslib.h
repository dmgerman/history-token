multiline_comment|/* &n; * include/linux/rslib.h&n; *&n; * Overview:&n; *   Generic Reed Solomon encoder / decoder library&n; *   &n; * Copyright (C) 2004 Thomas Gleixner (tglx@linutronix.de)&n; *&n; * RS code lifted from reed solomon library written by Phil Karn&n; * Copyright 2002 Phil Karn, KA9Q&n; *&n; * $Id: rslib.h,v 1.3 2004/10/05 22:08:22 gleixner Exp $&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License version 2 as&n; * published by the Free Software Foundation.&n; */
macro_line|#ifndef _RSLIB_H_
DECL|macro|_RSLIB_H_
mdefine_line|#define _RSLIB_H_
macro_line|#include &lt;linux/list.h&gt;
multiline_comment|/** &n; * struct rs_control - rs control structure&n; * &n; * @mm:&t;&t;Bits per symbol&n; * @nn:&t;&t;Symbols per block (= (1&lt;&lt;mm)-1)&n; * @alpha_to:&t;log lookup table&n; * @index_of:&t;Antilog lookup table&n; * @genpoly:&t;Generator polynomial &n; * @nroots:&t;Number of generator roots = number of parity symbols&n; * @fcr:&t;First consecutive root, index form&n; * @prim:&t;Primitive element, index form &n; * @iprim:&t;prim-th root of 1, index form &n; * @gfpoly:&t;The primitive generator polynominal &n; * @users:&t;Users of this structure &n; * @list:&t;List entry for the rs control list&n;*/
DECL|struct|rs_control
r_struct
id|rs_control
(brace
DECL|member|mm
r_int
id|mm
suffix:semicolon
DECL|member|nn
r_int
id|nn
suffix:semicolon
DECL|member|alpha_to
r_uint16
op_star
id|alpha_to
suffix:semicolon
DECL|member|index_of
r_uint16
op_star
id|index_of
suffix:semicolon
DECL|member|genpoly
r_uint16
op_star
id|genpoly
suffix:semicolon
DECL|member|nroots
r_int
id|nroots
suffix:semicolon
DECL|member|fcr
r_int
id|fcr
suffix:semicolon
DECL|member|prim
r_int
id|prim
suffix:semicolon
DECL|member|iprim
r_int
id|iprim
suffix:semicolon
DECL|member|gfpoly
r_int
id|gfpoly
suffix:semicolon
DECL|member|users
r_int
id|users
suffix:semicolon
DECL|member|list
r_struct
id|list_head
id|list
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* General purpose RS codec, 8-bit data width, symbol width 1-15 bit  */
macro_line|#ifdef CONFIG_REED_SOLOMON_ENC8
r_int
id|encode_rs8
c_func
(paren
r_struct
id|rs_control
op_star
id|rs
comma
r_uint8
op_star
id|data
comma
r_int
id|len
comma
r_uint16
op_star
id|par
comma
r_uint16
id|invmsk
)paren
suffix:semicolon
macro_line|#endif
macro_line|#ifdef CONFIG_REED_SOLOMON_DEC8
r_int
id|decode_rs8
c_func
(paren
r_struct
id|rs_control
op_star
id|rs
comma
r_uint8
op_star
id|data
comma
r_uint16
op_star
id|par
comma
r_int
id|len
comma
r_uint16
op_star
id|s
comma
r_int
id|no_eras
comma
r_int
op_star
id|eras_pos
comma
r_uint16
id|invmsk
comma
r_uint16
op_star
id|corr
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/* General purpose RS codec, 16-bit data width, symbol width 1-15 bit  */
macro_line|#ifdef CONFIG_REED_SOLOMON_ENC16
r_int
id|encode_rs16
c_func
(paren
r_struct
id|rs_control
op_star
id|rs
comma
r_uint16
op_star
id|data
comma
r_int
id|len
comma
r_uint16
op_star
id|par
comma
r_uint16
id|invmsk
)paren
suffix:semicolon
macro_line|#endif
macro_line|#ifdef CONFIG_REED_SOLOMON_DEC16
r_int
id|decode_rs16
c_func
(paren
r_struct
id|rs_control
op_star
id|rs
comma
r_uint16
op_star
id|data
comma
r_uint16
op_star
id|par
comma
r_int
id|len
comma
r_uint16
op_star
id|s
comma
r_int
id|no_eras
comma
r_int
op_star
id|eras_pos
comma
r_uint16
id|invmsk
comma
r_uint16
op_star
id|corr
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/* Create or get a matching rs control structure */
r_struct
id|rs_control
op_star
id|init_rs
c_func
(paren
r_int
id|symsize
comma
r_int
id|gfpoly
comma
r_int
id|fcr
comma
r_int
id|prim
comma
r_int
id|nroots
)paren
suffix:semicolon
multiline_comment|/* Release a rs control structure */
r_void
id|free_rs
c_func
(paren
r_struct
id|rs_control
op_star
id|rs
)paren
suffix:semicolon
multiline_comment|/** modulo replacement for galois field arithmetics&n; *&n; *  @rs:&t;the rs control structure&n; *  @x:&t;&t;the value to reduce&n; *&n; *  where&n; *  rs-&gt;mm = number of bits per symbol&t;&n; *  rs-&gt;nn = (2^rs-&gt;mm) - 1&n; *  &n; *  Simple arithmetic modulo would return a wrong result for values&n; *  &gt;= 3 * rs-&gt;nn&n;*/
DECL|function|rs_modnn
r_static
r_inline
r_int
id|rs_modnn
c_func
(paren
r_struct
id|rs_control
op_star
id|rs
comma
r_int
id|x
)paren
(brace
r_while
c_loop
(paren
id|x
op_ge
id|rs-&gt;nn
)paren
(brace
id|x
op_sub_assign
id|rs-&gt;nn
suffix:semicolon
id|x
op_assign
(paren
id|x
op_rshift
id|rs-&gt;mm
)paren
op_plus
(paren
id|x
op_amp
id|rs-&gt;nn
)paren
suffix:semicolon
)brace
r_return
id|x
suffix:semicolon
)brace
macro_line|#endif
eof
