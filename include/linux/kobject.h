multiline_comment|/*&n; * kobject.h - generic kernel object infrastructure.&n; *&n; * Copyright (c) 2002-2003&t;Patrick Mochel&n; * Copyright (c) 2002-2003&t;Open Source Development Labs&n; *&n; * This file is released under the GPLv2.&n; *&n; * &n; * Please read Documentation/kobject.txt before using the kobject&n; * interface, ESPECIALLY the parts about reference counts and object&n; * destructors. &n; */
macro_line|#if defined(__KERNEL__) &amp;&amp; !defined(_KOBJECT_H_)
DECL|macro|_KOBJECT_H_
mdefine_line|#define _KOBJECT_H_
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/list.h&gt;
macro_line|#include &lt;linux/sysfs.h&gt;
macro_line|#include &lt;linux/rwsem.h&gt;
macro_line|#include &lt;asm/atomic.h&gt;
DECL|macro|KOBJ_NAME_LEN
mdefine_line|#define KOBJ_NAME_LEN&t;20
DECL|struct|kobject
r_struct
id|kobject
(brace
DECL|member|k_name
r_char
op_star
id|k_name
suffix:semicolon
DECL|member|name
r_char
id|name
(braket
id|KOBJ_NAME_LEN
)braket
suffix:semicolon
DECL|member|refcount
id|atomic_t
id|refcount
suffix:semicolon
DECL|member|entry
r_struct
id|list_head
id|entry
suffix:semicolon
DECL|member|parent
r_struct
id|kobject
op_star
id|parent
suffix:semicolon
DECL|member|kset
r_struct
id|kset
op_star
id|kset
suffix:semicolon
DECL|member|ktype
r_struct
id|kobj_type
op_star
id|ktype
suffix:semicolon
DECL|member|dentry
r_struct
id|dentry
op_star
id|dentry
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_int
id|kobject_set_name
c_func
(paren
r_struct
id|kobject
op_star
comma
r_const
r_char
op_star
comma
dot
dot
dot
)paren
id|__attribute__
c_func
(paren
(paren
id|format
c_func
(paren
id|printf
comma
l_int|2
comma
l_int|3
)paren
)paren
)paren
suffix:semicolon
DECL|function|kobject_name
r_static
r_inline
r_char
op_star
id|kobject_name
c_func
(paren
r_struct
id|kobject
op_star
id|kobj
)paren
(brace
r_return
id|kobj-&gt;k_name
suffix:semicolon
)brace
r_extern
r_void
id|kobject_init
c_func
(paren
r_struct
id|kobject
op_star
)paren
suffix:semicolon
r_extern
r_void
id|kobject_cleanup
c_func
(paren
r_struct
id|kobject
op_star
)paren
suffix:semicolon
r_extern
r_int
id|kobject_add
c_func
(paren
r_struct
id|kobject
op_star
)paren
suffix:semicolon
r_extern
r_void
id|kobject_del
c_func
(paren
r_struct
id|kobject
op_star
)paren
suffix:semicolon
r_extern
r_void
id|kobject_rename
c_func
(paren
r_struct
id|kobject
op_star
comma
r_char
op_star
id|new_name
)paren
suffix:semicolon
r_extern
r_int
id|kobject_register
c_func
(paren
r_struct
id|kobject
op_star
)paren
suffix:semicolon
r_extern
r_void
id|kobject_unregister
c_func
(paren
r_struct
id|kobject
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|kobject
op_star
id|kobject_get
c_func
(paren
r_struct
id|kobject
op_star
)paren
suffix:semicolon
r_extern
r_void
id|kobject_put
c_func
(paren
r_struct
id|kobject
op_star
)paren
suffix:semicolon
DECL|struct|kobj_type
r_struct
id|kobj_type
(brace
DECL|member|release
r_void
(paren
op_star
id|release
)paren
(paren
r_struct
id|kobject
op_star
)paren
suffix:semicolon
DECL|member|sysfs_ops
r_struct
id|sysfs_ops
op_star
id|sysfs_ops
suffix:semicolon
DECL|member|default_attrs
r_struct
id|attribute
op_star
op_star
id|default_attrs
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/**&n; *&t;kset - a set of kobjects of a specific type, belonging&n; *&t;to a specific subsystem.&n; *&n; *&t;All kobjects of a kset should be embedded in an identical &n; *&t;type. This type may have a descriptor, which the kset points&n; *&t;to. This allows there to exist sets of objects of the same&n; *&t;type in different subsystems.&n; *&n; *&t;A subsystem does not have to be a list of only one type &n; *&t;of object; multiple ksets can belong to one subsystem. All &n; *&t;ksets of a subsystem share the subsystem&squot;s lock.&n; *&n; *      Each kset can support hotplugging; if it does, it will be given&n; *      the opportunity to filter out specific kobjects from being&n; *      reported, as well as to add its own &quot;data&quot; elements to the&n; *      environment being passed to the hotplug helper.&n; */
DECL|struct|kset_hotplug_ops
r_struct
id|kset_hotplug_ops
(brace
DECL|member|filter
r_int
(paren
op_star
id|filter
)paren
(paren
r_struct
id|kset
op_star
id|kset
comma
r_struct
id|kobject
op_star
id|kobj
)paren
suffix:semicolon
DECL|member|name
r_char
op_star
(paren
op_star
id|name
)paren
(paren
r_struct
id|kset
op_star
id|kset
comma
r_struct
id|kobject
op_star
id|kobj
)paren
suffix:semicolon
DECL|member|hotplug
r_int
(paren
op_star
id|hotplug
)paren
(paren
r_struct
id|kset
op_star
id|kset
comma
r_struct
id|kobject
op_star
id|kobj
comma
r_char
op_star
op_star
id|envp
comma
r_int
id|num_envp
comma
r_char
op_star
id|buffer
comma
r_int
id|buffer_size
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|kset
r_struct
id|kset
(brace
DECL|member|subsys
r_struct
id|subsystem
op_star
id|subsys
suffix:semicolon
DECL|member|ktype
r_struct
id|kobj_type
op_star
id|ktype
suffix:semicolon
DECL|member|list
r_struct
id|list_head
id|list
suffix:semicolon
DECL|member|kobj
r_struct
id|kobject
id|kobj
suffix:semicolon
DECL|member|hotplug_ops
r_struct
id|kset_hotplug_ops
op_star
id|hotplug_ops
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_void
id|kset_init
c_func
(paren
r_struct
id|kset
op_star
id|k
)paren
suffix:semicolon
r_extern
r_int
id|kset_add
c_func
(paren
r_struct
id|kset
op_star
id|k
)paren
suffix:semicolon
r_extern
r_int
id|kset_register
c_func
(paren
r_struct
id|kset
op_star
id|k
)paren
suffix:semicolon
r_extern
r_void
id|kset_unregister
c_func
(paren
r_struct
id|kset
op_star
id|k
)paren
suffix:semicolon
DECL|function|to_kset
r_static
r_inline
r_struct
id|kset
op_star
id|to_kset
c_func
(paren
r_struct
id|kobject
op_star
id|kobj
)paren
(brace
r_return
id|kobj
ques
c_cond
id|container_of
c_func
(paren
id|kobj
comma
r_struct
id|kset
comma
id|kobj
)paren
suffix:colon
l_int|NULL
suffix:semicolon
)brace
DECL|function|kset_get
r_static
r_inline
r_struct
id|kset
op_star
id|kset_get
c_func
(paren
r_struct
id|kset
op_star
id|k
)paren
(brace
r_return
id|k
ques
c_cond
id|to_kset
c_func
(paren
id|kobject_get
c_func
(paren
op_amp
id|k-&gt;kobj
)paren
)paren
suffix:colon
l_int|NULL
suffix:semicolon
)brace
DECL|function|kset_put
r_static
r_inline
r_void
id|kset_put
c_func
(paren
r_struct
id|kset
op_star
id|k
)paren
(brace
id|kobject_put
c_func
(paren
op_amp
id|k-&gt;kobj
)paren
suffix:semicolon
)brace
DECL|function|get_ktype
r_static
r_inline
r_struct
id|kobj_type
op_star
id|get_ktype
c_func
(paren
r_struct
id|kobject
op_star
id|k
)paren
(brace
r_if
c_cond
(paren
id|k-&gt;kset
op_logical_and
id|k-&gt;kset-&gt;ktype
)paren
r_return
id|k-&gt;kset-&gt;ktype
suffix:semicolon
r_else
r_return
id|k-&gt;ktype
suffix:semicolon
)brace
r_extern
r_struct
id|kobject
op_star
id|kset_find_obj
c_func
(paren
r_struct
id|kset
op_star
comma
r_const
r_char
op_star
)paren
suffix:semicolon
multiline_comment|/**&n; * Use this when initializing an embedded kset with no other &n; * fields to initialize.&n; */
DECL|macro|set_kset_name
mdefine_line|#define set_kset_name(str)&t;.kset = { .kobj = { .name = str } }
DECL|struct|subsystem
r_struct
id|subsystem
(brace
DECL|member|kset
r_struct
id|kset
id|kset
suffix:semicolon
DECL|member|rwsem
r_struct
id|rw_semaphore
id|rwsem
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|decl_subsys
mdefine_line|#define decl_subsys(_name,_type,_hotplug_ops) &bslash;&n;struct subsystem _name##_subsys = { &bslash;&n;&t;.kset = { &bslash;&n;&t;&t;.kobj = { .name = __stringify(_name) }, &bslash;&n;&t;&t;.ktype = _type, &bslash;&n;&t;&t;.hotplug_ops =_hotplug_ops, &bslash;&n;&t;} &bslash;&n;}
multiline_comment|/**&n; * Helpers for setting the kset of registered objects.&n; * Often, a registered object belongs to a kset embedded in a &n; * subsystem. These do no magic, just make the resulting code&n; * easier to follow. &n; */
multiline_comment|/**&n; *&t;kobj_set_kset_s(obj,subsys) - set kset for embedded kobject.&n; *&t;@obj:&t;&t;ptr to some object type.&n; *&t;@subsys:&t;a subsystem object (not a ptr).&n; *&n; *&t;Can be used for any object type with an embedded -&gt;kobj.&n; */
DECL|macro|kobj_set_kset_s
mdefine_line|#define kobj_set_kset_s(obj,subsys) &bslash;&n;&t;(obj)-&gt;kobj.kset = &amp;(subsys).kset
multiline_comment|/**&n; *&t;kset_set_kset_s(obj,subsys) - set kset for embedded kset.&n; *&t;@obj:&t;&t;ptr to some object type.&n; *&t;@subsys:&t;a subsystem object (not a ptr).&n; *&n; *&t;Can be used for any object type with an embedded -&gt;kset.&n; *&t;Sets the kset of @obj&squot;s  embedded kobject (via its embedded&n; *&t;kset) to @subsys.kset. This makes @obj a member of that &n; *&t;kset.&n; */
DECL|macro|kset_set_kset_s
mdefine_line|#define kset_set_kset_s(obj,subsys) &bslash;&n;&t;(obj)-&gt;kset.kobj.kset = &amp;(subsys).kset
multiline_comment|/**&n; *&t;subsys_set_kset(obj,subsys) - set kset for subsystem&n; *&t;@obj:&t;&t;ptr to some object type.&n; *&t;@subsys:&t;a subsystem object (not a ptr).&n; *&n; *&t;Can be used for any object type with an embedded -&gt;subsys.&n; *&t;Sets the kset of @obj&squot;s kobject to @subsys.kset. This makes&n; *&t;the object a member of that kset.&n; */
DECL|macro|subsys_set_kset
mdefine_line|#define subsys_set_kset(obj,_subsys) &bslash;&n;&t;(obj)-&gt;subsys.kset.kobj.kset = &amp;(_subsys).kset
r_extern
r_void
id|subsystem_init
c_func
(paren
r_struct
id|subsystem
op_star
)paren
suffix:semicolon
r_extern
r_int
id|subsystem_register
c_func
(paren
r_struct
id|subsystem
op_star
)paren
suffix:semicolon
r_extern
r_void
id|subsystem_unregister
c_func
(paren
r_struct
id|subsystem
op_star
)paren
suffix:semicolon
DECL|function|subsys_get
r_static
r_inline
r_struct
id|subsystem
op_star
id|subsys_get
c_func
(paren
r_struct
id|subsystem
op_star
id|s
)paren
(brace
r_return
id|s
ques
c_cond
id|container_of
c_func
(paren
id|kset_get
c_func
(paren
op_amp
id|s-&gt;kset
)paren
comma
r_struct
id|subsystem
comma
id|kset
)paren
suffix:colon
l_int|NULL
suffix:semicolon
)brace
DECL|function|subsys_put
r_static
r_inline
r_void
id|subsys_put
c_func
(paren
r_struct
id|subsystem
op_star
id|s
)paren
(brace
id|kset_put
c_func
(paren
op_amp
id|s-&gt;kset
)paren
suffix:semicolon
)brace
DECL|struct|subsys_attribute
r_struct
id|subsys_attribute
(brace
DECL|member|attr
r_struct
id|attribute
id|attr
suffix:semicolon
DECL|member|show
id|ssize_t
(paren
op_star
id|show
)paren
(paren
r_struct
id|subsystem
op_star
comma
r_char
op_star
)paren
suffix:semicolon
DECL|member|store
id|ssize_t
(paren
op_star
id|store
)paren
(paren
r_struct
id|subsystem
op_star
comma
r_const
r_char
op_star
comma
r_int
)paren
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_int
id|subsys_create_file
c_func
(paren
r_struct
id|subsystem
op_star
comma
r_struct
id|subsys_attribute
op_star
)paren
suffix:semicolon
r_extern
r_void
id|subsys_remove_file
c_func
(paren
r_struct
id|subsystem
op_star
comma
r_struct
id|subsys_attribute
op_star
)paren
suffix:semicolon
macro_line|#endif /* _KOBJECT_H_ */
eof
