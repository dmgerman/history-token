multiline_comment|/*&n; * swapcache pages are stored in the swapper_space radix tree.  We want to&n; * get good packing density in that tree, so the index should be dense in&n; * the low-order bits.&n; *&n; * We arrange the `type&squot; and `offset&squot; fields so that `type&squot; is at the five&n; * high-order bits of the smp_entry_t and `offset&squot; is right-aligned in the&n; * remaining bits.&n; *&n; * swp_entry_t&squot;s are *never* stored anywhere in their arch-dependent format.&n; */
DECL|macro|SWP_TYPE_SHIFT
mdefine_line|#define SWP_TYPE_SHIFT(e)&t;(sizeof(e.val) * 8 - MAX_SWAPFILES_SHIFT)
DECL|macro|SWP_OFFSET_MASK
mdefine_line|#define SWP_OFFSET_MASK(e)&t;((1UL &lt;&lt; SWP_TYPE_SHIFT(e)) - 1)
multiline_comment|/*&n; * Store a type+offset into a swp_entry_t in an arch-independent format&n; */
DECL|function|swp_entry
r_static
r_inline
id|swp_entry_t
id|swp_entry
c_func
(paren
r_int
id|type
comma
id|pgoff_t
id|offset
)paren
(brace
id|swp_entry_t
id|ret
suffix:semicolon
id|ret.val
op_assign
(paren
(paren
r_int
r_int
)paren
id|type
op_lshift
id|SWP_TYPE_SHIFT
c_func
(paren
id|ret
)paren
)paren
op_or
(paren
id|offset
op_amp
id|SWP_OFFSET_MASK
c_func
(paren
id|ret
)paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
multiline_comment|/*&n; * Extract the `type&squot; field from a swp_entry_t.  The swp_entry_t is in&n; * arch-independent format&n; */
DECL|function|swp_type
r_static
r_inline
r_int
id|swp_type
c_func
(paren
id|swp_entry_t
id|entry
)paren
(brace
r_return
(paren
id|entry.val
op_rshift
id|SWP_TYPE_SHIFT
c_func
(paren
id|entry
)paren
)paren
op_amp
(paren
(paren
l_int|1
op_lshift
id|MAX_SWAPFILES_SHIFT
)paren
op_minus
l_int|1
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Extract the `offset&squot; field from a swp_entry_t.  The swp_entry_t is in&n; * arch-independent format&n; */
DECL|function|swp_offset
r_static
r_inline
id|pgoff_t
id|swp_offset
c_func
(paren
id|swp_entry_t
id|entry
)paren
(brace
r_return
id|entry.val
op_amp
id|SWP_OFFSET_MASK
c_func
(paren
id|entry
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Convert the arch-dependent pte representation of a swp_entry_t into an&n; * arch-independent swp_entry_t.&n; */
DECL|function|pte_to_swp_entry
r_static
r_inline
id|swp_entry_t
id|pte_to_swp_entry
c_func
(paren
id|pte_t
id|pte
)paren
(brace
id|swp_entry_t
id|arch_entry
suffix:semicolon
id|BUG_ON
c_func
(paren
id|pte_file
c_func
(paren
id|pte
)paren
)paren
suffix:semicolon
id|arch_entry
op_assign
id|__pte_to_swp_entry
c_func
(paren
id|pte
)paren
suffix:semicolon
r_return
id|swp_entry
c_func
(paren
id|__swp_type
c_func
(paren
id|arch_entry
)paren
comma
id|__swp_offset
c_func
(paren
id|arch_entry
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Convert the arch-independent representation of a swp_entry_t into the&n; * arch-dependent pte representation.&n; */
DECL|function|swp_entry_to_pte
r_static
r_inline
id|pte_t
id|swp_entry_to_pte
c_func
(paren
id|swp_entry_t
id|entry
)paren
(brace
id|swp_entry_t
id|arch_entry
suffix:semicolon
id|arch_entry
op_assign
id|__swp_entry
c_func
(paren
id|swp_type
c_func
(paren
id|entry
)paren
comma
id|swp_offset
c_func
(paren
id|entry
)paren
)paren
suffix:semicolon
id|BUG_ON
c_func
(paren
id|pte_file
c_func
(paren
id|__swp_entry_to_pte
c_func
(paren
id|arch_entry
)paren
)paren
)paren
suffix:semicolon
r_return
id|__swp_entry_to_pte
c_func
(paren
id|arch_entry
)paren
suffix:semicolon
)brace
eof
