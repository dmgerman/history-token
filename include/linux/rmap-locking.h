multiline_comment|/*&n; * include/linux/rmap-locking.h&n; *&n; * Locking primitives for exclusive access to a page&squot;s reverse-mapping&n; * pte chain.&n; */
DECL|function|pte_chain_lock
r_static
r_inline
r_void
id|pte_chain_lock
c_func
(paren
r_struct
id|page
op_star
id|page
)paren
(brace
multiline_comment|/*&n;&t; * Assuming the lock is uncontended, this never enters&n;&t; * the body of the outer loop. If it is contended, then&n;&t; * within the inner loop a non-atomic test is used to&n;&t; * busywait with less bus contention for a good time to&n;&t; * attempt to acquire the lock bit.&n;&t; */
id|preempt_disable
c_func
(paren
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_SMP
r_while
c_loop
(paren
id|test_and_set_bit
c_func
(paren
id|PG_chainlock
comma
op_amp
id|page-&gt;flags
)paren
)paren
(brace
r_while
c_loop
(paren
id|test_bit
c_func
(paren
id|PG_chainlock
comma
op_amp
id|page-&gt;flags
)paren
)paren
id|cpu_relax
c_func
(paren
)paren
suffix:semicolon
)brace
macro_line|#endif
)brace
DECL|function|pte_chain_unlock
r_static
r_inline
r_void
id|pte_chain_unlock
c_func
(paren
r_struct
id|page
op_star
id|page
)paren
(brace
macro_line|#ifdef CONFIG_SMP
id|smp_mb__before_clear_bit
c_func
(paren
)paren
suffix:semicolon
id|clear_bit
c_func
(paren
id|PG_chainlock
comma
op_amp
id|page-&gt;flags
)paren
suffix:semicolon
macro_line|#endif
id|preempt_enable
c_func
(paren
)paren
suffix:semicolon
)brace
eof
