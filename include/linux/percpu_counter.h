multiline_comment|/*&n; * A simple &quot;approximate counter&quot; for use in ext2 and ext3 superblocks.&n; *&n; * WARNING: these things are HUGE.  4 kbytes per counter on 32-way P4.&n; */
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/spinlock.h&gt;
macro_line|#include &lt;linux/smp.h&gt;
macro_line|#include &lt;linux/threads.h&gt;
macro_line|#ifdef CONFIG_SMP
DECL|struct|__percpu_counter
r_struct
id|__percpu_counter
(brace
DECL|member|count
r_int
id|count
suffix:semicolon
DECL|variable|____cacheline_aligned
)brace
id|____cacheline_aligned
suffix:semicolon
DECL|struct|percpu_counter
r_struct
id|percpu_counter
(brace
DECL|member|lock
id|spinlock_t
id|lock
suffix:semicolon
DECL|member|count
r_int
id|count
suffix:semicolon
DECL|member|counters
r_struct
id|__percpu_counter
id|counters
(braket
id|NR_CPUS
)braket
suffix:semicolon
)brace
suffix:semicolon
macro_line|#if NR_CPUS &gt;= 16
DECL|macro|FBC_BATCH
mdefine_line|#define FBC_BATCH&t;(NR_CPUS*2)
macro_line|#else
DECL|macro|FBC_BATCH
mdefine_line|#define FBC_BATCH&t;(NR_CPUS*4)
macro_line|#endif
DECL|function|percpu_counter_init
r_static
r_inline
r_void
id|percpu_counter_init
c_func
(paren
r_struct
id|percpu_counter
op_star
id|fbc
)paren
(brace
r_int
id|i
suffix:semicolon
id|spin_lock_init
c_func
(paren
op_amp
id|fbc-&gt;lock
)paren
suffix:semicolon
id|fbc-&gt;count
op_assign
l_int|0
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|NR_CPUS
suffix:semicolon
id|i
op_increment
)paren
id|fbc-&gt;counters
(braket
id|i
)braket
dot
id|count
op_assign
l_int|0
suffix:semicolon
)brace
r_void
id|percpu_counter_mod
c_func
(paren
r_struct
id|percpu_counter
op_star
id|fbc
comma
r_int
id|amount
)paren
suffix:semicolon
DECL|function|percpu_counter_read
r_static
r_inline
r_int
id|percpu_counter_read
c_func
(paren
r_struct
id|percpu_counter
op_star
id|fbc
)paren
(brace
r_return
id|fbc-&gt;count
suffix:semicolon
)brace
multiline_comment|/*&n; * It is possible for the percpu_counter_read() to return a small negative&n; * number for some counter which should never be negative.&n; */
DECL|function|percpu_counter_read_positive
r_static
r_inline
r_int
id|percpu_counter_read_positive
c_func
(paren
r_struct
id|percpu_counter
op_star
id|fbc
)paren
(brace
r_int
id|ret
op_assign
id|fbc-&gt;count
suffix:semicolon
id|barrier
c_func
(paren
)paren
suffix:semicolon
multiline_comment|/* Prevent reloads of fbc-&gt;count */
r_if
c_cond
(paren
id|ret
OG
l_int|0
)paren
r_return
id|ret
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
macro_line|#else
DECL|struct|percpu_counter
r_struct
id|percpu_counter
(brace
DECL|member|count
r_int
id|count
suffix:semicolon
)brace
suffix:semicolon
DECL|function|percpu_counter_init
r_static
r_inline
r_void
id|percpu_counter_init
c_func
(paren
r_struct
id|percpu_counter
op_star
id|fbc
)paren
(brace
id|fbc-&gt;count
op_assign
l_int|0
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|percpu_counter_mod
id|percpu_counter_mod
c_func
(paren
r_struct
id|percpu_counter
op_star
id|fbc
comma
r_int
id|amount
)paren
(brace
id|preempt_disable
c_func
(paren
)paren
suffix:semicolon
id|fbc-&gt;count
op_add_assign
id|amount
suffix:semicolon
id|preempt_enable
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|percpu_counter_read
r_static
r_inline
r_int
id|percpu_counter_read
c_func
(paren
r_struct
id|percpu_counter
op_star
id|fbc
)paren
(brace
r_return
id|fbc-&gt;count
suffix:semicolon
)brace
DECL|function|percpu_counter_read_positive
r_static
r_inline
r_int
id|percpu_counter_read_positive
c_func
(paren
r_struct
id|percpu_counter
op_star
id|fbc
)paren
(brace
r_return
id|fbc-&gt;count
suffix:semicolon
)brace
macro_line|#endif&t;/* CONFIG_SMP */
DECL|function|percpu_counter_inc
r_static
r_inline
r_void
id|percpu_counter_inc
c_func
(paren
r_struct
id|percpu_counter
op_star
id|fbc
)paren
(brace
id|percpu_counter_mod
c_func
(paren
id|fbc
comma
l_int|1
)paren
suffix:semicolon
)brace
DECL|function|percpu_counter_dec
r_static
r_inline
r_void
id|percpu_counter_dec
c_func
(paren
r_struct
id|percpu_counter
op_star
id|fbc
)paren
(brace
id|percpu_counter_mod
c_func
(paren
id|fbc
comma
op_minus
l_int|1
)paren
suffix:semicolon
)brace
eof
