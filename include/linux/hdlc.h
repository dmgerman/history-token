multiline_comment|/*&n; * Generic HDLC support routines for Linux&n; *&n; * Copyright (C) 1999, 2000 Krzysztof Halasa &lt;khc@pm.waw.pl&gt;&n; *&n; * This program is free software; you can redistribute it and/or modify it&n; * under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2 of the License, or&n; * (at your option) any later version.&n; */
macro_line|#ifndef __HDLC_H
DECL|macro|__HDLC_H
mdefine_line|#define __HDLC_H
multiline_comment|/* Ioctls - to be changed */
DECL|macro|HDLCGSLOTMAP
mdefine_line|#define HDLCGSLOTMAP&t;(0x89F4) /* E1/T1 slot bitmap */
DECL|macro|HDLCGCLOCK
mdefine_line|#define HDLCGCLOCK&t;(0x89F5) /* clock sources */
DECL|macro|HDLCGCLOCKRATE
mdefine_line|#define HDLCGCLOCKRATE&t;(0x89F6) /* clock rate */
DECL|macro|HDLCGMODE
mdefine_line|#define HDLCGMODE&t;(0x89F7) /* internal to hdlc.c - protocol used */
DECL|macro|HDLCGLINE
mdefine_line|#define HDLCGLINE&t;(0x89F8) /* physical interface */
DECL|macro|HDLCSSLOTMAP
mdefine_line|#define HDLCSSLOTMAP&t;(0x89F9)
DECL|macro|HDLCSCLOCK
mdefine_line|#define HDLCSCLOCK&t;(0x89FA)
DECL|macro|HDLCSCLOCKRATE
mdefine_line|#define HDLCSCLOCKRATE&t;(0x89FB)
DECL|macro|HDLCSMODE
mdefine_line|#define HDLCSMODE&t;(0x89FC) /* internal to hdlc.c - select protocol */
DECL|macro|HDLCPVC
mdefine_line|#define HDLCPVC&t;&t;(0x89FD) /* internal to hdlc.c - create/delete PVC */
DECL|macro|HDLCSLINE
mdefine_line|#define HDLCSLINE&t;(0x89FE)
DECL|macro|HDLCRUN
mdefine_line|#define HDLCRUN&t;&t;(0x89FF) /* Download firmware and run board */
multiline_comment|/* Modes */
DECL|macro|MODE_NONE
mdefine_line|#define MODE_NONE&t;0x00000000 /* Not initialized */
DECL|macro|MODE_DCE
mdefine_line|#define MODE_DCE&t;0x00000080 /* DCE */
DECL|macro|MODE_HDLC
mdefine_line|#define MODE_HDLC&t;0x00000100 /* Raw HDLC frames */
DECL|macro|MODE_CISCO
mdefine_line|#define MODE_CISCO&t;0x00000200
DECL|macro|MODE_PPP
mdefine_line|#define MODE_PPP&t;0x00000400
DECL|macro|MODE_FR
mdefine_line|#define MODE_FR&t;&t;0x00000800 /* Any LMI */
DECL|macro|MODE_FR_ANSI
mdefine_line|#define MODE_FR_ANSI&t;0x00000801
DECL|macro|MODE_FR_CCITT
mdefine_line|#define MODE_FR_CCITT&t;0x00000802
DECL|macro|MODE_X25
mdefine_line|#define MODE_X25&t;0x00001000
DECL|macro|MODE_MASK
mdefine_line|#define MODE_MASK&t;0x0000FF00
DECL|macro|MODE_SOFT
mdefine_line|#define MODE_SOFT&t;0x80000000 /* Driver modes, using hardware HDLC */
multiline_comment|/* Lines */
DECL|macro|LINE_DEFAULT
mdefine_line|#define LINE_DEFAULT&t;0x00000000
DECL|macro|LINE_V35
mdefine_line|#define LINE_V35&t;0x00000001
DECL|macro|LINE_RS232
mdefine_line|#define LINE_RS232&t;0x00000002
DECL|macro|LINE_X21
mdefine_line|#define LINE_X21&t;0x00000003
DECL|macro|LINE_T1
mdefine_line|#define LINE_T1&t;&t;0x00000004
DECL|macro|LINE_E1
mdefine_line|#define LINE_E1&t;&t;0x00000005
DECL|macro|LINE_MASK
mdefine_line|#define LINE_MASK&t;0x000000FF
DECL|macro|LINE_LOOPBACK
mdefine_line|#define LINE_LOOPBACK&t;0x80000000 /* On-card loopback */
DECL|macro|CLOCK_EXT
mdefine_line|#define CLOCK_EXT&t;0&t;/* External TX and RX clock - DTE */
DECL|macro|CLOCK_INT
mdefine_line|#define CLOCK_INT&t;1&t;/* Internal TX and RX clock - DCE */
DECL|macro|CLOCK_TXINT
mdefine_line|#define CLOCK_TXINT&t;2&t;/* Internal TX and external RX clock */
DECL|macro|CLOCK_TXFROMRX
mdefine_line|#define CLOCK_TXFROMRX&t;3&t;/* TX clock derived from external RX clock */
DECL|macro|HDLC_MAX_MTU
mdefine_line|#define HDLC_MAX_MTU 1500&t;/* Ethernet 1500 bytes */
DECL|macro|HDLC_MAX_MRU
mdefine_line|#define HDLC_MAX_MRU (HDLC_MAX_MTU + 10) /* max 10 bytes for FR */
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/skbuff.h&gt;
macro_line|#include &lt;linux/netdevice.h&gt;
macro_line|#include &lt;net/syncppp.h&gt;
DECL|macro|MAXLEN_LMISTAT
mdefine_line|#define MAXLEN_LMISTAT  20&t;/* max size of status enquiry frame */
DECL|macro|LINK_STATE_RELIABLE
mdefine_line|#define LINK_STATE_RELIABLE 0x01
DECL|macro|LINK_STATE_REQUEST
mdefine_line|#define LINK_STATE_REQUEST  0x02 /* full stat sent (DCE) / req pending (DTE) */
DECL|macro|LINK_STATE_CHANGED
mdefine_line|#define LINK_STATE_CHANGED  0x04 /* change in PVCs state, send full report */
DECL|macro|LINK_STATE_FULLREP_SENT
mdefine_line|#define LINK_STATE_FULLREP_SENT 0x08 /* full report sent */
DECL|macro|PVC_STATE_NEW
mdefine_line|#define PVC_STATE_NEW       0x01
DECL|macro|PVC_STATE_ACTIVE
mdefine_line|#define PVC_STATE_ACTIVE    0x02
DECL|macro|PVC_STATE_FECN
mdefine_line|#define PVC_STATE_FECN&t;    0x08 /* FECN condition */
DECL|macro|PVC_STATE_BECN
mdefine_line|#define PVC_STATE_BECN      0x10 /* BECN condition */
DECL|macro|FR_UI
mdefine_line|#define FR_UI              0x03
DECL|macro|FR_PAD
mdefine_line|#define FR_PAD             0x00
DECL|macro|NLPID_IP
mdefine_line|#define NLPID_IP           0xCC
DECL|macro|NLPID_IPV6
mdefine_line|#define NLPID_IPV6         0x8E
DECL|macro|NLPID_SNAP
mdefine_line|#define NLPID_SNAP         0x80
DECL|macro|NLPID_PAD
mdefine_line|#define NLPID_PAD          0x00
DECL|macro|NLPID_Q933
mdefine_line|#define NLPID_Q933         0x08
DECL|macro|LMI_DLCI
mdefine_line|#define LMI_DLCI                   0 /* LMI DLCI */
DECL|macro|LMI_PROTO
mdefine_line|#define LMI_PROTO               0x08
DECL|macro|LMI_CALLREF
mdefine_line|#define LMI_CALLREF             0x00 /* Call Reference */
DECL|macro|LMI_ANSI_LOCKSHIFT
mdefine_line|#define LMI_ANSI_LOCKSHIFT      0x95 /* ANSI lockshift */
DECL|macro|LMI_REPTYPE
mdefine_line|#define LMI_REPTYPE                1 /* report type */
DECL|macro|LMI_CCITT_REPTYPE
mdefine_line|#define LMI_CCITT_REPTYPE       0x51
DECL|macro|LMI_ALIVE
mdefine_line|#define LMI_ALIVE                  3 /* keep alive */
DECL|macro|LMI_CCITT_ALIVE
mdefine_line|#define LMI_CCITT_ALIVE         0x53
DECL|macro|LMI_PVCSTAT
mdefine_line|#define LMI_PVCSTAT                7 /* pvc status */
DECL|macro|LMI_CCITT_PVCSTAT
mdefine_line|#define LMI_CCITT_PVCSTAT       0x57
DECL|macro|LMI_FULLREP
mdefine_line|#define LMI_FULLREP                0 /* full report  */
DECL|macro|LMI_INTEGRITY
mdefine_line|#define LMI_INTEGRITY              1 /* link integrity report */
DECL|macro|LMI_SINGLE
mdefine_line|#define LMI_SINGLE                 2 /* single pvc report */
DECL|macro|LMI_STATUS_ENQUIRY
mdefine_line|#define LMI_STATUS_ENQUIRY      0x75
DECL|macro|LMI_STATUS
mdefine_line|#define LMI_STATUS              0x7D /* reply */
DECL|macro|LMI_REPT_LEN
mdefine_line|#define LMI_REPT_LEN               1 /* report type element length */
DECL|macro|LMI_INTEG_LEN
mdefine_line|#define LMI_INTEG_LEN              2 /* link integrity element length */
DECL|macro|LMI_LENGTH
mdefine_line|#define LMI_LENGTH                13 /* standard LMI frame length */
DECL|macro|LMI_ANSI_LENGTH
mdefine_line|#define LMI_ANSI_LENGTH           14
r_typedef
r_struct
(brace
DECL|member|ea1
r_int
id|ea1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|cr
r_int
id|cr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dlcih
r_int
id|dlcih
suffix:colon
l_int|6
suffix:semicolon
DECL|member|ea2
r_int
id|ea2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de
r_int
id|de
suffix:colon
l_int|1
suffix:semicolon
DECL|member|becn
r_int
id|becn
suffix:colon
l_int|1
suffix:semicolon
DECL|member|fecn
r_int
id|fecn
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dlcil
r_int
id|dlcil
suffix:colon
l_int|4
suffix:semicolon
DECL|typedef|fr_hdr
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
id|fr_hdr
suffix:semicolon
r_typedef
r_struct
(brace
multiline_comment|/* Used in Cisco and PPP mode */
DECL|member|address
id|u8
id|address
suffix:semicolon
DECL|member|control
id|u8
id|control
suffix:semicolon
DECL|member|protocol
id|u16
id|protocol
suffix:semicolon
DECL|typedef|hdlc_header
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
id|hdlc_header
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|type
id|u32
id|type
suffix:semicolon
multiline_comment|/* code */
DECL|member|par1
id|u32
id|par1
suffix:semicolon
DECL|member|par2
id|u32
id|par2
suffix:semicolon
DECL|member|rel
id|u16
id|rel
suffix:semicolon
multiline_comment|/* reliability */
DECL|member|time
id|u32
id|time
suffix:semicolon
DECL|typedef|cisco_packet
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
id|cisco_packet
suffix:semicolon
DECL|macro|CISCO_PACKET_LEN
mdefine_line|#define&t;CISCO_PACKET_LEN&t;18
DECL|macro|CISCO_BIG_PACKET_LEN
mdefine_line|#define&t;CISCO_BIG_PACKET_LEN&t;20
DECL|struct|pvc_device_struct
r_typedef
r_struct
id|pvc_device_struct
(brace
DECL|member|netdev
r_struct
id|net_device
id|netdev
suffix:semicolon
multiline_comment|/* PVC net device - must be first */
DECL|member|stats
r_struct
id|net_device_stats
id|stats
suffix:semicolon
DECL|member|master
r_struct
id|hdlc_device_struct
op_star
id|master
suffix:semicolon
DECL|member|next
r_struct
id|pvc_device_struct
op_star
id|next
suffix:semicolon
DECL|member|state
id|u8
id|state
suffix:semicolon
DECL|member|newstate
id|u8
id|newstate
suffix:semicolon
DECL|typedef|pvc_device
)brace
id|pvc_device
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|last_errors
id|u32
id|last_errors
suffix:semicolon
multiline_comment|/* last errors bit list */
DECL|member|last_poll
r_int
id|last_poll
suffix:semicolon
multiline_comment|/* ! */
DECL|member|T391
id|u8
id|T391
suffix:semicolon
multiline_comment|/* ! link integrity verification polling timer */
DECL|member|T392
id|u8
id|T392
suffix:semicolon
multiline_comment|/* ! polling verification timer */
DECL|member|N391
id|u8
id|N391
suffix:semicolon
multiline_comment|/* full status polling counter */
DECL|member|N392
id|u8
id|N392
suffix:semicolon
multiline_comment|/* error threshold */
DECL|member|N393
id|u8
id|N393
suffix:semicolon
multiline_comment|/* monitored events count */
DECL|member|N391cnt
id|u8
id|N391cnt
suffix:semicolon
DECL|member|state
id|u8
id|state
suffix:semicolon
multiline_comment|/* ! */
DECL|member|txseq
id|u32
id|txseq
suffix:semicolon
multiline_comment|/* ! TX sequence number - Cisco uses 4 bytes */
DECL|member|rxseq
id|u32
id|rxseq
suffix:semicolon
multiline_comment|/* ! RX sequence number */
DECL|typedef|fr_lmi
)brace
id|fr_lmi
suffix:semicolon
multiline_comment|/* ! means used in Cisco HDLC as well */
DECL|struct|hdlc_device_struct
r_typedef
r_struct
id|hdlc_device_struct
(brace
multiline_comment|/* to be initialized by hardware driver: */
DECL|member|netdev
r_struct
id|net_device
id|netdev
suffix:semicolon
multiline_comment|/* master net device - must be first */
DECL|member|stats
r_struct
id|net_device_stats
id|stats
suffix:semicolon
DECL|member|pppdev
r_struct
id|ppp_device
id|pppdev
suffix:semicolon
DECL|member|syncppp_ptr
r_struct
id|ppp_device
op_star
id|syncppp_ptr
suffix:semicolon
multiline_comment|/* set_mode may be NULL if HDLC-only board */
DECL|member|set_mode
r_int
(paren
op_star
id|set_mode
)paren
(paren
r_struct
id|hdlc_device_struct
op_star
id|hdlc
comma
r_int
id|mode
)paren
suffix:semicolon
DECL|member|open
r_int
(paren
op_star
id|open
)paren
(paren
r_struct
id|hdlc_device_struct
op_star
id|hdlc
)paren
suffix:semicolon
DECL|member|close
r_void
(paren
op_star
id|close
)paren
(paren
r_struct
id|hdlc_device_struct
op_star
id|hdlc
)paren
suffix:semicolon
DECL|member|xmit
r_int
(paren
op_star
id|xmit
)paren
(paren
r_struct
id|hdlc_device_struct
op_star
id|hdlc
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
DECL|member|ioctl
r_int
(paren
op_star
id|ioctl
)paren
(paren
r_struct
id|hdlc_device_struct
op_star
id|hdlc
comma
r_struct
id|ifreq
op_star
id|ifr
comma
r_int
id|cmd
)paren
suffix:semicolon
multiline_comment|/* Only in &quot;hardware&quot; FR modes etc. - may be NULL */
DECL|member|create_pvc
r_int
(paren
op_star
id|create_pvc
)paren
(paren
id|pvc_device
op_star
id|pvc
)paren
suffix:semicolon
DECL|member|destroy_pvc
r_void
(paren
op_star
id|destroy_pvc
)paren
(paren
id|pvc_device
op_star
id|pvc
)paren
suffix:semicolon
DECL|member|open_pvc
r_int
(paren
op_star
id|open_pvc
)paren
(paren
id|pvc_device
op_star
id|pvc
)paren
suffix:semicolon
DECL|member|close_pvc
r_void
(paren
op_star
id|close_pvc
)paren
(paren
id|pvc_device
op_star
id|pvc
)paren
suffix:semicolon
multiline_comment|/* for hdlc.c internal use only */
DECL|member|first_pvc
id|pvc_device
op_star
id|first_pvc
suffix:semicolon
DECL|member|pvc_count
id|u16
id|pvc_count
suffix:semicolon
DECL|member|mode
r_int
id|mode
suffix:semicolon
DECL|member|timer
r_struct
id|timer_list
id|timer
suffix:semicolon
DECL|member|lmi
id|fr_lmi
id|lmi
suffix:semicolon
DECL|typedef|hdlc_device
)brace
id|hdlc_device
suffix:semicolon
r_int
id|register_hdlc_device
c_func
(paren
id|hdlc_device
op_star
id|hdlc
)paren
suffix:semicolon
r_void
id|unregister_hdlc_device
c_func
(paren
id|hdlc_device
op_star
id|hdlc
)paren
suffix:semicolon
r_void
id|hdlc_netif_rx
c_func
(paren
id|hdlc_device
op_star
id|hdlc
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
DECL|function|hdlc_to_dev
r_extern
id|__inline__
r_struct
id|net_device
op_star
id|hdlc_to_dev
c_func
(paren
id|hdlc_device
op_star
id|hdlc
)paren
(brace
r_return
op_amp
id|hdlc-&gt;netdev
suffix:semicolon
)brace
DECL|function|dev_to_hdlc
r_extern
id|__inline__
id|hdlc_device
op_star
id|dev_to_hdlc
c_func
(paren
r_struct
id|net_device
op_star
id|dev
)paren
(brace
r_return
(paren
id|hdlc_device
op_star
)paren
id|dev
suffix:semicolon
)brace
DECL|function|pvc_to_dev
r_extern
id|__inline__
r_struct
id|net_device
op_star
id|pvc_to_dev
c_func
(paren
id|pvc_device
op_star
id|pvc
)paren
(brace
r_return
op_amp
id|pvc-&gt;netdev
suffix:semicolon
)brace
DECL|function|dev_to_pvc
r_extern
id|__inline__
id|pvc_device
op_star
id|dev_to_pvc
c_func
(paren
r_struct
id|net_device
op_star
id|dev
)paren
(brace
r_return
(paren
id|pvc_device
op_star
)paren
id|dev
suffix:semicolon
)brace
DECL|function|hdlc_to_name
r_extern
id|__inline__
r_const
r_char
op_star
id|hdlc_to_name
c_func
(paren
id|hdlc_device
op_star
id|hdlc
)paren
(brace
r_return
id|hdlc_to_dev
c_func
(paren
id|hdlc
)paren
op_member_access_from_pointer
id|name
suffix:semicolon
)brace
DECL|function|pvc_to_name
r_extern
id|__inline__
r_const
r_char
op_star
id|pvc_to_name
c_func
(paren
id|pvc_device
op_star
id|pvc
)paren
(brace
r_return
id|pvc_to_dev
c_func
(paren
id|pvc
)paren
op_member_access_from_pointer
id|name
suffix:semicolon
)brace
DECL|function|status_to_dlci
r_extern
id|__inline__
id|u16
id|status_to_dlci
c_func
(paren
id|hdlc_device
op_star
id|hdlc
comma
id|u8
op_star
id|status
comma
id|u8
op_star
id|state
)paren
(brace
op_star
id|state
op_and_assign
op_complement
(paren
id|PVC_STATE_ACTIVE
op_or
id|PVC_STATE_NEW
)paren
suffix:semicolon
r_if
c_cond
(paren
id|status
(braket
l_int|2
)braket
op_amp
l_int|0x08
)paren
op_star
id|state
op_or_assign
id|PVC_STATE_NEW
suffix:semicolon
r_else
r_if
c_cond
(paren
id|status
(braket
l_int|2
)braket
op_amp
l_int|0x02
)paren
op_star
id|state
op_or_assign
id|PVC_STATE_ACTIVE
suffix:semicolon
r_return
(paren
(paren
id|status
(braket
l_int|0
)braket
op_amp
l_int|0x3F
)paren
op_lshift
l_int|4
)paren
op_or
(paren
(paren
id|status
(braket
l_int|1
)braket
op_amp
l_int|0x78
)paren
op_rshift
l_int|3
)paren
suffix:semicolon
)brace
DECL|function|dlci_to_status
r_extern
id|__inline__
r_void
id|dlci_to_status
c_func
(paren
id|hdlc_device
op_star
id|hdlc
comma
id|u16
id|dlci
comma
id|u8
op_star
id|status
comma
id|u8
id|state
)paren
(brace
id|status
(braket
l_int|0
)braket
op_assign
(paren
id|dlci
op_rshift
l_int|4
)paren
op_amp
l_int|0x3F
suffix:semicolon
id|status
(braket
l_int|1
)braket
op_assign
(paren
(paren
id|dlci
op_lshift
l_int|3
)paren
op_amp
l_int|0x78
)paren
op_or
l_int|0x80
suffix:semicolon
id|status
(braket
l_int|2
)braket
op_assign
l_int|0x80
suffix:semicolon
r_if
c_cond
(paren
id|state
op_amp
id|PVC_STATE_NEW
)paren
id|status
(braket
l_int|2
)braket
op_or_assign
l_int|0x08
suffix:semicolon
r_else
r_if
c_cond
(paren
id|state
op_amp
id|PVC_STATE_ACTIVE
)paren
id|status
(braket
l_int|2
)braket
op_or_assign
l_int|0x02
suffix:semicolon
)brace
DECL|function|netdev_dlci
r_extern
id|__inline__
id|u16
id|netdev_dlci
c_func
(paren
r_struct
id|net_device
op_star
id|dev
)paren
(brace
r_return
id|ntohs
c_func
(paren
op_star
(paren
id|u16
op_star
)paren
id|dev-&gt;dev_addr
)paren
suffix:semicolon
)brace
DECL|function|q922_to_dlci
r_extern
id|__inline__
id|u16
id|q922_to_dlci
c_func
(paren
id|u8
op_star
id|hdr
)paren
(brace
r_return
(paren
(paren
id|hdr
(braket
l_int|0
)braket
op_amp
l_int|0xFC
)paren
op_lshift
l_int|2
)paren
op_or
(paren
(paren
id|hdr
(braket
l_int|1
)braket
op_amp
l_int|0xF0
)paren
op_rshift
l_int|4
)paren
suffix:semicolon
)brace
DECL|function|dlci_to_q922
r_extern
id|__inline__
r_void
id|dlci_to_q922
c_func
(paren
id|u8
op_star
id|hdr
comma
id|u16
id|dlci
)paren
(brace
id|hdr
(braket
l_int|0
)braket
op_assign
(paren
id|dlci
op_rshift
l_int|2
)paren
op_amp
l_int|0xFC
suffix:semicolon
id|hdr
(braket
l_int|1
)braket
op_assign
(paren
(paren
id|dlci
op_lshift
l_int|4
)paren
op_amp
l_int|0xF0
)paren
op_or
l_int|0x01
suffix:semicolon
)brace
DECL|function|mode_is
r_extern
id|__inline__
r_int
id|mode_is
c_func
(paren
id|hdlc_device
op_star
id|hdlc
comma
r_int
id|mask
)paren
(brace
r_return
(paren
id|hdlc-&gt;mode
op_amp
id|mask
)paren
op_eq
id|mask
suffix:semicolon
)brace
DECL|function|find_pvc
r_extern
id|__inline__
id|pvc_device
op_star
id|find_pvc
c_func
(paren
id|hdlc_device
op_star
id|hdlc
comma
id|u16
id|dlci
)paren
(brace
id|pvc_device
op_star
id|pvc
op_assign
id|hdlc-&gt;first_pvc
suffix:semicolon
r_while
c_loop
(paren
id|pvc
)paren
(brace
r_if
c_cond
(paren
id|netdev_dlci
c_func
(paren
op_amp
id|pvc-&gt;netdev
)paren
op_eq
id|dlci
)paren
r_return
id|pvc
suffix:semicolon
id|pvc
op_assign
id|pvc-&gt;next
suffix:semicolon
)brace
r_return
l_int|NULL
suffix:semicolon
)brace
DECL|function|debug_frame
r_extern
id|__inline__
r_void
id|debug_frame
c_func
(paren
r_const
r_struct
id|sk_buff
op_star
id|skb
)paren
(brace
r_int
id|i
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|skb-&gt;len
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|i
op_eq
l_int|100
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;...&bslash;n&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
id|printk
c_func
(paren
l_string|&quot; %02X&quot;
comma
id|skb-&gt;data
(braket
id|i
)braket
)paren
suffix:semicolon
)brace
id|printk
c_func
(paren
l_string|&quot;&bslash;n&quot;
)paren
suffix:semicolon
)brace
macro_line|#endif /* __KERNEL */
macro_line|#endif /* __HDLC_H */
eof
