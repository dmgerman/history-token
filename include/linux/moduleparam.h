macro_line|#ifndef _LINUX_MODULE_PARAMS_H
DECL|macro|_LINUX_MODULE_PARAMS_H
mdefine_line|#define _LINUX_MODULE_PARAMS_H
multiline_comment|/* (C) Copyright 2001, 2002 Rusty Russell IBM Corporation */
macro_line|#include &lt;linux/init.h&gt;
macro_line|#include &lt;linux/stringify.h&gt;
macro_line|#include &lt;linux/kernel.h&gt;
multiline_comment|/* You can override this manually, but generally this should match the&n;   module name. */
macro_line|#ifdef MODULE
DECL|macro|MODULE_PARAM_PREFIX
mdefine_line|#define MODULE_PARAM_PREFIX /* empty */
macro_line|#else
DECL|macro|MODULE_PARAM_PREFIX
mdefine_line|#define MODULE_PARAM_PREFIX __stringify(KBUILD_MODNAME) &quot;.&quot;
macro_line|#endif
r_struct
id|kernel_param
suffix:semicolon
multiline_comment|/* Returns 0, or -errno.  arg is in kp-&gt;arg. */
DECL|typedef|param_set_fn
r_typedef
r_int
(paren
op_star
id|param_set_fn
)paren
(paren
r_const
r_char
op_star
id|val
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
multiline_comment|/* Returns length written or -errno.  Buffer is 4k (ie. be short!) */
DECL|typedef|param_get_fn
r_typedef
r_int
(paren
op_star
id|param_get_fn
)paren
(paren
r_char
op_star
id|buffer
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
DECL|struct|kernel_param
r_struct
id|kernel_param
(brace
DECL|member|name
r_const
r_char
op_star
id|name
suffix:semicolon
DECL|member|perm
r_int
r_int
id|perm
suffix:semicolon
DECL|member|set
id|param_set_fn
id|set
suffix:semicolon
DECL|member|get
id|param_get_fn
id|get
suffix:semicolon
DECL|member|arg
r_void
op_star
id|arg
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Special one for strings we want to copy into */
DECL|struct|kparam_string
r_struct
id|kparam_string
(brace
DECL|member|maxlen
r_int
r_int
id|maxlen
suffix:semicolon
DECL|member|string
r_char
op_star
id|string
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Special one for arrays */
DECL|struct|kparam_array
r_struct
id|kparam_array
(brace
DECL|member|max
r_int
r_int
id|max
suffix:semicolon
DECL|member|num
r_int
r_int
op_star
id|num
suffix:semicolon
DECL|member|set
id|param_set_fn
id|set
suffix:semicolon
DECL|member|get
id|param_get_fn
id|get
suffix:semicolon
DECL|member|elemsize
r_int
r_int
id|elemsize
suffix:semicolon
DECL|member|elem
r_void
op_star
id|elem
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* This is the fundamental function for registering boot/module&n;   parameters.  perm sets the visibility in driverfs: 000 means it&squot;s&n;   not there, read bits mean it&squot;s readable, write bits mean it&squot;s&n;   writable. */
DECL|macro|__module_param_call
mdefine_line|#define __module_param_call(prefix, name, set, get, arg, perm)&t;&t;&bslash;&n;&t;static char __param_str_##name[] = prefix #name;&t;&t;&bslash;&n;&t;static struct kernel_param const __param_##name&t;&t;&t;&bslash;&n;&t;__attribute_used__&t;&t;&t;&t;&t;&t;&bslash;&n;    __attribute__ ((unused,__section__ (&quot;__param&quot;),aligned(sizeof(void *)))) &bslash;&n;&t;= { __param_str_##name, perm, set, get, arg }
DECL|macro|module_param_call
mdefine_line|#define module_param_call(name, set, get, arg, perm)&t;&t;&t;      &bslash;&n;&t;__module_param_call(MODULE_PARAM_PREFIX, name, set, get, arg, perm)
multiline_comment|/* Helper functions: type is byte, short, ushort, int, uint, long,&n;   ulong, charp, bool or invbool, or XXX if you define param_get_XXX,&n;   param_set_XXX and param_check_XXX. */
DECL|macro|module_param_named
mdefine_line|#define module_param_named(name, value, type, perm)&t;&t;&t;   &bslash;&n;&t;param_check_##type(name, &amp;(value));&t;&t;&t;&t;   &bslash;&n;&t;module_param_call(name, param_set_##type, param_get_##type, &amp;value, perm)
DECL|macro|module_param
mdefine_line|#define module_param(name, type, perm)&t;&t;&t;&t;&bslash;&n;&t;module_param_named(name, name, type, perm)
multiline_comment|/* Actually copy string: maxlen param is usually sizeof(string). */
DECL|macro|module_param_string
mdefine_line|#define module_param_string(name, string, len, perm)&t;&t;&t;&bslash;&n;&t;static struct kparam_string __param_string_##name&t;&t;&bslash;&n;&t;&t;= { len, string };&t;&t;&t;&t;&t;&bslash;&n;&t;module_param_call(name, param_set_copystring, param_get_string,&t;&bslash;&n;&t;&t;   &amp;__param_string_##name, perm)
multiline_comment|/* Called on module insert or kernel boot */
r_extern
r_int
id|parse_args
c_func
(paren
r_const
r_char
op_star
id|name
comma
r_char
op_star
id|args
comma
r_struct
id|kernel_param
op_star
id|params
comma
r_int
id|num
comma
r_int
(paren
op_star
id|unknown
)paren
(paren
r_char
op_star
id|param
comma
r_char
op_star
id|val
)paren
)paren
suffix:semicolon
multiline_comment|/* All the helper functions */
multiline_comment|/* The macros to do compile-time type checking stolen from Jakub&n;   Jelinek, who IIRC came up with this idea for the 2.4 module init code. */
DECL|macro|__param_check
mdefine_line|#define __param_check(name, p, type) &bslash;&n;&t;static inline type *__check_##name(void) { return(p); }
r_extern
r_int
id|param_set_short
c_func
(paren
r_const
r_char
op_star
id|val
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
r_extern
r_int
id|param_get_short
c_func
(paren
r_char
op_star
id|buffer
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
DECL|macro|param_check_short
mdefine_line|#define param_check_short(name, p) __param_check(name, p, short)
r_extern
r_int
id|param_set_ushort
c_func
(paren
r_const
r_char
op_star
id|val
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
r_extern
r_int
id|param_get_ushort
c_func
(paren
r_char
op_star
id|buffer
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
DECL|macro|param_check_ushort
mdefine_line|#define param_check_ushort(name, p) __param_check(name, p, unsigned short)
r_extern
r_int
id|param_set_int
c_func
(paren
r_const
r_char
op_star
id|val
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
r_extern
r_int
id|param_get_int
c_func
(paren
r_char
op_star
id|buffer
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
DECL|macro|param_check_int
mdefine_line|#define param_check_int(name, p) __param_check(name, p, int)
r_extern
r_int
id|param_set_uint
c_func
(paren
r_const
r_char
op_star
id|val
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
r_extern
r_int
id|param_get_uint
c_func
(paren
r_char
op_star
id|buffer
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
DECL|macro|param_check_uint
mdefine_line|#define param_check_uint(name, p) __param_check(name, p, unsigned int)
r_extern
r_int
id|param_set_long
c_func
(paren
r_const
r_char
op_star
id|val
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
r_extern
r_int
id|param_get_long
c_func
(paren
r_char
op_star
id|buffer
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
DECL|macro|param_check_long
mdefine_line|#define param_check_long(name, p) __param_check(name, p, long)
r_extern
r_int
id|param_set_ulong
c_func
(paren
r_const
r_char
op_star
id|val
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
r_extern
r_int
id|param_get_ulong
c_func
(paren
r_char
op_star
id|buffer
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
DECL|macro|param_check_ulong
mdefine_line|#define param_check_ulong(name, p) __param_check(name, p, unsigned long)
r_extern
r_int
id|param_set_charp
c_func
(paren
r_const
r_char
op_star
id|val
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
r_extern
r_int
id|param_get_charp
c_func
(paren
r_char
op_star
id|buffer
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
DECL|macro|param_check_charp
mdefine_line|#define param_check_charp(name, p) __param_check(name, p, char *)
r_extern
r_int
id|param_set_bool
c_func
(paren
r_const
r_char
op_star
id|val
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
r_extern
r_int
id|param_get_bool
c_func
(paren
r_char
op_star
id|buffer
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
DECL|macro|param_check_bool
mdefine_line|#define param_check_bool(name, p) __param_check(name, p, int)
r_extern
r_int
id|param_set_invbool
c_func
(paren
r_const
r_char
op_star
id|val
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
r_extern
r_int
id|param_get_invbool
c_func
(paren
r_char
op_star
id|buffer
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
DECL|macro|param_check_invbool
mdefine_line|#define param_check_invbool(name, p) __param_check(name, p, int)
multiline_comment|/* Comma-separated array: num is set to number they actually specified. */
DECL|macro|module_param_array_named
mdefine_line|#define module_param_array_named(name, array, type, num, perm)&t;&t;&bslash;&n;&t;static struct kparam_array __param_arr_##name&t;&t;&t;&bslash;&n;&t;= { ARRAY_SIZE(array), &amp;num, param_set_##type, param_get_##type,&bslash;&n;&t;    sizeof(array[0]), array };&t;&t;&t;&t;&t;&bslash;&n;&t;module_param_call(name, param_array_set, param_array_get, &t;&bslash;&n;&t;&t;&t;  &amp;__param_arr_##name, perm)
DECL|macro|module_param_array
mdefine_line|#define module_param_array(name, type, num, perm)&t;&t;&bslash;&n;&t;module_param_array_named(name, name, type, num, perm)
r_extern
r_int
id|param_array_set
c_func
(paren
r_const
r_char
op_star
id|val
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
r_extern
r_int
id|param_array_get
c_func
(paren
r_char
op_star
id|buffer
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
r_extern
r_int
id|param_set_copystring
c_func
(paren
r_const
r_char
op_star
id|val
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
r_extern
r_int
id|param_get_string
c_func
(paren
r_char
op_star
id|buffer
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
suffix:semicolon
r_int
id|param_array
c_func
(paren
r_const
r_char
op_star
id|name
comma
r_const
r_char
op_star
id|val
comma
r_int
r_int
id|min
comma
r_int
r_int
id|max
comma
r_void
op_star
id|elem
comma
r_int
id|elemsize
comma
r_int
(paren
op_star
id|set
)paren
(paren
r_const
r_char
op_star
comma
r_struct
id|kernel_param
op_star
id|kp
)paren
comma
r_int
op_star
id|num
)paren
suffix:semicolon
macro_line|#endif /* _LINUX_MODULE_PARAMS_H */
eof
