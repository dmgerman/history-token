multiline_comment|/* rwsem-spinlock.h: fallback C implementation&n; *&n; * Copyright (c) 2001   David Howells (dhowells@redhat.com).&n; */
macro_line|#ifndef _LINUX_RWSEM_SPINLOCK_H
DECL|macro|_LINUX_RWSEM_SPINLOCK_H
mdefine_line|#define _LINUX_RWSEM_SPINLOCK_H
macro_line|#ifndef _LINUX_RWSEM_H
macro_line|#error please dont include asm/rwsem-spinlock.h directly, use linux/rwsem.h instead
macro_line|#endif
macro_line|#include &lt;linux/spinlock.h&gt;
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/types.h&gt;
r_struct
id|rwsem_waiter
suffix:semicolon
multiline_comment|/*&n; * the semaphore definition&n; */
DECL|struct|rw_semaphore
r_struct
id|rw_semaphore
(brace
DECL|member|count
r_int
r_int
id|count
suffix:semicolon
DECL|macro|RWSEM_UNLOCKED_VALUE
mdefine_line|#define RWSEM_UNLOCKED_VALUE&t;&t;0x00000000
DECL|macro|RWSEM_ACTIVE_BIAS
mdefine_line|#define RWSEM_ACTIVE_BIAS&t;&t;0x00000001
DECL|macro|RWSEM_ACTIVE_MASK
mdefine_line|#define RWSEM_ACTIVE_MASK&t;&t;0x0000ffff
DECL|macro|RWSEM_WAITING_BIAS
mdefine_line|#define RWSEM_WAITING_BIAS&t;&t;(-0x00010000)
DECL|macro|RWSEM_ACTIVE_READ_BIAS
mdefine_line|#define RWSEM_ACTIVE_READ_BIAS&t;&t;RWSEM_ACTIVE_BIAS
DECL|macro|RWSEM_ACTIVE_WRITE_BIAS
mdefine_line|#define RWSEM_ACTIVE_WRITE_BIAS&t;&t;(RWSEM_WAITING_BIAS + RWSEM_ACTIVE_BIAS)
DECL|member|wait_lock
id|spinlock_t
id|wait_lock
suffix:semicolon
DECL|member|wait_front
r_struct
id|rwsem_waiter
op_star
id|wait_front
suffix:semicolon
DECL|member|wait_back
r_struct
id|rwsem_waiter
op_star
op_star
id|wait_back
suffix:semicolon
macro_line|#if RWSEM_DEBUG
DECL|member|debug
r_int
id|debug
suffix:semicolon
macro_line|#endif
macro_line|#if RWSEM_DEBUG_MAGIC
DECL|member|__magic
r_int
id|__magic
suffix:semicolon
DECL|member|readers
id|atomic_t
id|readers
suffix:semicolon
DECL|member|writers
id|atomic_t
id|writers
suffix:semicolon
macro_line|#endif
)brace
suffix:semicolon
multiline_comment|/*&n; * initialisation&n; */
macro_line|#if RWSEM_DEBUG
DECL|macro|__RWSEM_DEBUG_INIT
mdefine_line|#define __RWSEM_DEBUG_INIT      , 0
macro_line|#else
DECL|macro|__RWSEM_DEBUG_INIT
mdefine_line|#define __RWSEM_DEBUG_INIT&t;/* */
macro_line|#endif
macro_line|#if RWSEM_DEBUG_MAGIC
DECL|macro|__RWSEM_DEBUG_MINIT
mdefine_line|#define __RWSEM_DEBUG_MINIT(name)&t;, (int)&amp;(name).__magic, ATOMIC_INIT(0), ATOMIC_INIT(0)
macro_line|#else
DECL|macro|__RWSEM_DEBUG_MINIT
mdefine_line|#define __RWSEM_DEBUG_MINIT(name)&t;/* */
macro_line|#endif
DECL|macro|__RWSEM_INITIALIZER
mdefine_line|#define __RWSEM_INITIALIZER(name) &bslash;&n;{ RWSEM_UNLOCKED_VALUE, SPIN_LOCK_UNLOCKED, NULL, &amp;(name).wait_front &bslash;&n;&t;__RWSEM_DEBUG_INIT __RWSEM_DEBUG_MINIT(name) }
DECL|macro|DECLARE_RWSEM
mdefine_line|#define DECLARE_RWSEM(name) &bslash;&n;&t;struct rw_semaphore name = __RWSEM_INITIALIZER(name)
DECL|function|init_rwsem
r_static
r_inline
r_void
id|init_rwsem
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|sem-&gt;count
op_assign
id|RWSEM_UNLOCKED_VALUE
suffix:semicolon
id|spin_lock_init
c_func
(paren
op_amp
id|sem-&gt;wait_lock
)paren
suffix:semicolon
id|sem-&gt;wait_front
op_assign
l_int|NULL
suffix:semicolon
id|sem-&gt;wait_back
op_assign
op_amp
id|sem-&gt;wait_front
suffix:semicolon
macro_line|#if RWSEM_DEBUG
id|sem-&gt;debug
op_assign
l_int|0
suffix:semicolon
macro_line|#endif
macro_line|#if RWSEM_DEBUG_MAGIC
id|sem-&gt;__magic
op_assign
(paren
r_int
)paren
op_amp
id|sem-&gt;__magic
suffix:semicolon
id|atomic_set
c_func
(paren
op_amp
id|sem-&gt;readers
comma
l_int|0
)paren
suffix:semicolon
id|atomic_set
c_func
(paren
op_amp
id|sem-&gt;writers
comma
l_int|0
)paren
suffix:semicolon
macro_line|#endif
)brace
multiline_comment|/*&n; * lock for reading&n; */
DECL|function|__down_read
r_static
r_inline
r_void
id|__down_read
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|count
suffix:semicolon
id|spin_lock
c_func
(paren
op_amp
id|sem-&gt;wait_lock
)paren
suffix:semicolon
id|sem-&gt;count
op_add_assign
id|RWSEM_ACTIVE_READ_BIAS
suffix:semicolon
id|count
op_assign
id|sem-&gt;count
suffix:semicolon
id|spin_unlock
c_func
(paren
op_amp
id|sem-&gt;wait_lock
)paren
suffix:semicolon
r_if
c_cond
(paren
id|count
OL
l_int|0
)paren
id|rwsem_down_read_failed
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * lock for writing&n; */
DECL|function|__down_write
r_static
r_inline
r_void
id|__down_write
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|count
suffix:semicolon
id|spin_lock
c_func
(paren
op_amp
id|sem-&gt;wait_lock
)paren
suffix:semicolon
id|count
op_assign
id|sem-&gt;count
suffix:semicolon
id|sem-&gt;count
op_add_assign
id|RWSEM_ACTIVE_WRITE_BIAS
suffix:semicolon
id|spin_unlock
c_func
(paren
op_amp
id|sem-&gt;wait_lock
)paren
suffix:semicolon
r_if
c_cond
(paren
id|count
)paren
id|rwsem_down_write_failed
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * unlock after reading&n; */
DECL|function|__up_read
r_static
r_inline
r_void
id|__up_read
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|count
suffix:semicolon
id|spin_lock
c_func
(paren
op_amp
id|sem-&gt;wait_lock
)paren
suffix:semicolon
id|count
op_assign
id|sem-&gt;count
suffix:semicolon
id|sem-&gt;count
op_sub_assign
id|RWSEM_ACTIVE_READ_BIAS
suffix:semicolon
id|spin_unlock
c_func
(paren
op_amp
id|sem-&gt;wait_lock
)paren
suffix:semicolon
r_if
c_cond
(paren
id|count
OL
l_int|0
op_logical_and
op_logical_neg
(paren
(paren
id|count
op_minus
id|RWSEM_ACTIVE_READ_BIAS
)paren
op_amp
id|RWSEM_ACTIVE_MASK
)paren
)paren
id|rwsem_wake
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * unlock after writing&n; */
DECL|function|__up_write
r_static
r_inline
r_void
id|__up_write
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|count
suffix:semicolon
id|spin_lock
c_func
(paren
op_amp
id|sem-&gt;wait_lock
)paren
suffix:semicolon
id|sem-&gt;count
op_sub_assign
id|RWSEM_ACTIVE_WRITE_BIAS
suffix:semicolon
id|count
op_assign
id|sem-&gt;count
suffix:semicolon
id|spin_unlock
c_func
(paren
op_amp
id|sem-&gt;wait_lock
)paren
suffix:semicolon
r_if
c_cond
(paren
id|count
OL
l_int|0
)paren
id|rwsem_wake
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * implement exchange and add functionality&n; * - only called when spinlock is already held&n; */
DECL|function|rwsem_atomic_update
r_static
r_inline
r_int
id|rwsem_atomic_update
c_func
(paren
r_int
id|delta
comma
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|count
suffix:semicolon
id|sem-&gt;count
op_add_assign
id|delta
suffix:semicolon
id|count
op_assign
id|sem-&gt;count
suffix:semicolon
r_return
id|count
suffix:semicolon
)brace
multiline_comment|/*&n; * implement compare and exchange functionality on the rw-semaphore count LSW&n; * - only called by __rwsem_do_wake(), so spinlock is already held when called&n; */
DECL|function|rwsem_cmpxchgw
r_static
r_inline
id|__u16
id|rwsem_cmpxchgw
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
comma
id|__u16
id|old
comma
id|__u16
r_new
)paren
(brace
id|__u16
id|prev
suffix:semicolon
id|prev
op_assign
id|sem-&gt;count
op_amp
id|RWSEM_ACTIVE_MASK
suffix:semicolon
r_if
c_cond
(paren
id|prev
op_eq
id|old
)paren
id|sem-&gt;count
op_assign
(paren
id|sem-&gt;count
op_amp
op_complement
id|RWSEM_ACTIVE_MASK
)paren
op_or
r_new
suffix:semicolon
r_return
id|prev
suffix:semicolon
)brace
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _LINUX_RWSEM_SPINLOCK_H */
eof
