singleline_comment|// include/linux/usb_otg.h 
multiline_comment|/*&n; * These APIs may be used between USB controllers.  USB device drivers&n; * (for either host or peripheral roles) don&squot;t use these calls; they&n; * continue to use just usb_device and usb_gadget.&n; */
multiline_comment|/* OTG defines lots of enumeration states before device reset */
DECL|enum|usb_otg_state
r_enum
id|usb_otg_state
(brace
DECL|enumerator|OTG_STATE_UNDEFINED
id|OTG_STATE_UNDEFINED
op_assign
l_int|0
comma
multiline_comment|/* single-role peripheral, and dual-role default-b */
DECL|enumerator|OTG_STATE_B_IDLE
id|OTG_STATE_B_IDLE
comma
DECL|enumerator|OTG_STATE_B_SRP_INIT
id|OTG_STATE_B_SRP_INIT
comma
DECL|enumerator|OTG_STATE_B_PERIPHERAL
id|OTG_STATE_B_PERIPHERAL
comma
multiline_comment|/* extra dual-role default-b states */
DECL|enumerator|OTG_STATE_B_WAIT_ACON
id|OTG_STATE_B_WAIT_ACON
comma
DECL|enumerator|OTG_STATE_B_HOST
id|OTG_STATE_B_HOST
comma
multiline_comment|/* dual-role default-a */
DECL|enumerator|OTG_STATE_A_IDLE
id|OTG_STATE_A_IDLE
comma
DECL|enumerator|OTG_STATE_A_WAIT_VRISE
id|OTG_STATE_A_WAIT_VRISE
comma
DECL|enumerator|OTG_STATE_A_WAIT_BCON
id|OTG_STATE_A_WAIT_BCON
comma
DECL|enumerator|OTG_STATE_A_HOST
id|OTG_STATE_A_HOST
comma
DECL|enumerator|OTG_STATE_A_SUSPEND
id|OTG_STATE_A_SUSPEND
comma
DECL|enumerator|OTG_STATE_A_PERIPHERAL
id|OTG_STATE_A_PERIPHERAL
comma
DECL|enumerator|OTG_STATE_A_WAIT_VFALL
id|OTG_STATE_A_WAIT_VFALL
comma
DECL|enumerator|OTG_STATE_A_VBUS_ERR
id|OTG_STATE_A_VBUS_ERR
comma
)brace
suffix:semicolon
multiline_comment|/*&n; * the otg driver needs to interact with both device side and host side&n; * usb controllers.  it decides which controller is active at a given&n; * moment, using the transceiver, ID signal, HNP and sometimes static&n; * configuration information (including &quot;board isn&squot;t wired for otg&quot;).&n; */
DECL|struct|otg_transceiver
r_struct
id|otg_transceiver
(brace
DECL|member|dev
r_struct
id|device
op_star
id|dev
suffix:semicolon
DECL|member|label
r_const
r_char
op_star
id|label
suffix:semicolon
DECL|member|default_a
id|u8
id|default_a
suffix:semicolon
DECL|member|state
r_enum
id|usb_otg_state
id|state
suffix:semicolon
DECL|member|host
r_struct
id|usb_bus
op_star
id|host
suffix:semicolon
DECL|member|gadget
r_struct
id|usb_gadget
op_star
id|gadget
suffix:semicolon
multiline_comment|/* to pass extra port status to the root hub */
DECL|member|port_status
id|u16
id|port_status
suffix:semicolon
DECL|member|port_change
id|u16
id|port_change
suffix:semicolon
multiline_comment|/* bind/unbind the host controller */
DECL|member|set_host
r_int
(paren
op_star
id|set_host
)paren
(paren
r_struct
id|otg_transceiver
op_star
id|otg
comma
r_struct
id|usb_bus
op_star
id|host
)paren
suffix:semicolon
multiline_comment|/* bind/unbind the peripheral controller */
DECL|member|set_peripheral
r_int
(paren
op_star
id|set_peripheral
)paren
(paren
r_struct
id|otg_transceiver
op_star
id|otg
comma
r_struct
id|usb_gadget
op_star
id|gadget
)paren
suffix:semicolon
multiline_comment|/* effective for B devices, ignored for A-peripheral */
DECL|member|set_power
r_int
(paren
op_star
id|set_power
)paren
(paren
r_struct
id|otg_transceiver
op_star
id|otg
comma
r_int
id|mA
)paren
suffix:semicolon
multiline_comment|/* for B devices only:  start session with A-Host */
DECL|member|start_srp
r_int
(paren
op_star
id|start_srp
)paren
(paren
r_struct
id|otg_transceiver
op_star
id|otg
)paren
suffix:semicolon
multiline_comment|/* start or continue HNP role switch */
DECL|member|start_hnp
r_int
(paren
op_star
id|start_hnp
)paren
(paren
r_struct
id|otg_transceiver
op_star
id|otg
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* for board-specific init logic */
r_extern
r_int
id|otg_set_transceiver
c_func
(paren
r_struct
id|otg_transceiver
op_star
)paren
suffix:semicolon
multiline_comment|/* for usb host and peripheral controller drivers */
r_extern
r_struct
id|otg_transceiver
op_star
id|otg_get_transceiver
c_func
(paren
r_void
)paren
suffix:semicolon
r_static
r_inline
r_int
DECL|function|otg_start_hnp
id|otg_start_hnp
c_func
(paren
r_struct
id|otg_transceiver
op_star
id|otg
)paren
(brace
r_return
id|otg
op_member_access_from_pointer
id|start_hnp
c_func
(paren
id|otg
)paren
suffix:semicolon
)brace
multiline_comment|/* for HCDs */
r_static
r_inline
r_int
DECL|function|otg_set_host
id|otg_set_host
c_func
(paren
r_struct
id|otg_transceiver
op_star
id|otg
comma
r_struct
id|usb_bus
op_star
id|host
)paren
(brace
r_return
id|otg
op_member_access_from_pointer
id|set_host
c_func
(paren
id|otg
comma
id|host
)paren
suffix:semicolon
)brace
multiline_comment|/* for usb peripheral controller drivers */
r_static
r_inline
r_int
DECL|function|otg_set_peripheral
id|otg_set_peripheral
c_func
(paren
r_struct
id|otg_transceiver
op_star
id|otg
comma
r_struct
id|usb_gadget
op_star
id|periph
)paren
(brace
r_return
id|otg
op_member_access_from_pointer
id|set_peripheral
c_func
(paren
id|otg
comma
id|periph
)paren
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|otg_set_power
id|otg_set_power
c_func
(paren
r_struct
id|otg_transceiver
op_star
id|otg
comma
r_int
id|mA
)paren
(brace
r_return
id|otg
op_member_access_from_pointer
id|set_power
c_func
(paren
id|otg
comma
id|mA
)paren
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|otg_start_srp
id|otg_start_srp
c_func
(paren
r_struct
id|otg_transceiver
op_star
id|otg
)paren
(brace
r_return
id|otg
op_member_access_from_pointer
id|start_srp
c_func
(paren
id|otg
)paren
suffix:semicolon
)brace
multiline_comment|/* for OTG controller drivers (and maybe other stuff) */
r_extern
r_int
id|usb_bus_start_enum
c_func
(paren
r_struct
id|usb_bus
op_star
id|bus
comma
r_int
id|port_num
)paren
suffix:semicolon
eof
