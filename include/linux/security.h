multiline_comment|/*&n; * Linux Security plug&n; *&n; * Copyright (C) 2001 WireX Communications, Inc &lt;chris@wirex.com&gt;&n; * Copyright (C) 2001 Greg Kroah-Hartman &lt;greg@kroah.com&gt;&n; * Copyright (C) 2001 Networks Associates Technology, Inc &lt;ssmalley@nai.com&gt;&n; * Copyright (C) 2001 James Morris &lt;jmorris@intercode.com.au&gt;&n; * Copyright (C) 2001 Silicon Graphics, Inc. (Trust Technology Group)&n; *&n; *&t;This program is free software; you can redistribute it and/or modify&n; *&t;it under the terms of the GNU General Public License as published by&n; *&t;the Free Software Foundation; either version 2 of the License, or&n; *&t;(at your option) any later version.&n; *&n; *&t;Due to this file being licensed under the GPL there is controversy over&n; *&t;whether this permits you to write a module that #includes this file&n; *&t;without placing your module under the GPL.  Please consult a lawyer for&n; *&t;advice before doing this.&n; *&n; */
macro_line|#ifndef __LINUX_SECURITY_H
DECL|macro|__LINUX_SECURITY_H
mdefine_line|#define __LINUX_SECURITY_H
macro_line|#include &lt;linux/fs.h&gt;
macro_line|#include &lt;linux/binfmts.h&gt;
macro_line|#include &lt;linux/signal.h&gt;
macro_line|#include &lt;linux/resource.h&gt;
macro_line|#include &lt;linux/sem.h&gt;
macro_line|#include &lt;linux/shm.h&gt;
macro_line|#include &lt;linux/msg.h&gt;
macro_line|#include &lt;linux/sched.h&gt;
r_struct
id|ctl_table
suffix:semicolon
multiline_comment|/*&n; * These functions are in security/capability.c and are used&n; * as the default capabilities functions&n; */
r_extern
r_int
id|cap_capable
(paren
r_struct
id|task_struct
op_star
id|tsk
comma
r_int
id|cap
)paren
suffix:semicolon
r_extern
r_int
id|cap_settime
(paren
r_struct
id|timespec
op_star
id|ts
comma
r_struct
id|timezone
op_star
id|tz
)paren
suffix:semicolon
r_extern
r_int
id|cap_ptrace
(paren
r_struct
id|task_struct
op_star
id|parent
comma
r_struct
id|task_struct
op_star
id|child
)paren
suffix:semicolon
r_extern
r_int
id|cap_capget
(paren
r_struct
id|task_struct
op_star
id|target
comma
id|kernel_cap_t
op_star
id|effective
comma
id|kernel_cap_t
op_star
id|inheritable
comma
id|kernel_cap_t
op_star
id|permitted
)paren
suffix:semicolon
r_extern
r_int
id|cap_capset_check
(paren
r_struct
id|task_struct
op_star
id|target
comma
id|kernel_cap_t
op_star
id|effective
comma
id|kernel_cap_t
op_star
id|inheritable
comma
id|kernel_cap_t
op_star
id|permitted
)paren
suffix:semicolon
r_extern
r_void
id|cap_capset_set
(paren
r_struct
id|task_struct
op_star
id|target
comma
id|kernel_cap_t
op_star
id|effective
comma
id|kernel_cap_t
op_star
id|inheritable
comma
id|kernel_cap_t
op_star
id|permitted
)paren
suffix:semicolon
r_extern
r_int
id|cap_bprm_set_security
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
suffix:semicolon
r_extern
r_void
id|cap_bprm_apply_creds
(paren
r_struct
id|linux_binprm
op_star
id|bprm
comma
r_int
id|unsafe
)paren
suffix:semicolon
r_extern
r_int
id|cap_bprm_secureexec
c_func
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
suffix:semicolon
r_extern
r_int
id|cap_inode_setxattr
c_func
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_char
op_star
id|name
comma
r_void
op_star
id|value
comma
r_int
id|size
comma
r_int
id|flags
)paren
suffix:semicolon
r_extern
r_int
id|cap_inode_removexattr
c_func
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_char
op_star
id|name
)paren
suffix:semicolon
r_extern
r_int
id|cap_task_post_setuid
(paren
id|uid_t
id|old_ruid
comma
id|uid_t
id|old_euid
comma
id|uid_t
id|old_suid
comma
r_int
id|flags
)paren
suffix:semicolon
r_extern
r_void
id|cap_task_reparent_to_init
(paren
r_struct
id|task_struct
op_star
id|p
)paren
suffix:semicolon
r_extern
r_int
id|cap_syslog
(paren
r_int
id|type
)paren
suffix:semicolon
r_extern
r_int
id|cap_vm_enough_memory
(paren
r_int
id|pages
)paren
suffix:semicolon
r_struct
id|msghdr
suffix:semicolon
r_struct
id|sk_buff
suffix:semicolon
r_struct
id|sock
suffix:semicolon
r_struct
id|sockaddr
suffix:semicolon
r_struct
id|socket
suffix:semicolon
r_extern
r_int
id|cap_netlink_send
c_func
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_extern
r_int
id|cap_netlink_recv
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
multiline_comment|/*&n; * Values used in the task_security_ops calls&n; */
multiline_comment|/* setuid or setgid, id0 == uid or gid */
DECL|macro|LSM_SETID_ID
mdefine_line|#define LSM_SETID_ID&t;1
multiline_comment|/* setreuid or setregid, id0 == real, id1 == eff */
DECL|macro|LSM_SETID_RE
mdefine_line|#define LSM_SETID_RE&t;2
multiline_comment|/* setresuid or setresgid, id0 == real, id1 == eff, uid2 == saved */
DECL|macro|LSM_SETID_RES
mdefine_line|#define LSM_SETID_RES&t;4
multiline_comment|/* setfsuid or setfsgid, id0 == fsuid or fsgid */
DECL|macro|LSM_SETID_FS
mdefine_line|#define LSM_SETID_FS&t;8
multiline_comment|/* forward declares to avoid warnings */
r_struct
id|nfsctl_arg
suffix:semicolon
r_struct
id|sched_param
suffix:semicolon
r_struct
id|swap_info_struct
suffix:semicolon
multiline_comment|/* bprm_apply_creds unsafe reasons */
DECL|macro|LSM_UNSAFE_SHARE
mdefine_line|#define LSM_UNSAFE_SHARE&t;1
DECL|macro|LSM_UNSAFE_PTRACE
mdefine_line|#define LSM_UNSAFE_PTRACE&t;2
DECL|macro|LSM_UNSAFE_PTRACE_CAP
mdefine_line|#define LSM_UNSAFE_PTRACE_CAP&t;4
macro_line|#ifdef CONFIG_SECURITY
multiline_comment|/**&n; * struct security_operations - main security structure&n; *&n; * Security hooks for program execution operations.&n; *&n; * @bprm_alloc_security:&n; *&t;Allocate and attach a security structure to the @bprm-&gt;security field.&n; *&t;The security field is initialized to NULL when the bprm structure is&n; *&t;allocated.&n; *&t;@bprm contains the linux_binprm structure to be modified.&n; *&t;Return 0 if operation was successful.&n; * @bprm_free_security:&n; *&t;@bprm contains the linux_binprm structure to be modified.&n; *&t;Deallocate and clear the @bprm-&gt;security field.&n; * @bprm_apply_creds:&n; *&t;Compute and set the security attributes of a process being transformed&n; *&t;by an execve operation based on the old attributes (current-&gt;security)&n; *&t;and the information saved in @bprm-&gt;security by the set_security hook.&n; *&t;Since this hook function (and its caller) are void, this hook can not&n; *&t;return an error.  However, it can leave the security attributes of the&n; *&t;process unchanged if an access failure occurs at this point. It can&n; *&t;also perform other state changes on the process (e.g.  closing open&n; *&t;file descriptors to which access is no longer granted if the attributes&n; *&t;were changed). &n; *&t;bprm_apply_creds is called under task_lock.  @unsafe indicates various&n; *&t;reasons why it may be unsafe to change security state.&n; *&t;@bprm contains the linux_binprm structure.&n; * @bprm_set_security:&n; *&t;Save security information in the bprm-&gt;security field, typically based&n; *&t;on information about the bprm-&gt;file, for later use by the apply_creds&n; *&t;hook.  This hook may also optionally check permissions (e.g. for&n; *&t;transitions between security domains).&n; *&t;This hook may be called multiple times during a single execve, e.g. for&n; *&t;interpreters.  The hook can tell whether it has already been called by&n; *&t;checking to see if @bprm-&gt;security is non-NULL.  If so, then the hook&n; *&t;may decide either to retain the security information saved earlier or&n; *&t;to replace it.&n; *&t;@bprm contains the linux_binprm structure.&n; *&t;Return 0 if the hook is successful and permission is granted.&n; * @bprm_check_security:&n; * &t;This hook mediates the point when a search for a binary handler&t;will&n; * &t;begin.  It allows a check the @bprm-&gt;security value which is set in&n; * &t;the preceding set_security call.  The primary difference from&n; * &t;set_security is that the argv list and envp list are reliably&n; * &t;available in @bprm.  This hook may be called multiple times&n; * &t;during a single execve; and in each pass set_security is called&n; * &t;first.&n; * &t;@bprm contains the linux_binprm structure.&n; *&t;Return 0 if the hook is successful and permission is granted.&n; * @bprm_secureexec:&n; *      Return a boolean value (0 or 1) indicating whether a &quot;secure exec&quot; &n; *      is required.  The flag is passed in the auxiliary table&n; *      on the initial stack to the ELF interpreter to indicate whether libc &n; *      should enable secure mode.&n; *      @bprm contains the linux_binprm structure.&n; *&n; * Security hooks for filesystem operations.&n; *&n; * @sb_alloc_security:&n; *&t;Allocate and attach a security structure to the sb-&gt;s_security field.&n; *&t;The s_security field is initialized to NULL when the structure is&n; *&t;allocated.&n; *&t;@sb contains the super_block structure to be modified.&n; *&t;Return 0 if operation was successful.&n; * @sb_free_security:&n; *&t;Deallocate and clear the sb-&gt;s_security field.&n; *&t;@sb contains the super_block structure to be modified.&n; * @sb_statfs:&n; *&t;Check permission before obtaining filesystem statistics for the @sb&n; *&t;filesystem.&n; *&t;@sb contains the super_block structure for the filesystem.&n; *&t;Return 0 if permission is granted.  &n; * @sb_mount:&n; *&t;Check permission before an object specified by @dev_name is mounted on&n; *&t;the mount point named by @nd.  For an ordinary mount, @dev_name&n; *&t;identifies a device if the file system type requires a device.  For a&n; *&t;remount (@flags &amp; MS_REMOUNT), @dev_name is irrelevant.  For a&n; *&t;loopback/bind mount (@flags &amp; MS_BIND), @dev_name identifies the&n; *&t;pathname of the object being mounted.&n; *&t;@dev_name contains the name for object being mounted.&n; *&t;@nd contains the nameidata structure for mount point object.&n; *&t;@type contains the filesystem type.&n; *&t;@flags contains the mount flags.&n; *&t;@data contains the filesystem-specific data.&n; *&t;Return 0 if permission is granted.&n; * @sb_copy_data:&n; *&t;Allow mount option data to be copied prior to parsing by the filesystem,&n; *&t;so that the security module can extract security-specific mount&n; *&t;options cleanly (a filesystem may modify the data e.g. with strsep()).&n; *&t;This also allows the original mount data to be stripped of security-&n; *&t;specific options to avoid having to make filesystems aware of them.&n; *&t;@type the type of filesystem being mounted.&n; *&t;@orig the original mount data copied from userspace.&n; *&t;@copy copied data which will be passed to the security module.&n; *&t;Returns 0 if the copy was successful.&n; * @sb_check_sb:&n; *&t;Check permission before the device with superblock @mnt-&gt;sb is mounted&n; *&t;on the mount point named by @nd.&n; *&t;@mnt contains the vfsmount for device being mounted.&n; *&t;@nd contains the nameidata object for the mount point.&n; *&t;Return 0 if permission is granted.&n; * @sb_umount:&n; *&t;Check permission before the @mnt file system is unmounted.&n; *&t;@mnt contains the mounted file system.&n; *&t;@flags contains the unmount flags, e.g. MNT_FORCE.&n; *&t;Return 0 if permission is granted.&n; * @sb_umount_close:&n; *&t;Close any files in the @mnt mounted filesystem that are held open by&n; *&t;the security module.  This hook is called during an umount operation&n; *&t;prior to checking whether the filesystem is still busy.&n; *&t;@mnt contains the mounted filesystem.&n; * @sb_umount_busy:&n; *&t;Handle a failed umount of the @mnt mounted filesystem, e.g.  re-opening&n; *&t;any files that were closed by umount_close.  This hook is called during&n; *&t;an umount operation if the umount fails after a call to the&n; *&t;umount_close hook.&n; *&t;@mnt contains the mounted filesystem.&n; * @sb_post_remount:&n; *&t;Update the security module&squot;s state when a filesystem is remounted.&n; *&t;This hook is only called if the remount was successful.&n; *&t;@mnt contains the mounted file system.&n; *&t;@flags contains the new filesystem flags.&n; *&t;@data contains the filesystem-specific data.&n; * @sb_post_mountroot:&n; *&t;Update the security module&squot;s state when the root filesystem is mounted.&n; *&t;This hook is only called if the mount was successful.&n; * @sb_post_addmount:&n; *&t;Update the security module&squot;s state when a filesystem is mounted.&n; *&t;This hook is called any time a mount is successfully grafetd to&n; *&t;the tree.&n; *&t;@mnt contains the mounted filesystem.&n; *&t;@mountpoint_nd contains the nameidata structure for the mount point.&n; * @sb_pivotroot:&n; *&t;Check permission before pivoting the root filesystem.&n; *&t;@old_nd contains the nameidata structure for the new location of the current root (put_old).&n; *      @new_nd contains the nameidata structure for the new root (new_root).&n; *&t;Return 0 if permission is granted.&n; * @sb_post_pivotroot:&n; *&t;Update module state after a successful pivot.&n; *&t;@old_nd contains the nameidata structure for the old root.&n; *      @new_nd contains the nameidata structure for the new root.&n; *&n; * Security hooks for inode operations.&n; *&n; * @inode_alloc_security:&n; *&t;Allocate and attach a security structure to @inode-&gt;i_security.  The&n; *&t;i_security field is initialized to NULL when the inode structure is&n; *&t;allocated.&n; *&t;@inode contains the inode structure.&n; *&t;Return 0 if operation was successful.&n; * @inode_free_security:&n; *&t;@inode contains the inode structure.&n; *&t;Deallocate the inode security structure and set @inode-&gt;i_security to&n; *&t;NULL. &n; * @inode_create:&n; *&t;Check permission to create a regular file.&n; *&t;@dir contains inode structure of the parent of the new file.&n; *&t;@dentry contains the dentry structure for the file to be created.&n; *&t;@mode contains the file mode of the file to be created.&n; *&t;Return 0 if permission is granted.&n; * @inode_post_create:&n; *&t;Set the security attributes on a newly created regular file.  This hook&n; *&t;is called after a file has been successfully created.&n; *&t;@dir contains the inode structure of the parent directory of the new file.&n; *&t;@dentry contains the the dentry structure for the newly created file.&n; *&t;@mode contains the file mode.&n; * @inode_link:&n; *&t;Check permission before creating a new hard link to a file.&n; *&t;@old_dentry contains the dentry structure for an existing link to the file.&n; *&t;@dir contains the inode structure of the parent directory of the new link.&n; *&t;@new_dentry contains the dentry structure for the new link.&n; *&t;Return 0 if permission is granted.&n; * @inode_post_link:&n; *&t;Set security attributes for a new hard link to a file.&n; *&t;@old_dentry contains the dentry structure for the existing link.&n; *&t;@dir contains the inode structure of the parent directory of the new file.&n; *&t;@new_dentry contains the dentry structure for the new file link.&n; * @inode_unlink:&n; *&t;Check the permission to remove a hard link to a file. &n; *&t;@dir contains the inode structure of parent directory of the file.&n; *&t;@dentry contains the dentry structure for file to be unlinked.&n; *&t;Return 0 if permission is granted.&n; * @inode_symlink:&n; *&t;Check the permission to create a symbolic link to a file.&n; *&t;@dir contains the inode structure of parent directory of the symbolic link.&n; *&t;@dentry contains the dentry structure of the symbolic link.&n; *&t;@old_name contains the pathname of file.&n; *&t;Return 0 if permission is granted.&n; * @inode_post_symlink:&n; *&t;@dir contains the inode structure of the parent directory of the new link.&n; *&t;@dentry contains the dentry structure of new symbolic link.&n; *&t;@old_name contains the pathname of file.&n; *&t;Set security attributes for a newly created symbolic link.  Note that&n; *&t;@dentry-&gt;d_inode may be NULL, since the filesystem might not&n; *&t;instantiate the dentry (e.g. NFS).&n; * @inode_mkdir:&n; *&t;Check permissions to create a new directory in the existing directory&n; *&t;associated with inode strcture @dir. &n; *&t;@dir containst the inode structure of parent of the directory to be created.&n; *&t;@dentry contains the dentry structure of new directory.&n; *&t;@mode contains the mode of new directory.&n; *&t;Return 0 if permission is granted.&n; * @inode_post_mkdir:&n; *&t;Set security attributes on a newly created directory.&n; *&t;@dir contains the inode structure of parent of the directory to be created.&n; *&t;@dentry contains the dentry structure of new directory.&n; *&t;@mode contains the mode of new directory.&n; * @inode_rmdir:&n; *&t;Check the permission to remove a directory.&n; *&t;@dir contains the inode structure of parent of the directory to be removed.&n; *&t;@dentry contains the dentry structure of directory to be removed.&n; *&t;Return 0 if permission is granted.&n; * @inode_mknod:&n; *&t;Check permissions when creating a special file (or a socket or a fifo&n; *&t;file created via the mknod system call).  Note that if mknod operation&n; *&t;is being done for a regular file, then the create hook will be called&n; *&t;and not this hook.&n; *&t;@dir contains the inode structure of parent of the new file.&n; *&t;@dentry contains the dentry structure of the new file.&n; *&t;@mode contains the mode of the new file.&n; *&t;@dev contains the the device number.&n; *&t;Return 0 if permission is granted.&n; * @inode_post_mknod:&n; *&t;Set security attributes on a newly created special file (or socket or&n; *&t;fifo file created via the mknod system call).&n; *&t;@dir contains the inode structure of parent of the new node.&n; *&t;@dentry contains the dentry structure of the new node.&n; *&t;@mode contains the mode of the new node.&n; *&t;@dev contains the the device number.&n; * @inode_rename:&n; *&t;Check for permission to rename a file or directory.&n; *&t;@old_dir contains the inode structure for parent of the old link.&n; *&t;@old_dentry contains the dentry structure of the old link.&n; *&t;@new_dir contains the inode structure for parent of the new link.&n; *&t;@new_dentry contains the dentry structure of the new link.&n; *&t;Return 0 if permission is granted.&n; * @inode_post_rename:&n; *&t;Set security attributes on a renamed file or directory.&n; *&t;@old_dir contains the inode structure for parent of the old link.&n; *&t;@old_dentry contains the dentry structure of the old link.&n; *&t;@new_dir contains the inode structure for parent of the new link.&n; *&t;@new_dentry contains the dentry structure of the new link.&n; * @inode_readlink:&n; *&t;Check the permission to read the symbolic link.&n; *&t;@dentry contains the dentry structure for the file link.&n; *&t;Return 0 if permission is granted.&n; * @inode_follow_link:&n; *&t;Check permission to follow a symbolic link when looking up a pathname.&n; *&t;@dentry contains the dentry structure for the link.&n; *&t;@nd contains the nameidata structure for the parent directory.&n; *&t;Return 0 if permission is granted.&n; * @inode_permission:&n; *&t;Check permission before accessing an inode.  This hook is called by the&n; *&t;existing Linux permission function, so a security module can use it to&n; *&t;provide additional checking for existing Linux permission checks.&n; *&t;Notice that this hook is called when a file is opened (as well as many&n; *&t;other operations), whereas the file_security_ops permission hook is&n; *&t;called when the actual read/write operations are performed.&n; *&t;@inode contains the inode structure to check.&n; *&t;@mask contains the permission mask.&n; *     @nd contains the nameidata (may be NULL).&n; *&t;Return 0 if permission is granted.&n; * @inode_setattr:&n; *&t;Check permission before setting file attributes.  Note that the kernel&n; *&t;call to notify_change is performed from several locations, whenever&n; *&t;file attributes change (such as when a file is truncated, chown/chmod&n; *&t;operations, transferring disk quotas, etc).&n; *&t;@dentry contains the dentry structure for the file.&n; *&t;@attr is the iattr structure containing the new file attributes.&n; *&t;Return 0 if permission is granted.&n; * @inode_getattr:&n; *&t;Check permission before obtaining file attributes.&n; *&t;@mnt is the vfsmount where the dentry was looked up&n; *&t;@dentry contains the dentry structure for the file.&n; *&t;Return 0 if permission is granted.&n; * @inode_delete:&n; *&t;@inode contains the inode structure for deleted inode.&n; *&t;This hook is called when a deleted inode is released (i.e. an inode&n; *&t;with no hard links has its use count drop to zero).  A security module&n; *&t;can use this hook to release any persistent label associated with the&n; *&t;inode.&n; * @inode_setxattr:&n; * &t;Check permission before setting the extended attributes&n; * &t;@value identified by @name for @dentry.&n; * &t;Return 0 if permission is granted.&n; * @inode_post_setxattr:&n; * &t;Update inode security field after successful setxattr operation.&n; * &t;@value identified by @name for @dentry.&n; * @inode_getxattr:&n; * &t;Check permission before obtaining the extended attributes&n; * &t;identified by @name for @dentry.&n; * &t;Return 0 if permission is granted.&n; * @inode_listxattr:&n; * &t;Check permission before obtaining the list of extended attribute &n; * &t;names for @dentry.&n; * &t;Return 0 if permission is granted.&n; * @inode_removexattr:&n; * &t;Check permission before removing the extended attribute&n; * &t;identified by @name for @dentry.&n; * &t;Return 0 if permission is granted.&n; * @inode_getsecurity:&n; *&t;Copy the extended attribute representation of the security label &n; *&t;associated with @name for @inode into @buffer.  @buffer may be&n; *&t;NULL to request the size of the buffer required.  @size indicates&n; *&t;the size of @buffer in bytes.  Note that @name is the remainder&n; *&t;of the attribute name after the security. prefix has been removed.&n; *&t;Return number of bytes used/required on success.&n; * @inode_setsecurity:&n; *&t;Set the security label associated with @name for @inode from the&n; *&t;extended attribute value @value.  @size indicates the size of the&n; *&t;@value in bytes.  @flags may be XATTR_CREATE, XATTR_REPLACE, or 0.&n; *&t;Note that @name is the remainder of the attribute name after the &n; *&t;security. prefix has been removed.&n; *&t;Return 0 on success.&n; * @inode_listsecurity:&n; *&t;Copy the extended attribute names for the security labels&n; *&t;associated with @inode into @buffer.  The maximum size of @buffer&n; *&t;is specified by @buffer_size.  @buffer may be NULL to request&n; *&t;the size of the buffer required.&n; *&t;Returns number of bytes used/required on success.&n; *&n; * Security hooks for file operations&n; *&n; * @file_permission:&n; *&t;Check file permissions before accessing an open file.  This hook is&n; *&t;called by various operations that read or write files.  A security&n; *&t;module can use this hook to perform additional checking on these&n; *&t;operations, e.g.  to revalidate permissions on use to support privilege&n; *&t;bracketing or policy changes.  Notice that this hook is used when the&n; *&t;actual read/write operations are performed, whereas the&n; *&t;inode_security_ops hook is called when a file is opened (as well as&n; *&t;many other operations).&n; *&t;Caveat:  Although this hook can be used to revalidate permissions for&n; *&t;various system call operations that read or write files, it does not&n; *&t;address the revalidation of permissions for memory-mapped files.&n; *&t;Security modules must handle this separately if they need such&n; *&t;revalidation.&n; *&t;@file contains the file structure being accessed.&n; *&t;@mask contains the requested permissions.&n; *&t;Return 0 if permission is granted.&n; * @file_alloc_security:&n; *&t;Allocate and attach a security structure to the file-&gt;f_security field.&n; *&t;The security field is initialized to NULL when the structure is first&n; *&t;created.&n; *&t;@file contains the file structure to secure.&n; *&t;Return 0 if the hook is successful and permission is granted.&n; * @file_free_security:&n; *&t;Deallocate and free any security structures stored in file-&gt;f_security.&n; *&t;@file contains the file structure being modified.&n; * @file_ioctl:&n; *&t;@file contains the file structure.&n; *&t;@cmd contains the operation to perform.&n; *&t;@arg contains the operational arguments.&n; *&t;Check permission for an ioctl operation on @file.  Note that @arg can&n; *&t;sometimes represents a user space pointer; in other cases, it may be a&n; *&t;simple integer value.  When @arg represents a user space pointer, it&n; *&t;should never be used by the security module.&n; *&t;Return 0 if permission is granted.&n; * @file_mmap :&n; *&t;Check permissions for a mmap operation.  The @file may be NULL, e.g.&n; *&t;if mapping anonymous memory.&n; *&t;@file contains the file structure for file to map (may be NULL).&n; *&t;@prot contains the requested permissions.&n; *&t;@flags contains the operational flags.&n; *&t;Return 0 if permission is granted.&n; * @file_mprotect:&n; *&t;Check permissions before changing memory access permissions.&n; *&t;@vma contains the memory region to modify.&n; *&t;@prot contains the requested permissions.&n; *&t;Return 0 if permission is granted.&n; * @file_lock:&n; *&t;Check permission before performing file locking operations.&n; *&t;Note: this hook mediates both flock and fcntl style locks.&n; *&t;@file contains the file structure.&n; *&t;@cmd contains the posix-translated lock operation to perform&n; *&t;(e.g. F_RDLCK, F_WRLCK).&n; *&t;Return 0 if permission is granted.&n; * @file_fcntl:&n; *&t;Check permission before allowing the file operation specified by @cmd&n; *&t;from being performed on the file @file.  Note that @arg can sometimes&n; *&t;represents a user space pointer; in other cases, it may be a simple&n; *&t;integer value.  When @arg represents a user space pointer, it should&n; *&t;never be used by the security module.&n; *&t;@file contains the file structure.&n; *&t;@cmd contains the operation to be performed.&n; *&t;@arg contains the operational arguments.&n; *&t;Return 0 if permission is granted.&n; * @file_set_fowner:&n; *&t;Save owner security information (typically from current-&gt;security) in&n; *&t;file-&gt;f_security for later use by the send_sigiotask hook.&n; *&t;@file contains the file structure to update.&n; *&t;Return 0 on success.&n; * @file_send_sigiotask:&n; *&t;Check permission for the file owner @fown to send SIGIO or SIGURG to the&n; *&t;process @tsk.  Note that this hook is sometimes called from interrupt.&n; *&t;Note that the fown_struct, @fown, is never outside the context of a&n; *&t;struct file, so the file structure (and associated security information)&n; *&t;can always be obtained:&n; *&t;&t;(struct file *)((long)fown - offsetof(struct file,f_owner));&n; * &t;@tsk contains the structure of task receiving signal.&n; *&t;@fown contains the file owner information.&n; *&t;@sig is the signal that will be sent.  When 0, kernel sends SIGIO.&n; *&t;Return 0 if permission is granted.&n; * @file_receive:&n; *&t;This hook allows security modules to control the ability of a process&n; *&t;to receive an open file descriptor via socket IPC.&n; *&t;@file contains the file structure being received.&n; *&t;Return 0 if permission is granted.&n; *&n; * Security hooks for task operations.&n; *&n; * @task_create:&n; *&t;Check permission before creating a child process.  See the clone(2)&n; *&t;manual page for definitions of the @clone_flags.&n; *&t;@clone_flags contains the flags indicating what should be shared.&n; *&t;Return 0 if permission is granted.&n; * @task_alloc_security:&n; *&t;@p contains the task_struct for child process.&n; *&t;Allocate and attach a security structure to the p-&gt;security field. The&n; *&t;security field is initialized to NULL when the task structure is&n; *&t;allocated.&n; *&t;Return 0 if operation was successful.&n; * @task_free_security:&n; *&t;@p contains the task_struct for process.&n; *&t;Deallocate and clear the p-&gt;security field.&n; * @task_setuid:&n; *&t;Check permission before setting one or more of the user identity&n; *&t;attributes of the current process.  The @flags parameter indicates&n; *&t;which of the set*uid system calls invoked this hook and how to&n; *&t;interpret the @id0, @id1, and @id2 parameters.  See the LSM_SETID&n; *&t;definitions at the beginning of this file for the @flags values and&n; *&t;their meanings.&n; *&t;@id0 contains a uid.&n; *&t;@id1 contains a uid.&n; *&t;@id2 contains a uid.&n; *&t;@flags contains one of the LSM_SETID_* values.&n; *&t;Return 0 if permission is granted.&n; * @task_post_setuid:&n; *&t;Update the module&squot;s state after setting one or more of the user&n; *&t;identity attributes of the current process.  The @flags parameter&n; *&t;indicates which of the set*uid system calls invoked this hook.  If&n; *&t;@flags is LSM_SETID_FS, then @old_ruid is the old fs uid and the other&n; *&t;parameters are not used.&n; *&t;@old_ruid contains the old real uid (or fs uid if LSM_SETID_FS).&n; *&t;@old_euid contains the old effective uid (or -1 if LSM_SETID_FS).&n; *&t;@old_suid contains the old saved uid (or -1 if LSM_SETID_FS).&n; *&t;@flags contains one of the LSM_SETID_* values.&n; *&t;Return 0 on success.&n; * @task_setgid:&n; *&t;Check permission before setting one or more of the group identity&n; *&t;attributes of the current process.  The @flags parameter indicates&n; *&t;which of the set*gid system calls invoked this hook and how to&n; *&t;interpret the @id0, @id1, and @id2 parameters.  See the LSM_SETID&n; *&t;definitions at the beginning of this file for the @flags values and&n; *&t;their meanings.&n; *&t;@id0 contains a gid.&n; *&t;@id1 contains a gid.&n; *&t;@id2 contains a gid.&n; *&t;@flags contains one of the LSM_SETID_* values.&n; *&t;Return 0 if permission is granted.&n; * @task_setpgid:&n; *&t;Check permission before setting the process group identifier of the&n; *&t;process @p to @pgid.&n; *&t;@p contains the task_struct for process being modified.&n; *&t;@pgid contains the new pgid.&n; *&t;Return 0 if permission is granted.&n; * @task_getpgid:&n; *&t;Check permission before getting the process group identifier of the&n; *&t;process @p.&n; *&t;@p contains the task_struct for the process.&n; *&t;Return 0 if permission is granted.&n; * @task_getsid:&n; *&t;Check permission before getting the session identifier of the process&n; *&t;@p.&n; *&t;@p contains the task_struct for the process.&n; *&t;Return 0 if permission is granted.&n; * @task_setgroups:&n; *&t;Check permission before setting the supplementary group set of the&n; *&t;current process.&n; *&t;@group_info contains the new group information.&n; *&t;Return 0 if permission is granted.&n; * @task_setnice:&n; *&t;Check permission before setting the nice value of @p to @nice.&n; *&t;@p contains the task_struct of process.&n; *&t;@nice contains the new nice value.&n; *&t;Return 0 if permission is granted.&n; * @task_setrlimit:&n; *&t;Check permission before setting the resource limits of the current&n; *&t;process for @resource to @new_rlim.  The old resource limit values can&n; *&t;be examined by dereferencing (current-&gt;signal-&gt;rlim + resource).&n; *&t;@resource contains the resource whose limit is being set.&n; *&t;@new_rlim contains the new limits for @resource.&n; *&t;Return 0 if permission is granted.&n; * @task_setscheduler:&n; *&t;Check permission before setting scheduling policy and/or parameters of&n; *&t;process @p based on @policy and @lp.&n; *&t;@p contains the task_struct for process.&n; *&t;@policy contains the scheduling policy.&n; *&t;@lp contains the scheduling parameters.&n; *&t;Return 0 if permission is granted.&n; * @task_getscheduler:&n; *&t;Check permission before obtaining scheduling information for process&n; *&t;@p.&n; *&t;@p contains the task_struct for process.&n; *&t;Return 0 if permission is granted.&n; * @task_kill:&n; *&t;Check permission before sending signal @sig to @p.  @info can be NULL,&n; *&t;the constant 1, or a pointer to a siginfo structure.  If @info is 1 or&n; *&t;SI_FROMKERNEL(info) is true, then the signal should be viewed as coming&n; *&t;from the kernel and should typically be permitted.&n; *&t;SIGIO signals are handled separately by the send_sigiotask hook in&n; *&t;file_security_ops.&n; *&t;@p contains the task_struct for process.&n; *&t;@info contains the signal information.&n; *&t;@sig contains the signal value.&n; *&t;Return 0 if permission is granted.&n; * @task_wait:&n; *&t;Check permission before allowing a process to reap a child process @p&n; *&t;and collect its status information.&n; *&t;@p contains the task_struct for process.&n; *&t;Return 0 if permission is granted.&n; * @task_prctl:&n; *&t;Check permission before performing a process control operation on the&n; *&t;current process.&n; *&t;@option contains the operation.&n; *&t;@arg2 contains a argument.&n; *&t;@arg3 contains a argument.&n; *&t;@arg4 contains a argument.&n; *&t;@arg5 contains a argument.&n; *&t;Return 0 if permission is granted.&n; * @task_reparent_to_init:&n; * &t;Set the security attributes in @p-&gt;security for a kernel thread that&n; * &t;is being reparented to the init task.&n; *&t;@p contains the task_struct for the kernel thread.&n; * @task_to_inode:&n; * &t;Set the security attributes for an inode based on an associated task&squot;s&n; * &t;security attributes, e.g. for /proc/pid inodes.&n; *&t;@p contains the task_struct for the task.&n; *&t;@inode contains the inode structure for the inode.&n; *&n; * Security hooks for Netlink messaging.&n; *&n; * @netlink_send:&n; *&t;Save security information for a netlink message so that permission&n; *&t;checking can be performed when the message is processed.  The security&n; *&t;information can be saved using the eff_cap field of the&n; *      netlink_skb_parms structure.  Also may be used to provide fine&n; *&t;grained control over message transmission.&n; *&t;@sk associated sock of task sending the message.,&n; *&t;@skb contains the sk_buff structure for the netlink message.&n; *&t;Return 0 if the information was successfully saved and message&n; *&t;is allowed to be transmitted.&n; * @netlink_recv:&n; *&t;Check permission before processing the received netlink message in&n; *&t;@skb.&n; *&t;@skb contains the sk_buff structure for the netlink message.&n; *&t;Return 0 if permission is granted.&n; *&n; * Security hooks for Unix domain networking.&n; *&n; * @unix_stream_connect:&n; *&t;Check permissions before establishing a Unix domain stream connection&n; *&t;between @sock and @other.&n; *&t;@sock contains the socket structure.&n; *&t;@other contains the peer socket structure.&n; *&t;Return 0 if permission is granted.&n; * @unix_may_send:&n; *&t;Check permissions before connecting or sending datagrams from @sock to&n; *&t;@other.&n; *&t;@sock contains the socket structure.&n; *&t;@sock contains the peer socket structure.&n; *&t;Return 0 if permission is granted.&n; *&n; * The @unix_stream_connect and @unix_may_send hooks were necessary because&n; * Linux provides an alternative to the conventional file name space for Unix&n; * domain sockets.  Whereas binding and connecting to sockets in the file name&n; * space is mediated by the typical file permissions (and caught by the mknod&n; * and permission hooks in inode_security_ops), binding and connecting to&n; * sockets in the abstract name space is completely unmediated.  Sufficient&n; * control of Unix domain sockets in the abstract name space isn&squot;t possible&n; * using only the socket layer hooks, since we need to know the actual target&n; * socket, which is not looked up until we are inside the af_unix code.&n; *&n; * Security hooks for socket operations.&n; *&n; * @socket_create:&n; *&t;Check permissions prior to creating a new socket.&n; *&t;@family contains the requested protocol family.&n; *&t;@type contains the requested communications type.&n; *&t;@protocol contains the requested protocol.&n; *&t;@kern set to 1 if a kernel socket.&n; *&t;Return 0 if permission is granted.&n; * @socket_post_create:&n; *&t;This hook allows a module to update or allocate a per-socket security&n; *&t;structure. Note that the security field was not added directly to the&n; *&t;socket structure, but rather, the socket security information is stored&n; *&t;in the associated inode.  Typically, the inode alloc_security hook will&n; *&t;allocate and and attach security information to&n; *&t;sock-&gt;inode-&gt;i_security.  This hook may be used to update the&n; *&t;sock-&gt;inode-&gt;i_security field with additional information that wasn&squot;t&n; *&t;available when the inode was allocated.&n; *&t;@sock contains the newly created socket structure.&n; *&t;@family contains the requested protocol family.&n; *&t;@type contains the requested communications type.&n; *&t;@protocol contains the requested protocol.&n; *&t;@kern set to 1 if a kernel socket.&n; * @socket_bind:&n; *&t;Check permission before socket protocol layer bind operation is&n; *&t;performed and the socket @sock is bound to the address specified in the&n; *&t;@address parameter.&n; *&t;@sock contains the socket structure.&n; *&t;@address contains the address to bind to.&n; *&t;@addrlen contains the length of address.&n; *&t;Return 0 if permission is granted.  &n; * @socket_connect:&n; *&t;Check permission before socket protocol layer connect operation&n; *&t;attempts to connect socket @sock to a remote address, @address.&n; *&t;@sock contains the socket structure.&n; *&t;@address contains the address of remote endpoint.&n; *&t;@addrlen contains the length of address.&n; *&t;Return 0 if permission is granted.  &n; * @socket_listen:&n; *&t;Check permission before socket protocol layer listen operation.&n; *&t;@sock contains the socket structure.&n; *&t;@backlog contains the maximum length for the pending connection queue.&n; *&t;Return 0 if permission is granted.&n; * @socket_accept:&n; *&t;Check permission before accepting a new connection.  Note that the new&n; *&t;socket, @newsock, has been created and some information copied to it,&n; *&t;but the accept operation has not actually been performed.&n; *&t;@sock contains the listening socket structure.&n; *&t;@newsock contains the newly created server socket for connection.&n; *&t;Return 0 if permission is granted.&n; * @socket_post_accept:&n; *&t;This hook allows a security module to copy security&n; *&t;information into the newly created socket&squot;s inode.&n; *&t;@sock contains the listening socket structure.&n; *&t;@newsock contains the newly created server socket for connection.&n; * @socket_sendmsg:&n; *&t;Check permission before transmitting a message to another socket.&n; *&t;@sock contains the socket structure.&n; *&t;@msg contains the message to be transmitted.&n; *&t;@size contains the size of message.&n; *&t;Return 0 if permission is granted.&n; * @socket_recvmsg:&n; *&t;Check permission before receiving a message from a socket.&n; *&t;@sock contains the socket structure.&n; *&t;@msg contains the message structure.&n; *&t;@size contains the size of message structure.&n; *&t;@flags contains the operational flags.&n; *&t;Return 0 if permission is granted.  &n; * @socket_getsockname:&n; *&t;Check permission before the local address (name) of the socket object&n; *&t;@sock is retrieved.&n; *&t;@sock contains the socket structure.&n; *&t;Return 0 if permission is granted.&n; * @socket_getpeername:&n; *&t;Check permission before the remote address (name) of a socket object&n; *&t;@sock is retrieved.&n; *&t;@sock contains the socket structure.&n; *&t;Return 0 if permission is granted.&n; * @socket_getsockopt:&n; *&t;Check permissions before retrieving the options associated with socket&n; *&t;@sock.&n; *&t;@sock contains the socket structure.&n; *&t;@level contains the protocol level to retrieve option from.&n; *&t;@optname contains the name of option to retrieve.&n; *&t;Return 0 if permission is granted.&n; * @socket_setsockopt:&n; *&t;Check permissions before setting the options associated with socket&n; *&t;@sock.&n; *&t;@sock contains the socket structure.&n; *&t;@level contains the protocol level to set options for.&n; *&t;@optname contains the name of the option to set.&n; *&t;Return 0 if permission is granted.  &n; * @socket_shutdown:&n; *&t;Checks permission before all or part of a connection on the socket&n; *&t;@sock is shut down.&n; *&t;@sock contains the socket structure.&n; *&t;@how contains the flag indicating how future sends and receives are handled.&n; *&t;Return 0 if permission is granted.&n; * @socket_sock_rcv_skb:&n; *&t;Check permissions on incoming network packets.  This hook is distinct&n; *&t;from Netfilter&squot;s IP input hooks since it is the first time that the&n; *&t;incoming sk_buff @skb has been associated with a particular socket, @sk.&n; *&t;@sk contains the sock (not socket) associated with the incoming sk_buff.&n; *&t;@skb contains the incoming network data.&n; * @socket_getpeersec:&n; *&t;This hook allows the security module to provide peer socket security&n; *&t;state to userspace via getsockopt SO_GETPEERSEC.&n; *&t;@sock is the local socket.&n; *&t;@optval userspace memory where the security state is to be copied.&n; *&t;@optlen userspace int where the module should copy the actual length&n; *&t;of the security state.&n; *&t;@len as input is the maximum length to copy to userspace provided&n; *&t;by the caller.&n; *&t;Return 0 if all is well, otherwise, typical getsockopt return&n; *&t;values.&n; * @sk_alloc_security:&n; *      Allocate and attach a security structure to the sk-&gt;sk_security field,&n; *      which is used to copy security attributes between local stream sockets.&n; * @sk_free_security:&n; *&t;Deallocate security structure.&n; *&n; * Security hooks affecting all System V IPC operations.&n; *&n; * @ipc_permission:&n; *&t;Check permissions for access to IPC&n; *&t;@ipcp contains the kernel IPC permission structure&n; *&t;@flag contains the desired (requested) permission set&n; *&t;Return 0 if permission is granted.&n; *&n; * Security hooks for individual messages held in System V IPC message queues&n; * @msg_msg_alloc_security:&n; *&t;Allocate and attach a security structure to the msg-&gt;security field.&n; *&t;The security field is initialized to NULL when the structure is first&n; *&t;created.&n; *&t;@msg contains the message structure to be modified.&n; *&t;Return 0 if operation was successful and permission is granted.&n; * @msg_msg_free_security:&n; *&t;Deallocate the security structure for this message.&n; *&t;@msg contains the message structure to be modified.&n; *&n; * Security hooks for System V IPC Message Queues&n; *&n; * @msg_queue_alloc_security:&n; *&t;Allocate and attach a security structure to the&n; *&t;msq-&gt;q_perm.security field. The security field is initialized to&n; *&t;NULL when the structure is first created.&n; *&t;@msq contains the message queue structure to be modified.&n; *&t;Return 0 if operation was successful and permission is granted.&n; * @msg_queue_free_security:&n; *&t;Deallocate security structure for this message queue.&n; *&t;@msq contains the message queue structure to be modified.&n; * @msg_queue_associate:&n; *&t;Check permission when a message queue is requested through the&n; *&t;msgget system call.  This hook is only called when returning the&n; *&t;message queue identifier for an existing message queue, not when a&n; *&t;new message queue is created.&n; *&t;@msq contains the message queue to act upon.&n; *&t;@msqflg contains the operation control flags.&n; *&t;Return 0 if permission is granted.&n; * @msg_queue_msgctl:&n; *&t;Check permission when a message control operation specified by @cmd&n; *&t;is to be performed on the message queue @msq.&n; *&t;The @msq may be NULL, e.g. for IPC_INFO or MSG_INFO.&n; *&t;@msq contains the message queue to act upon.  May be NULL.&n; *&t;@cmd contains the operation to be performed.&n; *&t;Return 0 if permission is granted.  &n; * @msg_queue_msgsnd:&n; *&t;Check permission before a message, @msg, is enqueued on the message&n; *&t;queue, @msq.&n; *&t;@msq contains the message queue to send message to.&n; *&t;@msg contains the message to be enqueued.&n; *&t;@msqflg contains operational flags.&n; *&t;Return 0 if permission is granted.&n; * @msg_queue_msgrcv:&n; *&t;Check permission before a message, @msg, is removed from the message&n; *&t;queue, @msq.  The @target task structure contains a pointer to the &n; *&t;process that will be receiving the message (not equal to the current &n; *&t;process when inline receives are being performed).&n; *&t;@msq contains the message queue to retrieve message from.&n; *&t;@msg contains the message destination.&n; *&t;@target contains the task structure for recipient process.&n; *&t;@type contains the type of message requested.&n; *&t;@mode contains the operational flags.&n; *&t;Return 0 if permission is granted.&n; *&n; * Security hooks for System V Shared Memory Segments&n; *&n; * @shm_alloc_security:&n; *&t;Allocate and attach a security structure to the shp-&gt;shm_perm.security&n; *&t;field.  The security field is initialized to NULL when the structure is&n; *&t;first created.&n; *&t;@shp contains the shared memory structure to be modified.&n; *&t;Return 0 if operation was successful and permission is granted.&n; * @shm_free_security:&n; *&t;Deallocate the security struct for this memory segment.&n; *&t;@shp contains the shared memory structure to be modified.&n; * @shm_associate:&n; *&t;Check permission when a shared memory region is requested through the&n; *&t;shmget system call.  This hook is only called when returning the shared&n; *&t;memory region identifier for an existing region, not when a new shared&n; *&t;memory region is created.&n; *&t;@shp contains the shared memory structure to be modified.&n; *&t;@shmflg contains the operation control flags.&n; *&t;Return 0 if permission is granted.&n; * @shm_shmctl:&n; *&t;Check permission when a shared memory control operation specified by&n; *&t;@cmd is to be performed on the shared memory region @shp.&n; *&t;The @shp may be NULL, e.g. for IPC_INFO or SHM_INFO.&n; *&t;@shp contains shared memory structure to be modified.&n; *&t;@cmd contains the operation to be performed.&n; *&t;Return 0 if permission is granted.&n; * @shm_shmat:&n; *&t;Check permissions prior to allowing the shmat system call to attach the&n; *&t;shared memory segment @shp to the data segment of the calling process.&n; *&t;The attaching address is specified by @shmaddr.&n; *&t;@shp contains the shared memory structure to be modified.&n; *&t;@shmaddr contains the address to attach memory region to.&n; *&t;@shmflg contains the operational flags.&n; *&t;Return 0 if permission is granted.&n; *&n; * Security hooks for System V Semaphores&n; *&n; * @sem_alloc_security:&n; *&t;Allocate and attach a security structure to the sma-&gt;sem_perm.security&n; *&t;field.  The security field is initialized to NULL when the structure is&n; *&t;first created.&n; *&t;@sma contains the semaphore structure&n; *&t;Return 0 if operation was successful and permission is granted.&n; * @sem_free_security:&n; *&t;deallocate security struct for this semaphore&n; *&t;@sma contains the semaphore structure.&n; * @sem_associate:&n; *&t;Check permission when a semaphore is requested through the semget&n; *&t;system call.  This hook is only called when returning the semaphore&n; *&t;identifier for an existing semaphore, not when a new one must be&n; *&t;created.&n; *&t;@sma contains the semaphore structure.&n; *&t;@semflg contains the operation control flags.&n; *&t;Return 0 if permission is granted.&n; * @sem_semctl:&n; *&t;Check permission when a semaphore operation specified by @cmd is to be&n; *&t;performed on the semaphore @sma.  The @sma may be NULL, e.g. for &n; *&t;IPC_INFO or SEM_INFO.&n; *&t;@sma contains the semaphore structure.  May be NULL.&n; *&t;@cmd contains the operation to be performed.&n; *&t;Return 0 if permission is granted.&n; * @sem_semop&n; *&t;Check permissions before performing operations on members of the&n; *&t;semaphore set @sma.  If the @alter flag is nonzero, the semaphore set &n; *      may be modified.&n; *&t;@sma contains the semaphore structure.&n; *&t;@sops contains the operations to perform.&n; *&t;@nsops contains the number of operations to perform.&n; *&t;@alter contains the flag indicating whether changes are to be made.&n; *&t;Return 0 if permission is granted.&n; *&n; * @ptrace:&n; *&t;Check permission before allowing the @parent process to trace the&n; *&t;@child process.&n; *&t;Security modules may also want to perform a process tracing check&n; *&t;during an execve in the set_security or apply_creds hooks of&n; *&t;binprm_security_ops if the process is being traced and its security&n; *&t;attributes would be changed by the execve.&n; *&t;@parent contains the task_struct structure for parent process.&n; *&t;@child contains the task_struct structure for child process.&n; *&t;Return 0 if permission is granted.&n; * @capget:&n; *&t;Get the @effective, @inheritable, and @permitted capability sets for&n; *&t;the @target process.  The hook may also perform permission checking to&n; *&t;determine if the current process is allowed to see the capability sets&n; *&t;of the @target process.&n; *&t;@target contains the task_struct structure for target process.&n; *&t;@effective contains the effective capability set.&n; *&t;@inheritable contains the inheritable capability set.&n; *&t;@permitted contains the permitted capability set.&n; *&t;Return 0 if the capability sets were successfully obtained.&n; * @capset_check:&n; *&t;Check permission before setting the @effective, @inheritable, and&n; *&t;@permitted capability sets for the @target process.&n; *&t;Caveat:  @target is also set to current if a set of processes is&n; *&t;specified (i.e. all processes other than current and init or a&n; *&t;particular process group).  Hence, the capset_set hook may need to&n; *&t;revalidate permission to the actual target process.&n; *&t;@target contains the task_struct structure for target process.&n; *&t;@effective contains the effective capability set.&n; *&t;@inheritable contains the inheritable capability set.&n; *&t;@permitted contains the permitted capability set.&n; *&t;Return 0 if permission is granted.&n; * @capset_set:&n; *&t;Set the @effective, @inheritable, and @permitted capability sets for&n; *&t;the @target process.  Since capset_check cannot always check permission&n; *&t;to the real @target process, this hook may also perform permission&n; *&t;checking to determine if the current process is allowed to set the&n; *&t;capability sets of the @target process.  However, this hook has no way&n; *&t;of returning an error due to the structure of the sys_capset code.&n; *&t;@target contains the task_struct structure for target process.&n; *&t;@effective contains the effective capability set.&n; *&t;@inheritable contains the inheritable capability set.&n; *&t;@permitted contains the permitted capability set.&n; * @acct:&n; *&t;Check permission before enabling or disabling process accounting.  If&n; *&t;accounting is being enabled, then @file refers to the open file used to&n; *&t;store accounting records.  If accounting is being disabled, then @file&n; *&t;is NULL.&n; *&t;@file contains the file structure for the accounting file (may be NULL).&n; *&t;Return 0 if permission is granted.&n; * @sysctl:&n; *&t;Check permission before accessing the @table sysctl variable in the&n; *&t;manner specified by @op.&n; *&t;@table contains the ctl_table structure for the sysctl variable.&n; *&t;@op contains the operation (001 = search, 002 = write, 004 = read).&n; *&t;Return 0 if permission is granted.&n; * @capable:&n; *&t;Check whether the @tsk process has the @cap capability.&n; *&t;@tsk contains the task_struct for the process.&n; *&t;@cap contains the capability &lt;include/linux/capability.h&gt;.&n; *&t;Return 0 if the capability is granted for @tsk.&n; * @syslog:&n; *&t;Check permission before accessing the kernel message ring or changing&n; *&t;logging to the console.&n; *&t;See the syslog(2) manual page for an explanation of the @type values.  &n; *&t;@type contains the type of action.&n; *&t;Return 0 if permission is granted.&n; * @settime:&n; *&t;Check permission to change the system time.&n; *&t;struct timespec and timezone are defined in include/linux/time.h&n; *&t;@ts contains new time&n; *&t;@tz contains new timezone&n; *&t;Return 0 if permission is granted.&n; * @vm_enough_memory:&n; *&t;Check permissions for allocating a new virtual mapping.&n; *      @pages contains the number of pages.&n; *&t;Return 0 if permission is granted.&n; *&n; * @register_security:&n; * &t;allow module stacking.&n; * &t;@name contains the name of the security module being stacked.&n; * &t;@ops contains a pointer to the struct security_operations of the module to stack.&n; * @unregister_security:&n; *&t;remove a stacked module.&n; *&t;@name contains the name of the security module being unstacked.&n; *&t;@ops contains a pointer to the struct security_operations of the module to unstack.&n; * &n; * This is the main security structure.&n; */
DECL|struct|security_operations
r_struct
id|security_operations
(brace
DECL|member|ptrace
r_int
(paren
op_star
id|ptrace
)paren
(paren
r_struct
id|task_struct
op_star
id|parent
comma
r_struct
id|task_struct
op_star
id|child
)paren
suffix:semicolon
DECL|member|capget
r_int
(paren
op_star
id|capget
)paren
(paren
r_struct
id|task_struct
op_star
id|target
comma
id|kernel_cap_t
op_star
id|effective
comma
id|kernel_cap_t
op_star
id|inheritable
comma
id|kernel_cap_t
op_star
id|permitted
)paren
suffix:semicolon
DECL|member|capset_check
r_int
(paren
op_star
id|capset_check
)paren
(paren
r_struct
id|task_struct
op_star
id|target
comma
id|kernel_cap_t
op_star
id|effective
comma
id|kernel_cap_t
op_star
id|inheritable
comma
id|kernel_cap_t
op_star
id|permitted
)paren
suffix:semicolon
DECL|member|capset_set
r_void
(paren
op_star
id|capset_set
)paren
(paren
r_struct
id|task_struct
op_star
id|target
comma
id|kernel_cap_t
op_star
id|effective
comma
id|kernel_cap_t
op_star
id|inheritable
comma
id|kernel_cap_t
op_star
id|permitted
)paren
suffix:semicolon
DECL|member|acct
r_int
(paren
op_star
id|acct
)paren
(paren
r_struct
id|file
op_star
id|file
)paren
suffix:semicolon
DECL|member|sysctl
r_int
(paren
op_star
id|sysctl
)paren
(paren
r_struct
id|ctl_table
op_star
id|table
comma
r_int
id|op
)paren
suffix:semicolon
DECL|member|capable
r_int
(paren
op_star
id|capable
)paren
(paren
r_struct
id|task_struct
op_star
id|tsk
comma
r_int
id|cap
)paren
suffix:semicolon
DECL|member|quotactl
r_int
(paren
op_star
id|quotactl
)paren
(paren
r_int
id|cmds
comma
r_int
id|type
comma
r_int
id|id
comma
r_struct
id|super_block
op_star
id|sb
)paren
suffix:semicolon
DECL|member|quota_on
r_int
(paren
op_star
id|quota_on
)paren
(paren
r_struct
id|dentry
op_star
id|dentry
)paren
suffix:semicolon
DECL|member|syslog
r_int
(paren
op_star
id|syslog
)paren
(paren
r_int
id|type
)paren
suffix:semicolon
DECL|member|settime
r_int
(paren
op_star
id|settime
)paren
(paren
r_struct
id|timespec
op_star
id|ts
comma
r_struct
id|timezone
op_star
id|tz
)paren
suffix:semicolon
DECL|member|vm_enough_memory
r_int
(paren
op_star
id|vm_enough_memory
)paren
(paren
r_int
id|pages
)paren
suffix:semicolon
DECL|member|bprm_alloc_security
r_int
(paren
op_star
id|bprm_alloc_security
)paren
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
suffix:semicolon
DECL|member|bprm_free_security
r_void
(paren
op_star
id|bprm_free_security
)paren
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
suffix:semicolon
DECL|member|bprm_apply_creds
r_void
(paren
op_star
id|bprm_apply_creds
)paren
(paren
r_struct
id|linux_binprm
op_star
id|bprm
comma
r_int
id|unsafe
)paren
suffix:semicolon
DECL|member|bprm_set_security
r_int
(paren
op_star
id|bprm_set_security
)paren
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
suffix:semicolon
DECL|member|bprm_check_security
r_int
(paren
op_star
id|bprm_check_security
)paren
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
suffix:semicolon
DECL|member|bprm_secureexec
r_int
(paren
op_star
id|bprm_secureexec
)paren
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
suffix:semicolon
DECL|member|sb_alloc_security
r_int
(paren
op_star
id|sb_alloc_security
)paren
(paren
r_struct
id|super_block
op_star
id|sb
)paren
suffix:semicolon
DECL|member|sb_free_security
r_void
(paren
op_star
id|sb_free_security
)paren
(paren
r_struct
id|super_block
op_star
id|sb
)paren
suffix:semicolon
DECL|member|sb_copy_data
r_int
(paren
op_star
id|sb_copy_data
)paren
(paren
r_struct
id|file_system_type
op_star
id|type
comma
r_void
op_star
id|orig
comma
r_void
op_star
id|copy
)paren
suffix:semicolon
DECL|member|sb_kern_mount
r_int
(paren
op_star
id|sb_kern_mount
)paren
(paren
r_struct
id|super_block
op_star
id|sb
comma
r_void
op_star
id|data
)paren
suffix:semicolon
DECL|member|sb_statfs
r_int
(paren
op_star
id|sb_statfs
)paren
(paren
r_struct
id|super_block
op_star
id|sb
)paren
suffix:semicolon
DECL|member|sb_mount
r_int
(paren
op_star
id|sb_mount
)paren
(paren
r_char
op_star
id|dev_name
comma
r_struct
id|nameidata
op_star
id|nd
comma
r_char
op_star
id|type
comma
r_int
r_int
id|flags
comma
r_void
op_star
id|data
)paren
suffix:semicolon
DECL|member|sb_check_sb
r_int
(paren
op_star
id|sb_check_sb
)paren
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_struct
id|nameidata
op_star
id|nd
)paren
suffix:semicolon
DECL|member|sb_umount
r_int
(paren
op_star
id|sb_umount
)paren
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_int
id|flags
)paren
suffix:semicolon
DECL|member|sb_umount_close
r_void
(paren
op_star
id|sb_umount_close
)paren
(paren
r_struct
id|vfsmount
op_star
id|mnt
)paren
suffix:semicolon
DECL|member|sb_umount_busy
r_void
(paren
op_star
id|sb_umount_busy
)paren
(paren
r_struct
id|vfsmount
op_star
id|mnt
)paren
suffix:semicolon
DECL|member|sb_post_remount
r_void
(paren
op_star
id|sb_post_remount
)paren
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_int
r_int
id|flags
comma
r_void
op_star
id|data
)paren
suffix:semicolon
DECL|member|sb_post_mountroot
r_void
(paren
op_star
id|sb_post_mountroot
)paren
(paren
r_void
)paren
suffix:semicolon
DECL|member|sb_post_addmount
r_void
(paren
op_star
id|sb_post_addmount
)paren
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_struct
id|nameidata
op_star
id|mountpoint_nd
)paren
suffix:semicolon
DECL|member|sb_pivotroot
r_int
(paren
op_star
id|sb_pivotroot
)paren
(paren
r_struct
id|nameidata
op_star
id|old_nd
comma
r_struct
id|nameidata
op_star
id|new_nd
)paren
suffix:semicolon
DECL|member|sb_post_pivotroot
r_void
(paren
op_star
id|sb_post_pivotroot
)paren
(paren
r_struct
id|nameidata
op_star
id|old_nd
comma
r_struct
id|nameidata
op_star
id|new_nd
)paren
suffix:semicolon
DECL|member|inode_alloc_security
r_int
(paren
op_star
id|inode_alloc_security
)paren
(paren
r_struct
id|inode
op_star
id|inode
)paren
suffix:semicolon
DECL|member|inode_free_security
r_void
(paren
op_star
id|inode_free_security
)paren
(paren
r_struct
id|inode
op_star
id|inode
)paren
suffix:semicolon
DECL|member|inode_create
r_int
(paren
op_star
id|inode_create
)paren
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
)paren
suffix:semicolon
DECL|member|inode_post_create
r_void
(paren
op_star
id|inode_post_create
)paren
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
)paren
suffix:semicolon
DECL|member|inode_link
r_int
(paren
op_star
id|inode_link
)paren
(paren
r_struct
id|dentry
op_star
id|old_dentry
comma
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|new_dentry
)paren
suffix:semicolon
DECL|member|inode_post_link
r_void
(paren
op_star
id|inode_post_link
)paren
(paren
r_struct
id|dentry
op_star
id|old_dentry
comma
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|new_dentry
)paren
suffix:semicolon
DECL|member|inode_unlink
r_int
(paren
op_star
id|inode_unlink
)paren
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
)paren
suffix:semicolon
DECL|member|inode_symlink
r_int
(paren
op_star
id|inode_symlink
)paren
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_const
r_char
op_star
id|old_name
)paren
suffix:semicolon
DECL|member|inode_post_symlink
r_void
(paren
op_star
id|inode_post_symlink
)paren
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_const
r_char
op_star
id|old_name
)paren
suffix:semicolon
DECL|member|inode_mkdir
r_int
(paren
op_star
id|inode_mkdir
)paren
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
)paren
suffix:semicolon
DECL|member|inode_post_mkdir
r_void
(paren
op_star
id|inode_post_mkdir
)paren
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
)paren
suffix:semicolon
DECL|member|inode_rmdir
r_int
(paren
op_star
id|inode_rmdir
)paren
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
)paren
suffix:semicolon
DECL|member|inode_mknod
r_int
(paren
op_star
id|inode_mknod
)paren
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
comma
id|dev_t
id|dev
)paren
suffix:semicolon
DECL|member|inode_post_mknod
r_void
(paren
op_star
id|inode_post_mknod
)paren
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
comma
id|dev_t
id|dev
)paren
suffix:semicolon
DECL|member|inode_rename
r_int
(paren
op_star
id|inode_rename
)paren
(paren
r_struct
id|inode
op_star
id|old_dir
comma
r_struct
id|dentry
op_star
id|old_dentry
comma
r_struct
id|inode
op_star
id|new_dir
comma
r_struct
id|dentry
op_star
id|new_dentry
)paren
suffix:semicolon
DECL|member|inode_post_rename
r_void
(paren
op_star
id|inode_post_rename
)paren
(paren
r_struct
id|inode
op_star
id|old_dir
comma
r_struct
id|dentry
op_star
id|old_dentry
comma
r_struct
id|inode
op_star
id|new_dir
comma
r_struct
id|dentry
op_star
id|new_dentry
)paren
suffix:semicolon
DECL|member|inode_readlink
r_int
(paren
op_star
id|inode_readlink
)paren
(paren
r_struct
id|dentry
op_star
id|dentry
)paren
suffix:semicolon
DECL|member|inode_follow_link
r_int
(paren
op_star
id|inode_follow_link
)paren
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_struct
id|nameidata
op_star
id|nd
)paren
suffix:semicolon
DECL|member|inode_permission
r_int
(paren
op_star
id|inode_permission
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_int
id|mask
comma
r_struct
id|nameidata
op_star
id|nd
)paren
suffix:semicolon
DECL|member|inode_setattr
r_int
(paren
op_star
id|inode_setattr
)paren
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_struct
id|iattr
op_star
id|attr
)paren
suffix:semicolon
DECL|member|inode_getattr
r_int
(paren
op_star
id|inode_getattr
)paren
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_struct
id|dentry
op_star
id|dentry
)paren
suffix:semicolon
DECL|member|inode_delete
r_void
(paren
op_star
id|inode_delete
)paren
(paren
r_struct
id|inode
op_star
id|inode
)paren
suffix:semicolon
DECL|member|inode_setxattr
r_int
(paren
op_star
id|inode_setxattr
)paren
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_char
op_star
id|name
comma
r_void
op_star
id|value
comma
r_int
id|size
comma
r_int
id|flags
)paren
suffix:semicolon
DECL|member|inode_post_setxattr
r_void
(paren
op_star
id|inode_post_setxattr
)paren
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_char
op_star
id|name
comma
r_void
op_star
id|value
comma
r_int
id|size
comma
r_int
id|flags
)paren
suffix:semicolon
DECL|member|inode_getxattr
r_int
(paren
op_star
id|inode_getxattr
)paren
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_char
op_star
id|name
)paren
suffix:semicolon
DECL|member|inode_listxattr
r_int
(paren
op_star
id|inode_listxattr
)paren
(paren
r_struct
id|dentry
op_star
id|dentry
)paren
suffix:semicolon
DECL|member|inode_removexattr
r_int
(paren
op_star
id|inode_removexattr
)paren
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_char
op_star
id|name
)paren
suffix:semicolon
DECL|member|inode_getsecurity
r_int
(paren
op_star
id|inode_getsecurity
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_const
r_char
op_star
id|name
comma
r_void
op_star
id|buffer
comma
r_int
id|size
)paren
suffix:semicolon
DECL|member|inode_setsecurity
r_int
(paren
op_star
id|inode_setsecurity
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_const
r_char
op_star
id|name
comma
r_const
r_void
op_star
id|value
comma
r_int
id|size
comma
r_int
id|flags
)paren
suffix:semicolon
DECL|member|inode_listsecurity
r_int
(paren
op_star
id|inode_listsecurity
)paren
(paren
r_struct
id|inode
op_star
id|inode
comma
r_char
op_star
id|buffer
comma
r_int
id|buffer_size
)paren
suffix:semicolon
DECL|member|file_permission
r_int
(paren
op_star
id|file_permission
)paren
(paren
r_struct
id|file
op_star
id|file
comma
r_int
id|mask
)paren
suffix:semicolon
DECL|member|file_alloc_security
r_int
(paren
op_star
id|file_alloc_security
)paren
(paren
r_struct
id|file
op_star
id|file
)paren
suffix:semicolon
DECL|member|file_free_security
r_void
(paren
op_star
id|file_free_security
)paren
(paren
r_struct
id|file
op_star
id|file
)paren
suffix:semicolon
DECL|member|file_ioctl
r_int
(paren
op_star
id|file_ioctl
)paren
(paren
r_struct
id|file
op_star
id|file
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
suffix:semicolon
DECL|member|file_mmap
r_int
(paren
op_star
id|file_mmap
)paren
(paren
r_struct
id|file
op_star
id|file
comma
r_int
r_int
id|prot
comma
r_int
r_int
id|flags
)paren
suffix:semicolon
DECL|member|file_mprotect
r_int
(paren
op_star
id|file_mprotect
)paren
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|prot
)paren
suffix:semicolon
DECL|member|file_lock
r_int
(paren
op_star
id|file_lock
)paren
(paren
r_struct
id|file
op_star
id|file
comma
r_int
r_int
id|cmd
)paren
suffix:semicolon
DECL|member|file_fcntl
r_int
(paren
op_star
id|file_fcntl
)paren
(paren
r_struct
id|file
op_star
id|file
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
suffix:semicolon
DECL|member|file_set_fowner
r_int
(paren
op_star
id|file_set_fowner
)paren
(paren
r_struct
id|file
op_star
id|file
)paren
suffix:semicolon
DECL|member|file_send_sigiotask
r_int
(paren
op_star
id|file_send_sigiotask
)paren
(paren
r_struct
id|task_struct
op_star
id|tsk
comma
r_struct
id|fown_struct
op_star
id|fown
comma
r_int
id|sig
)paren
suffix:semicolon
DECL|member|file_receive
r_int
(paren
op_star
id|file_receive
)paren
(paren
r_struct
id|file
op_star
id|file
)paren
suffix:semicolon
DECL|member|task_create
r_int
(paren
op_star
id|task_create
)paren
(paren
r_int
r_int
id|clone_flags
)paren
suffix:semicolon
DECL|member|task_alloc_security
r_int
(paren
op_star
id|task_alloc_security
)paren
(paren
r_struct
id|task_struct
op_star
id|p
)paren
suffix:semicolon
DECL|member|task_free_security
r_void
(paren
op_star
id|task_free_security
)paren
(paren
r_struct
id|task_struct
op_star
id|p
)paren
suffix:semicolon
DECL|member|task_setuid
r_int
(paren
op_star
id|task_setuid
)paren
(paren
id|uid_t
id|id0
comma
id|uid_t
id|id1
comma
id|uid_t
id|id2
comma
r_int
id|flags
)paren
suffix:semicolon
DECL|member|task_post_setuid
r_int
(paren
op_star
id|task_post_setuid
)paren
(paren
id|uid_t
id|old_ruid
multiline_comment|/* or fsuid */
comma
id|uid_t
id|old_euid
comma
id|uid_t
id|old_suid
comma
r_int
id|flags
)paren
suffix:semicolon
DECL|member|task_setgid
r_int
(paren
op_star
id|task_setgid
)paren
(paren
id|gid_t
id|id0
comma
id|gid_t
id|id1
comma
id|gid_t
id|id2
comma
r_int
id|flags
)paren
suffix:semicolon
DECL|member|task_setpgid
r_int
(paren
op_star
id|task_setpgid
)paren
(paren
r_struct
id|task_struct
op_star
id|p
comma
id|pid_t
id|pgid
)paren
suffix:semicolon
DECL|member|task_getpgid
r_int
(paren
op_star
id|task_getpgid
)paren
(paren
r_struct
id|task_struct
op_star
id|p
)paren
suffix:semicolon
DECL|member|task_getsid
r_int
(paren
op_star
id|task_getsid
)paren
(paren
r_struct
id|task_struct
op_star
id|p
)paren
suffix:semicolon
DECL|member|task_setgroups
r_int
(paren
op_star
id|task_setgroups
)paren
(paren
r_struct
id|group_info
op_star
id|group_info
)paren
suffix:semicolon
DECL|member|task_setnice
r_int
(paren
op_star
id|task_setnice
)paren
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_int
id|nice
)paren
suffix:semicolon
DECL|member|task_setrlimit
r_int
(paren
op_star
id|task_setrlimit
)paren
(paren
r_int
r_int
id|resource
comma
r_struct
id|rlimit
op_star
id|new_rlim
)paren
suffix:semicolon
DECL|member|task_setscheduler
r_int
(paren
op_star
id|task_setscheduler
)paren
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_int
id|policy
comma
r_struct
id|sched_param
op_star
id|lp
)paren
suffix:semicolon
DECL|member|task_getscheduler
r_int
(paren
op_star
id|task_getscheduler
)paren
(paren
r_struct
id|task_struct
op_star
id|p
)paren
suffix:semicolon
DECL|member|task_kill
r_int
(paren
op_star
id|task_kill
)paren
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_struct
id|siginfo
op_star
id|info
comma
r_int
id|sig
)paren
suffix:semicolon
DECL|member|task_wait
r_int
(paren
op_star
id|task_wait
)paren
(paren
r_struct
id|task_struct
op_star
id|p
)paren
suffix:semicolon
DECL|member|task_prctl
r_int
(paren
op_star
id|task_prctl
)paren
(paren
r_int
id|option
comma
r_int
r_int
id|arg2
comma
r_int
r_int
id|arg3
comma
r_int
r_int
id|arg4
comma
r_int
r_int
id|arg5
)paren
suffix:semicolon
DECL|member|task_reparent_to_init
r_void
(paren
op_star
id|task_reparent_to_init
)paren
(paren
r_struct
id|task_struct
op_star
id|p
)paren
suffix:semicolon
DECL|member|task_to_inode
r_void
(paren
op_star
id|task_to_inode
)paren
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_struct
id|inode
op_star
id|inode
)paren
suffix:semicolon
DECL|member|ipc_permission
r_int
(paren
op_star
id|ipc_permission
)paren
(paren
r_struct
id|kern_ipc_perm
op_star
id|ipcp
comma
r_int
id|flag
)paren
suffix:semicolon
DECL|member|msg_msg_alloc_security
r_int
(paren
op_star
id|msg_msg_alloc_security
)paren
(paren
r_struct
id|msg_msg
op_star
id|msg
)paren
suffix:semicolon
DECL|member|msg_msg_free_security
r_void
(paren
op_star
id|msg_msg_free_security
)paren
(paren
r_struct
id|msg_msg
op_star
id|msg
)paren
suffix:semicolon
DECL|member|msg_queue_alloc_security
r_int
(paren
op_star
id|msg_queue_alloc_security
)paren
(paren
r_struct
id|msg_queue
op_star
id|msq
)paren
suffix:semicolon
DECL|member|msg_queue_free_security
r_void
(paren
op_star
id|msg_queue_free_security
)paren
(paren
r_struct
id|msg_queue
op_star
id|msq
)paren
suffix:semicolon
DECL|member|msg_queue_associate
r_int
(paren
op_star
id|msg_queue_associate
)paren
(paren
r_struct
id|msg_queue
op_star
id|msq
comma
r_int
id|msqflg
)paren
suffix:semicolon
DECL|member|msg_queue_msgctl
r_int
(paren
op_star
id|msg_queue_msgctl
)paren
(paren
r_struct
id|msg_queue
op_star
id|msq
comma
r_int
id|cmd
)paren
suffix:semicolon
DECL|member|msg_queue_msgsnd
r_int
(paren
op_star
id|msg_queue_msgsnd
)paren
(paren
r_struct
id|msg_queue
op_star
id|msq
comma
r_struct
id|msg_msg
op_star
id|msg
comma
r_int
id|msqflg
)paren
suffix:semicolon
DECL|member|msg_queue_msgrcv
r_int
(paren
op_star
id|msg_queue_msgrcv
)paren
(paren
r_struct
id|msg_queue
op_star
id|msq
comma
r_struct
id|msg_msg
op_star
id|msg
comma
r_struct
id|task_struct
op_star
id|target
comma
r_int
id|type
comma
r_int
id|mode
)paren
suffix:semicolon
DECL|member|shm_alloc_security
r_int
(paren
op_star
id|shm_alloc_security
)paren
(paren
r_struct
id|shmid_kernel
op_star
id|shp
)paren
suffix:semicolon
DECL|member|shm_free_security
r_void
(paren
op_star
id|shm_free_security
)paren
(paren
r_struct
id|shmid_kernel
op_star
id|shp
)paren
suffix:semicolon
DECL|member|shm_associate
r_int
(paren
op_star
id|shm_associate
)paren
(paren
r_struct
id|shmid_kernel
op_star
id|shp
comma
r_int
id|shmflg
)paren
suffix:semicolon
DECL|member|shm_shmctl
r_int
(paren
op_star
id|shm_shmctl
)paren
(paren
r_struct
id|shmid_kernel
op_star
id|shp
comma
r_int
id|cmd
)paren
suffix:semicolon
DECL|member|shm_shmat
r_int
(paren
op_star
id|shm_shmat
)paren
(paren
r_struct
id|shmid_kernel
op_star
id|shp
comma
r_char
id|__user
op_star
id|shmaddr
comma
r_int
id|shmflg
)paren
suffix:semicolon
DECL|member|sem_alloc_security
r_int
(paren
op_star
id|sem_alloc_security
)paren
(paren
r_struct
id|sem_array
op_star
id|sma
)paren
suffix:semicolon
DECL|member|sem_free_security
r_void
(paren
op_star
id|sem_free_security
)paren
(paren
r_struct
id|sem_array
op_star
id|sma
)paren
suffix:semicolon
DECL|member|sem_associate
r_int
(paren
op_star
id|sem_associate
)paren
(paren
r_struct
id|sem_array
op_star
id|sma
comma
r_int
id|semflg
)paren
suffix:semicolon
DECL|member|sem_semctl
r_int
(paren
op_star
id|sem_semctl
)paren
(paren
r_struct
id|sem_array
op_star
id|sma
comma
r_int
id|cmd
)paren
suffix:semicolon
DECL|member|sem_semop
r_int
(paren
op_star
id|sem_semop
)paren
(paren
r_struct
id|sem_array
op_star
id|sma
comma
r_struct
id|sembuf
op_star
id|sops
comma
r_int
id|nsops
comma
r_int
id|alter
)paren
suffix:semicolon
DECL|member|netlink_send
r_int
(paren
op_star
id|netlink_send
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
DECL|member|netlink_recv
r_int
(paren
op_star
id|netlink_recv
)paren
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
multiline_comment|/* allow module stacking */
DECL|member|register_security
r_int
(paren
op_star
id|register_security
)paren
(paren
r_const
r_char
op_star
id|name
comma
r_struct
id|security_operations
op_star
id|ops
)paren
suffix:semicolon
DECL|member|unregister_security
r_int
(paren
op_star
id|unregister_security
)paren
(paren
r_const
r_char
op_star
id|name
comma
r_struct
id|security_operations
op_star
id|ops
)paren
suffix:semicolon
DECL|member|d_instantiate
r_void
(paren
op_star
id|d_instantiate
)paren
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_struct
id|inode
op_star
id|inode
)paren
suffix:semicolon
DECL|member|getprocattr
r_int
(paren
op_star
id|getprocattr
)paren
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_char
op_star
id|name
comma
r_void
op_star
id|value
comma
r_int
id|size
)paren
suffix:semicolon
DECL|member|setprocattr
r_int
(paren
op_star
id|setprocattr
)paren
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_char
op_star
id|name
comma
r_void
op_star
id|value
comma
r_int
id|size
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_SECURITY_NETWORK
DECL|member|unix_stream_connect
r_int
(paren
op_star
id|unix_stream_connect
)paren
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|socket
op_star
id|other
comma
r_struct
id|sock
op_star
id|newsk
)paren
suffix:semicolon
DECL|member|unix_may_send
r_int
(paren
op_star
id|unix_may_send
)paren
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|socket
op_star
id|other
)paren
suffix:semicolon
DECL|member|socket_create
r_int
(paren
op_star
id|socket_create
)paren
(paren
r_int
id|family
comma
r_int
id|type
comma
r_int
id|protocol
comma
r_int
id|kern
)paren
suffix:semicolon
DECL|member|socket_post_create
r_void
(paren
op_star
id|socket_post_create
)paren
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|family
comma
r_int
id|type
comma
r_int
id|protocol
comma
r_int
id|kern
)paren
suffix:semicolon
DECL|member|socket_bind
r_int
(paren
op_star
id|socket_bind
)paren
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|sockaddr
op_star
id|address
comma
r_int
id|addrlen
)paren
suffix:semicolon
DECL|member|socket_connect
r_int
(paren
op_star
id|socket_connect
)paren
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|sockaddr
op_star
id|address
comma
r_int
id|addrlen
)paren
suffix:semicolon
DECL|member|socket_listen
r_int
(paren
op_star
id|socket_listen
)paren
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|backlog
)paren
suffix:semicolon
DECL|member|socket_accept
r_int
(paren
op_star
id|socket_accept
)paren
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|socket
op_star
id|newsock
)paren
suffix:semicolon
DECL|member|socket_post_accept
r_void
(paren
op_star
id|socket_post_accept
)paren
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|socket
op_star
id|newsock
)paren
suffix:semicolon
DECL|member|socket_sendmsg
r_int
(paren
op_star
id|socket_sendmsg
)paren
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|msghdr
op_star
id|msg
comma
r_int
id|size
)paren
suffix:semicolon
DECL|member|socket_recvmsg
r_int
(paren
op_star
id|socket_recvmsg
)paren
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|msghdr
op_star
id|msg
comma
r_int
id|size
comma
r_int
id|flags
)paren
suffix:semicolon
DECL|member|socket_getsockname
r_int
(paren
op_star
id|socket_getsockname
)paren
(paren
r_struct
id|socket
op_star
id|sock
)paren
suffix:semicolon
DECL|member|socket_getpeername
r_int
(paren
op_star
id|socket_getpeername
)paren
(paren
r_struct
id|socket
op_star
id|sock
)paren
suffix:semicolon
DECL|member|socket_getsockopt
r_int
(paren
op_star
id|socket_getsockopt
)paren
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|level
comma
r_int
id|optname
)paren
suffix:semicolon
DECL|member|socket_setsockopt
r_int
(paren
op_star
id|socket_setsockopt
)paren
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|level
comma
r_int
id|optname
)paren
suffix:semicolon
DECL|member|socket_shutdown
r_int
(paren
op_star
id|socket_shutdown
)paren
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|how
)paren
suffix:semicolon
DECL|member|socket_sock_rcv_skb
r_int
(paren
op_star
id|socket_sock_rcv_skb
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
DECL|member|socket_getpeersec
r_int
(paren
op_star
id|socket_getpeersec
)paren
(paren
r_struct
id|socket
op_star
id|sock
comma
r_char
id|__user
op_star
id|optval
comma
r_int
id|__user
op_star
id|optlen
comma
r_int
id|len
)paren
suffix:semicolon
DECL|member|sk_alloc_security
r_int
(paren
op_star
id|sk_alloc_security
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
id|family
comma
r_int
id|priority
)paren
suffix:semicolon
DECL|member|sk_free_security
r_void
(paren
op_star
id|sk_free_security
)paren
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
macro_line|#endif&t;/* CONFIG_SECURITY_NETWORK */
)brace
suffix:semicolon
multiline_comment|/* global variables */
r_extern
r_struct
id|security_operations
op_star
id|security_ops
suffix:semicolon
multiline_comment|/* inline stuff */
DECL|function|security_ptrace
r_static
r_inline
r_int
id|security_ptrace
(paren
r_struct
id|task_struct
op_star
id|parent
comma
r_struct
id|task_struct
op_star
id|child
)paren
(brace
r_return
id|security_ops-&gt;ptrace
(paren
id|parent
comma
id|child
)paren
suffix:semicolon
)brace
DECL|function|security_capget
r_static
r_inline
r_int
id|security_capget
(paren
r_struct
id|task_struct
op_star
id|target
comma
id|kernel_cap_t
op_star
id|effective
comma
id|kernel_cap_t
op_star
id|inheritable
comma
id|kernel_cap_t
op_star
id|permitted
)paren
(brace
r_return
id|security_ops-&gt;capget
(paren
id|target
comma
id|effective
comma
id|inheritable
comma
id|permitted
)paren
suffix:semicolon
)brace
DECL|function|security_capset_check
r_static
r_inline
r_int
id|security_capset_check
(paren
r_struct
id|task_struct
op_star
id|target
comma
id|kernel_cap_t
op_star
id|effective
comma
id|kernel_cap_t
op_star
id|inheritable
comma
id|kernel_cap_t
op_star
id|permitted
)paren
(brace
r_return
id|security_ops-&gt;capset_check
(paren
id|target
comma
id|effective
comma
id|inheritable
comma
id|permitted
)paren
suffix:semicolon
)brace
DECL|function|security_capset_set
r_static
r_inline
r_void
id|security_capset_set
(paren
r_struct
id|task_struct
op_star
id|target
comma
id|kernel_cap_t
op_star
id|effective
comma
id|kernel_cap_t
op_star
id|inheritable
comma
id|kernel_cap_t
op_star
id|permitted
)paren
(brace
id|security_ops-&gt;capset_set
(paren
id|target
comma
id|effective
comma
id|inheritable
comma
id|permitted
)paren
suffix:semicolon
)brace
DECL|function|security_acct
r_static
r_inline
r_int
id|security_acct
(paren
r_struct
id|file
op_star
id|file
)paren
(brace
r_return
id|security_ops-&gt;acct
(paren
id|file
)paren
suffix:semicolon
)brace
DECL|function|security_sysctl
r_static
r_inline
r_int
id|security_sysctl
c_func
(paren
r_struct
id|ctl_table
op_star
id|table
comma
r_int
id|op
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|sysctl
c_func
(paren
id|table
comma
id|op
)paren
suffix:semicolon
)brace
DECL|function|security_quotactl
r_static
r_inline
r_int
id|security_quotactl
(paren
r_int
id|cmds
comma
r_int
id|type
comma
r_int
id|id
comma
r_struct
id|super_block
op_star
id|sb
)paren
(brace
r_return
id|security_ops-&gt;quotactl
(paren
id|cmds
comma
id|type
comma
id|id
comma
id|sb
)paren
suffix:semicolon
)brace
DECL|function|security_quota_on
r_static
r_inline
r_int
id|security_quota_on
(paren
r_struct
id|dentry
op_star
id|dentry
)paren
(brace
r_return
id|security_ops-&gt;quota_on
(paren
id|dentry
)paren
suffix:semicolon
)brace
DECL|function|security_syslog
r_static
r_inline
r_int
id|security_syslog
c_func
(paren
r_int
id|type
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|syslog
c_func
(paren
id|type
)paren
suffix:semicolon
)brace
DECL|function|security_settime
r_static
r_inline
r_int
id|security_settime
c_func
(paren
r_struct
id|timespec
op_star
id|ts
comma
r_struct
id|timezone
op_star
id|tz
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|settime
c_func
(paren
id|ts
comma
id|tz
)paren
suffix:semicolon
)brace
DECL|function|security_vm_enough_memory
r_static
r_inline
r_int
id|security_vm_enough_memory
c_func
(paren
r_int
id|pages
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|vm_enough_memory
c_func
(paren
id|pages
)paren
suffix:semicolon
)brace
DECL|function|security_bprm_alloc
r_static
r_inline
r_int
id|security_bprm_alloc
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
(brace
r_return
id|security_ops-&gt;bprm_alloc_security
(paren
id|bprm
)paren
suffix:semicolon
)brace
DECL|function|security_bprm_free
r_static
r_inline
r_void
id|security_bprm_free
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
(brace
id|security_ops-&gt;bprm_free_security
(paren
id|bprm
)paren
suffix:semicolon
)brace
DECL|function|security_bprm_apply_creds
r_static
r_inline
r_void
id|security_bprm_apply_creds
(paren
r_struct
id|linux_binprm
op_star
id|bprm
comma
r_int
id|unsafe
)paren
(brace
id|security_ops-&gt;bprm_apply_creds
(paren
id|bprm
comma
id|unsafe
)paren
suffix:semicolon
)brace
DECL|function|security_bprm_set
r_static
r_inline
r_int
id|security_bprm_set
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
(brace
r_return
id|security_ops-&gt;bprm_set_security
(paren
id|bprm
)paren
suffix:semicolon
)brace
DECL|function|security_bprm_check
r_static
r_inline
r_int
id|security_bprm_check
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
(brace
r_return
id|security_ops-&gt;bprm_check_security
(paren
id|bprm
)paren
suffix:semicolon
)brace
DECL|function|security_bprm_secureexec
r_static
r_inline
r_int
id|security_bprm_secureexec
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
(brace
r_return
id|security_ops-&gt;bprm_secureexec
(paren
id|bprm
)paren
suffix:semicolon
)brace
DECL|function|security_sb_alloc
r_static
r_inline
r_int
id|security_sb_alloc
(paren
r_struct
id|super_block
op_star
id|sb
)paren
(brace
r_return
id|security_ops-&gt;sb_alloc_security
(paren
id|sb
)paren
suffix:semicolon
)brace
DECL|function|security_sb_free
r_static
r_inline
r_void
id|security_sb_free
(paren
r_struct
id|super_block
op_star
id|sb
)paren
(brace
id|security_ops-&gt;sb_free_security
(paren
id|sb
)paren
suffix:semicolon
)brace
DECL|function|security_sb_copy_data
r_static
r_inline
r_int
id|security_sb_copy_data
(paren
r_struct
id|file_system_type
op_star
id|type
comma
r_void
op_star
id|orig
comma
r_void
op_star
id|copy
)paren
(brace
r_return
id|security_ops-&gt;sb_copy_data
(paren
id|type
comma
id|orig
comma
id|copy
)paren
suffix:semicolon
)brace
DECL|function|security_sb_kern_mount
r_static
r_inline
r_int
id|security_sb_kern_mount
(paren
r_struct
id|super_block
op_star
id|sb
comma
r_void
op_star
id|data
)paren
(brace
r_return
id|security_ops-&gt;sb_kern_mount
(paren
id|sb
comma
id|data
)paren
suffix:semicolon
)brace
DECL|function|security_sb_statfs
r_static
r_inline
r_int
id|security_sb_statfs
(paren
r_struct
id|super_block
op_star
id|sb
)paren
(brace
r_return
id|security_ops-&gt;sb_statfs
(paren
id|sb
)paren
suffix:semicolon
)brace
DECL|function|security_sb_mount
r_static
r_inline
r_int
id|security_sb_mount
(paren
r_char
op_star
id|dev_name
comma
r_struct
id|nameidata
op_star
id|nd
comma
r_char
op_star
id|type
comma
r_int
r_int
id|flags
comma
r_void
op_star
id|data
)paren
(brace
r_return
id|security_ops-&gt;sb_mount
(paren
id|dev_name
comma
id|nd
comma
id|type
comma
id|flags
comma
id|data
)paren
suffix:semicolon
)brace
DECL|function|security_sb_check_sb
r_static
r_inline
r_int
id|security_sb_check_sb
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_struct
id|nameidata
op_star
id|nd
)paren
(brace
r_return
id|security_ops-&gt;sb_check_sb
(paren
id|mnt
comma
id|nd
)paren
suffix:semicolon
)brace
DECL|function|security_sb_umount
r_static
r_inline
r_int
id|security_sb_umount
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_int
id|flags
)paren
(brace
r_return
id|security_ops-&gt;sb_umount
(paren
id|mnt
comma
id|flags
)paren
suffix:semicolon
)brace
DECL|function|security_sb_umount_close
r_static
r_inline
r_void
id|security_sb_umount_close
(paren
r_struct
id|vfsmount
op_star
id|mnt
)paren
(brace
id|security_ops-&gt;sb_umount_close
(paren
id|mnt
)paren
suffix:semicolon
)brace
DECL|function|security_sb_umount_busy
r_static
r_inline
r_void
id|security_sb_umount_busy
(paren
r_struct
id|vfsmount
op_star
id|mnt
)paren
(brace
id|security_ops-&gt;sb_umount_busy
(paren
id|mnt
)paren
suffix:semicolon
)brace
DECL|function|security_sb_post_remount
r_static
r_inline
r_void
id|security_sb_post_remount
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_int
r_int
id|flags
comma
r_void
op_star
id|data
)paren
(brace
id|security_ops-&gt;sb_post_remount
(paren
id|mnt
comma
id|flags
comma
id|data
)paren
suffix:semicolon
)brace
DECL|function|security_sb_post_mountroot
r_static
r_inline
r_void
id|security_sb_post_mountroot
(paren
r_void
)paren
(brace
id|security_ops-&gt;sb_post_mountroot
(paren
)paren
suffix:semicolon
)brace
DECL|function|security_sb_post_addmount
r_static
r_inline
r_void
id|security_sb_post_addmount
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_struct
id|nameidata
op_star
id|mountpoint_nd
)paren
(brace
id|security_ops-&gt;sb_post_addmount
(paren
id|mnt
comma
id|mountpoint_nd
)paren
suffix:semicolon
)brace
DECL|function|security_sb_pivotroot
r_static
r_inline
r_int
id|security_sb_pivotroot
(paren
r_struct
id|nameidata
op_star
id|old_nd
comma
r_struct
id|nameidata
op_star
id|new_nd
)paren
(brace
r_return
id|security_ops-&gt;sb_pivotroot
(paren
id|old_nd
comma
id|new_nd
)paren
suffix:semicolon
)brace
DECL|function|security_sb_post_pivotroot
r_static
r_inline
r_void
id|security_sb_post_pivotroot
(paren
r_struct
id|nameidata
op_star
id|old_nd
comma
r_struct
id|nameidata
op_star
id|new_nd
)paren
(brace
id|security_ops-&gt;sb_post_pivotroot
(paren
id|old_nd
comma
id|new_nd
)paren
suffix:semicolon
)brace
DECL|function|security_inode_alloc
r_static
r_inline
r_int
id|security_inode_alloc
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
r_return
id|security_ops-&gt;inode_alloc_security
(paren
id|inode
)paren
suffix:semicolon
)brace
DECL|function|security_inode_free
r_static
r_inline
r_void
id|security_inode_free
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
id|security_ops-&gt;inode_free_security
(paren
id|inode
)paren
suffix:semicolon
)brace
DECL|function|security_inode_create
r_static
r_inline
r_int
id|security_inode_create
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
)paren
(brace
r_return
id|security_ops-&gt;inode_create
(paren
id|dir
comma
id|dentry
comma
id|mode
)paren
suffix:semicolon
)brace
DECL|function|security_inode_post_create
r_static
r_inline
r_void
id|security_inode_post_create
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
)paren
(brace
id|security_ops-&gt;inode_post_create
(paren
id|dir
comma
id|dentry
comma
id|mode
)paren
suffix:semicolon
)brace
DECL|function|security_inode_link
r_static
r_inline
r_int
id|security_inode_link
(paren
r_struct
id|dentry
op_star
id|old_dentry
comma
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|new_dentry
)paren
(brace
r_return
id|security_ops-&gt;inode_link
(paren
id|old_dentry
comma
id|dir
comma
id|new_dentry
)paren
suffix:semicolon
)brace
DECL|function|security_inode_post_link
r_static
r_inline
r_void
id|security_inode_post_link
(paren
r_struct
id|dentry
op_star
id|old_dentry
comma
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|new_dentry
)paren
(brace
id|security_ops-&gt;inode_post_link
(paren
id|old_dentry
comma
id|dir
comma
id|new_dentry
)paren
suffix:semicolon
)brace
DECL|function|security_inode_unlink
r_static
r_inline
r_int
id|security_inode_unlink
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
)paren
(brace
r_return
id|security_ops-&gt;inode_unlink
(paren
id|dir
comma
id|dentry
)paren
suffix:semicolon
)brace
DECL|function|security_inode_symlink
r_static
r_inline
r_int
id|security_inode_symlink
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_const
r_char
op_star
id|old_name
)paren
(brace
r_return
id|security_ops-&gt;inode_symlink
(paren
id|dir
comma
id|dentry
comma
id|old_name
)paren
suffix:semicolon
)brace
DECL|function|security_inode_post_symlink
r_static
r_inline
r_void
id|security_inode_post_symlink
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_const
r_char
op_star
id|old_name
)paren
(brace
id|security_ops-&gt;inode_post_symlink
(paren
id|dir
comma
id|dentry
comma
id|old_name
)paren
suffix:semicolon
)brace
DECL|function|security_inode_mkdir
r_static
r_inline
r_int
id|security_inode_mkdir
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
)paren
(brace
r_return
id|security_ops-&gt;inode_mkdir
(paren
id|dir
comma
id|dentry
comma
id|mode
)paren
suffix:semicolon
)brace
DECL|function|security_inode_post_mkdir
r_static
r_inline
r_void
id|security_inode_post_mkdir
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
)paren
(brace
id|security_ops-&gt;inode_post_mkdir
(paren
id|dir
comma
id|dentry
comma
id|mode
)paren
suffix:semicolon
)brace
DECL|function|security_inode_rmdir
r_static
r_inline
r_int
id|security_inode_rmdir
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
)paren
(brace
r_return
id|security_ops-&gt;inode_rmdir
(paren
id|dir
comma
id|dentry
)paren
suffix:semicolon
)brace
DECL|function|security_inode_mknod
r_static
r_inline
r_int
id|security_inode_mknod
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
comma
id|dev_t
id|dev
)paren
(brace
r_return
id|security_ops-&gt;inode_mknod
(paren
id|dir
comma
id|dentry
comma
id|mode
comma
id|dev
)paren
suffix:semicolon
)brace
DECL|function|security_inode_post_mknod
r_static
r_inline
r_void
id|security_inode_post_mknod
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
comma
id|dev_t
id|dev
)paren
(brace
id|security_ops-&gt;inode_post_mknod
(paren
id|dir
comma
id|dentry
comma
id|mode
comma
id|dev
)paren
suffix:semicolon
)brace
DECL|function|security_inode_rename
r_static
r_inline
r_int
id|security_inode_rename
(paren
r_struct
id|inode
op_star
id|old_dir
comma
r_struct
id|dentry
op_star
id|old_dentry
comma
r_struct
id|inode
op_star
id|new_dir
comma
r_struct
id|dentry
op_star
id|new_dentry
)paren
(brace
r_return
id|security_ops-&gt;inode_rename
(paren
id|old_dir
comma
id|old_dentry
comma
id|new_dir
comma
id|new_dentry
)paren
suffix:semicolon
)brace
DECL|function|security_inode_post_rename
r_static
r_inline
r_void
id|security_inode_post_rename
(paren
r_struct
id|inode
op_star
id|old_dir
comma
r_struct
id|dentry
op_star
id|old_dentry
comma
r_struct
id|inode
op_star
id|new_dir
comma
r_struct
id|dentry
op_star
id|new_dentry
)paren
(brace
id|security_ops-&gt;inode_post_rename
(paren
id|old_dir
comma
id|old_dentry
comma
id|new_dir
comma
id|new_dentry
)paren
suffix:semicolon
)brace
DECL|function|security_inode_readlink
r_static
r_inline
r_int
id|security_inode_readlink
(paren
r_struct
id|dentry
op_star
id|dentry
)paren
(brace
r_return
id|security_ops-&gt;inode_readlink
(paren
id|dentry
)paren
suffix:semicolon
)brace
DECL|function|security_inode_follow_link
r_static
r_inline
r_int
id|security_inode_follow_link
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_struct
id|nameidata
op_star
id|nd
)paren
(brace
r_return
id|security_ops-&gt;inode_follow_link
(paren
id|dentry
comma
id|nd
)paren
suffix:semicolon
)brace
DECL|function|security_inode_permission
r_static
r_inline
r_int
id|security_inode_permission
(paren
r_struct
id|inode
op_star
id|inode
comma
r_int
id|mask
comma
r_struct
id|nameidata
op_star
id|nd
)paren
(brace
r_return
id|security_ops-&gt;inode_permission
(paren
id|inode
comma
id|mask
comma
id|nd
)paren
suffix:semicolon
)brace
DECL|function|security_inode_setattr
r_static
r_inline
r_int
id|security_inode_setattr
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_struct
id|iattr
op_star
id|attr
)paren
(brace
r_return
id|security_ops-&gt;inode_setattr
(paren
id|dentry
comma
id|attr
)paren
suffix:semicolon
)brace
DECL|function|security_inode_getattr
r_static
r_inline
r_int
id|security_inode_getattr
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_struct
id|dentry
op_star
id|dentry
)paren
(brace
r_return
id|security_ops-&gt;inode_getattr
(paren
id|mnt
comma
id|dentry
)paren
suffix:semicolon
)brace
DECL|function|security_inode_delete
r_static
r_inline
r_void
id|security_inode_delete
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
id|security_ops-&gt;inode_delete
(paren
id|inode
)paren
suffix:semicolon
)brace
DECL|function|security_inode_setxattr
r_static
r_inline
r_int
id|security_inode_setxattr
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_char
op_star
id|name
comma
r_void
op_star
id|value
comma
r_int
id|size
comma
r_int
id|flags
)paren
(brace
r_return
id|security_ops-&gt;inode_setxattr
(paren
id|dentry
comma
id|name
comma
id|value
comma
id|size
comma
id|flags
)paren
suffix:semicolon
)brace
DECL|function|security_inode_post_setxattr
r_static
r_inline
r_void
id|security_inode_post_setxattr
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_char
op_star
id|name
comma
r_void
op_star
id|value
comma
r_int
id|size
comma
r_int
id|flags
)paren
(brace
id|security_ops-&gt;inode_post_setxattr
(paren
id|dentry
comma
id|name
comma
id|value
comma
id|size
comma
id|flags
)paren
suffix:semicolon
)brace
DECL|function|security_inode_getxattr
r_static
r_inline
r_int
id|security_inode_getxattr
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_char
op_star
id|name
)paren
(brace
r_return
id|security_ops-&gt;inode_getxattr
(paren
id|dentry
comma
id|name
)paren
suffix:semicolon
)brace
DECL|function|security_inode_listxattr
r_static
r_inline
r_int
id|security_inode_listxattr
(paren
r_struct
id|dentry
op_star
id|dentry
)paren
(brace
r_return
id|security_ops-&gt;inode_listxattr
(paren
id|dentry
)paren
suffix:semicolon
)brace
DECL|function|security_inode_removexattr
r_static
r_inline
r_int
id|security_inode_removexattr
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_char
op_star
id|name
)paren
(brace
r_return
id|security_ops-&gt;inode_removexattr
(paren
id|dentry
comma
id|name
)paren
suffix:semicolon
)brace
DECL|function|security_inode_getsecurity
r_static
r_inline
r_int
id|security_inode_getsecurity
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_const
r_char
op_star
id|name
comma
r_void
op_star
id|buffer
comma
r_int
id|size
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|inode_getsecurity
c_func
(paren
id|inode
comma
id|name
comma
id|buffer
comma
id|size
)paren
suffix:semicolon
)brace
DECL|function|security_inode_setsecurity
r_static
r_inline
r_int
id|security_inode_setsecurity
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_const
r_char
op_star
id|name
comma
r_const
r_void
op_star
id|value
comma
r_int
id|size
comma
r_int
id|flags
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|inode_setsecurity
c_func
(paren
id|inode
comma
id|name
comma
id|value
comma
id|size
comma
id|flags
)paren
suffix:semicolon
)brace
DECL|function|security_inode_listsecurity
r_static
r_inline
r_int
id|security_inode_listsecurity
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_char
op_star
id|buffer
comma
r_int
id|buffer_size
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|inode_listsecurity
c_func
(paren
id|inode
comma
id|buffer
comma
id|buffer_size
)paren
suffix:semicolon
)brace
DECL|function|security_file_permission
r_static
r_inline
r_int
id|security_file_permission
(paren
r_struct
id|file
op_star
id|file
comma
r_int
id|mask
)paren
(brace
r_return
id|security_ops-&gt;file_permission
(paren
id|file
comma
id|mask
)paren
suffix:semicolon
)brace
DECL|function|security_file_alloc
r_static
r_inline
r_int
id|security_file_alloc
(paren
r_struct
id|file
op_star
id|file
)paren
(brace
r_return
id|security_ops-&gt;file_alloc_security
(paren
id|file
)paren
suffix:semicolon
)brace
DECL|function|security_file_free
r_static
r_inline
r_void
id|security_file_free
(paren
r_struct
id|file
op_star
id|file
)paren
(brace
id|security_ops-&gt;file_free_security
(paren
id|file
)paren
suffix:semicolon
)brace
DECL|function|security_file_ioctl
r_static
r_inline
r_int
id|security_file_ioctl
(paren
r_struct
id|file
op_star
id|file
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
r_return
id|security_ops-&gt;file_ioctl
(paren
id|file
comma
id|cmd
comma
id|arg
)paren
suffix:semicolon
)brace
DECL|function|security_file_mmap
r_static
r_inline
r_int
id|security_file_mmap
(paren
r_struct
id|file
op_star
id|file
comma
r_int
r_int
id|prot
comma
r_int
r_int
id|flags
)paren
(brace
r_return
id|security_ops-&gt;file_mmap
(paren
id|file
comma
id|prot
comma
id|flags
)paren
suffix:semicolon
)brace
DECL|function|security_file_mprotect
r_static
r_inline
r_int
id|security_file_mprotect
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|prot
)paren
(brace
r_return
id|security_ops-&gt;file_mprotect
(paren
id|vma
comma
id|prot
)paren
suffix:semicolon
)brace
DECL|function|security_file_lock
r_static
r_inline
r_int
id|security_file_lock
(paren
r_struct
id|file
op_star
id|file
comma
r_int
r_int
id|cmd
)paren
(brace
r_return
id|security_ops-&gt;file_lock
(paren
id|file
comma
id|cmd
)paren
suffix:semicolon
)brace
DECL|function|security_file_fcntl
r_static
r_inline
r_int
id|security_file_fcntl
(paren
r_struct
id|file
op_star
id|file
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
r_return
id|security_ops-&gt;file_fcntl
(paren
id|file
comma
id|cmd
comma
id|arg
)paren
suffix:semicolon
)brace
DECL|function|security_file_set_fowner
r_static
r_inline
r_int
id|security_file_set_fowner
(paren
r_struct
id|file
op_star
id|file
)paren
(brace
r_return
id|security_ops-&gt;file_set_fowner
(paren
id|file
)paren
suffix:semicolon
)brace
DECL|function|security_file_send_sigiotask
r_static
r_inline
r_int
id|security_file_send_sigiotask
(paren
r_struct
id|task_struct
op_star
id|tsk
comma
r_struct
id|fown_struct
op_star
id|fown
comma
r_int
id|sig
)paren
(brace
r_return
id|security_ops-&gt;file_send_sigiotask
(paren
id|tsk
comma
id|fown
comma
id|sig
)paren
suffix:semicolon
)brace
DECL|function|security_file_receive
r_static
r_inline
r_int
id|security_file_receive
(paren
r_struct
id|file
op_star
id|file
)paren
(brace
r_return
id|security_ops-&gt;file_receive
(paren
id|file
)paren
suffix:semicolon
)brace
DECL|function|security_task_create
r_static
r_inline
r_int
id|security_task_create
(paren
r_int
r_int
id|clone_flags
)paren
(brace
r_return
id|security_ops-&gt;task_create
(paren
id|clone_flags
)paren
suffix:semicolon
)brace
DECL|function|security_task_alloc
r_static
r_inline
r_int
id|security_task_alloc
(paren
r_struct
id|task_struct
op_star
id|p
)paren
(brace
r_return
id|security_ops-&gt;task_alloc_security
(paren
id|p
)paren
suffix:semicolon
)brace
DECL|function|security_task_free
r_static
r_inline
r_void
id|security_task_free
(paren
r_struct
id|task_struct
op_star
id|p
)paren
(brace
id|security_ops-&gt;task_free_security
(paren
id|p
)paren
suffix:semicolon
)brace
DECL|function|security_task_setuid
r_static
r_inline
r_int
id|security_task_setuid
(paren
id|uid_t
id|id0
comma
id|uid_t
id|id1
comma
id|uid_t
id|id2
comma
r_int
id|flags
)paren
(brace
r_return
id|security_ops-&gt;task_setuid
(paren
id|id0
comma
id|id1
comma
id|id2
comma
id|flags
)paren
suffix:semicolon
)brace
DECL|function|security_task_post_setuid
r_static
r_inline
r_int
id|security_task_post_setuid
(paren
id|uid_t
id|old_ruid
comma
id|uid_t
id|old_euid
comma
id|uid_t
id|old_suid
comma
r_int
id|flags
)paren
(brace
r_return
id|security_ops-&gt;task_post_setuid
(paren
id|old_ruid
comma
id|old_euid
comma
id|old_suid
comma
id|flags
)paren
suffix:semicolon
)brace
DECL|function|security_task_setgid
r_static
r_inline
r_int
id|security_task_setgid
(paren
id|gid_t
id|id0
comma
id|gid_t
id|id1
comma
id|gid_t
id|id2
comma
r_int
id|flags
)paren
(brace
r_return
id|security_ops-&gt;task_setgid
(paren
id|id0
comma
id|id1
comma
id|id2
comma
id|flags
)paren
suffix:semicolon
)brace
DECL|function|security_task_setpgid
r_static
r_inline
r_int
id|security_task_setpgid
(paren
r_struct
id|task_struct
op_star
id|p
comma
id|pid_t
id|pgid
)paren
(brace
r_return
id|security_ops-&gt;task_setpgid
(paren
id|p
comma
id|pgid
)paren
suffix:semicolon
)brace
DECL|function|security_task_getpgid
r_static
r_inline
r_int
id|security_task_getpgid
(paren
r_struct
id|task_struct
op_star
id|p
)paren
(brace
r_return
id|security_ops-&gt;task_getpgid
(paren
id|p
)paren
suffix:semicolon
)brace
DECL|function|security_task_getsid
r_static
r_inline
r_int
id|security_task_getsid
(paren
r_struct
id|task_struct
op_star
id|p
)paren
(brace
r_return
id|security_ops-&gt;task_getsid
(paren
id|p
)paren
suffix:semicolon
)brace
DECL|function|security_task_setgroups
r_static
r_inline
r_int
id|security_task_setgroups
(paren
r_struct
id|group_info
op_star
id|group_info
)paren
(brace
r_return
id|security_ops-&gt;task_setgroups
(paren
id|group_info
)paren
suffix:semicolon
)brace
DECL|function|security_task_setnice
r_static
r_inline
r_int
id|security_task_setnice
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_int
id|nice
)paren
(brace
r_return
id|security_ops-&gt;task_setnice
(paren
id|p
comma
id|nice
)paren
suffix:semicolon
)brace
DECL|function|security_task_setrlimit
r_static
r_inline
r_int
id|security_task_setrlimit
(paren
r_int
r_int
id|resource
comma
r_struct
id|rlimit
op_star
id|new_rlim
)paren
(brace
r_return
id|security_ops-&gt;task_setrlimit
(paren
id|resource
comma
id|new_rlim
)paren
suffix:semicolon
)brace
DECL|function|security_task_setscheduler
r_static
r_inline
r_int
id|security_task_setscheduler
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_int
id|policy
comma
r_struct
id|sched_param
op_star
id|lp
)paren
(brace
r_return
id|security_ops-&gt;task_setscheduler
(paren
id|p
comma
id|policy
comma
id|lp
)paren
suffix:semicolon
)brace
DECL|function|security_task_getscheduler
r_static
r_inline
r_int
id|security_task_getscheduler
(paren
r_struct
id|task_struct
op_star
id|p
)paren
(brace
r_return
id|security_ops-&gt;task_getscheduler
(paren
id|p
)paren
suffix:semicolon
)brace
DECL|function|security_task_kill
r_static
r_inline
r_int
id|security_task_kill
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_struct
id|siginfo
op_star
id|info
comma
r_int
id|sig
)paren
(brace
r_return
id|security_ops-&gt;task_kill
(paren
id|p
comma
id|info
comma
id|sig
)paren
suffix:semicolon
)brace
DECL|function|security_task_wait
r_static
r_inline
r_int
id|security_task_wait
(paren
r_struct
id|task_struct
op_star
id|p
)paren
(brace
r_return
id|security_ops-&gt;task_wait
(paren
id|p
)paren
suffix:semicolon
)brace
DECL|function|security_task_prctl
r_static
r_inline
r_int
id|security_task_prctl
(paren
r_int
id|option
comma
r_int
r_int
id|arg2
comma
r_int
r_int
id|arg3
comma
r_int
r_int
id|arg4
comma
r_int
r_int
id|arg5
)paren
(brace
r_return
id|security_ops-&gt;task_prctl
(paren
id|option
comma
id|arg2
comma
id|arg3
comma
id|arg4
comma
id|arg5
)paren
suffix:semicolon
)brace
DECL|function|security_task_reparent_to_init
r_static
r_inline
r_void
id|security_task_reparent_to_init
(paren
r_struct
id|task_struct
op_star
id|p
)paren
(brace
id|security_ops-&gt;task_reparent_to_init
(paren
id|p
)paren
suffix:semicolon
)brace
DECL|function|security_task_to_inode
r_static
r_inline
r_void
id|security_task_to_inode
c_func
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_struct
id|inode
op_star
id|inode
)paren
(brace
id|security_ops
op_member_access_from_pointer
id|task_to_inode
c_func
(paren
id|p
comma
id|inode
)paren
suffix:semicolon
)brace
DECL|function|security_ipc_permission
r_static
r_inline
r_int
id|security_ipc_permission
(paren
r_struct
id|kern_ipc_perm
op_star
id|ipcp
comma
r_int
id|flag
)paren
(brace
r_return
id|security_ops-&gt;ipc_permission
(paren
id|ipcp
comma
id|flag
)paren
suffix:semicolon
)brace
DECL|function|security_msg_msg_alloc
r_static
r_inline
r_int
id|security_msg_msg_alloc
(paren
r_struct
id|msg_msg
op_star
id|msg
)paren
(brace
r_return
id|security_ops-&gt;msg_msg_alloc_security
(paren
id|msg
)paren
suffix:semicolon
)brace
DECL|function|security_msg_msg_free
r_static
r_inline
r_void
id|security_msg_msg_free
(paren
r_struct
id|msg_msg
op_star
id|msg
)paren
(brace
id|security_ops
op_member_access_from_pointer
id|msg_msg_free_security
c_func
(paren
id|msg
)paren
suffix:semicolon
)brace
DECL|function|security_msg_queue_alloc
r_static
r_inline
r_int
id|security_msg_queue_alloc
(paren
r_struct
id|msg_queue
op_star
id|msq
)paren
(brace
r_return
id|security_ops-&gt;msg_queue_alloc_security
(paren
id|msq
)paren
suffix:semicolon
)brace
DECL|function|security_msg_queue_free
r_static
r_inline
r_void
id|security_msg_queue_free
(paren
r_struct
id|msg_queue
op_star
id|msq
)paren
(brace
id|security_ops-&gt;msg_queue_free_security
(paren
id|msq
)paren
suffix:semicolon
)brace
DECL|function|security_msg_queue_associate
r_static
r_inline
r_int
id|security_msg_queue_associate
(paren
r_struct
id|msg_queue
op_star
id|msq
comma
r_int
id|msqflg
)paren
(brace
r_return
id|security_ops-&gt;msg_queue_associate
(paren
id|msq
comma
id|msqflg
)paren
suffix:semicolon
)brace
DECL|function|security_msg_queue_msgctl
r_static
r_inline
r_int
id|security_msg_queue_msgctl
(paren
r_struct
id|msg_queue
op_star
id|msq
comma
r_int
id|cmd
)paren
(brace
r_return
id|security_ops-&gt;msg_queue_msgctl
(paren
id|msq
comma
id|cmd
)paren
suffix:semicolon
)brace
DECL|function|security_msg_queue_msgsnd
r_static
r_inline
r_int
id|security_msg_queue_msgsnd
(paren
r_struct
id|msg_queue
op_star
id|msq
comma
r_struct
id|msg_msg
op_star
id|msg
comma
r_int
id|msqflg
)paren
(brace
r_return
id|security_ops-&gt;msg_queue_msgsnd
(paren
id|msq
comma
id|msg
comma
id|msqflg
)paren
suffix:semicolon
)brace
DECL|function|security_msg_queue_msgrcv
r_static
r_inline
r_int
id|security_msg_queue_msgrcv
(paren
r_struct
id|msg_queue
op_star
id|msq
comma
r_struct
id|msg_msg
op_star
id|msg
comma
r_struct
id|task_struct
op_star
id|target
comma
r_int
id|type
comma
r_int
id|mode
)paren
(brace
r_return
id|security_ops-&gt;msg_queue_msgrcv
(paren
id|msq
comma
id|msg
comma
id|target
comma
id|type
comma
id|mode
)paren
suffix:semicolon
)brace
DECL|function|security_shm_alloc
r_static
r_inline
r_int
id|security_shm_alloc
(paren
r_struct
id|shmid_kernel
op_star
id|shp
)paren
(brace
r_return
id|security_ops-&gt;shm_alloc_security
(paren
id|shp
)paren
suffix:semicolon
)brace
DECL|function|security_shm_free
r_static
r_inline
r_void
id|security_shm_free
(paren
r_struct
id|shmid_kernel
op_star
id|shp
)paren
(brace
id|security_ops-&gt;shm_free_security
(paren
id|shp
)paren
suffix:semicolon
)brace
DECL|function|security_shm_associate
r_static
r_inline
r_int
id|security_shm_associate
(paren
r_struct
id|shmid_kernel
op_star
id|shp
comma
r_int
id|shmflg
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|shm_associate
c_func
(paren
id|shp
comma
id|shmflg
)paren
suffix:semicolon
)brace
DECL|function|security_shm_shmctl
r_static
r_inline
r_int
id|security_shm_shmctl
(paren
r_struct
id|shmid_kernel
op_star
id|shp
comma
r_int
id|cmd
)paren
(brace
r_return
id|security_ops-&gt;shm_shmctl
(paren
id|shp
comma
id|cmd
)paren
suffix:semicolon
)brace
DECL|function|security_shm_shmat
r_static
r_inline
r_int
id|security_shm_shmat
(paren
r_struct
id|shmid_kernel
op_star
id|shp
comma
r_char
id|__user
op_star
id|shmaddr
comma
r_int
id|shmflg
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|shm_shmat
c_func
(paren
id|shp
comma
id|shmaddr
comma
id|shmflg
)paren
suffix:semicolon
)brace
DECL|function|security_sem_alloc
r_static
r_inline
r_int
id|security_sem_alloc
(paren
r_struct
id|sem_array
op_star
id|sma
)paren
(brace
r_return
id|security_ops-&gt;sem_alloc_security
(paren
id|sma
)paren
suffix:semicolon
)brace
DECL|function|security_sem_free
r_static
r_inline
r_void
id|security_sem_free
(paren
r_struct
id|sem_array
op_star
id|sma
)paren
(brace
id|security_ops-&gt;sem_free_security
(paren
id|sma
)paren
suffix:semicolon
)brace
DECL|function|security_sem_associate
r_static
r_inline
r_int
id|security_sem_associate
(paren
r_struct
id|sem_array
op_star
id|sma
comma
r_int
id|semflg
)paren
(brace
r_return
id|security_ops-&gt;sem_associate
(paren
id|sma
comma
id|semflg
)paren
suffix:semicolon
)brace
DECL|function|security_sem_semctl
r_static
r_inline
r_int
id|security_sem_semctl
(paren
r_struct
id|sem_array
op_star
id|sma
comma
r_int
id|cmd
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|sem_semctl
c_func
(paren
id|sma
comma
id|cmd
)paren
suffix:semicolon
)brace
DECL|function|security_sem_semop
r_static
r_inline
r_int
id|security_sem_semop
(paren
r_struct
id|sem_array
op_star
id|sma
comma
r_struct
id|sembuf
op_star
id|sops
comma
r_int
id|nsops
comma
r_int
id|alter
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|sem_semop
c_func
(paren
id|sma
comma
id|sops
comma
id|nsops
comma
id|alter
)paren
suffix:semicolon
)brace
DECL|function|security_d_instantiate
r_static
r_inline
r_void
id|security_d_instantiate
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_struct
id|inode
op_star
id|inode
)paren
(brace
id|security_ops-&gt;d_instantiate
(paren
id|dentry
comma
id|inode
)paren
suffix:semicolon
)brace
DECL|function|security_getprocattr
r_static
r_inline
r_int
id|security_getprocattr
c_func
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_char
op_star
id|name
comma
r_void
op_star
id|value
comma
r_int
id|size
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|getprocattr
c_func
(paren
id|p
comma
id|name
comma
id|value
comma
id|size
)paren
suffix:semicolon
)brace
DECL|function|security_setprocattr
r_static
r_inline
r_int
id|security_setprocattr
c_func
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_char
op_star
id|name
comma
r_void
op_star
id|value
comma
r_int
id|size
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|setprocattr
c_func
(paren
id|p
comma
id|name
comma
id|value
comma
id|size
)paren
suffix:semicolon
)brace
DECL|function|security_netlink_send
r_static
r_inline
r_int
id|security_netlink_send
c_func
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|netlink_send
c_func
(paren
id|sk
comma
id|skb
)paren
suffix:semicolon
)brace
DECL|function|security_netlink_recv
r_static
r_inline
r_int
id|security_netlink_recv
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|netlink_recv
c_func
(paren
id|skb
)paren
suffix:semicolon
)brace
multiline_comment|/* prototypes */
r_extern
r_int
id|security_init
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|register_security
(paren
r_struct
id|security_operations
op_star
id|ops
)paren
suffix:semicolon
r_extern
r_int
id|unregister_security
(paren
r_struct
id|security_operations
op_star
id|ops
)paren
suffix:semicolon
r_extern
r_int
id|mod_reg_security
(paren
r_const
r_char
op_star
id|name
comma
r_struct
id|security_operations
op_star
id|ops
)paren
suffix:semicolon
r_extern
r_int
id|mod_unreg_security
(paren
r_const
r_char
op_star
id|name
comma
r_struct
id|security_operations
op_star
id|ops
)paren
suffix:semicolon
macro_line|#else /* CONFIG_SECURITY */
multiline_comment|/*&n; * This is the default capabilities functionality.  Most of these functions&n; * are just stubbed out, but a few must call the proper capable code.&n; */
DECL|function|security_init
r_static
r_inline
r_int
id|security_init
c_func
(paren
r_void
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_ptrace
r_static
r_inline
r_int
id|security_ptrace
(paren
r_struct
id|task_struct
op_star
id|parent
comma
r_struct
id|task_struct
op_star
id|child
)paren
(brace
r_return
id|cap_ptrace
(paren
id|parent
comma
id|child
)paren
suffix:semicolon
)brace
DECL|function|security_capget
r_static
r_inline
r_int
id|security_capget
(paren
r_struct
id|task_struct
op_star
id|target
comma
id|kernel_cap_t
op_star
id|effective
comma
id|kernel_cap_t
op_star
id|inheritable
comma
id|kernel_cap_t
op_star
id|permitted
)paren
(brace
r_return
id|cap_capget
(paren
id|target
comma
id|effective
comma
id|inheritable
comma
id|permitted
)paren
suffix:semicolon
)brace
DECL|function|security_capset_check
r_static
r_inline
r_int
id|security_capset_check
(paren
r_struct
id|task_struct
op_star
id|target
comma
id|kernel_cap_t
op_star
id|effective
comma
id|kernel_cap_t
op_star
id|inheritable
comma
id|kernel_cap_t
op_star
id|permitted
)paren
(brace
r_return
id|cap_capset_check
(paren
id|target
comma
id|effective
comma
id|inheritable
comma
id|permitted
)paren
suffix:semicolon
)brace
DECL|function|security_capset_set
r_static
r_inline
r_void
id|security_capset_set
(paren
r_struct
id|task_struct
op_star
id|target
comma
id|kernel_cap_t
op_star
id|effective
comma
id|kernel_cap_t
op_star
id|inheritable
comma
id|kernel_cap_t
op_star
id|permitted
)paren
(brace
id|cap_capset_set
(paren
id|target
comma
id|effective
comma
id|inheritable
comma
id|permitted
)paren
suffix:semicolon
)brace
DECL|function|security_acct
r_static
r_inline
r_int
id|security_acct
(paren
r_struct
id|file
op_star
id|file
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_sysctl
r_static
r_inline
r_int
id|security_sysctl
c_func
(paren
r_struct
id|ctl_table
op_star
id|table
comma
r_int
id|op
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_quotactl
r_static
r_inline
r_int
id|security_quotactl
(paren
r_int
id|cmds
comma
r_int
id|type
comma
r_int
id|id
comma
r_struct
id|super_block
op_star
id|sb
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_quota_on
r_static
r_inline
r_int
id|security_quota_on
(paren
r_struct
id|dentry
op_star
id|dentry
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_syslog
r_static
r_inline
r_int
id|security_syslog
c_func
(paren
r_int
id|type
)paren
(brace
r_return
id|cap_syslog
c_func
(paren
id|type
)paren
suffix:semicolon
)brace
DECL|function|security_settime
r_static
r_inline
r_int
id|security_settime
c_func
(paren
r_struct
id|timespec
op_star
id|ts
comma
r_struct
id|timezone
op_star
id|tz
)paren
(brace
r_return
id|cap_settime
c_func
(paren
id|ts
comma
id|tz
)paren
suffix:semicolon
)brace
DECL|function|security_vm_enough_memory
r_static
r_inline
r_int
id|security_vm_enough_memory
c_func
(paren
r_int
id|pages
)paren
(brace
r_return
id|cap_vm_enough_memory
c_func
(paren
id|pages
)paren
suffix:semicolon
)brace
DECL|function|security_bprm_alloc
r_static
r_inline
r_int
id|security_bprm_alloc
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_bprm_free
r_static
r_inline
r_void
id|security_bprm_free
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
(brace
)brace
DECL|function|security_bprm_apply_creds
r_static
r_inline
r_void
id|security_bprm_apply_creds
(paren
r_struct
id|linux_binprm
op_star
id|bprm
comma
r_int
id|unsafe
)paren
(brace
id|cap_bprm_apply_creds
(paren
id|bprm
comma
id|unsafe
)paren
suffix:semicolon
)brace
DECL|function|security_bprm_set
r_static
r_inline
r_int
id|security_bprm_set
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
(brace
r_return
id|cap_bprm_set_security
(paren
id|bprm
)paren
suffix:semicolon
)brace
DECL|function|security_bprm_check
r_static
r_inline
r_int
id|security_bprm_check
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_bprm_secureexec
r_static
r_inline
r_int
id|security_bprm_secureexec
(paren
r_struct
id|linux_binprm
op_star
id|bprm
)paren
(brace
r_return
id|cap_bprm_secureexec
c_func
(paren
id|bprm
)paren
suffix:semicolon
)brace
DECL|function|security_sb_alloc
r_static
r_inline
r_int
id|security_sb_alloc
(paren
r_struct
id|super_block
op_star
id|sb
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_sb_free
r_static
r_inline
r_void
id|security_sb_free
(paren
r_struct
id|super_block
op_star
id|sb
)paren
(brace
)brace
DECL|function|security_sb_copy_data
r_static
r_inline
r_int
id|security_sb_copy_data
(paren
r_struct
id|file_system_type
op_star
id|type
comma
r_void
op_star
id|orig
comma
r_void
op_star
id|copy
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_sb_kern_mount
r_static
r_inline
r_int
id|security_sb_kern_mount
(paren
r_struct
id|super_block
op_star
id|sb
comma
r_void
op_star
id|data
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_sb_statfs
r_static
r_inline
r_int
id|security_sb_statfs
(paren
r_struct
id|super_block
op_star
id|sb
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_sb_mount
r_static
r_inline
r_int
id|security_sb_mount
(paren
r_char
op_star
id|dev_name
comma
r_struct
id|nameidata
op_star
id|nd
comma
r_char
op_star
id|type
comma
r_int
r_int
id|flags
comma
r_void
op_star
id|data
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_sb_check_sb
r_static
r_inline
r_int
id|security_sb_check_sb
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_struct
id|nameidata
op_star
id|nd
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_sb_umount
r_static
r_inline
r_int
id|security_sb_umount
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_int
id|flags
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_sb_umount_close
r_static
r_inline
r_void
id|security_sb_umount_close
(paren
r_struct
id|vfsmount
op_star
id|mnt
)paren
(brace
)brace
DECL|function|security_sb_umount_busy
r_static
r_inline
r_void
id|security_sb_umount_busy
(paren
r_struct
id|vfsmount
op_star
id|mnt
)paren
(brace
)brace
DECL|function|security_sb_post_remount
r_static
r_inline
r_void
id|security_sb_post_remount
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_int
r_int
id|flags
comma
r_void
op_star
id|data
)paren
(brace
)brace
DECL|function|security_sb_post_mountroot
r_static
r_inline
r_void
id|security_sb_post_mountroot
(paren
r_void
)paren
(brace
)brace
DECL|function|security_sb_post_addmount
r_static
r_inline
r_void
id|security_sb_post_addmount
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_struct
id|nameidata
op_star
id|mountpoint_nd
)paren
(brace
)brace
DECL|function|security_sb_pivotroot
r_static
r_inline
r_int
id|security_sb_pivotroot
(paren
r_struct
id|nameidata
op_star
id|old_nd
comma
r_struct
id|nameidata
op_star
id|new_nd
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_sb_post_pivotroot
r_static
r_inline
r_void
id|security_sb_post_pivotroot
(paren
r_struct
id|nameidata
op_star
id|old_nd
comma
r_struct
id|nameidata
op_star
id|new_nd
)paren
(brace
)brace
DECL|function|security_inode_alloc
r_static
r_inline
r_int
id|security_inode_alloc
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_inode_free
r_static
r_inline
r_void
id|security_inode_free
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
)brace
DECL|function|security_inode_create
r_static
r_inline
r_int
id|security_inode_create
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_inode_post_create
r_static
r_inline
r_void
id|security_inode_post_create
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
)paren
(brace
)brace
DECL|function|security_inode_link
r_static
r_inline
r_int
id|security_inode_link
(paren
r_struct
id|dentry
op_star
id|old_dentry
comma
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|new_dentry
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_inode_post_link
r_static
r_inline
r_void
id|security_inode_post_link
(paren
r_struct
id|dentry
op_star
id|old_dentry
comma
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|new_dentry
)paren
(brace
)brace
DECL|function|security_inode_unlink
r_static
r_inline
r_int
id|security_inode_unlink
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_inode_symlink
r_static
r_inline
r_int
id|security_inode_symlink
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_const
r_char
op_star
id|old_name
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_inode_post_symlink
r_static
r_inline
r_void
id|security_inode_post_symlink
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_const
r_char
op_star
id|old_name
)paren
(brace
)brace
DECL|function|security_inode_mkdir
r_static
r_inline
r_int
id|security_inode_mkdir
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_inode_post_mkdir
r_static
r_inline
r_void
id|security_inode_post_mkdir
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
)paren
(brace
)brace
DECL|function|security_inode_rmdir
r_static
r_inline
r_int
id|security_inode_rmdir
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_inode_mknod
r_static
r_inline
r_int
id|security_inode_mknod
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
comma
id|dev_t
id|dev
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_inode_post_mknod
r_static
r_inline
r_void
id|security_inode_post_mknod
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
comma
r_int
id|mode
comma
id|dev_t
id|dev
)paren
(brace
)brace
DECL|function|security_inode_rename
r_static
r_inline
r_int
id|security_inode_rename
(paren
r_struct
id|inode
op_star
id|old_dir
comma
r_struct
id|dentry
op_star
id|old_dentry
comma
r_struct
id|inode
op_star
id|new_dir
comma
r_struct
id|dentry
op_star
id|new_dentry
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_inode_post_rename
r_static
r_inline
r_void
id|security_inode_post_rename
(paren
r_struct
id|inode
op_star
id|old_dir
comma
r_struct
id|dentry
op_star
id|old_dentry
comma
r_struct
id|inode
op_star
id|new_dir
comma
r_struct
id|dentry
op_star
id|new_dentry
)paren
(brace
)brace
DECL|function|security_inode_readlink
r_static
r_inline
r_int
id|security_inode_readlink
(paren
r_struct
id|dentry
op_star
id|dentry
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_inode_follow_link
r_static
r_inline
r_int
id|security_inode_follow_link
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_struct
id|nameidata
op_star
id|nd
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_inode_permission
r_static
r_inline
r_int
id|security_inode_permission
(paren
r_struct
id|inode
op_star
id|inode
comma
r_int
id|mask
comma
r_struct
id|nameidata
op_star
id|nd
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_inode_setattr
r_static
r_inline
r_int
id|security_inode_setattr
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_struct
id|iattr
op_star
id|attr
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_inode_getattr
r_static
r_inline
r_int
id|security_inode_getattr
(paren
r_struct
id|vfsmount
op_star
id|mnt
comma
r_struct
id|dentry
op_star
id|dentry
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_inode_delete
r_static
r_inline
r_void
id|security_inode_delete
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
)brace
DECL|function|security_inode_setxattr
r_static
r_inline
r_int
id|security_inode_setxattr
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_char
op_star
id|name
comma
r_void
op_star
id|value
comma
r_int
id|size
comma
r_int
id|flags
)paren
(brace
r_return
id|cap_inode_setxattr
c_func
(paren
id|dentry
comma
id|name
comma
id|value
comma
id|size
comma
id|flags
)paren
suffix:semicolon
)brace
DECL|function|security_inode_post_setxattr
r_static
r_inline
r_void
id|security_inode_post_setxattr
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_char
op_star
id|name
comma
r_void
op_star
id|value
comma
r_int
id|size
comma
r_int
id|flags
)paren
(brace
)brace
DECL|function|security_inode_getxattr
r_static
r_inline
r_int
id|security_inode_getxattr
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_char
op_star
id|name
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_inode_listxattr
r_static
r_inline
r_int
id|security_inode_listxattr
(paren
r_struct
id|dentry
op_star
id|dentry
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_inode_removexattr
r_static
r_inline
r_int
id|security_inode_removexattr
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_char
op_star
id|name
)paren
(brace
r_return
id|cap_inode_removexattr
c_func
(paren
id|dentry
comma
id|name
)paren
suffix:semicolon
)brace
DECL|function|security_inode_getsecurity
r_static
r_inline
r_int
id|security_inode_getsecurity
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_const
r_char
op_star
id|name
comma
r_void
op_star
id|buffer
comma
r_int
id|size
)paren
(brace
r_return
op_minus
id|EOPNOTSUPP
suffix:semicolon
)brace
DECL|function|security_inode_setsecurity
r_static
r_inline
r_int
id|security_inode_setsecurity
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_const
r_char
op_star
id|name
comma
r_const
r_void
op_star
id|value
comma
r_int
id|size
comma
r_int
id|flags
)paren
(brace
r_return
op_minus
id|EOPNOTSUPP
suffix:semicolon
)brace
DECL|function|security_inode_listsecurity
r_static
r_inline
r_int
id|security_inode_listsecurity
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_char
op_star
id|buffer
comma
r_int
id|buffer_size
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_file_permission
r_static
r_inline
r_int
id|security_file_permission
(paren
r_struct
id|file
op_star
id|file
comma
r_int
id|mask
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_file_alloc
r_static
r_inline
r_int
id|security_file_alloc
(paren
r_struct
id|file
op_star
id|file
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_file_free
r_static
r_inline
r_void
id|security_file_free
(paren
r_struct
id|file
op_star
id|file
)paren
(brace
)brace
DECL|function|security_file_ioctl
r_static
r_inline
r_int
id|security_file_ioctl
(paren
r_struct
id|file
op_star
id|file
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_file_mmap
r_static
r_inline
r_int
id|security_file_mmap
(paren
r_struct
id|file
op_star
id|file
comma
r_int
r_int
id|prot
comma
r_int
r_int
id|flags
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_file_mprotect
r_static
r_inline
r_int
id|security_file_mprotect
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|prot
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_file_lock
r_static
r_inline
r_int
id|security_file_lock
(paren
r_struct
id|file
op_star
id|file
comma
r_int
r_int
id|cmd
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_file_fcntl
r_static
r_inline
r_int
id|security_file_fcntl
(paren
r_struct
id|file
op_star
id|file
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_file_set_fowner
r_static
r_inline
r_int
id|security_file_set_fowner
(paren
r_struct
id|file
op_star
id|file
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_file_send_sigiotask
r_static
r_inline
r_int
id|security_file_send_sigiotask
(paren
r_struct
id|task_struct
op_star
id|tsk
comma
r_struct
id|fown_struct
op_star
id|fown
comma
r_int
id|sig
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_file_receive
r_static
r_inline
r_int
id|security_file_receive
(paren
r_struct
id|file
op_star
id|file
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_task_create
r_static
r_inline
r_int
id|security_task_create
(paren
r_int
r_int
id|clone_flags
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_task_alloc
r_static
r_inline
r_int
id|security_task_alloc
(paren
r_struct
id|task_struct
op_star
id|p
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_task_free
r_static
r_inline
r_void
id|security_task_free
(paren
r_struct
id|task_struct
op_star
id|p
)paren
(brace
)brace
DECL|function|security_task_setuid
r_static
r_inline
r_int
id|security_task_setuid
(paren
id|uid_t
id|id0
comma
id|uid_t
id|id1
comma
id|uid_t
id|id2
comma
r_int
id|flags
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_task_post_setuid
r_static
r_inline
r_int
id|security_task_post_setuid
(paren
id|uid_t
id|old_ruid
comma
id|uid_t
id|old_euid
comma
id|uid_t
id|old_suid
comma
r_int
id|flags
)paren
(brace
r_return
id|cap_task_post_setuid
(paren
id|old_ruid
comma
id|old_euid
comma
id|old_suid
comma
id|flags
)paren
suffix:semicolon
)brace
DECL|function|security_task_setgid
r_static
r_inline
r_int
id|security_task_setgid
(paren
id|gid_t
id|id0
comma
id|gid_t
id|id1
comma
id|gid_t
id|id2
comma
r_int
id|flags
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_task_setpgid
r_static
r_inline
r_int
id|security_task_setpgid
(paren
r_struct
id|task_struct
op_star
id|p
comma
id|pid_t
id|pgid
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_task_getpgid
r_static
r_inline
r_int
id|security_task_getpgid
(paren
r_struct
id|task_struct
op_star
id|p
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_task_getsid
r_static
r_inline
r_int
id|security_task_getsid
(paren
r_struct
id|task_struct
op_star
id|p
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_task_setgroups
r_static
r_inline
r_int
id|security_task_setgroups
(paren
r_struct
id|group_info
op_star
id|group_info
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_task_setnice
r_static
r_inline
r_int
id|security_task_setnice
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_int
id|nice
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_task_setrlimit
r_static
r_inline
r_int
id|security_task_setrlimit
(paren
r_int
r_int
id|resource
comma
r_struct
id|rlimit
op_star
id|new_rlim
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_task_setscheduler
r_static
r_inline
r_int
id|security_task_setscheduler
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_int
id|policy
comma
r_struct
id|sched_param
op_star
id|lp
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_task_getscheduler
r_static
r_inline
r_int
id|security_task_getscheduler
(paren
r_struct
id|task_struct
op_star
id|p
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_task_kill
r_static
r_inline
r_int
id|security_task_kill
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_struct
id|siginfo
op_star
id|info
comma
r_int
id|sig
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_task_wait
r_static
r_inline
r_int
id|security_task_wait
(paren
r_struct
id|task_struct
op_star
id|p
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_task_prctl
r_static
r_inline
r_int
id|security_task_prctl
(paren
r_int
id|option
comma
r_int
r_int
id|arg2
comma
r_int
r_int
id|arg3
comma
r_int
r_int
id|arg4
comma
r_int
r_int
id|arg5
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_task_reparent_to_init
r_static
r_inline
r_void
id|security_task_reparent_to_init
(paren
r_struct
id|task_struct
op_star
id|p
)paren
(brace
id|cap_task_reparent_to_init
(paren
id|p
)paren
suffix:semicolon
)brace
DECL|function|security_task_to_inode
r_static
r_inline
r_void
id|security_task_to_inode
c_func
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_struct
id|inode
op_star
id|inode
)paren
(brace
)brace
DECL|function|security_ipc_permission
r_static
r_inline
r_int
id|security_ipc_permission
(paren
r_struct
id|kern_ipc_perm
op_star
id|ipcp
comma
r_int
id|flag
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_msg_msg_alloc
r_static
r_inline
r_int
id|security_msg_msg_alloc
(paren
r_struct
id|msg_msg
op_star
id|msg
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_msg_msg_free
r_static
r_inline
r_void
id|security_msg_msg_free
(paren
r_struct
id|msg_msg
op_star
id|msg
)paren
(brace
)brace
DECL|function|security_msg_queue_alloc
r_static
r_inline
r_int
id|security_msg_queue_alloc
(paren
r_struct
id|msg_queue
op_star
id|msq
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_msg_queue_free
r_static
r_inline
r_void
id|security_msg_queue_free
(paren
r_struct
id|msg_queue
op_star
id|msq
)paren
(brace
)brace
DECL|function|security_msg_queue_associate
r_static
r_inline
r_int
id|security_msg_queue_associate
(paren
r_struct
id|msg_queue
op_star
id|msq
comma
r_int
id|msqflg
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_msg_queue_msgctl
r_static
r_inline
r_int
id|security_msg_queue_msgctl
(paren
r_struct
id|msg_queue
op_star
id|msq
comma
r_int
id|cmd
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_msg_queue_msgsnd
r_static
r_inline
r_int
id|security_msg_queue_msgsnd
(paren
r_struct
id|msg_queue
op_star
id|msq
comma
r_struct
id|msg_msg
op_star
id|msg
comma
r_int
id|msqflg
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_msg_queue_msgrcv
r_static
r_inline
r_int
id|security_msg_queue_msgrcv
(paren
r_struct
id|msg_queue
op_star
id|msq
comma
r_struct
id|msg_msg
op_star
id|msg
comma
r_struct
id|task_struct
op_star
id|target
comma
r_int
id|type
comma
r_int
id|mode
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_shm_alloc
r_static
r_inline
r_int
id|security_shm_alloc
(paren
r_struct
id|shmid_kernel
op_star
id|shp
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_shm_free
r_static
r_inline
r_void
id|security_shm_free
(paren
r_struct
id|shmid_kernel
op_star
id|shp
)paren
(brace
)brace
DECL|function|security_shm_associate
r_static
r_inline
r_int
id|security_shm_associate
(paren
r_struct
id|shmid_kernel
op_star
id|shp
comma
r_int
id|shmflg
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_shm_shmctl
r_static
r_inline
r_int
id|security_shm_shmctl
(paren
r_struct
id|shmid_kernel
op_star
id|shp
comma
r_int
id|cmd
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_shm_shmat
r_static
r_inline
r_int
id|security_shm_shmat
(paren
r_struct
id|shmid_kernel
op_star
id|shp
comma
r_char
id|__user
op_star
id|shmaddr
comma
r_int
id|shmflg
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_sem_alloc
r_static
r_inline
r_int
id|security_sem_alloc
(paren
r_struct
id|sem_array
op_star
id|sma
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_sem_free
r_static
r_inline
r_void
id|security_sem_free
(paren
r_struct
id|sem_array
op_star
id|sma
)paren
(brace
)brace
DECL|function|security_sem_associate
r_static
r_inline
r_int
id|security_sem_associate
(paren
r_struct
id|sem_array
op_star
id|sma
comma
r_int
id|semflg
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_sem_semctl
r_static
r_inline
r_int
id|security_sem_semctl
(paren
r_struct
id|sem_array
op_star
id|sma
comma
r_int
id|cmd
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_sem_semop
r_static
r_inline
r_int
id|security_sem_semop
(paren
r_struct
id|sem_array
op_star
id|sma
comma
r_struct
id|sembuf
op_star
id|sops
comma
r_int
id|nsops
comma
r_int
id|alter
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_d_instantiate
r_static
r_inline
r_void
id|security_d_instantiate
(paren
r_struct
id|dentry
op_star
id|dentry
comma
r_struct
id|inode
op_star
id|inode
)paren
(brace
)brace
DECL|function|security_getprocattr
r_static
r_inline
r_int
id|security_getprocattr
c_func
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_char
op_star
id|name
comma
r_void
op_star
id|value
comma
r_int
id|size
)paren
(brace
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
DECL|function|security_setprocattr
r_static
r_inline
r_int
id|security_setprocattr
c_func
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_char
op_star
id|name
comma
r_void
op_star
id|value
comma
r_int
id|size
)paren
(brace
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
DECL|function|security_netlink_send
r_static
r_inline
r_int
id|security_netlink_send
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
(brace
r_return
id|cap_netlink_send
(paren
id|sk
comma
id|skb
)paren
suffix:semicolon
)brace
DECL|function|security_netlink_recv
r_static
r_inline
r_int
id|security_netlink_recv
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
(brace
r_return
id|cap_netlink_recv
(paren
id|skb
)paren
suffix:semicolon
)brace
macro_line|#endif&t;/* CONFIG_SECURITY */
macro_line|#ifdef CONFIG_SECURITY_NETWORK
DECL|function|security_unix_stream_connect
r_static
r_inline
r_int
id|security_unix_stream_connect
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|socket
op_star
id|other
comma
r_struct
id|sock
op_star
id|newsk
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|unix_stream_connect
c_func
(paren
id|sock
comma
id|other
comma
id|newsk
)paren
suffix:semicolon
)brace
DECL|function|security_unix_may_send
r_static
r_inline
r_int
id|security_unix_may_send
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|socket
op_star
id|other
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|unix_may_send
c_func
(paren
id|sock
comma
id|other
)paren
suffix:semicolon
)brace
DECL|function|security_socket_create
r_static
r_inline
r_int
id|security_socket_create
(paren
r_int
id|family
comma
r_int
id|type
comma
r_int
id|protocol
comma
r_int
id|kern
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|socket_create
c_func
(paren
id|family
comma
id|type
comma
id|protocol
comma
id|kern
)paren
suffix:semicolon
)brace
DECL|function|security_socket_post_create
r_static
r_inline
r_void
id|security_socket_post_create
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|family
comma
r_int
id|type
comma
r_int
id|protocol
comma
r_int
id|kern
)paren
(brace
id|security_ops
op_member_access_from_pointer
id|socket_post_create
c_func
(paren
id|sock
comma
id|family
comma
id|type
comma
id|protocol
comma
id|kern
)paren
suffix:semicolon
)brace
DECL|function|security_socket_bind
r_static
r_inline
r_int
id|security_socket_bind
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|sockaddr
op_star
id|address
comma
r_int
id|addrlen
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|socket_bind
c_func
(paren
id|sock
comma
id|address
comma
id|addrlen
)paren
suffix:semicolon
)brace
DECL|function|security_socket_connect
r_static
r_inline
r_int
id|security_socket_connect
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|sockaddr
op_star
id|address
comma
r_int
id|addrlen
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|socket_connect
c_func
(paren
id|sock
comma
id|address
comma
id|addrlen
)paren
suffix:semicolon
)brace
DECL|function|security_socket_listen
r_static
r_inline
r_int
id|security_socket_listen
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|backlog
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|socket_listen
c_func
(paren
id|sock
comma
id|backlog
)paren
suffix:semicolon
)brace
DECL|function|security_socket_accept
r_static
r_inline
r_int
id|security_socket_accept
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|socket
op_star
id|newsock
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|socket_accept
c_func
(paren
id|sock
comma
id|newsock
)paren
suffix:semicolon
)brace
DECL|function|security_socket_post_accept
r_static
r_inline
r_void
id|security_socket_post_accept
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|socket
op_star
id|newsock
)paren
(brace
id|security_ops
op_member_access_from_pointer
id|socket_post_accept
c_func
(paren
id|sock
comma
id|newsock
)paren
suffix:semicolon
)brace
DECL|function|security_socket_sendmsg
r_static
r_inline
r_int
id|security_socket_sendmsg
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|msghdr
op_star
id|msg
comma
r_int
id|size
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|socket_sendmsg
c_func
(paren
id|sock
comma
id|msg
comma
id|size
)paren
suffix:semicolon
)brace
DECL|function|security_socket_recvmsg
r_static
r_inline
r_int
id|security_socket_recvmsg
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|msghdr
op_star
id|msg
comma
r_int
id|size
comma
r_int
id|flags
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|socket_recvmsg
c_func
(paren
id|sock
comma
id|msg
comma
id|size
comma
id|flags
)paren
suffix:semicolon
)brace
DECL|function|security_socket_getsockname
r_static
r_inline
r_int
id|security_socket_getsockname
c_func
(paren
r_struct
id|socket
op_star
id|sock
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|socket_getsockname
c_func
(paren
id|sock
)paren
suffix:semicolon
)brace
DECL|function|security_socket_getpeername
r_static
r_inline
r_int
id|security_socket_getpeername
c_func
(paren
r_struct
id|socket
op_star
id|sock
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|socket_getpeername
c_func
(paren
id|sock
)paren
suffix:semicolon
)brace
DECL|function|security_socket_getsockopt
r_static
r_inline
r_int
id|security_socket_getsockopt
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|level
comma
r_int
id|optname
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|socket_getsockopt
c_func
(paren
id|sock
comma
id|level
comma
id|optname
)paren
suffix:semicolon
)brace
DECL|function|security_socket_setsockopt
r_static
r_inline
r_int
id|security_socket_setsockopt
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|level
comma
r_int
id|optname
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|socket_setsockopt
c_func
(paren
id|sock
comma
id|level
comma
id|optname
)paren
suffix:semicolon
)brace
DECL|function|security_socket_shutdown
r_static
r_inline
r_int
id|security_socket_shutdown
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|how
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|socket_shutdown
c_func
(paren
id|sock
comma
id|how
)paren
suffix:semicolon
)brace
DECL|function|security_sock_rcv_skb
r_static
r_inline
r_int
id|security_sock_rcv_skb
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
(brace
r_return
id|security_ops-&gt;socket_sock_rcv_skb
(paren
id|sk
comma
id|skb
)paren
suffix:semicolon
)brace
DECL|function|security_socket_getpeersec
r_static
r_inline
r_int
id|security_socket_getpeersec
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_char
id|__user
op_star
id|optval
comma
r_int
id|__user
op_star
id|optlen
comma
r_int
id|len
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|socket_getpeersec
c_func
(paren
id|sock
comma
id|optval
comma
id|optlen
comma
id|len
)paren
suffix:semicolon
)brace
DECL|function|security_sk_alloc
r_static
r_inline
r_int
id|security_sk_alloc
c_func
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
id|family
comma
r_int
id|priority
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|sk_alloc_security
c_func
(paren
id|sk
comma
id|family
comma
id|priority
)paren
suffix:semicolon
)brace
DECL|function|security_sk_free
r_static
r_inline
r_void
id|security_sk_free
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
(brace
r_return
id|security_ops
op_member_access_from_pointer
id|sk_free_security
c_func
(paren
id|sk
)paren
suffix:semicolon
)brace
macro_line|#else&t;/* CONFIG_SECURITY_NETWORK */
DECL|function|security_unix_stream_connect
r_static
r_inline
r_int
id|security_unix_stream_connect
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|socket
op_star
id|other
comma
r_struct
id|sock
op_star
id|newsk
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_unix_may_send
r_static
r_inline
r_int
id|security_unix_may_send
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|socket
op_star
id|other
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_socket_create
r_static
r_inline
r_int
id|security_socket_create
(paren
r_int
id|family
comma
r_int
id|type
comma
r_int
id|protocol
comma
r_int
id|kern
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_socket_post_create
r_static
r_inline
r_void
id|security_socket_post_create
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|family
comma
r_int
id|type
comma
r_int
id|protocol
comma
r_int
id|kern
)paren
(brace
)brace
DECL|function|security_socket_bind
r_static
r_inline
r_int
id|security_socket_bind
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|sockaddr
op_star
id|address
comma
r_int
id|addrlen
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_socket_connect
r_static
r_inline
r_int
id|security_socket_connect
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|sockaddr
op_star
id|address
comma
r_int
id|addrlen
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_socket_listen
r_static
r_inline
r_int
id|security_socket_listen
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|backlog
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_socket_accept
r_static
r_inline
r_int
id|security_socket_accept
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|socket
op_star
id|newsock
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_socket_post_accept
r_static
r_inline
r_void
id|security_socket_post_accept
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|socket
op_star
id|newsock
)paren
(brace
)brace
DECL|function|security_socket_sendmsg
r_static
r_inline
r_int
id|security_socket_sendmsg
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|msghdr
op_star
id|msg
comma
r_int
id|size
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_socket_recvmsg
r_static
r_inline
r_int
id|security_socket_recvmsg
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|msghdr
op_star
id|msg
comma
r_int
id|size
comma
r_int
id|flags
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_socket_getsockname
r_static
r_inline
r_int
id|security_socket_getsockname
c_func
(paren
r_struct
id|socket
op_star
id|sock
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_socket_getpeername
r_static
r_inline
r_int
id|security_socket_getpeername
c_func
(paren
r_struct
id|socket
op_star
id|sock
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_socket_getsockopt
r_static
r_inline
r_int
id|security_socket_getsockopt
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|level
comma
r_int
id|optname
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_socket_setsockopt
r_static
r_inline
r_int
id|security_socket_setsockopt
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|level
comma
r_int
id|optname
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_socket_shutdown
r_static
r_inline
r_int
id|security_socket_shutdown
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|how
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_sock_rcv_skb
r_static
r_inline
r_int
id|security_sock_rcv_skb
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_socket_getpeersec
r_static
r_inline
r_int
id|security_socket_getpeersec
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_char
id|__user
op_star
id|optval
comma
r_int
id|__user
op_star
id|optlen
comma
r_int
id|len
)paren
(brace
r_return
op_minus
id|ENOPROTOOPT
suffix:semicolon
)brace
DECL|function|security_sk_alloc
r_static
r_inline
r_int
id|security_sk_alloc
c_func
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
id|family
comma
r_int
id|priority
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|security_sk_free
r_static
r_inline
r_void
id|security_sk_free
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
(brace
)brace
macro_line|#endif&t;/* CONFIG_SECURITY_NETWORK */
macro_line|#endif /* ! __LINUX_SECURITY_H */
eof
