multiline_comment|/*&n; *  smb_fs_sb.h&n; *&n; *  Copyright (C) 1995 by Paal-Kr. Engstad and Volker Lendecke&n; *  Copyright (C) 1997 by Volker Lendecke&n; *&n; */
macro_line|#ifndef _SMB_FS_SB
DECL|macro|_SMB_FS_SB
mdefine_line|#define _SMB_FS_SB
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/smb.h&gt;
multiline_comment|/*&n; * Upper limit on the total number of active smb_request structs.&n; */
DECL|macro|MAX_REQUEST_HARD
mdefine_line|#define MAX_REQUEST_HARD       256
DECL|enum|smb_receive_state
r_enum
id|smb_receive_state
(brace
DECL|enumerator|SMB_RECV_START
id|SMB_RECV_START
comma
multiline_comment|/* No data read, looking for length + sig */
DECL|enumerator|SMB_RECV_HEADER
id|SMB_RECV_HEADER
comma
multiline_comment|/* Reading the header data */
DECL|enumerator|SMB_RECV_HCOMPLETE
id|SMB_RECV_HCOMPLETE
comma
multiline_comment|/* Done with the header */
DECL|enumerator|SMB_RECV_PARAM
id|SMB_RECV_PARAM
comma
multiline_comment|/* Reading parameter words */
DECL|enumerator|SMB_RECV_DATA
id|SMB_RECV_DATA
comma
multiline_comment|/* Reading data bytes */
DECL|enumerator|SMB_RECV_END
id|SMB_RECV_END
comma
multiline_comment|/* End of request */
DECL|enumerator|SMB_RECV_DROP
id|SMB_RECV_DROP
comma
multiline_comment|/* Dropping this SMB */
DECL|enumerator|SMB_RECV_REQUEST
id|SMB_RECV_REQUEST
comma
multiline_comment|/* Received a request and not a reply */
)brace
suffix:semicolon
multiline_comment|/* structure access macros */
DECL|macro|server_from_inode
mdefine_line|#define server_from_inode(inode) SMB_SB((inode)-&gt;i_sb)
DECL|macro|server_from_dentry
mdefine_line|#define server_from_dentry(dentry) SMB_SB((dentry)-&gt;d_sb)
DECL|macro|SB_of
mdefine_line|#define SB_of(server) ((server)-&gt;super_block)
DECL|struct|smb_sb_info
r_struct
id|smb_sb_info
(brace
multiline_comment|/* List of all smbfs superblocks */
DECL|member|entry
r_struct
id|list_head
id|entry
suffix:semicolon
DECL|member|state
r_enum
id|smb_conn_state
id|state
suffix:semicolon
DECL|member|sock_file
r_struct
id|file
op_star
id|sock_file
suffix:semicolon
DECL|member|conn_error
r_int
id|conn_error
suffix:semicolon
DECL|member|rstate
r_enum
id|smb_receive_state
id|rstate
suffix:semicolon
DECL|member|nr_requests
id|atomic_t
id|nr_requests
suffix:semicolon
DECL|member|xmitq
r_struct
id|list_head
id|xmitq
suffix:semicolon
DECL|member|recvq
r_struct
id|list_head
id|recvq
suffix:semicolon
DECL|member|mid
id|u16
id|mid
suffix:semicolon
DECL|member|mnt
r_struct
id|smb_mount_data_kernel
op_star
id|mnt
suffix:semicolon
multiline_comment|/* Connections are counted. Each time a new socket arrives,&n;&t; * generation is incremented.&n;&t; */
DECL|member|generation
r_int
r_int
id|generation
suffix:semicolon
DECL|member|conn_pid
id|pid_t
id|conn_pid
suffix:semicolon
DECL|member|opt
r_struct
id|smb_conn_opt
id|opt
suffix:semicolon
DECL|member|sem
r_struct
id|semaphore
id|sem
suffix:semicolon
DECL|member|header
r_int
r_char
id|header
(braket
id|SMB_HEADER_LEN
op_plus
l_int|20
op_star
l_int|2
op_plus
l_int|2
)braket
suffix:semicolon
DECL|member|header_len
id|u32
id|header_len
suffix:semicolon
DECL|member|smb_len
id|u32
id|smb_len
suffix:semicolon
DECL|member|smb_read
id|u32
id|smb_read
suffix:semicolon
multiline_comment|/* We use our own data_ready callback, but need the original one */
DECL|member|data_ready
r_void
op_star
id|data_ready
suffix:semicolon
multiline_comment|/* nls pointers for codepage conversions */
DECL|member|remote_nls
r_struct
id|nls_table
op_star
id|remote_nls
suffix:semicolon
DECL|member|local_nls
r_struct
id|nls_table
op_star
id|local_nls
suffix:semicolon
DECL|member|ops
r_struct
id|smb_ops
op_star
id|ops
suffix:semicolon
DECL|member|super_block
r_struct
id|super_block
op_star
id|super_block
suffix:semicolon
)brace
suffix:semicolon
r_static
r_inline
r_int
DECL|function|smb_lock_server_interruptible
id|smb_lock_server_interruptible
c_func
(paren
r_struct
id|smb_sb_info
op_star
id|server
)paren
(brace
r_return
id|down_interruptible
c_func
(paren
op_amp
(paren
id|server-&gt;sem
)paren
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|smb_lock_server
id|smb_lock_server
c_func
(paren
r_struct
id|smb_sb_info
op_star
id|server
)paren
(brace
id|down
c_func
(paren
op_amp
(paren
id|server-&gt;sem
)paren
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|smb_unlock_server
id|smb_unlock_server
c_func
(paren
r_struct
id|smb_sb_info
op_star
id|server
)paren
(brace
id|up
c_func
(paren
op_amp
(paren
id|server-&gt;sem
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif /* __KERNEL__ */
macro_line|#endif
eof
