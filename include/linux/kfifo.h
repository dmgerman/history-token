multiline_comment|/*&n; * A simple kernel FIFO implementation.&n; *&n; * Copyright (C) 2004 Stelian Pop &lt;stelian@popies.net&gt;&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2 of the License, or&n; * (at your option) any later version.&n; *&n; * This program is distributed in the hope that it will be useful,&n; * but WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; * GNU General Public License for more details.&n; *&n; * You should have received a copy of the GNU General Public License&n; * along with this program; if not, write to the Free Software&n; * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.&n; *&n; */
macro_line|#ifndef _LINUX_KFIFO_H
DECL|macro|_LINUX_KFIFO_H
mdefine_line|#define _LINUX_KFIFO_H
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;linux/spinlock.h&gt;
DECL|struct|kfifo
r_struct
id|kfifo
(brace
DECL|member|buffer
r_int
r_char
op_star
id|buffer
suffix:semicolon
multiline_comment|/* the buffer holding the data */
DECL|member|size
r_int
r_int
id|size
suffix:semicolon
multiline_comment|/* the size of the allocated buffer */
DECL|member|in
r_int
r_int
id|in
suffix:semicolon
multiline_comment|/* data is added at offset (in % size) */
DECL|member|out
r_int
r_int
id|out
suffix:semicolon
multiline_comment|/* data is extracted from off. (out % size) */
DECL|member|lock
id|spinlock_t
op_star
id|lock
suffix:semicolon
multiline_comment|/* protects concurrent modifications */
)brace
suffix:semicolon
r_extern
r_struct
id|kfifo
op_star
id|kfifo_init
c_func
(paren
r_int
r_char
op_star
id|buffer
comma
r_int
r_int
id|size
comma
r_int
id|gfp_mask
comma
id|spinlock_t
op_star
id|lock
)paren
suffix:semicolon
r_extern
r_struct
id|kfifo
op_star
id|kfifo_alloc
c_func
(paren
r_int
r_int
id|size
comma
r_int
id|gfp_mask
comma
id|spinlock_t
op_star
id|lock
)paren
suffix:semicolon
r_extern
r_void
id|kfifo_free
c_func
(paren
r_struct
id|kfifo
op_star
id|fifo
)paren
suffix:semicolon
r_extern
r_int
r_int
id|__kfifo_put
c_func
(paren
r_struct
id|kfifo
op_star
id|fifo
comma
r_int
r_char
op_star
id|buffer
comma
r_int
r_int
id|len
)paren
suffix:semicolon
r_extern
r_int
r_int
id|__kfifo_get
c_func
(paren
r_struct
id|kfifo
op_star
id|fifo
comma
r_int
r_char
op_star
id|buffer
comma
r_int
r_int
id|len
)paren
suffix:semicolon
multiline_comment|/**&n; * __kfifo_reset - removes the entire FIFO contents, no locking version&n; * @fifo: the fifo to be emptied.&n; */
DECL|function|__kfifo_reset
r_static
r_inline
r_void
id|__kfifo_reset
c_func
(paren
r_struct
id|kfifo
op_star
id|fifo
)paren
(brace
id|fifo-&gt;in
op_assign
id|fifo-&gt;out
op_assign
l_int|0
suffix:semicolon
)brace
multiline_comment|/**&n; * kfifo_reset - removes the entire FIFO contents&n; * @fifo: the fifo to be emptied.&n; */
DECL|function|kfifo_reset
r_static
r_inline
r_void
id|kfifo_reset
c_func
(paren
r_struct
id|kfifo
op_star
id|fifo
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
id|fifo-&gt;lock
comma
id|flags
)paren
suffix:semicolon
id|__kfifo_reset
c_func
(paren
id|fifo
)paren
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
id|fifo-&gt;lock
comma
id|flags
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * kfifo_put - puts some data into the FIFO&n; * @fifo: the fifo to be used.&n; * @buffer: the data to be added.&n; * @len: the length of the data to be added.&n; *&n; * This function copies at most &squot;len&squot; bytes from the &squot;buffer&squot; into&n; * the FIFO depending on the free space, and returns the number of&n; * bytes copied.&n; */
DECL|function|kfifo_put
r_static
r_inline
r_int
r_int
id|kfifo_put
c_func
(paren
r_struct
id|kfifo
op_star
id|fifo
comma
r_int
r_char
op_star
id|buffer
comma
r_int
r_int
id|len
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
r_int
r_int
id|ret
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
id|fifo-&gt;lock
comma
id|flags
)paren
suffix:semicolon
id|ret
op_assign
id|__kfifo_put
c_func
(paren
id|fifo
comma
id|buffer
comma
id|len
)paren
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
id|fifo-&gt;lock
comma
id|flags
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
multiline_comment|/**&n; * kfifo_get - gets some data from the FIFO&n; * @fifo: the fifo to be used.&n; * @buffer: where the data must be copied.&n; * @len: the size of the destination buffer.&n; *&n; * This function copies at most &squot;len&squot; bytes from the FIFO into the&n; * &squot;buffer&squot; and returns the number of copied bytes.&n; */
DECL|function|kfifo_get
r_static
r_inline
r_int
r_int
id|kfifo_get
c_func
(paren
r_struct
id|kfifo
op_star
id|fifo
comma
r_int
r_char
op_star
id|buffer
comma
r_int
r_int
id|len
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
r_int
r_int
id|ret
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
id|fifo-&gt;lock
comma
id|flags
)paren
suffix:semicolon
id|ret
op_assign
id|__kfifo_get
c_func
(paren
id|fifo
comma
id|buffer
comma
id|len
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * optimization: if the FIFO is empty, set the indices to 0&n;&t; * so we don&squot;t wrap the next time&n;&t; */
r_if
c_cond
(paren
id|fifo-&gt;in
op_eq
id|fifo-&gt;out
)paren
id|fifo-&gt;in
op_assign
id|fifo-&gt;out
op_assign
l_int|0
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
id|fifo-&gt;lock
comma
id|flags
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
multiline_comment|/**&n; * __kfifo_len - returns the number of bytes available in the FIFO, no locking version&n; * @fifo: the fifo to be used.&n; */
DECL|function|__kfifo_len
r_static
r_inline
r_int
r_int
id|__kfifo_len
c_func
(paren
r_struct
id|kfifo
op_star
id|fifo
)paren
(brace
r_return
id|fifo-&gt;in
op_minus
id|fifo-&gt;out
suffix:semicolon
)brace
multiline_comment|/**&n; * kfifo_len - returns the number of bytes available in the FIFO&n; * @fifo: the fifo to be used.&n; */
DECL|function|kfifo_len
r_static
r_inline
r_int
r_int
id|kfifo_len
c_func
(paren
r_struct
id|kfifo
op_star
id|fifo
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
r_int
r_int
id|ret
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
id|fifo-&gt;lock
comma
id|flags
)paren
suffix:semicolon
id|ret
op_assign
id|__kfifo_len
c_func
(paren
id|fifo
)paren
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
id|fifo-&gt;lock
comma
id|flags
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
macro_line|#else
macro_line|#warning &quot;don&squot;t include kernel headers in userspace&quot;
macro_line|#endif /* __KERNEL__ */
macro_line|#endif
eof
