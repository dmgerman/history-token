macro_line|#ifndef _BLK_H
DECL|macro|_BLK_H
mdefine_line|#define _BLK_H
macro_line|#include &lt;linux/blkdev.h&gt;
macro_line|#include &lt;linux/elevator.h&gt;
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/spinlock.h&gt;
macro_line|#include &lt;linux/compiler.h&gt;
r_extern
r_void
id|set_device_ro
c_func
(paren
r_struct
id|block_device
op_star
id|bdev
comma
r_int
id|flag
)paren
suffix:semicolon
r_extern
r_void
id|set_disk_ro
c_func
(paren
r_struct
id|gendisk
op_star
id|disk
comma
r_int
id|flag
)paren
suffix:semicolon
r_extern
r_void
id|add_disk_randomness
c_func
(paren
r_struct
id|gendisk
op_star
id|disk
)paren
suffix:semicolon
r_extern
r_void
id|rand_initialize_disk
c_func
(paren
r_struct
id|gendisk
op_star
id|disk
)paren
suffix:semicolon
multiline_comment|/*&n; * end_request() and friends. Must be called with the request queue spinlock&n; * acquired. All functions called within end_request() _must_be_ atomic.&n; *&n; * Several drivers define their own end_request and call&n; * end_that_request_first() and end_that_request_last()&n; * for parts of the original function. This prevents&n; * code duplication in drivers.&n; */
r_extern
r_int
id|end_that_request_first
c_func
(paren
r_struct
id|request
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|end_that_request_chunk
c_func
(paren
r_struct
id|request
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|end_that_request_last
c_func
(paren
r_struct
id|request
op_star
)paren
suffix:semicolon
r_struct
id|request
op_star
id|elv_next_request
c_func
(paren
id|request_queue_t
op_star
id|q
)paren
suffix:semicolon
DECL|function|blkdev_dequeue_request
r_static
r_inline
r_void
id|blkdev_dequeue_request
c_func
(paren
r_struct
id|request
op_star
id|req
)paren
(brace
id|BUG_ON
c_func
(paren
id|list_empty
c_func
(paren
op_amp
id|req-&gt;queuelist
)paren
)paren
suffix:semicolon
id|list_del_init
c_func
(paren
op_amp
id|req-&gt;queuelist
)paren
suffix:semicolon
r_if
c_cond
(paren
id|req-&gt;q
)paren
id|elv_remove_request
c_func
(paren
id|req-&gt;q
comma
id|req
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * If we have our own end_request, we do not want to include this mess&n; */
macro_line|#ifndef LOCAL_END_REQUEST
DECL|function|end_request
r_static
r_inline
r_void
id|end_request
c_func
(paren
r_struct
id|request
op_star
id|req
comma
r_int
id|uptodate
)paren
(brace
r_if
c_cond
(paren
id|end_that_request_first
c_func
(paren
id|req
comma
id|uptodate
comma
id|req-&gt;hard_cur_sectors
)paren
)paren
r_return
suffix:semicolon
id|add_disk_randomness
c_func
(paren
id|req-&gt;rq_disk
)paren
suffix:semicolon
id|blkdev_dequeue_request
c_func
(paren
id|req
)paren
suffix:semicolon
id|end_that_request_last
c_func
(paren
id|req
)paren
suffix:semicolon
)brace
macro_line|#endif /* !LOCAL_END_REQUEST */
macro_line|#endif /* _BLK_H */
eof
