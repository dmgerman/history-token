multiline_comment|/*&n; * transport_class.h - a generic container for all transport classes&n; *&n; * Copyright (c) 2005 - James Bottomley &lt;James.Bottomley@steeleye.com&gt;&n; *&n; * This file is licensed under GPLv2&n; */
macro_line|#ifndef _TRANSPORT_CLASS_H_
DECL|macro|_TRANSPORT_CLASS_H_
mdefine_line|#define _TRANSPORT_CLASS_H_
macro_line|#include &lt;linux/device.h&gt;
macro_line|#include &lt;linux/attribute_container.h&gt;
DECL|struct|transport_class
r_struct
id|transport_class
(brace
DECL|member|class
r_struct
r_class
r_class
suffix:semicolon
DECL|member|setup
r_int
(paren
op_star
id|setup
)paren
(paren
r_struct
id|device
op_star
)paren
suffix:semicolon
DECL|member|configure
r_int
(paren
op_star
id|configure
)paren
(paren
r_struct
id|device
op_star
)paren
suffix:semicolon
DECL|member|remove
r_int
(paren
op_star
id|remove
)paren
(paren
r_struct
id|device
op_star
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|DECLARE_TRANSPORT_CLASS
mdefine_line|#define DECLARE_TRANSPORT_CLASS(cls, nm, su, rm, cfg)&t;&t;&t;&bslash;&n;struct transport_class cls = {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;.class = {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;.name = nm,&t;&t;&t;&t;&t;&t;&bslash;&n;&t;},&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;.setup = su,&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;.remove = rm,&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;.configure = cfg,&t;&t;&t;&t;&t;&t;&bslash;&n;}
DECL|struct|anon_transport_class
r_struct
id|anon_transport_class
(brace
DECL|member|tclass
r_struct
id|transport_class
id|tclass
suffix:semicolon
DECL|member|container
r_struct
id|attribute_container
id|container
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|DECLARE_ANON_TRANSPORT_CLASS
mdefine_line|#define DECLARE_ANON_TRANSPORT_CLASS(cls, mtch, cfg)&t;&t;&bslash;&n;struct anon_transport_class cls = {&t;&t;&t;&t;&bslash;&n;&t;.tclass = {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;.configure = cfg,&t;&t;&t;&t;&bslash;&n;&t;},&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;. container = {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;.match = mtch,&t;&t;&t;&t;&t;&bslash;&n;&t;},&t;&t;&t;&t;&t;&t;&t;&bslash;&n;}
DECL|macro|class_to_transport_class
mdefine_line|#define class_to_transport_class(x) &bslash;&n;&t;container_of(x, struct transport_class, class)
r_void
id|transport_remove_device
c_func
(paren
r_struct
id|device
op_star
)paren
suffix:semicolon
r_void
id|transport_add_device
c_func
(paren
r_struct
id|device
op_star
)paren
suffix:semicolon
r_void
id|transport_setup_device
c_func
(paren
r_struct
id|device
op_star
)paren
suffix:semicolon
r_void
id|transport_configure_device
c_func
(paren
r_struct
id|device
op_star
)paren
suffix:semicolon
r_void
id|transport_destroy_device
c_func
(paren
r_struct
id|device
op_star
)paren
suffix:semicolon
r_static
r_inline
r_void
DECL|function|transport_register_device
id|transport_register_device
c_func
(paren
r_struct
id|device
op_star
id|dev
)paren
(brace
id|transport_setup_device
c_func
(paren
id|dev
)paren
suffix:semicolon
id|transport_add_device
c_func
(paren
id|dev
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|transport_unregister_device
id|transport_unregister_device
c_func
(paren
r_struct
id|device
op_star
id|dev
)paren
(brace
id|transport_remove_device
c_func
(paren
id|dev
)paren
suffix:semicolon
id|transport_destroy_device
c_func
(paren
id|dev
)paren
suffix:semicolon
)brace
r_int
id|transport_class_register
c_func
(paren
r_struct
id|transport_class
op_star
)paren
suffix:semicolon
r_int
id|anon_transport_class_register
c_func
(paren
r_struct
id|anon_transport_class
op_star
)paren
suffix:semicolon
r_void
id|transport_class_unregister
c_func
(paren
r_struct
id|transport_class
op_star
)paren
suffix:semicolon
r_void
id|anon_transport_class_unregister
c_func
(paren
r_struct
id|anon_transport_class
op_star
)paren
suffix:semicolon
macro_line|#endif
eof
