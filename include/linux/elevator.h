macro_line|#ifndef _LINUX_ELEVATOR_H
DECL|macro|_LINUX_ELEVATOR_H
mdefine_line|#define _LINUX_ELEVATOR_H
DECL|typedef|elevator_merge_fn
r_typedef
r_int
(paren
id|elevator_merge_fn
)paren
(paren
id|request_queue_t
op_star
comma
r_struct
id|request
op_star
op_star
comma
r_struct
id|bio
op_star
)paren
suffix:semicolon
DECL|typedef|elevator_merge_cleanup_fn
r_typedef
r_void
(paren
id|elevator_merge_cleanup_fn
)paren
(paren
id|request_queue_t
op_star
comma
r_struct
id|request
op_star
comma
r_int
)paren
suffix:semicolon
DECL|typedef|elevator_merge_req_fn
r_typedef
r_void
(paren
id|elevator_merge_req_fn
)paren
(paren
r_struct
id|request
op_star
comma
r_struct
id|request
op_star
)paren
suffix:semicolon
DECL|typedef|elevator_next_req_fn
r_typedef
r_struct
id|request
op_star
(paren
id|elevator_next_req_fn
)paren
(paren
id|request_queue_t
op_star
)paren
suffix:semicolon
DECL|typedef|elevator_add_req_fn
r_typedef
r_void
(paren
id|elevator_add_req_fn
)paren
(paren
id|request_queue_t
op_star
comma
r_struct
id|request
op_star
comma
r_struct
id|list_head
op_star
)paren
suffix:semicolon
DECL|typedef|elevator_queue_empty_fn
r_typedef
r_int
(paren
id|elevator_queue_empty_fn
)paren
(paren
id|request_queue_t
op_star
)paren
suffix:semicolon
DECL|typedef|elevator_remove_req_fn
r_typedef
r_void
(paren
id|elevator_remove_req_fn
)paren
(paren
id|request_queue_t
op_star
comma
r_struct
id|request
op_star
)paren
suffix:semicolon
DECL|typedef|elevator_init_fn
r_typedef
r_int
(paren
id|elevator_init_fn
)paren
(paren
id|request_queue_t
op_star
comma
id|elevator_t
op_star
)paren
suffix:semicolon
DECL|typedef|elevator_exit_fn
r_typedef
r_void
(paren
id|elevator_exit_fn
)paren
(paren
id|request_queue_t
op_star
comma
id|elevator_t
op_star
)paren
suffix:semicolon
DECL|struct|elevator_s
r_struct
id|elevator_s
(brace
DECL|member|elevator_merge_fn
id|elevator_merge_fn
op_star
id|elevator_merge_fn
suffix:semicolon
DECL|member|elevator_merge_cleanup_fn
id|elevator_merge_cleanup_fn
op_star
id|elevator_merge_cleanup_fn
suffix:semicolon
DECL|member|elevator_merge_req_fn
id|elevator_merge_req_fn
op_star
id|elevator_merge_req_fn
suffix:semicolon
DECL|member|elevator_next_req_fn
id|elevator_next_req_fn
op_star
id|elevator_next_req_fn
suffix:semicolon
DECL|member|elevator_add_req_fn
id|elevator_add_req_fn
op_star
id|elevator_add_req_fn
suffix:semicolon
DECL|member|elevator_remove_req_fn
id|elevator_remove_req_fn
op_star
id|elevator_remove_req_fn
suffix:semicolon
DECL|member|elevator_queue_empty_fn
id|elevator_queue_empty_fn
op_star
id|elevator_queue_empty_fn
suffix:semicolon
DECL|member|elevator_init_fn
id|elevator_init_fn
op_star
id|elevator_init_fn
suffix:semicolon
DECL|member|elevator_exit_fn
id|elevator_exit_fn
op_star
id|elevator_exit_fn
suffix:semicolon
DECL|member|elevator_data
r_void
op_star
id|elevator_data
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * block elevator interface&n; */
r_extern
r_void
id|__elv_add_request
c_func
(paren
id|request_queue_t
op_star
comma
r_struct
id|request
op_star
comma
r_struct
id|list_head
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|request
op_star
id|__elv_next_request
c_func
(paren
id|request_queue_t
op_star
)paren
suffix:semicolon
r_extern
r_void
id|elv_merge_cleanup
c_func
(paren
id|request_queue_t
op_star
comma
r_struct
id|request
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|elv_merge
c_func
(paren
id|request_queue_t
op_star
comma
r_struct
id|request
op_star
op_star
comma
r_struct
id|bio
op_star
)paren
suffix:semicolon
r_extern
r_void
id|elv_merge_requests
c_func
(paren
id|request_queue_t
op_star
comma
r_struct
id|request
op_star
comma
r_struct
id|request
op_star
)paren
suffix:semicolon
r_extern
r_void
id|elv_remove_request
c_func
(paren
id|request_queue_t
op_star
comma
r_struct
id|request
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * noop I/O scheduler. always merges, always inserts new request at tail&n; */
r_extern
id|elevator_t
id|elevator_noop
suffix:semicolon
multiline_comment|/*&n; * elevator linus. based on linus ideas of starvation control, using&n; * sequencing to manage inserts and merges.&n; */
r_extern
id|elevator_t
id|elevator_linus
suffix:semicolon
DECL|macro|elv_linus_sequence
mdefine_line|#define elv_linus_sequence(rq)&t;((long)(rq)-&gt;elevator_private)
multiline_comment|/*&n; * use the /proc/iosched interface, all the below is history -&gt;&n; */
DECL|struct|blkelv_ioctl_arg_s
r_typedef
r_struct
id|blkelv_ioctl_arg_s
(brace
DECL|member|queue_ID
r_int
id|queue_ID
suffix:semicolon
DECL|member|read_latency
r_int
id|read_latency
suffix:semicolon
DECL|member|write_latency
r_int
id|write_latency
suffix:semicolon
DECL|member|max_bomb_segments
r_int
id|max_bomb_segments
suffix:semicolon
DECL|typedef|blkelv_ioctl_arg_t
)brace
id|blkelv_ioctl_arg_t
suffix:semicolon
DECL|macro|BLKELVGET
mdefine_line|#define BLKELVGET   _IOR(0x12,106,sizeof(blkelv_ioctl_arg_t))
DECL|macro|BLKELVSET
mdefine_line|#define BLKELVSET   _IOW(0x12,107,sizeof(blkelv_ioctl_arg_t))
r_extern
r_int
id|elevator_init
c_func
(paren
id|request_queue_t
op_star
comma
id|elevator_t
op_star
comma
id|elevator_t
)paren
suffix:semicolon
r_extern
r_void
id|elevator_exit
c_func
(paren
id|request_queue_t
op_star
comma
id|elevator_t
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * Return values from elevator merger&n; */
DECL|macro|ELEVATOR_NO_MERGE
mdefine_line|#define ELEVATOR_NO_MERGE&t;0
DECL|macro|ELEVATOR_FRONT_MERGE
mdefine_line|#define ELEVATOR_FRONT_MERGE&t;1
DECL|macro|ELEVATOR_BACK_MERGE
mdefine_line|#define ELEVATOR_BACK_MERGE&t;2
multiline_comment|/*&n; * will change once we move to a more complex data structure than a simple&n; * list for pending requests&n; */
DECL|macro|elv_queue_empty
mdefine_line|#define elv_queue_empty(q)&t;list_empty(&amp;(q)-&gt;queue_head)
macro_line|#endif
eof
