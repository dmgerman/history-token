macro_line|#ifndef _linux_POSIX_TIMERS_H
DECL|macro|_linux_POSIX_TIMERS_H
mdefine_line|#define _linux_POSIX_TIMERS_H
macro_line|#include &lt;linux/spinlock.h&gt;
macro_line|#include &lt;linux/list.h&gt;
DECL|struct|k_clock_abs
r_struct
id|k_clock_abs
(brace
DECL|member|list
r_struct
id|list_head
id|list
suffix:semicolon
DECL|member|lock
id|spinlock_t
id|lock
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|k_clock
r_struct
id|k_clock
(brace
DECL|member|res
r_int
id|res
suffix:semicolon
multiline_comment|/* in nano seconds */
DECL|member|abs_struct
r_struct
id|k_clock_abs
op_star
id|abs_struct
suffix:semicolon
DECL|member|clock_set
r_int
(paren
op_star
id|clock_set
)paren
(paren
r_struct
id|timespec
op_star
id|tp
)paren
suffix:semicolon
DECL|member|clock_get
r_int
(paren
op_star
id|clock_get
)paren
(paren
r_struct
id|timespec
op_star
id|tp
)paren
suffix:semicolon
DECL|member|nsleep
r_int
(paren
op_star
id|nsleep
)paren
(paren
r_int
id|flags
comma
r_struct
id|timespec
op_star
id|new_setting
comma
r_struct
id|itimerspec
op_star
id|old_setting
)paren
suffix:semicolon
DECL|member|timer_set
r_int
(paren
op_star
id|timer_set
)paren
(paren
r_struct
id|k_itimer
op_star
id|timr
comma
r_int
id|flags
comma
r_struct
id|itimerspec
op_star
id|new_setting
comma
r_struct
id|itimerspec
op_star
id|old_setting
)paren
suffix:semicolon
DECL|member|timer_del
r_int
(paren
op_star
id|timer_del
)paren
(paren
r_struct
id|k_itimer
op_star
id|timr
)paren
suffix:semicolon
DECL|member|timer_get
r_void
(paren
op_star
id|timer_get
)paren
(paren
r_struct
id|k_itimer
op_star
id|timr
comma
r_struct
id|itimerspec
op_star
id|cur_setting
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|now_struct
r_struct
id|now_struct
(brace
DECL|member|jiffies
r_int
r_int
id|jiffies
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|posix_get_now
mdefine_line|#define posix_get_now(now) (now)-&gt;jiffies = jiffies;
DECL|macro|posix_time_before
mdefine_line|#define posix_time_before(timer, now) &bslash;&n;                      time_before((timer)-&gt;expires, (now)-&gt;jiffies)
DECL|macro|posix_bump_timer
mdefine_line|#define posix_bump_timer(timr, now)&t;&t;&t;&t;&t;&bslash;&n;         do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;              long delta, orun;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;      delta = now.jiffies - (timr)-&gt;it_timer.expires;&t;&t;&bslash;&n;              if (delta &gt;= 0) {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;           orun = 1 + (delta / (timr)-&gt;it_incr);&t;&t;&bslash;&n;&t;          (timr)-&gt;it_timer.expires += orun * (timr)-&gt;it_incr;&t;&bslash;&n;                  (timr)-&gt;it_overrun += orun;&t;&t;&t;&t;&bslash;&n;              }&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;            }while (0)
macro_line|#endif
eof
