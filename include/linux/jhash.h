macro_line|#ifndef _LINUX_JHASH_H
DECL|macro|_LINUX_JHASH_H
mdefine_line|#define _LINUX_JHASH_H
multiline_comment|/* jhash.h: Jenkins hash support.&n; *&n; * Copyright (C) 1996 Bob Jenkins (bob_jenkins@burtleburtle.net)&n; *&n; * http://burtleburtle.net/bob/hash/&n; *&n; * These are the credits from Bob&squot;s sources:&n; *&n; * lookup2.c, by Bob Jenkins, December 1996, Public Domain.&n; * hash(), hash2(), hash3, and mix() are externally useful functions.&n; * Routines to test the hash are included if SELF_TEST is defined.&n; * You can use this free for any purpose.  It has no warranty.&n; *&n; * Copyright (C) 2003 David S. Miller (davem@redhat.com)&n; *&n; * I&squot;ve modified Bob&squot;s hash to be useful in the Linux kernel, and&n; * any bugs present are surely my fault.  -DaveM&n; */
multiline_comment|/* NOTE: Arguments are modified. */
DECL|macro|__jhash_mix
mdefine_line|#define __jhash_mix(a, b, c) &bslash;&n;{ &bslash;&n;  a -= b; a -= c; a ^= (c&gt;&gt;13); &bslash;&n;  b -= c; b -= a; b ^= (a&lt;&lt;8); &bslash;&n;  c -= a; c -= b; c ^= (b&gt;&gt;13); &bslash;&n;  a -= b; a -= c; a ^= (c&gt;&gt;12);  &bslash;&n;  b -= c; b -= a; b ^= (a&lt;&lt;16); &bslash;&n;  c -= a; c -= b; c ^= (b&gt;&gt;5); &bslash;&n;  a -= b; a -= c; a ^= (c&gt;&gt;3);  &bslash;&n;  b -= c; b -= a; b ^= (a&lt;&lt;10); &bslash;&n;  c -= a; c -= b; c ^= (b&gt;&gt;15); &bslash;&n;}
multiline_comment|/* The golden ration: an arbitrary value */
DECL|macro|JHASH_GOLDEN_RATIO
mdefine_line|#define JHASH_GOLDEN_RATIO&t;0x9e3779b9
multiline_comment|/* The most generic version, hashes an arbitrary sequence&n; * of bytes.  No alignment or length assumptions are made about&n; * the input key.&n; */
DECL|function|jhash
r_static
r_inline
id|u32
id|jhash
c_func
(paren
r_void
op_star
id|key
comma
id|u32
id|length
comma
id|u32
id|initval
)paren
(brace
id|u32
id|a
comma
id|b
comma
id|c
comma
id|len
suffix:semicolon
id|u8
op_star
id|k
op_assign
id|key
suffix:semicolon
id|len
op_assign
id|length
suffix:semicolon
id|a
op_assign
id|b
op_assign
id|JHASH_GOLDEN_RATIO
suffix:semicolon
id|c
op_assign
id|initval
suffix:semicolon
r_while
c_loop
(paren
id|len
op_ge
l_int|12
)paren
(brace
id|a
op_add_assign
(paren
id|k
(braket
l_int|0
)braket
op_plus
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|1
)braket
op_lshift
l_int|8
)paren
op_plus
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|2
)braket
op_lshift
l_int|16
)paren
op_plus
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|3
)braket
op_lshift
l_int|24
)paren
)paren
suffix:semicolon
id|b
op_add_assign
(paren
id|k
(braket
l_int|4
)braket
op_plus
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|5
)braket
op_lshift
l_int|8
)paren
op_plus
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|6
)braket
op_lshift
l_int|16
)paren
op_plus
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|7
)braket
op_lshift
l_int|24
)paren
)paren
suffix:semicolon
id|c
op_add_assign
(paren
id|k
(braket
l_int|8
)braket
op_plus
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|9
)braket
op_lshift
l_int|8
)paren
op_plus
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|10
)braket
op_lshift
l_int|16
)paren
op_plus
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|11
)braket
op_lshift
l_int|24
)paren
)paren
suffix:semicolon
id|__jhash_mix
c_func
(paren
id|a
comma
id|b
comma
id|c
)paren
suffix:semicolon
id|k
op_add_assign
l_int|12
suffix:semicolon
id|len
op_sub_assign
l_int|12
suffix:semicolon
)brace
id|c
op_add_assign
id|length
suffix:semicolon
r_switch
c_cond
(paren
id|len
)paren
(brace
r_case
l_int|11
suffix:colon
id|c
op_add_assign
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|10
)braket
op_lshift
l_int|24
)paren
suffix:semicolon
r_case
l_int|10
suffix:colon
id|c
op_add_assign
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|9
)braket
op_lshift
l_int|16
)paren
suffix:semicolon
r_case
l_int|9
suffix:colon
id|c
op_add_assign
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|8
)braket
op_lshift
l_int|8
)paren
suffix:semicolon
r_case
l_int|8
suffix:colon
id|b
op_add_assign
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|7
)braket
op_lshift
l_int|24
)paren
suffix:semicolon
r_case
l_int|7
suffix:colon
id|b
op_add_assign
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|6
)braket
op_lshift
l_int|16
)paren
suffix:semicolon
r_case
l_int|6
suffix:colon
id|b
op_add_assign
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|5
)braket
op_lshift
l_int|8
)paren
suffix:semicolon
r_case
l_int|5
suffix:colon
id|b
op_add_assign
id|k
(braket
l_int|4
)braket
suffix:semicolon
r_case
l_int|4
suffix:colon
id|a
op_add_assign
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|3
)braket
op_lshift
l_int|24
)paren
suffix:semicolon
r_case
l_int|3
suffix:colon
id|a
op_add_assign
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|2
)braket
op_lshift
l_int|16
)paren
suffix:semicolon
r_case
l_int|2
suffix:colon
id|a
op_add_assign
(paren
(paren
id|u32
)paren
id|k
(braket
l_int|1
)braket
op_lshift
l_int|8
)paren
suffix:semicolon
r_case
l_int|1
suffix:colon
id|a
op_add_assign
id|k
(braket
l_int|0
)braket
suffix:semicolon
)brace
suffix:semicolon
id|__jhash_mix
c_func
(paren
id|a
comma
id|b
comma
id|c
)paren
suffix:semicolon
r_return
id|c
suffix:semicolon
)brace
multiline_comment|/* A special optimized version that handles 1 or more of u32s.&n; * The length parameter here is the number of u32s in the key.&n; */
DECL|function|jhash2
r_static
r_inline
id|u32
id|jhash2
c_func
(paren
id|u32
op_star
id|k
comma
id|u32
id|length
comma
id|u32
id|initval
)paren
(brace
id|u32
id|a
comma
id|b
comma
id|c
comma
id|len
suffix:semicolon
id|a
op_assign
id|b
op_assign
id|JHASH_GOLDEN_RATIO
suffix:semicolon
id|c
op_assign
id|initval
suffix:semicolon
id|len
op_assign
id|length
suffix:semicolon
r_while
c_loop
(paren
id|len
op_ge
l_int|3
)paren
(brace
id|a
op_add_assign
id|k
(braket
l_int|0
)braket
suffix:semicolon
id|b
op_add_assign
id|k
(braket
l_int|1
)braket
suffix:semicolon
id|c
op_add_assign
id|k
(braket
l_int|2
)braket
suffix:semicolon
id|__jhash_mix
c_func
(paren
id|a
comma
id|b
comma
id|c
)paren
suffix:semicolon
id|k
op_add_assign
l_int|3
suffix:semicolon
id|len
op_sub_assign
l_int|3
suffix:semicolon
)brace
id|c
op_add_assign
id|length
op_star
l_int|4
suffix:semicolon
r_switch
c_cond
(paren
id|len
)paren
(brace
r_case
l_int|2
suffix:colon
id|b
op_add_assign
id|k
(braket
l_int|1
)braket
suffix:semicolon
r_case
l_int|1
suffix:colon
id|a
op_add_assign
id|k
(braket
l_int|0
)braket
suffix:semicolon
)brace
suffix:semicolon
id|__jhash_mix
c_func
(paren
id|a
comma
id|b
comma
id|c
)paren
suffix:semicolon
r_return
id|c
suffix:semicolon
)brace
multiline_comment|/* A special ultra-optimized versions that knows they are hashing exactly&n; * 3, 2 or 1 word(s).&n; *&n; * NOTE: In partilar the &quot;c += length; __jhash_mix(a,b,c);&quot; normally&n; *       done at the end is not done here.&n; */
DECL|function|jhash_3words
r_static
r_inline
id|u32
id|jhash_3words
c_func
(paren
id|u32
id|a
comma
id|u32
id|b
comma
id|u32
id|c
comma
id|u32
id|initval
)paren
(brace
id|a
op_add_assign
id|JHASH_GOLDEN_RATIO
suffix:semicolon
id|b
op_add_assign
id|JHASH_GOLDEN_RATIO
suffix:semicolon
id|c
op_add_assign
id|initval
suffix:semicolon
id|__jhash_mix
c_func
(paren
id|a
comma
id|b
comma
id|c
)paren
suffix:semicolon
r_return
id|c
suffix:semicolon
)brace
DECL|function|jhash_2words
r_static
r_inline
id|u32
id|jhash_2words
c_func
(paren
id|u32
id|a
comma
id|u32
id|b
comma
id|u32
id|initval
)paren
(brace
r_return
id|jhash_3words
c_func
(paren
id|a
comma
id|b
comma
l_int|0
comma
id|initval
)paren
suffix:semicolon
)brace
DECL|function|jhash_1word
r_static
r_inline
id|u32
id|jhash_1word
c_func
(paren
id|u32
id|a
comma
id|u32
id|initval
)paren
(brace
r_return
id|jhash_3words
c_func
(paren
id|a
comma
l_int|0
comma
l_int|0
comma
id|initval
)paren
suffix:semicolon
)brace
macro_line|#endif /* _LINUX_JHASH_H */
eof
