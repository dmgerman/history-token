multiline_comment|/*&n; * Wrapper functions for accessing the file_struct fd array.&n; */
macro_line|#ifndef __LINUX_FILE_H
DECL|macro|__LINUX_FILE_H
mdefine_line|#define __LINUX_FILE_H
macro_line|#include &lt;asm/atomic.h&gt;
macro_line|#include &lt;linux/posix_types.h&gt;
macro_line|#include &lt;linux/compiler.h&gt;
macro_line|#include &lt;linux/spinlock.h&gt;
multiline_comment|/*&n; * The default fd array needs to be at least BITS_PER_LONG,&n; * as this is the granularity returned by copy_fdset().&n; */
DECL|macro|NR_OPEN_DEFAULT
mdefine_line|#define NR_OPEN_DEFAULT BITS_PER_LONG
multiline_comment|/*&n; * Open file table structure&n; */
DECL|struct|files_struct
r_struct
id|files_struct
(brace
DECL|member|count
id|atomic_t
id|count
suffix:semicolon
DECL|member|file_lock
id|spinlock_t
id|file_lock
suffix:semicolon
multiline_comment|/* Protects all the below members.  Nests inside tsk-&gt;alloc_lock */
DECL|member|max_fds
r_int
id|max_fds
suffix:semicolon
DECL|member|max_fdset
r_int
id|max_fdset
suffix:semicolon
DECL|member|next_fd
r_int
id|next_fd
suffix:semicolon
DECL|member|fd
r_struct
id|file
op_star
op_star
id|fd
suffix:semicolon
multiline_comment|/* current fd array */
DECL|member|close_on_exec
id|fd_set
op_star
id|close_on_exec
suffix:semicolon
DECL|member|open_fds
id|fd_set
op_star
id|open_fds
suffix:semicolon
DECL|member|close_on_exec_init
id|fd_set
id|close_on_exec_init
suffix:semicolon
DECL|member|open_fds_init
id|fd_set
id|open_fds_init
suffix:semicolon
DECL|member|fd_array
r_struct
id|file
op_star
id|fd_array
(braket
id|NR_OPEN_DEFAULT
)braket
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_void
id|FASTCALL
c_func
(paren
id|__fput
c_func
(paren
r_struct
id|file
op_star
)paren
)paren
suffix:semicolon
r_extern
r_void
id|FASTCALL
c_func
(paren
id|fput
c_func
(paren
r_struct
id|file
op_star
)paren
)paren
suffix:semicolon
DECL|function|fput_light
r_static
r_inline
r_void
id|fput_light
c_func
(paren
r_struct
id|file
op_star
id|file
comma
r_int
id|fput_needed
)paren
(brace
r_if
c_cond
(paren
id|unlikely
c_func
(paren
id|fput_needed
)paren
)paren
id|fput
c_func
(paren
id|file
)paren
suffix:semicolon
)brace
r_extern
r_struct
id|file
op_star
id|FASTCALL
c_func
(paren
id|fget
c_func
(paren
r_int
r_int
id|fd
)paren
)paren
suffix:semicolon
r_extern
r_struct
id|file
op_star
id|FASTCALL
c_func
(paren
id|fget_light
c_func
(paren
r_int
r_int
id|fd
comma
r_int
op_star
id|fput_needed
)paren
)paren
suffix:semicolon
r_extern
r_void
id|FASTCALL
c_func
(paren
id|set_close_on_exec
c_func
(paren
r_int
r_int
id|fd
comma
r_int
id|flag
)paren
)paren
suffix:semicolon
r_extern
r_void
id|put_filp
c_func
(paren
r_struct
id|file
op_star
)paren
suffix:semicolon
r_extern
r_int
id|get_unused_fd
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|FASTCALL
c_func
(paren
id|put_unused_fd
c_func
(paren
r_int
r_int
id|fd
)paren
)paren
suffix:semicolon
r_struct
id|kmem_cache_s
suffix:semicolon
r_extern
r_void
id|filp_ctor
c_func
(paren
r_void
op_star
id|objp
comma
r_struct
id|kmem_cache_s
op_star
id|cachep
comma
r_int
r_int
id|cflags
)paren
suffix:semicolon
r_extern
r_void
id|filp_dtor
c_func
(paren
r_void
op_star
id|objp
comma
r_struct
id|kmem_cache_s
op_star
id|cachep
comma
r_int
r_int
id|dflags
)paren
suffix:semicolon
r_extern
r_struct
id|file
op_star
op_star
id|alloc_fd_array
c_func
(paren
r_int
)paren
suffix:semicolon
r_extern
r_int
id|expand_fd_array
c_func
(paren
r_struct
id|files_struct
op_star
comma
r_int
id|nr
)paren
suffix:semicolon
r_extern
r_void
id|free_fd_array
c_func
(paren
r_struct
id|file
op_star
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
id|fd_set
op_star
id|alloc_fdset
c_func
(paren
r_int
)paren
suffix:semicolon
r_extern
r_int
id|expand_fdset
c_func
(paren
r_struct
id|files_struct
op_star
comma
r_int
id|nr
)paren
suffix:semicolon
r_extern
r_void
id|free_fdset
c_func
(paren
id|fd_set
op_star
comma
r_int
)paren
suffix:semicolon
DECL|function|fcheck_files
r_static
r_inline
r_struct
id|file
op_star
id|fcheck_files
c_func
(paren
r_struct
id|files_struct
op_star
id|files
comma
r_int
r_int
id|fd
)paren
(brace
r_struct
id|file
op_star
id|file
op_assign
l_int|NULL
suffix:semicolon
r_if
c_cond
(paren
id|fd
OL
id|files-&gt;max_fds
)paren
id|file
op_assign
id|files-&gt;fd
(braket
id|fd
)braket
suffix:semicolon
r_return
id|file
suffix:semicolon
)brace
multiline_comment|/*&n; * Check whether the specified fd has an open file.&n; */
DECL|macro|fcheck
mdefine_line|#define fcheck(fd)&t;fcheck_files(current-&gt;files, fd)
r_extern
r_void
id|FASTCALL
c_func
(paren
id|fd_install
c_func
(paren
r_int
r_int
id|fd
comma
r_struct
id|file
op_star
id|file
)paren
)paren
suffix:semicolon
r_void
id|FASTCALL
c_func
(paren
id|put_files_struct
c_func
(paren
r_struct
id|files_struct
op_star
id|fs
)paren
)paren
suffix:semicolon
macro_line|#endif /* __LINUX_FILE_H */
eof
