macro_line|#ifndef __LINUX_BITMAP_H
DECL|macro|__LINUX_BITMAP_H
mdefine_line|#define __LINUX_BITMAP_H
macro_line|#ifndef __ASSEMBLY__
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/compiler.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;linux/bitops.h&gt;
macro_line|#include &lt;linux/string.h&gt;
DECL|function|bitmap_empty
r_static
r_inline
r_int
id|bitmap_empty
c_func
(paren
r_const
r_int
r_int
op_star
id|bitmap
comma
r_int
id|bits
)paren
(brace
r_int
id|k
comma
id|lim
op_assign
id|bits
op_div
id|BITS_PER_LONG
suffix:semicolon
r_for
c_loop
(paren
id|k
op_assign
l_int|0
suffix:semicolon
id|k
OL
id|lim
suffix:semicolon
op_increment
id|k
)paren
r_if
c_cond
(paren
id|bitmap
(braket
id|k
)braket
)paren
r_return
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|bits
op_mod
id|BITS_PER_LONG
)paren
r_if
c_cond
(paren
id|bitmap
(braket
id|k
)braket
op_amp
(paren
(paren
l_int|1UL
op_lshift
(paren
id|bits
op_mod
id|BITS_PER_LONG
)paren
)paren
op_minus
l_int|1
)paren
)paren
r_return
l_int|0
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|bitmap_full
r_static
r_inline
r_int
id|bitmap_full
c_func
(paren
r_const
r_int
r_int
op_star
id|bitmap
comma
r_int
id|bits
)paren
(brace
r_int
id|k
comma
id|lim
op_assign
id|bits
op_div
id|BITS_PER_LONG
suffix:semicolon
r_for
c_loop
(paren
id|k
op_assign
l_int|0
suffix:semicolon
id|k
OL
id|lim
suffix:semicolon
op_increment
id|k
)paren
r_if
c_cond
(paren
op_complement
id|bitmap
(braket
id|k
)braket
)paren
r_return
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|bits
op_mod
id|BITS_PER_LONG
)paren
r_if
c_cond
(paren
op_complement
id|bitmap
(braket
id|k
)braket
op_amp
(paren
(paren
l_int|1UL
op_lshift
(paren
id|bits
op_mod
id|BITS_PER_LONG
)paren
)paren
op_minus
l_int|1
)paren
)paren
r_return
l_int|0
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|bitmap_equal
r_static
r_inline
r_int
id|bitmap_equal
c_func
(paren
r_const
r_int
r_int
op_star
id|bitmap1
comma
r_int
r_int
op_star
id|bitmap2
comma
r_int
id|bits
)paren
(brace
r_int
id|k
comma
id|lim
op_assign
id|bits
op_div
id|BITS_PER_LONG
suffix:semicolon
suffix:semicolon
r_for
c_loop
(paren
id|k
op_assign
l_int|0
suffix:semicolon
id|k
OL
id|lim
suffix:semicolon
op_increment
id|k
)paren
r_if
c_cond
(paren
id|bitmap1
(braket
id|k
)braket
op_ne
id|bitmap2
(braket
id|k
)braket
)paren
r_return
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|bits
op_mod
id|BITS_PER_LONG
)paren
r_if
c_cond
(paren
(paren
id|bitmap1
(braket
id|k
)braket
op_xor
id|bitmap2
(braket
id|k
)braket
)paren
op_amp
(paren
(paren
l_int|1UL
op_lshift
(paren
id|bits
op_mod
id|BITS_PER_LONG
)paren
)paren
op_minus
l_int|1
)paren
)paren
r_return
l_int|0
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|bitmap_complement
r_static
r_inline
r_void
id|bitmap_complement
c_func
(paren
r_int
r_int
op_star
id|bitmap
comma
r_int
id|bits
)paren
(brace
r_int
id|k
suffix:semicolon
r_for
c_loop
(paren
id|k
op_assign
l_int|0
suffix:semicolon
id|k
OL
id|BITS_TO_LONGS
c_func
(paren
id|bits
)paren
suffix:semicolon
op_increment
id|k
)paren
id|bitmap
(braket
id|k
)braket
op_assign
op_complement
id|bitmap
(braket
id|k
)braket
suffix:semicolon
)brace
DECL|function|bitmap_clear
r_static
r_inline
r_void
id|bitmap_clear
c_func
(paren
r_int
r_int
op_star
id|bitmap
comma
r_int
id|bits
)paren
(brace
id|CLEAR_BITMAP
c_func
(paren
(paren
r_int
r_int
op_star
)paren
id|bitmap
comma
id|bits
)paren
suffix:semicolon
)brace
DECL|function|bitmap_fill
r_static
r_inline
r_void
id|bitmap_fill
c_func
(paren
r_int
r_int
op_star
id|bitmap
comma
r_int
id|bits
)paren
(brace
id|memset
c_func
(paren
id|bitmap
comma
l_int|0xff
comma
id|BITS_TO_LONGS
c_func
(paren
id|bits
)paren
op_star
r_sizeof
(paren
r_int
r_int
)paren
)paren
suffix:semicolon
)brace
DECL|function|bitmap_copy
r_static
r_inline
r_void
id|bitmap_copy
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|src
comma
r_int
id|bits
)paren
(brace
id|memcpy
c_func
(paren
id|dst
comma
id|src
comma
id|BITS_TO_LONGS
c_func
(paren
id|bits
)paren
op_star
r_sizeof
(paren
r_int
r_int
)paren
)paren
suffix:semicolon
)brace
DECL|function|bitmap_shift_right
r_static
r_inline
r_void
id|bitmap_shift_right
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|src
comma
r_int
id|shift
comma
r_int
id|bits
)paren
(brace
r_int
id|k
suffix:semicolon
id|DECLARE_BITMAP
c_func
(paren
id|__shr_tmp
comma
id|bits
)paren
suffix:semicolon
id|bitmap_clear
c_func
(paren
id|__shr_tmp
comma
id|bits
)paren
suffix:semicolon
r_for
c_loop
(paren
id|k
op_assign
l_int|0
suffix:semicolon
id|k
OL
id|bits
op_minus
id|shift
suffix:semicolon
op_increment
id|k
)paren
r_if
c_cond
(paren
id|test_bit
c_func
(paren
id|k
op_plus
id|shift
comma
id|src
)paren
)paren
id|set_bit
c_func
(paren
id|k
comma
id|__shr_tmp
)paren
suffix:semicolon
id|bitmap_copy
c_func
(paren
id|dst
comma
id|__shr_tmp
comma
id|bits
)paren
suffix:semicolon
)brace
DECL|function|bitmap_shift_left
r_static
r_inline
r_void
id|bitmap_shift_left
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|src
comma
r_int
id|shift
comma
r_int
id|bits
)paren
(brace
r_int
id|k
suffix:semicolon
id|DECLARE_BITMAP
c_func
(paren
id|__shl_tmp
comma
id|bits
)paren
suffix:semicolon
id|bitmap_clear
c_func
(paren
id|__shl_tmp
comma
id|bits
)paren
suffix:semicolon
r_for
c_loop
(paren
id|k
op_assign
id|bits
suffix:semicolon
id|k
op_ge
id|shift
suffix:semicolon
op_decrement
id|k
)paren
r_if
c_cond
(paren
id|test_bit
c_func
(paren
id|k
op_minus
id|shift
comma
id|src
)paren
)paren
id|set_bit
c_func
(paren
id|k
comma
id|__shl_tmp
)paren
suffix:semicolon
id|bitmap_copy
c_func
(paren
id|dst
comma
id|__shl_tmp
comma
id|bits
)paren
suffix:semicolon
)brace
DECL|function|bitmap_and
r_static
r_inline
r_void
id|bitmap_and
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|bitmap1
comma
r_const
r_int
r_int
op_star
id|bitmap2
comma
r_int
id|bits
)paren
(brace
r_int
id|k
suffix:semicolon
r_int
id|nr
op_assign
id|BITS_TO_LONGS
c_func
(paren
id|bits
)paren
suffix:semicolon
r_for
c_loop
(paren
id|k
op_assign
l_int|0
suffix:semicolon
id|k
OL
id|nr
suffix:semicolon
id|k
op_increment
)paren
id|dst
(braket
id|k
)braket
op_assign
id|bitmap1
(braket
id|k
)braket
op_amp
id|bitmap2
(braket
id|k
)braket
suffix:semicolon
)brace
DECL|function|bitmap_or
r_static
r_inline
r_void
id|bitmap_or
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|bitmap1
comma
r_const
r_int
r_int
op_star
id|bitmap2
comma
r_int
id|bits
)paren
(brace
r_int
id|k
suffix:semicolon
r_int
id|nr
op_assign
id|BITS_TO_LONGS
c_func
(paren
id|bits
)paren
suffix:semicolon
r_for
c_loop
(paren
id|k
op_assign
l_int|0
suffix:semicolon
id|k
OL
id|nr
suffix:semicolon
id|k
op_increment
)paren
id|dst
(braket
id|k
)braket
op_assign
id|bitmap1
(braket
id|k
)braket
op_or
id|bitmap2
(braket
id|k
)braket
suffix:semicolon
)brace
macro_line|#if BITS_PER_LONG == 32
DECL|function|bitmap_weight
r_static
r_inline
r_int
id|bitmap_weight
c_func
(paren
r_const
r_int
r_int
op_star
id|bitmap
comma
r_int
id|bits
)paren
(brace
r_int
id|k
comma
id|w
op_assign
l_int|0
comma
id|lim
op_assign
id|bits
op_div
id|BITS_PER_LONG
suffix:semicolon
r_for
c_loop
(paren
id|k
op_assign
l_int|0
suffix:semicolon
id|k
OL
id|lim
suffix:semicolon
id|k
op_increment
)paren
id|w
op_add_assign
id|hweight32
c_func
(paren
id|bitmap
(braket
id|k
)braket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|bits
op_mod
id|BITS_PER_LONG
)paren
id|w
op_add_assign
id|hweight32
c_func
(paren
id|bitmap
(braket
id|k
)braket
op_amp
(paren
(paren
l_int|1UL
op_lshift
(paren
id|bits
op_mod
id|BITS_PER_LONG
)paren
)paren
op_minus
l_int|1
)paren
)paren
suffix:semicolon
r_return
id|w
suffix:semicolon
)brace
macro_line|#else
DECL|function|bitmap_weight
r_static
r_inline
r_int
id|bitmap_weight
c_func
(paren
r_const
r_int
r_int
op_star
id|bitmap
comma
r_int
id|bits
)paren
(brace
r_int
id|k
comma
id|w
op_assign
l_int|0
comma
id|lim
op_assign
id|bits
op_div
id|BITS_PER_LONG
suffix:semicolon
r_for
c_loop
(paren
id|k
op_assign
l_int|0
suffix:semicolon
id|k
OL
id|lim
suffix:semicolon
id|k
op_increment
)paren
id|w
op_add_assign
id|hweight64
c_func
(paren
id|bitmap
(braket
id|k
)braket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|bits
op_mod
id|BITS_PER_LONG
)paren
id|w
op_add_assign
id|hweight64
c_func
(paren
id|bitmap
(braket
id|k
)braket
op_amp
(paren
(paren
l_int|1UL
op_lshift
(paren
id|bits
op_mod
id|BITS_PER_LONG
)paren
)paren
op_minus
l_int|1
)paren
)paren
suffix:semicolon
r_return
id|w
suffix:semicolon
)brace
macro_line|#endif
macro_line|#endif /* __ASSEMBLY__ */
macro_line|#endif /* __LINUX_BITMAP_H */
eof
