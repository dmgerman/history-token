macro_line|#ifndef __LINUX_BITMAP_H
DECL|macro|__LINUX_BITMAP_H
mdefine_line|#define __LINUX_BITMAP_H
macro_line|#ifndef __ASSEMBLY__
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/bitops.h&gt;
macro_line|#include &lt;linux/string.h&gt;
multiline_comment|/*&n; * bitmaps provide bit arrays that consume one or more unsigned&n; * longs.  The bitmap interface and available operations are listed&n; * here, in bitmap.h&n; *&n; * Function implementations generic to all architectures are in&n; * lib/bitmap.c.  Functions implementations that are architecture&n; * specific are in various include/asm-&lt;arch&gt;/bitops.h headers&n; * and other arch/&lt;arch&gt; specific files.&n; *&n; * See lib/bitmap.c for more details.&n; */
multiline_comment|/*&n; * The available bitmap operations and their rough meaning in the&n; * case that the bitmap is a single unsigned long are thus:&n; *&n; * bitmap_zero(dst, nbits)&t;&t;&t;*dst = 0UL&n; * bitmap_fill(dst, nbits)&t;&t;&t;*dst = ~0UL&n; * bitmap_copy(dst, src, nbits)&t;&t;&t;*dst = *src&n; * bitmap_and(dst, src1, src2, nbits)&t;&t;*dst = *src1 &amp; *src2&n; * bitmap_or(dst, src1, src2, nbits)&t;&t;*dst = *src1 | *src2&n; * bitmap_xor(dst, src1, src2, nbits)&t;&t;*dst = *src1 ^ *src2&n; * bitmap_andnot(dst, src1, src2, nbits)&t;*dst = *src1 &amp; ~(*src2)&n; * bitmap_complement(dst, src, nbits)&t;&t;*dst = ~(*src)&n; * bitmap_equal(src1, src2, nbits)&t;&t;Are *src1 and *src2 equal?&n; * bitmap_intersects(src1, src2, nbits) &t;Do *src1 and *src2 overlap?&n; * bitmap_subset(src1, src2, nbits)&t;&t;Is *src1 a subset of *src2?&n; * bitmap_empty(src, nbits)&t;&t;&t;Are all bits zero in *src?&n; * bitmap_full(src, nbits)&t;&t;&t;Are all bits set in *src?&n; * bitmap_weight(src, nbits)&t;&t;&t;Hamming Weight: number set bits&n; * bitmap_shift_right(dst, src, n, nbits)&t;*dst = *src &gt;&gt; n&n; * bitmap_shift_left(dst, src, n, nbits)&t;*dst = *src &lt;&lt; n&n; * bitmap_scnprintf(buf, len, src, nbits)&t;Print bitmap src to buf&n; * bitmap_parse(ubuf, ulen, dst, nbits)&t;&t;Parse bitmap dst from buf&n; */
multiline_comment|/*&n; * Also the following operations in asm/bitops.h apply to bitmaps.&n; *&n; * set_bit(bit, addr)&t;&t;&t;*addr |= bit&n; * clear_bit(bit, addr)&t;&t;&t;*addr &amp;= ~bit&n; * change_bit(bit, addr)&t;&t;*addr ^= bit&n; * test_bit(bit, addr)&t;&t;&t;Is bit set in *addr?&n; * test_and_set_bit(bit, addr)&t;&t;Set bit and return old value&n; * test_and_clear_bit(bit, addr)&t;Clear bit and return old value&n; * test_and_change_bit(bit, addr)&t;Change bit and return old value&n; * find_first_zero_bit(addr, nbits)&t;Position first zero bit in *addr&n; * find_first_bit(addr, nbits)&t;&t;Position first set bit in *addr&n; * find_next_zero_bit(addr, nbits, bit)&t;Position next zero bit in *addr &gt;= bit&n; * find_next_bit(addr, nbits, bit)&t;Position next set bit in *addr &gt;= bit&n; */
multiline_comment|/*&n; * The DECLARE_BITMAP(name,bits) macro, in linux/types.h, can be used&n; * to declare an array named &squot;name&squot; of just enough unsigned longs to&n; * contain all bit positions from 0 to &squot;bits&squot; - 1.&n; */
multiline_comment|/*&n; * lib/bitmap.c provides these functions:&n; */
r_extern
r_int
id|__bitmap_empty
c_func
(paren
r_const
r_int
r_int
op_star
id|bitmap
comma
r_int
id|bits
)paren
suffix:semicolon
r_extern
r_int
id|__bitmap_full
c_func
(paren
r_const
r_int
r_int
op_star
id|bitmap
comma
r_int
id|bits
)paren
suffix:semicolon
r_extern
r_int
id|__bitmap_equal
c_func
(paren
r_const
r_int
r_int
op_star
id|bitmap1
comma
r_const
r_int
r_int
op_star
id|bitmap2
comma
r_int
id|bits
)paren
suffix:semicolon
r_extern
r_void
id|__bitmap_complement
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|src
comma
r_int
id|bits
)paren
suffix:semicolon
r_extern
r_void
id|__bitmap_shift_right
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|src
comma
r_int
id|shift
comma
r_int
id|bits
)paren
suffix:semicolon
r_extern
r_void
id|__bitmap_shift_left
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|src
comma
r_int
id|shift
comma
r_int
id|bits
)paren
suffix:semicolon
r_extern
r_void
id|__bitmap_and
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|bitmap1
comma
r_const
r_int
r_int
op_star
id|bitmap2
comma
r_int
id|bits
)paren
suffix:semicolon
r_extern
r_void
id|__bitmap_or
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|bitmap1
comma
r_const
r_int
r_int
op_star
id|bitmap2
comma
r_int
id|bits
)paren
suffix:semicolon
r_extern
r_void
id|__bitmap_xor
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|bitmap1
comma
r_const
r_int
r_int
op_star
id|bitmap2
comma
r_int
id|bits
)paren
suffix:semicolon
r_extern
r_void
id|__bitmap_andnot
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|bitmap1
comma
r_const
r_int
r_int
op_star
id|bitmap2
comma
r_int
id|bits
)paren
suffix:semicolon
r_extern
r_int
id|__bitmap_intersects
c_func
(paren
r_const
r_int
r_int
op_star
id|bitmap1
comma
r_const
r_int
r_int
op_star
id|bitmap2
comma
r_int
id|bits
)paren
suffix:semicolon
r_extern
r_int
id|__bitmap_subset
c_func
(paren
r_const
r_int
r_int
op_star
id|bitmap1
comma
r_const
r_int
r_int
op_star
id|bitmap2
comma
r_int
id|bits
)paren
suffix:semicolon
r_extern
r_int
id|__bitmap_weight
c_func
(paren
r_const
r_int
r_int
op_star
id|bitmap
comma
r_int
id|bits
)paren
suffix:semicolon
r_extern
r_int
id|bitmap_scnprintf
c_func
(paren
r_char
op_star
id|buf
comma
r_int
r_int
id|len
comma
r_const
r_int
r_int
op_star
id|src
comma
r_int
id|nbits
)paren
suffix:semicolon
r_extern
r_int
id|bitmap_parse
c_func
(paren
r_const
r_char
id|__user
op_star
id|ubuf
comma
r_int
r_int
id|ulen
comma
r_int
r_int
op_star
id|dst
comma
r_int
id|nbits
)paren
suffix:semicolon
DECL|macro|BITMAP_LAST_WORD_MASK
mdefine_line|#define BITMAP_LAST_WORD_MASK(nbits)&t;&t;&t;&t;&t;&bslash;&n;(&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;((nbits) % BITS_PER_LONG) ?&t;&t;&t;&t;&t;&bslash;&n;&t;&t;(1UL&lt;&lt;((nbits) % BITS_PER_LONG))-1 : ~0UL&t;&t;&bslash;&n;)
DECL|function|bitmap_zero
r_static
r_inline
r_void
id|bitmap_zero
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_int
id|nbits
)paren
(brace
r_if
c_cond
(paren
id|nbits
op_le
id|BITS_PER_LONG
)paren
op_star
id|dst
op_assign
l_int|0UL
suffix:semicolon
r_else
(brace
r_int
id|len
op_assign
id|BITS_TO_LONGS
c_func
(paren
id|nbits
)paren
op_star
r_sizeof
(paren
r_int
r_int
)paren
suffix:semicolon
id|memset
c_func
(paren
id|dst
comma
l_int|0
comma
id|len
)paren
suffix:semicolon
)brace
)brace
DECL|function|bitmap_fill
r_static
r_inline
r_void
id|bitmap_fill
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_int
id|nbits
)paren
(brace
r_int
id|nlongs
op_assign
id|BITS_TO_LONGS
c_func
(paren
id|nbits
)paren
suffix:semicolon
r_if
c_cond
(paren
id|nlongs
OG
l_int|1
)paren
(brace
r_int
id|len
op_assign
(paren
id|nlongs
op_minus
l_int|1
)paren
op_star
r_sizeof
(paren
r_int
r_int
)paren
suffix:semicolon
id|memset
c_func
(paren
id|dst
comma
l_int|0xff
comma
id|len
)paren
suffix:semicolon
)brace
id|dst
(braket
id|nlongs
op_minus
l_int|1
)braket
op_assign
id|BITMAP_LAST_WORD_MASK
c_func
(paren
id|nbits
)paren
suffix:semicolon
)brace
DECL|function|bitmap_copy
r_static
r_inline
r_void
id|bitmap_copy
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|src
comma
r_int
id|nbits
)paren
(brace
r_if
c_cond
(paren
id|nbits
op_le
id|BITS_PER_LONG
)paren
op_star
id|dst
op_assign
op_star
id|src
suffix:semicolon
r_else
(brace
r_int
id|len
op_assign
id|BITS_TO_LONGS
c_func
(paren
id|nbits
)paren
op_star
r_sizeof
(paren
r_int
r_int
)paren
suffix:semicolon
id|memcpy
c_func
(paren
id|dst
comma
id|src
comma
id|len
)paren
suffix:semicolon
)brace
)brace
DECL|function|bitmap_and
r_static
r_inline
r_void
id|bitmap_and
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|src1
comma
r_const
r_int
r_int
op_star
id|src2
comma
r_int
id|nbits
)paren
(brace
r_if
c_cond
(paren
id|nbits
op_le
id|BITS_PER_LONG
)paren
op_star
id|dst
op_assign
op_star
id|src1
op_amp
op_star
id|src2
suffix:semicolon
r_else
id|__bitmap_and
c_func
(paren
id|dst
comma
id|src1
comma
id|src2
comma
id|nbits
)paren
suffix:semicolon
)brace
DECL|function|bitmap_or
r_static
r_inline
r_void
id|bitmap_or
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|src1
comma
r_const
r_int
r_int
op_star
id|src2
comma
r_int
id|nbits
)paren
(brace
r_if
c_cond
(paren
id|nbits
op_le
id|BITS_PER_LONG
)paren
op_star
id|dst
op_assign
op_star
id|src1
op_or
op_star
id|src2
suffix:semicolon
r_else
id|__bitmap_or
c_func
(paren
id|dst
comma
id|src1
comma
id|src2
comma
id|nbits
)paren
suffix:semicolon
)brace
DECL|function|bitmap_xor
r_static
r_inline
r_void
id|bitmap_xor
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|src1
comma
r_const
r_int
r_int
op_star
id|src2
comma
r_int
id|nbits
)paren
(brace
r_if
c_cond
(paren
id|nbits
op_le
id|BITS_PER_LONG
)paren
op_star
id|dst
op_assign
op_star
id|src1
op_xor
op_star
id|src2
suffix:semicolon
r_else
id|__bitmap_xor
c_func
(paren
id|dst
comma
id|src1
comma
id|src2
comma
id|nbits
)paren
suffix:semicolon
)brace
DECL|function|bitmap_andnot
r_static
r_inline
r_void
id|bitmap_andnot
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|src1
comma
r_const
r_int
r_int
op_star
id|src2
comma
r_int
id|nbits
)paren
(brace
r_if
c_cond
(paren
id|nbits
op_le
id|BITS_PER_LONG
)paren
op_star
id|dst
op_assign
op_star
id|src1
op_amp
op_complement
(paren
op_star
id|src2
)paren
suffix:semicolon
r_else
id|__bitmap_andnot
c_func
(paren
id|dst
comma
id|src1
comma
id|src2
comma
id|nbits
)paren
suffix:semicolon
)brace
DECL|function|bitmap_complement
r_static
r_inline
r_void
id|bitmap_complement
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|src
comma
r_int
id|nbits
)paren
(brace
r_if
c_cond
(paren
id|nbits
op_le
id|BITS_PER_LONG
)paren
op_star
id|dst
op_assign
op_complement
(paren
op_star
id|src
)paren
op_amp
id|BITMAP_LAST_WORD_MASK
c_func
(paren
id|nbits
)paren
suffix:semicolon
r_else
id|__bitmap_complement
c_func
(paren
id|dst
comma
id|src
comma
id|nbits
)paren
suffix:semicolon
)brace
DECL|function|bitmap_equal
r_static
r_inline
r_int
id|bitmap_equal
c_func
(paren
r_const
r_int
r_int
op_star
id|src1
comma
r_const
r_int
r_int
op_star
id|src2
comma
r_int
id|nbits
)paren
(brace
r_if
c_cond
(paren
id|nbits
op_le
id|BITS_PER_LONG
)paren
r_return
op_logical_neg
(paren
(paren
op_star
id|src1
op_xor
op_star
id|src2
)paren
op_amp
id|BITMAP_LAST_WORD_MASK
c_func
(paren
id|nbits
)paren
)paren
suffix:semicolon
r_else
r_return
id|__bitmap_equal
c_func
(paren
id|src1
comma
id|src2
comma
id|nbits
)paren
suffix:semicolon
)brace
DECL|function|bitmap_intersects
r_static
r_inline
r_int
id|bitmap_intersects
c_func
(paren
r_const
r_int
r_int
op_star
id|src1
comma
r_const
r_int
r_int
op_star
id|src2
comma
r_int
id|nbits
)paren
(brace
r_if
c_cond
(paren
id|nbits
op_le
id|BITS_PER_LONG
)paren
r_return
(paren
(paren
op_star
id|src1
op_amp
op_star
id|src2
)paren
op_amp
id|BITMAP_LAST_WORD_MASK
c_func
(paren
id|nbits
)paren
)paren
op_ne
l_int|0
suffix:semicolon
r_else
r_return
id|__bitmap_intersects
c_func
(paren
id|src1
comma
id|src2
comma
id|nbits
)paren
suffix:semicolon
)brace
DECL|function|bitmap_subset
r_static
r_inline
r_int
id|bitmap_subset
c_func
(paren
r_const
r_int
r_int
op_star
id|src1
comma
r_const
r_int
r_int
op_star
id|src2
comma
r_int
id|nbits
)paren
(brace
r_if
c_cond
(paren
id|nbits
op_le
id|BITS_PER_LONG
)paren
r_return
op_logical_neg
(paren
(paren
op_star
id|src1
op_amp
op_complement
(paren
op_star
id|src2
)paren
)paren
op_amp
id|BITMAP_LAST_WORD_MASK
c_func
(paren
id|nbits
)paren
)paren
suffix:semicolon
r_else
r_return
id|__bitmap_subset
c_func
(paren
id|src1
comma
id|src2
comma
id|nbits
)paren
suffix:semicolon
)brace
DECL|function|bitmap_empty
r_static
r_inline
r_int
id|bitmap_empty
c_func
(paren
r_const
r_int
r_int
op_star
id|src
comma
r_int
id|nbits
)paren
(brace
r_if
c_cond
(paren
id|nbits
op_le
id|BITS_PER_LONG
)paren
r_return
op_logical_neg
(paren
op_star
id|src
op_amp
id|BITMAP_LAST_WORD_MASK
c_func
(paren
id|nbits
)paren
)paren
suffix:semicolon
r_else
r_return
id|__bitmap_empty
c_func
(paren
id|src
comma
id|nbits
)paren
suffix:semicolon
)brace
DECL|function|bitmap_full
r_static
r_inline
r_int
id|bitmap_full
c_func
(paren
r_const
r_int
r_int
op_star
id|src
comma
r_int
id|nbits
)paren
(brace
r_if
c_cond
(paren
id|nbits
op_le
id|BITS_PER_LONG
)paren
r_return
op_logical_neg
(paren
op_complement
(paren
op_star
id|src
)paren
op_amp
id|BITMAP_LAST_WORD_MASK
c_func
(paren
id|nbits
)paren
)paren
suffix:semicolon
r_else
r_return
id|__bitmap_full
c_func
(paren
id|src
comma
id|nbits
)paren
suffix:semicolon
)brace
DECL|function|bitmap_weight
r_static
r_inline
r_int
id|bitmap_weight
c_func
(paren
r_const
r_int
r_int
op_star
id|src
comma
r_int
id|nbits
)paren
(brace
r_return
id|__bitmap_weight
c_func
(paren
id|src
comma
id|nbits
)paren
suffix:semicolon
)brace
DECL|function|bitmap_shift_right
r_static
r_inline
r_void
id|bitmap_shift_right
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|src
comma
r_int
id|n
comma
r_int
id|nbits
)paren
(brace
r_if
c_cond
(paren
id|nbits
op_le
id|BITS_PER_LONG
)paren
op_star
id|dst
op_assign
op_star
id|src
op_rshift
id|n
suffix:semicolon
r_else
id|__bitmap_shift_right
c_func
(paren
id|dst
comma
id|src
comma
id|n
comma
id|nbits
)paren
suffix:semicolon
)brace
DECL|function|bitmap_shift_left
r_static
r_inline
r_void
id|bitmap_shift_left
c_func
(paren
r_int
r_int
op_star
id|dst
comma
r_const
r_int
r_int
op_star
id|src
comma
r_int
id|n
comma
r_int
id|nbits
)paren
(brace
r_if
c_cond
(paren
id|nbits
op_le
id|BITS_PER_LONG
)paren
op_star
id|dst
op_assign
(paren
op_star
id|src
op_lshift
id|n
)paren
op_amp
id|BITMAP_LAST_WORD_MASK
c_func
(paren
id|nbits
)paren
suffix:semicolon
r_else
id|__bitmap_shift_left
c_func
(paren
id|dst
comma
id|src
comma
id|n
comma
id|nbits
)paren
suffix:semicolon
)brace
macro_line|#endif /* __ASSEMBLY__ */
macro_line|#endif /* __LINUX_BITMAP_H */
eof
