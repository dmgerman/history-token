macro_line|#ifndef _ASM_IA64_MMU_CONTEXT_H
DECL|macro|_ASM_IA64_MMU_CONTEXT_H
mdefine_line|#define _ASM_IA64_MMU_CONTEXT_H
multiline_comment|/*&n; * Copyright (C) 1998-2002 Hewlett-Packard Co&n; *&t;David Mosberger-Tang &lt;davidm@hpl.hp.com&gt;&n; */
multiline_comment|/*&n; * Routines to manage the allocation of task context numbers.  Task context numbers are&n; * used to reduce or eliminate the need to perform TLB flushes due to context switches.&n; * Context numbers are implemented using ia-64 region ids.  Since the IA-64 TLB does not&n; * consider the region number when performing a TLB lookup, we need to assign a unique&n; * region id to each region in a process.  We use the least significant three bits in a&n; * region id for this purpose.&n; */
DECL|macro|IA64_REGION_ID_KERNEL
mdefine_line|#define IA64_REGION_ID_KERNEL&t;0 /* the kernel&squot;s region id (tlb.c depends on this being 0) */
DECL|macro|ia64_rid
mdefine_line|#define ia64_rid(ctx,addr)&t;(((ctx) &lt;&lt; 3) | (addr &gt;&gt; 61))
macro_line|# ifndef __ASSEMBLY__
macro_line|#include &lt;linux/compiler.h&gt;
macro_line|#include &lt;linux/percpu.h&gt;
macro_line|#include &lt;linux/sched.h&gt;
macro_line|#include &lt;linux/spinlock.h&gt;
macro_line|#include &lt;asm/processor.h&gt;
DECL|struct|ia64_ctx
r_struct
id|ia64_ctx
(brace
DECL|member|lock
id|spinlock_t
id|lock
suffix:semicolon
DECL|member|next
r_int
r_int
id|next
suffix:semicolon
multiline_comment|/* next context number to use */
DECL|member|limit
r_int
r_int
id|limit
suffix:semicolon
multiline_comment|/* next &gt;= limit =&gt; must call wrap_mmu_context() */
DECL|member|max_ctx
r_int
r_int
id|max_ctx
suffix:semicolon
multiline_comment|/* max. context value supported by all CPUs */
)brace
suffix:semicolon
r_extern
r_struct
id|ia64_ctx
id|ia64_ctx
suffix:semicolon
id|DECLARE_PER_CPU
c_func
(paren
id|u8
comma
id|ia64_need_tlb_flush
)paren
suffix:semicolon
r_extern
r_void
id|wrap_mmu_context
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
suffix:semicolon
r_static
r_inline
r_void
DECL|function|enter_lazy_tlb
id|enter_lazy_tlb
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_struct
id|task_struct
op_star
id|tsk
)paren
(brace
)brace
multiline_comment|/*&n; * When the context counter wraps around all TLBs need to be flushed because an old&n; * context number might have been reused. This is signalled by the ia64_need_tlb_flush&n; * per-CPU variable, which is checked in the routine below. Called by activate_mm().&n; * &lt;efocht@ess.nec.de&gt;&n; */
r_static
r_inline
r_void
DECL|function|delayed_tlb_flush
id|delayed_tlb_flush
(paren
r_void
)paren
(brace
r_extern
r_void
id|local_flush_tlb_all
(paren
r_void
)paren
suffix:semicolon
r_if
c_cond
(paren
id|unlikely
c_func
(paren
id|__ia64_per_cpu_var
c_func
(paren
id|ia64_need_tlb_flush
)paren
)paren
)paren
(brace
id|local_flush_tlb_all
c_func
(paren
)paren
suffix:semicolon
id|__ia64_per_cpu_var
c_func
(paren
id|ia64_need_tlb_flush
)paren
op_assign
l_int|0
suffix:semicolon
)brace
)brace
r_static
r_inline
id|mm_context_t
DECL|function|get_mmu_context
id|get_mmu_context
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
id|mm_context_t
id|context
op_assign
id|mm-&gt;context
suffix:semicolon
r_if
c_cond
(paren
id|context
)paren
r_return
id|context
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|ia64_ctx.lock
comma
id|flags
)paren
suffix:semicolon
(brace
multiline_comment|/* re-check, now that we&squot;ve got the lock: */
id|context
op_assign
id|mm-&gt;context
suffix:semicolon
r_if
c_cond
(paren
id|context
op_eq
l_int|0
)paren
(brace
id|cpus_clear
c_func
(paren
id|mm-&gt;cpu_vm_mask
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ia64_ctx.next
op_ge
id|ia64_ctx.limit
)paren
id|wrap_mmu_context
c_func
(paren
id|mm
)paren
suffix:semicolon
id|mm-&gt;context
op_assign
id|context
op_assign
id|ia64_ctx.next
op_increment
suffix:semicolon
)brace
)brace
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|ia64_ctx.lock
comma
id|flags
)paren
suffix:semicolon
r_return
id|context
suffix:semicolon
)brace
multiline_comment|/*&n; * Initialize context number to some sane value.  MM is guaranteed to be a brand-new&n; * address-space, so no TLB flushing is needed, ever.&n; */
r_static
r_inline
r_int
DECL|function|init_new_context
id|init_new_context
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
id|mm-&gt;context
op_assign
l_int|0
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|destroy_context
id|destroy_context
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
multiline_comment|/* Nothing to do.  */
)brace
r_static
r_inline
r_void
DECL|function|reload_context
id|reload_context
(paren
id|mm_context_t
id|context
)paren
(brace
r_int
r_int
id|rid
suffix:semicolon
r_int
r_int
id|rid_incr
op_assign
l_int|0
suffix:semicolon
r_int
r_int
id|rr0
comma
id|rr1
comma
id|rr2
comma
id|rr3
comma
id|rr4
comma
id|old_rr4
suffix:semicolon
id|old_rr4
op_assign
id|ia64_get_rr
c_func
(paren
l_int|0x8000000000000000UL
)paren
suffix:semicolon
id|rid
op_assign
id|context
op_lshift
l_int|3
suffix:semicolon
multiline_comment|/* make space for encoding the region number */
id|rid_incr
op_assign
l_int|1
op_lshift
l_int|8
suffix:semicolon
multiline_comment|/* encode the region id, preferred page size, and VHPT enable bit: */
id|rr0
op_assign
(paren
id|rid
op_lshift
l_int|8
)paren
op_or
(paren
id|PAGE_SHIFT
op_lshift
l_int|2
)paren
op_or
l_int|1
suffix:semicolon
id|rr1
op_assign
id|rr0
op_plus
l_int|1
op_star
id|rid_incr
suffix:semicolon
id|rr2
op_assign
id|rr0
op_plus
l_int|2
op_star
id|rid_incr
suffix:semicolon
id|rr3
op_assign
id|rr0
op_plus
l_int|3
op_star
id|rid_incr
suffix:semicolon
id|rr4
op_assign
id|rr0
op_plus
l_int|4
op_star
id|rid_incr
suffix:semicolon
macro_line|#ifdef  CONFIG_HUGETLB_PAGE
id|rr4
op_assign
(paren
id|rr4
op_amp
(paren
op_complement
(paren
l_int|0xfcUL
)paren
)paren
)paren
op_or
(paren
id|old_rr4
op_amp
l_int|0xfc
)paren
suffix:semicolon
macro_line|#endif
id|ia64_set_rr
c_func
(paren
l_int|0x0000000000000000UL
comma
id|rr0
)paren
suffix:semicolon
id|ia64_set_rr
c_func
(paren
l_int|0x2000000000000000UL
comma
id|rr1
)paren
suffix:semicolon
id|ia64_set_rr
c_func
(paren
l_int|0x4000000000000000UL
comma
id|rr2
)paren
suffix:semicolon
id|ia64_set_rr
c_func
(paren
l_int|0x6000000000000000UL
comma
id|rr3
)paren
suffix:semicolon
id|ia64_set_rr
c_func
(paren
l_int|0x8000000000000000UL
comma
id|rr4
)paren
suffix:semicolon
id|ia64_srlz_i
c_func
(paren
)paren
suffix:semicolon
multiline_comment|/* srlz.i implies srlz.d */
)brace
r_static
r_inline
r_void
DECL|function|activate_context
id|activate_context
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
id|mm_context_t
id|context
suffix:semicolon
r_do
(brace
id|context
op_assign
id|get_mmu_context
c_func
(paren
id|mm
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|cpu_isset
c_func
(paren
id|smp_processor_id
c_func
(paren
)paren
comma
id|mm-&gt;cpu_vm_mask
)paren
)paren
id|cpu_set
c_func
(paren
id|smp_processor_id
c_func
(paren
)paren
comma
id|mm-&gt;cpu_vm_mask
)paren
suffix:semicolon
id|reload_context
c_func
(paren
id|context
)paren
suffix:semicolon
multiline_comment|/* in the unlikely event of a TLB-flush by another thread, redo the load: */
)brace
r_while
c_loop
(paren
id|unlikely
c_func
(paren
id|context
op_ne
id|mm-&gt;context
)paren
)paren
suffix:semicolon
)brace
DECL|macro|deactivate_mm
mdefine_line|#define deactivate_mm(tsk,mm)&t;do { } while (0)
multiline_comment|/*&n; * Switch from address space PREV to address space NEXT.&n; */
r_static
r_inline
r_void
DECL|function|activate_mm
id|activate_mm
(paren
r_struct
id|mm_struct
op_star
id|prev
comma
r_struct
id|mm_struct
op_star
id|next
)paren
(brace
id|delayed_tlb_flush
c_func
(paren
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * We may get interrupts here, but that&squot;s OK because interrupt handlers cannot&n;&t; * touch user-space.&n;&t; */
id|ia64_set_kr
c_func
(paren
id|IA64_KR_PT_BASE
comma
id|__pa
c_func
(paren
id|next-&gt;pgd
)paren
)paren
suffix:semicolon
id|activate_context
c_func
(paren
id|next
)paren
suffix:semicolon
)brace
DECL|macro|switch_mm
mdefine_line|#define switch_mm(prev_mm,next_mm,next_task)&t;activate_mm(prev_mm, next_mm)
macro_line|# endif /* ! __ASSEMBLY__ */
macro_line|#endif /* _ASM_IA64_MMU_CONTEXT_H */
eof
