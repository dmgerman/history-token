macro_line|#ifndef _ASM_IA64_UNALIGNED_H
DECL|macro|_ASM_IA64_UNALIGNED_H
mdefine_line|#define _ASM_IA64_UNALIGNED_H
macro_line|#include &lt;linux/types.h&gt;
multiline_comment|/*&n; * The main single-value unaligned transfer routines.  Derived from&n; * the Linux/Alpha version.&n; *&n; * Copyright (C) 1998, 1999, 2003 Hewlett-Packard Co&n; *&t;David Mosberger-Tang &lt;davidm@hpl.hp.com&gt;&n; */
DECL|macro|get_unaligned
mdefine_line|#define get_unaligned(ptr) &bslash;&n;&t;((__typeof__(*(ptr)))ia64_get_unaligned((ptr), sizeof(*(ptr))))
DECL|macro|put_unaligned
mdefine_line|#define put_unaligned(x,ptr) &bslash;&n;&t;ia64_put_unaligned((unsigned long)(x), (ptr), sizeof(*(ptr)))
DECL|struct|__una_u64
DECL|member|x
r_struct
id|__una_u64
(brace
id|__u64
id|x
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|__una_u32
DECL|member|x
r_struct
id|__una_u32
(brace
id|__u32
id|x
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|__una_u16
DECL|member|x
r_struct
id|__una_u16
(brace
id|__u16
id|x
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
)brace
suffix:semicolon
r_static
r_inline
r_int
r_int
DECL|function|__uld8
id|__uld8
(paren
r_const
r_int
r_int
op_star
id|addr
)paren
(brace
r_const
r_struct
id|__una_u64
op_star
id|ptr
op_assign
(paren
r_const
r_struct
id|__una_u64
op_star
)paren
id|addr
suffix:semicolon
r_return
id|ptr-&gt;x
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
DECL|function|__uld4
id|__uld4
(paren
r_const
r_int
r_int
op_star
id|addr
)paren
(brace
r_const
r_struct
id|__una_u32
op_star
id|ptr
op_assign
(paren
r_const
r_struct
id|__una_u32
op_star
)paren
id|addr
suffix:semicolon
r_return
id|ptr-&gt;x
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
DECL|function|__uld2
id|__uld2
(paren
r_const
r_int
r_int
op_star
id|addr
)paren
(brace
r_const
r_struct
id|__una_u16
op_star
id|ptr
op_assign
(paren
r_const
r_struct
id|__una_u16
op_star
)paren
id|addr
suffix:semicolon
r_return
id|ptr-&gt;x
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|__ust8
id|__ust8
(paren
r_int
r_int
id|val
comma
r_int
r_int
op_star
id|addr
)paren
(brace
r_struct
id|__una_u64
op_star
id|ptr
op_assign
(paren
r_struct
id|__una_u64
op_star
)paren
id|addr
suffix:semicolon
id|ptr-&gt;x
op_assign
id|val
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|__ust4
id|__ust4
(paren
r_int
r_int
id|val
comma
r_int
r_int
op_star
id|addr
)paren
(brace
r_struct
id|__una_u32
op_star
id|ptr
op_assign
(paren
r_struct
id|__una_u32
op_star
)paren
id|addr
suffix:semicolon
id|ptr-&gt;x
op_assign
id|val
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|__ust2
id|__ust2
(paren
r_int
r_int
id|val
comma
r_int
r_int
op_star
id|addr
)paren
(brace
r_struct
id|__una_u16
op_star
id|ptr
op_assign
(paren
r_struct
id|__una_u16
op_star
)paren
id|addr
suffix:semicolon
id|ptr-&gt;x
op_assign
id|val
suffix:semicolon
)brace
multiline_comment|/*&n; * This function doesn&squot;t actually exist.  The idea is that when someone uses the macros&n; * below with an unsupported size (datatype), the linker will alert us to the problem via&n; * an unresolved reference error.&n; */
r_extern
r_int
r_int
id|ia64_bad_unaligned_access_length
(paren
r_void
)paren
suffix:semicolon
DECL|macro|ia64_get_unaligned
mdefine_line|#define ia64_get_unaligned(_ptr,size)&t;&t;&t;&t;&t;&t;&bslash;&n;({&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;const void *__ia64_ptr = (_ptr);&t;&t;&t;&t;&t;&bslash;&n;&t;unsigned long __ia64_val;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;switch (size) {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;      case 1:&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__ia64_val = *(const unsigned char *) __ia64_ptr;&t;&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;      case 2:&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__ia64_val = __uld2((const unsigned short *)__ia64_ptr);&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;      case 4:&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__ia64_val = __uld4((const unsigned int *)__ia64_ptr);&t;&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;      case 8:&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__ia64_val = __uld8((const unsigned long *)__ia64_ptr);&t;&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;      default:&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__ia64_val = ia64_bad_unaligned_access_length();&t;&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;__ia64_val;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;})
DECL|macro|ia64_put_unaligned
mdefine_line|#define ia64_put_unaligned(_val,_ptr,size)&t;&t;&t;&t;&bslash;&n;do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;const void *__ia64_ptr = (_ptr);&t;&t;&t;&t;&bslash;&n;&t;unsigned long __ia64_val = (_val);&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;switch (size) {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;      case 1:&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;*(unsigned char *)__ia64_ptr = (__ia64_val);&t;&t;&bslash;&n;&t;        break;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;      case 2:&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__ust2(__ia64_val, (unsigned short *)__ia64_ptr);&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;      case 4:&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__ust4(__ia64_val, (unsigned int *)__ia64_ptr);&t;&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;      case 8:&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__ust8(__ia64_val, (unsigned long *)__ia64_ptr);&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;      default:&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    &t;ia64_bad_unaligned_access_length();&t;&t;&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;} while (0)
macro_line|#endif /* _ASM_IA64_UNALIGNED_H */
eof
