macro_line|#ifndef _ASM_IA64_SAL_H
DECL|macro|_ASM_IA64_SAL_H
mdefine_line|#define _ASM_IA64_SAL_H
multiline_comment|/*&n; * System Abstraction Layer definitions.&n; *&n; * This is based on version 2.5 of the manual &quot;IA-64 System&n; * Abstraction Layer&quot;.&n; *&n; * Copyright (C) 2001 Intel&n; * Copyright (C) 2001 Fred Lewis &lt;frederick.v.lewis@intel.com&gt;&n; * Copyright (C) 1998, 1999, 2001 Hewlett-Packard Co&n; * Copyright (C) 1998, 1999, 2001 David Mosberger-Tang &lt;davidm@hpl.hp.com&gt;&n; * Copyright (C) 1999 Srinivasa Prasad Thirumalachar &lt;sprasad@sprasad.engr.sgi.com&gt;&n; *&n; * 01/01/03 fvlewis Updated Error Record Structures to conform with Nov. 2000&n; *                  revision of the SAL spec.&n; * 99/09/29 davidm&t;Updated for SAL 2.6.&n; * 00/03/29 cfleck      Updated SAL Error Logging info for processor (SAL 2.6) &n; *                      (plus examples of platform error info structures from smariset @ Intel)&n; */
macro_line|#include &lt;linux/spinlock.h&gt;
macro_line|#include &lt;asm/pal.h&gt;
macro_line|#include &lt;asm/efi.h&gt;
macro_line|#include &lt;asm/system.h&gt;
macro_line|#include &lt;asm/fpu.h&gt;
r_extern
id|spinlock_t
id|sal_lock
suffix:semicolon
multiline_comment|/* SAL spec _requires_ eight args for each call. */
DECL|macro|__SAL_CALL
mdefine_line|#define __SAL_CALL(result,a0,a1,a2,a3,a4,a5,a6,a7)&t;&bslash;&n;&t;result = (*ia64_sal)(a0,a1,a2,a3,a4,a5,a6,a7)
DECL|macro|SAL_CALL
macro_line|# define SAL_CALL(result,args...) do {&t;&t;&t;&bslash;&n;&t;unsigned long flags;&t;&t;&t;&t;&bslash;&n;&t;spin_lock_irqsave(&amp;sal_lock, flags);&t;&t;&bslash;&n;&t;__SAL_CALL(result,args);&t;&t;&t;&bslash;&n;&t;spin_unlock_irqrestore(&amp;sal_lock, flags);&t;&bslash;&n;} while (0)
DECL|macro|SAL_SET_VECTORS
mdefine_line|#define SAL_SET_VECTORS&t;&t;&t;0x01000000
DECL|macro|SAL_GET_STATE_INFO
mdefine_line|#define SAL_GET_STATE_INFO&t;&t;0x01000001
DECL|macro|SAL_GET_STATE_INFO_SIZE
mdefine_line|#define SAL_GET_STATE_INFO_SIZE&t;&t;0x01000002
DECL|macro|SAL_CLEAR_STATE_INFO
mdefine_line|#define SAL_CLEAR_STATE_INFO&t;&t;0x01000003
DECL|macro|SAL_MC_RENDEZ
mdefine_line|#define SAL_MC_RENDEZ&t;&t;&t;0x01000004
DECL|macro|SAL_MC_SET_PARAMS
mdefine_line|#define SAL_MC_SET_PARAMS&t;&t;0x01000005
DECL|macro|SAL_REGISTER_PHYSICAL_ADDR
mdefine_line|#define SAL_REGISTER_PHYSICAL_ADDR&t;0x01000006
DECL|macro|SAL_CACHE_FLUSH
mdefine_line|#define SAL_CACHE_FLUSH&t;&t;&t;0x01000008
DECL|macro|SAL_CACHE_INIT
mdefine_line|#define SAL_CACHE_INIT&t;&t;&t;0x01000009
DECL|macro|SAL_PCI_CONFIG_READ
mdefine_line|#define SAL_PCI_CONFIG_READ&t;&t;0x01000010
DECL|macro|SAL_PCI_CONFIG_WRITE
mdefine_line|#define SAL_PCI_CONFIG_WRITE&t;&t;0x01000011
DECL|macro|SAL_FREQ_BASE
mdefine_line|#define SAL_FREQ_BASE&t;&t;&t;0x01000012
DECL|macro|SAL_UPDATE_PAL
mdefine_line|#define SAL_UPDATE_PAL&t;&t;&t;0x01000020
DECL|struct|ia64_sal_retval
r_struct
id|ia64_sal_retval
(brace
multiline_comment|/*&n;&t; * A zero status value indicates call completed without error.&n;&t; * A negative status value indicates reason of call failure.&n;&t; * A positive status value indicates success but an&n;&t; * informational value should be printed (e.g., &quot;reboot for&n;&t; * change to take effect&quot;).&n;&t; */
DECL|member|status
id|s64
id|status
suffix:semicolon
DECL|member|v0
id|u64
id|v0
suffix:semicolon
DECL|member|v1
id|u64
id|v1
suffix:semicolon
DECL|member|v2
id|u64
id|v2
suffix:semicolon
)brace
suffix:semicolon
DECL|typedef|ia64_sal_handler
r_typedef
r_struct
id|ia64_sal_retval
(paren
op_star
id|ia64_sal_handler
)paren
(paren
id|u64
comma
dot
dot
dot
)paren
suffix:semicolon
r_enum
(brace
DECL|enumerator|SAL_FREQ_BASE_PLATFORM
id|SAL_FREQ_BASE_PLATFORM
op_assign
l_int|0
comma
DECL|enumerator|SAL_FREQ_BASE_INTERVAL_TIMER
id|SAL_FREQ_BASE_INTERVAL_TIMER
op_assign
l_int|1
comma
DECL|enumerator|SAL_FREQ_BASE_REALTIME_CLOCK
id|SAL_FREQ_BASE_REALTIME_CLOCK
op_assign
l_int|2
)brace
suffix:semicolon
multiline_comment|/*&n; * The SAL system table is followed by a variable number of variable&n; * length descriptors.  The structure of these descriptors follows&n; * below.&n; * The defininition follows SAL specs from July 2000&n; */
DECL|struct|ia64_sal_systab
r_struct
id|ia64_sal_systab
(brace
DECL|member|signature
id|u8
id|signature
(braket
l_int|4
)braket
suffix:semicolon
multiline_comment|/* should be &quot;SST_&quot; */
DECL|member|size
id|u32
id|size
suffix:semicolon
multiline_comment|/* size of this table in bytes */
DECL|member|sal_rev_minor
id|u8
id|sal_rev_minor
suffix:semicolon
DECL|member|sal_rev_major
id|u8
id|sal_rev_major
suffix:semicolon
DECL|member|entry_count
id|u16
id|entry_count
suffix:semicolon
multiline_comment|/* # of entries in variable portion */
DECL|member|checksum
id|u8
id|checksum
suffix:semicolon
DECL|member|reserved1
id|u8
id|reserved1
(braket
l_int|7
)braket
suffix:semicolon
DECL|member|sal_a_rev_minor
id|u8
id|sal_a_rev_minor
suffix:semicolon
DECL|member|sal_a_rev_major
id|u8
id|sal_a_rev_major
suffix:semicolon
DECL|member|sal_b_rev_minor
id|u8
id|sal_b_rev_minor
suffix:semicolon
DECL|member|sal_b_rev_major
id|u8
id|sal_b_rev_major
suffix:semicolon
multiline_comment|/* oem_id &amp; product_id: terminating NUL is missing if string is exactly 32 bytes long. */
DECL|member|oem_id
id|u8
id|oem_id
(braket
l_int|32
)braket
suffix:semicolon
DECL|member|product_id
id|u8
id|product_id
(braket
l_int|32
)braket
suffix:semicolon
multiline_comment|/* ASCII product id  */
DECL|member|reserved2
id|u8
id|reserved2
(braket
l_int|8
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|enum|sal_systab_entry_type
r_enum
id|sal_systab_entry_type
(brace
DECL|enumerator|SAL_DESC_ENTRY_POINT
id|SAL_DESC_ENTRY_POINT
op_assign
l_int|0
comma
DECL|enumerator|SAL_DESC_MEMORY
id|SAL_DESC_MEMORY
op_assign
l_int|1
comma
DECL|enumerator|SAL_DESC_PLATFORM_FEATURE
id|SAL_DESC_PLATFORM_FEATURE
op_assign
l_int|2
comma
DECL|enumerator|SAL_DESC_TR
id|SAL_DESC_TR
op_assign
l_int|3
comma
DECL|enumerator|SAL_DESC_PTC
id|SAL_DESC_PTC
op_assign
l_int|4
comma
DECL|enumerator|SAL_DESC_AP_WAKEUP
id|SAL_DESC_AP_WAKEUP
op_assign
l_int|5
)brace
suffix:semicolon
multiline_comment|/*&n; * Entry type:&t;Size:&n; *&t;0&t;48&n; *&t;1&t;32&n; *&t;2&t;16&n; *&t;3&t;32&n; *&t;4&t;16&n; *&t;5&t;16&n; */
DECL|macro|SAL_DESC_SIZE
mdefine_line|#define SAL_DESC_SIZE(type)&t;&quot;&bslash;060&bslash;040&bslash;020&bslash;040&bslash;020&bslash;020&quot;[(unsigned) type]
DECL|struct|ia64_sal_desc_entry_point
r_typedef
r_struct
id|ia64_sal_desc_entry_point
(brace
DECL|member|type
id|u8
id|type
suffix:semicolon
DECL|member|reserved1
id|u8
id|reserved1
(braket
l_int|7
)braket
suffix:semicolon
DECL|member|pal_proc
id|u64
id|pal_proc
suffix:semicolon
DECL|member|sal_proc
id|u64
id|sal_proc
suffix:semicolon
DECL|member|gp
id|u64
id|gp
suffix:semicolon
DECL|member|reserved2
id|u8
id|reserved2
(braket
l_int|16
)braket
suffix:semicolon
DECL|typedef|ia64_sal_desc_entry_point_t
)brace
id|ia64_sal_desc_entry_point_t
suffix:semicolon
DECL|struct|ia64_sal_desc_memory
r_typedef
r_struct
id|ia64_sal_desc_memory
(brace
DECL|member|type
id|u8
id|type
suffix:semicolon
DECL|member|used_by_sal
id|u8
id|used_by_sal
suffix:semicolon
multiline_comment|/* needs to be mapped for SAL? */
DECL|member|mem_attr
id|u8
id|mem_attr
suffix:semicolon
multiline_comment|/* current memory attribute setting */
DECL|member|access_rights
id|u8
id|access_rights
suffix:semicolon
multiline_comment|/* access rights set up by SAL */
DECL|member|mem_attr_mask
id|u8
id|mem_attr_mask
suffix:semicolon
multiline_comment|/* mask of supported memory attributes */
DECL|member|reserved1
id|u8
id|reserved1
suffix:semicolon
DECL|member|mem_type
id|u8
id|mem_type
suffix:semicolon
multiline_comment|/* memory type */
DECL|member|mem_usage
id|u8
id|mem_usage
suffix:semicolon
multiline_comment|/* memory usage */
DECL|member|addr
id|u64
id|addr
suffix:semicolon
multiline_comment|/* physical address of memory */
DECL|member|length
id|u32
id|length
suffix:semicolon
multiline_comment|/* length (multiple of 4KB pages) */
DECL|member|reserved2
id|u32
id|reserved2
suffix:semicolon
DECL|member|oem_reserved
id|u8
id|oem_reserved
(braket
l_int|8
)braket
suffix:semicolon
DECL|typedef|ia64_sal_desc_memory_t
)brace
id|ia64_sal_desc_memory_t
suffix:semicolon
DECL|macro|IA64_SAL_PLATFORM_FEATURE_BUS_LOCK
mdefine_line|#define IA64_SAL_PLATFORM_FEATURE_BUS_LOCK&t;&t;(1 &lt;&lt; 0)
DECL|macro|IA64_SAL_PLATFORM_FEATURE_IRQ_REDIR_HINT
mdefine_line|#define IA64_SAL_PLATFORM_FEATURE_IRQ_REDIR_HINT&t;(1 &lt;&lt; 1)
DECL|macro|IA64_SAL_PLATFORM_FEATURE_IPI_REDIR_HINT
mdefine_line|#define IA64_SAL_PLATFORM_FEATURE_IPI_REDIR_HINT&t;(1 &lt;&lt; 2)
DECL|struct|ia64_sal_desc_platform_feature
r_typedef
r_struct
id|ia64_sal_desc_platform_feature
(brace
DECL|member|type
id|u8
id|type
suffix:semicolon
DECL|member|feature_mask
id|u8
id|feature_mask
suffix:semicolon
DECL|member|reserved1
id|u8
id|reserved1
(braket
l_int|14
)braket
suffix:semicolon
DECL|typedef|ia64_sal_desc_platform_feature_t
)brace
id|ia64_sal_desc_platform_feature_t
suffix:semicolon
DECL|struct|ia64_sal_desc_tr
r_typedef
r_struct
id|ia64_sal_desc_tr
(brace
DECL|member|type
id|u8
id|type
suffix:semicolon
DECL|member|tr_type
id|u8
id|tr_type
suffix:semicolon
multiline_comment|/* 0 == instruction, 1 == data */
DECL|member|regnum
id|u8
id|regnum
suffix:semicolon
multiline_comment|/* translation register number */
DECL|member|reserved1
id|u8
id|reserved1
(braket
l_int|5
)braket
suffix:semicolon
DECL|member|addr
id|u64
id|addr
suffix:semicolon
multiline_comment|/* virtual address of area covered */
DECL|member|page_size
id|u64
id|page_size
suffix:semicolon
multiline_comment|/* encoded page size */
DECL|member|reserved2
id|u8
id|reserved2
(braket
l_int|8
)braket
suffix:semicolon
DECL|typedef|ia64_sal_desc_tr_t
)brace
id|ia64_sal_desc_tr_t
suffix:semicolon
DECL|struct|ia64_sal_desc_ptc
r_typedef
r_struct
id|ia64_sal_desc_ptc
(brace
DECL|member|type
id|u8
id|type
suffix:semicolon
DECL|member|reserved1
id|u8
id|reserved1
(braket
l_int|3
)braket
suffix:semicolon
DECL|member|num_domains
id|u32
id|num_domains
suffix:semicolon
multiline_comment|/* # of coherence domains */
DECL|member|domain_info
id|u64
id|domain_info
suffix:semicolon
multiline_comment|/* physical address of domain info table */
DECL|typedef|ia64_sal_desc_ptc_t
)brace
id|ia64_sal_desc_ptc_t
suffix:semicolon
DECL|struct|ia64_sal_ptc_domain_info
r_typedef
r_struct
id|ia64_sal_ptc_domain_info
(brace
DECL|member|proc_count
id|u64
id|proc_count
suffix:semicolon
multiline_comment|/* number of processors in domain */
DECL|member|proc_list
id|u64
id|proc_list
suffix:semicolon
multiline_comment|/* physical address of LID array */
DECL|typedef|ia64_sal_ptc_domain_info_t
)brace
id|ia64_sal_ptc_domain_info_t
suffix:semicolon
DECL|struct|ia64_sal_ptc_domain_proc_entry
r_typedef
r_struct
id|ia64_sal_ptc_domain_proc_entry
(brace
DECL|member|id
id|u64
id|id
suffix:colon
l_int|8
suffix:semicolon
multiline_comment|/* id of processor */
DECL|member|eid
id|u64
id|eid
suffix:colon
l_int|8
suffix:semicolon
multiline_comment|/* eid of processor */
DECL|typedef|ia64_sal_ptc_domain_proc_entry_t
)brace
id|ia64_sal_ptc_domain_proc_entry_t
suffix:semicolon
DECL|macro|IA64_SAL_AP_EXTERNAL_INT
mdefine_line|#define IA64_SAL_AP_EXTERNAL_INT 0
DECL|struct|ia64_sal_desc_ap_wakeup
r_typedef
r_struct
id|ia64_sal_desc_ap_wakeup
(brace
DECL|member|type
id|u8
id|type
suffix:semicolon
DECL|member|mechanism
id|u8
id|mechanism
suffix:semicolon
multiline_comment|/* 0 == external interrupt */
DECL|member|reserved1
id|u8
id|reserved1
(braket
l_int|6
)braket
suffix:semicolon
DECL|member|vector
id|u64
id|vector
suffix:semicolon
multiline_comment|/* interrupt vector in range 0x10-0xff */
DECL|typedef|ia64_sal_desc_ap_wakeup_t
)brace
id|ia64_sal_desc_ap_wakeup_t
suffix:semicolon
r_extern
id|ia64_sal_handler
id|ia64_sal
suffix:semicolon
r_extern
r_struct
id|ia64_sal_desc_ptc
op_star
id|ia64_ptc_domain_info
suffix:semicolon
r_extern
r_const
r_char
op_star
id|ia64_sal_strerror
(paren
r_int
id|status
)paren
suffix:semicolon
r_extern
r_void
id|ia64_sal_init
(paren
r_struct
id|ia64_sal_systab
op_star
id|sal_systab
)paren
suffix:semicolon
multiline_comment|/* SAL information type encodings */
r_enum
(brace
DECL|enumerator|SAL_INFO_TYPE_MCA
id|SAL_INFO_TYPE_MCA
op_assign
l_int|0
comma
multiline_comment|/* Machine check abort information */
DECL|enumerator|SAL_INFO_TYPE_INIT
id|SAL_INFO_TYPE_INIT
op_assign
l_int|1
comma
multiline_comment|/* Init information */
DECL|enumerator|SAL_INFO_TYPE_CMC
id|SAL_INFO_TYPE_CMC
op_assign
l_int|2
comma
multiline_comment|/* Corrected machine check information */
DECL|enumerator|SAL_INFO_TYPE_CPE
id|SAL_INFO_TYPE_CPE
op_assign
l_int|3
multiline_comment|/* Corrected platform error information */
)brace
suffix:semicolon
multiline_comment|/* Encodings for machine check parameter types */
r_enum
(brace
DECL|enumerator|SAL_MC_PARAM_RENDEZ_INT
id|SAL_MC_PARAM_RENDEZ_INT
op_assign
l_int|1
comma
multiline_comment|/* Rendezevous interrupt */
DECL|enumerator|SAL_MC_PARAM_RENDEZ_WAKEUP
id|SAL_MC_PARAM_RENDEZ_WAKEUP
op_assign
l_int|2
comma
multiline_comment|/* Wakeup */
DECL|enumerator|SAL_MC_PARAM_CPE_INT
id|SAL_MC_PARAM_CPE_INT
op_assign
l_int|3
multiline_comment|/* Corrected Platform Error Int */
)brace
suffix:semicolon
multiline_comment|/* Encodings for rendezvous mechanisms */
r_enum
(brace
DECL|enumerator|SAL_MC_PARAM_MECHANISM_INT
id|SAL_MC_PARAM_MECHANISM_INT
op_assign
l_int|1
comma
multiline_comment|/* Use interrupt */
DECL|enumerator|SAL_MC_PARAM_MECHANISM_MEM
id|SAL_MC_PARAM_MECHANISM_MEM
op_assign
l_int|2
multiline_comment|/* Use memory synchronization variable*/
)brace
suffix:semicolon
multiline_comment|/* Encodings for vectors which can be registered by the OS with SAL */
r_enum
(brace
DECL|enumerator|SAL_VECTOR_OS_MCA
id|SAL_VECTOR_OS_MCA
op_assign
l_int|0
comma
DECL|enumerator|SAL_VECTOR_OS_INIT
id|SAL_VECTOR_OS_INIT
op_assign
l_int|1
comma
DECL|enumerator|SAL_VECTOR_OS_BOOT_RENDEZ
id|SAL_VECTOR_OS_BOOT_RENDEZ
op_assign
l_int|2
)brace
suffix:semicolon
multiline_comment|/*&n;** Definition of the SAL Error Log from the SAL spec&n;*/
multiline_comment|/* SAL Error Record Section GUID Definitions */
DECL|macro|SAL_PROC_DEV_ERR_SECT_GUID
mdefine_line|#define SAL_PROC_DEV_ERR_SECT_GUID  &bslash;&n;    ((efi_guid_t) { 0xe429faf1, 0x3cb7, 0x11d4, { 0xbc, 0xa7, 0x0, 0x80, &bslash;&n;                    0xc7, 0x3c, 0x88, 0x81 }} )
DECL|macro|SAL_PLAT_MEM_DEV_ERR_SECT_GUID
mdefine_line|#define SAL_PLAT_MEM_DEV_ERR_SECT_GUID  &bslash;&n;    ((efi_guid_t) { 0xe429faf2, 0x3cb7, 0x11d4, { 0xbc, 0xa7, 0x0, 0x80, &bslash;&n;                    0xc7, 0x3c, 0x88, 0x81 }} )
DECL|macro|SAL_PLAT_SEL_DEV_ERR_SECT_GUID
mdefine_line|#define SAL_PLAT_SEL_DEV_ERR_SECT_GUID  &bslash;&n;    ((efi_guid_t) { 0xe429faf3, 0x3cb7, 0x11d4, { 0xbc, 0xa7, 0x0, 0x80, &bslash;&n;                    0xc7, 0x3c, 0x88, 0x81 }} )
DECL|macro|SAL_PLAT_PCI_BUS_ERR_SECT_GUID
mdefine_line|#define SAL_PLAT_PCI_BUS_ERR_SECT_GUID  &bslash;&n;    ((efi_guid_t) { 0xe429faf4, 0x3cb7, 0x11d4, { 0xbc, 0xa7, 0x0, 0x80, &bslash;&n;                    0xc7, 0x3c, 0x88, 0x81 }} )
DECL|macro|SAL_PLAT_SMBIOS_DEV_ERR_SECT_GUID
mdefine_line|#define SAL_PLAT_SMBIOS_DEV_ERR_SECT_GUID  &bslash;&n;    ((efi_guid_t) { 0xe429faf5, 0x3cb7, 0x11d4, { 0xbc, 0xa7, 0x0, 0x80, &bslash;&n;                    0xc7, 0x3c, 0x88, 0x81 }} )
DECL|macro|SAL_PLAT_PCI_COMP_ERR_SECT_GUID
mdefine_line|#define SAL_PLAT_PCI_COMP_ERR_SECT_GUID  &bslash;&n;    ((efi_guid_t) { 0xe429faf6, 0x3cb7, 0x11d4, { 0xbc, 0xa7, 0x0, 0x80, &bslash;&n;                    0xc7, 0x3c, 0x88, 0x81 }} )
DECL|macro|SAL_PLAT_SPECIFIC_ERR_SECT_GUID
mdefine_line|#define SAL_PLAT_SPECIFIC_ERR_SECT_GUID  &bslash;&n;    ((efi_guid_t) { 0xe429faf7, 0x3cb7, 0x11d4, { 0xbc, 0xa7, 0x0, 0x80, &bslash;&n;                    0xc7, 0x3c, 0x88, 0x81 }} )
DECL|macro|SAL_PLAT_HOST_CTLR_ERR_SECT_GUID
mdefine_line|#define SAL_PLAT_HOST_CTLR_ERR_SECT_GUID  &bslash;&n;    ((efi_guid_t) { 0xe429faf8, 0x3cb7, 0x11d4, { 0xbc, 0xa7, 0x0, 0x80, &bslash;&n;                    0xc7, 0x3c, 0x88, 0x81 }} )
DECL|macro|SAL_PLAT_BUS_ERR_SECT_GUID
mdefine_line|#define SAL_PLAT_BUS_ERR_SECT_GUID  &bslash;&n;    ((efi_guid_t) { 0xe429faf9, 0x3cb7, 0x11d4, { 0xbc, 0xa7, 0x0, 0x80, &bslash;&n;                    0xc7, 0x3c, 0x88, 0x81 }} )
DECL|macro|MAX_CACHE_ERRORS
mdefine_line|#define MAX_CACHE_ERRORS&t;&t;&t;6
DECL|macro|MAX_TLB_ERRORS
mdefine_line|#define MAX_TLB_ERRORS&t;&t;&t;&t;6
DECL|macro|MAX_BUS_ERRORS
mdefine_line|#define MAX_BUS_ERRORS&t;&t;&t;&t;1
multiline_comment|/* Definition of version  according to SAL spec for logging purposes */
DECL|struct|sal_log_revision
r_typedef
r_struct
id|sal_log_revision
(brace
DECL|member|minor
id|u8
id|minor
suffix:semicolon
multiline_comment|/* BCD (0..99) */
DECL|member|major
id|u8
id|major
suffix:semicolon
multiline_comment|/* BCD (0..99) */
DECL|typedef|sal_log_revision_t
)brace
id|sal_log_revision_t
suffix:semicolon
multiline_comment|/* Definition of timestamp according to SAL spec for logging purposes */
DECL|struct|sal_log_timestamp
r_typedef
r_struct
id|sal_log_timestamp
(brace
DECL|member|slh_second
id|u8
id|slh_second
suffix:semicolon
multiline_comment|/* Second (0..59) */
DECL|member|slh_minute
id|u8
id|slh_minute
suffix:semicolon
multiline_comment|/* Minute (0..59) */
DECL|member|slh_hour
id|u8
id|slh_hour
suffix:semicolon
multiline_comment|/* Hour (0..23) */
DECL|member|slh_reserved
id|u8
id|slh_reserved
suffix:semicolon
DECL|member|slh_day
id|u8
id|slh_day
suffix:semicolon
multiline_comment|/* Day (1..31) */
DECL|member|slh_month
id|u8
id|slh_month
suffix:semicolon
multiline_comment|/* Month (1..12) */
DECL|member|slh_year
id|u8
id|slh_year
suffix:semicolon
multiline_comment|/* Year (00..99) */
DECL|member|slh_century
id|u8
id|slh_century
suffix:semicolon
multiline_comment|/* Century (19, 20, 21, ...) */
DECL|typedef|sal_log_timestamp_t
)brace
id|sal_log_timestamp_t
suffix:semicolon
multiline_comment|/* Definition of log record  header structures */
DECL|struct|sal_log_record_header
r_typedef
r_struct
id|sal_log_record_header
(brace
DECL|member|id
id|u64
id|id
suffix:semicolon
multiline_comment|/* Unique monotonically increasing ID */
DECL|member|revision
id|sal_log_revision_t
id|revision
suffix:semicolon
multiline_comment|/* Major and Minor revision of header */
DECL|member|severity
id|u16
id|severity
suffix:semicolon
multiline_comment|/* Error Severity */
DECL|member|len
id|u32
id|len
suffix:semicolon
multiline_comment|/* Length of this error log in bytes */
DECL|member|timestamp
id|sal_log_timestamp_t
id|timestamp
suffix:semicolon
multiline_comment|/* Timestamp */
DECL|member|platform_guid
id|efi_guid_t
id|platform_guid
suffix:semicolon
multiline_comment|/* Unique OEM Platform ID */
DECL|typedef|sal_log_record_header_t
)brace
id|sal_log_record_header_t
suffix:semicolon
multiline_comment|/* Definition of log section header structures */
DECL|struct|sal_log_sec_header
r_typedef
r_struct
id|sal_log_sec_header
(brace
DECL|member|guid
id|efi_guid_t
id|guid
suffix:semicolon
multiline_comment|/* Unique Section ID */
DECL|member|revision
id|sal_log_revision_t
id|revision
suffix:semicolon
multiline_comment|/* Major and Minor revision of Section */
DECL|member|reserved
id|u16
id|reserved
suffix:semicolon
DECL|member|len
id|u32
id|len
suffix:semicolon
multiline_comment|/* Section length */
DECL|typedef|sal_log_section_hdr_t
)brace
id|sal_log_section_hdr_t
suffix:semicolon
DECL|struct|sal_log_mod_error_info
r_typedef
r_struct
id|sal_log_mod_error_info
(brace
r_struct
(brace
DECL|member|check_info
id|u64
id|check_info
suffix:colon
l_int|1
comma
DECL|member|requestor_identifier
id|requestor_identifier
suffix:colon
l_int|1
comma
DECL|member|responder_identifier
id|responder_identifier
suffix:colon
l_int|1
comma
DECL|member|target_identifier
id|target_identifier
suffix:colon
l_int|1
comma
DECL|member|precise_ip
id|precise_ip
suffix:colon
l_int|1
comma
DECL|member|reserved
id|reserved
suffix:colon
l_int|59
suffix:semicolon
DECL|member|valid
)brace
id|valid
suffix:semicolon
DECL|member|check_info
id|u64
id|check_info
suffix:semicolon
DECL|member|requestor_identifier
id|u64
id|requestor_identifier
suffix:semicolon
DECL|member|responder_identifier
id|u64
id|responder_identifier
suffix:semicolon
DECL|member|target_identifier
id|u64
id|target_identifier
suffix:semicolon
DECL|member|precise_ip
id|u64
id|precise_ip
suffix:semicolon
DECL|typedef|sal_log_mod_error_info_t
)brace
id|sal_log_mod_error_info_t
suffix:semicolon
DECL|struct|sal_processor_static_info
r_typedef
r_struct
id|sal_processor_static_info
(brace
r_struct
(brace
DECL|member|minstate
id|u64
id|minstate
suffix:colon
l_int|1
comma
DECL|member|br
id|br
suffix:colon
l_int|1
comma
DECL|member|cr
id|cr
suffix:colon
l_int|1
comma
DECL|member|ar
id|ar
suffix:colon
l_int|1
comma
DECL|member|rr
id|rr
suffix:colon
l_int|1
comma
DECL|member|fr
id|fr
suffix:colon
l_int|1
comma
DECL|member|reserved
id|reserved
suffix:colon
l_int|58
suffix:semicolon
DECL|member|valid
)brace
id|valid
suffix:semicolon
DECL|member|min_state_area
id|pal_min_state_area_t
id|min_state_area
suffix:semicolon
DECL|member|br
id|u64
id|br
(braket
l_int|8
)braket
suffix:semicolon
DECL|member|cr
id|u64
id|cr
(braket
l_int|128
)braket
suffix:semicolon
DECL|member|ar
id|u64
id|ar
(braket
l_int|128
)braket
suffix:semicolon
DECL|member|rr
id|u64
id|rr
(braket
l_int|8
)braket
suffix:semicolon
DECL|member|fr
r_struct
id|ia64_fpreg
id|fr
(braket
l_int|128
)braket
suffix:semicolon
DECL|typedef|sal_processor_static_info_t
)brace
id|sal_processor_static_info_t
suffix:semicolon
DECL|struct|sal_log_processor_info
r_typedef
r_struct
id|sal_log_processor_info
(brace
DECL|member|header
id|sal_log_section_hdr_t
id|header
suffix:semicolon
r_struct
(brace
DECL|member|proc_error_map
id|u64
id|proc_error_map
suffix:colon
l_int|1
comma
DECL|member|proc_state_param
id|proc_state_param
suffix:colon
l_int|1
comma
DECL|member|proc_cr_lid
id|proc_cr_lid
suffix:colon
l_int|1
comma
DECL|member|psi_static_struct
id|psi_static_struct
suffix:colon
l_int|1
comma
DECL|member|num_cache_check
id|num_cache_check
suffix:colon
l_int|4
comma
DECL|member|num_tlb_check
id|num_tlb_check
suffix:colon
l_int|4
comma
DECL|member|num_bus_check
id|num_bus_check
suffix:colon
l_int|4
comma
DECL|member|num_reg_file_check
id|num_reg_file_check
suffix:colon
l_int|4
comma
DECL|member|num_ms_check
id|num_ms_check
suffix:colon
l_int|4
comma
DECL|member|cpuid_info
id|cpuid_info
suffix:colon
l_int|1
comma
DECL|member|reserved1
id|reserved1
suffix:colon
l_int|39
suffix:semicolon
DECL|member|valid
)brace
id|valid
suffix:semicolon
DECL|member|proc_error_map
id|u64
id|proc_error_map
suffix:semicolon
DECL|member|proc_state_parameter
id|u64
id|proc_state_parameter
suffix:semicolon
DECL|member|proc_cr_lid
id|u64
id|proc_cr_lid
suffix:semicolon
DECL|member|cache_check_info
id|sal_log_mod_error_info_t
id|cache_check_info
(braket
l_int|16
)braket
suffix:semicolon
DECL|member|tlb_check_info
id|sal_log_mod_error_info_t
id|tlb_check_info
(braket
l_int|16
)braket
suffix:semicolon
DECL|member|bus_check_info
id|sal_log_mod_error_info_t
id|bus_check_info
(braket
l_int|16
)braket
suffix:semicolon
DECL|member|reg_file_check_info
id|sal_log_mod_error_info_t
id|reg_file_check_info
(braket
l_int|16
)braket
suffix:semicolon
DECL|member|ms_check_info
id|sal_log_mod_error_info_t
id|ms_check_info
(braket
l_int|16
)braket
suffix:semicolon
r_struct
(brace
DECL|member|regs
id|u64
id|regs
(braket
l_int|5
)braket
suffix:semicolon
DECL|member|reserved
id|u64
id|reserved
suffix:semicolon
DECL|member|cpuid_info
)brace
id|cpuid_info
suffix:semicolon
DECL|member|processor_static_info
id|sal_processor_static_info_t
id|processor_static_info
suffix:semicolon
DECL|typedef|sal_log_processor_info_t
)brace
id|sal_log_processor_info_t
suffix:semicolon
multiline_comment|/* platform error log structures */
DECL|struct|sal_log_mem_dev_err_info
r_typedef
r_struct
id|sal_log_mem_dev_err_info
(brace
DECL|member|header
id|sal_log_section_hdr_t
id|header
suffix:semicolon
r_struct
(brace
DECL|member|error_status
id|u64
id|error_status
suffix:colon
l_int|1
comma
DECL|member|physical_addr
id|physical_addr
suffix:colon
l_int|1
comma
DECL|member|addr_mask
id|addr_mask
suffix:colon
l_int|1
comma
DECL|member|node
id|node
suffix:colon
l_int|1
comma
DECL|member|card
id|card
suffix:colon
l_int|1
comma
DECL|member|module
id|module
suffix:colon
l_int|1
comma
DECL|member|bank
id|bank
suffix:colon
l_int|1
comma
DECL|member|device
id|device
suffix:colon
l_int|1
comma
DECL|member|row
id|row
suffix:colon
l_int|1
comma
DECL|member|column
id|column
suffix:colon
l_int|1
comma
DECL|member|bit_position
id|bit_position
suffix:colon
l_int|1
comma
DECL|member|requestor_id
id|requestor_id
suffix:colon
l_int|1
comma
DECL|member|responder_id
id|responder_id
suffix:colon
l_int|1
comma
DECL|member|target_id
id|target_id
suffix:colon
l_int|1
comma
DECL|member|bus_spec_data
id|bus_spec_data
suffix:colon
l_int|1
comma
DECL|member|oem_id
id|oem_id
suffix:colon
l_int|1
comma
DECL|member|oem_data
id|oem_data
suffix:colon
l_int|1
comma
DECL|member|reserved
id|reserved
suffix:colon
l_int|47
suffix:semicolon
DECL|member|valid
)brace
id|valid
suffix:semicolon
DECL|member|error_status
id|u64
id|error_status
suffix:semicolon
DECL|member|physical_addr
id|u64
id|physical_addr
suffix:semicolon
DECL|member|addr_mask
id|u64
id|addr_mask
suffix:semicolon
DECL|member|node
id|u16
id|node
suffix:semicolon
DECL|member|card
id|u16
id|card
suffix:semicolon
DECL|member|module
id|u16
id|module
suffix:semicolon
DECL|member|bank
id|u16
id|bank
suffix:semicolon
DECL|member|device
id|u16
id|device
suffix:semicolon
DECL|member|row
id|u16
id|row
suffix:semicolon
DECL|member|column
id|u16
id|column
suffix:semicolon
DECL|member|bit_position
id|u16
id|bit_position
suffix:semicolon
DECL|member|requestor_id
id|u64
id|requestor_id
suffix:semicolon
DECL|member|responder_id
id|u64
id|responder_id
suffix:semicolon
DECL|member|target_id
id|u64
id|target_id
suffix:semicolon
DECL|member|bus_spec_data
id|u64
id|bus_spec_data
suffix:semicolon
DECL|member|oem_id
id|u8
id|oem_id
(braket
l_int|16
)braket
suffix:semicolon
DECL|member|oem_data
id|u8
id|oem_data
(braket
l_int|1
)braket
suffix:semicolon
multiline_comment|/* Variable length data */
DECL|typedef|sal_log_mem_dev_err_info_t
)brace
id|sal_log_mem_dev_err_info_t
suffix:semicolon
DECL|struct|sal_log_sel_dev_err_info
r_typedef
r_struct
id|sal_log_sel_dev_err_info
(brace
DECL|member|header
id|sal_log_section_hdr_t
id|header
suffix:semicolon
r_struct
(brace
DECL|member|record_id
id|u64
id|record_id
suffix:colon
l_int|1
comma
DECL|member|record_type
id|record_type
suffix:colon
l_int|1
comma
DECL|member|generator_id
id|generator_id
suffix:colon
l_int|1
comma
DECL|member|evm_rev
id|evm_rev
suffix:colon
l_int|1
comma
DECL|member|sensor_type
id|sensor_type
suffix:colon
l_int|1
comma
DECL|member|sensor_num
id|sensor_num
suffix:colon
l_int|1
comma
DECL|member|event_dir
id|event_dir
suffix:colon
l_int|1
comma
DECL|member|event_data1
id|event_data1
suffix:colon
l_int|1
comma
DECL|member|event_data2
id|event_data2
suffix:colon
l_int|1
comma
DECL|member|event_data3
id|event_data3
suffix:colon
l_int|1
comma
DECL|member|reserved
id|reserved
suffix:colon
l_int|54
suffix:semicolon
DECL|member|valid
)brace
id|valid
suffix:semicolon
DECL|member|record_id
id|u16
id|record_id
suffix:semicolon
DECL|member|record_type
id|u8
id|record_type
suffix:semicolon
DECL|member|timestamp
id|u8
id|timestamp
(braket
l_int|4
)braket
suffix:semicolon
DECL|member|generator_id
id|u16
id|generator_id
suffix:semicolon
DECL|member|evm_rev
id|u8
id|evm_rev
suffix:semicolon
DECL|member|sensor_type
id|u8
id|sensor_type
suffix:semicolon
DECL|member|sensor_num
id|u8
id|sensor_num
suffix:semicolon
DECL|member|event_dir
id|u8
id|event_dir
suffix:semicolon
DECL|member|event_data1
id|u8
id|event_data1
suffix:semicolon
DECL|member|event_data2
id|u8
id|event_data2
suffix:semicolon
DECL|member|event_data3
id|u8
id|event_data3
suffix:semicolon
DECL|typedef|sal_log_sel_dev_err_info_t
)brace
id|sal_log_sel_dev_err_info_t
suffix:semicolon
DECL|struct|sal_log_pci_bus_err_info
r_typedef
r_struct
id|sal_log_pci_bus_err_info
(brace
DECL|member|header
id|sal_log_section_hdr_t
id|header
suffix:semicolon
r_struct
(brace
DECL|member|err_status
id|u64
id|err_status
suffix:colon
l_int|1
comma
DECL|member|err_type
id|err_type
suffix:colon
l_int|1
comma
DECL|member|bus_id
id|bus_id
suffix:colon
l_int|1
comma
DECL|member|bus_address
id|bus_address
suffix:colon
l_int|1
comma
DECL|member|bus_data
id|bus_data
suffix:colon
l_int|1
comma
DECL|member|bus_cmd
id|bus_cmd
suffix:colon
l_int|1
comma
DECL|member|requestor_id
id|requestor_id
suffix:colon
l_int|1
comma
DECL|member|responder_id
id|responder_id
suffix:colon
l_int|1
comma
DECL|member|target_id
id|target_id
suffix:colon
l_int|1
comma
DECL|member|oem_data
id|oem_data
suffix:colon
l_int|1
comma
DECL|member|reserved
id|reserved
suffix:colon
l_int|54
suffix:semicolon
DECL|member|valid
)brace
id|valid
suffix:semicolon
DECL|member|err_status
id|u64
id|err_status
suffix:semicolon
DECL|member|err_type
id|u16
id|err_type
suffix:semicolon
DECL|member|bus_id
id|u16
id|bus_id
suffix:semicolon
DECL|member|reserved
id|u32
id|reserved
suffix:semicolon
DECL|member|bus_address
id|u64
id|bus_address
suffix:semicolon
DECL|member|bus_data
id|u64
id|bus_data
suffix:semicolon
DECL|member|bus_cmd
id|u64
id|bus_cmd
suffix:semicolon
DECL|member|requestor_id
id|u64
id|requestor_id
suffix:semicolon
DECL|member|responder_id
id|u64
id|responder_id
suffix:semicolon
DECL|member|target_id
id|u64
id|target_id
suffix:semicolon
DECL|member|oem_data
id|u8
id|oem_data
(braket
l_int|1
)braket
suffix:semicolon
multiline_comment|/* Variable length data */
DECL|typedef|sal_log_pci_bus_err_info_t
)brace
id|sal_log_pci_bus_err_info_t
suffix:semicolon
DECL|struct|sal_log_smbios_dev_err_info
r_typedef
r_struct
id|sal_log_smbios_dev_err_info
(brace
DECL|member|header
id|sal_log_section_hdr_t
id|header
suffix:semicolon
r_struct
(brace
DECL|member|event_type
id|u64
id|event_type
suffix:colon
l_int|1
comma
DECL|member|length
id|length
suffix:colon
l_int|1
comma
DECL|member|time_stamp
id|time_stamp
suffix:colon
l_int|1
comma
DECL|member|data
id|data
suffix:colon
l_int|1
comma
DECL|member|reserved1
id|reserved1
suffix:colon
l_int|60
suffix:semicolon
DECL|member|valid
)brace
id|valid
suffix:semicolon
DECL|member|event_type
id|u8
id|event_type
suffix:semicolon
DECL|member|length
id|u8
id|length
suffix:semicolon
DECL|member|time_stamp
id|u8
id|time_stamp
(braket
l_int|6
)braket
suffix:semicolon
DECL|member|data
id|u8
id|data
(braket
l_int|1
)braket
suffix:semicolon
singleline_comment|// data of variable length, length == slsmb_length
DECL|typedef|sal_log_smbios_dev_err_info_t
)brace
id|sal_log_smbios_dev_err_info_t
suffix:semicolon
DECL|struct|sal_log_pci_comp_err_info
r_typedef
r_struct
id|sal_log_pci_comp_err_info
(brace
DECL|member|header
id|sal_log_section_hdr_t
id|header
suffix:semicolon
r_struct
(brace
DECL|member|err_status
id|u64
id|err_status
suffix:colon
l_int|1
comma
DECL|member|comp_info
id|comp_info
suffix:colon
l_int|1
comma
DECL|member|num_mem_regs
id|num_mem_regs
suffix:colon
l_int|1
comma
DECL|member|num_io_regs
id|num_io_regs
suffix:colon
l_int|1
comma
DECL|member|reg_data_pairs
id|reg_data_pairs
suffix:colon
l_int|1
comma
DECL|member|oem_data
id|oem_data
suffix:colon
l_int|1
comma
DECL|member|reserved
id|reserved
suffix:colon
l_int|58
suffix:semicolon
DECL|member|valid
)brace
id|valid
suffix:semicolon
DECL|member|err_status
id|u64
id|err_status
suffix:semicolon
r_struct
(brace
DECL|member|vendor_id
id|u16
id|vendor_id
suffix:semicolon
DECL|member|device_id
id|u16
id|device_id
suffix:semicolon
DECL|member|class_code
id|u16
id|class_code
suffix:semicolon
DECL|member|func_num
id|u8
id|func_num
suffix:semicolon
DECL|member|dev_num
id|u8
id|dev_num
suffix:semicolon
DECL|member|bus_num
id|u8
id|bus_num
suffix:semicolon
DECL|member|seg_num
id|u8
id|seg_num
suffix:semicolon
DECL|member|reserved
id|u8
id|reserved
(braket
l_int|6
)braket
suffix:semicolon
DECL|member|comp_info
)brace
id|comp_info
suffix:semicolon
DECL|member|num_mem_regs
id|u32
id|num_mem_regs
suffix:semicolon
DECL|member|num_io_regs
id|u32
id|num_io_regs
suffix:semicolon
DECL|member|reg_data_pairs
id|u64
id|reg_data_pairs
(braket
l_int|1
)braket
suffix:semicolon
multiline_comment|/* array of address/data register pairs is num_mem_regs + num_io_regs&n;       elements long.  Each array element consists of a u64 address followed&n;       by a u64 data value.  The oem_data array immediately follows the the&n;       reg_data_pairs array */
DECL|member|oem_data
id|u8
id|oem_data
(braket
l_int|1
)braket
suffix:semicolon
multiline_comment|/* Variable length data */
DECL|typedef|sal_log_pci_comp_err_info_t
)brace
id|sal_log_pci_comp_err_info_t
suffix:semicolon
DECL|struct|sal_log_plat_specific_err_info
r_typedef
r_struct
id|sal_log_plat_specific_err_info
(brace
DECL|member|header
id|sal_log_section_hdr_t
id|header
suffix:semicolon
r_struct
(brace
DECL|member|err_status
id|u64
id|err_status
suffix:colon
l_int|1
comma
DECL|member|guid
id|guid
suffix:colon
l_int|1
comma
DECL|member|oem_data
id|oem_data
suffix:colon
l_int|1
comma
DECL|member|reserved
id|reserved
suffix:colon
l_int|61
suffix:semicolon
DECL|member|valid
)brace
id|valid
suffix:semicolon
DECL|member|err_status
id|u64
id|err_status
suffix:semicolon
DECL|member|guid
id|efi_guid_t
id|guid
suffix:semicolon
DECL|member|oem_data
id|u8
id|oem_data
(braket
l_int|1
)braket
suffix:semicolon
multiline_comment|/* platform specific variable length data */
DECL|typedef|sal_log_plat_specific_err_info_t
)brace
id|sal_log_plat_specific_err_info_t
suffix:semicolon
DECL|struct|sal_log_host_ctlr_err_info
r_typedef
r_struct
id|sal_log_host_ctlr_err_info
(brace
DECL|member|header
id|sal_log_section_hdr_t
id|header
suffix:semicolon
r_struct
(brace
DECL|member|err_status
id|u64
id|err_status
suffix:colon
l_int|1
comma
DECL|member|requestor_id
id|requestor_id
suffix:colon
l_int|1
comma
DECL|member|responder_id
id|responder_id
suffix:colon
l_int|1
comma
DECL|member|target_id
id|target_id
suffix:colon
l_int|1
comma
DECL|member|bus_spec_data
id|bus_spec_data
suffix:colon
l_int|1
comma
DECL|member|oem_data
id|oem_data
suffix:colon
l_int|1
comma
DECL|member|reserved
id|reserved
suffix:colon
l_int|58
suffix:semicolon
DECL|member|valid
)brace
id|valid
suffix:semicolon
DECL|member|err_status
id|u64
id|err_status
suffix:semicolon
DECL|member|requestor_id
id|u64
id|requestor_id
suffix:semicolon
DECL|member|responder_id
id|u64
id|responder_id
suffix:semicolon
DECL|member|target_id
id|u64
id|target_id
suffix:semicolon
DECL|member|bus_spec_data
id|u64
id|bus_spec_data
suffix:semicolon
DECL|member|oem_data
id|u8
id|oem_data
(braket
l_int|1
)braket
suffix:semicolon
multiline_comment|/* Variable length OEM data */
DECL|typedef|sal_log_host_ctlr_err_info_t
)brace
id|sal_log_host_ctlr_err_info_t
suffix:semicolon
DECL|struct|sal_log_plat_bus_err_info
r_typedef
r_struct
id|sal_log_plat_bus_err_info
(brace
DECL|member|header
id|sal_log_section_hdr_t
id|header
suffix:semicolon
r_struct
(brace
DECL|member|err_status
id|u64
id|err_status
suffix:colon
l_int|1
comma
DECL|member|requestor_id
id|requestor_id
suffix:colon
l_int|1
comma
DECL|member|responder_id
id|responder_id
suffix:colon
l_int|1
comma
DECL|member|target_id
id|target_id
suffix:colon
l_int|1
comma
DECL|member|bus_spec_data
id|bus_spec_data
suffix:colon
l_int|1
comma
DECL|member|oem_data
id|oem_data
suffix:colon
l_int|1
comma
DECL|member|reserved
id|reserved
suffix:colon
l_int|58
suffix:semicolon
DECL|member|valid
)brace
id|valid
suffix:semicolon
DECL|member|err_status
id|u64
id|err_status
suffix:semicolon
DECL|member|requestor_id
id|u64
id|requestor_id
suffix:semicolon
DECL|member|responder_id
id|u64
id|responder_id
suffix:semicolon
DECL|member|target_id
id|u64
id|target_id
suffix:semicolon
DECL|member|bus_spec_data
id|u64
id|bus_spec_data
suffix:semicolon
DECL|member|oem_data
id|u8
id|oem_data
(braket
l_int|1
)braket
suffix:semicolon
multiline_comment|/* Variable length OEM data */
DECL|typedef|sal_log_plat_bus_err_info_t
)brace
id|sal_log_plat_bus_err_info_t
suffix:semicolon
multiline_comment|/* Overall platform error section structure */
DECL|union|sal_log_platform_err_info
r_typedef
r_union
id|sal_log_platform_err_info
(brace
DECL|member|mem_dev_err
id|sal_log_mem_dev_err_info_t
id|mem_dev_err
suffix:semicolon
DECL|member|sel_dev_err
id|sal_log_sel_dev_err_info_t
id|sel_dev_err
suffix:semicolon
DECL|member|pci_bus_err
id|sal_log_pci_bus_err_info_t
id|pci_bus_err
suffix:semicolon
DECL|member|smbios_dev_err
id|sal_log_smbios_dev_err_info_t
id|smbios_dev_err
suffix:semicolon
DECL|member|pci_comp_err
id|sal_log_pci_comp_err_info_t
id|pci_comp_err
suffix:semicolon
DECL|member|plat_specific_err
id|sal_log_plat_specific_err_info_t
id|plat_specific_err
suffix:semicolon
DECL|member|host_ctlr_err
id|sal_log_host_ctlr_err_info_t
id|host_ctlr_err
suffix:semicolon
DECL|member|plat_bus_err
id|sal_log_plat_bus_err_info_t
id|plat_bus_err
suffix:semicolon
DECL|typedef|sal_log_platform_err_info_t
)brace
id|sal_log_platform_err_info_t
suffix:semicolon
multiline_comment|/* SAL log over-all, multi-section error record structure (processor+platform) */
DECL|struct|err_rec
r_typedef
r_struct
id|err_rec
(brace
DECL|member|sal_elog_header
id|sal_log_record_header_t
id|sal_elog_header
suffix:semicolon
DECL|member|proc_err
id|sal_log_processor_info_t
id|proc_err
suffix:semicolon
DECL|member|plat_err
id|sal_log_platform_err_info_t
id|plat_err
suffix:semicolon
DECL|member|oem_data_pad
id|u8
id|oem_data_pad
(braket
l_int|1024
)braket
suffix:semicolon
DECL|typedef|ia64_err_rec_t
)brace
id|ia64_err_rec_t
suffix:semicolon
multiline_comment|/*&n; * Now define a couple of inline functions for improved type checking&n; * and convenience.&n; */
r_static
r_inline
r_int
DECL|function|ia64_sal_freq_base
id|ia64_sal_freq_base
(paren
r_int
r_int
id|which
comma
r_int
r_int
op_star
id|ticks_per_second
comma
r_int
r_int
op_star
id|drift_info
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_FREQ_BASE
comma
id|which
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
op_star
id|ticks_per_second
op_assign
id|isrv.v0
suffix:semicolon
op_star
id|drift_info
op_assign
id|isrv.v1
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Flush all the processor and platform level instruction and/or data caches */
r_static
r_inline
id|s64
DECL|function|ia64_sal_cache_flush
id|ia64_sal_cache_flush
(paren
id|u64
id|cache_type
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_CACHE_FLUSH
comma
id|cache_type
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Initialize all the processor and platform level instruction and data caches */
r_static
r_inline
id|s64
DECL|function|ia64_sal_cache_init
id|ia64_sal_cache_init
(paren
r_void
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_CACHE_INIT
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Clear the processor and platform information logged by SAL with respect to the &n; * machine state at the time of MCA&squot;s, INITs, CMCs, or CPEs.&n; */
r_static
r_inline
id|s64
DECL|function|ia64_sal_clear_state_info
id|ia64_sal_clear_state_info
(paren
id|u64
id|sal_info_type
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_CLEAR_STATE_INFO
comma
id|sal_info_type
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Get the processor and platform information logged by SAL with respect to the machine&n; * state at the time of the MCAs, INITs, CMCs, or CPEs.&n; */
r_static
r_inline
id|u64
DECL|function|ia64_sal_get_state_info
id|ia64_sal_get_state_info
(paren
id|u64
id|sal_info_type
comma
id|u64
op_star
id|sal_info
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_GET_STATE_INFO
comma
id|sal_info_type
comma
l_int|0
comma
id|sal_info
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_if
c_cond
(paren
id|isrv.status
)paren
r_return
l_int|0
suffix:semicolon
r_return
id|isrv.v0
suffix:semicolon
)brace
multiline_comment|/* Get the maximum size of the information logged by SAL with respect to the machine &n; * state at the time of MCAs, INITs, CMCs, or CPEs.&n; */
r_static
r_inline
id|u64
DECL|function|ia64_sal_get_state_info_size
id|ia64_sal_get_state_info_size
(paren
id|u64
id|sal_info_type
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_GET_STATE_INFO_SIZE
comma
id|sal_info_type
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_if
c_cond
(paren
id|isrv.status
)paren
r_return
l_int|0
suffix:semicolon
r_return
id|isrv.v0
suffix:semicolon
)brace
multiline_comment|/* Causes the processor to go into a spin loop within SAL where SAL awaits a wakeup&n; * from the monarch processor.&n; */
r_static
r_inline
id|s64
DECL|function|ia64_sal_mc_rendez
id|ia64_sal_mc_rendez
(paren
r_void
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_MC_RENDEZ
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Allow the OS to specify the interrupt number to be used by SAL to interrupt OS during&n; * the machine check rendezvous sequence as well as the mechanism to wake up the &n; * non-monarch processor at the end of machine check processing.&n; */
r_static
r_inline
id|s64
DECL|function|ia64_sal_mc_set_params
id|ia64_sal_mc_set_params
(paren
id|u64
id|param_type
comma
id|u64
id|i_or_m
comma
id|u64
id|i_or_m_val
comma
id|u64
id|timeout
comma
id|u64
id|rz_always
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_MC_SET_PARAMS
comma
id|param_type
comma
id|i_or_m
comma
id|i_or_m_val
comma
id|timeout
comma
id|rz_always
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Read from PCI configuration space */
r_static
r_inline
id|s64
DECL|function|ia64_sal_pci_config_read
id|ia64_sal_pci_config_read
(paren
id|u64
id|pci_config_addr
comma
id|u64
id|size
comma
id|u64
op_star
id|value
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_PCI_CONFIG_READ
comma
id|pci_config_addr
comma
id|size
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_if
c_cond
(paren
id|value
)paren
op_star
id|value
op_assign
id|isrv.v0
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Write to PCI configuration space */
r_static
r_inline
id|s64
DECL|function|ia64_sal_pci_config_write
id|ia64_sal_pci_config_write
(paren
id|u64
id|pci_config_addr
comma
id|u64
id|size
comma
id|u64
id|value
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_PCI_CONFIG_WRITE
comma
id|pci_config_addr
comma
id|size
comma
id|value
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/*&n; * Register physical addresses of locations needed by SAL when SAL&n; * procedures are invoked in virtual mode.&n; */
r_static
r_inline
id|s64
DECL|function|ia64_sal_register_physical_addr
id|ia64_sal_register_physical_addr
(paren
id|u64
id|phys_entry
comma
id|u64
id|phys_addr
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_REGISTER_PHYSICAL_ADDR
comma
id|phys_entry
comma
id|phys_addr
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Register software dependent code locations within SAL. These locations are handlers&n; * or entry points where SAL will pass control for the specified event. These event&n; * handlers are for the bott rendezvous, MCAs and INIT scenarios.&n; */
r_static
r_inline
id|s64
DECL|function|ia64_sal_set_vectors
id|ia64_sal_set_vectors
(paren
id|u64
id|vector_type
comma
id|u64
id|handler_addr1
comma
id|u64
id|gp1
comma
id|u64
id|handler_len1
comma
id|u64
id|handler_addr2
comma
id|u64
id|gp2
comma
id|u64
id|handler_len2
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_SET_VECTORS
comma
id|vector_type
comma
id|handler_addr1
comma
id|gp1
comma
id|handler_len1
comma
id|handler_addr2
comma
id|gp2
comma
id|handler_len2
)paren
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Update the contents of PAL block in the non-volatile storage device */
r_static
r_inline
id|s64
DECL|function|ia64_sal_update_pal
id|ia64_sal_update_pal
(paren
id|u64
id|param_buf
comma
id|u64
id|scratch_buf
comma
id|u64
id|scratch_buf_size
comma
id|u64
op_star
id|error_code
comma
id|u64
op_star
id|scratch_buf_size_needed
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_UPDATE_PAL
comma
id|param_buf
comma
id|scratch_buf
comma
id|scratch_buf_size
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_if
c_cond
(paren
id|error_code
)paren
op_star
id|error_code
op_assign
id|isrv.v0
suffix:semicolon
r_if
c_cond
(paren
id|scratch_buf_size_needed
)paren
op_star
id|scratch_buf_size_needed
op_assign
id|isrv.v1
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
macro_line|#endif /* _ASM_IA64_PAL_H */
eof
