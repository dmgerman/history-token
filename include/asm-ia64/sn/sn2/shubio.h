multiline_comment|/* $Id: shubio.h,v 1.1 2002/02/28 17:31:25 marcelo Exp $&n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 1992 - 1997, 2000-2003 Silicon Graphics, Inc. All rights reserved.&n; */
macro_line|#ifndef _ASM_IA64_SN_SN2_SHUBIO_H
DECL|macro|_ASM_IA64_SN_SN2_SHUBIO_H
mdefine_line|#define _ASM_IA64_SN_SN2_SHUBIO_H
macro_line|#include &lt;asm/sn/arch.h&gt;
DECL|macro|HUB_WIDGET_ID_MAX
mdefine_line|#define HUB_WIDGET_ID_MAX 0xf
DECL|macro|IIO_NUM_ITTES
mdefine_line|#define IIO_NUM_ITTES   7
DECL|macro|HUB_NUM_BIG_WINDOW
mdefine_line|#define HUB_NUM_BIG_WINDOW      (IIO_NUM_ITTES - 1)
DECL|macro|IIO_WID
mdefine_line|#define    IIO_WID                   0x00400000    /* Crosstalk Widget Identification */
multiline_comment|/* This register is also accessible from&n;                                                    * Crosstalk at address 0x0.  */
DECL|macro|IIO_WSTAT
mdefine_line|#define    IIO_WSTAT                 0x00400008    /* Crosstalk Widget Status */
DECL|macro|IIO_WCR
mdefine_line|#define    IIO_WCR                   0x00400020    /* Crosstalk Widget Control Register */
DECL|macro|IIO_ILAPR
mdefine_line|#define    IIO_ILAPR                 0x00400100    /* IO Local Access Protection Register */
DECL|macro|IIO_ILAPO
mdefine_line|#define    IIO_ILAPO                 0x00400108    /* IO Local Access Protection Override */
DECL|macro|IIO_IOWA
mdefine_line|#define    IIO_IOWA                  0x00400110    /* IO Outbound Widget Access */
DECL|macro|IIO_IIWA
mdefine_line|#define    IIO_IIWA                  0x00400118    /* IO Inbound Widget Access */
DECL|macro|IIO_IIDEM
mdefine_line|#define    IIO_IIDEM                 0x00400120    /* IO Inbound Device Error Mask */
DECL|macro|IIO_ILCSR
mdefine_line|#define    IIO_ILCSR                 0x00400128    /* IO LLP Control and Status Register */
DECL|macro|IIO_ILLR
mdefine_line|#define    IIO_ILLR                  0x00400130    /* IO LLP Log Register    */
DECL|macro|IIO_IIDSR
mdefine_line|#define    IIO_IIDSR                 0x00400138    /* IO Interrupt Destination */
DECL|macro|IIO_IGFX0
mdefine_line|#define    IIO_IGFX0                 0x00400140    /* IO Graphics Node-Widget Map 0 */
DECL|macro|IIO_IGFX1
mdefine_line|#define    IIO_IGFX1                 0x00400148    /* IO Graphics Node-Widget Map 1 */
DECL|macro|IIO_ISCR0
mdefine_line|#define    IIO_ISCR0                 0x00400150    /* IO Scratch Register 0 */
DECL|macro|IIO_ISCR1
mdefine_line|#define    IIO_ISCR1                 0x00400158    /* IO Scratch Register 1 */
DECL|macro|IIO_ITTE1
mdefine_line|#define    IIO_ITTE1                 0x00400160    /* IO Translation Table Entry 1 */
DECL|macro|IIO_ITTE2
mdefine_line|#define    IIO_ITTE2                 0x00400168    /* IO Translation Table Entry 2 */
DECL|macro|IIO_ITTE3
mdefine_line|#define    IIO_ITTE3                 0x00400170    /* IO Translation Table Entry 3 */
DECL|macro|IIO_ITTE4
mdefine_line|#define    IIO_ITTE4                 0x00400178    /* IO Translation Table Entry 4 */
DECL|macro|IIO_ITTE5
mdefine_line|#define    IIO_ITTE5                 0x00400180    /* IO Translation Table Entry 5 */
DECL|macro|IIO_ITTE6
mdefine_line|#define    IIO_ITTE6                 0x00400188    /* IO Translation Table Entry 6 */
DECL|macro|IIO_ITTE7
mdefine_line|#define    IIO_ITTE7                 0x00400190    /* IO Translation Table Entry 7 */
DECL|macro|IIO_IPRB0
mdefine_line|#define    IIO_IPRB0                 0x00400198    /* IO PRB Entry 0         */
DECL|macro|IIO_IPRB8
mdefine_line|#define    IIO_IPRB8                 0x004001A0    /* IO PRB Entry 8         */
DECL|macro|IIO_IPRB9
mdefine_line|#define    IIO_IPRB9                 0x004001A8    /* IO PRB Entry 9         */
DECL|macro|IIO_IPRBA
mdefine_line|#define    IIO_IPRBA                 0x004001B0    /* IO PRB Entry A         */
DECL|macro|IIO_IPRBB
mdefine_line|#define    IIO_IPRBB                 0x004001B8    /* IO PRB Entry B         */
DECL|macro|IIO_IPRBC
mdefine_line|#define    IIO_IPRBC                 0x004001C0    /* IO PRB Entry C         */
DECL|macro|IIO_IPRBD
mdefine_line|#define    IIO_IPRBD                 0x004001C8    /* IO PRB Entry D         */
DECL|macro|IIO_IPRBE
mdefine_line|#define    IIO_IPRBE                 0x004001D0    /* IO PRB Entry E         */
DECL|macro|IIO_IPRBF
mdefine_line|#define    IIO_IPRBF                 0x004001D8    /* IO PRB Entry F         */
DECL|macro|IIO_IXCC
mdefine_line|#define    IIO_IXCC                  0x004001E0    /* IO Crosstalk Credit Count Timeout */
DECL|macro|IIO_IMEM
mdefine_line|#define    IIO_IMEM                  0x004001E8    /* IO Miscellaneous Error Mask */
DECL|macro|IIO_IXTT
mdefine_line|#define    IIO_IXTT                  0x004001F0    /* IO Crosstalk Timeout Threshold */
DECL|macro|IIO_IECLR
mdefine_line|#define    IIO_IECLR                 0x004001F8    /* IO Error Clear Register */
DECL|macro|IIO_IBCR
mdefine_line|#define    IIO_IBCR                  0x00400200    /* IO BTE Control Register */
DECL|macro|IIO_IXSM
mdefine_line|#define    IIO_IXSM                  0x00400208    /* IO Crosstalk Spurious Message */
DECL|macro|IIO_IXSS
mdefine_line|#define    IIO_IXSS                  0x00400210    /* IO Crosstalk Spurious Sideband */
DECL|macro|IIO_ILCT
mdefine_line|#define    IIO_ILCT                  0x00400218    /* IO LLP Channel Test    */
DECL|macro|IIO_IIEPH1
mdefine_line|#define    IIO_IIEPH1                0x00400220    /* IO Incoming Error Packet Header, Part 1 */
DECL|macro|IIO_IIEPH2
mdefine_line|#define    IIO_IIEPH2                0x00400228    /* IO Incoming Error Packet Header, Part 2 */
DECL|macro|IIO_ISLAPR
mdefine_line|#define    IIO_ISLAPR                0x00400230    /* IO SXB Local Access Protection Regster */
DECL|macro|IIO_ISLAPO
mdefine_line|#define    IIO_ISLAPO                0x00400238    /* IO SXB Local Access Protection Override */
DECL|macro|IIO_IWI
mdefine_line|#define    IIO_IWI                   0x00400240    /* IO Wrapper Interrupt Register */
DECL|macro|IIO_IWEL
mdefine_line|#define    IIO_IWEL                  0x00400248    /* IO Wrapper Error Log Register */
DECL|macro|IIO_IWC
mdefine_line|#define    IIO_IWC                   0x00400250    /* IO Wrapper Control Register */
DECL|macro|IIO_IWS
mdefine_line|#define    IIO_IWS                   0x00400258    /* IO Wrapper Status Register */
DECL|macro|IIO_IWEIM
mdefine_line|#define    IIO_IWEIM                 0x00400260    /* IO Wrapper Error Interrupt Masking Register */
DECL|macro|IIO_IPCA
mdefine_line|#define    IIO_IPCA                  0x00400300    /* IO PRB Counter Adjust */
DECL|macro|IIO_IPRTE0_A
mdefine_line|#define    IIO_IPRTE0_A              0x00400308    /* IO PIO Read Address Table Entry 0, Part A */
DECL|macro|IIO_IPRTE1_A
mdefine_line|#define    IIO_IPRTE1_A              0x00400310    /* IO PIO Read Address Table Entry 1, Part A */
DECL|macro|IIO_IPRTE2_A
mdefine_line|#define    IIO_IPRTE2_A              0x00400318    /* IO PIO Read Address Table Entry 2, Part A */
DECL|macro|IIO_IPRTE3_A
mdefine_line|#define    IIO_IPRTE3_A               0x00400320    /* IO PIO Read Address Table Entry 3, Part A */
DECL|macro|IIO_IPRTE4_A
mdefine_line|#define    IIO_IPRTE4_A               0x00400328    /* IO PIO Read Address Table Entry 4, Part A */
DECL|macro|IIO_IPRTE5_A
mdefine_line|#define    IIO_IPRTE5_A               0x00400330    /* IO PIO Read Address Table Entry 5, Part A */
DECL|macro|IIO_IPRTE6_A
mdefine_line|#define    IIO_IPRTE6_A               0x00400338    /* IO PIO Read Address Table Entry 6, Part A */
DECL|macro|IIO_IPRTE7_A
mdefine_line|#define    IIO_IPRTE7_A               0x00400340    /* IO PIO Read Address Table Entry 7, Part A */
DECL|macro|IIO_IPRTE0_B
mdefine_line|#define    IIO_IPRTE0_B              0x00400348    /* IO PIO Read Address Table Entry 0, Part B */
DECL|macro|IIO_IPRTE1_B
mdefine_line|#define    IIO_IPRTE1_B              0x00400350    /* IO PIO Read Address Table Entry 1, Part B */
DECL|macro|IIO_IPRTE2_B
mdefine_line|#define    IIO_IPRTE2_B              0x00400358    /* IO PIO Read Address Table Entry 2, Part B */
DECL|macro|IIO_IPRTE3_B
mdefine_line|#define    IIO_IPRTE3_B               0x00400360    /* IO PIO Read Address Table Entry 3, Part B */
DECL|macro|IIO_IPRTE4_B
mdefine_line|#define    IIO_IPRTE4_B               0x00400368    /* IO PIO Read Address Table Entry 4, Part B */
DECL|macro|IIO_IPRTE5_B
mdefine_line|#define    IIO_IPRTE5_B               0x00400370    /* IO PIO Read Address Table Entry 5, Part B */
DECL|macro|IIO_IPRTE6_B
mdefine_line|#define    IIO_IPRTE6_B               0x00400378    /* IO PIO Read Address Table Entry 6, Part B */
DECL|macro|IIO_IPRTE7_B
mdefine_line|#define    IIO_IPRTE7_B               0x00400380    /* IO PIO Read Address Table Entry 7, Part B */
DECL|macro|IIO_IPDR
mdefine_line|#define    IIO_IPDR                  0x00400388    /* IO PIO Deallocation Register */
DECL|macro|IIO_ICDR
mdefine_line|#define    IIO_ICDR                  0x00400390    /* IO CRB Entry Deallocation Register */
DECL|macro|IIO_IFDR
mdefine_line|#define    IIO_IFDR                  0x00400398    /* IO IOQ FIFO Depth Register */
DECL|macro|IIO_IIAP
mdefine_line|#define    IIO_IIAP                  0x004003A0    /* IO IIQ Arbitration Parameters */
DECL|macro|IIO_ICMR
mdefine_line|#define    IIO_ICMR                  0x004003A8    /* IO CRB Management Register */
DECL|macro|IIO_ICCR
mdefine_line|#define    IIO_ICCR                  0x004003B0    /* IO CRB Control Register */
DECL|macro|IIO_ICTO
mdefine_line|#define    IIO_ICTO                  0x004003B8    /* IO CRB Timeout         */
DECL|macro|IIO_ICTP
mdefine_line|#define    IIO_ICTP                  0x004003C0    /* IO CRB Timeout Prescalar */
DECL|macro|IIO_ICRB0_A
mdefine_line|#define    IIO_ICRB0_A               0x00400400    /* IO CRB Entry 0_A       */
DECL|macro|IIO_ICRB0_B
mdefine_line|#define    IIO_ICRB0_B               0x00400408    /* IO CRB Entry 0_B       */
DECL|macro|IIO_ICRB0_C
mdefine_line|#define    IIO_ICRB0_C               0x00400410    /* IO CRB Entry 0_C       */
DECL|macro|IIO_ICRB0_D
mdefine_line|#define    IIO_ICRB0_D               0x00400418    /* IO CRB Entry 0_D       */
DECL|macro|IIO_ICRB0_E
mdefine_line|#define    IIO_ICRB0_E               0x00400420    /* IO CRB Entry 0_E       */
DECL|macro|IIO_ICRB1_A
mdefine_line|#define    IIO_ICRB1_A               0x00400430    /* IO CRB Entry 1_A       */
DECL|macro|IIO_ICRB1_B
mdefine_line|#define    IIO_ICRB1_B               0x00400438    /* IO CRB Entry 1_B       */
DECL|macro|IIO_ICRB1_C
mdefine_line|#define    IIO_ICRB1_C               0x00400440    /* IO CRB Entry 1_C       */
DECL|macro|IIO_ICRB1_D
mdefine_line|#define    IIO_ICRB1_D               0x00400448    /* IO CRB Entry 1_D       */
DECL|macro|IIO_ICRB1_E
mdefine_line|#define    IIO_ICRB1_E               0x00400450    /* IO CRB Entry 1_E       */
DECL|macro|IIO_ICRB2_A
mdefine_line|#define    IIO_ICRB2_A               0x00400460    /* IO CRB Entry 2_A       */
DECL|macro|IIO_ICRB2_B
mdefine_line|#define    IIO_ICRB2_B               0x00400468    /* IO CRB Entry 2_B       */
DECL|macro|IIO_ICRB2_C
mdefine_line|#define    IIO_ICRB2_C               0x00400470    /* IO CRB Entry 2_C       */
DECL|macro|IIO_ICRB2_D
mdefine_line|#define    IIO_ICRB2_D               0x00400478    /* IO CRB Entry 2_D       */
DECL|macro|IIO_ICRB2_E
mdefine_line|#define    IIO_ICRB2_E               0x00400480    /* IO CRB Entry 2_E       */
DECL|macro|IIO_ICRB3_A
mdefine_line|#define    IIO_ICRB3_A               0x00400490    /* IO CRB Entry 3_A       */
DECL|macro|IIO_ICRB3_B
mdefine_line|#define    IIO_ICRB3_B               0x00400498    /* IO CRB Entry 3_B       */
DECL|macro|IIO_ICRB3_C
mdefine_line|#define    IIO_ICRB3_C               0x004004a0    /* IO CRB Entry 3_C       */
DECL|macro|IIO_ICRB3_D
mdefine_line|#define    IIO_ICRB3_D               0x004004a8    /* IO CRB Entry 3_D       */
DECL|macro|IIO_ICRB3_E
mdefine_line|#define    IIO_ICRB3_E               0x004004b0    /* IO CRB Entry 3_E       */
DECL|macro|IIO_ICRB4_A
mdefine_line|#define    IIO_ICRB4_A               0x004004c0    /* IO CRB Entry 4_A       */
DECL|macro|IIO_ICRB4_B
mdefine_line|#define    IIO_ICRB4_B               0x004004c8    /* IO CRB Entry 4_B       */
DECL|macro|IIO_ICRB4_C
mdefine_line|#define    IIO_ICRB4_C               0x004004d0    /* IO CRB Entry 4_C       */
DECL|macro|IIO_ICRB4_D
mdefine_line|#define    IIO_ICRB4_D               0x004004d8    /* IO CRB Entry 4_D       */
DECL|macro|IIO_ICRB4_E
mdefine_line|#define    IIO_ICRB4_E               0x004004e0    /* IO CRB Entry 4_E       */
DECL|macro|IIO_ICRB5_A
mdefine_line|#define    IIO_ICRB5_A               0x004004f0    /* IO CRB Entry 5_A       */
DECL|macro|IIO_ICRB5_B
mdefine_line|#define    IIO_ICRB5_B               0x004004f8    /* IO CRB Entry 5_B       */
DECL|macro|IIO_ICRB5_C
mdefine_line|#define    IIO_ICRB5_C               0x00400500    /* IO CRB Entry 5_C       */
DECL|macro|IIO_ICRB5_D
mdefine_line|#define    IIO_ICRB5_D               0x00400508    /* IO CRB Entry 5_D       */
DECL|macro|IIO_ICRB5_E
mdefine_line|#define    IIO_ICRB5_E               0x00400510    /* IO CRB Entry 5_E       */
DECL|macro|IIO_ICRB6_A
mdefine_line|#define    IIO_ICRB6_A               0x00400520    /* IO CRB Entry 6_A       */
DECL|macro|IIO_ICRB6_B
mdefine_line|#define    IIO_ICRB6_B               0x00400528    /* IO CRB Entry 6_B       */
DECL|macro|IIO_ICRB6_C
mdefine_line|#define    IIO_ICRB6_C               0x00400530    /* IO CRB Entry 6_C       */
DECL|macro|IIO_ICRB6_D
mdefine_line|#define    IIO_ICRB6_D               0x00400538    /* IO CRB Entry 6_D       */
DECL|macro|IIO_ICRB6_E
mdefine_line|#define    IIO_ICRB6_E               0x00400540    /* IO CRB Entry 6_E       */
DECL|macro|IIO_ICRB7_A
mdefine_line|#define    IIO_ICRB7_A               0x00400550    /* IO CRB Entry 7_A       */
DECL|macro|IIO_ICRB7_B
mdefine_line|#define    IIO_ICRB7_B               0x00400558    /* IO CRB Entry 7_B       */
DECL|macro|IIO_ICRB7_C
mdefine_line|#define    IIO_ICRB7_C               0x00400560    /* IO CRB Entry 7_C       */
DECL|macro|IIO_ICRB7_D
mdefine_line|#define    IIO_ICRB7_D               0x00400568    /* IO CRB Entry 7_D       */
DECL|macro|IIO_ICRB7_E
mdefine_line|#define    IIO_ICRB7_E               0x00400570    /* IO CRB Entry 7_E       */
DECL|macro|IIO_ICRB8_A
mdefine_line|#define    IIO_ICRB8_A               0x00400580    /* IO CRB Entry 8_A       */
DECL|macro|IIO_ICRB8_B
mdefine_line|#define    IIO_ICRB8_B               0x00400588    /* IO CRB Entry 8_B       */
DECL|macro|IIO_ICRB8_C
mdefine_line|#define    IIO_ICRB8_C               0x00400590    /* IO CRB Entry 8_C       */
DECL|macro|IIO_ICRB8_D
mdefine_line|#define    IIO_ICRB8_D               0x00400598    /* IO CRB Entry 8_D       */
DECL|macro|IIO_ICRB8_E
mdefine_line|#define    IIO_ICRB8_E               0x004005a0    /* IO CRB Entry 8_E       */
DECL|macro|IIO_ICRB9_A
mdefine_line|#define    IIO_ICRB9_A               0x004005b0    /* IO CRB Entry 9_A       */
DECL|macro|IIO_ICRB9_B
mdefine_line|#define    IIO_ICRB9_B               0x004005b8    /* IO CRB Entry 9_B       */
DECL|macro|IIO_ICRB9_C
mdefine_line|#define    IIO_ICRB9_C               0x004005c0    /* IO CRB Entry 9_C       */
DECL|macro|IIO_ICRB9_D
mdefine_line|#define    IIO_ICRB9_D               0x004005c8    /* IO CRB Entry 9_D       */
DECL|macro|IIO_ICRB9_E
mdefine_line|#define    IIO_ICRB9_E               0x004005d0    /* IO CRB Entry 9_E       */
DECL|macro|IIO_ICRBA_A
mdefine_line|#define    IIO_ICRBA_A               0x004005e0    /* IO CRB Entry A_A       */
DECL|macro|IIO_ICRBA_B
mdefine_line|#define    IIO_ICRBA_B               0x004005e8    /* IO CRB Entry A_B       */
DECL|macro|IIO_ICRBA_C
mdefine_line|#define    IIO_ICRBA_C               0x004005f0    /* IO CRB Entry A_C       */
DECL|macro|IIO_ICRBA_D
mdefine_line|#define    IIO_ICRBA_D               0x004005f8    /* IO CRB Entry A_D       */
DECL|macro|IIO_ICRBA_E
mdefine_line|#define    IIO_ICRBA_E               0x00400600    /* IO CRB Entry A_E       */
DECL|macro|IIO_ICRBB_A
mdefine_line|#define    IIO_ICRBB_A               0x00400610    /* IO CRB Entry B_A       */
DECL|macro|IIO_ICRBB_B
mdefine_line|#define    IIO_ICRBB_B               0x00400618    /* IO CRB Entry B_B       */
DECL|macro|IIO_ICRBB_C
mdefine_line|#define    IIO_ICRBB_C               0x00400620    /* IO CRB Entry B_C       */
DECL|macro|IIO_ICRBB_D
mdefine_line|#define    IIO_ICRBB_D               0x00400628    /* IO CRB Entry B_D       */
DECL|macro|IIO_ICRBB_E
mdefine_line|#define    IIO_ICRBB_E               0x00400630    /* IO CRB Entry B_E       */
DECL|macro|IIO_ICRBC_A
mdefine_line|#define    IIO_ICRBC_A               0x00400640    /* IO CRB Entry C_A       */
DECL|macro|IIO_ICRBC_B
mdefine_line|#define    IIO_ICRBC_B               0x00400648    /* IO CRB Entry C_B       */
DECL|macro|IIO_ICRBC_C
mdefine_line|#define    IIO_ICRBC_C               0x00400650    /* IO CRB Entry C_C       */
DECL|macro|IIO_ICRBC_D
mdefine_line|#define    IIO_ICRBC_D               0x00400658    /* IO CRB Entry C_D       */
DECL|macro|IIO_ICRBC_E
mdefine_line|#define    IIO_ICRBC_E               0x00400660    /* IO CRB Entry C_E       */
DECL|macro|IIO_ICRBD_A
mdefine_line|#define    IIO_ICRBD_A               0x00400670    /* IO CRB Entry D_A       */
DECL|macro|IIO_ICRBD_B
mdefine_line|#define    IIO_ICRBD_B               0x00400678    /* IO CRB Entry D_B       */
DECL|macro|IIO_ICRBD_C
mdefine_line|#define    IIO_ICRBD_C               0x00400680    /* IO CRB Entry D_C       */
DECL|macro|IIO_ICRBD_D
mdefine_line|#define    IIO_ICRBD_D               0x00400688    /* IO CRB Entry D_D       */
DECL|macro|IIO_ICRBD_E
mdefine_line|#define    IIO_ICRBD_E               0x00400690    /* IO CRB Entry D_E       */
DECL|macro|IIO_ICRBE_A
mdefine_line|#define    IIO_ICRBE_A               0x004006a0    /* IO CRB Entry E_A       */
DECL|macro|IIO_ICRBE_B
mdefine_line|#define    IIO_ICRBE_B               0x004006a8    /* IO CRB Entry E_B       */
DECL|macro|IIO_ICRBE_C
mdefine_line|#define    IIO_ICRBE_C               0x004006b0    /* IO CRB Entry E_C       */
DECL|macro|IIO_ICRBE_D
mdefine_line|#define    IIO_ICRBE_D               0x004006b8    /* IO CRB Entry E_D       */
DECL|macro|IIO_ICRBE_E
mdefine_line|#define    IIO_ICRBE_E               0x004006c0    /* IO CRB Entry E_E       */
DECL|macro|IIO_ICSML
mdefine_line|#define    IIO_ICSML                 0x00400700    /* IO CRB Spurious Message Low */
DECL|macro|IIO_ICSMM
mdefine_line|#define    IIO_ICSMM                 0x00400708    /* IO CRB Spurious Message Middle */
DECL|macro|IIO_ICSMH
mdefine_line|#define    IIO_ICSMH                 0x00400710    /* IO CRB Spurious Message High */
DECL|macro|IIO_IDBSS
mdefine_line|#define    IIO_IDBSS                 0x00400718    /* IO Debug Submenu Select */
DECL|macro|IIO_IBLS0
mdefine_line|#define    IIO_IBLS0                 0x00410000    /* IO BTE Length Status 0 */
DECL|macro|IIO_IBSA0
mdefine_line|#define    IIO_IBSA0                 0x00410008    /* IO BTE Source Address 0 */
DECL|macro|IIO_IBDA0
mdefine_line|#define    IIO_IBDA0                 0x00410010    /* IO BTE Destination Address 0 */
DECL|macro|IIO_IBCT0
mdefine_line|#define    IIO_IBCT0                 0x00410018    /* IO BTE Control Terminate 0 */
DECL|macro|IIO_IBNA0
mdefine_line|#define    IIO_IBNA0                 0x00410020    /* IO BTE Notification Address 0 */
DECL|macro|IIO_IBIA0
mdefine_line|#define    IIO_IBIA0                 0x00410028    /* IO BTE Interrupt Address 0 */
DECL|macro|IIO_IBLS1
mdefine_line|#define    IIO_IBLS1                 0x00420000    /* IO BTE Length Status 1 */
DECL|macro|IIO_IBSA1
mdefine_line|#define    IIO_IBSA1                 0x00420008    /* IO BTE Source Address 1 */
DECL|macro|IIO_IBDA1
mdefine_line|#define    IIO_IBDA1                 0x00420010    /* IO BTE Destination Address 1 */
DECL|macro|IIO_IBCT1
mdefine_line|#define    IIO_IBCT1                 0x00420018    /* IO BTE Control Terminate 1 */
DECL|macro|IIO_IBNA1
mdefine_line|#define    IIO_IBNA1                 0x00420020    /* IO BTE Notification Address 1 */
DECL|macro|IIO_IBIA1
mdefine_line|#define    IIO_IBIA1                 0x00420028    /* IO BTE Interrupt Address 1 */
DECL|macro|IIO_IPCR
mdefine_line|#define    IIO_IPCR                  0x00430000    /* IO Performance Control */
DECL|macro|IIO_IPPR
mdefine_line|#define    IIO_IPPR                  0x00430008    /* IO Performance Profiling */
macro_line|#ifndef __ASSEMBLY__
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register echoes some information from the         *&n; * LB_REV_ID register. It is available through Crosstalk as described   *&n; * above. The REV_NUM and MFG_NUM fields receive their values from      *&n; * the REVISION and MANUFACTURER fields in the LB_REV_ID register.      *&n; * The PART_NUM field&squot;s value is the Crosstalk device ID number that    *&n; * Steve Miller assigned to the SHub chip.                              *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_wid_u
r_typedef
r_union
id|ii_wid_u
(brace
DECL|member|ii_wid_regval
id|shubreg_t
id|ii_wid_regval
suffix:semicolon
r_struct
(brace
DECL|member|w_rsvd_1
id|shubreg_t
id|w_rsvd_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_mfg_num
id|shubreg_t
id|w_mfg_num
suffix:colon
l_int|11
suffix:semicolon
DECL|member|w_part_num
id|shubreg_t
id|w_part_num
suffix:colon
l_int|16
suffix:semicolon
DECL|member|w_rev_num
id|shubreg_t
id|w_rev_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|w_rsvd
id|shubreg_t
id|w_rsvd
suffix:colon
l_int|32
suffix:semicolon
DECL|member|ii_wid_fld_s
)brace
id|ii_wid_fld_s
suffix:semicolon
DECL|typedef|ii_wid_u_t
)brace
id|ii_wid_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  The fields in this register are set upon detection of an error      *&n; * and cleared by various mechanisms, as explained in the               *&n; * description.                                                         *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_wstat_u
r_typedef
r_union
id|ii_wstat_u
(brace
DECL|member|ii_wstat_regval
id|shubreg_t
id|ii_wstat_regval
suffix:semicolon
r_struct
(brace
DECL|member|w_pending
id|shubreg_t
id|w_pending
suffix:colon
l_int|4
suffix:semicolon
DECL|member|w_xt_crd_to
id|shubreg_t
id|w_xt_crd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_xt_tail_to
id|shubreg_t
id|w_xt_tail_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_rsvd_3
id|shubreg_t
id|w_rsvd_3
suffix:colon
l_int|3
suffix:semicolon
DECL|member|w_tx_mx_rty
id|shubreg_t
id|w_tx_mx_rty
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_rsvd_2
id|shubreg_t
id|w_rsvd_2
suffix:colon
l_int|6
suffix:semicolon
DECL|member|w_llp_tx_cnt
id|shubreg_t
id|w_llp_tx_cnt
suffix:colon
l_int|8
suffix:semicolon
DECL|member|w_rsvd_1
id|shubreg_t
id|w_rsvd_1
suffix:colon
l_int|8
suffix:semicolon
DECL|member|w_crazy
id|shubreg_t
id|w_crazy
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_rsvd
id|shubreg_t
id|w_rsvd
suffix:colon
l_int|31
suffix:semicolon
DECL|member|ii_wstat_fld_s
)brace
id|ii_wstat_fld_s
suffix:semicolon
DECL|typedef|ii_wstat_u_t
)brace
id|ii_wstat_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This is a read-write enabled register. It controls     *&n; * various aspects of the Crosstalk flow control.                       *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_wcr_u
r_typedef
r_union
id|ii_wcr_u
(brace
DECL|member|ii_wcr_regval
id|shubreg_t
id|ii_wcr_regval
suffix:semicolon
r_struct
(brace
DECL|member|w_wid
id|shubreg_t
id|w_wid
suffix:colon
l_int|4
suffix:semicolon
DECL|member|w_tag
id|shubreg_t
id|w_tag
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_rsvd_1
id|shubreg_t
id|w_rsvd_1
suffix:colon
l_int|8
suffix:semicolon
DECL|member|w_dst_crd
id|shubreg_t
id|w_dst_crd
suffix:colon
l_int|3
suffix:semicolon
DECL|member|w_f_bad_pkt
id|shubreg_t
id|w_f_bad_pkt
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_dir_con
id|shubreg_t
id|w_dir_con
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_e_thresh
id|shubreg_t
id|w_e_thresh
suffix:colon
l_int|5
suffix:semicolon
DECL|member|w_rsvd
id|shubreg_t
id|w_rsvd
suffix:colon
l_int|41
suffix:semicolon
DECL|member|ii_wcr_fld_s
)brace
id|ii_wcr_fld_s
suffix:semicolon
DECL|typedef|ii_wcr_u_t
)brace
id|ii_wcr_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register&squot;s value is a bit vector that guards      *&n; * access to local registers within the II as well as to external       *&n; * Crosstalk widgets. Each bit in the register corresponds to a         *&n; * particular region in the system; a region consists of one, two or    *&n; * four nodes (depending on the value of the REGION_SIZE field in the   *&n; * LB_REV_ID register, which is documented in Section 8.3.1.1). The     *&n; * protection provided by this register applies to PIO read             *&n; * operations as well as PIO write operations. The II will perform a    *&n; * PIO read or write request only if the bit for the requestor&squot;s        *&n; * region is set; otherwise, the II will not perform the requested      *&n; * operation and will return an error response. When a PIO read or      *&n; * write request targets an external Crosstalk widget, then not only    *&n; * must the bit for the requestor&squot;s region be set in the ILAPR, but     *&n; * also the target widget&squot;s bit in the IOWA register must be set in     *&n; * order for the II to perform the requested operation; otherwise,      *&n; * the II will return an error response. Hence, the protection          *&n; * provided by the IOWA register supplements the protection provided    *&n; * by the ILAPR for requests that target external Crosstalk widgets.    *&n; * This register itself can be accessed only by the nodes whose         *&n; * region ID bits are enabled in this same register. It can also be     *&n; * accessed through the IAlias space by the local processors.           *&n; * The reset value of this register allows access by all nodes.         *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ilapr_u
r_typedef
r_union
id|ii_ilapr_u
(brace
DECL|member|ii_ilapr_regval
id|shubreg_t
id|ii_ilapr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_region
id|shubreg_t
id|i_region
suffix:colon
l_int|64
suffix:semicolon
DECL|member|ii_ilapr_fld_s
)brace
id|ii_ilapr_fld_s
suffix:semicolon
DECL|typedef|ii_ilapr_u_t
)brace
id|ii_ilapr_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  A write to this register of the 64-bit value           *&n; * &quot;SGIrules&quot; in ASCII, will cause the bit in the ILAPR register        *&n; * corresponding to the region of the requestor to be set (allow        *&n; * access). A write of any other value will be ignored. Access          *&n; * protection for this register is &quot;SGIrules&quot;.                          *&n; * This register can also be accessed through the IAlias space.         *&n; * However, this access will not change the access permissions in the   *&n; * ILAPR.                                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ilapo_u
r_typedef
r_union
id|ii_ilapo_u
(brace
DECL|member|ii_ilapo_regval
id|shubreg_t
id|ii_ilapo_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_io_ovrride
id|shubreg_t
id|i_io_ovrride
suffix:colon
l_int|64
suffix:semicolon
DECL|member|ii_ilapo_fld_s
)brace
id|ii_ilapo_fld_s
suffix:semicolon
DECL|typedef|ii_ilapo_u_t
)brace
id|ii_ilapo_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register qualifies all the PIO and Graphics writes launched    *&n; * from the SHUB towards a widget.                                      *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iowa_u
r_typedef
r_union
id|ii_iowa_u
(brace
DECL|member|ii_iowa_regval
id|shubreg_t
id|ii_iowa_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_w0_oac
id|shubreg_t
id|i_w0_oac
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_wx_oac
id|shubreg_t
id|i_wx_oac
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|ii_iowa_fld_s
)brace
id|ii_iowa_fld_s
suffix:semicolon
DECL|typedef|ii_iowa_u_t
)brace
id|ii_iowa_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register qualifies all the requests launched      *&n; * from a widget towards the Shub. This register is intended to be      *&n; * used by software in case of misbehaving widgets.                     *&n; *                                                                      *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iiwa_u
r_typedef
r_union
id|ii_iiwa_u
(brace
DECL|member|ii_iiwa_regval
id|shubreg_t
id|ii_iiwa_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_w0_iac
id|shubreg_t
id|i_w0_iac
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_wx_iac
id|shubreg_t
id|i_wx_iac
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|ii_iiwa_fld_s
)brace
id|ii_iiwa_fld_s
suffix:semicolon
DECL|typedef|ii_iiwa_u_t
)brace
id|ii_iiwa_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register qualifies all the operations launched    *&n; * from a widget towards the SHub. It allows individual access          *&n; * control for up to 8 devices per widget. A device refers to           *&n; * individual DMA master hosted by a widget.                            *&n; * The bits in each field of this register are cleared by the Shub      *&n; * upon detection of an error which requires the device to be           *&n; * disabled. These fields assume that 0=TNUM=7 (i.e., Bridge-centric    *&n; * Crosstalk). Whether or not a device has access rights to this        *&n; * Shub is determined by an AND of the device enable bit in the         *&n; * appropriate field of this register and the corresponding bit in      *&n; * the Wx_IAC field (for the widget which this device belongs to).      *&n; * The bits in this field are set by writing a 1 to them. Incoming      *&n; * replies from Crosstalk are not subject to this access control        *&n; * mechanism.                                                           *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iidem_u
r_typedef
r_union
id|ii_iidem_u
(brace
DECL|member|ii_iidem_regval
id|shubreg_t
id|ii_iidem_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_w8_dxs
id|shubreg_t
id|i_w8_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_w9_dxs
id|shubreg_t
id|i_w9_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_wa_dxs
id|shubreg_t
id|i_wa_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_wb_dxs
id|shubreg_t
id|i_wb_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_wc_dxs
id|shubreg_t
id|i_wc_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_wd_dxs
id|shubreg_t
id|i_wd_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_we_dxs
id|shubreg_t
id|i_we_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_wf_dxs
id|shubreg_t
id|i_wf_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_iidem_fld_s
)brace
id|ii_iidem_fld_s
suffix:semicolon
DECL|typedef|ii_iidem_u_t
)brace
id|ii_iidem_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the various programmable fields necessary    *&n; * for controlling and observing the LLP signals.                       *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ilcsr_u
r_typedef
r_union
id|ii_ilcsr_u
(brace
DECL|member|ii_ilcsr_regval
id|shubreg_t
id|ii_ilcsr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_nullto
id|shubreg_t
id|i_nullto
suffix:colon
l_int|6
suffix:semicolon
DECL|member|i_rsvd_4
id|shubreg_t
id|i_rsvd_4
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_wrmrst
id|shubreg_t
id|i_wrmrst
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_3
id|shubreg_t
id|i_rsvd_3
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_llp_en
id|shubreg_t
id|i_llp_en
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_bm8
id|shubreg_t
id|i_bm8
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_llp_stat
id|shubreg_t
id|i_llp_stat
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_remote_power
id|shubreg_t
id|i_remote_power
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_maxrtry
id|shubreg_t
id|i_maxrtry
suffix:colon
l_int|10
suffix:semicolon
DECL|member|i_d_avail_sel
id|shubreg_t
id|i_d_avail_sel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_maxbrst
id|shubreg_t
id|i_maxbrst
suffix:colon
l_int|10
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|22
suffix:semicolon
DECL|member|ii_ilcsr_fld_s
)brace
id|ii_ilcsr_fld_s
suffix:semicolon
DECL|typedef|ii_ilcsr_u_t
)brace
id|ii_ilcsr_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This is simply a status registers that monitors the LLP error       *&n; * rate.                                                                *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_illr_u
r_typedef
r_union
id|ii_illr_u
(brace
DECL|member|ii_illr_regval
id|shubreg_t
id|ii_illr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_sn_cnt
id|shubreg_t
id|i_sn_cnt
suffix:colon
l_int|16
suffix:semicolon
DECL|member|i_cb_cnt
id|shubreg_t
id|i_cb_cnt
suffix:colon
l_int|16
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|32
suffix:semicolon
DECL|member|ii_illr_fld_s
)brace
id|ii_illr_fld_s
suffix:semicolon
DECL|typedef|ii_illr_u_t
)brace
id|ii_illr_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  All II-detected non-BTE error interrupts are           *&n; * specified via this register.                                         *&n; * NOTE: The PI interrupt register address is hardcoded in the II. If   *&n; * PI_ID==0, then the II sends an interrupt request (Duplonet PWRI      *&n; * packet) to address offset 0x0180_0090 within the local register      *&n; * address space of PI0 on the node specified by the NODE field. If     *&n; * PI_ID==1, then the II sends the interrupt request to address         *&n; * offset 0x01A0_0090 within the local register address space of PI1    *&n; * on the node specified by the NODE field.                             *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iidsr_u
r_typedef
r_union
id|ii_iidsr_u
(brace
DECL|member|ii_iidsr_regval
id|shubreg_t
id|ii_iidsr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_level
id|shubreg_t
id|i_level
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_pi_id
id|shubreg_t
id|i_pi_id
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_node
id|shubreg_t
id|i_node
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_rsvd_3
id|shubreg_t
id|i_rsvd_3
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_enable
id|shubreg_t
id|i_enable
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_int_sent
id|shubreg_t
id|i_int_sent
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_pi0_forward_int
id|shubreg_t
id|i_pi0_forward_int
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_pi1_forward_int
id|shubreg_t
id|i_pi1_forward_int
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|30
suffix:semicolon
DECL|member|ii_iidsr_fld_s
)brace
id|ii_iidsr_fld_s
suffix:semicolon
DECL|typedef|ii_iidsr_u_t
)brace
id|ii_iidsr_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are two instances of this register. This register is used     *&n; * for matching up the incoming responses from the graphics widget to   *&n; * the processor that initiated the graphics operation. The             *&n; * write-responses are converted to graphics credits and returned to    *&n; * the processor so that the processor interface can manage the flow    *&n; * control.                                                             *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_igfx0_u
r_typedef
r_union
id|ii_igfx0_u
(brace
DECL|member|ii_igfx0_regval
id|shubreg_t
id|ii_igfx0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_w_num
id|shubreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_pi_id
id|shubreg_t
id|i_pi_id
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_n_num
id|shubreg_t
id|i_n_num
suffix:colon
l_int|12
suffix:semicolon
DECL|member|i_p_num
id|shubreg_t
id|i_p_num
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|46
suffix:semicolon
DECL|member|ii_igfx0_fld_s
)brace
id|ii_igfx0_fld_s
suffix:semicolon
DECL|typedef|ii_igfx0_u_t
)brace
id|ii_igfx0_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are two instances of this register. This register is used     *&n; * for matching up the incoming responses from the graphics widget to   *&n; * the processor that initiated the graphics operation. The             *&n; * write-responses are converted to graphics credits and returned to    *&n; * the processor so that the processor interface can manage the flow    *&n; * control.                                                             *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_igfx1_u
r_typedef
r_union
id|ii_igfx1_u
(brace
DECL|member|ii_igfx1_regval
id|shubreg_t
id|ii_igfx1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_w_num
id|shubreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_pi_id
id|shubreg_t
id|i_pi_id
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_n_num
id|shubreg_t
id|i_n_num
suffix:colon
l_int|12
suffix:semicolon
DECL|member|i_p_num
id|shubreg_t
id|i_p_num
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|46
suffix:semicolon
DECL|member|ii_igfx1_fld_s
)brace
id|ii_igfx1_fld_s
suffix:semicolon
DECL|typedef|ii_igfx1_u_t
)brace
id|ii_igfx1_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are two instances of this registers. These registers are      *&n; * used as scratch registers for software use.                          *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iscr0_u
r_typedef
r_union
id|ii_iscr0_u
(brace
DECL|member|ii_iscr0_regval
id|shubreg_t
id|ii_iscr0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_scratch
id|shubreg_t
id|i_scratch
suffix:colon
l_int|64
suffix:semicolon
DECL|member|ii_iscr0_fld_s
)brace
id|ii_iscr0_fld_s
suffix:semicolon
DECL|typedef|ii_iscr0_u_t
)brace
id|ii_iscr0_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are two instances of this registers. These registers are      *&n; * used as scratch registers for software use.                          *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iscr1_u
r_typedef
r_union
id|ii_iscr1_u
(brace
DECL|member|ii_iscr1_regval
id|shubreg_t
id|ii_iscr1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_scratch
id|shubreg_t
id|i_scratch
suffix:colon
l_int|64
suffix:semicolon
DECL|member|ii_iscr1_fld_s
)brace
id|ii_iscr1_fld_s
suffix:semicolon
DECL|typedef|ii_iscr1_u_t
)brace
id|ii_iscr1_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are seven instances of translation table entry   *&n; * registers. Each register maps a Shub Big Window to a 48-bit          *&n; * address on Crosstalk.                                                *&n; * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *&n; * number) are used to select one of these 7 registers. The Widget      *&n; * number field is then derived from the W_NUM field for synthesizing   *&n; * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *&n; * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *&n; * are padded with zeros. Although the maximum Crosstalk space          *&n; * addressable by the SHub is thus the lower 16 GBytes per widget       * &n; * (M-mode), however only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt; of this       *&n; * space can be accessed.                                               *&n; * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *&n; * Window number) are used to select one of these 7 registers. The      *&n; * Widget number field is then derived from the W_NUM field for         *&n; * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *&n; * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *&n; * field is used as Crosstalk[47], and remainder of the Crosstalk       *&n; * address bits (Crosstalk[46:34]) are always zero. While the maximum   *&n; * Crosstalk space addressable by the Shub is thus the lower            *&n; * 8-GBytes per widget (N-mode), only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt;   *&n; * of this space can be accessed.                                       *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_itte1_u
r_typedef
r_union
id|ii_itte1_u
(brace
DECL|member|ii_itte1_regval
id|shubreg_t
id|ii_itte1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_offset
id|shubreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_w_num
id|shubreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_iosp
id|shubreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_itte1_fld_s
)brace
id|ii_itte1_fld_s
suffix:semicolon
DECL|typedef|ii_itte1_u_t
)brace
id|ii_itte1_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are seven instances of translation table entry   *&n; * registers. Each register maps a Shub Big Window to a 48-bit          *&n; * address on Crosstalk.                                                *&n; * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *&n; * number) are used to select one of these 7 registers. The Widget      *&n; * number field is then derived from the W_NUM field for synthesizing   *&n; * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *&n; * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *&n; * are padded with zeros. Although the maximum Crosstalk space          *&n; * addressable by the Shub is thus the lower 16 GBytes per widget       *&n; * (M-mode), however only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt; of this       *&n; * space can be accessed.                                               *&n; * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *&n; * Window number) are used to select one of these 7 registers. The      *&n; * Widget number field is then derived from the W_NUM field for         *&n; * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *&n; * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *&n; * field is used as Crosstalk[47], and remainder of the Crosstalk       *&n; * address bits (Crosstalk[46:34]) are always zero. While the maximum   *&n; * Crosstalk space addressable by the Shub is thus the lower            *&n; * 8-GBytes per widget (N-mode), only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt;   *&n; * of this space can be accessed.                                       *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_itte2_u
r_typedef
r_union
id|ii_itte2_u
(brace
DECL|member|ii_itte2_regval
id|shubreg_t
id|ii_itte2_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_offset
id|shubreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_w_num
id|shubreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_iosp
id|shubreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_itte2_fld_s
)brace
id|ii_itte2_fld_s
suffix:semicolon
DECL|typedef|ii_itte2_u_t
)brace
id|ii_itte2_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are seven instances of translation table entry   *&n; * registers. Each register maps a Shub Big Window to a 48-bit          *&n; * address on Crosstalk.                                                *&n; * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *&n; * number) are used to select one of these 7 registers. The Widget      *&n; * number field is then derived from the W_NUM field for synthesizing   *&n; * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *&n; * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *&n; * are padded with zeros. Although the maximum Crosstalk space          *&n; * addressable by the Shub is thus the lower 16 GBytes per widget       *&n; * (M-mode), however only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt; of this       *&n; * space can be accessed.                                               *&n; * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *&n; * Window number) are used to select one of these 7 registers. The      *&n; * Widget number field is then derived from the W_NUM field for         *&n; * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *&n; * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *&n; * field is used as Crosstalk[47], and remainder of the Crosstalk       *&n; * address bits (Crosstalk[46:34]) are always zero. While the maximum   *&n; * Crosstalk space addressable by the SHub is thus the lower            *&n; * 8-GBytes per widget (N-mode), only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt;   *&n; * of this space can be accessed.                                       *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_itte3_u
r_typedef
r_union
id|ii_itte3_u
(brace
DECL|member|ii_itte3_regval
id|shubreg_t
id|ii_itte3_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_offset
id|shubreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_w_num
id|shubreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_iosp
id|shubreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_itte3_fld_s
)brace
id|ii_itte3_fld_s
suffix:semicolon
DECL|typedef|ii_itte3_u_t
)brace
id|ii_itte3_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are seven instances of translation table entry   *&n; * registers. Each register maps a SHub Big Window to a 48-bit          *&n; * address on Crosstalk.                                                *&n; * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *&n; * number) are used to select one of these 7 registers. The Widget      *&n; * number field is then derived from the W_NUM field for synthesizing   *&n; * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *&n; * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *&n; * are padded with zeros. Although the maximum Crosstalk space          *&n; * addressable by the SHub is thus the lower 16 GBytes per widget       *&n; * (M-mode), however only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt; of this       *&n; * space can be accessed.                                               *&n; * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *&n; * Window number) are used to select one of these 7 registers. The      *&n; * Widget number field is then derived from the W_NUM field for         *&n; * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *&n; * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *&n; * field is used as Crosstalk[47], and remainder of the Crosstalk       *&n; * address bits (Crosstalk[46:34]) are always zero. While the maximum   *&n; * Crosstalk space addressable by the SHub is thus the lower            *&n; * 8-GBytes per widget (N-mode), only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt;   *&n; * of this space can be accessed.                                       *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_itte4_u
r_typedef
r_union
id|ii_itte4_u
(brace
DECL|member|ii_itte4_regval
id|shubreg_t
id|ii_itte4_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_offset
id|shubreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_w_num
id|shubreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_iosp
id|shubreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_itte4_fld_s
)brace
id|ii_itte4_fld_s
suffix:semicolon
DECL|typedef|ii_itte4_u_t
)brace
id|ii_itte4_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are seven instances of translation table entry   *&n; * registers. Each register maps a SHub Big Window to a 48-bit          *&n; * address on Crosstalk.                                                *&n; * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *&n; * number) are used to select one of these 7 registers. The Widget      *&n; * number field is then derived from the W_NUM field for synthesizing   *&n; * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *&n; * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *&n; * are padded with zeros. Although the maximum Crosstalk space          *&n; * addressable by the Shub is thus the lower 16 GBytes per widget       *&n; * (M-mode), however only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt; of this       *&n; * space can be accessed.                                               *&n; * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *&n; * Window number) are used to select one of these 7 registers. The      *&n; * Widget number field is then derived from the W_NUM field for         *&n; * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *&n; * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *&n; * field is used as Crosstalk[47], and remainder of the Crosstalk       *&n; * address bits (Crosstalk[46:34]) are always zero. While the maximum   *&n; * Crosstalk space addressable by the Shub is thus the lower            *&n; * 8-GBytes per widget (N-mode), only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt;   *&n; * of this space can be accessed.                                       *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_itte5_u
r_typedef
r_union
id|ii_itte5_u
(brace
DECL|member|ii_itte5_regval
id|shubreg_t
id|ii_itte5_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_offset
id|shubreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_w_num
id|shubreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_iosp
id|shubreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_itte5_fld_s
)brace
id|ii_itte5_fld_s
suffix:semicolon
DECL|typedef|ii_itte5_u_t
)brace
id|ii_itte5_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are seven instances of translation table entry   *&n; * registers. Each register maps a Shub Big Window to a 48-bit          *&n; * address on Crosstalk.                                                *&n; * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *&n; * number) are used to select one of these 7 registers. The Widget      *&n; * number field is then derived from the W_NUM field for synthesizing   *&n; * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *&n; * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *&n; * are padded with zeros. Although the maximum Crosstalk space          *&n; * addressable by the Shub is thus the lower 16 GBytes per widget       *&n; * (M-mode), however only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt; of this       *&n; * space can be accessed.                                               *&n; * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *&n; * Window number) are used to select one of these 7 registers. The      *&n; * Widget number field is then derived from the W_NUM field for         *&n; * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *&n; * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *&n; * field is used as Crosstalk[47], and remainder of the Crosstalk       *&n; * address bits (Crosstalk[46:34]) are always zero. While the maximum   *&n; * Crosstalk space addressable by the Shub is thus the lower            *&n; * 8-GBytes per widget (N-mode), only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt;   *&n; * of this space can be accessed.                                       *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_itte6_u
r_typedef
r_union
id|ii_itte6_u
(brace
DECL|member|ii_itte6_regval
id|shubreg_t
id|ii_itte6_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_offset
id|shubreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_w_num
id|shubreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_iosp
id|shubreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_itte6_fld_s
)brace
id|ii_itte6_fld_s
suffix:semicolon
DECL|typedef|ii_itte6_u_t
)brace
id|ii_itte6_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are seven instances of translation table entry   *&n; * registers. Each register maps a Shub Big Window to a 48-bit          *&n; * address on Crosstalk.                                                *&n; * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *&n; * number) are used to select one of these 7 registers. The Widget      *&n; * number field is then derived from the W_NUM field for synthesizing   *&n; * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *&n; * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *&n; * are padded with zeros. Although the maximum Crosstalk space          *&n; * addressable by the Shub is thus the lower 16 GBytes per widget       *&n; * (M-mode), however only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt; of this       *&n; * space can be accessed.                                               *&n; * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *&n; * Window number) are used to select one of these 7 registers. The      *&n; * Widget number field is then derived from the W_NUM field for         *&n; * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *&n; * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *&n; * field is used as Crosstalk[47], and remainder of the Crosstalk       *&n; * address bits (Crosstalk[46:34]) are always zero. While the maximum   *&n; * Crosstalk space addressable by the SHub is thus the lower            *&n; * 8-GBytes per widget (N-mode), only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt;   *&n; * of this space can be accessed.                                       *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_itte7_u
r_typedef
r_union
id|ii_itte7_u
(brace
DECL|member|ii_itte7_regval
id|shubreg_t
id|ii_itte7_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_offset
id|shubreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_w_num
id|shubreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_iosp
id|shubreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_itte7_fld_s
)brace
id|ii_itte7_fld_s
suffix:semicolon
DECL|typedef|ii_itte7_u_t
)brace
id|ii_itte7_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of SHub and Crossbow.           *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprb0_u
r_typedef
r_union
id|ii_iprb0_u
(brace
DECL|member|ii_iprb0_regval
id|shubreg_t
id|ii_iprb0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|shubreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|shubreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|shubreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|shubreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|shubreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|shubreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|shubreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|shubreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|shubreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|shubreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|shubreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprb0_fld_s
)brace
id|ii_iprb0_fld_s
suffix:semicolon
DECL|typedef|ii_iprb0_u_t
)brace
id|ii_iprb0_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of SHub and Crossbow.           *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprb8_u
r_typedef
r_union
id|ii_iprb8_u
(brace
DECL|member|ii_iprb8_regval
id|shubreg_t
id|ii_iprb8_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|shubreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|shubreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|shubreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|shubreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|shubreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|shubreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|shubreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|shubreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|shubreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|shubreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|shubreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprb8_fld_s
)brace
id|ii_iprb8_fld_s
suffix:semicolon
DECL|typedef|ii_iprb8_u_t
)brace
id|ii_iprb8_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of SHub and Crossbow.           *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprb9_u
r_typedef
r_union
id|ii_iprb9_u
(brace
DECL|member|ii_iprb9_regval
id|shubreg_t
id|ii_iprb9_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|shubreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|shubreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|shubreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|shubreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|shubreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|shubreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|shubreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|shubreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|shubreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|shubreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|shubreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprb9_fld_s
)brace
id|ii_iprb9_fld_s
suffix:semicolon
DECL|typedef|ii_iprb9_u_t
)brace
id|ii_iprb9_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of SHub and Crossbow.        *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; *                                                                      *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprba_u
r_typedef
r_union
id|ii_iprba_u
(brace
DECL|member|ii_iprba_regval
id|shubreg_t
id|ii_iprba_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|shubreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|shubreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|shubreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|shubreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|shubreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|shubreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|shubreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|shubreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|shubreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|shubreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|shubreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprba_fld_s
)brace
id|ii_iprba_fld_s
suffix:semicolon
DECL|typedef|ii_iprba_u_t
)brace
id|ii_iprba_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of SHub and Crossbow.           *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprbb_u
r_typedef
r_union
id|ii_iprbb_u
(brace
DECL|member|ii_iprbb_regval
id|shubreg_t
id|ii_iprbb_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|shubreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|shubreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|shubreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|shubreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|shubreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|shubreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|shubreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|shubreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|shubreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|shubreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|shubreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprbb_fld_s
)brace
id|ii_iprbb_fld_s
suffix:semicolon
DECL|typedef|ii_iprbb_u_t
)brace
id|ii_iprbb_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of SHub and Crossbow.           *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprbc_u
r_typedef
r_union
id|ii_iprbc_u
(brace
DECL|member|ii_iprbc_regval
id|shubreg_t
id|ii_iprbc_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|shubreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|shubreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|shubreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|shubreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|shubreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|shubreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|shubreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|shubreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|shubreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|shubreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|shubreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprbc_fld_s
)brace
id|ii_iprbc_fld_s
suffix:semicolon
DECL|typedef|ii_iprbc_u_t
)brace
id|ii_iprbc_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of SHub and Crossbow.           *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprbd_u
r_typedef
r_union
id|ii_iprbd_u
(brace
DECL|member|ii_iprbd_regval
id|shubreg_t
id|ii_iprbd_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|shubreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|shubreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|shubreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|shubreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|shubreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|shubreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|shubreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|shubreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|shubreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|shubreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|shubreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprbd_fld_s
)brace
id|ii_iprbd_fld_s
suffix:semicolon
DECL|typedef|ii_iprbd_u_t
)brace
id|ii_iprbd_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of SHub and Crossbow.           *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprbe_u
r_typedef
r_union
id|ii_iprbe_u
(brace
DECL|member|ii_iprbe_regval
id|shubreg_t
id|ii_iprbe_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|shubreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|shubreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|shubreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|shubreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|shubreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|shubreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|shubreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|shubreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|shubreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|shubreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|shubreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprbe_fld_s
)brace
id|ii_iprbe_fld_s
suffix:semicolon
DECL|typedef|ii_iprbe_u_t
)brace
id|ii_iprbe_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of Shub and Crossbow.           *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprbf_u
r_typedef
r_union
id|ii_iprbf_u
(brace
DECL|member|ii_iprbf_regval
id|shubreg_t
id|ii_iprbf_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|shubreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|shubreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|shubreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|shubreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|shubreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|shubreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|shubreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|shubreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|shubreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|shubreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|shubreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprbe_fld_s
)brace
id|ii_iprbe_fld_s
suffix:semicolon
DECL|typedef|ii_iprbf_u_t
)brace
id|ii_iprbf_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register specifies the timeout value to use for monitoring     *&n; * Crosstalk credits which are used outbound to Crosstalk. An           *&n; * internal counter called the Crosstalk Credit Timeout Counter         *&n; * increments every 128 II clocks. The counter starts counting          *&n; * anytime the credit count drops below a threshold, and resets to      *&n; * zero (stops counting) anytime the credit count is at or above the    *&n; * threshold. The threshold is 1 credit in direct connect mode and 2    *&n; * in Crossbow connect mode. When the internal Crosstalk Credit         *&n; * Timeout Counter reaches the value programmed in this register, a     *&n; * Crosstalk Credit Timeout has occurred. The internal counter is not   *&n; * readable from software, and stops counting at its maximum value,     *&n; * so it cannot cause more than one interrupt.                          *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ixcc_u
r_typedef
r_union
id|ii_ixcc_u
(brace
DECL|member|ii_ixcc_regval
id|shubreg_t
id|ii_ixcc_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_time_out
id|shubreg_t
id|i_time_out
suffix:colon
l_int|26
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|38
suffix:semicolon
DECL|member|ii_ixcc_fld_s
)brace
id|ii_ixcc_fld_s
suffix:semicolon
DECL|typedef|ii_ixcc_u_t
)brace
id|ii_ixcc_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register qualifies all the PIO and DMA            *&n; * operations launched from widget 0 towards the SHub. In               *&n; * addition, it also qualifies accesses by the BTE streams.             *&n; * The bits in each field of this register are cleared by the SHub      *&n; * upon detection of an error which requires widget 0 or the BTE        *&n; * streams to be terminated. Whether or not widget x has access         *&n; * rights to this SHub is determined by an AND of the device            *&n; * enable bit in the appropriate field of this register and bit 0 in    *&n; * the Wx_IAC field. The bits in this field are set by writing a 1 to   *&n; * them. Incoming replies from Crosstalk are not subject to this        *&n; * access control mechanism.                                            *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_imem_u
r_typedef
r_union
id|ii_imem_u
(brace
DECL|member|ii_imem_regval
id|shubreg_t
id|ii_imem_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_w0_esd
id|shubreg_t
id|i_w0_esd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_3
id|shubreg_t
id|i_rsvd_3
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_b0_esd
id|shubreg_t
id|i_b0_esd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_b1_esd
id|shubreg_t
id|i_b1_esd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_clr_precise
id|shubreg_t
id|i_clr_precise
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_imem_fld_s
)brace
id|ii_imem_fld_s
suffix:semicolon
DECL|typedef|ii_imem_u_t
)brace
id|ii_imem_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register specifies the timeout value to use for   *&n; * monitoring Crosstalk tail flits coming into the Shub in the          *&n; * TAIL_TO field. An internal counter associated with this register     *&n; * is incremented every 128 II internal clocks (7 bits). The counter    *&n; * starts counting anytime a header micropacket is received and stops   *&n; * counting (and resets to zero) any time a micropacket with a Tail     *&n; * bit is received. Once the counter reaches the threshold value        *&n; * programmed in this register, it generates an interrupt to the        *&n; * processor that is programmed into the IIDSR. The counter saturates   *&n; * (does not roll over) at its maximum value, so it cannot cause        *&n; * another interrupt until after it is cleared.                         *&n; * The register also contains the Read Response Timeout values. The     *&n; * Prescalar is 23 bits, and counts II clocks. An internal counter      *&n; * increments on every II clock and when it reaches the value in the    *&n; * Prescalar field, all IPRTE registers with their valid bits set       *&n; * have their Read Response timers bumped. Whenever any of them match   *&n; * the value in the RRSP_TO field, a Read Response Timeout has          *&n; * occurred, and error handling occurs as described in the Error        *&n; * Handling section of this document.                                   *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ixtt_u
r_typedef
r_union
id|ii_ixtt_u
(brace
DECL|member|ii_ixtt_regval
id|shubreg_t
id|ii_ixtt_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_tail_to
id|shubreg_t
id|i_tail_to
suffix:colon
l_int|26
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|6
suffix:semicolon
DECL|member|i_rrsp_ps
id|shubreg_t
id|i_rrsp_ps
suffix:colon
l_int|23
suffix:semicolon
DECL|member|i_rrsp_to
id|shubreg_t
id|i_rrsp_to
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ii_ixtt_fld_s
)brace
id|ii_ixtt_fld_s
suffix:semicolon
DECL|typedef|ii_ixtt_u_t
)brace
id|ii_ixtt_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Writing a 1 to the fields of this register clears the appropriate   *&n; * error bits in other areas of SHub. Note that when the                *&n; * E_PRB_x bits are used to clear error bits in PRB registers,          *&n; * SPUR_RD and SPUR_WR may persist, because they require additional     *&n; * action to clear them. See the IPRBx and IXSS Register                *&n; * specifications.                                                      *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ieclr_u
r_typedef
r_union
id|ii_ieclr_u
(brace
DECL|member|ii_ieclr_regval
id|shubreg_t
id|ii_ieclr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_e_prb_0
id|shubreg_t
id|i_e_prb_0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_e_prb_8
id|shubreg_t
id|i_e_prb_8
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_9
id|shubreg_t
id|i_e_prb_9
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_a
id|shubreg_t
id|i_e_prb_a
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_b
id|shubreg_t
id|i_e_prb_b
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_c
id|shubreg_t
id|i_e_prb_c
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_d
id|shubreg_t
id|i_e_prb_d
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_e
id|shubreg_t
id|i_e_prb_e
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_f
id|shubreg_t
id|i_e_prb_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_crazy
id|shubreg_t
id|i_e_crazy
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_bte_0
id|shubreg_t
id|i_e_bte_0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_bte_1
id|shubreg_t
id|i_e_bte_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_reserved_1
id|shubreg_t
id|i_reserved_1
suffix:colon
l_int|10
suffix:semicolon
DECL|member|i_spur_rd_hdr
id|shubreg_t
id|i_spur_rd_hdr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_cam_intr_to
id|shubreg_t
id|i_cam_intr_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_cam_overflow
id|shubreg_t
id|i_cam_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_cam_read_miss
id|shubreg_t
id|i_cam_read_miss
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ioq_rep_underflow
id|shubreg_t
id|i_ioq_rep_underflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ioq_req_underflow
id|shubreg_t
id|i_ioq_req_underflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ioq_rep_overflow
id|shubreg_t
id|i_ioq_rep_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ioq_req_overflow
id|shubreg_t
id|i_ioq_req_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_iiq_rep_overflow
id|shubreg_t
id|i_iiq_rep_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_iiq_req_overflow
id|shubreg_t
id|i_iiq_req_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ii_xn_rep_cred_overflow
id|shubreg_t
id|i_ii_xn_rep_cred_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ii_xn_req_cred_overflow
id|shubreg_t
id|i_ii_xn_req_cred_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ii_xn_invalid_cmd
id|shubreg_t
id|i_ii_xn_invalid_cmd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_xn_ii_invalid_cmd
id|shubreg_t
id|i_xn_ii_invalid_cmd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_reserved_2
id|shubreg_t
id|i_reserved_2
suffix:colon
l_int|21
suffix:semicolon
DECL|member|ii_ieclr_fld_s
)brace
id|ii_ieclr_fld_s
suffix:semicolon
DECL|typedef|ii_ieclr_u_t
)brace
id|ii_ieclr_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register controls both BTEs. SOFT_RESET is intended for        *&n; * recovery after an error. COUNT controls the total number of CRBs     *&n; * that both BTEs (combined) can use, which affects total BTE           *&n; * bandwidth.                                                           *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ibcr_u
r_typedef
r_union
id|ii_ibcr_u
(brace
DECL|member|ii_ibcr_regval
id|shubreg_t
id|ii_ibcr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_count
id|shubreg_t
id|i_count
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_soft_reset
id|shubreg_t
id|i_soft_reset
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|55
suffix:semicolon
DECL|member|ii_ibcr_fld_s
)brace
id|ii_ibcr_fld_s
suffix:semicolon
DECL|typedef|ii_ibcr_u_t
)brace
id|ii_ibcr_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the header of a spurious read response       *&n; * received from Crosstalk. A spurious read response is defined as a    *&n; * read response received by II from a widget for which (1) the SIDN    *&n; * has a value between 1 and 7, inclusive (II never sends requests to   *&n; * these widgets (2) there is no valid IPRTE register which             *&n; * corresponds to the TNUM, or (3) the widget indicated in SIDN is      *&n; * not the same as the widget recorded in the IPRTE register            *&n; * referenced by the TNUM. If this condition is true, and if the        *&n; * IXSS[VALID] bit is clear, then the header of the spurious read       *&n; * response is capture in IXSM and IXSS, and IXSS[VALID] is set. The    *&n; * errant header is thereby captured, and no further spurious read      *&n; * respones are captured until IXSS[VALID] is cleared by setting the    *&n; * appropriate bit in IECLR.Everytime a spurious read response is       *&n; * detected, the SPUR_RD bit of the PRB corresponding to the incoming   *&n; * message&squot;s SIDN field is set. This always happens, regarless of       *&n; * whether a header is captured. The programmer should check            *&n; * IXSM[SIDN] to determine which widget sent the spurious response,     *&n; * because there may be more than one SPUR_RD bit set in the PRB        *&n; * registers. The widget indicated by IXSM[SIDN] was the first          *&n; * spurious read response to be received since the last time            *&n; * IXSS[VALID] was clear. The SPUR_RD bit of the corresponding PRB      *&n; * will be set. Any SPUR_RD bits in any other PRB registers indicate    *&n; * spurious messages from other widets which were detected after the    *&n; * header was captured..                                                *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ixsm_u
r_typedef
r_union
id|ii_ixsm_u
(brace
DECL|member|ii_ixsm_regval
id|shubreg_t
id|ii_ixsm_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_byte_en
id|shubreg_t
id|i_byte_en
suffix:colon
l_int|32
suffix:semicolon
DECL|member|i_reserved
id|shubreg_t
id|i_reserved
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tag
id|shubreg_t
id|i_tag
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_alt_pactyp
id|shubreg_t
id|i_alt_pactyp
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_bo
id|shubreg_t
id|i_bo
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_error
id|shubreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_vbpm
id|shubreg_t
id|i_vbpm
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_gbr
id|shubreg_t
id|i_gbr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ds
id|shubreg_t
id|i_ds
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_ct
id|shubreg_t
id|i_ct
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tnum
id|shubreg_t
id|i_tnum
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_pactyp
id|shubreg_t
id|i_pactyp
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_sidn
id|shubreg_t
id|i_sidn
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_didn
id|shubreg_t
id|i_didn
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ii_ixsm_fld_s
)brace
id|ii_ixsm_fld_s
suffix:semicolon
DECL|typedef|ii_ixsm_u_t
)brace
id|ii_ixsm_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the sideband bits of a spurious read         *&n; * response received from Crosstalk.                                    *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ixss_u
r_typedef
r_union
id|ii_ixss_u
(brace
DECL|member|ii_ixss_regval
id|shubreg_t
id|ii_ixss_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_sideband
id|shubreg_t
id|i_sideband
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|55
suffix:semicolon
DECL|member|i_valid
id|shubreg_t
id|i_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_ixss_fld_s
)brace
id|ii_ixss_fld_s
suffix:semicolon
DECL|typedef|ii_ixss_u_t
)brace
id|ii_ixss_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register enables software to access the II LLP&squot;s test port.    *&n; * Refer to the LLP 2.5 documentation for an explanation of the test    *&n; * port. Software can write to this register to program the values      *&n; * for the control fields (TestErrCapture, TestClear, TestFlit,         *&n; * TestMask and TestSeed). Similarly, software can read from this       *&n; * register to obtain the values of the test port&squot;s status outputs      *&n; * (TestCBerr, TestValid and TestData).                                 *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ilct_u
r_typedef
r_union
id|ii_ilct_u
(brace
DECL|member|ii_ilct_regval
id|shubreg_t
id|ii_ilct_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_test_seed
id|shubreg_t
id|i_test_seed
suffix:colon
l_int|20
suffix:semicolon
DECL|member|i_test_mask
id|shubreg_t
id|i_test_mask
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_test_data
id|shubreg_t
id|i_test_data
suffix:colon
l_int|20
suffix:semicolon
DECL|member|i_test_valid
id|shubreg_t
id|i_test_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_test_cberr
id|shubreg_t
id|i_test_cberr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_test_flit
id|shubreg_t
id|i_test_flit
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_test_clear
id|shubreg_t
id|i_test_clear
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_test_err_capture
id|shubreg_t
id|i_test_err_capture
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|9
suffix:semicolon
DECL|member|ii_ilct_fld_s
)brace
id|ii_ilct_fld_s
suffix:semicolon
DECL|typedef|ii_ilct_u_t
)brace
id|ii_ilct_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  If the II detects an illegal incoming Duplonet packet (request or   *&n; * reply) when VALID==0 in the IIEPH1 register, then it saves the       *&n; * contents of the packet&squot;s header flit in the IIEPH1 and IIEPH2        *&n; * registers, sets the VALID bit in IIEPH1, clears the OVERRUN bit,     *&n; * and assigns a value to the ERR_TYPE field which indicates the        *&n; * specific nature of the error. The II recognizes four different       *&n; * types of errors: short request packets (ERR_TYPE==2), short reply    *&n; * packets (ERR_TYPE==3), long request packets (ERR_TYPE==4) and long   *&n; * reply packets (ERR_TYPE==5). The encodings for these types of        *&n; * errors were chosen to be consistent with the same types of errors    *&n; * indicated by the ERR_TYPE field in the LB_ERROR_HDR1 register (in    *&n; * the LB unit). If the II detects an illegal incoming Duplonet         *&n; * packet when VALID==1 in the IIEPH1 register, then it merely sets     *&n; * the OVERRUN bit to indicate that a subsequent error has happened,    *&n; * and does nothing further.                                            *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iieph1_u
r_typedef
r_union
id|ii_iieph1_u
(brace
DECL|member|ii_iieph1_regval
id|shubreg_t
id|ii_iieph1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_command
id|shubreg_t
id|i_command
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_rsvd_5
id|shubreg_t
id|i_rsvd_5
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_suppl
id|shubreg_t
id|i_suppl
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_4
id|shubreg_t
id|i_rsvd_4
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_source
id|shubreg_t
id|i_source
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_3
id|shubreg_t
id|i_rsvd_3
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_err_type
id|shubreg_t
id|i_err_type
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_overrun
id|shubreg_t
id|i_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_valid
id|shubreg_t
id|i_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|13
suffix:semicolon
DECL|member|ii_iieph1_fld_s
)brace
id|ii_iieph1_fld_s
suffix:semicolon
DECL|typedef|ii_iieph1_u_t
)brace
id|ii_iieph1_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register holds the Address field from the header flit of an    *&n; * incoming erroneous Duplonet packet, along with the tail bit which    *&n; * accompanied this header flit. This register is essentially an        *&n; * extension of IIEPH1. Two registers were necessary because the 64     *&n; * bits available in only a single register were insufficient to        *&n; * capture the entire header flit of an erroneous packet.               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iieph2_u
r_typedef
r_union
id|ii_iieph2_u
(brace
DECL|member|ii_iieph2_regval
id|shubreg_t
id|ii_iieph2_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_0
id|shubreg_t
id|i_rsvd_0
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_address
id|shubreg_t
id|i_address
suffix:colon
l_int|47
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|10
suffix:semicolon
DECL|member|i_tail
id|shubreg_t
id|i_tail
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ii_iieph2_fld_s
)brace
id|ii_iieph2_fld_s
suffix:semicolon
DECL|typedef|ii_iieph2_u_t
)brace
id|ii_iieph2_u_t
suffix:semicolon
multiline_comment|/******************************/
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register&squot;s value is a bit vector that guards access from SXBs  *&n; * to local registers within the II as well as to external Crosstalk    *&n; * widgets&t;&t;&t;&t;&t;&t;&t;&t;*&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_islapr_u
r_typedef
r_union
id|ii_islapr_u
(brace
DECL|member|ii_islapr_regval
id|shubreg_t
id|ii_islapr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_region
id|shubreg_t
id|i_region
suffix:colon
l_int|64
suffix:semicolon
DECL|member|ii_islapr_fld_s
)brace
id|ii_islapr_fld_s
suffix:semicolon
DECL|typedef|ii_islapr_u_t
)brace
id|ii_islapr_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  A write to this register of the 56-bit value &quot;Pup+Bun&quot; will cause&t;*&n; * the bit in the ISLAPR register corresponding to the region of the&t;*&n; * requestor to be set (access allowed).&t;&t;&t;&t;(&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_islapo_u
r_typedef
r_union
id|ii_islapo_u
(brace
DECL|member|ii_islapo_regval
id|shubreg_t
id|ii_islapo_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_io_sbx_ovrride
id|shubreg_t
id|i_io_sbx_ovrride
suffix:colon
l_int|56
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_islapo_fld_s
)brace
id|ii_islapo_fld_s
suffix:semicolon
DECL|typedef|ii_islapo_u_t
)brace
id|ii_islapo_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Determines how long the wrapper will wait aftr an interrupt is&t;*&n; * initially issued from the II before it times out the outstanding&t;*&n; * interrupt and drops it from the interrupt queue.&t;&t;&t;* &n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iwi_u
r_typedef
r_union
id|ii_iwi_u
(brace
DECL|member|ii_iwi_regval
id|shubreg_t
id|ii_iwi_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_prescale
id|shubreg_t
id|i_prescale
suffix:colon
l_int|24
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_timeout
id|shubreg_t
id|i_timeout
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd1
id|shubreg_t
id|i_rsvd1
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_intrpt_retry_period
id|shubreg_t
id|i_intrpt_retry_period
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd2
id|shubreg_t
id|i_rsvd2
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_iwi_fld_s
)brace
id|ii_iwi_fld_s
suffix:semicolon
DECL|typedef|ii_iwi_u_t
)brace
id|ii_iwi_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Log errors which have occurred in the II wrapper. The errors are&t;*&n; * cleared by writing to the IECLR register.&t;&t;&t;&t;* &n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iwel_u
r_typedef
r_union
id|ii_iwel_u
(brace
DECL|member|ii_iwel_regval
id|shubreg_t
id|ii_iwel_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_intr_timed_out
id|shubreg_t
id|i_intr_timed_out
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_cam_overflow
id|shubreg_t
id|i_cam_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_cam_read_miss
id|shubreg_t
id|i_cam_read_miss
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd1
id|shubreg_t
id|i_rsvd1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_ioq_rep_underflow
id|shubreg_t
id|i_ioq_rep_underflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ioq_req_underflow
id|shubreg_t
id|i_ioq_req_underflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ioq_rep_overflow
id|shubreg_t
id|i_ioq_rep_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ioq_req_overflow
id|shubreg_t
id|i_ioq_req_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_iiq_rep_overflow
id|shubreg_t
id|i_iiq_rep_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_iiq_req_overflow
id|shubreg_t
id|i_iiq_req_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd2
id|shubreg_t
id|i_rsvd2
suffix:colon
l_int|6
suffix:semicolon
DECL|member|i_ii_xn_rep_cred_over_under
id|shubreg_t
id|i_ii_xn_rep_cred_over_under
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ii_xn_req_cred_over_under
id|shubreg_t
id|i_ii_xn_req_cred_over_under
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd3
id|shubreg_t
id|i_rsvd3
suffix:colon
l_int|6
suffix:semicolon
DECL|member|i_ii_xn_invalid_cmd
id|shubreg_t
id|i_ii_xn_invalid_cmd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_xn_ii_invalid_cmd
id|shubreg_t
id|i_xn_ii_invalid_cmd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd4
id|shubreg_t
id|i_rsvd4
suffix:colon
l_int|30
suffix:semicolon
DECL|member|ii_iwel_fld_s
)brace
id|ii_iwel_fld_s
suffix:semicolon
DECL|typedef|ii_iwel_u_t
)brace
id|ii_iwel_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Controls the II wrapper.&t;&t;&t;&t;&t;&t;* &n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iwc_u
r_typedef
r_union
id|ii_iwc_u
(brace
DECL|member|ii_iwc_regval
id|shubreg_t
id|ii_iwc_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_dma_byte_swap
id|shubreg_t
id|i_dma_byte_swap
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_cam_read_lines_reset
id|shubreg_t
id|i_cam_read_lines_reset
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd1
id|shubreg_t
id|i_rsvd1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_ii_xn_cred_over_under_log
id|shubreg_t
id|i_ii_xn_cred_over_under_log
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd2
id|shubreg_t
id|i_rsvd2
suffix:colon
l_int|19
suffix:semicolon
DECL|member|i_xn_rep_iq_depth
id|shubreg_t
id|i_xn_rep_iq_depth
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd3
id|shubreg_t
id|i_rsvd3
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_xn_req_iq_depth
id|shubreg_t
id|i_xn_req_iq_depth
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd4
id|shubreg_t
id|i_rsvd4
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_iiq_depth
id|shubreg_t
id|i_iiq_depth
suffix:colon
l_int|6
suffix:semicolon
DECL|member|i_rsvd5
id|shubreg_t
id|i_rsvd5
suffix:colon
l_int|12
suffix:semicolon
DECL|member|i_force_rep_cred
id|shubreg_t
id|i_force_rep_cred
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_force_req_cred
id|shubreg_t
id|i_force_req_cred
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iwc_fld_s
)brace
id|ii_iwc_fld_s
suffix:semicolon
DECL|typedef|ii_iwc_u_t
)brace
id|ii_iwc_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Status in the II wrapper.&t;&t;&t;&t;&t;&t;* &n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iws_u
r_typedef
r_union
id|ii_iws_u
(brace
DECL|member|ii_iws_regval
id|shubreg_t
id|ii_iws_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_xn_rep_iq_credits
id|shubreg_t
id|i_xn_rep_iq_credits
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_xn_req_iq_credits
id|shubreg_t
id|i_xn_req_iq_credits
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd1
id|shubreg_t
id|i_rsvd1
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_iws_fld_s
)brace
id|ii_iws_fld_s
suffix:semicolon
DECL|typedef|ii_iws_u_t
)brace
id|ii_iws_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Masks errors in the IWEL register.&t;&t;&t;&t;&t;*&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iweim_u
r_typedef
r_union
id|ii_iweim_u
(brace
DECL|member|ii_iweim_regval
id|shubreg_t
id|ii_iweim_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_intr_timed_out
id|shubreg_t
id|i_intr_timed_out
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_cam_overflow
id|shubreg_t
id|i_cam_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_cam_read_miss
id|shubreg_t
id|i_cam_read_miss
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd1
id|shubreg_t
id|i_rsvd1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_ioq_rep_underflow
id|shubreg_t
id|i_ioq_rep_underflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ioq_req_underflow
id|shubreg_t
id|i_ioq_req_underflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ioq_rep_overflow
id|shubreg_t
id|i_ioq_rep_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ioq_req_overflow
id|shubreg_t
id|i_ioq_req_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_iiq_rep_overflow
id|shubreg_t
id|i_iiq_rep_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_iiq_req_overflow
id|shubreg_t
id|i_iiq_req_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd2
id|shubreg_t
id|i_rsvd2
suffix:colon
l_int|6
suffix:semicolon
DECL|member|i_ii_xn_rep_cred_overflow
id|shubreg_t
id|i_ii_xn_rep_cred_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ii_xn_req_cred_overflow
id|shubreg_t
id|i_ii_xn_req_cred_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd3
id|shubreg_t
id|i_rsvd3
suffix:colon
l_int|6
suffix:semicolon
DECL|member|i_ii_xn_invalid_cmd
id|shubreg_t
id|i_ii_xn_invalid_cmd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_xn_ii_invalid_cmd
id|shubreg_t
id|i_xn_ii_invalid_cmd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd4
id|shubreg_t
id|i_rsvd4
suffix:colon
l_int|30
suffix:semicolon
DECL|member|ii_iweim_fld_s
)brace
id|ii_iweim_fld_s
suffix:semicolon
DECL|typedef|ii_iweim_u_t
)brace
id|ii_iweim_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  A write to this register causes a particular field in the           *&n; * corresponding widget&squot;s PRB entry to be adjusted up or down by 1.     *&n; * This counter should be used when recovering from error and reset     *&n; * conditions. Note that software would be capable of causing           *&n; * inadvertent overflow or underflow of these counters.                 *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ipca_u
r_typedef
r_union
id|ii_ipca_u
(brace
DECL|member|ii_ipca_regval
id|shubreg_t
id|ii_ipca_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_wid
id|shubreg_t
id|i_wid
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_adjust
id|shubreg_t
id|i_adjust
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_field
id|shubreg_t
id|i_field
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|54
suffix:semicolon
DECL|member|ii_ipca_fld_s
)brace
id|ii_ipca_fld_s
suffix:semicolon
DECL|typedef|ii_ipca_u_t
)brace
id|ii_ipca_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprte0a_u
r_typedef
r_union
id|ii_iprte0a_u
(brace
DECL|member|ii_iprte0a_regval
id|shubreg_t
id|ii_iprte0a_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|54
suffix:semicolon
DECL|member|i_widget
id|shubreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|shubreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|shubreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprte0a_fld_s
)brace
id|ii_iprte0a_fld_s
suffix:semicolon
DECL|typedef|ii_iprte0a_u_t
)brace
id|ii_iprte0a_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprte1a_u
r_typedef
r_union
id|ii_iprte1a_u
(brace
DECL|member|ii_iprte1a_regval
id|shubreg_t
id|ii_iprte1a_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|54
suffix:semicolon
DECL|member|i_widget
id|shubreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|shubreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|shubreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprte1a_fld_s
)brace
id|ii_iprte1a_fld_s
suffix:semicolon
DECL|typedef|ii_iprte1a_u_t
)brace
id|ii_iprte1a_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprte2a_u
r_typedef
r_union
id|ii_iprte2a_u
(brace
DECL|member|ii_iprte2a_regval
id|shubreg_t
id|ii_iprte2a_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|54
suffix:semicolon
DECL|member|i_widget
id|shubreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|shubreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|shubreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprte2a_fld_s
)brace
id|ii_iprte2a_fld_s
suffix:semicolon
DECL|typedef|ii_iprte2a_u_t
)brace
id|ii_iprte2a_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprte3a_u
r_typedef
r_union
id|ii_iprte3a_u
(brace
DECL|member|ii_iprte3a_regval
id|shubreg_t
id|ii_iprte3a_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|54
suffix:semicolon
DECL|member|i_widget
id|shubreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|shubreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|shubreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprte3a_fld_s
)brace
id|ii_iprte3a_fld_s
suffix:semicolon
DECL|typedef|ii_iprte3a_u_t
)brace
id|ii_iprte3a_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprte4a_u
r_typedef
r_union
id|ii_iprte4a_u
(brace
DECL|member|ii_iprte4a_regval
id|shubreg_t
id|ii_iprte4a_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|54
suffix:semicolon
DECL|member|i_widget
id|shubreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|shubreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|shubreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprte4a_fld_s
)brace
id|ii_iprte4a_fld_s
suffix:semicolon
DECL|typedef|ii_iprte4a_u_t
)brace
id|ii_iprte4a_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprte5a_u
r_typedef
r_union
id|ii_iprte5a_u
(brace
DECL|member|ii_iprte5a_regval
id|shubreg_t
id|ii_iprte5a_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|54
suffix:semicolon
DECL|member|i_widget
id|shubreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|shubreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|shubreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprte5a_fld_s
)brace
id|ii_iprte5a_fld_s
suffix:semicolon
DECL|typedef|ii_iprte5a_u_t
)brace
id|ii_iprte5a_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprte6a_u
r_typedef
r_union
id|ii_iprte6a_u
(brace
DECL|member|ii_iprte6a_regval
id|shubreg_t
id|ii_iprte6a_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|54
suffix:semicolon
DECL|member|i_widget
id|shubreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|shubreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|shubreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprte6a_fld_s
)brace
id|ii_iprte6a_fld_s
suffix:semicolon
DECL|typedef|ii_iprte6a_u_t
)brace
id|ii_iprte6a_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprte7a_u
r_typedef
r_union
id|ii_iprte7a_u
(brace
DECL|member|ii_iprte7a_regval
id|shubreg_t
id|ii_iprte7a_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|54
suffix:semicolon
DECL|member|i_widget
id|shubreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|shubreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|shubreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprtea7_fld_s
)brace
id|ii_iprtea7_fld_s
suffix:semicolon
DECL|typedef|ii_iprte7a_u_t
)brace
id|ii_iprte7a_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprte0b_u
r_typedef
r_union
id|ii_iprte0b_u
(brace
DECL|member|ii_iprte0b_regval
id|shubreg_t
id|ii_iprte0b_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_address
id|shubreg_t
id|i_address
suffix:colon
l_int|47
suffix:semicolon
DECL|member|i_init
id|shubreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|shubreg_t
id|i_source
suffix:colon
l_int|11
suffix:semicolon
DECL|member|ii_iprte0b_fld_s
)brace
id|ii_iprte0b_fld_s
suffix:semicolon
DECL|typedef|ii_iprte0b_u_t
)brace
id|ii_iprte0b_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprte1b_u
r_typedef
r_union
id|ii_iprte1b_u
(brace
DECL|member|ii_iprte1b_regval
id|shubreg_t
id|ii_iprte1b_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_address
id|shubreg_t
id|i_address
suffix:colon
l_int|47
suffix:semicolon
DECL|member|i_init
id|shubreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|shubreg_t
id|i_source
suffix:colon
l_int|11
suffix:semicolon
DECL|member|ii_iprte1b_fld_s
)brace
id|ii_iprte1b_fld_s
suffix:semicolon
DECL|typedef|ii_iprte1b_u_t
)brace
id|ii_iprte1b_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprte2b_u
r_typedef
r_union
id|ii_iprte2b_u
(brace
DECL|member|ii_iprte2b_regval
id|shubreg_t
id|ii_iprte2b_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_address
id|shubreg_t
id|i_address
suffix:colon
l_int|47
suffix:semicolon
DECL|member|i_init
id|shubreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|shubreg_t
id|i_source
suffix:colon
l_int|11
suffix:semicolon
DECL|member|ii_iprte2b_fld_s
)brace
id|ii_iprte2b_fld_s
suffix:semicolon
DECL|typedef|ii_iprte2b_u_t
)brace
id|ii_iprte2b_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprte3b_u
r_typedef
r_union
id|ii_iprte3b_u
(brace
DECL|member|ii_iprte3b_regval
id|shubreg_t
id|ii_iprte3b_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_address
id|shubreg_t
id|i_address
suffix:colon
l_int|47
suffix:semicolon
DECL|member|i_init
id|shubreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|shubreg_t
id|i_source
suffix:colon
l_int|11
suffix:semicolon
DECL|member|ii_iprte3b_fld_s
)brace
id|ii_iprte3b_fld_s
suffix:semicolon
DECL|typedef|ii_iprte3b_u_t
)brace
id|ii_iprte3b_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprte4b_u
r_typedef
r_union
id|ii_iprte4b_u
(brace
DECL|member|ii_iprte4b_regval
id|shubreg_t
id|ii_iprte4b_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_address
id|shubreg_t
id|i_address
suffix:colon
l_int|47
suffix:semicolon
DECL|member|i_init
id|shubreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|shubreg_t
id|i_source
suffix:colon
l_int|11
suffix:semicolon
DECL|member|ii_iprte4b_fld_s
)brace
id|ii_iprte4b_fld_s
suffix:semicolon
DECL|typedef|ii_iprte4b_u_t
)brace
id|ii_iprte4b_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprte5b_u
r_typedef
r_union
id|ii_iprte5b_u
(brace
DECL|member|ii_iprte5b_regval
id|shubreg_t
id|ii_iprte5b_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_address
id|shubreg_t
id|i_address
suffix:colon
l_int|47
suffix:semicolon
DECL|member|i_init
id|shubreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|shubreg_t
id|i_source
suffix:colon
l_int|11
suffix:semicolon
DECL|member|ii_iprte5b_fld_s
)brace
id|ii_iprte5b_fld_s
suffix:semicolon
DECL|typedef|ii_iprte5b_u_t
)brace
id|ii_iprte5b_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprte6b_u
r_typedef
r_union
id|ii_iprte6b_u
(brace
DECL|member|ii_iprte6b_regval
id|shubreg_t
id|ii_iprte6b_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_address
id|shubreg_t
id|i_address
suffix:colon
l_int|47
suffix:semicolon
DECL|member|i_init
id|shubreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|shubreg_t
id|i_source
suffix:colon
l_int|11
suffix:semicolon
DECL|member|ii_iprte6b_fld_s
)brace
id|ii_iprte6b_fld_s
suffix:semicolon
DECL|typedef|ii_iprte6b_u_t
)brace
id|ii_iprte6b_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iprte7b_u
r_typedef
r_union
id|ii_iprte7b_u
(brace
DECL|member|ii_iprte7b_regval
id|shubreg_t
id|ii_iprte7b_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_address
id|shubreg_t
id|i_address
suffix:colon
l_int|47
suffix:semicolon
DECL|member|i_init
id|shubreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|shubreg_t
id|i_source
suffix:colon
l_int|11
suffix:semicolon
DECL|member|ii_iprte7b_fld_s
)brace
id|ii_iprte7b_fld_s
suffix:semicolon
DECL|typedef|ii_iprte7b_u_t
)brace
id|ii_iprte7b_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  SHub II contains a feature which did not exist in      *&n; * the Hub which automatically cleans up after a Read Response          *&n; * timeout, including deallocation of the IPRTE and recovery of IBuf    *&n; * space. The inclusion of this register in SHub is for backward        *&n; * compatibility                                                        *&n; * A write to this register causes an entry from the table of           *&n; * outstanding PIO Read Requests to be freed and returned to the        *&n; * stack of free entries. This register is used in handling the         *&n; * timeout errors that result in a PIO Reply never returning from       *&n; * Crosstalk.                                                           *&n; * Note that this register does not affect the contents of the IPRTE    *&n; * registers. The Valid bits in those registers have to be              *&n; * specifically turned off by software.                                 *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ipdr_u
r_typedef
r_union
id|ii_ipdr_u
(brace
DECL|member|ii_ipdr_regval
id|shubreg_t
id|ii_ipdr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_te
id|shubreg_t
id|i_te
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_pnd
id|shubreg_t
id|i_pnd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_init_rpcnt
id|shubreg_t
id|i_init_rpcnt
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|58
suffix:semicolon
DECL|member|ii_ipdr_fld_s
)brace
id|ii_ipdr_fld_s
suffix:semicolon
DECL|typedef|ii_ipdr_u_t
)brace
id|ii_ipdr_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  A write to this register causes a CRB entry to be returned to the   *&n; * queue of free CRBs. The entry should have previously been cleared    *&n; * (mark bit) via backdoor access to the pertinent CRB entry. This      *&n; * register is used in the last step of handling the errors that are    *&n; * captured and marked in CRB entries.  Briefly: 1) first error for     *&n; * DMA write from a particular device, and first error for a            *&n; * particular BTE stream, lead to a marked CRB entry, and processor     *&n; * interrupt, 2) software reads the error information captured in the   *&n; * CRB entry, and presumably takes some corrective action, 3)           *&n; * software clears the mark bit, and finally 4) software writes to      *&n; * the ICDR register to return the CRB entry to the list of free CRB    *&n; * entries.                                                             *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_icdr_u
r_typedef
r_union
id|ii_icdr_u
(brace
DECL|member|ii_icdr_regval
id|shubreg_t
id|ii_icdr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_crb_num
id|shubreg_t
id|i_crb_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_pnd
id|shubreg_t
id|i_pnd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|59
suffix:semicolon
DECL|member|ii_icdr_fld_s
)brace
id|ii_icdr_fld_s
suffix:semicolon
DECL|typedef|ii_icdr_u_t
)brace
id|ii_icdr_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register provides debug access to two FIFOs inside of II.      *&n; * Both IOQ_MAX* fields of this register contain the instantaneous      *&n; * depth (in units of the number of available entries) of the           *&n; * associated IOQ FIFO.  A read of this register will return the        *&n; * number of free entries on each FIFO at the time of the read.  So     *&n; * when a FIFO is idle, the associated field contains the maximum       *&n; * depth of the FIFO.  This register is writable for debug reasons      *&n; * and is intended to be written with the maximum desired FIFO depth    *&n; * while the FIFO is idle. Software must assure that II is idle when    *&n; * this register is written. If there are any active entries in any     *&n; * of these FIFOs when this register is written, the results are        *&n; * undefined.                                                           *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ifdr_u
r_typedef
r_union
id|ii_ifdr_u
(brace
DECL|member|ii_ifdr_regval
id|shubreg_t
id|ii_ifdr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_ioq_max_rq
id|shubreg_t
id|i_ioq_max_rq
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_set_ioq_rq
id|shubreg_t
id|i_set_ioq_rq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ioq_max_rp
id|shubreg_t
id|i_ioq_max_rp
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_set_ioq_rp
id|shubreg_t
id|i_set_ioq_rp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|ii_ifdr_fld_s
)brace
id|ii_ifdr_fld_s
suffix:semicolon
DECL|typedef|ii_ifdr_u_t
)brace
id|ii_ifdr_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register allows the II to become sluggish in removing          *&n; * messages from its inbound queue (IIQ). This will cause messages to   *&n; * back up in either virtual channel. Disabling the &quot;molasses&quot; mode     *&n; * subsequently allows the II to be tested under stress. In the         *&n; * sluggish (&quot;Molasses&quot;) mode, the localized effects of congestion      *&n; * can be observed.                                                     *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iiap_u
r_typedef
r_union
id|ii_iiap_u
(brace
DECL|member|ii_iiap_regval
id|shubreg_t
id|ii_iiap_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rq_mls
id|shubreg_t
id|i_rq_mls
suffix:colon
l_int|6
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rp_mls
id|shubreg_t
id|i_rp_mls
suffix:colon
l_int|6
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|50
suffix:semicolon
DECL|member|ii_iiap_fld_s
)brace
id|ii_iiap_fld_s
suffix:semicolon
DECL|typedef|ii_iiap_u_t
)brace
id|ii_iiap_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register allows several parameters of CRB operation to be      *&n; * set. Note that writing to this register can have catastrophic side   *&n; * effects, if the CRB is not quiescent, i.e. if the CRB is             *&n; * processing protocol messages when the write occurs.                  *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_icmr_u
r_typedef
r_union
id|ii_icmr_u
(brace
DECL|member|ii_icmr_regval
id|shubreg_t
id|ii_icmr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_sp_msg
id|shubreg_t
id|i_sp_msg
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_hdr
id|shubreg_t
id|i_rd_hdr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_4
id|shubreg_t
id|i_rsvd_4
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_c_cnt
id|shubreg_t
id|i_c_cnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_3
id|shubreg_t
id|i_rsvd_3
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_clr_rqpd
id|shubreg_t
id|i_clr_rqpd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_clr_rppd
id|shubreg_t
id|i_clr_rppd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_fc_cnt
id|shubreg_t
id|i_fc_cnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_crb_vld
id|shubreg_t
id|i_crb_vld
suffix:colon
l_int|15
suffix:semicolon
DECL|member|i_crb_mark
id|shubreg_t
id|i_crb_mark
suffix:colon
l_int|15
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_precise
id|shubreg_t
id|i_precise
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|ii_icmr_fld_s
)brace
id|ii_icmr_fld_s
suffix:semicolon
DECL|typedef|ii_icmr_u_t
)brace
id|ii_icmr_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register allows control of the table portion of the CRB        *&n; * logic via software. Control operations from this register have       *&n; * priority over all incoming Crosstalk or BTE requests.                *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iccr_u
r_typedef
r_union
id|ii_iccr_u
(brace
DECL|member|ii_iccr_regval
id|shubreg_t
id|ii_iccr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_crb_num
id|shubreg_t
id|i_crb_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_cmd
id|shubreg_t
id|i_cmd
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_pending
id|shubreg_t
id|i_pending
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|47
suffix:semicolon
DECL|member|ii_iccr_fld_s
)brace
id|ii_iccr_fld_s
suffix:semicolon
DECL|typedef|ii_iccr_u_t
)brace
id|ii_iccr_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register allows the maximum timeout value to be programmed.    *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_icto_u
r_typedef
r_union
id|ii_icto_u
(brace
DECL|member|ii_icto_regval
id|shubreg_t
id|ii_icto_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_timeout
id|shubreg_t
id|i_timeout
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|56
suffix:semicolon
DECL|member|ii_icto_fld_s
)brace
id|ii_icto_fld_s
suffix:semicolon
DECL|typedef|ii_icto_u_t
)brace
id|ii_icto_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register allows the timeout prescalar to be programmed. An     *&n; * internal counter is associated with this register. When the          *&n; * internal counter reaches the value of the PRESCALE field, the        *&n; * timer registers in all valid CRBs are incremented (CRBx_D[TIMEOUT]   *&n; * field). The internal counter resets to zero, and then continues      *&n; * counting.                                                            *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ictp_u
r_typedef
r_union
id|ii_ictp_u
(brace
DECL|member|ii_ictp_regval
id|shubreg_t
id|ii_ictp_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_prescale
id|shubreg_t
id|i_prescale
suffix:colon
l_int|24
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|40
suffix:semicolon
DECL|member|ii_ictp_fld_s
)brace
id|ii_ictp_fld_s
suffix:semicolon
DECL|typedef|ii_ictp_u_t
)brace
id|ii_ictp_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 15 CRB Entries (ICRB0 to ICRBE) that are     *&n; * used for Crosstalk operations (both cacheline and partial            *&n; * operations) or BTE/IO. Because the CRB entries are very wide, five   *&n; * registers (_A to _E) are required to read and write each entry.      *&n; * The CRB Entry registers can be conceptualized as rows and columns    *&n; * (illustrated in the table above). Each row contains the 4            *&n; * registers required for a single CRB Entry. The first doubleword      *&n; * (column) for each entry is labeled A, and the second doubleword      *&n; * (higher address) is labeled B, the third doubleword is labeled C,    *&n; * the fourth doubleword is labeled D and the fifth doubleword is       *&n; * labeled E. All CRB entries have their addresses on a quarter         *&n; * cacheline aligned boundary.                   *&n; * Upon reset, only the following fields are initialized: valid         *&n; * (VLD), priority count, timeout, timeout valid, and context valid.    *&n; * All other bits should be cleared by software before use (after       *&n; * recovering any potential error state from before the reset).         *&n; * The following four tables summarize the format for the four          *&n; * registers that are used for each ICRB# Entry.                        *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_icrb0_a_u
r_typedef
r_union
id|ii_icrb0_a_u
(brace
DECL|member|ii_icrb0_a_regval
id|shubreg_t
id|ii_icrb0_a_regval
suffix:semicolon
r_struct
(brace
DECL|member|ia_iow
id|shubreg_t
id|ia_iow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_vld
id|shubreg_t
id|ia_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_addr
id|shubreg_t
id|ia_addr
suffix:colon
l_int|47
suffix:semicolon
DECL|member|ia_tnum
id|shubreg_t
id|ia_tnum
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ia_sidn
id|shubreg_t
id|ia_sidn
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ia_rsvd
id|shubreg_t
id|ia_rsvd
suffix:colon
l_int|6
suffix:semicolon
DECL|member|ii_icrb0_a_fld_s
)brace
id|ii_icrb0_a_fld_s
suffix:semicolon
DECL|typedef|ii_icrb0_a_u_t
)brace
id|ii_icrb0_a_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 15 CRB Entries (ICRB0 to ICRBE) that are     *&n; * used for Crosstalk operations (both cacheline and partial            *&n; * operations) or BTE/IO. Because the CRB entries are very wide, five   *&n; * registers (_A to _E) are required to read and write each entry.      *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_icrb0_b_u
r_typedef
r_union
id|ii_icrb0_b_u
(brace
DECL|member|ii_icrb0_b_regval
id|shubreg_t
id|ii_icrb0_b_regval
suffix:semicolon
r_struct
(brace
DECL|member|ib_xt_err
id|shubreg_t
id|ib_xt_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_mark
id|shubreg_t
id|ib_mark
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_ln_uce
id|shubreg_t
id|ib_ln_uce
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_errcode
id|shubreg_t
id|ib_errcode
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ib_error
id|shubreg_t
id|ib_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_stall__bte_1
id|shubreg_t
id|ib_stall__bte_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_stall__bte_0
id|shubreg_t
id|ib_stall__bte_0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_stall__intr
id|shubreg_t
id|ib_stall__intr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_stall_ib
id|shubreg_t
id|ib_stall_ib
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_intvn
id|shubreg_t
id|ib_intvn
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_wb
id|shubreg_t
id|ib_wb
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_hold
id|shubreg_t
id|ib_hold
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_ack
id|shubreg_t
id|ib_ack
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_resp
id|shubreg_t
id|ib_resp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_ack_cnt
id|shubreg_t
id|ib_ack_cnt
suffix:colon
l_int|11
suffix:semicolon
DECL|member|ib_rsvd
id|shubreg_t
id|ib_rsvd
suffix:colon
l_int|7
suffix:semicolon
DECL|member|ib_exc
id|shubreg_t
id|ib_exc
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ib_init
id|shubreg_t
id|ib_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ib_imsg
id|shubreg_t
id|ib_imsg
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ib_imsgtype
id|shubreg_t
id|ib_imsgtype
suffix:colon
l_int|2
suffix:semicolon
DECL|member|ib_use_old
id|shubreg_t
id|ib_use_old
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_rsvd_1
id|shubreg_t
id|ib_rsvd_1
suffix:colon
l_int|11
suffix:semicolon
DECL|member|ii_icrb0_b_fld_s
)brace
id|ii_icrb0_b_fld_s
suffix:semicolon
DECL|typedef|ii_icrb0_b_u_t
)brace
id|ii_icrb0_b_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 15 CRB Entries (ICRB0 to ICRBE) that are     *&n; * used for Crosstalk operations (both cacheline and partial            *&n; * operations) or BTE/IO. Because the CRB entries are very wide, five   *&n; * registers (_A to _E) are required to read and write each entry.      *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_icrb0_c_u
r_typedef
r_union
id|ii_icrb0_c_u
(brace
DECL|member|ii_icrb0_c_regval
id|shubreg_t
id|ii_icrb0_c_regval
suffix:semicolon
r_struct
(brace
DECL|member|ic_source
id|shubreg_t
id|ic_source
suffix:colon
l_int|15
suffix:semicolon
DECL|member|ic_size
id|shubreg_t
id|ic_size
suffix:colon
l_int|2
suffix:semicolon
DECL|member|ic_ct
id|shubreg_t
id|ic_ct
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ic_bte_num
id|shubreg_t
id|ic_bte_num
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ic_gbr
id|shubreg_t
id|ic_gbr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ic_resprqd
id|shubreg_t
id|ic_resprqd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ic_bo
id|shubreg_t
id|ic_bo
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ic_suppl
id|shubreg_t
id|ic_suppl
suffix:colon
l_int|15
suffix:semicolon
DECL|member|ic_rsvd
id|shubreg_t
id|ic_rsvd
suffix:colon
l_int|27
suffix:semicolon
DECL|member|ii_icrb0_c_fld_s
)brace
id|ii_icrb0_c_fld_s
suffix:semicolon
DECL|typedef|ii_icrb0_c_u_t
)brace
id|ii_icrb0_c_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 15 CRB Entries (ICRB0 to ICRBE) that are     *&n; * used for Crosstalk operations (both cacheline and partial            *&n; * operations) or BTE/IO. Because the CRB entries are very wide, five   *&n; * registers (_A to _E) are required to read and write each entry.      *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_icrb0_d_u
r_typedef
r_union
id|ii_icrb0_d_u
(brace
DECL|member|ii_icrb0_d_regval
id|shubreg_t
id|ii_icrb0_d_regval
suffix:semicolon
r_struct
(brace
DECL|member|id_pa_be
id|shubreg_t
id|id_pa_be
suffix:colon
l_int|43
suffix:semicolon
DECL|member|id_bte_op
id|shubreg_t
id|id_bte_op
suffix:colon
l_int|1
suffix:semicolon
DECL|member|id_pr_psc
id|shubreg_t
id|id_pr_psc
suffix:colon
l_int|4
suffix:semicolon
DECL|member|id_pr_cnt
id|shubreg_t
id|id_pr_cnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|id_sleep
id|shubreg_t
id|id_sleep
suffix:colon
l_int|1
suffix:semicolon
DECL|member|id_rsvd
id|shubreg_t
id|id_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|ii_icrb0_d_fld_s
)brace
id|ii_icrb0_d_fld_s
suffix:semicolon
DECL|typedef|ii_icrb0_d_u_t
)brace
id|ii_icrb0_d_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 15 CRB Entries (ICRB0 to ICRBE) that are     *&n; * used for Crosstalk operations (both cacheline and partial            *&n; * operations) or BTE/IO. Because the CRB entries are very wide, five   *&n; * registers (_A to _E) are required to read and write each entry.      *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_icrb0_e_u
r_typedef
r_union
id|ii_icrb0_e_u
(brace
DECL|member|ii_icrb0_e_regval
id|shubreg_t
id|ii_icrb0_e_regval
suffix:semicolon
r_struct
(brace
DECL|member|ie_timeout
id|shubreg_t
id|ie_timeout
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ie_context
id|shubreg_t
id|ie_context
suffix:colon
l_int|15
suffix:semicolon
DECL|member|ie_rsvd
id|shubreg_t
id|ie_rsvd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ie_tvld
id|shubreg_t
id|ie_tvld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ie_cvld
id|shubreg_t
id|ie_cvld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ie_rsvd_0
id|shubreg_t
id|ie_rsvd_0
suffix:colon
l_int|38
suffix:semicolon
DECL|member|ii_icrb0_e_fld_s
)brace
id|ii_icrb0_e_fld_s
suffix:semicolon
DECL|typedef|ii_icrb0_e_u_t
)brace
id|ii_icrb0_e_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the lower 64 bits of the header of the       *&n; * spurious message captured by II. Valid when the SP_MSG bit in ICMR   *&n; * register is set.                                                     *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_icsml_u
r_typedef
r_union
id|ii_icsml_u
(brace
DECL|member|ii_icsml_regval
id|shubreg_t
id|ii_icsml_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_tt_addr
id|shubreg_t
id|i_tt_addr
suffix:colon
l_int|47
suffix:semicolon
DECL|member|i_newsuppl_ex
id|shubreg_t
id|i_newsuppl_ex
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_reserved
id|shubreg_t
id|i_reserved
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_overflow
id|shubreg_t
id|i_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_icsml_fld_s
)brace
id|ii_icsml_fld_s
suffix:semicolon
DECL|typedef|ii_icsml_u_t
)brace
id|ii_icsml_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the middle 64 bits of the header of the      *&n; * spurious message captured by II. Valid when the SP_MSG bit in ICMR   *&n; * register is set.                                                     *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_icsmm_u
r_typedef
r_union
id|ii_icsmm_u
(brace
DECL|member|ii_icsmm_regval
id|shubreg_t
id|ii_icsmm_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_tt_ack_cnt
id|shubreg_t
id|i_tt_ack_cnt
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_reserved
id|shubreg_t
id|i_reserved
suffix:colon
l_int|53
suffix:semicolon
DECL|member|ii_icsmm_fld_s
)brace
id|ii_icsmm_fld_s
suffix:semicolon
DECL|typedef|ii_icsmm_u_t
)brace
id|ii_icsmm_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the microscopic state, all the inputs to     *&n; * the protocol table, captured with the spurious message. Valid when   *&n; * the SP_MSG bit in the ICMR register is set.                          *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_icsmh_u
r_typedef
r_union
id|ii_icsmh_u
(brace
DECL|member|ii_icsmh_regval
id|shubreg_t
id|ii_icsmh_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_tt_vld
id|shubreg_t
id|i_tt_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_xerr
id|shubreg_t
id|i_xerr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ft_cwact_o
id|shubreg_t
id|i_ft_cwact_o
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ft_wact_o
id|shubreg_t
id|i_ft_wact_o
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ft_active_o
id|shubreg_t
id|i_ft_active_o
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_sync
id|shubreg_t
id|i_sync
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_mnusg
id|shubreg_t
id|i_mnusg
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_mnusz
id|shubreg_t
id|i_mnusz
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_plusz
id|shubreg_t
id|i_plusz
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_plusg
id|shubreg_t
id|i_plusg
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_exc
id|shubreg_t
id|i_tt_exc
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_tt_wb
id|shubreg_t
id|i_tt_wb
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_hold
id|shubreg_t
id|i_tt_hold
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_ack
id|shubreg_t
id|i_tt_ack
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_resp
id|shubreg_t
id|i_tt_resp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_intvn
id|shubreg_t
id|i_tt_intvn
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_g_stall_bte1
id|shubreg_t
id|i_g_stall_bte1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_g_stall_bte0
id|shubreg_t
id|i_g_stall_bte0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_g_stall_il
id|shubreg_t
id|i_g_stall_il
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_g_stall_ib
id|shubreg_t
id|i_g_stall_ib
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_imsg
id|shubreg_t
id|i_tt_imsg
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_tt_imsgtype
id|shubreg_t
id|i_tt_imsgtype
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_tt_use_old
id|shubreg_t
id|i_tt_use_old
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_respreqd
id|shubreg_t
id|i_tt_respreqd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_bte_num
id|shubreg_t
id|i_tt_bte_num
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_cbn
id|shubreg_t
id|i_cbn
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_match
id|shubreg_t
id|i_match
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_lt_34
id|shubreg_t
id|i_rpcnt_lt_34
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_ge_34
id|shubreg_t
id|i_rpcnt_ge_34
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_lt_18
id|shubreg_t
id|i_rpcnt_lt_18
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_ge_18
id|shubreg_t
id|i_rpcnt_ge_18
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_lt_2
id|shubreg_t
id|i_rpcnt_lt_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_ge_2
id|shubreg_t
id|i_rpcnt_ge_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rqcnt_lt_18
id|shubreg_t
id|i_rqcnt_lt_18
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rqcnt_ge_18
id|shubreg_t
id|i_rqcnt_ge_18
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rqcnt_lt_2
id|shubreg_t
id|i_rqcnt_lt_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rqcnt_ge_2
id|shubreg_t
id|i_rqcnt_ge_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_device
id|shubreg_t
id|i_tt_device
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_tt_init
id|shubreg_t
id|i_tt_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_reserved
id|shubreg_t
id|i_reserved
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ii_icsmh_fld_s
)brace
id|ii_icsmh_fld_s
suffix:semicolon
DECL|typedef|ii_icsmh_u_t
)brace
id|ii_icsmh_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  The Shub DEBUG unit provides a 3-bit selection signal to the        *&n; * II core and a 3-bit selection signal to the fsbclk domain in the II  *&n; * wrapper.                                                             *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_idbss_u
r_typedef
r_union
id|ii_idbss_u
(brace
DECL|member|ii_idbss_regval
id|shubreg_t
id|ii_idbss_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_iioclk_core_submenu
id|shubreg_t
id|i_iioclk_core_submenu
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_fsbclk_wrapper_submenu
id|shubreg_t
id|i_fsbclk_wrapper_submenu
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_iioclk_menu
id|shubreg_t
id|i_iioclk_menu
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|43
suffix:semicolon
DECL|member|ii_idbss_fld_s
)brace
id|ii_idbss_fld_s
suffix:semicolon
DECL|typedef|ii_idbss_u_t
)brace
id|ii_idbss_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register is used to set up the length for a       *&n; * transfer and then to monitor the progress of that transfer. This     *&n; * register needs to be initialized before a transfer is started. A     *&n; * legitimate write to this register will set the Busy bit, clear the   *&n; * Error bit, and initialize the length to the value desired.           *&n; * While the transfer is in progress, hardware will decrement the       *&n; * length field with each successful block that is copied. Once the     *&n; * transfer completes, hardware will clear the Busy bit. The length     *&n; * field will also contain the number of cache lines left to be         *&n; * transferred.                                                         *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ibls0_u
r_typedef
r_union
id|ii_ibls0_u
(brace
DECL|member|ii_ibls0_regval
id|shubreg_t
id|ii_ibls0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_length
id|shubreg_t
id|i_length
suffix:colon
l_int|16
suffix:semicolon
DECL|member|i_error
id|shubreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_busy
id|shubreg_t
id|i_busy
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|43
suffix:semicolon
DECL|member|ii_ibls0_fld_s
)brace
id|ii_ibls0_fld_s
suffix:semicolon
DECL|typedef|ii_ibls0_u_t
)brace
id|ii_ibls0_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register should be loaded before a transfer is started. The    *&n; * address to be loaded in bits 39:0 is the 40-bit TRex+ physical       *&n; * address as described in Section 1.3, Figure2 and Figure3. Since      *&n; * the bottom 7 bits of the address are always taken to be zero, BTE    *&n; * transfers are always cacheline-aligned.                              *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ibsa0_u
r_typedef
r_union
id|ii_ibsa0_u
(brace
DECL|member|ii_ibsa0_regval
id|shubreg_t
id|ii_ibsa0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_addr
id|shubreg_t
id|i_addr
suffix:colon
l_int|42
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|15
suffix:semicolon
DECL|member|ii_ibsa0_fld_s
)brace
id|ii_ibsa0_fld_s
suffix:semicolon
DECL|typedef|ii_ibsa0_u_t
)brace
id|ii_ibsa0_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register should be loaded before a transfer is started. The    *&n; * address to be loaded in bits 39:0 is the 40-bit TRex+ physical       *&n; * address as described in Section 1.3, Figure2 and Figure3. Since      *&n; * the bottom 7 bits of the address are always taken to be zero, BTE    *&n; * transfers are always cacheline-aligned.                              *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ibda0_u
r_typedef
r_union
id|ii_ibda0_u
(brace
DECL|member|ii_ibda0_regval
id|shubreg_t
id|ii_ibda0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_addr
id|shubreg_t
id|i_addr
suffix:colon
l_int|42
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|15
suffix:semicolon
DECL|member|ii_ibda0_fld_s
)brace
id|ii_ibda0_fld_s
suffix:semicolon
DECL|typedef|ii_ibda0_u_t
)brace
id|ii_ibda0_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Writing to this register sets up the attributes of the transfer     *&n; * and initiates the transfer operation. Reading this register has      *&n; * the side effect of terminating any transfer in progress. Note:       *&n; * stopping a transfer midstream could have an adverse impact on the    *&n; * other BTE. If a BTE stream has to be stopped (due to error           *&n; * handling for example), both BTE streams should be stopped and        *&n; * their transfers discarded.                                           *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ibct0_u
r_typedef
r_union
id|ii_ibct0_u
(brace
DECL|member|ii_ibct0_regval
id|shubreg_t
id|ii_ibct0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_zerofill
id|shubreg_t
id|i_zerofill
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_notify
id|shubreg_t
id|i_notify
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_poison
id|shubreg_t
id|i_poison
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|55
suffix:semicolon
DECL|member|ii_ibct0_fld_s
)brace
id|ii_ibct0_fld_s
suffix:semicolon
DECL|typedef|ii_ibct0_u_t
)brace
id|ii_ibct0_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the address to which the WINV is sent.       *&n; * This address has to be cache line aligned.                           *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ibna0_u
r_typedef
r_union
id|ii_ibna0_u
(brace
DECL|member|ii_ibna0_regval
id|shubreg_t
id|ii_ibna0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_addr
id|shubreg_t
id|i_addr
suffix:colon
l_int|42
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|15
suffix:semicolon
DECL|member|ii_ibna0_fld_s
)brace
id|ii_ibna0_fld_s
suffix:semicolon
DECL|typedef|ii_ibna0_u_t
)brace
id|ii_ibna0_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the programmable level as well as the node   *&n; * ID and PI unit of the processor to which the interrupt will be       *&n; * sent.                                                                *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ibia0_u
r_typedef
r_union
id|ii_ibia0_u
(brace
DECL|member|ii_ibia0_regval
id|shubreg_t
id|ii_ibia0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_node_id
id|shubreg_t
id|i_node_id
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_level
id|shubreg_t
id|i_level
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|41
suffix:semicolon
DECL|member|ii_ibia0_fld_s
)brace
id|ii_ibia0_fld_s
suffix:semicolon
DECL|typedef|ii_ibia0_u_t
)brace
id|ii_ibia0_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register is used to set up the length for a       *&n; * transfer and then to monitor the progress of that transfer. This     *&n; * register needs to be initialized before a transfer is started. A     *&n; * legitimate write to this register will set the Busy bit, clear the   *&n; * Error bit, and initialize the length to the value desired.           *&n; * While the transfer is in progress, hardware will decrement the       *&n; * length field with each successful block that is copied. Once the     *&n; * transfer completes, hardware will clear the Busy bit. The length     *&n; * field will also contain the number of cache lines left to be         *&n; * transferred.                                                         *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ibls1_u
r_typedef
r_union
id|ii_ibls1_u
(brace
DECL|member|ii_ibls1_regval
id|shubreg_t
id|ii_ibls1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_length
id|shubreg_t
id|i_length
suffix:colon
l_int|16
suffix:semicolon
DECL|member|i_error
id|shubreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_busy
id|shubreg_t
id|i_busy
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|43
suffix:semicolon
DECL|member|ii_ibls1_fld_s
)brace
id|ii_ibls1_fld_s
suffix:semicolon
DECL|typedef|ii_ibls1_u_t
)brace
id|ii_ibls1_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register should be loaded before a transfer is started. The    *&n; * address to be loaded in bits 39:0 is the 40-bit TRex+ physical       *&n; * address as described in Section 1.3, Figure2 and Figure3. Since      *&n; * the bottom 7 bits of the address are always taken to be zero, BTE    *&n; * transfers are always cacheline-aligned.                              *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ibsa1_u
r_typedef
r_union
id|ii_ibsa1_u
(brace
DECL|member|ii_ibsa1_regval
id|shubreg_t
id|ii_ibsa1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_addr
id|shubreg_t
id|i_addr
suffix:colon
l_int|33
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|24
suffix:semicolon
DECL|member|ii_ibsa1_fld_s
)brace
id|ii_ibsa1_fld_s
suffix:semicolon
DECL|typedef|ii_ibsa1_u_t
)brace
id|ii_ibsa1_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register should be loaded before a transfer is started. The    *&n; * address to be loaded in bits 39:0 is the 40-bit TRex+ physical       *&n; * address as described in Section 1.3, Figure2 and Figure3. Since      *&n; * the bottom 7 bits of the address are always taken to be zero, BTE    *&n; * transfers are always cacheline-aligned.                              *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ibda1_u
r_typedef
r_union
id|ii_ibda1_u
(brace
DECL|member|ii_ibda1_regval
id|shubreg_t
id|ii_ibda1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_addr
id|shubreg_t
id|i_addr
suffix:colon
l_int|33
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|24
suffix:semicolon
DECL|member|ii_ibda1_fld_s
)brace
id|ii_ibda1_fld_s
suffix:semicolon
DECL|typedef|ii_ibda1_u_t
)brace
id|ii_ibda1_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Writing to this register sets up the attributes of the transfer     *&n; * and initiates the transfer operation. Reading this register has      *&n; * the side effect of terminating any transfer in progress. Note:       *&n; * stopping a transfer midstream could have an adverse impact on the    *&n; * other BTE. If a BTE stream has to be stopped (due to error           *&n; * handling for example), both BTE streams should be stopped and        *&n; * their transfers discarded.                                           *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ibct1_u
r_typedef
r_union
id|ii_ibct1_u
(brace
DECL|member|ii_ibct1_regval
id|shubreg_t
id|ii_ibct1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_zerofill
id|shubreg_t
id|i_zerofill
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|shubreg_t
id|i_rsvd_2
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_notify
id|shubreg_t
id|i_notify
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_poison
id|shubreg_t
id|i_poison
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|55
suffix:semicolon
DECL|member|ii_ibct1_fld_s
)brace
id|ii_ibct1_fld_s
suffix:semicolon
DECL|typedef|ii_ibct1_u_t
)brace
id|ii_ibct1_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the address to which the WINV is sent.       *&n; * This address has to be cache line aligned.                           *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ibna1_u
r_typedef
r_union
id|ii_ibna1_u
(brace
DECL|member|ii_ibna1_regval
id|shubreg_t
id|ii_ibna1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_addr
id|shubreg_t
id|i_addr
suffix:colon
l_int|33
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|24
suffix:semicolon
DECL|member|ii_ibna1_fld_s
)brace
id|ii_ibna1_fld_s
suffix:semicolon
DECL|typedef|ii_ibna1_u_t
)brace
id|ii_ibna1_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the programmable level as well as the node   *&n; * ID and PI unit of the processor to which the interrupt will be       *&n; * sent.                                                                *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ibia1_u
r_typedef
r_union
id|ii_ibia1_u
(brace
DECL|member|ii_ibia1_regval
id|shubreg_t
id|ii_ibia1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_pi_id
id|shubreg_t
id|i_pi_id
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_node_id
id|shubreg_t
id|i_node_id
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_level
id|shubreg_t
id|i_level
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|41
suffix:semicolon
DECL|member|ii_ibia1_fld_s
)brace
id|ii_ibia1_fld_s
suffix:semicolon
DECL|typedef|ii_ibia1_u_t
)brace
id|ii_ibia1_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register defines the resources that feed information into      *&n; * the two performance counters located in the IO Performance           *&n; * Profiling Register. There are 17 different quantities that can be    *&n; * measured. Given these 17 different options, the two performance      *&n; * counters have 15 of them in common; menu selections 0 through 0xE    *&n; * are identical for each performance counter. As for the other two     *&n; * options, one is available from one performance counter and the       *&n; * other is available from the other performance counter. Hence, the    *&n; * II supports all 17*16=272 possible combinations of quantities to     *&n; * measure.                                                             *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ipcr_u
r_typedef
r_union
id|ii_ipcr_u
(brace
DECL|member|ii_ipcr_regval
id|shubreg_t
id|ii_ipcr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_ippr0_c
id|shubreg_t
id|i_ippr0_c
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_ippr1_c
id|shubreg_t
id|i_ippr1_c
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_icct
id|shubreg_t
id|i_icct
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|ii_ipcr_fld_s
)brace
id|ii_ipcr_fld_s
suffix:semicolon
DECL|typedef|ii_ipcr_u_t
)brace
id|ii_ipcr_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *                                                                      *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ippr_u
r_typedef
r_union
id|ii_ippr_u
(brace
DECL|member|ii_ippr_regval
id|shubreg_t
id|ii_ippr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_ippr0
id|shubreg_t
id|i_ippr0
suffix:colon
l_int|32
suffix:semicolon
DECL|member|i_ippr1
id|shubreg_t
id|i_ippr1
suffix:colon
l_int|32
suffix:semicolon
DECL|member|ii_ippr_fld_s
)brace
id|ii_ippr_fld_s
suffix:semicolon
DECL|typedef|ii_ippr_u_t
)brace
id|ii_ippr_u_t
suffix:semicolon
macro_line|#endif /* __ASSEMBLY__ */
multiline_comment|/**************************************************************************&n; *                                                                        *&n; * The following defines which were not formed into structures are        *&n; * probably indentical to another register, and the name of the           *&n; * register is provided against each of these registers. This             *&n; * information needs to be checked carefully                              *&n; *                                                                        *&n; *           IIO_ICRB1_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB1_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB1_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB1_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB1_E                IIO_ICRB0_E                       *&n; *           IIO_ICRB2_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB2_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB2_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB2_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB2_E                IIO_ICRB0_E                       *&n; *           IIO_ICRB3_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB3_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB3_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB3_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB3_E                IIO_ICRB0_E                       *&n; *           IIO_ICRB4_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB4_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB4_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB4_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB4_E                IIO_ICRB0_E                       *&n; *           IIO_ICRB5_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB5_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB5_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB5_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB5_E                IIO_ICRB0_E                       *&n; *           IIO_ICRB6_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB6_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB6_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB6_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB6_E                IIO_ICRB0_E                       *&n; *           IIO_ICRB7_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB7_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB7_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB7_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB7_E                IIO_ICRB0_E                       *&n; *           IIO_ICRB8_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB8_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB8_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB8_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB8_E                IIO_ICRB0_E                       *&n; *           IIO_ICRB9_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB9_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB9_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB9_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB9_E                IIO_ICRB0_E                       *&n; *           IIO_ICRBA_A                IIO_ICRB0_A                       *&n; *           IIO_ICRBA_B                IIO_ICRB0_B                       *&n; *           IIO_ICRBA_C                IIO_ICRB0_C                       *&n; *           IIO_ICRBA_D                IIO_ICRB0_D                       *&n; *           IIO_ICRBA_E                IIO_ICRB0_E                       *&n; *           IIO_ICRBB_A                IIO_ICRB0_A                       *&n; *           IIO_ICRBB_B                IIO_ICRB0_B                       *&n; *           IIO_ICRBB_C                IIO_ICRB0_C                       *&n; *           IIO_ICRBB_D                IIO_ICRB0_D                       *&n; *           IIO_ICRBB_E                IIO_ICRB0_E                       *&n; *           IIO_ICRBC_A                IIO_ICRB0_A                       *&n; *           IIO_ICRBC_B                IIO_ICRB0_B                       *&n; *           IIO_ICRBC_C                IIO_ICRB0_C                       *&n; *           IIO_ICRBC_D                IIO_ICRB0_D                       *&n; *           IIO_ICRBC_E                IIO_ICRB0_E                       *&n; *           IIO_ICRBD_A                IIO_ICRB0_A                       *&n; *           IIO_ICRBD_B                IIO_ICRB0_B                       *&n; *           IIO_ICRBD_C                IIO_ICRB0_C                       *&n; *           IIO_ICRBD_D                IIO_ICRB0_D                       *&n; *           IIO_ICRBD_E                IIO_ICRB0_E                       *&n; *           IIO_ICRBE_A                IIO_ICRB0_A                       *&n; *           IIO_ICRBE_B                IIO_ICRB0_B                       *&n; *           IIO_ICRBE_C                IIO_ICRB0_C                       *&n; *           IIO_ICRBE_D                IIO_ICRB0_D                       *&n; *           IIO_ICRBE_E                IIO_ICRB0_E                       *&n; *                                                                        *&n; **************************************************************************/
multiline_comment|/*&n; * Slightly friendlier names for some common registers.&n; */
DECL|macro|IIO_WIDGET
mdefine_line|#define IIO_WIDGET              IIO_WID      /* Widget identification */
DECL|macro|IIO_WIDGET_STAT
mdefine_line|#define IIO_WIDGET_STAT         IIO_WSTAT    /* Widget status register */
DECL|macro|IIO_WIDGET_CTRL
mdefine_line|#define IIO_WIDGET_CTRL         IIO_WCR      /* Widget control register */
DECL|macro|IIO_PROTECT
mdefine_line|#define IIO_PROTECT             IIO_ILAPR    /* IO interface protection */
DECL|macro|IIO_PROTECT_OVRRD
mdefine_line|#define IIO_PROTECT_OVRRD       IIO_ILAPO    /* IO protect override */
DECL|macro|IIO_OUTWIDGET_ACCESS
mdefine_line|#define IIO_OUTWIDGET_ACCESS    IIO_IOWA     /* Outbound widget access */
DECL|macro|IIO_INWIDGET_ACCESS
mdefine_line|#define IIO_INWIDGET_ACCESS     IIO_IIWA     /* Inbound widget access */
DECL|macro|IIO_INDEV_ERR_MASK
mdefine_line|#define IIO_INDEV_ERR_MASK      IIO_IIDEM    /* Inbound device error mask */
DECL|macro|IIO_LLP_CSR
mdefine_line|#define IIO_LLP_CSR             IIO_ILCSR    /* LLP control and status */
DECL|macro|IIO_LLP_LOG
mdefine_line|#define IIO_LLP_LOG             IIO_ILLR     /* LLP log */
DECL|macro|IIO_XTALKCC_TOUT
mdefine_line|#define IIO_XTALKCC_TOUT        IIO_IXCC     /* Xtalk credit count timeout*/
DECL|macro|IIO_XTALKTT_TOUT
mdefine_line|#define IIO_XTALKTT_TOUT        IIO_IXTT     /* Xtalk tail timeout */
DECL|macro|IIO_IO_ERR_CLR
mdefine_line|#define IIO_IO_ERR_CLR          IIO_IECLR    /* IO error clear */
DECL|macro|IIO_IGFX_0
mdefine_line|#define IIO_IGFX_0 &t;&t;IIO_IGFX0
DECL|macro|IIO_IGFX_1
mdefine_line|#define IIO_IGFX_1 &t;&t;IIO_IGFX1
DECL|macro|IIO_IBCT_0
mdefine_line|#define IIO_IBCT_0&t;&t;IIO_IBCT0
DECL|macro|IIO_IBCT_1
mdefine_line|#define IIO_IBCT_1&t;&t;IIO_IBCT1
DECL|macro|IIO_IBLS_0
mdefine_line|#define IIO_IBLS_0&t;&t;IIO_IBLS0
DECL|macro|IIO_IBLS_1
mdefine_line|#define IIO_IBLS_1&t;&t;IIO_IBLS1
DECL|macro|IIO_IBSA_0
mdefine_line|#define IIO_IBSA_0&t;&t;IIO_IBSA0
DECL|macro|IIO_IBSA_1
mdefine_line|#define IIO_IBSA_1&t;&t;IIO_IBSA1
DECL|macro|IIO_IBDA_0
mdefine_line|#define IIO_IBDA_0&t;&t;IIO_IBDA0
DECL|macro|IIO_IBDA_1
mdefine_line|#define IIO_IBDA_1&t;&t;IIO_IBDA1
DECL|macro|IIO_IBNA_0
mdefine_line|#define IIO_IBNA_0&t;&t;IIO_IBNA0
DECL|macro|IIO_IBNA_1
mdefine_line|#define IIO_IBNA_1&t;&t;IIO_IBNA1
DECL|macro|IIO_IBIA_0
mdefine_line|#define IIO_IBIA_0&t;&t;IIO_IBIA0
DECL|macro|IIO_IBIA_1
mdefine_line|#define IIO_IBIA_1&t;&t;IIO_IBIA1
DECL|macro|IIO_IOPRB_0
mdefine_line|#define IIO_IOPRB_0&t;&t;IIO_IPRB0
DECL|macro|IIO_PRTE_A
mdefine_line|#define IIO_PRTE_A(_x)&t;&t;(IIO_IPRTE0_A + (8 * (_x)))
DECL|macro|IIO_PRTE_B
mdefine_line|#define IIO_PRTE_B(_x)&t;&t;(IIO_IPRTE0_B + (8 * (_x)))
DECL|macro|IIO_NUM_PRTES
mdefine_line|#define IIO_NUM_PRTES&t;&t;8&t;/* Total number of PRB table entries */
DECL|macro|IIO_WIDPRTE_A
mdefine_line|#define IIO_WIDPRTE_A(x)&t;IIO_PRTE_A(((x) - 8)) /* widget ID to its PRTE num */
DECL|macro|IIO_WIDPRTE_B
mdefine_line|#define IIO_WIDPRTE_B(x)&t;IIO_PRTE_B(((x) - 8)) /* widget ID to its PRTE num */
DECL|macro|IIO_NUM_IPRBS
mdefine_line|#define IIO_NUM_IPRBS &t;&t;(9) 
DECL|macro|IIO_LLP_CSR_IS_UP
mdefine_line|#define IIO_LLP_CSR_IS_UP               0x00002000
DECL|macro|IIO_LLP_CSR_LLP_STAT_MASK
mdefine_line|#define IIO_LLP_CSR_LLP_STAT_MASK       0x00003000
DECL|macro|IIO_LLP_CSR_LLP_STAT_SHFT
mdefine_line|#define IIO_LLP_CSR_LLP_STAT_SHFT       12
DECL|macro|IIO_LLP_CB_MAX
mdefine_line|#define IIO_LLP_CB_MAX  0xffff&t;/* in ILLR CB_CNT, Max Check Bit errors */
DECL|macro|IIO_LLP_SN_MAX
mdefine_line|#define IIO_LLP_SN_MAX  0xffff&t;/* in ILLR SN_CNT, Max Sequence Number errors */
multiline_comment|/* key to IIO_PROTECT_OVRRD */
DECL|macro|IIO_PROTECT_OVRRD_KEY
mdefine_line|#define IIO_PROTECT_OVRRD_KEY   0x53474972756c6573ull   /* &quot;SGIrules&quot; */
multiline_comment|/* BTE register names */
DECL|macro|IIO_BTE_STAT_0
mdefine_line|#define IIO_BTE_STAT_0          IIO_IBLS_0   /* Also BTE length/status 0 */
DECL|macro|IIO_BTE_SRC_0
mdefine_line|#define IIO_BTE_SRC_0           IIO_IBSA_0   /* Also BTE source address  0 */
DECL|macro|IIO_BTE_DEST_0
mdefine_line|#define IIO_BTE_DEST_0          IIO_IBDA_0   /* Also BTE dest. address 0 */
DECL|macro|IIO_BTE_CTRL_0
mdefine_line|#define IIO_BTE_CTRL_0          IIO_IBCT_0   /* Also BTE control/terminate 0 */
DECL|macro|IIO_BTE_NOTIFY_0
mdefine_line|#define IIO_BTE_NOTIFY_0        IIO_IBNA_0   /* Also BTE notification 0 */
DECL|macro|IIO_BTE_INT_0
mdefine_line|#define IIO_BTE_INT_0           IIO_IBIA_0   /* Also BTE interrupt 0 */
DECL|macro|IIO_BTE_OFF_0
mdefine_line|#define IIO_BTE_OFF_0           0            /* Base offset from BTE 0 regs. */
DECL|macro|IIO_BTE_OFF_1
mdefine_line|#define IIO_BTE_OFF_1   &t;(IIO_IBLS_1 - IIO_IBLS_0) /* Offset from base to BTE 1 */
multiline_comment|/* BTE register offsets from base */
DECL|macro|BTEOFF_STAT
mdefine_line|#define BTEOFF_STAT             0
DECL|macro|BTEOFF_SRC
mdefine_line|#define BTEOFF_SRC              (IIO_BTE_SRC_0 - IIO_BTE_STAT_0)
DECL|macro|BTEOFF_DEST
mdefine_line|#define BTEOFF_DEST             (IIO_BTE_DEST_0 - IIO_BTE_STAT_0)
DECL|macro|BTEOFF_CTRL
mdefine_line|#define BTEOFF_CTRL             (IIO_BTE_CTRL_0 - IIO_BTE_STAT_0)
DECL|macro|BTEOFF_NOTIFY
mdefine_line|#define BTEOFF_NOTIFY           (IIO_BTE_NOTIFY_0 - IIO_BTE_STAT_0)
DECL|macro|BTEOFF_INT
mdefine_line|#define BTEOFF_INT              (IIO_BTE_INT_0 - IIO_BTE_STAT_0)
multiline_comment|/* names used in shub diags */
DECL|macro|IIO_BASE_BTE0
mdefine_line|#define IIO_BASE_BTE0   IIO_IBLS_0&t;&t;
DECL|macro|IIO_BASE_BTE1
mdefine_line|#define IIO_BASE_BTE1   IIO_IBLS_1&t;&t;
multiline_comment|/*&n; * Macro which takes the widget number, and returns the&n; * IO PRB address of that widget.&n; * value _x is expected to be a widget number in the range&n; * 0, 8 - 0xF&n; */
DECL|macro|IIO_IOPRB
mdefine_line|#define IIO_IOPRB(_x)   (IIO_IOPRB_0 + ( ( (_x) &lt; HUB_WIDGET_ID_MIN ? &bslash;&n;                        (_x) : &bslash;&n;                        (_x) - (HUB_WIDGET_ID_MIN-1)) &lt;&lt; 3) )
multiline_comment|/* GFX Flow Control Node/Widget Register */
DECL|macro|IIO_IGFX_W_NUM_BITS
mdefine_line|#define IIO_IGFX_W_NUM_BITS&t;4&t;/* size of widget num field */
DECL|macro|IIO_IGFX_W_NUM_MASK
mdefine_line|#define IIO_IGFX_W_NUM_MASK&t;((1&lt;&lt;IIO_IGFX_W_NUM_BITS)-1)
DECL|macro|IIO_IGFX_W_NUM_SHIFT
mdefine_line|#define IIO_IGFX_W_NUM_SHIFT&t;0
DECL|macro|IIO_IGFX_PI_NUM_BITS
mdefine_line|#define IIO_IGFX_PI_NUM_BITS&t;1&t;/* size of PI num field */
DECL|macro|IIO_IGFX_PI_NUM_MASK
mdefine_line|#define IIO_IGFX_PI_NUM_MASK&t;((1&lt;&lt;IIO_IGFX_PI_NUM_BITS)-1)
DECL|macro|IIO_IGFX_PI_NUM_SHIFT
mdefine_line|#define IIO_IGFX_PI_NUM_SHIFT&t;4
DECL|macro|IIO_IGFX_N_NUM_BITS
mdefine_line|#define IIO_IGFX_N_NUM_BITS&t;8&t;/* size of node num field */
DECL|macro|IIO_IGFX_N_NUM_MASK
mdefine_line|#define IIO_IGFX_N_NUM_MASK&t;((1&lt;&lt;IIO_IGFX_N_NUM_BITS)-1)
DECL|macro|IIO_IGFX_N_NUM_SHIFT
mdefine_line|#define IIO_IGFX_N_NUM_SHIFT&t;5
DECL|macro|IIO_IGFX_P_NUM_BITS
mdefine_line|#define IIO_IGFX_P_NUM_BITS&t;1&t;/* size of processor num field */
DECL|macro|IIO_IGFX_P_NUM_MASK
mdefine_line|#define IIO_IGFX_P_NUM_MASK&t;((1&lt;&lt;IIO_IGFX_P_NUM_BITS)-1)
DECL|macro|IIO_IGFX_P_NUM_SHIFT
mdefine_line|#define IIO_IGFX_P_NUM_SHIFT&t;16
DECL|macro|IIO_IGFX_INIT
mdefine_line|#define IIO_IGFX_INIT(widget, pi, node, cpu)&t;&t;&t;&t;(&bslash;&n;&t;(((widget) &amp; IIO_IGFX_W_NUM_MASK) &lt;&lt; IIO_IGFX_W_NUM_SHIFT) |&t; &bslash;&n;&t;(((pi)     &amp; IIO_IGFX_PI_NUM_MASK)&lt;&lt; IIO_IGFX_PI_NUM_SHIFT)|&t; &bslash;&n;&t;(((node)   &amp; IIO_IGFX_N_NUM_MASK) &lt;&lt; IIO_IGFX_N_NUM_SHIFT) |&t; &bslash;&n;&t;(((cpu)    &amp; IIO_IGFX_P_NUM_MASK) &lt;&lt; IIO_IGFX_P_NUM_SHIFT))
multiline_comment|/* Scratch registers (all bits available) */
DECL|macro|IIO_SCRATCH_REG0
mdefine_line|#define IIO_SCRATCH_REG0        IIO_ISCR0
DECL|macro|IIO_SCRATCH_REG1
mdefine_line|#define IIO_SCRATCH_REG1        IIO_ISCR1
DECL|macro|IIO_SCRATCH_MASK
mdefine_line|#define IIO_SCRATCH_MASK        0xffffffffffffffffUL
DECL|macro|IIO_SCRATCH_BIT0_0
mdefine_line|#define IIO_SCRATCH_BIT0_0      0x0000000000000001UL
DECL|macro|IIO_SCRATCH_BIT0_1
mdefine_line|#define IIO_SCRATCH_BIT0_1      0x0000000000000002UL
DECL|macro|IIO_SCRATCH_BIT0_2
mdefine_line|#define IIO_SCRATCH_BIT0_2      0x0000000000000004UL
DECL|macro|IIO_SCRATCH_BIT0_3
mdefine_line|#define IIO_SCRATCH_BIT0_3      0x0000000000000008UL
DECL|macro|IIO_SCRATCH_BIT0_4
mdefine_line|#define IIO_SCRATCH_BIT0_4      0x0000000000000010UL
DECL|macro|IIO_SCRATCH_BIT0_5
mdefine_line|#define IIO_SCRATCH_BIT0_5      0x0000000000000020UL
DECL|macro|IIO_SCRATCH_BIT0_6
mdefine_line|#define IIO_SCRATCH_BIT0_6      0x0000000000000040UL
DECL|macro|IIO_SCRATCH_BIT0_7
mdefine_line|#define IIO_SCRATCH_BIT0_7      0x0000000000000080UL
DECL|macro|IIO_SCRATCH_BIT0_8
mdefine_line|#define IIO_SCRATCH_BIT0_8      0x0000000000000100UL
DECL|macro|IIO_SCRATCH_BIT0_9
mdefine_line|#define IIO_SCRATCH_BIT0_9      0x0000000000000200UL
DECL|macro|IIO_SCRATCH_BIT0_A
mdefine_line|#define IIO_SCRATCH_BIT0_A      0x0000000000000400UL
DECL|macro|IIO_SCRATCH_BIT1_0
mdefine_line|#define IIO_SCRATCH_BIT1_0      0x0000000000000001UL
DECL|macro|IIO_SCRATCH_BIT1_1
mdefine_line|#define IIO_SCRATCH_BIT1_1      0x0000000000000002UL
multiline_comment|/* IO Translation Table Entries */
DECL|macro|IIO_NUM_ITTES
mdefine_line|#define IIO_NUM_ITTES   7               /* ITTEs numbered 0..6 */
multiline_comment|/* Hw manuals number them 1..7! */
multiline_comment|/*&n; * IIO_IMEM Register fields.&n; */
DECL|macro|IIO_IMEM_W0ESD
mdefine_line|#define IIO_IMEM_W0ESD  0x1UL             /* Widget 0 shut down due to error */
DECL|macro|IIO_IMEM_B0ESD
mdefine_line|#define IIO_IMEM_B0ESD  (1UL &lt;&lt; 4)        /* BTE 0 shut down due to error */
DECL|macro|IIO_IMEM_B1ESD
mdefine_line|#define IIO_IMEM_B1ESD  (1UL &lt;&lt; 8)        /* BTE 1 Shut down due to error */
multiline_comment|/*&n; * As a permanent workaround for a bug in the PI side of the shub, we&squot;ve&n; * redefined big window 7 as small window 0.&n; XXX does this still apply for SN1??&n; */
DECL|macro|HUB_NUM_BIG_WINDOW
mdefine_line|#define HUB_NUM_BIG_WINDOW      (IIO_NUM_ITTES - 1)
multiline_comment|/*&n; * Use the top big window as a surrogate for the first small window&n; */
DECL|macro|SWIN0_BIGWIN
mdefine_line|#define SWIN0_BIGWIN            HUB_NUM_BIG_WINDOW
DECL|macro|ILCSR_WARM_RESET
mdefine_line|#define ILCSR_WARM_RESET        0x100
multiline_comment|/*&n; * CRB manipulation macros&n; *      The CRB macros are slightly complicated, since there are up to&n; *      four registers associated with each CRB entry.&n; */
DECL|macro|IIO_NUM_CRBS
mdefine_line|#define IIO_NUM_CRBS            15      /* Number of CRBs */
DECL|macro|IIO_NUM_PC_CRBS
mdefine_line|#define IIO_NUM_PC_CRBS         4       /* Number of partial cache CRBs */
DECL|macro|IIO_ICRB_OFFSET
mdefine_line|#define IIO_ICRB_OFFSET         8
DECL|macro|IIO_ICRB_0
mdefine_line|#define IIO_ICRB_0              IIO_ICRB0_A
DECL|macro|IIO_ICRB_ADDR_SHFT
mdefine_line|#define IIO_ICRB_ADDR_SHFT&t;2&t;/* Shift to get proper address */
multiline_comment|/* XXX - This is now tuneable:&n;        #define IIO_FIRST_PC_ENTRY 12&n; */
DECL|macro|IIO_ICRB_A
mdefine_line|#define IIO_ICRB_A(_x)  ((u64)(IIO_ICRB_0 + (6 * IIO_ICRB_OFFSET * (_x))))
DECL|macro|IIO_ICRB_B
mdefine_line|#define IIO_ICRB_B(_x)  ((u64)((char *)IIO_ICRB_A(_x) + 1*IIO_ICRB_OFFSET))
DECL|macro|IIO_ICRB_C
mdefine_line|#define IIO_ICRB_C(_x)  ((u64)((char *)IIO_ICRB_A(_x) + 2*IIO_ICRB_OFFSET))
DECL|macro|IIO_ICRB_D
mdefine_line|#define IIO_ICRB_D(_x)  ((u64)((char *)IIO_ICRB_A(_x) + 3*IIO_ICRB_OFFSET))
DECL|macro|IIO_ICRB_E
mdefine_line|#define IIO_ICRB_E(_x)  ((u64)((char *)IIO_ICRB_A(_x) + 4*IIO_ICRB_OFFSET))
DECL|macro|TNUM_TO_WIDGET_DEV
mdefine_line|#define TNUM_TO_WIDGET_DEV(_tnum)&t;(_tnum &amp; 0x7)
multiline_comment|/*&n; * values for &quot;ecode&quot; field&n; */
DECL|macro|IIO_ICRB_ECODE_DERR
mdefine_line|#define IIO_ICRB_ECODE_DERR     0       /* Directory error due to IIO access */
DECL|macro|IIO_ICRB_ECODE_PERR
mdefine_line|#define IIO_ICRB_ECODE_PERR     1       /* Poison error on IO access */
DECL|macro|IIO_ICRB_ECODE_WERR
mdefine_line|#define IIO_ICRB_ECODE_WERR     2       /* Write error by IIO access&n;                                         * e.g. WINV to a Read only line. */
DECL|macro|IIO_ICRB_ECODE_AERR
mdefine_line|#define IIO_ICRB_ECODE_AERR     3       /* Access error caused by IIO access */
DECL|macro|IIO_ICRB_ECODE_PWERR
mdefine_line|#define IIO_ICRB_ECODE_PWERR    4       /* Error on partial write       */
DECL|macro|IIO_ICRB_ECODE_PRERR
mdefine_line|#define IIO_ICRB_ECODE_PRERR    5       /* Error on partial read        */
DECL|macro|IIO_ICRB_ECODE_TOUT
mdefine_line|#define IIO_ICRB_ECODE_TOUT     6       /* CRB timeout before deallocating */
DECL|macro|IIO_ICRB_ECODE_XTERR
mdefine_line|#define IIO_ICRB_ECODE_XTERR    7       /* Incoming xtalk pkt had error bit */
multiline_comment|/*&n; * Values for field imsgtype&n; */
DECL|macro|IIO_ICRB_IMSGT_XTALK
mdefine_line|#define IIO_ICRB_IMSGT_XTALK    0       /* Incoming Meessage from Xtalk */
DECL|macro|IIO_ICRB_IMSGT_BTE
mdefine_line|#define IIO_ICRB_IMSGT_BTE      1       /* Incoming message from BTE    */
DECL|macro|IIO_ICRB_IMSGT_SN1NET
mdefine_line|#define IIO_ICRB_IMSGT_SN1NET   2       /* Incoming message from SN1 net */
DECL|macro|IIO_ICRB_IMSGT_CRB
mdefine_line|#define IIO_ICRB_IMSGT_CRB      3       /* Incoming message from CRB ???  */
multiline_comment|/*&n; * values for field initiator.&n; */
DECL|macro|IIO_ICRB_INIT_XTALK
mdefine_line|#define IIO_ICRB_INIT_XTALK     0       /* Message originated in xtalk  */
DECL|macro|IIO_ICRB_INIT_BTE0
mdefine_line|#define IIO_ICRB_INIT_BTE0      0x1     /* Message originated in BTE 0  */
DECL|macro|IIO_ICRB_INIT_SN1NET
mdefine_line|#define IIO_ICRB_INIT_SN1NET    0x2     /* Message originated in SN1net */
DECL|macro|IIO_ICRB_INIT_CRB
mdefine_line|#define IIO_ICRB_INIT_CRB       0x3     /* Message originated in CRB ?  */
DECL|macro|IIO_ICRB_INIT_BTE1
mdefine_line|#define IIO_ICRB_INIT_BTE1      0x5     /* MEssage originated in BTE 1  */
multiline_comment|/*&n; * Number of credits Hub widget has while sending req/response to&n; * xbow.&n; * Value of 3 is required by Xbow 1.1&n; * We may be able to increase this to 4 with Xbow 1.2.&n; */
DECL|macro|HUBII_XBOW_CREDIT
mdefine_line|#define       HUBII_XBOW_CREDIT       3
DECL|macro|HUBII_XBOW_REV2_CREDIT
mdefine_line|#define       HUBII_XBOW_REV2_CREDIT  4
multiline_comment|/*&n; * Number of credits that xtalk devices should use when communicating&n; * with a SHub (depth of SHub&squot;s queue).&n; */
DECL|macro|HUB_CREDIT
mdefine_line|#define HUB_CREDIT 4
multiline_comment|/*&n; * Some IIO_PRB fields&n; */
DECL|macro|IIO_PRB_MULTI_ERR
mdefine_line|#define IIO_PRB_MULTI_ERR&t;(1LL &lt;&lt; 63)
DECL|macro|IIO_PRB_SPUR_RD
mdefine_line|#define IIO_PRB_SPUR_RD&t;&t;(1LL &lt;&lt; 51)
DECL|macro|IIO_PRB_SPUR_WR
mdefine_line|#define IIO_PRB_SPUR_WR&t;&t;(1LL &lt;&lt; 50)
DECL|macro|IIO_PRB_RD_TO
mdefine_line|#define IIO_PRB_RD_TO&t;&t;(1LL &lt;&lt; 49)
DECL|macro|IIO_PRB_ERROR
mdefine_line|#define IIO_PRB_ERROR&t;&t;(1LL &lt;&lt; 48)
multiline_comment|/*************************************************************************&n;&n; Some of the IIO field masks and shifts are defined here.&n; This is in order to maintain compatibility in SN0 and SN1 code&n; &n;**************************************************************************/
multiline_comment|/*&n; * ICMR register fields&n; * (Note: the IIO_ICMR_P_CNT and IIO_ICMR_PC_VLD from Hub are not&n; * present in SHub)&n; */
DECL|macro|IIO_ICMR_CRB_VLD_SHFT
mdefine_line|#define IIO_ICMR_CRB_VLD_SHFT   20
DECL|macro|IIO_ICMR_CRB_VLD_MASK
mdefine_line|#define IIO_ICMR_CRB_VLD_MASK   (0x7fffUL &lt;&lt; IIO_ICMR_CRB_VLD_SHFT)
DECL|macro|IIO_ICMR_FC_CNT_SHFT
mdefine_line|#define IIO_ICMR_FC_CNT_SHFT    16
DECL|macro|IIO_ICMR_FC_CNT_MASK
mdefine_line|#define IIO_ICMR_FC_CNT_MASK    (0xf &lt;&lt; IIO_ICMR_FC_CNT_SHFT)
DECL|macro|IIO_ICMR_C_CNT_SHFT
mdefine_line|#define IIO_ICMR_C_CNT_SHFT     4
DECL|macro|IIO_ICMR_C_CNT_MASK
mdefine_line|#define IIO_ICMR_C_CNT_MASK     (0xf &lt;&lt; IIO_ICMR_C_CNT_SHFT)
DECL|macro|IIO_ICMR_PRECISE
mdefine_line|#define IIO_ICMR_PRECISE        (1UL &lt;&lt; 52)
DECL|macro|IIO_ICMR_CLR_RPPD
mdefine_line|#define IIO_ICMR_CLR_RPPD       (1UL &lt;&lt; 13)
DECL|macro|IIO_ICMR_CLR_RQPD
mdefine_line|#define IIO_ICMR_CLR_RQPD       (1UL &lt;&lt; 12)
multiline_comment|/*&n; * IIO PIO Deallocation register field masks : (IIO_IPDR)&n; XXX present but not needed in bedrock?  See the manual.&n; */
DECL|macro|IIO_IPDR_PND
mdefine_line|#define IIO_IPDR_PND    (1 &lt;&lt; 4)
multiline_comment|/*&n; * IIO CRB deallocation register field masks: (IIO_ICDR)&n; */
DECL|macro|IIO_ICDR_PND
mdefine_line|#define IIO_ICDR_PND    (1 &lt;&lt; 4)
multiline_comment|/* &n; * IO BTE Length/Status (IIO_IBLS) register bit field definitions&n; */
DECL|macro|IBLS_BUSY
mdefine_line|#define IBLS_BUSY&t;&t;(0x1UL &lt;&lt; 20)
DECL|macro|IBLS_ERROR_SHFT
mdefine_line|#define IBLS_ERROR_SHFT&t;&t;16
DECL|macro|IBLS_ERROR
mdefine_line|#define IBLS_ERROR&t;&t;(0x1UL &lt;&lt; IBLS_ERROR_SHFT)
DECL|macro|IBLS_LENGTH_MASK
mdefine_line|#define IBLS_LENGTH_MASK&t;0xffff
multiline_comment|/*&n; * IO BTE Control/Terminate register (IBCT) register bit field definitions&n; */
DECL|macro|IBCT_POISON
mdefine_line|#define IBCT_POISON&t;&t;(0x1UL &lt;&lt; 8)
DECL|macro|IBCT_NOTIFY
mdefine_line|#define IBCT_NOTIFY&t;&t;(0x1UL &lt;&lt; 4)
DECL|macro|IBCT_ZFIL_MODE
mdefine_line|#define IBCT_ZFIL_MODE&t;&t;(0x1UL &lt;&lt; 0)
multiline_comment|/*&n; * IIO Incoming Error Packet Header (IIO_IIEPH1/IIO_IIEPH2)&n; */
DECL|macro|IIEPH1_VALID
mdefine_line|#define IIEPH1_VALID&t;&t;(1UL &lt;&lt; 44)
DECL|macro|IIEPH1_OVERRUN
mdefine_line|#define IIEPH1_OVERRUN&t;&t;(1UL &lt;&lt; 40)
DECL|macro|IIEPH1_ERR_TYPE_SHFT
mdefine_line|#define IIEPH1_ERR_TYPE_SHFT&t;32
DECL|macro|IIEPH1_ERR_TYPE_MASK
mdefine_line|#define IIEPH1_ERR_TYPE_MASK&t;0xf
DECL|macro|IIEPH1_SOURCE_SHFT
mdefine_line|#define IIEPH1_SOURCE_SHFT&t;20
DECL|macro|IIEPH1_SOURCE_MASK
mdefine_line|#define IIEPH1_SOURCE_MASK&t;11
DECL|macro|IIEPH1_SUPPL_SHFT
mdefine_line|#define IIEPH1_SUPPL_SHFT&t;8
DECL|macro|IIEPH1_SUPPL_MASK
mdefine_line|#define IIEPH1_SUPPL_MASK&t;11
DECL|macro|IIEPH1_CMD_SHFT
mdefine_line|#define IIEPH1_CMD_SHFT&t;&t;0
DECL|macro|IIEPH1_CMD_MASK
mdefine_line|#define IIEPH1_CMD_MASK&t;&t;7
DECL|macro|IIEPH2_TAIL
mdefine_line|#define IIEPH2_TAIL&t;&t;(1UL &lt;&lt; 40)
DECL|macro|IIEPH2_ADDRESS_SHFT
mdefine_line|#define IIEPH2_ADDRESS_SHFT&t;0
DECL|macro|IIEPH2_ADDRESS_MASK
mdefine_line|#define IIEPH2_ADDRESS_MASK&t;38
DECL|macro|IIEPH1_ERR_SHORT_REQ
mdefine_line|#define IIEPH1_ERR_SHORT_REQ&t;2
DECL|macro|IIEPH1_ERR_SHORT_REPLY
mdefine_line|#define IIEPH1_ERR_SHORT_REPLY&t;3
DECL|macro|IIEPH1_ERR_LONG_REQ
mdefine_line|#define IIEPH1_ERR_LONG_REQ&t;4
DECL|macro|IIEPH1_ERR_LONG_REPLY
mdefine_line|#define IIEPH1_ERR_LONG_REPLY&t;5
multiline_comment|/*&n; * IO Error Clear register bit field definitions&n; */
DECL|macro|IECLR_PI1_FWD_INT
mdefine_line|#define IECLR_PI1_FWD_INT&t;(1UL &lt;&lt; 31)  /* clear PI1_FORWARD_INT in iidsr */
DECL|macro|IECLR_PI0_FWD_INT
mdefine_line|#define IECLR_PI0_FWD_INT&t;(1UL &lt;&lt; 30)  /* clear PI0_FORWARD_INT in iidsr */
DECL|macro|IECLR_SPUR_RD_HDR
mdefine_line|#define IECLR_SPUR_RD_HDR&t;(1UL &lt;&lt; 29)  /* clear valid bit in ixss reg */
DECL|macro|IECLR_BTE1
mdefine_line|#define IECLR_BTE1&t;&t;(1UL &lt;&lt; 18)  /* clear bte error 1 */
DECL|macro|IECLR_BTE0
mdefine_line|#define IECLR_BTE0&t;&t;(1UL &lt;&lt; 17)  /* clear bte error 0 */
DECL|macro|IECLR_CRAZY
mdefine_line|#define IECLR_CRAZY&t;&t;(1UL &lt;&lt; 16)  /* clear crazy bit in wstat reg */
DECL|macro|IECLR_PRB_F
mdefine_line|#define IECLR_PRB_F&t;&t;(1UL &lt;&lt; 15)  /* clear err bit in PRB_F reg */
DECL|macro|IECLR_PRB_E
mdefine_line|#define IECLR_PRB_E&t;&t;(1UL &lt;&lt; 14)  /* clear err bit in PRB_E reg */
DECL|macro|IECLR_PRB_D
mdefine_line|#define IECLR_PRB_D&t;&t;(1UL &lt;&lt; 13)  /* clear err bit in PRB_D reg */
DECL|macro|IECLR_PRB_C
mdefine_line|#define IECLR_PRB_C&t;&t;(1UL &lt;&lt; 12)  /* clear err bit in PRB_C reg */
DECL|macro|IECLR_PRB_B
mdefine_line|#define IECLR_PRB_B&t;&t;(1UL &lt;&lt; 11)  /* clear err bit in PRB_B reg */
DECL|macro|IECLR_PRB_A
mdefine_line|#define IECLR_PRB_A&t;&t;(1UL &lt;&lt; 10)  /* clear err bit in PRB_A reg */
DECL|macro|IECLR_PRB_9
mdefine_line|#define IECLR_PRB_9&t;&t;(1UL &lt;&lt; 9)   /* clear err bit in PRB_9 reg */
DECL|macro|IECLR_PRB_8
mdefine_line|#define IECLR_PRB_8&t;&t;(1UL &lt;&lt; 8)   /* clear err bit in PRB_8 reg */
DECL|macro|IECLR_PRB_0
mdefine_line|#define IECLR_PRB_0&t;&t;(1UL &lt;&lt; 0)   /* clear err bit in PRB_0 reg */
multiline_comment|/*&n; * IIO CRB control register Fields: IIO_ICCR &n; */
DECL|macro|IIO_ICCR_PENDING
mdefine_line|#define&t;IIO_ICCR_PENDING&t;(0x10000)
DECL|macro|IIO_ICCR_CMD_MASK
mdefine_line|#define&t;IIO_ICCR_CMD_MASK&t;(0xFF)
DECL|macro|IIO_ICCR_CMD_SHFT
mdefine_line|#define&t;IIO_ICCR_CMD_SHFT&t;(7)
DECL|macro|IIO_ICCR_CMD_NOP
mdefine_line|#define&t;IIO_ICCR_CMD_NOP&t;(0x0)&t;/* No Op */
DECL|macro|IIO_ICCR_CMD_WAKE
mdefine_line|#define&t;IIO_ICCR_CMD_WAKE&t;(0x100) /* Reactivate CRB entry and process */
DECL|macro|IIO_ICCR_CMD_TIMEOUT
mdefine_line|#define&t;IIO_ICCR_CMD_TIMEOUT&t;(0x200)&t;/* Make CRB timeout &amp; mark invalid */
DECL|macro|IIO_ICCR_CMD_EJECT
mdefine_line|#define&t;IIO_ICCR_CMD_EJECT&t;(0x400)&t;/* Contents of entry written to memory &n;&t;&t;&t;&t;&t; * via a WB&n;&t;&t;&t;&t;&t; */
DECL|macro|IIO_ICCR_CMD_FLUSH
mdefine_line|#define&t;IIO_ICCR_CMD_FLUSH&t;(0x800)
multiline_comment|/*&n; *&n; * CRB Register description.&n; *&n; * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING&n; * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING&n; * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING&n; * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING&n; * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING&n; *&n; * Many of the fields in CRB are status bits used by hardware&n; * for implementation of the protocol. It&squot;s very dangerous to&n; * mess around with the CRB registers.&n; *&n; * It&squot;s OK to read the CRB registers and try to make sense out of the&n; * fields in CRB.&n; *&n; * Updating CRB requires all activities in Hub IIO to be quiesced.&n; * otherwise, a write to CRB could corrupt other CRB entries.&n; * CRBs are here only as a back door peek to shub IIO&squot;s status.&n; * Quiescing implies  no dmas no PIOs&n; * either directly from the cpu or from sn0net.&n; * this is not something that can be done easily. So, AVOID updating&n; * CRBs.&n; */
macro_line|#ifndef __ASSEMBLY__
multiline_comment|/*&n; * Easy access macros for CRBs, all 5 registers (A-E)&n; */
DECL|typedef|icrba_t
r_typedef
id|ii_icrb0_a_u_t
id|icrba_t
suffix:semicolon
DECL|macro|a_sidn
mdefine_line|#define a_sidn          ii_icrb0_a_fld_s.ia_sidn
DECL|macro|a_tnum
mdefine_line|#define a_tnum          ii_icrb0_a_fld_s.ia_tnum
DECL|macro|a_addr
mdefine_line|#define a_addr          ii_icrb0_a_fld_s.ia_addr
DECL|macro|a_valid
mdefine_line|#define a_valid         ii_icrb0_a_fld_s.ia_vld
DECL|macro|a_iow
mdefine_line|#define a_iow           ii_icrb0_a_fld_s.ia_iow
DECL|macro|a_regvalue
mdefine_line|#define a_regvalue&t;ii_icrb0_a_regval
DECL|typedef|icrbb_t
r_typedef
id|ii_icrb0_b_u_t
id|icrbb_t
suffix:semicolon
DECL|macro|b_use_old
mdefine_line|#define b_use_old       ii_icrb0_b_fld_s.ib_use_old
DECL|macro|b_imsgtype
mdefine_line|#define b_imsgtype      ii_icrb0_b_fld_s.ib_imsgtype
DECL|macro|b_imsg
mdefine_line|#define b_imsg          ii_icrb0_b_fld_s.ib_imsg
DECL|macro|b_initiator
mdefine_line|#define b_initiator     ii_icrb0_b_fld_s.ib_init
DECL|macro|b_exc
mdefine_line|#define b_exc           ii_icrb0_b_fld_s.ib_exc
DECL|macro|b_ackcnt
mdefine_line|#define b_ackcnt        ii_icrb0_b_fld_s.ib_ack_cnt
DECL|macro|b_resp
mdefine_line|#define b_resp          ii_icrb0_b_fld_s.ib_resp
DECL|macro|b_ack
mdefine_line|#define b_ack           ii_icrb0_b_fld_s.ib_ack
DECL|macro|b_hold
mdefine_line|#define b_hold          ii_icrb0_b_fld_s.ib_hold
DECL|macro|b_wb
mdefine_line|#define b_wb            ii_icrb0_b_fld_s.ib_wb
DECL|macro|b_intvn
mdefine_line|#define b_intvn         ii_icrb0_b_fld_s.ib_intvn
DECL|macro|b_stall_ib
mdefine_line|#define b_stall_ib      ii_icrb0_b_fld_s.ib_stall_ib
DECL|macro|b_stall_int
mdefine_line|#define b_stall_int     ii_icrb0_b_fld_s.ib_stall__intr
DECL|macro|b_stall_bte_0
mdefine_line|#define b_stall_bte_0   ii_icrb0_b_fld_s.ib_stall__bte_0
DECL|macro|b_stall_bte_1
mdefine_line|#define b_stall_bte_1   ii_icrb0_b_fld_s.ib_stall__bte_1
DECL|macro|b_error
mdefine_line|#define b_error         ii_icrb0_b_fld_s.ib_error
DECL|macro|b_ecode
mdefine_line|#define b_ecode         ii_icrb0_b_fld_s.ib_errcode
DECL|macro|b_lnetuce
mdefine_line|#define b_lnetuce       ii_icrb0_b_fld_s.ib_ln_uce
DECL|macro|b_mark
mdefine_line|#define b_mark          ii_icrb0_b_fld_s.ib_mark
DECL|macro|b_xerr
mdefine_line|#define b_xerr          ii_icrb0_b_fld_s.ib_xt_err
DECL|macro|b_regvalue
mdefine_line|#define b_regvalue&t;ii_icrb0_b_regval
DECL|typedef|icrbc_t
r_typedef
id|ii_icrb0_c_u_t
id|icrbc_t
suffix:semicolon
DECL|macro|c_suppl
mdefine_line|#define c_suppl         ii_icrb0_c_fld_s.ic_suppl
DECL|macro|c_barrop
mdefine_line|#define c_barrop        ii_icrb0_c_fld_s.ic_bo
DECL|macro|c_doresp
mdefine_line|#define c_doresp        ii_icrb0_c_fld_s.ic_resprqd
DECL|macro|c_gbr
mdefine_line|#define c_gbr           ii_icrb0_c_fld_s.ic_gbr
DECL|macro|c_btenum
mdefine_line|#define c_btenum        ii_icrb0_c_fld_s.ic_bte_num
DECL|macro|c_cohtrans
mdefine_line|#define c_cohtrans      ii_icrb0_c_fld_s.ic_ct
DECL|macro|c_xtsize
mdefine_line|#define c_xtsize        ii_icrb0_c_fld_s.ic_size
DECL|macro|c_source
mdefine_line|#define c_source        ii_icrb0_c_fld_s.ic_source
DECL|macro|c_regvalue
mdefine_line|#define c_regvalue&t;ii_icrb0_c_regval
DECL|typedef|icrbd_t
r_typedef
id|ii_icrb0_d_u_t
id|icrbd_t
suffix:semicolon
DECL|macro|d_sleep
mdefine_line|#define d_sleep         ii_icrb0_d_fld_s.id_sleep
DECL|macro|d_pricnt
mdefine_line|#define d_pricnt        ii_icrb0_d_fld_s.id_pr_cnt
DECL|macro|d_pripsc
mdefine_line|#define d_pripsc        ii_icrb0_d_fld_s.id_pr_psc
DECL|macro|d_bteop
mdefine_line|#define d_bteop         ii_icrb0_d_fld_s.id_bte_op
DECL|macro|d_bteaddr
mdefine_line|#define d_bteaddr       ii_icrb0_d_fld_s.id_pa_be /* ic_pa_be fld has 2 names*/
DECL|macro|d_benable
mdefine_line|#define d_benable       ii_icrb0_d_fld_s.id_pa_be /* ic_pa_be fld has 2 names*/
DECL|macro|d_regvalue
mdefine_line|#define d_regvalue&t;ii_icrb0_d_regval
DECL|typedef|icrbe_t
r_typedef
id|ii_icrb0_e_u_t
id|icrbe_t
suffix:semicolon
DECL|macro|icrbe_ctxtvld
mdefine_line|#define icrbe_ctxtvld   ii_icrb0_e_fld_s.ie_cvld
DECL|macro|icrbe_toutvld
mdefine_line|#define icrbe_toutvld   ii_icrb0_e_fld_s.ie_tvld
DECL|macro|icrbe_context
mdefine_line|#define icrbe_context   ii_icrb0_e_fld_s.ie_context
DECL|macro|icrbe_timeout
mdefine_line|#define icrbe_timeout   ii_icrb0_e_fld_s.ie_timeout
DECL|macro|e_regvalue
mdefine_line|#define e_regvalue&t;ii_icrb0_e_regval
macro_line|#endif /* __ASSEMBLY__ */
multiline_comment|/* Number of widgets supported by shub */
DECL|macro|HUB_NUM_WIDGET
mdefine_line|#define HUB_NUM_WIDGET          9
DECL|macro|HUB_WIDGET_ID_MIN
mdefine_line|#define HUB_WIDGET_ID_MIN       0x8
DECL|macro|HUB_WIDGET_ID_MAX
mdefine_line|#define HUB_WIDGET_ID_MAX       0xf
DECL|macro|HUB_WIDGET_PART_NUM
mdefine_line|#define HUB_WIDGET_PART_NUM     0xc120
DECL|macro|MAX_HUBS_PER_XBOW
mdefine_line|#define MAX_HUBS_PER_XBOW       2
macro_line|#ifndef __ASSEMBLY__
multiline_comment|/* A few more #defines for backwards compatibility */
DECL|macro|iprb_t
mdefine_line|#define iprb_t          ii_iprb0_u_t
DECL|macro|iprb_regval
mdefine_line|#define iprb_regval     ii_iprb0_regval
DECL|macro|iprb_mult_err
mdefine_line|#define iprb_mult_err&t;ii_iprb0_fld_s.i_mult_err
DECL|macro|iprb_spur_rd
mdefine_line|#define iprb_spur_rd&t;ii_iprb0_fld_s.i_spur_rd
DECL|macro|iprb_spur_wr
mdefine_line|#define iprb_spur_wr&t;ii_iprb0_fld_s.i_spur_wr
DECL|macro|iprb_rd_to
mdefine_line|#define iprb_rd_to&t;ii_iprb0_fld_s.i_rd_to
DECL|macro|iprb_ovflow
mdefine_line|#define iprb_ovflow     ii_iprb0_fld_s.i_of_cnt
DECL|macro|iprb_error
mdefine_line|#define iprb_error      ii_iprb0_fld_s.i_error
DECL|macro|iprb_ff
mdefine_line|#define iprb_ff         ii_iprb0_fld_s.i_f
DECL|macro|iprb_mode
mdefine_line|#define iprb_mode       ii_iprb0_fld_s.i_m
DECL|macro|iprb_bnakctr
mdefine_line|#define iprb_bnakctr    ii_iprb0_fld_s.i_nb
DECL|macro|iprb_anakctr
mdefine_line|#define iprb_anakctr    ii_iprb0_fld_s.i_na
DECL|macro|iprb_xtalkctr
mdefine_line|#define iprb_xtalkctr   ii_iprb0_fld_s.i_c
macro_line|#endif
DECL|macro|LNK_STAT_WORKING
mdefine_line|#define LNK_STAT_WORKING        0x2&t;&t;/* LLP is working */
DECL|macro|IIO_WSTAT_ECRAZY
mdefine_line|#define IIO_WSTAT_ECRAZY        (1ULL &lt;&lt; 32)    /* Hub gone crazy */
DECL|macro|IIO_WSTAT_TXRETRY
mdefine_line|#define IIO_WSTAT_TXRETRY       (1ULL &lt;&lt; 9)     /* Hub Tx Retry timeout */
DECL|macro|IIO_WSTAT_TXRETRY_MASK
mdefine_line|#define IIO_WSTAT_TXRETRY_MASK  (0x7F)   /* should be 0xFF?? */
DECL|macro|IIO_WSTAT_TXRETRY_SHFT
mdefine_line|#define IIO_WSTAT_TXRETRY_SHFT  (16)
DECL|macro|IIO_WSTAT_TXRETRY_CNT
mdefine_line|#define IIO_WSTAT_TXRETRY_CNT(w)        (((w) &gt;&gt; IIO_WSTAT_TXRETRY_SHFT) &amp; &bslash;&n;                                          IIO_WSTAT_TXRETRY_MASK)
multiline_comment|/* Number of II perf. counters we can multiplex at once */
DECL|macro|IO_PERF_SETS
mdefine_line|#define IO_PERF_SETS&t;32
macro_line|#if __KERNEL__
macro_line|#ifndef __ASSEMBLY__
macro_line|#include &lt;asm/sn/alenlist.h&gt;
macro_line|#include &lt;asm/sn/dmamap.h&gt;
macro_line|#include &lt;asm/sn/driver.h&gt;
macro_line|#include &lt;asm/sn/xtalk/xtalk.h&gt;
multiline_comment|/* Bit for the widget in inbound access register */
DECL|macro|IIO_IIWA_WIDGET
mdefine_line|#define IIO_IIWA_WIDGET(_w)     ((uint64_t)(1ULL &lt;&lt; _w))
multiline_comment|/* Bit for the widget in outbound access register */
DECL|macro|IIO_IOWA_WIDGET
mdefine_line|#define IIO_IOWA_WIDGET(_w)     ((uint64_t)(1ULL &lt;&lt; _w))
multiline_comment|/* NOTE: The following define assumes that we are going to get&n; * widget numbers from 8 thru F and the device numbers within&n; * widget from 0 thru 7.&n; */
DECL|macro|IIO_IIDEM_WIDGETDEV_MASK
mdefine_line|#define IIO_IIDEM_WIDGETDEV_MASK(w, d)  ((uint64_t)(1ULL &lt;&lt; (8 * ((w) - 8) + (d))))
multiline_comment|/* IO Interrupt Destination Register */
DECL|macro|IIO_IIDSR_SENT_SHIFT
mdefine_line|#define IIO_IIDSR_SENT_SHIFT    28
DECL|macro|IIO_IIDSR_SENT_MASK
mdefine_line|#define IIO_IIDSR_SENT_MASK     0x30000000
DECL|macro|IIO_IIDSR_ENB_SHIFT
mdefine_line|#define IIO_IIDSR_ENB_SHIFT     24
DECL|macro|IIO_IIDSR_ENB_MASK
mdefine_line|#define IIO_IIDSR_ENB_MASK      0x01000000
DECL|macro|IIO_IIDSR_NODE_SHIFT
mdefine_line|#define IIO_IIDSR_NODE_SHIFT    9
DECL|macro|IIO_IIDSR_NODE_MASK
mdefine_line|#define IIO_IIDSR_NODE_MASK     0x000ff700
DECL|macro|IIO_IIDSR_PI_ID_SHIFT
mdefine_line|#define IIO_IIDSR_PI_ID_SHIFT   8
DECL|macro|IIO_IIDSR_PI_ID_MASK
mdefine_line|#define IIO_IIDSR_PI_ID_MASK    0x00000100
DECL|macro|IIO_IIDSR_LVL_SHIFT
mdefine_line|#define IIO_IIDSR_LVL_SHIFT     0
DECL|macro|IIO_IIDSR_LVL_MASK
mdefine_line|#define IIO_IIDSR_LVL_MASK      0x000000ff
multiline_comment|/* Xtalk timeout threshhold register (IIO_IXTT) */
DECL|macro|IXTT_RRSP_TO_SHFT
mdefine_line|#define IXTT_RRSP_TO_SHFT&t;55&t;   /* read response timeout */
DECL|macro|IXTT_RRSP_TO_MASK
mdefine_line|#define IXTT_RRSP_TO_MASK&t;(0x1FULL &lt;&lt; IXTT_RRSP_TO_SHFT)
DECL|macro|IXTT_RRSP_PS_SHFT
mdefine_line|#define IXTT_RRSP_PS_SHFT&t;32&t;   /* read responsed TO prescalar */
DECL|macro|IXTT_RRSP_PS_MASK
mdefine_line|#define IXTT_RRSP_PS_MASK&t;(0x7FFFFFULL &lt;&lt; IXTT_RRSP_PS_SHFT)
DECL|macro|IXTT_TAIL_TO_SHFT
mdefine_line|#define IXTT_TAIL_TO_SHFT&t;0&t;   /* tail timeout counter threshold */
DECL|macro|IXTT_TAIL_TO_MASK
mdefine_line|#define IXTT_TAIL_TO_MASK&t;(0x3FFFFFFULL &lt;&lt; IXTT_TAIL_TO_SHFT)
multiline_comment|/*&n; * The IO LLP control status register and widget control register&n; */
DECL|union|hubii_wcr_u
r_typedef
r_union
id|hubii_wcr_u
(brace
DECL|member|wcr_reg_value
r_uint64
id|wcr_reg_value
suffix:semicolon
r_struct
(brace
DECL|member|wcr_widget_id
r_uint64
id|wcr_widget_id
suffix:colon
l_int|4
comma
multiline_comment|/* LLP crossbar credit */
DECL|member|wcr_tag_mode
id|wcr_tag_mode
suffix:colon
l_int|1
comma
multiline_comment|/* Tag mode */
DECL|member|wcr_rsvd1
id|wcr_rsvd1
suffix:colon
l_int|8
comma
multiline_comment|/* Reserved */
DECL|member|wcr_xbar_crd
id|wcr_xbar_crd
suffix:colon
l_int|3
comma
multiline_comment|/* LLP crossbar credit */
DECL|member|wcr_f_bad_pkt
id|wcr_f_bad_pkt
suffix:colon
l_int|1
comma
multiline_comment|/* Force bad llp pkt enable */
DECL|member|wcr_dir_con
id|wcr_dir_con
suffix:colon
l_int|1
comma
multiline_comment|/* widget direct connect */
DECL|member|wcr_e_thresh
id|wcr_e_thresh
suffix:colon
l_int|5
comma
multiline_comment|/* elasticity threshold */
DECL|member|wcr_rsvd
id|wcr_rsvd
suffix:colon
l_int|41
suffix:semicolon
multiline_comment|/* unused */
DECL|member|wcr_fields_s
)brace
id|wcr_fields_s
suffix:semicolon
DECL|typedef|hubii_wcr_t
)brace
id|hubii_wcr_t
suffix:semicolon
DECL|macro|iwcr_dir_con
mdefine_line|#define iwcr_dir_con    wcr_fields_s.wcr_dir_con
multiline_comment|/* The structures below are defined to extract and modify the ii&n;performance registers */
multiline_comment|/* io_perf_sel allows the caller to specify what tests will be&n;   performed */
DECL|union|io_perf_sel
r_typedef
r_union
id|io_perf_sel
(brace
DECL|member|perf_sel_reg
r_uint64
id|perf_sel_reg
suffix:semicolon
r_struct
(brace
DECL|member|perf_ippr0
r_uint64
id|perf_ippr0
suffix:colon
l_int|4
comma
DECL|member|perf_ippr1
id|perf_ippr1
suffix:colon
l_int|4
comma
DECL|member|perf_icct
id|perf_icct
suffix:colon
l_int|8
comma
DECL|member|perf_rsvd
id|perf_rsvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|perf_sel_bits
)brace
id|perf_sel_bits
suffix:semicolon
DECL|typedef|io_perf_sel_t
)brace
id|io_perf_sel_t
suffix:semicolon
multiline_comment|/* io_perf_cnt is to extract the count from the shub registers. Due to&n;   hardware problems there is only one counter, not two. */
DECL|union|io_perf_cnt
r_typedef
r_union
id|io_perf_cnt
(brace
DECL|member|perf_cnt
r_uint64
id|perf_cnt
suffix:semicolon
r_struct
(brace
DECL|member|perf_cnt
r_uint64
id|perf_cnt
suffix:colon
l_int|20
comma
DECL|member|perf_rsvd2
id|perf_rsvd2
suffix:colon
l_int|12
comma
DECL|member|perf_rsvd1
id|perf_rsvd1
suffix:colon
l_int|32
suffix:semicolon
DECL|member|perf_cnt_bits
)brace
id|perf_cnt_bits
suffix:semicolon
DECL|typedef|io_perf_cnt_t
)brace
id|io_perf_cnt_t
suffix:semicolon
DECL|union|iprte_a
r_typedef
r_union
id|iprte_a
(brace
DECL|member|entry
id|shubreg_t
id|entry
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|shubreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|shubreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_init
id|shubreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|shubreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|shubreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_widget
id|shubreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|shubreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|shubreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|iprte_fields
)brace
id|iprte_fields
suffix:semicolon
DECL|typedef|iprte_a_t
)brace
id|iprte_a_t
suffix:semicolon
multiline_comment|/* PIO MANAGEMENT */
DECL|typedef|hub_piomap_t
r_typedef
r_struct
id|hub_piomap_s
op_star
id|hub_piomap_t
suffix:semicolon
r_extern
id|hub_piomap_t
id|hub_piomap_alloc
c_func
(paren
id|vertex_hdl_t
id|dev
comma
multiline_comment|/* set up mapping for this device */
id|device_desc_t
id|dev_desc
comma
multiline_comment|/* device descriptor */
id|iopaddr_t
id|xtalk_addr
comma
multiline_comment|/* map for this xtalk_addr range */
r_int
id|byte_count
comma
r_int
id|byte_count_max
comma
multiline_comment|/* maximum size of a mapping */
r_int
id|flags
)paren
suffix:semicolon
multiline_comment|/* defined in sys/pio.h */
r_extern
r_void
id|hub_piomap_free
c_func
(paren
id|hub_piomap_t
id|hub_piomap
)paren
suffix:semicolon
r_extern
id|caddr_t
id|hub_piomap_addr
c_func
(paren
id|hub_piomap_t
id|hub_piomap
comma
multiline_comment|/* mapping resources */
id|iopaddr_t
id|xtalk_addr
comma
multiline_comment|/* map for this xtalk addr */
r_int
id|byte_count
)paren
suffix:semicolon
multiline_comment|/* map this many bytes */
r_extern
r_void
id|hub_piomap_done
c_func
(paren
id|hub_piomap_t
id|hub_piomap
)paren
suffix:semicolon
r_extern
id|caddr_t
id|hub_piotrans_addr
c_func
(paren
id|vertex_hdl_t
id|dev
comma
multiline_comment|/* translate to this device */
id|device_desc_t
id|dev_desc
comma
multiline_comment|/* device descriptor */
id|iopaddr_t
id|xtalk_addr
comma
multiline_comment|/* Crosstalk address */
r_int
id|byte_count
comma
multiline_comment|/* map this many bytes */
r_int
id|flags
)paren
suffix:semicolon
multiline_comment|/* (currently unused) */
multiline_comment|/* DMA MANAGEMENT */
DECL|typedef|hub_dmamap_t
r_typedef
r_struct
id|hub_dmamap_s
op_star
id|hub_dmamap_t
suffix:semicolon
r_extern
id|hub_dmamap_t
id|hub_dmamap_alloc
c_func
(paren
id|vertex_hdl_t
id|dev
comma
multiline_comment|/* set up mappings for dev */
id|device_desc_t
id|dev_desc
comma
multiline_comment|/* device descriptor */
r_int
id|byte_count_max
comma
multiline_comment|/* max size of a mapping */
r_int
id|flags
)paren
suffix:semicolon
multiline_comment|/* defined in dma.h */
r_extern
r_void
id|hub_dmamap_free
c_func
(paren
id|hub_dmamap_t
id|dmamap
)paren
suffix:semicolon
r_extern
id|iopaddr_t
id|hub_dmamap_addr
c_func
(paren
id|hub_dmamap_t
id|dmamap
comma
multiline_comment|/* use mapping resources */
id|paddr_t
id|paddr
comma
multiline_comment|/* map for this address */
r_int
id|byte_count
)paren
suffix:semicolon
multiline_comment|/* map this many bytes */
r_extern
id|alenlist_t
id|hub_dmamap_list
c_func
(paren
id|hub_dmamap_t
id|dmamap
comma
multiline_comment|/* use mapping resources */
id|alenlist_t
id|alenlist
comma
multiline_comment|/* map this Addr/Length List */
r_int
id|flags
)paren
suffix:semicolon
r_extern
r_void
id|hub_dmamap_done
c_func
(paren
id|hub_dmamap_t
id|dmamap
)paren
suffix:semicolon
multiline_comment|/* done w/ mapping resources */
r_extern
id|iopaddr_t
id|hub_dmatrans_addr
c_func
(paren
id|vertex_hdl_t
id|dev
comma
multiline_comment|/* translate for this device */
id|device_desc_t
id|dev_desc
comma
multiline_comment|/* device descriptor */
id|paddr_t
id|paddr
comma
multiline_comment|/* system physical address */
r_int
id|byte_count
comma
multiline_comment|/* length */
r_int
id|flags
)paren
suffix:semicolon
multiline_comment|/* defined in dma.h */
r_extern
id|alenlist_t
id|hub_dmatrans_list
c_func
(paren
id|vertex_hdl_t
id|dev
comma
multiline_comment|/* translate for this device */
id|device_desc_t
id|dev_desc
comma
multiline_comment|/* device descriptor */
id|alenlist_t
id|palenlist
comma
multiline_comment|/* system addr/length list */
r_int
id|flags
)paren
suffix:semicolon
multiline_comment|/* defined in dma.h */
r_extern
r_void
id|hub_dmamap_drain
c_func
(paren
id|hub_dmamap_t
id|map
)paren
suffix:semicolon
r_extern
r_void
id|hub_dmaaddr_drain
c_func
(paren
id|vertex_hdl_t
id|vhdl
comma
id|paddr_t
id|addr
comma
r_int
id|bytes
)paren
suffix:semicolon
r_extern
r_void
id|hub_dmalist_drain
c_func
(paren
id|vertex_hdl_t
id|vhdl
comma
id|alenlist_t
id|list
)paren
suffix:semicolon
multiline_comment|/* INTERRUPT MANAGEMENT */
DECL|typedef|hub_intr_t
r_typedef
r_struct
id|hub_intr_s
op_star
id|hub_intr_t
suffix:semicolon
r_extern
id|hub_intr_t
id|hub_intr_alloc
c_func
(paren
id|vertex_hdl_t
id|dev
comma
multiline_comment|/* which device */
id|device_desc_t
id|dev_desc
comma
multiline_comment|/* device descriptor */
id|vertex_hdl_t
id|owner_dev
)paren
suffix:semicolon
multiline_comment|/* owner of this interrupt */
r_extern
id|hub_intr_t
id|hub_intr_alloc_nothd
c_func
(paren
id|vertex_hdl_t
id|dev
comma
multiline_comment|/* which device */
id|device_desc_t
id|dev_desc
comma
multiline_comment|/* device descriptor */
id|vertex_hdl_t
id|owner_dev
)paren
suffix:semicolon
multiline_comment|/* owner of this interrupt */
r_extern
r_void
id|hub_intr_free
c_func
(paren
id|hub_intr_t
id|intr_hdl
)paren
suffix:semicolon
r_extern
r_int
id|hub_intr_connect
c_func
(paren
id|hub_intr_t
id|intr_hdl
comma
multiline_comment|/* xtalk intr resource hndl */
id|intr_func_t
id|intr_func
comma
multiline_comment|/* xtalk intr handler */
r_void
op_star
id|intr_arg
comma
multiline_comment|/* arg to intr handler */
id|xtalk_intr_setfunc_t
id|setfunc
comma
multiline_comment|/* func to set intr hw */
r_void
op_star
id|setfunc_arg
)paren
suffix:semicolon
multiline_comment|/* arg to setfunc */
r_extern
r_void
id|hub_intr_disconnect
c_func
(paren
id|hub_intr_t
id|intr_hdl
)paren
suffix:semicolon
multiline_comment|/* CONFIGURATION MANAGEMENT */
r_extern
r_void
id|hub_provider_startup
c_func
(paren
id|vertex_hdl_t
id|hub
)paren
suffix:semicolon
r_extern
r_void
id|hub_provider_shutdown
c_func
(paren
id|vertex_hdl_t
id|hub
)paren
suffix:semicolon
DECL|macro|HUB_PIO_CONVEYOR
mdefine_line|#define HUB_PIO_CONVEYOR        0x1     /* PIO in conveyor belt mode */
DECL|macro|HUB_PIO_FIRE_N_FORGET
mdefine_line|#define HUB_PIO_FIRE_N_FORGET   0x2     /* PIO in fire-and-forget mode */
multiline_comment|/* Flags that make sense to hub_widget_flags_set */
DECL|macro|HUB_WIDGET_FLAGS
mdefine_line|#define HUB_WIDGET_FLAGS        (                               &bslash;&n;&t;&t;&t;&t; HUB_PIO_CONVEYOR       |       &bslash;&n;&t;&t;&t;&t; HUB_PIO_FIRE_N_FORGET          &bslash;&n;&t;&t;&t;&t;)
DECL|typedef|hub_widget_flags_t
r_typedef
r_int
id|hub_widget_flags_t
suffix:semicolon
multiline_comment|/* Set the PIO mode for a widget. */
r_extern
r_int
id|hub_widget_flags_set
c_func
(paren
id|nasid_t
id|nasid
comma
id|xwidgetnum_t
id|widget_num
comma
id|hub_widget_flags_t
id|flags
)paren
suffix:semicolon
multiline_comment|/* Error Handling. */
r_extern
r_int
id|hub_ioerror_handler
c_func
(paren
id|vertex_hdl_t
comma
r_int
comma
r_int
comma
r_struct
id|io_error_s
op_star
)paren
suffix:semicolon
r_extern
r_int
id|kl_ioerror_handler
c_func
(paren
id|cnodeid_t
comma
id|cnodeid_t
comma
id|cpuid_t
comma
r_int
comma
id|paddr_t
comma
id|caddr_t
comma
id|ioerror_mode_t
)paren
suffix:semicolon
r_extern
r_int
id|hub_error_devenable
c_func
(paren
id|vertex_hdl_t
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|hub_dma_enabled
c_func
(paren
id|vertex_hdl_t
)paren
suffix:semicolon
macro_line|#endif /* __ASSEMBLY__ */
macro_line|#endif /* _KERNEL */
macro_line|#endif /* _ASM_IA64_SN_SN2_SHUBIO_H */
eof
