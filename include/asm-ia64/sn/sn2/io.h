multiline_comment|/* &n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 2000-2003 Silicon Graphics, Inc. All rights reserved.&n; */
macro_line|#ifndef _ASM_SN_SN2_IO_H
DECL|macro|_ASM_SN_SN2_IO_H
mdefine_line|#define _ASM_SN_SN2_IO_H
r_extern
r_void
op_star
id|sn_io_addr
c_func
(paren
r_int
r_int
id|port
)paren
suffix:semicolon
multiline_comment|/* Forward definition */
r_extern
r_void
id|sn_mmiob
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/* Forward definition */
macro_line|#include &lt;asm/intrinsics.h&gt;
DECL|macro|__sn_mf_a
mdefine_line|#define __sn_mf_a()   ia64_mfa()
r_extern
r_void
id|sn_dma_flush
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
DECL|macro|__sn_inb
mdefine_line|#define __sn_inb ___sn_inb
DECL|macro|__sn_inw
mdefine_line|#define __sn_inw ___sn_inw
DECL|macro|__sn_inl
mdefine_line|#define __sn_inl ___sn_inl
DECL|macro|__sn_outb
mdefine_line|#define __sn_outb ___sn_outb
DECL|macro|__sn_outw
mdefine_line|#define __sn_outw ___sn_outw
DECL|macro|__sn_outl
mdefine_line|#define __sn_outl ___sn_outl
DECL|macro|__sn_readb
mdefine_line|#define __sn_readb ___sn_readb
DECL|macro|__sn_readw
mdefine_line|#define __sn_readw ___sn_readw
DECL|macro|__sn_readl
mdefine_line|#define __sn_readl ___sn_readl
DECL|macro|__sn_readq
mdefine_line|#define __sn_readq ___sn_readq
DECL|macro|__sn_readb_relaxed
mdefine_line|#define __sn_readb_relaxed ___sn_readb_relaxed
DECL|macro|__sn_readw_relaxed
mdefine_line|#define __sn_readw_relaxed ___sn_readw_relaxed
DECL|macro|__sn_readl_relaxed
mdefine_line|#define __sn_readl_relaxed ___sn_readl_relaxed
DECL|macro|__sn_readq_relaxed
mdefine_line|#define __sn_readq_relaxed ___sn_readq_relaxed
multiline_comment|/*&n; * The following routines are SN Platform specific, called when&n; * a reference is made to inX/outX set macros.  SN Platform&n; * inX set of macros ensures that Posted DMA writes on the&n; * Bridge is flushed.&n; *&n; * The routines should be self explainatory.&n; */
r_static
r_inline
r_int
r_int
DECL|function|___sn_inb
id|___sn_inb
(paren
r_int
r_int
id|port
)paren
(brace
r_volatile
r_int
r_char
op_star
id|addr
suffix:semicolon
r_int
r_char
id|ret
op_assign
op_minus
l_int|1
suffix:semicolon
r_if
c_cond
(paren
(paren
id|addr
op_assign
id|sn_io_addr
c_func
(paren
id|port
)paren
)paren
)paren
(brace
id|ret
op_assign
op_star
id|addr
suffix:semicolon
id|__sn_mf_a
c_func
(paren
)paren
suffix:semicolon
id|sn_dma_flush
c_func
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
suffix:semicolon
)brace
r_return
id|ret
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
DECL|function|___sn_inw
id|___sn_inw
(paren
r_int
r_int
id|port
)paren
(brace
r_volatile
r_int
r_int
op_star
id|addr
suffix:semicolon
r_int
r_int
id|ret
op_assign
op_minus
l_int|1
suffix:semicolon
r_if
c_cond
(paren
(paren
id|addr
op_assign
id|sn_io_addr
c_func
(paren
id|port
)paren
)paren
)paren
(brace
id|ret
op_assign
op_star
id|addr
suffix:semicolon
id|__sn_mf_a
c_func
(paren
)paren
suffix:semicolon
id|sn_dma_flush
c_func
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
suffix:semicolon
)brace
r_return
id|ret
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
DECL|function|___sn_inl
id|___sn_inl
(paren
r_int
r_int
id|port
)paren
(brace
r_volatile
r_int
r_int
op_star
id|addr
suffix:semicolon
r_int
r_int
id|ret
op_assign
op_minus
l_int|1
suffix:semicolon
r_if
c_cond
(paren
(paren
id|addr
op_assign
id|sn_io_addr
c_func
(paren
id|port
)paren
)paren
)paren
(brace
id|ret
op_assign
op_star
id|addr
suffix:semicolon
id|__sn_mf_a
c_func
(paren
)paren
suffix:semicolon
id|sn_dma_flush
c_func
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
suffix:semicolon
)brace
r_return
id|ret
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|___sn_outb
id|___sn_outb
(paren
r_int
r_char
id|val
comma
r_int
r_int
id|port
)paren
(brace
r_volatile
r_int
r_char
op_star
id|addr
suffix:semicolon
r_if
c_cond
(paren
(paren
id|addr
op_assign
id|sn_io_addr
c_func
(paren
id|port
)paren
)paren
)paren
(brace
op_star
id|addr
op_assign
id|val
suffix:semicolon
id|sn_mmiob
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
r_static
r_inline
r_void
DECL|function|___sn_outw
id|___sn_outw
(paren
r_int
r_int
id|val
comma
r_int
r_int
id|port
)paren
(brace
r_volatile
r_int
r_int
op_star
id|addr
suffix:semicolon
r_if
c_cond
(paren
(paren
id|addr
op_assign
id|sn_io_addr
c_func
(paren
id|port
)paren
)paren
)paren
(brace
op_star
id|addr
op_assign
id|val
suffix:semicolon
id|sn_mmiob
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
r_static
r_inline
r_void
DECL|function|___sn_outl
id|___sn_outl
(paren
r_int
r_int
id|val
comma
r_int
r_int
id|port
)paren
(brace
r_volatile
r_int
r_int
op_star
id|addr
suffix:semicolon
r_if
c_cond
(paren
(paren
id|addr
op_assign
id|sn_io_addr
c_func
(paren
id|port
)paren
)paren
)paren
(brace
op_star
id|addr
op_assign
id|val
suffix:semicolon
id|sn_mmiob
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
multiline_comment|/*&n; * The following routines are SN Platform specific, called when &n; * a reference is made to readX/writeX set macros.  SN Platform &n; * readX set of macros ensures that Posted DMA writes on the &n; * Bridge is flushed.&n; * &n; * The routines should be self explainatory.&n; */
r_static
r_inline
r_int
r_char
DECL|function|___sn_readb
id|___sn_readb
(paren
r_void
op_star
id|addr
)paren
(brace
r_int
r_char
id|val
suffix:semicolon
id|val
op_assign
op_star
(paren
r_volatile
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|__sn_mf_a
c_func
(paren
)paren
suffix:semicolon
id|sn_dma_flush
c_func
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
DECL|function|___sn_readw
id|___sn_readw
(paren
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|val
suffix:semicolon
id|val
op_assign
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
id|__sn_mf_a
c_func
(paren
)paren
suffix:semicolon
id|sn_dma_flush
c_func
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
DECL|function|___sn_readl
id|___sn_readl
(paren
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|val
suffix:semicolon
id|val
op_assign
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
id|__sn_mf_a
c_func
(paren
)paren
suffix:semicolon
id|sn_dma_flush
c_func
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
DECL|function|___sn_readq
id|___sn_readq
(paren
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|val
suffix:semicolon
id|val
op_assign
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
id|__sn_mf_a
c_func
(paren
)paren
suffix:semicolon
id|sn_dma_flush
c_func
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
multiline_comment|/*&n; * For generic and SN2 kernels, we have a set of fast access&n; * PIO macros.&t;These macros are provided on SN Platform&n; * because the normal inX and readX macros perform an&n; * additional task of flushing Post DMA request on the Bridge.&n; *&n; * These routines should be self explainatory.&n; */
r_static
r_inline
r_int
r_int
DECL|function|sn_inb_fast
id|sn_inb_fast
(paren
r_int
r_int
id|port
)paren
(brace
r_volatile
r_int
r_char
op_star
id|addr
op_assign
(paren
r_int
r_char
op_star
)paren
id|port
suffix:semicolon
r_int
r_char
id|ret
suffix:semicolon
id|ret
op_assign
op_star
id|addr
suffix:semicolon
id|__sn_mf_a
c_func
(paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
DECL|function|sn_inw_fast
id|sn_inw_fast
(paren
r_int
r_int
id|port
)paren
(brace
r_volatile
r_int
r_int
op_star
id|addr
op_assign
(paren
r_int
r_int
op_star
)paren
id|port
suffix:semicolon
r_int
r_int
id|ret
suffix:semicolon
id|ret
op_assign
op_star
id|addr
suffix:semicolon
id|__sn_mf_a
c_func
(paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
DECL|function|sn_inl_fast
id|sn_inl_fast
(paren
r_int
r_int
id|port
)paren
(brace
r_volatile
r_int
r_int
op_star
id|addr
op_assign
(paren
r_int
r_int
op_star
)paren
id|port
suffix:semicolon
r_int
r_int
id|ret
suffix:semicolon
id|ret
op_assign
op_star
id|addr
suffix:semicolon
id|__sn_mf_a
c_func
(paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
r_static
r_inline
r_int
r_char
DECL|function|___sn_readb_relaxed
id|___sn_readb_relaxed
(paren
r_void
op_star
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
DECL|function|___sn_readw_relaxed
id|___sn_readw_relaxed
(paren
r_void
op_star
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
DECL|function|___sn_readl_relaxed
id|___sn_readl_relaxed
(paren
r_void
op_star
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
DECL|function|___sn_readq_relaxed
id|___sn_readq_relaxed
(paren
r_void
op_star
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
)brace
macro_line|#endif
eof
