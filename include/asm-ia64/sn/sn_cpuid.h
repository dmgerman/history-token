multiline_comment|/* &n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 2000 Silicon Graphics, Inc.&n; * Copyright (C) 2000 by Jack Steiner (steiner@sgi.com)&n; */
macro_line|#ifndef _ASM_IA64_SN_SN_CPUID_H
DECL|macro|_ASM_IA64_SN_SN_CPUID_H
mdefine_line|#define _ASM_IA64_SN_SN_CPUID_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;asm/sn/mmzone_sn1.h&gt;
multiline_comment|/*&n; * Functions for converting between cpuids, nodeids and NASIDs.&n; * &n; * These are for SGI platforms only.&n; *&n; */
multiline_comment|/*&n; * The following assumes the following mappings for LID register values:&n; *&n; *         LID&n; *&t;&t;31:24 - id   Contains the NASID&n; *&t;&t;23:16 - eid  Contains 0-3 to identify the cpu on the node&n; *&t;&t;&t;&t;bit 17 - synergy number&n; *&t;&t;&t;&t;bit 16 - FSB number &n; *&n; * &t;   SAPICID&n; *&t;&t;This is the same as 31:24 of LID&n; *&n; * The macros convert between cpuid &amp; slice/fsb/synergy/nasid/cnodeid.&n; * These terms are described below:&n; *&n; *&n; *          -----   -----           -----   -----       CPU&n; *          | 0 |   | 1 |           | 2 |   | 3 |       SLICE&n; *          -----   -----           -----   -----&n; *            |       |               |       |&n; *            |       |               |       |&n; *          0 |       | 1           0 |       | 1       FSB&n; *             -------                 -------  &n; *                |                       |&n; *                |                       |&n; *             -------                 -------&n; *             |     |                 |     |&n; *             |  0  |                 |  1  |         SYNERGY&n; *             |     |                 |     |&n; *             -------                 -------&n; *                |                       |&n; *                |                       |&n; *             -------------------------------&n; *             |                             |&n; *             |         BEDROCK             |        NASID   (0..127)&n; *             |                             |        CNODEID (0..numnodes-1)&n; *             |                             |&n; *             |                             |&n; *             -------------------------------&n; *                           |&n; *&n; */
DECL|macro|sapicid_to_nasid
mdefine_line|#define sapicid_to_nasid(sid)&t;&t;((sid) &gt;&gt; 8)
DECL|macro|sapicid_to_synergy
mdefine_line|#define sapicid_to_synergy(sid)&t;&t;(((sid) &gt;&gt; 1) &amp; 1)
DECL|macro|sapicid_to_fsb
mdefine_line|#define sapicid_to_fsb(sid)&t;&t;((sid) &amp; 1)
DECL|macro|sapicid_to_slice
mdefine_line|#define sapicid_to_slice(sid)&t;&t;((sid) &amp; 3)
multiline_comment|/*&n; * NOTE: id &amp; eid refer to Intels definitions of the LID register&n; *&t;(id = NASID, eid = slice)&n; * NOTE: on non-MP systems, only cpuid 0 exists&n; */
DECL|macro|id_eid_to_sapicid
mdefine_line|#define id_eid_to_sapicid(id,eid)       (((id)&lt;&lt;8) | (eid))
DECL|macro|id_eid_to_cpuid
mdefine_line|#define id_eid_to_cpuid(id,eid)         ((NASID_TO_CNODEID(id)&lt;&lt;2) | (eid))
multiline_comment|/*&n; * The following table/struct is for translating between sapicid and cpuids.&n; * It is also used for managing PTC coherency domains.&n; */
r_typedef
r_struct
(brace
DECL|member|domain
id|u8
id|domain
suffix:semicolon
DECL|member|reserved
id|u8
id|reserved
suffix:semicolon
DECL|member|sapicid
id|u16
id|sapicid
suffix:semicolon
DECL|typedef|sn_sapicid_info_t
)brace
id|sn_sapicid_info_t
suffix:semicolon
r_extern
id|sn_sapicid_info_t
id|sn_sapicid_info
(braket
)braket
suffix:semicolon
multiline_comment|/* indexed by cpuid */
multiline_comment|/*&n; * cpuid_to_spaicid  - Convert a cpuid to a SAPIC id of the cpu. &n; * The SAPIC id is the same as bits 31:16 of the LID register.&n; */
r_static
id|__inline__
r_int
DECL|function|cpuid_to_spaicid
id|cpuid_to_spaicid
c_func
(paren
r_int
id|cpuid
)paren
(brace
macro_line|#ifdef CONFIG_SMP
r_return
id|cpu_physical_id
c_func
(paren
id|cpuid
)paren
suffix:semicolon
macro_line|#else
r_return
(paren
(paren
id|ia64_get_lid
c_func
(paren
)paren
op_rshift
l_int|16
)paren
op_amp
l_int|0xffff
)paren
suffix:semicolon
macro_line|#endif
)brace
multiline_comment|/*&n; * cpuid_to_fsb_slot  - convert a cpuid to the fsb slot number that it is in.&n; *   (there are 2 cpus per FSB. This function returns 0 or 1)&n; */
r_static
id|__inline__
r_int
DECL|function|cpuid_to_fsb_slot
id|cpuid_to_fsb_slot
c_func
(paren
r_int
id|cpuid
)paren
(brace
r_return
id|sapicid_to_fsb
c_func
(paren
id|cpuid_to_spaicid
c_func
(paren
id|cpuid
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * cpuid_to_synergy  - convert a cpuid to the synergy that it resides on&n; *   (there are 2 synergies per node. Function returns 0 or 1 to&n; *    specify which synergy the cpu is on)&n; */
r_static
id|__inline__
r_int
DECL|function|cpuid_to_synergy
id|cpuid_to_synergy
c_func
(paren
r_int
id|cpuid
)paren
(brace
r_return
id|sapicid_to_synergy
c_func
(paren
id|cpuid_to_spaicid
c_func
(paren
id|cpuid
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * cpuid_to_slice  - convert a cpuid to the slice that it resides on&n; *  There are 4 cpus per node. This function returns 0 .. 3)&n; */
r_static
id|__inline__
r_int
DECL|function|cpuid_to_slice
id|cpuid_to_slice
c_func
(paren
r_int
id|cpuid
)paren
(brace
r_return
id|sapicid_to_slice
c_func
(paren
id|cpuid_to_spaicid
c_func
(paren
id|cpuid
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * cpuid_to_nasid  - convert a cpuid to the NASID that it resides on&n; */
r_static
id|__inline__
r_int
DECL|function|cpuid_to_nasid
id|cpuid_to_nasid
c_func
(paren
r_int
id|cpuid
)paren
(brace
r_return
id|sapicid_to_nasid
c_func
(paren
id|cpuid_to_spaicid
c_func
(paren
id|cpuid
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * cpuid_to_cnodeid  - convert a cpuid to the cnode that it resides on&n; */
r_static
id|__inline__
r_int
DECL|function|cpuid_to_cnodeid
id|cpuid_to_cnodeid
c_func
(paren
r_int
id|cpuid
)paren
(brace
r_return
id|nasid_map
(braket
id|cpuid_to_nasid
c_func
(paren
id|cpuid
)paren
)braket
suffix:semicolon
)brace
r_static
id|__inline__
r_int
DECL|function|cnodeid_to_nasid
id|cnodeid_to_nasid
c_func
(paren
r_int
id|cnodeid
)paren
(brace
r_int
id|i
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|MAXNASIDS
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|nasid_map
(braket
id|i
)braket
op_eq
id|cnodeid
)paren
(brace
r_return
id|i
suffix:semicolon
)brace
)brace
r_return
op_minus
l_int|1
suffix:semicolon
)brace
r_static
id|__inline__
r_int
DECL|function|cnode_slice_to_cpuid
id|cnode_slice_to_cpuid
c_func
(paren
r_int
id|cnodeid
comma
r_int
id|slice
)paren
(brace
r_return
id|id_eid_to_cpuid
c_func
(paren
id|cnodeid_to_nasid
c_func
(paren
id|cnodeid
)paren
comma
id|slice
)paren
suffix:semicolon
)brace
r_static
id|__inline__
r_int
DECL|function|cpuid_to_subnode
id|cpuid_to_subnode
c_func
(paren
r_int
id|cpuid
)paren
(brace
r_int
id|ret
op_assign
id|cpuid_to_slice
c_func
(paren
id|cpuid
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ret
OL
l_int|2
)paren
r_return
l_int|0
suffix:semicolon
r_else
r_return
l_int|1
suffix:semicolon
)brace
r_static
id|__inline__
r_int
DECL|function|cpuid_to_localslice
id|cpuid_to_localslice
c_func
(paren
r_int
id|cpuid
)paren
(brace
r_return
id|cpuid_to_slice
c_func
(paren
id|cpuid
)paren
op_amp
l_int|1
suffix:semicolon
)brace
macro_line|#endif /* _ASM_IA64_SN_SN_CPUID_H */
eof
