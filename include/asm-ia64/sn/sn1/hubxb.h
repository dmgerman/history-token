multiline_comment|/* $Id$&n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 1992 - 1997, 2000-2001 Silicon Graphics, Inc. All rights reserved.&n; */
macro_line|#ifndef _ASM_IA64_SN_SN1_HUBXB_H
DECL|macro|_ASM_IA64_SN_SN1_HUBXB_H
mdefine_line|#define _ASM_IA64_SN_SN1_HUBXB_H
multiline_comment|/************************************************************************&n; *                                                                      *&n; *      WARNING!!!  WARNING!!!  WARNING!!!  WARNING!!!  WARNING!!!      *&n; *                                                                      *&n; * This file is created by an automated script. Any (minimal) changes   *&n; * made manually to this  file should be made with care.                *&n; *                                                                      *&n; *               MAKE ALL ADDITIONS TO THE END OF THIS FILE             *&n; *                                                                      *&n; ************************************************************************/
DECL|macro|XB_PARMS
mdefine_line|#define    XB_PARMS                  0x00700000    /*&n;                                                    * Controls&n;                                                    * crossbar-wide&n;                                                    * parameters.&n;                                                    */
DECL|macro|XB_SLOW_GNT
mdefine_line|#define    XB_SLOW_GNT               0x00700008    /*&n;                                                    * Controls wavefront&n;                                                    * arbiter grant&n;                                                    * frequency, used to&n;                                                    * slow XB grants&n;                                                    */
DECL|macro|XB_SPEW_CONTROL
mdefine_line|#define    XB_SPEW_CONTROL           0x00700010    /*&n;                                                    * Controls spew&n;                                                    * settings (debug&n;                                                    * only).&n;                                                    */
DECL|macro|XB_IOQ_ARB_TRIGGER
mdefine_line|#define    XB_IOQ_ARB_TRIGGER        0x00700018    /*&n;                                                    * Controls IOQ&n;                                                    * trigger level&n;                                                    */
DECL|macro|XB_FIRST_ERROR
mdefine_line|#define    XB_FIRST_ERROR            0x00700090    /*&n;                                                    * Records the first&n;                                                    * crossbar error&n;                                                    * seen.&n;                                                    */
DECL|macro|XB_POQ0_ERROR
mdefine_line|#define    XB_POQ0_ERROR             0x00700020    /*&n;                                                    * POQ0 error&n;                                                    * register.&n;                                                    */
DECL|macro|XB_PIQ0_ERROR
mdefine_line|#define    XB_PIQ0_ERROR             0x00700028    /*&n;                                                    * PIQ0 error&n;                                                    * register.&n;                                                    */
DECL|macro|XB_POQ1_ERROR
mdefine_line|#define    XB_POQ1_ERROR             0x00700030    /*&n;                                                    * POQ1 error&n;                                                    * register.&n;                                                    */
DECL|macro|XB_PIQ1_ERROR
mdefine_line|#define    XB_PIQ1_ERROR             0x00700038    /*&n;                                                    * PIQ1 error&n;                                                    * register.&n;                                                    */
DECL|macro|XB_MP0_ERROR
mdefine_line|#define    XB_MP0_ERROR              0x00700040    /*&n;                                                    * MOQ for PI0 error&n;                                                    * register.&n;                                                    */
DECL|macro|XB_MP1_ERROR
mdefine_line|#define    XB_MP1_ERROR              0x00700048    /*&n;                                                    * MOQ for PI1 error&n;                                                    * register.&n;                                                    */
DECL|macro|XB_MMQ_ERROR
mdefine_line|#define    XB_MMQ_ERROR              0x00700050    /*&n;                                                    * MOQ for misc. (LB,&n;                                                    * NI, II) error&n;                                                    * register.&n;                                                    */
DECL|macro|XB_MIQ_ERROR
mdefine_line|#define    XB_MIQ_ERROR              0x00700058    /*&n;                                                    * MIQ error register,&n;                                                    * addtional MIQ&n;                                                    * errors are logged&n;                                                    * in MD &amp;quot;Input&n;                                                    * Error&n;                                                    * Registers&amp;quot;.&n;                                                    */
DECL|macro|XB_NOQ_ERROR
mdefine_line|#define    XB_NOQ_ERROR              0x00700060    /* NOQ error register.    */
DECL|macro|XB_NIQ_ERROR
mdefine_line|#define    XB_NIQ_ERROR              0x00700068    /* NIQ error register.    */
DECL|macro|XB_IOQ_ERROR
mdefine_line|#define    XB_IOQ_ERROR              0x00700070    /* IOQ error register.    */
DECL|macro|XB_IIQ_ERROR
mdefine_line|#define    XB_IIQ_ERROR              0x00700078    /* IIQ error register.    */
DECL|macro|XB_LOQ_ERROR
mdefine_line|#define    XB_LOQ_ERROR              0x00700080    /* LOQ error register.    */
DECL|macro|XB_LIQ_ERROR
mdefine_line|#define    XB_LIQ_ERROR              0x00700088    /* LIQ error register.    */
DECL|macro|XB_DEBUG_DATA_CTL
mdefine_line|#define    XB_DEBUG_DATA_CTL         0x00700098    /*&n;                                                    * Debug Datapath&n;                                                    * Select&n;                                                    */
DECL|macro|XB_DEBUG_ARB_CTL
mdefine_line|#define    XB_DEBUG_ARB_CTL          0x007000A0    /*&n;                                                    * XB master debug&n;                                                    * control&n;                                                    */
DECL|macro|XB_POQ0_ERROR_CLEAR
mdefine_line|#define    XB_POQ0_ERROR_CLEAR       0x00700120    /*&n;                                                    * Clears&n;                                                    * XB_POQ0_ERROR&n;                                                    * register.&n;                                                    */
DECL|macro|XB_PIQ0_ERROR_CLEAR
mdefine_line|#define    XB_PIQ0_ERROR_CLEAR       0x00700128    /*&n;                                                    * Clears&n;                                                    * XB_PIQ0_ERROR&n;                                                    * register.&n;                                                    */
DECL|macro|XB_POQ1_ERROR_CLEAR
mdefine_line|#define    XB_POQ1_ERROR_CLEAR       0x00700130    /*&n;                                                    * Clears&n;                                                    * XB_POQ1_ERROR&n;                                                    * register.&n;                                                    */
DECL|macro|XB_PIQ1_ERROR_CLEAR
mdefine_line|#define    XB_PIQ1_ERROR_CLEAR       0x00700138    /*&n;                                                    * Clears&n;                                                    * XB_PIQ1_ERROR&n;                                                    * register.&n;                                                    */
DECL|macro|XB_MP0_ERROR_CLEAR
mdefine_line|#define    XB_MP0_ERROR_CLEAR        0x00700140    /*&n;                                                    * Clears XB_MP0_ERROR&n;                                                    * register.&n;                                                    */
DECL|macro|XB_MP1_ERROR_CLEAR
mdefine_line|#define    XB_MP1_ERROR_CLEAR        0x00700148    /*&n;                                                    * Clears XB_MP1_ERROR&n;                                                    * register.&n;                                                    */
DECL|macro|XB_MMQ_ERROR_CLEAR
mdefine_line|#define    XB_MMQ_ERROR_CLEAR        0x00700150    /*&n;                                                    * Clears XB_MMQ_ERROR&n;                                                    * register.&n;                                                    */
DECL|macro|XB_XM_MIQ_ERROR_CLEAR
mdefine_line|#define    XB_XM_MIQ_ERROR_CLEAR     0x00700158    /*&n;                                                    * Clears XB_MIQ_ERROR&n;                                                    * register&n;                                                    */
DECL|macro|XB_NOQ_ERROR_CLEAR
mdefine_line|#define    XB_NOQ_ERROR_CLEAR        0x00700160    /*&n;                                                    * Clears XB_NOQ_ERROR&n;                                                    * register.&n;                                                    */
DECL|macro|XB_NIQ_ERROR_CLEAR
mdefine_line|#define    XB_NIQ_ERROR_CLEAR        0x00700168    /*&n;                                                    * Clears XB_NIQ_ERROR&n;                                                    * register.&n;                                                    */
DECL|macro|XB_IOQ_ERROR_CLEAR
mdefine_line|#define    XB_IOQ_ERROR_CLEAR        0x00700170    /*&n;                                                    * Clears XB_IOQ&n;                                                    * _ERROR register.&n;                                                    */
DECL|macro|XB_IIQ_ERROR_CLEAR
mdefine_line|#define    XB_IIQ_ERROR_CLEAR        0x00700178    /*&n;                                                    * Clears XB_IIQ&n;                                                    * _ERROR register.&n;                                                    */
DECL|macro|XB_LOQ_ERROR_CLEAR
mdefine_line|#define    XB_LOQ_ERROR_CLEAR        0x00700180    /*&n;                                                    * Clears XB_LOQ_ERROR&n;                                                    * register.&n;                                                    */
DECL|macro|XB_LIQ_ERROR_CLEAR
mdefine_line|#define    XB_LIQ_ERROR_CLEAR        0x00700188    /*&n;                                                    * Clears XB_LIQ_ERROR&n;                                                    * register.&n;                                                    */
DECL|macro|XB_FIRST_ERROR_CLEAR
mdefine_line|#define    XB_FIRST_ERROR_CLEAR      0x00700190    /*&n;                                                    * Clears&n;                                                    * XB_FIRST_ERROR&n;                                                    * register&n;                                                    */
macro_line|#ifndef __ASSEMBLY__
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Access to parameters which control various aspects of the           *&n; * crossbar&squot;s operation.                                                *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_parms_u
r_typedef
r_union
id|xb_parms_u
(brace
DECL|member|xb_parms_regval
id|bdrkreg_t
id|xb_parms_regval
suffix:semicolon
r_struct
(brace
DECL|member|p_byp_en
id|bdrkreg_t
id|p_byp_en
suffix:colon
l_int|1
suffix:semicolon
DECL|member|p_rsrvd_1
id|bdrkreg_t
id|p_rsrvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|p_age_wrap
id|bdrkreg_t
id|p_age_wrap
suffix:colon
l_int|8
suffix:semicolon
DECL|member|p_deadlock_to_wrap
id|bdrkreg_t
id|p_deadlock_to_wrap
suffix:colon
l_int|20
suffix:semicolon
DECL|member|p_tail_to_wrap
id|bdrkreg_t
id|p_tail_to_wrap
suffix:colon
l_int|20
suffix:semicolon
DECL|member|p_rsrvd
id|bdrkreg_t
id|p_rsrvd
suffix:colon
l_int|12
suffix:semicolon
DECL|member|xb_parms_fld_s
)brace
id|xb_parms_fld_s
suffix:semicolon
DECL|typedef|xb_parms_u_t
)brace
id|xb_parms_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_parms_u
r_typedef
r_union
id|xb_parms_u
(brace
DECL|member|xb_parms_regval
id|bdrkreg_t
id|xb_parms_regval
suffix:semicolon
r_struct
(brace
DECL|member|p_rsrvd
id|bdrkreg_t
id|p_rsrvd
suffix:colon
l_int|12
suffix:semicolon
DECL|member|p_tail_to_wrap
id|bdrkreg_t
id|p_tail_to_wrap
suffix:colon
l_int|20
suffix:semicolon
DECL|member|p_deadlock_to_wrap
id|bdrkreg_t
id|p_deadlock_to_wrap
suffix:colon
l_int|20
suffix:semicolon
DECL|member|p_age_wrap
id|bdrkreg_t
id|p_age_wrap
suffix:colon
l_int|8
suffix:semicolon
DECL|member|p_rsrvd_1
id|bdrkreg_t
id|p_rsrvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|p_byp_en
id|bdrkreg_t
id|p_byp_en
suffix:colon
l_int|1
suffix:semicolon
DECL|member|xb_parms_fld_s
)brace
id|xb_parms_fld_s
suffix:semicolon
DECL|typedef|xb_parms_u_t
)brace
id|xb_parms_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Sets the period of wavefront grants given to each unit. The         *&n; * register&squot;s value corresponds to the number of cycles between each    *&n; * wavefront grant opportunity given to the requesting unit. If set     *&n; * to 0xF, no grants are given to this unit. If set to 0xE, the unit    *&n; * is granted at the slowest rate (sometimes called &quot;molasses mode&quot;).   *&n; * This feature can be used to apply backpressure to a unit&squot;s output    *&n; * queue(s). The setting does not affect bypass grants.                 *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_slow_gnt_u
r_typedef
r_union
id|xb_slow_gnt_u
(brace
DECL|member|xb_slow_gnt_regval
id|bdrkreg_t
id|xb_slow_gnt_regval
suffix:semicolon
r_struct
(brace
DECL|member|sg_lb_slow_gnt
id|bdrkreg_t
id|sg_lb_slow_gnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|sg_ii_slow_gnt
id|bdrkreg_t
id|sg_ii_slow_gnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|sg_ni_slow_gnt
id|bdrkreg_t
id|sg_ni_slow_gnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|sg_mmq_slow_gnt
id|bdrkreg_t
id|sg_mmq_slow_gnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|sg_mp1_slow_gnt
id|bdrkreg_t
id|sg_mp1_slow_gnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|sg_mp0_slow_gnt
id|bdrkreg_t
id|sg_mp0_slow_gnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|sg_pi1_slow_gnt
id|bdrkreg_t
id|sg_pi1_slow_gnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|sg_pi0_slow_gnt
id|bdrkreg_t
id|sg_pi0_slow_gnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|sg_rsrvd
id|bdrkreg_t
id|sg_rsrvd
suffix:colon
l_int|32
suffix:semicolon
DECL|member|xb_slow_gnt_fld_s
)brace
id|xb_slow_gnt_fld_s
suffix:semicolon
DECL|typedef|xb_slow_gnt_u_t
)brace
id|xb_slow_gnt_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_slow_gnt_u
r_typedef
r_union
id|xb_slow_gnt_u
(brace
DECL|member|xb_slow_gnt_regval
id|bdrkreg_t
id|xb_slow_gnt_regval
suffix:semicolon
r_struct
(brace
DECL|member|sg_rsrvd
id|bdrkreg_t
id|sg_rsrvd
suffix:colon
l_int|32
suffix:semicolon
DECL|member|sg_pi0_slow_gnt
id|bdrkreg_t
id|sg_pi0_slow_gnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|sg_pi1_slow_gnt
id|bdrkreg_t
id|sg_pi1_slow_gnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|sg_mp0_slow_gnt
id|bdrkreg_t
id|sg_mp0_slow_gnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|sg_mp1_slow_gnt
id|bdrkreg_t
id|sg_mp1_slow_gnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|sg_mmq_slow_gnt
id|bdrkreg_t
id|sg_mmq_slow_gnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|sg_ni_slow_gnt
id|bdrkreg_t
id|sg_ni_slow_gnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|sg_ii_slow_gnt
id|bdrkreg_t
id|sg_ii_slow_gnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|sg_lb_slow_gnt
id|bdrkreg_t
id|sg_lb_slow_gnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|xb_slow_gnt_fld_s
)brace
id|xb_slow_gnt_fld_s
suffix:semicolon
DECL|typedef|xb_slow_gnt_u_t
)brace
id|xb_slow_gnt_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Enables snooping of internal crossbar traffic by spewing all        *&n; * traffic across a selected crossbar point to the PI1 port. Only one   *&n; * bit should be set at any one time, and any bit set will preclude     *&n; * using the P1 for anything but a debug connection.                    *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_spew_control_u
r_typedef
r_union
id|xb_spew_control_u
(brace
DECL|member|xb_spew_control_regval
id|bdrkreg_t
id|xb_spew_control_regval
suffix:semicolon
r_struct
(brace
DECL|member|sc_snoop_liq
id|bdrkreg_t
id|sc_snoop_liq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_iiq
id|bdrkreg_t
id|sc_snoop_iiq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_niq
id|bdrkreg_t
id|sc_snoop_niq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_miq
id|bdrkreg_t
id|sc_snoop_miq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_piq0
id|bdrkreg_t
id|sc_snoop_piq0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_loq
id|bdrkreg_t
id|sc_snoop_loq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_ioq
id|bdrkreg_t
id|sc_snoop_ioq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_noq
id|bdrkreg_t
id|sc_snoop_noq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_mmq
id|bdrkreg_t
id|sc_snoop_mmq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_mp0
id|bdrkreg_t
id|sc_snoop_mp0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_poq0
id|bdrkreg_t
id|sc_snoop_poq0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_rsrvd
id|bdrkreg_t
id|sc_rsrvd
suffix:colon
l_int|53
suffix:semicolon
DECL|member|xb_spew_control_fld_s
)brace
id|xb_spew_control_fld_s
suffix:semicolon
DECL|typedef|xb_spew_control_u_t
)brace
id|xb_spew_control_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_spew_control_u
r_typedef
r_union
id|xb_spew_control_u
(brace
DECL|member|xb_spew_control_regval
id|bdrkreg_t
id|xb_spew_control_regval
suffix:semicolon
r_struct
(brace
DECL|member|sc_rsrvd
id|bdrkreg_t
id|sc_rsrvd
suffix:colon
l_int|53
suffix:semicolon
DECL|member|sc_snoop_poq0
id|bdrkreg_t
id|sc_snoop_poq0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_mp0
id|bdrkreg_t
id|sc_snoop_mp0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_mmq
id|bdrkreg_t
id|sc_snoop_mmq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_noq
id|bdrkreg_t
id|sc_snoop_noq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_ioq
id|bdrkreg_t
id|sc_snoop_ioq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_loq
id|bdrkreg_t
id|sc_snoop_loq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_piq0
id|bdrkreg_t
id|sc_snoop_piq0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_miq
id|bdrkreg_t
id|sc_snoop_miq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_niq
id|bdrkreg_t
id|sc_snoop_niq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_iiq
id|bdrkreg_t
id|sc_snoop_iiq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|sc_snoop_liq
id|bdrkreg_t
id|sc_snoop_liq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|xb_spew_control_fld_s
)brace
id|xb_spew_control_fld_s
suffix:semicolon
DECL|typedef|xb_spew_control_u_t
)brace
id|xb_spew_control_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Number of clocks the IOQ will wait before beginning XB              *&n; * arbitration. This is set so that the slower IOQ data rate can        *&n; * catch up up with the XB data rate in the IOQ buffer.                 *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_ioq_arb_trigger_u
r_typedef
r_union
id|xb_ioq_arb_trigger_u
(brace
DECL|member|xb_ioq_arb_trigger_regval
id|bdrkreg_t
id|xb_ioq_arb_trigger_regval
suffix:semicolon
r_struct
(brace
DECL|member|iat_ioq_arb_trigger
id|bdrkreg_t
id|iat_ioq_arb_trigger
suffix:colon
l_int|4
suffix:semicolon
DECL|member|iat_rsrvd
id|bdrkreg_t
id|iat_rsrvd
suffix:colon
l_int|60
suffix:semicolon
DECL|member|xb_ioq_arb_trigger_fld_s
)brace
id|xb_ioq_arb_trigger_fld_s
suffix:semicolon
DECL|typedef|xb_ioq_arb_trigger_u_t
)brace
id|xb_ioq_arb_trigger_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_ioq_arb_trigger_u
r_typedef
r_union
id|xb_ioq_arb_trigger_u
(brace
DECL|member|xb_ioq_arb_trigger_regval
id|bdrkreg_t
id|xb_ioq_arb_trigger_regval
suffix:semicolon
r_struct
(brace
DECL|member|iat_rsrvd
id|bdrkreg_t
id|iat_rsrvd
suffix:colon
l_int|60
suffix:semicolon
DECL|member|iat_ioq_arb_trigger
id|bdrkreg_t
id|iat_ioq_arb_trigger
suffix:colon
l_int|4
suffix:semicolon
DECL|member|xb_ioq_arb_trigger_fld_s
)brace
id|xb_ioq_arb_trigger_fld_s
suffix:semicolon
DECL|typedef|xb_ioq_arb_trigger_u_t
)brace
id|xb_ioq_arb_trigger_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Records errors seen by POQ0.Can be written to test software, will   *&n; * cause an interrupt.                                                  *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_poq0_error_u
r_typedef
r_union
id|xb_poq0_error_u
(brace
DECL|member|xb_poq0_error_regval
id|bdrkreg_t
id|xb_poq0_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|pe_invalid_xsel
id|bdrkreg_t
id|pe_invalid_xsel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_rsrvd_3
id|bdrkreg_t
id|pe_rsrvd_3
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_overflow
id|bdrkreg_t
id|pe_overflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_rsrvd_2
id|bdrkreg_t
id|pe_rsrvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_underflow
id|bdrkreg_t
id|pe_underflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_rsrvd_1
id|bdrkreg_t
id|pe_rsrvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_tail_timeout
id|bdrkreg_t
id|pe_tail_timeout
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_unused
id|bdrkreg_t
id|pe_unused
suffix:colon
l_int|6
suffix:semicolon
DECL|member|pe_rsrvd
id|bdrkreg_t
id|pe_rsrvd
suffix:colon
l_int|44
suffix:semicolon
DECL|member|xb_poq0_error_fld_s
)brace
id|xb_poq0_error_fld_s
suffix:semicolon
DECL|typedef|xb_poq0_error_u_t
)brace
id|xb_poq0_error_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_poq0_error_u
r_typedef
r_union
id|xb_poq0_error_u
(brace
DECL|member|xb_poq0_error_regval
id|bdrkreg_t
id|xb_poq0_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|pe_rsrvd
id|bdrkreg_t
id|pe_rsrvd
suffix:colon
l_int|44
suffix:semicolon
DECL|member|pe_unused
id|bdrkreg_t
id|pe_unused
suffix:colon
l_int|6
suffix:semicolon
DECL|member|pe_tail_timeout
id|bdrkreg_t
id|pe_tail_timeout
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_rsrvd_1
id|bdrkreg_t
id|pe_rsrvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_underflow
id|bdrkreg_t
id|pe_underflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_rsrvd_2
id|bdrkreg_t
id|pe_rsrvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_overflow
id|bdrkreg_t
id|pe_overflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_rsrvd_3
id|bdrkreg_t
id|pe_rsrvd_3
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_invalid_xsel
id|bdrkreg_t
id|pe_invalid_xsel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|xb_poq0_error_fld_s
)brace
id|xb_poq0_error_fld_s
suffix:semicolon
DECL|typedef|xb_poq0_error_u_t
)brace
id|xb_poq0_error_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Records errors seen by PIQ0. Note that the PIQ/PI interface         *&n; * precludes PIQ underflow.                                             *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_piq0_error_u
r_typedef
r_union
id|xb_piq0_error_u
(brace
DECL|member|xb_piq0_error_regval
id|bdrkreg_t
id|xb_piq0_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|pe_overflow
id|bdrkreg_t
id|pe_overflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_rsrvd_1
id|bdrkreg_t
id|pe_rsrvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_deadlock_timeout
id|bdrkreg_t
id|pe_deadlock_timeout
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_rsrvd
id|bdrkreg_t
id|pe_rsrvd
suffix:colon
l_int|58
suffix:semicolon
DECL|member|xb_piq0_error_fld_s
)brace
id|xb_piq0_error_fld_s
suffix:semicolon
DECL|typedef|xb_piq0_error_u_t
)brace
id|xb_piq0_error_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_piq0_error_u
r_typedef
r_union
id|xb_piq0_error_u
(brace
DECL|member|xb_piq0_error_regval
id|bdrkreg_t
id|xb_piq0_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|pe_rsrvd
id|bdrkreg_t
id|pe_rsrvd
suffix:colon
l_int|58
suffix:semicolon
DECL|member|pe_deadlock_timeout
id|bdrkreg_t
id|pe_deadlock_timeout
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_rsrvd_1
id|bdrkreg_t
id|pe_rsrvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_overflow
id|bdrkreg_t
id|pe_overflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|xb_piq0_error_fld_s
)brace
id|xb_piq0_error_fld_s
suffix:semicolon
DECL|typedef|xb_piq0_error_u_t
)brace
id|xb_piq0_error_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Records errors seen by MP0 queue (the MOQ for processor 0). Since   *&n; * the xselect is decoded on the MD/MOQ interface, no invalid xselect   *&n; * errors are possible.                                                 *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_mp0_error_u
r_typedef
r_union
id|xb_mp0_error_u
(brace
DECL|member|xb_mp0_error_regval
id|bdrkreg_t
id|xb_mp0_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|me_rsrvd_3
id|bdrkreg_t
id|me_rsrvd_3
suffix:colon
l_int|4
suffix:semicolon
DECL|member|me_overflow
id|bdrkreg_t
id|me_overflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_rsrvd_2
id|bdrkreg_t
id|me_rsrvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_underflow
id|bdrkreg_t
id|me_underflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_rsrvd_1
id|bdrkreg_t
id|me_rsrvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_tail_timeout
id|bdrkreg_t
id|me_tail_timeout
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_rsrvd
id|bdrkreg_t
id|me_rsrvd
suffix:colon
l_int|50
suffix:semicolon
DECL|member|xb_mp0_error_fld_s
)brace
id|xb_mp0_error_fld_s
suffix:semicolon
DECL|typedef|xb_mp0_error_u_t
)brace
id|xb_mp0_error_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_mp0_error_u
r_typedef
r_union
id|xb_mp0_error_u
(brace
DECL|member|xb_mp0_error_regval
id|bdrkreg_t
id|xb_mp0_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|me_rsrvd
id|bdrkreg_t
id|me_rsrvd
suffix:colon
l_int|50
suffix:semicolon
DECL|member|me_tail_timeout
id|bdrkreg_t
id|me_tail_timeout
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_rsrvd_1
id|bdrkreg_t
id|me_rsrvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_underflow
id|bdrkreg_t
id|me_underflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_rsrvd_2
id|bdrkreg_t
id|me_rsrvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_overflow
id|bdrkreg_t
id|me_overflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_rsrvd_3
id|bdrkreg_t
id|me_rsrvd_3
suffix:colon
l_int|4
suffix:semicolon
DECL|member|xb_mp0_error_fld_s
)brace
id|xb_mp0_error_fld_s
suffix:semicolon
DECL|typedef|xb_mp0_error_u_t
)brace
id|xb_mp0_error_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Records errors seen by MIQ.                                         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_miq_error_u
r_typedef
r_union
id|xb_miq_error_u
(brace
DECL|member|xb_miq_error_regval
id|bdrkreg_t
id|xb_miq_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|me_rsrvd_1
id|bdrkreg_t
id|me_rsrvd_1
suffix:colon
l_int|4
suffix:semicolon
DECL|member|me_deadlock_timeout
id|bdrkreg_t
id|me_deadlock_timeout
suffix:colon
l_int|4
suffix:semicolon
DECL|member|me_rsrvd
id|bdrkreg_t
id|me_rsrvd
suffix:colon
l_int|56
suffix:semicolon
DECL|member|xb_miq_error_fld_s
)brace
id|xb_miq_error_fld_s
suffix:semicolon
DECL|typedef|xb_miq_error_u_t
)brace
id|xb_miq_error_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_miq_error_u
r_typedef
r_union
id|xb_miq_error_u
(brace
DECL|member|xb_miq_error_regval
id|bdrkreg_t
id|xb_miq_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|me_rsrvd
id|bdrkreg_t
id|me_rsrvd
suffix:colon
l_int|56
suffix:semicolon
DECL|member|me_deadlock_timeout
id|bdrkreg_t
id|me_deadlock_timeout
suffix:colon
l_int|4
suffix:semicolon
DECL|member|me_rsrvd_1
id|bdrkreg_t
id|me_rsrvd_1
suffix:colon
l_int|4
suffix:semicolon
DECL|member|xb_miq_error_fld_s
)brace
id|xb_miq_error_fld_s
suffix:semicolon
DECL|typedef|xb_miq_error_u_t
)brace
id|xb_miq_error_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Records errors seen by NOQ.                                         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_noq_error_u
r_typedef
r_union
id|xb_noq_error_u
(brace
DECL|member|xb_noq_error_regval
id|bdrkreg_t
id|xb_noq_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|ne_rsvd
id|bdrkreg_t
id|ne_rsvd
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ne_overflow
id|bdrkreg_t
id|ne_overflow
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ne_underflow
id|bdrkreg_t
id|ne_underflow
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ne_tail_timeout
id|bdrkreg_t
id|ne_tail_timeout
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ne_rsrvd
id|bdrkreg_t
id|ne_rsrvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|xb_noq_error_fld_s
)brace
id|xb_noq_error_fld_s
suffix:semicolon
DECL|typedef|xb_noq_error_u_t
)brace
id|xb_noq_error_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_noq_error_u
r_typedef
r_union
id|xb_noq_error_u
(brace
DECL|member|xb_noq_error_regval
id|bdrkreg_t
id|xb_noq_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|ne_rsrvd
id|bdrkreg_t
id|ne_rsrvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|ne_tail_timeout
id|bdrkreg_t
id|ne_tail_timeout
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ne_underflow
id|bdrkreg_t
id|ne_underflow
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ne_overflow
id|bdrkreg_t
id|ne_overflow
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ne_rsvd
id|bdrkreg_t
id|ne_rsvd
suffix:colon
l_int|4
suffix:semicolon
DECL|member|xb_noq_error_fld_s
)brace
id|xb_noq_error_fld_s
suffix:semicolon
DECL|typedef|xb_noq_error_u_t
)brace
id|xb_noq_error_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Records errors seen by LOQ.                                         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_loq_error_u
r_typedef
r_union
id|xb_loq_error_u
(brace
DECL|member|xb_loq_error_regval
id|bdrkreg_t
id|xb_loq_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|le_invalid_xsel
id|bdrkreg_t
id|le_invalid_xsel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|le_rsrvd_1
id|bdrkreg_t
id|le_rsrvd_1
suffix:colon
l_int|6
suffix:semicolon
DECL|member|le_underflow
id|bdrkreg_t
id|le_underflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|le_rsvd
id|bdrkreg_t
id|le_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|le_tail_timeout
id|bdrkreg_t
id|le_tail_timeout
suffix:colon
l_int|2
suffix:semicolon
DECL|member|le_rsrvd
id|bdrkreg_t
id|le_rsrvd
suffix:colon
l_int|50
suffix:semicolon
DECL|member|xb_loq_error_fld_s
)brace
id|xb_loq_error_fld_s
suffix:semicolon
DECL|typedef|xb_loq_error_u_t
)brace
id|xb_loq_error_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_loq_error_u
r_typedef
r_union
id|xb_loq_error_u
(brace
DECL|member|xb_loq_error_regval
id|bdrkreg_t
id|xb_loq_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|le_rsrvd
id|bdrkreg_t
id|le_rsrvd
suffix:colon
l_int|50
suffix:semicolon
DECL|member|le_tail_timeout
id|bdrkreg_t
id|le_tail_timeout
suffix:colon
l_int|2
suffix:semicolon
DECL|member|le_rsvd
id|bdrkreg_t
id|le_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|le_underflow
id|bdrkreg_t
id|le_underflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|le_rsrvd_1
id|bdrkreg_t
id|le_rsrvd_1
suffix:colon
l_int|6
suffix:semicolon
DECL|member|le_invalid_xsel
id|bdrkreg_t
id|le_invalid_xsel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|xb_loq_error_fld_s
)brace
id|xb_loq_error_fld_s
suffix:semicolon
DECL|typedef|xb_loq_error_u_t
)brace
id|xb_loq_error_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Records errors seen by LIQ. Note that the LIQ only records errors   *&n; * for the request channel. The reply channel can never deadlock or     *&n; * overflow because it does not have hardware flow control.             *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_liq_error_u
r_typedef
r_union
id|xb_liq_error_u
(brace
DECL|member|xb_liq_error_regval
id|bdrkreg_t
id|xb_liq_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|le_overflow
id|bdrkreg_t
id|le_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|le_rsrvd_1
id|bdrkreg_t
id|le_rsrvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|le_deadlock_timeout
id|bdrkreg_t
id|le_deadlock_timeout
suffix:colon
l_int|1
suffix:semicolon
DECL|member|le_rsrvd
id|bdrkreg_t
id|le_rsrvd
suffix:colon
l_int|59
suffix:semicolon
DECL|member|xb_liq_error_fld_s
)brace
id|xb_liq_error_fld_s
suffix:semicolon
DECL|typedef|xb_liq_error_u_t
)brace
id|xb_liq_error_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_liq_error_u
r_typedef
r_union
id|xb_liq_error_u
(brace
DECL|member|xb_liq_error_regval
id|bdrkreg_t
id|xb_liq_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|le_rsrvd
id|bdrkreg_t
id|le_rsrvd
suffix:colon
l_int|59
suffix:semicolon
DECL|member|le_deadlock_timeout
id|bdrkreg_t
id|le_deadlock_timeout
suffix:colon
l_int|1
suffix:semicolon
DECL|member|le_rsrvd_1
id|bdrkreg_t
id|le_rsrvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|le_overflow
id|bdrkreg_t
id|le_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|xb_liq_error_fld_s
)brace
id|xb_liq_error_fld_s
suffix:semicolon
DECL|typedef|xb_liq_error_u_t
)brace
id|xb_liq_error_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  First error is latched whenever the Valid bit is clear and an       *&n; * error occurs. Any valid bit on in this register causes an            *&n; * interrupt to PI0 and PI1. This interrupt bit will persist until      *&n; * the specific error register to capture the error is cleared, then    *&n; * the FIRST_ERROR register is cleared (in that oder.) The              *&n; * FIRST_ERROR register is not writable, but will be set when any of    *&n; * the corresponding error registers are written by software.           *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_first_error_u
r_typedef
r_union
id|xb_first_error_u
(brace
DECL|member|xb_first_error_regval
id|bdrkreg_t
id|xb_first_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|fe_type
id|bdrkreg_t
id|fe_type
suffix:colon
l_int|4
suffix:semicolon
DECL|member|fe_channel
id|bdrkreg_t
id|fe_channel
suffix:colon
l_int|4
suffix:semicolon
DECL|member|fe_source
id|bdrkreg_t
id|fe_source
suffix:colon
l_int|4
suffix:semicolon
DECL|member|fe_valid
id|bdrkreg_t
id|fe_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|fe_rsrvd
id|bdrkreg_t
id|fe_rsrvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|xb_first_error_fld_s
)brace
id|xb_first_error_fld_s
suffix:semicolon
DECL|typedef|xb_first_error_u_t
)brace
id|xb_first_error_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_first_error_u
r_typedef
r_union
id|xb_first_error_u
(brace
DECL|member|xb_first_error_regval
id|bdrkreg_t
id|xb_first_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|fe_rsrvd
id|bdrkreg_t
id|fe_rsrvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|fe_valid
id|bdrkreg_t
id|fe_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|fe_source
id|bdrkreg_t
id|fe_source
suffix:colon
l_int|4
suffix:semicolon
DECL|member|fe_channel
id|bdrkreg_t
id|fe_channel
suffix:colon
l_int|4
suffix:semicolon
DECL|member|fe_type
id|bdrkreg_t
id|fe_type
suffix:colon
l_int|4
suffix:semicolon
DECL|member|xb_first_error_fld_s
)brace
id|xb_first_error_fld_s
suffix:semicolon
DECL|typedef|xb_first_error_u_t
)brace
id|xb_first_error_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Controls DEBUG_DATA mux setting. Allows user to watch the output    *&n; * of any OQ or input of any IQ on the DEBUG port. Note that bits       *&n; * 13:0 are one-hot. If more than one bit is set in [13:0], the debug   *&n; * output is undefined. Details on the debug output lines can be        *&n; * found in the XB chapter of the Bedrock Interface Specification.      *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_debug_data_ctl_u
r_typedef
r_union
id|xb_debug_data_ctl_u
(brace
DECL|member|xb_debug_data_ctl_regval
id|bdrkreg_t
id|xb_debug_data_ctl_regval
suffix:semicolon
r_struct
(brace
DECL|member|ddc_observe_liq_traffic
id|bdrkreg_t
id|ddc_observe_liq_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_iiq_traffic
id|bdrkreg_t
id|ddc_observe_iiq_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_niq_traffic
id|bdrkreg_t
id|ddc_observe_niq_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_miq_traffic
id|bdrkreg_t
id|ddc_observe_miq_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_piq1_traffic
id|bdrkreg_t
id|ddc_observe_piq1_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_piq0_traffic
id|bdrkreg_t
id|ddc_observe_piq0_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_loq_traffic
id|bdrkreg_t
id|ddc_observe_loq_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_ioq_traffic
id|bdrkreg_t
id|ddc_observe_ioq_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_noq_traffic
id|bdrkreg_t
id|ddc_observe_noq_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_mp1_traffic
id|bdrkreg_t
id|ddc_observe_mp1_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_mp0_traffic
id|bdrkreg_t
id|ddc_observe_mp0_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_mmq_traffic
id|bdrkreg_t
id|ddc_observe_mmq_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_poq1_traffic
id|bdrkreg_t
id|ddc_observe_poq1_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_poq0_traffic
id|bdrkreg_t
id|ddc_observe_poq0_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_source_field
id|bdrkreg_t
id|ddc_observe_source_field
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_lodata
id|bdrkreg_t
id|ddc_observe_lodata
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_rsrvd
id|bdrkreg_t
id|ddc_rsrvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|xb_debug_data_ctl_fld_s
)brace
id|xb_debug_data_ctl_fld_s
suffix:semicolon
DECL|typedef|xb_debug_data_ctl_u_t
)brace
id|xb_debug_data_ctl_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_debug_data_ctl_u
r_typedef
r_union
id|xb_debug_data_ctl_u
(brace
DECL|member|xb_debug_data_ctl_regval
id|bdrkreg_t
id|xb_debug_data_ctl_regval
suffix:semicolon
r_struct
(brace
DECL|member|ddc_rsrvd
id|bdrkreg_t
id|ddc_rsrvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|ddc_observe_lodata
id|bdrkreg_t
id|ddc_observe_lodata
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_source_field
id|bdrkreg_t
id|ddc_observe_source_field
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_poq0_traffic
id|bdrkreg_t
id|ddc_observe_poq0_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_poq1_traffic
id|bdrkreg_t
id|ddc_observe_poq1_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_mmq_traffic
id|bdrkreg_t
id|ddc_observe_mmq_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_mp0_traffic
id|bdrkreg_t
id|ddc_observe_mp0_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_mp1_traffic
id|bdrkreg_t
id|ddc_observe_mp1_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_noq_traffic
id|bdrkreg_t
id|ddc_observe_noq_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_ioq_traffic
id|bdrkreg_t
id|ddc_observe_ioq_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_loq_traffic
id|bdrkreg_t
id|ddc_observe_loq_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_piq0_traffic
id|bdrkreg_t
id|ddc_observe_piq0_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_piq1_traffic
id|bdrkreg_t
id|ddc_observe_piq1_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_miq_traffic
id|bdrkreg_t
id|ddc_observe_miq_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_niq_traffic
id|bdrkreg_t
id|ddc_observe_niq_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_iiq_traffic
id|bdrkreg_t
id|ddc_observe_iiq_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ddc_observe_liq_traffic
id|bdrkreg_t
id|ddc_observe_liq_traffic
suffix:colon
l_int|1
suffix:semicolon
DECL|member|xb_debug_data_ctl_fld_s
)brace
id|xb_debug_data_ctl_fld_s
suffix:semicolon
DECL|typedef|xb_debug_data_ctl_u_t
)brace
id|xb_debug_data_ctl_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Controls debug mux setting for XB Input/Output Queues and           *&n; * Arbiter. Can select one of the following values. Details on the      *&n; * debug output lines can be found in the XB chapter of the Bedrock     *&n; * Interface Specification.                                             *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_debug_arb_ctl_u
r_typedef
r_union
id|xb_debug_arb_ctl_u
(brace
DECL|member|xb_debug_arb_ctl_regval
id|bdrkreg_t
id|xb_debug_arb_ctl_regval
suffix:semicolon
r_struct
(brace
DECL|member|dac_xb_debug_select
id|bdrkreg_t
id|dac_xb_debug_select
suffix:colon
l_int|3
suffix:semicolon
DECL|member|dac_rsrvd
id|bdrkreg_t
id|dac_rsrvd
suffix:colon
l_int|61
suffix:semicolon
DECL|member|xb_debug_arb_ctl_fld_s
)brace
id|xb_debug_arb_ctl_fld_s
suffix:semicolon
DECL|typedef|xb_debug_arb_ctl_u_t
)brace
id|xb_debug_arb_ctl_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_debug_arb_ctl_u
r_typedef
r_union
id|xb_debug_arb_ctl_u
(brace
DECL|member|xb_debug_arb_ctl_regval
id|bdrkreg_t
id|xb_debug_arb_ctl_regval
suffix:semicolon
r_struct
(brace
DECL|member|dac_rsrvd
id|bdrkreg_t
id|dac_rsrvd
suffix:colon
l_int|61
suffix:semicolon
DECL|member|dac_xb_debug_select
id|bdrkreg_t
id|dac_xb_debug_select
suffix:colon
l_int|3
suffix:semicolon
DECL|member|xb_debug_arb_ctl_fld_s
)brace
id|xb_debug_arb_ctl_fld_s
suffix:semicolon
DECL|typedef|xb_debug_arb_ctl_u_t
)brace
id|xb_debug_arb_ctl_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Records errors seen by POQ0.Can be written to test software, will   *&n; * cause an interrupt.                                                  *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_poq0_error_clear_u
r_typedef
r_union
id|xb_poq0_error_clear_u
(brace
DECL|member|xb_poq0_error_clear_regval
id|bdrkreg_t
id|xb_poq0_error_clear_regval
suffix:semicolon
r_struct
(brace
DECL|member|pec_invalid_xsel
id|bdrkreg_t
id|pec_invalid_xsel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_rsrvd_3
id|bdrkreg_t
id|pec_rsrvd_3
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_overflow
id|bdrkreg_t
id|pec_overflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_rsrvd_2
id|bdrkreg_t
id|pec_rsrvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_underflow
id|bdrkreg_t
id|pec_underflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_rsrvd_1
id|bdrkreg_t
id|pec_rsrvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_tail_timeout
id|bdrkreg_t
id|pec_tail_timeout
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_unused
id|bdrkreg_t
id|pec_unused
suffix:colon
l_int|6
suffix:semicolon
DECL|member|pec_rsrvd
id|bdrkreg_t
id|pec_rsrvd
suffix:colon
l_int|44
suffix:semicolon
DECL|member|xb_poq0_error_clear_fld_s
)brace
id|xb_poq0_error_clear_fld_s
suffix:semicolon
DECL|typedef|xb_poq0_error_clear_u_t
)brace
id|xb_poq0_error_clear_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_poq0_error_clear_u
r_typedef
r_union
id|xb_poq0_error_clear_u
(brace
DECL|member|xb_poq0_error_clear_regval
id|bdrkreg_t
id|xb_poq0_error_clear_regval
suffix:semicolon
r_struct
(brace
DECL|member|pec_rsrvd
id|bdrkreg_t
id|pec_rsrvd
suffix:colon
l_int|44
suffix:semicolon
DECL|member|pec_unused
id|bdrkreg_t
id|pec_unused
suffix:colon
l_int|6
suffix:semicolon
DECL|member|pec_tail_timeout
id|bdrkreg_t
id|pec_tail_timeout
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_rsrvd_1
id|bdrkreg_t
id|pec_rsrvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_underflow
id|bdrkreg_t
id|pec_underflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_rsrvd_2
id|bdrkreg_t
id|pec_rsrvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_overflow
id|bdrkreg_t
id|pec_overflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_rsrvd_3
id|bdrkreg_t
id|pec_rsrvd_3
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_invalid_xsel
id|bdrkreg_t
id|pec_invalid_xsel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|xb_poq0_error_clear_fld_s
)brace
id|xb_poq0_error_clear_fld_s
suffix:semicolon
DECL|typedef|xb_poq0_error_clear_u_t
)brace
id|xb_poq0_error_clear_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Records errors seen by PIQ0. Note that the PIQ/PI interface         *&n; * precludes PIQ underflow.                                             *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_piq0_error_clear_u
r_typedef
r_union
id|xb_piq0_error_clear_u
(brace
DECL|member|xb_piq0_error_clear_regval
id|bdrkreg_t
id|xb_piq0_error_clear_regval
suffix:semicolon
r_struct
(brace
DECL|member|pec_overflow
id|bdrkreg_t
id|pec_overflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_rsrvd_1
id|bdrkreg_t
id|pec_rsrvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_deadlock_timeout
id|bdrkreg_t
id|pec_deadlock_timeout
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_rsrvd
id|bdrkreg_t
id|pec_rsrvd
suffix:colon
l_int|58
suffix:semicolon
DECL|member|xb_piq0_error_clear_fld_s
)brace
id|xb_piq0_error_clear_fld_s
suffix:semicolon
DECL|typedef|xb_piq0_error_clear_u_t
)brace
id|xb_piq0_error_clear_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_piq0_error_clear_u
r_typedef
r_union
id|xb_piq0_error_clear_u
(brace
DECL|member|xb_piq0_error_clear_regval
id|bdrkreg_t
id|xb_piq0_error_clear_regval
suffix:semicolon
r_struct
(brace
DECL|member|pec_rsrvd
id|bdrkreg_t
id|pec_rsrvd
suffix:colon
l_int|58
suffix:semicolon
DECL|member|pec_deadlock_timeout
id|bdrkreg_t
id|pec_deadlock_timeout
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_rsrvd_1
id|bdrkreg_t
id|pec_rsrvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_overflow
id|bdrkreg_t
id|pec_overflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|xb_piq0_error_clear_fld_s
)brace
id|xb_piq0_error_clear_fld_s
suffix:semicolon
DECL|typedef|xb_piq0_error_clear_u_t
)brace
id|xb_piq0_error_clear_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Records errors seen by MP0 queue (the MOQ for processor 0). Since   *&n; * the xselect is decoded on the MD/MOQ interface, no invalid xselect   *&n; * errors are possible.                                                 *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_mp0_error_clear_u
r_typedef
r_union
id|xb_mp0_error_clear_u
(brace
DECL|member|xb_mp0_error_clear_regval
id|bdrkreg_t
id|xb_mp0_error_clear_regval
suffix:semicolon
r_struct
(brace
DECL|member|mec_rsrvd_3
id|bdrkreg_t
id|mec_rsrvd_3
suffix:colon
l_int|4
suffix:semicolon
DECL|member|mec_overflow
id|bdrkreg_t
id|mec_overflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_rsrvd_2
id|bdrkreg_t
id|mec_rsrvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_underflow
id|bdrkreg_t
id|mec_underflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_rsrvd_1
id|bdrkreg_t
id|mec_rsrvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_tail_timeout
id|bdrkreg_t
id|mec_tail_timeout
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_rsrvd
id|bdrkreg_t
id|mec_rsrvd
suffix:colon
l_int|50
suffix:semicolon
DECL|member|xb_mp0_error_clear_fld_s
)brace
id|xb_mp0_error_clear_fld_s
suffix:semicolon
DECL|typedef|xb_mp0_error_clear_u_t
)brace
id|xb_mp0_error_clear_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_mp0_error_clear_u
r_typedef
r_union
id|xb_mp0_error_clear_u
(brace
DECL|member|xb_mp0_error_clear_regval
id|bdrkreg_t
id|xb_mp0_error_clear_regval
suffix:semicolon
r_struct
(brace
DECL|member|mec_rsrvd
id|bdrkreg_t
id|mec_rsrvd
suffix:colon
l_int|50
suffix:semicolon
DECL|member|mec_tail_timeout
id|bdrkreg_t
id|mec_tail_timeout
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_rsrvd_1
id|bdrkreg_t
id|mec_rsrvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_underflow
id|bdrkreg_t
id|mec_underflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_rsrvd_2
id|bdrkreg_t
id|mec_rsrvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_overflow
id|bdrkreg_t
id|mec_overflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_rsrvd_3
id|bdrkreg_t
id|mec_rsrvd_3
suffix:colon
l_int|4
suffix:semicolon
DECL|member|xb_mp0_error_clear_fld_s
)brace
id|xb_mp0_error_clear_fld_s
suffix:semicolon
DECL|typedef|xb_mp0_error_clear_u_t
)brace
id|xb_mp0_error_clear_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Records errors seen by MIQ.                                         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_xm_miq_error_clear_u
r_typedef
r_union
id|xb_xm_miq_error_clear_u
(brace
DECL|member|xb_xm_miq_error_clear_regval
id|bdrkreg_t
id|xb_xm_miq_error_clear_regval
suffix:semicolon
r_struct
(brace
DECL|member|xmec_rsrvd_1
id|bdrkreg_t
id|xmec_rsrvd_1
suffix:colon
l_int|4
suffix:semicolon
DECL|member|xmec_deadlock_timeout
id|bdrkreg_t
id|xmec_deadlock_timeout
suffix:colon
l_int|4
suffix:semicolon
DECL|member|xmec_rsrvd
id|bdrkreg_t
id|xmec_rsrvd
suffix:colon
l_int|56
suffix:semicolon
DECL|member|xb_xm_miq_error_clear_fld_s
)brace
id|xb_xm_miq_error_clear_fld_s
suffix:semicolon
DECL|typedef|xb_xm_miq_error_clear_u_t
)brace
id|xb_xm_miq_error_clear_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_xm_miq_error_clear_u
r_typedef
r_union
id|xb_xm_miq_error_clear_u
(brace
DECL|member|xb_xm_miq_error_clear_regval
id|bdrkreg_t
id|xb_xm_miq_error_clear_regval
suffix:semicolon
r_struct
(brace
DECL|member|xmec_rsrvd
id|bdrkreg_t
id|xmec_rsrvd
suffix:colon
l_int|56
suffix:semicolon
DECL|member|xmec_deadlock_timeout
id|bdrkreg_t
id|xmec_deadlock_timeout
suffix:colon
l_int|4
suffix:semicolon
DECL|member|xmec_rsrvd_1
id|bdrkreg_t
id|xmec_rsrvd_1
suffix:colon
l_int|4
suffix:semicolon
DECL|member|xb_xm_miq_error_clear_fld_s
)brace
id|xb_xm_miq_error_clear_fld_s
suffix:semicolon
DECL|typedef|xb_xm_miq_error_clear_u_t
)brace
id|xb_xm_miq_error_clear_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Records errors seen by NOQ.                                         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_noq_error_clear_u
r_typedef
r_union
id|xb_noq_error_clear_u
(brace
DECL|member|xb_noq_error_clear_regval
id|bdrkreg_t
id|xb_noq_error_clear_regval
suffix:semicolon
r_struct
(brace
DECL|member|nec_rsvd
id|bdrkreg_t
id|nec_rsvd
suffix:colon
l_int|4
suffix:semicolon
DECL|member|nec_overflow
id|bdrkreg_t
id|nec_overflow
suffix:colon
l_int|4
suffix:semicolon
DECL|member|nec_underflow
id|bdrkreg_t
id|nec_underflow
suffix:colon
l_int|4
suffix:semicolon
DECL|member|nec_tail_timeout
id|bdrkreg_t
id|nec_tail_timeout
suffix:colon
l_int|4
suffix:semicolon
DECL|member|nec_rsrvd
id|bdrkreg_t
id|nec_rsrvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|xb_noq_error_clear_fld_s
)brace
id|xb_noq_error_clear_fld_s
suffix:semicolon
DECL|typedef|xb_noq_error_clear_u_t
)brace
id|xb_noq_error_clear_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_noq_error_clear_u
r_typedef
r_union
id|xb_noq_error_clear_u
(brace
DECL|member|xb_noq_error_clear_regval
id|bdrkreg_t
id|xb_noq_error_clear_regval
suffix:semicolon
r_struct
(brace
DECL|member|nec_rsrvd
id|bdrkreg_t
id|nec_rsrvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|nec_tail_timeout
id|bdrkreg_t
id|nec_tail_timeout
suffix:colon
l_int|4
suffix:semicolon
DECL|member|nec_underflow
id|bdrkreg_t
id|nec_underflow
suffix:colon
l_int|4
suffix:semicolon
DECL|member|nec_overflow
id|bdrkreg_t
id|nec_overflow
suffix:colon
l_int|4
suffix:semicolon
DECL|member|nec_rsvd
id|bdrkreg_t
id|nec_rsvd
suffix:colon
l_int|4
suffix:semicolon
DECL|member|xb_noq_error_clear_fld_s
)brace
id|xb_noq_error_clear_fld_s
suffix:semicolon
DECL|typedef|xb_noq_error_clear_u_t
)brace
id|xb_noq_error_clear_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Records errors seen by LOQ.                                         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_loq_error_clear_u
r_typedef
r_union
id|xb_loq_error_clear_u
(brace
DECL|member|xb_loq_error_clear_regval
id|bdrkreg_t
id|xb_loq_error_clear_regval
suffix:semicolon
r_struct
(brace
DECL|member|lec_invalid_xsel
id|bdrkreg_t
id|lec_invalid_xsel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|lec_rsrvd_1
id|bdrkreg_t
id|lec_rsrvd_1
suffix:colon
l_int|6
suffix:semicolon
DECL|member|lec_underflow
id|bdrkreg_t
id|lec_underflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|lec_rsvd
id|bdrkreg_t
id|lec_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|lec_tail_timeout
id|bdrkreg_t
id|lec_tail_timeout
suffix:colon
l_int|2
suffix:semicolon
DECL|member|lec_rsrvd
id|bdrkreg_t
id|lec_rsrvd
suffix:colon
l_int|50
suffix:semicolon
DECL|member|xb_loq_error_clear_fld_s
)brace
id|xb_loq_error_clear_fld_s
suffix:semicolon
DECL|typedef|xb_loq_error_clear_u_t
)brace
id|xb_loq_error_clear_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_loq_error_clear_u
r_typedef
r_union
id|xb_loq_error_clear_u
(brace
DECL|member|xb_loq_error_clear_regval
id|bdrkreg_t
id|xb_loq_error_clear_regval
suffix:semicolon
r_struct
(brace
DECL|member|lec_rsrvd
id|bdrkreg_t
id|lec_rsrvd
suffix:colon
l_int|50
suffix:semicolon
DECL|member|lec_tail_timeout
id|bdrkreg_t
id|lec_tail_timeout
suffix:colon
l_int|2
suffix:semicolon
DECL|member|lec_rsvd
id|bdrkreg_t
id|lec_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|lec_underflow
id|bdrkreg_t
id|lec_underflow
suffix:colon
l_int|2
suffix:semicolon
DECL|member|lec_rsrvd_1
id|bdrkreg_t
id|lec_rsrvd_1
suffix:colon
l_int|6
suffix:semicolon
DECL|member|lec_invalid_xsel
id|bdrkreg_t
id|lec_invalid_xsel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|xb_loq_error_clear_fld_s
)brace
id|xb_loq_error_clear_fld_s
suffix:semicolon
DECL|typedef|xb_loq_error_clear_u_t
)brace
id|xb_loq_error_clear_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Records errors seen by LIQ. Note that the LIQ only records errors   *&n; * for the request channel. The reply channel can never deadlock or     *&n; * overflow because it does not have hardware flow control.             *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_liq_error_clear_u
r_typedef
r_union
id|xb_liq_error_clear_u
(brace
DECL|member|xb_liq_error_clear_regval
id|bdrkreg_t
id|xb_liq_error_clear_regval
suffix:semicolon
r_struct
(brace
DECL|member|lec_overflow
id|bdrkreg_t
id|lec_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|lec_rsrvd_1
id|bdrkreg_t
id|lec_rsrvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|lec_deadlock_timeout
id|bdrkreg_t
id|lec_deadlock_timeout
suffix:colon
l_int|1
suffix:semicolon
DECL|member|lec_rsrvd
id|bdrkreg_t
id|lec_rsrvd
suffix:colon
l_int|59
suffix:semicolon
DECL|member|xb_liq_error_clear_fld_s
)brace
id|xb_liq_error_clear_fld_s
suffix:semicolon
DECL|typedef|xb_liq_error_clear_u_t
)brace
id|xb_liq_error_clear_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_liq_error_clear_u
r_typedef
r_union
id|xb_liq_error_clear_u
(brace
DECL|member|xb_liq_error_clear_regval
id|bdrkreg_t
id|xb_liq_error_clear_regval
suffix:semicolon
r_struct
(brace
DECL|member|lec_rsrvd
id|bdrkreg_t
id|lec_rsrvd
suffix:colon
l_int|59
suffix:semicolon
DECL|member|lec_deadlock_timeout
id|bdrkreg_t
id|lec_deadlock_timeout
suffix:colon
l_int|1
suffix:semicolon
DECL|member|lec_rsrvd_1
id|bdrkreg_t
id|lec_rsrvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|lec_overflow
id|bdrkreg_t
id|lec_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|xb_liq_error_clear_fld_s
)brace
id|xb_liq_error_clear_fld_s
suffix:semicolon
DECL|typedef|xb_liq_error_clear_u_t
)brace
id|xb_liq_error_clear_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  First error is latched whenever the Valid bit is clear and an       *&n; * error occurs. Any valid bit on in this register causes an            *&n; * interrupt to PI0 and PI1. This interrupt bit will persist until      *&n; * the specific error register to capture the error is cleared, then    *&n; * the FIRST_ERROR register is cleared (in that oder.) The              *&n; * FIRST_ERROR register is not writable, but will be set when any of    *&n; * the corresponding error registers are written by software.           *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|xb_first_error_clear_u
r_typedef
r_union
id|xb_first_error_clear_u
(brace
DECL|member|xb_first_error_clear_regval
id|bdrkreg_t
id|xb_first_error_clear_regval
suffix:semicolon
r_struct
(brace
DECL|member|fec_type
id|bdrkreg_t
id|fec_type
suffix:colon
l_int|4
suffix:semicolon
DECL|member|fec_channel
id|bdrkreg_t
id|fec_channel
suffix:colon
l_int|4
suffix:semicolon
DECL|member|fec_source
id|bdrkreg_t
id|fec_source
suffix:colon
l_int|4
suffix:semicolon
DECL|member|fec_valid
id|bdrkreg_t
id|fec_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|fec_rsrvd
id|bdrkreg_t
id|fec_rsrvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|xb_first_error_clear_fld_s
)brace
id|xb_first_error_clear_fld_s
suffix:semicolon
DECL|typedef|xb_first_error_clear_u_t
)brace
id|xb_first_error_clear_u_t
suffix:semicolon
macro_line|#else
DECL|union|xb_first_error_clear_u
r_typedef
r_union
id|xb_first_error_clear_u
(brace
DECL|member|xb_first_error_clear_regval
id|bdrkreg_t
id|xb_first_error_clear_regval
suffix:semicolon
r_struct
(brace
DECL|member|fec_rsrvd
id|bdrkreg_t
id|fec_rsrvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|fec_valid
id|bdrkreg_t
id|fec_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|fec_source
id|bdrkreg_t
id|fec_source
suffix:colon
l_int|4
suffix:semicolon
DECL|member|fec_channel
id|bdrkreg_t
id|fec_channel
suffix:colon
l_int|4
suffix:semicolon
DECL|member|fec_type
id|bdrkreg_t
id|fec_type
suffix:colon
l_int|4
suffix:semicolon
DECL|member|xb_first_error_clear_fld_s
)brace
id|xb_first_error_clear_fld_s
suffix:semicolon
DECL|typedef|xb_first_error_clear_u_t
)brace
id|xb_first_error_clear_u_t
suffix:semicolon
macro_line|#endif
macro_line|#endif /* __ASSEMBLY__ */
multiline_comment|/************************************************************************&n; *                                                                      *&n; * The following defines were not formed into structures                *&n; *                                                                      *&n; * This could be because the document did not contain details of the    *&n; * register, or because the automated script did not recognize the      *&n; * register details in the documentation. If these register need        *&n; * structure definition, please create them manually                    *&n; *                                                                      *&n; *           XB_POQ1_ERROR            0x700030                          *&n; *           XB_PIQ1_ERROR            0x700038                          *&n; *           XB_MP1_ERROR             0x700048                          *&n; *           XB_MMQ_ERROR             0x700050                          *&n; *           XB_NIQ_ERROR             0x700068                          *&n; *           XB_IOQ_ERROR             0x700070                          *&n; *           XB_IIQ_ERROR             0x700078                          *&n; *           XB_POQ1_ERROR_CLEAR      0x700130                          *&n; *           XB_PIQ1_ERROR_CLEAR      0x700138                          *&n; *           XB_MP1_ERROR_CLEAR       0x700148                          *&n; *           XB_MMQ_ERROR_CLEAR       0x700150                          *&n; *           XB_NIQ_ERROR_CLEAR       0x700168                          *&n; *           XB_IOQ_ERROR_CLEAR       0x700170                          *&n; *           XB_IIQ_ERROR_CLEAR       0x700178                          *&n; *                                                                      *&n; ************************************************************************/
multiline_comment|/************************************************************************&n; *                                                                      *&n; *               MAKE ALL ADDITIONS AFTER THIS LINE                     *&n; *                                                                      *&n; ************************************************************************/
macro_line|#endif /* _ASM_IA64_SN_SN1_HUBXB_H */
eof
