multiline_comment|/* $Id$&n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 1992 - 1997, 2000 Silicon Graphics, Inc.&n; * Copyright (C) 2000 by Colin Ngam&n; */
multiline_comment|/************************************************************************&n; *                                                                      *&n; *      WARNING!!!  WARNING!!!  WARNING!!!  WARNING!!!  WARNING!!!      *&n; *                                                                      *&n; * This file is created by an automated script. Any (minimal) changes   *&n; * made manually to this  file should be made with care.                *&n; *                                                                      *&n; *               MAKE ALL ADDITIONS TO THE END OF THIS FILE             *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifndef _ASM_SN_SN1_HUBIO_H
DECL|macro|_ASM_SN_SN1_HUBIO_H
mdefine_line|#define _ASM_SN_SN1_HUBIO_H
DECL|macro|IIO_WID
mdefine_line|#define    IIO_WID                   0x00400000    /*&n;                                                    * Crosstalk Widget&n;                                                    * Identification This&n;                                                    * register is also&n;                                                    * accessible from&n;                                                    * Crosstalk at&n;                                                    * address 0x0.&n;                                                    */
DECL|macro|IIO_WSTAT
mdefine_line|#define    IIO_WSTAT                 0x00400008    /*&n;                                                    * Crosstalk Widget&n;                                                    * Status&n;                                                    */
DECL|macro|IIO_WCR
mdefine_line|#define    IIO_WCR                   0x00400020    /*&n;                                                    * Crosstalk Widget&n;                                                    * Control Register&n;                                                    */
DECL|macro|IIO_ILAPR
mdefine_line|#define    IIO_ILAPR                 0x00400100    /*&n;                                                    * IO Local Access&n;                                                    * Protection Register&n;                                                    */
DECL|macro|IIO_ILAPO
mdefine_line|#define    IIO_ILAPO                 0x00400108    /*&n;                                                    * IO Local Access&n;                                                    * Protection Override&n;                                                    */
DECL|macro|IIO_IOWA
mdefine_line|#define    IIO_IOWA                  0x00400110    /*&n;                                                    * IO Outbound Widget&n;                                                    * Access&n;                                                    */
DECL|macro|IIO_IIWA
mdefine_line|#define    IIO_IIWA                  0x00400118    /*&n;                                                    * IO Inbound Widget&n;                                                    * Access&n;                                                    */
DECL|macro|IIO_IIDEM
mdefine_line|#define    IIO_IIDEM                 0x00400120    /*&n;                                                    * IO Inbound Device&n;                                                    * Error Mask&n;                                                    */
DECL|macro|IIO_ILCSR
mdefine_line|#define    IIO_ILCSR                 0x00400128    /*&n;                                                    * IO LLP Control and&n;                                                    * Status Register&n;                                                    */
DECL|macro|IIO_ILLR
mdefine_line|#define    IIO_ILLR                  0x00400130    /* IO LLP Log Register    */
DECL|macro|IIO_IIDSR
mdefine_line|#define    IIO_IIDSR                 0x00400138    /*&n;                                                    * IO Interrupt&n;                                                    * Destination&n;                                                    */
DECL|macro|IIO_IGFX0
mdefine_line|#define    IIO_IGFX0                 0x00400140    /*&n;                                                    * IO Graphics&n;                                                    * Node-Widget Map 0&n;                                                    */
DECL|macro|IIO_IGFX1
mdefine_line|#define    IIO_IGFX1                 0x00400148    /*&n;                                                    * IO Graphics&n;                                                    * Node-Widget Map 1&n;                                                    */
DECL|macro|IIO_ISCR0
mdefine_line|#define    IIO_ISCR0                 0x00400150    /*&n;                                                    * IO Scratch Register&n;                                                    * 0&n;                                                    */
DECL|macro|IIO_ISCR1
mdefine_line|#define    IIO_ISCR1                 0x00400158    /*&n;                                                    * IO Scratch Register&n;                                                    * 1&n;                                                    */
DECL|macro|IIO_ITTE1
mdefine_line|#define    IIO_ITTE1                 0x00400160    /*&n;                                                    * IO Translation&n;                                                    * Table Entry 1&n;                                                    */
DECL|macro|IIO_ITTE2
mdefine_line|#define    IIO_ITTE2                 0x00400168    /*&n;                                                    * IO Translation&n;                                                    * Table Entry 2&n;                                                    */
DECL|macro|IIO_ITTE3
mdefine_line|#define    IIO_ITTE3                 0x00400170    /*&n;                                                    * IO Translation&n;                                                    * Table Entry 3&n;                                                    */
DECL|macro|IIO_ITTE4
mdefine_line|#define    IIO_ITTE4                 0x00400178    /*&n;                                                    * IO Translation&n;                                                    * Table Entry 4&n;                                                    */
DECL|macro|IIO_ITTE5
mdefine_line|#define    IIO_ITTE5                 0x00400180    /*&n;                                                    * IO Translation&n;                                                    * Table Entry 5&n;                                                    */
DECL|macro|IIO_ITTE6
mdefine_line|#define    IIO_ITTE6                 0x00400188    /*&n;                                                    * IO Translation&n;                                                    * Table Entry 6&n;                                                    */
DECL|macro|IIO_ITTE7
mdefine_line|#define    IIO_ITTE7                 0x00400190    /*&n;                                                    * IO Translation&n;                                                    * Table Entry 7&n;                                                    */
DECL|macro|IIO_IPRB0
mdefine_line|#define    IIO_IPRB0                 0x00400198    /* IO PRB Entry 0         */
DECL|macro|IIO_IPRB8
mdefine_line|#define    IIO_IPRB8                 0x004001A0    /* IO PRB Entry 8         */
DECL|macro|IIO_IPRB9
mdefine_line|#define    IIO_IPRB9                 0x004001A8    /* IO PRB Entry 9         */
DECL|macro|IIO_IPRBA
mdefine_line|#define    IIO_IPRBA                 0x004001B0    /* IO PRB Entry A         */
DECL|macro|IIO_IPRBB
mdefine_line|#define    IIO_IPRBB                 0x004001B8    /* IO PRB Entry B         */
DECL|macro|IIO_IPRBC
mdefine_line|#define    IIO_IPRBC                 0x004001C0    /* IO PRB Entry C         */
DECL|macro|IIO_IPRBD
mdefine_line|#define    IIO_IPRBD                 0x004001C8    /* IO PRB Entry D         */
DECL|macro|IIO_IPRBE
mdefine_line|#define    IIO_IPRBE                 0x004001D0    /* IO PRB Entry E         */
DECL|macro|IIO_IPRBF
mdefine_line|#define    IIO_IPRBF                 0x004001D8    /* IO PRB Entry F         */
DECL|macro|IIO_IXCC
mdefine_line|#define    IIO_IXCC                  0x004001E0    /*&n;                                                    * IO Crosstalk Credit&n;                                                    * Count Timeout&n;                                                    */
DECL|macro|IIO_IMEM
mdefine_line|#define    IIO_IMEM                  0x004001E8    /*&n;                                                    * IO Miscellaneous&n;                                                    * Error Mask&n;                                                    */
DECL|macro|IIO_IXTT
mdefine_line|#define    IIO_IXTT                  0x004001F0    /*&n;                                                    * IO Crosstalk&n;                                                    * Timeout Threshold&n;                                                    */
DECL|macro|IIO_IECLR
mdefine_line|#define    IIO_IECLR                 0x004001F8    /*&n;                                                    * IO Error Clear&n;                                                    * Register&n;                                                    */
DECL|macro|IIO_IBCR
mdefine_line|#define    IIO_IBCR                  0x00400200    /*&n;                                                    * IO BTE Control&n;                                                    * Register&n;                                                    */
DECL|macro|IIO_IXSM
mdefine_line|#define    IIO_IXSM                  0x00400208    /*&n;                                                    * IO Crosstalk&n;                                                    * Spurious Message&n;                                                    */
DECL|macro|IIO_IXSS
mdefine_line|#define    IIO_IXSS                  0x00400210    /*&n;                                                    * IO Crosstalk&n;                                                    * Spurious Sideband&n;                                                    */
DECL|macro|IIO_ILCT
mdefine_line|#define    IIO_ILCT                  0x00400218    /* IO LLP Channel Test    */
DECL|macro|IIO_IIEPH1
mdefine_line|#define    IIO_IIEPH1                0x00400220    /*&n;                                                    * IO Incoming Error&n;                                                    * Packet Header, Part&n;                                                    * 1&n;                                                    */
DECL|macro|IIO_IIEPH2
mdefine_line|#define    IIO_IIEPH2                0x00400228    /*&n;                                                    * IO Incoming Error&n;                                                    * Packet Header, Part&n;                                                    * 2&n;                                                    */
DECL|macro|IIO_IPCA
mdefine_line|#define    IIO_IPCA                  0x00400300    /*&n;                                                    * IO PRB Counter&n;                                                    * Adjust&n;                                                    */
DECL|macro|IIO_IPRTE0
mdefine_line|#define    IIO_IPRTE0                0x00400308    /*&n;                                                    * IO PIO Read Address&n;                                                    * Table Entry 0&n;                                                    */
DECL|macro|IIO_IPRTE1
mdefine_line|#define    IIO_IPRTE1                0x00400310    /*&n;                                                    * IO PIO Read Address&n;                                                    * Table Entry 1&n;                                                    */
DECL|macro|IIO_IPRTE2
mdefine_line|#define    IIO_IPRTE2                0x00400318    /*&n;                                                    * IO PIO Read Address&n;                                                    * Table Entry 2&n;                                                    */
DECL|macro|IIO_IPRTE3
mdefine_line|#define    IIO_IPRTE3                0x00400320    /*&n;                                                    * IO PIO Read Address&n;                                                    * Table Entry 3&n;                                                    */
DECL|macro|IIO_IPRTE4
mdefine_line|#define    IIO_IPRTE4                0x00400328    /*&n;                                                    * IO PIO Read Address&n;                                                    * Table Entry 4&n;                                                    */
DECL|macro|IIO_IPRTE5
mdefine_line|#define    IIO_IPRTE5                0x00400330    /*&n;                                                    * IO PIO Read Address&n;                                                    * Table Entry 5&n;                                                    */
DECL|macro|IIO_IPRTE6
mdefine_line|#define    IIO_IPRTE6                0x00400338    /*&n;                                                    * IO PIO Read Address&n;                                                    * Table Entry 6&n;                                                    */
DECL|macro|IIO_IPRTE7
mdefine_line|#define    IIO_IPRTE7                0x00400340    /*&n;                                                    * IO PIO Read Address&n;                                                    * Table Entry 7&n;                                                    */
DECL|macro|IIO_IPDR
mdefine_line|#define    IIO_IPDR                  0x00400388    /*&n;                                                    * IO PIO Deallocation&n;                                                    * Register&n;                                                    */
DECL|macro|IIO_ICDR
mdefine_line|#define    IIO_ICDR                  0x00400390    /*&n;                                                    * IO CRB Entry&n;                                                    * Deallocation&n;                                                    * Register&n;                                                    */
DECL|macro|IIO_IFDR
mdefine_line|#define    IIO_IFDR                  0x00400398    /*&n;                                                    * IO IOQ FIFO Depth&n;                                                    * Register&n;                                                    */
DECL|macro|IIO_IIAP
mdefine_line|#define    IIO_IIAP                  0x004003A0    /*&n;                                                    * IO IIQ Arbitration&n;                                                    * Parameters&n;                                                    */
DECL|macro|IIO_ICMR
mdefine_line|#define    IIO_ICMR                  0x004003A8    /*&n;                                                    * IO CRB Management&n;                                                    * Register&n;                                                    */
DECL|macro|IIO_ICCR
mdefine_line|#define    IIO_ICCR                  0x004003B0    /*&n;                                                    * IO CRB Control&n;                                                    * Register&n;                                                    */
DECL|macro|IIO_ICTO
mdefine_line|#define    IIO_ICTO                  0x004003B8    /* IO CRB Timeout         */
DECL|macro|IIO_ICTP
mdefine_line|#define    IIO_ICTP                  0x004003C0    /*&n;                                                    * IO CRB Timeout&n;                                                    * Prescalar&n;                                                    */
DECL|macro|IIO_ICRB0_A
mdefine_line|#define    IIO_ICRB0_A               0x00400400    /* IO CRB Entry 0_A       */
DECL|macro|IIO_ICRB0_B
mdefine_line|#define    IIO_ICRB0_B               0x00400408    /* IO CRB Entry 0_B       */
DECL|macro|IIO_ICRB0_C
mdefine_line|#define    IIO_ICRB0_C               0x00400410    /* IO CRB Entry 0_C       */
DECL|macro|IIO_ICRB0_D
mdefine_line|#define    IIO_ICRB0_D               0x00400418    /* IO CRB Entry 0_D       */
DECL|macro|IIO_ICRB1_A
mdefine_line|#define    IIO_ICRB1_A               0x00400420    /* IO CRB Entry 1_A       */
DECL|macro|IIO_ICRB1_B
mdefine_line|#define    IIO_ICRB1_B               0x00400428    /* IO CRB Entry 1_B       */
DECL|macro|IIO_ICRB1_C
mdefine_line|#define    IIO_ICRB1_C               0x00400430    /* IO CRB Entry 1_C       */
DECL|macro|IIO_ICRB1_D
mdefine_line|#define    IIO_ICRB1_D               0x00400438    /* IO CRB Entry 1_D       */
DECL|macro|IIO_ICRB2_A
mdefine_line|#define    IIO_ICRB2_A               0x00400440    /* IO CRB Entry 2_A       */
DECL|macro|IIO_ICRB2_B
mdefine_line|#define    IIO_ICRB2_B               0x00400448    /* IO CRB Entry 2_B       */
DECL|macro|IIO_ICRB2_C
mdefine_line|#define    IIO_ICRB2_C               0x00400450    /* IO CRB Entry 2_C       */
DECL|macro|IIO_ICRB2_D
mdefine_line|#define    IIO_ICRB2_D               0x00400458    /* IO CRB Entry 2_D       */
DECL|macro|IIO_ICRB3_A
mdefine_line|#define    IIO_ICRB3_A               0x00400460    /* IO CRB Entry 3_A       */
DECL|macro|IIO_ICRB3_B
mdefine_line|#define    IIO_ICRB3_B               0x00400468    /* IO CRB Entry 3_B       */
DECL|macro|IIO_ICRB3_C
mdefine_line|#define    IIO_ICRB3_C               0x00400470    /* IO CRB Entry 3_C       */
DECL|macro|IIO_ICRB3_D
mdefine_line|#define    IIO_ICRB3_D               0x00400478    /* IO CRB Entry 3_D       */
DECL|macro|IIO_ICRB4_A
mdefine_line|#define    IIO_ICRB4_A               0x00400480    /* IO CRB Entry 4_A       */
DECL|macro|IIO_ICRB4_B
mdefine_line|#define    IIO_ICRB4_B               0x00400488    /* IO CRB Entry 4_B       */
DECL|macro|IIO_ICRB4_C
mdefine_line|#define    IIO_ICRB4_C               0x00400490    /* IO CRB Entry 4_C       */
DECL|macro|IIO_ICRB4_D
mdefine_line|#define    IIO_ICRB4_D               0x00400498    /* IO CRB Entry 4_D       */
DECL|macro|IIO_ICRB5_A
mdefine_line|#define    IIO_ICRB5_A               0x004004A0    /* IO CRB Entry 5_A       */
DECL|macro|IIO_ICRB5_B
mdefine_line|#define    IIO_ICRB5_B               0x004004A8    /* IO CRB Entry 5_B       */
DECL|macro|IIO_ICRB5_C
mdefine_line|#define    IIO_ICRB5_C               0x004004B0    /* IO CRB Entry 5_C       */
DECL|macro|IIO_ICRB5_D
mdefine_line|#define    IIO_ICRB5_D               0x004004B8    /* IO CRB Entry 5_D       */
DECL|macro|IIO_ICRB6_A
mdefine_line|#define    IIO_ICRB6_A               0x004004C0    /* IO CRB Entry 6_A       */
DECL|macro|IIO_ICRB6_B
mdefine_line|#define    IIO_ICRB6_B               0x004004C8    /* IO CRB Entry 6_B       */
DECL|macro|IIO_ICRB6_C
mdefine_line|#define    IIO_ICRB6_C               0x004004D0    /* IO CRB Entry 6_C       */
DECL|macro|IIO_ICRB6_D
mdefine_line|#define    IIO_ICRB6_D               0x004004D8    /* IO CRB Entry 6_D       */
DECL|macro|IIO_ICRB7_A
mdefine_line|#define    IIO_ICRB7_A               0x004004E0    /* IO CRB Entry 7_A       */
DECL|macro|IIO_ICRB7_B
mdefine_line|#define    IIO_ICRB7_B               0x004004E8    /* IO CRB Entry 7_B       */
DECL|macro|IIO_ICRB7_C
mdefine_line|#define    IIO_ICRB7_C               0x004004F0    /* IO CRB Entry 7_C       */
DECL|macro|IIO_ICRB7_D
mdefine_line|#define    IIO_ICRB7_D               0x004004F8    /* IO CRB Entry 7_D       */
DECL|macro|IIO_ICRB8_A
mdefine_line|#define    IIO_ICRB8_A               0x00400500    /* IO CRB Entry 8_A       */
DECL|macro|IIO_ICRB8_B
mdefine_line|#define    IIO_ICRB8_B               0x00400508    /* IO CRB Entry 8_B       */
DECL|macro|IIO_ICRB8_C
mdefine_line|#define    IIO_ICRB8_C               0x00400510    /* IO CRB Entry 8_C       */
DECL|macro|IIO_ICRB8_D
mdefine_line|#define    IIO_ICRB8_D               0x00400518    /* IO CRB Entry 8_D       */
DECL|macro|IIO_ICRB9_A
mdefine_line|#define    IIO_ICRB9_A               0x00400520    /* IO CRB Entry 9_A       */
DECL|macro|IIO_ICRB9_B
mdefine_line|#define    IIO_ICRB9_B               0x00400528    /* IO CRB Entry 9_B       */
DECL|macro|IIO_ICRB9_C
mdefine_line|#define    IIO_ICRB9_C               0x00400530    /* IO CRB Entry 9_C       */
DECL|macro|IIO_ICRB9_D
mdefine_line|#define    IIO_ICRB9_D               0x00400538    /* IO CRB Entry 9_D       */
DECL|macro|IIO_ICRBA_A
mdefine_line|#define    IIO_ICRBA_A               0x00400540    /* IO CRB Entry A_A       */
DECL|macro|IIO_ICRBA_B
mdefine_line|#define    IIO_ICRBA_B               0x00400548    /* IO CRB Entry A_B       */
DECL|macro|IIO_ICRBA_C
mdefine_line|#define    IIO_ICRBA_C               0x00400550    /* IO CRB Entry A_C       */
DECL|macro|IIO_ICRBA_D
mdefine_line|#define    IIO_ICRBA_D               0x00400558    /* IO CRB Entry A_D       */
DECL|macro|IIO_ICRBB_A
mdefine_line|#define    IIO_ICRBB_A               0x00400560    /* IO CRB Entry B_A       */
DECL|macro|IIO_ICRBB_B
mdefine_line|#define    IIO_ICRBB_B               0x00400568    /* IO CRB Entry B_B       */
DECL|macro|IIO_ICRBB_C
mdefine_line|#define    IIO_ICRBB_C               0x00400570    /* IO CRB Entry B_C       */
DECL|macro|IIO_ICRBB_D
mdefine_line|#define    IIO_ICRBB_D               0x00400578    /* IO CRB Entry B_D       */
DECL|macro|IIO_ICRBC_A
mdefine_line|#define    IIO_ICRBC_A               0x00400580    /* IO CRB Entry C_A       */
DECL|macro|IIO_ICRBC_B
mdefine_line|#define    IIO_ICRBC_B               0x00400588    /* IO CRB Entry C_B       */
DECL|macro|IIO_ICRBC_C
mdefine_line|#define    IIO_ICRBC_C               0x00400590    /* IO CRB Entry C_C       */
DECL|macro|IIO_ICRBC_D
mdefine_line|#define    IIO_ICRBC_D               0x00400598    /* IO CRB Entry C_D       */
DECL|macro|IIO_ICRBD_A
mdefine_line|#define    IIO_ICRBD_A               0x004005A0    /* IO CRB Entry D_A       */
DECL|macro|IIO_ICRBD_B
mdefine_line|#define    IIO_ICRBD_B               0x004005A8    /* IO CRB Entry D_B       */
DECL|macro|IIO_ICRBD_C
mdefine_line|#define    IIO_ICRBD_C               0x004005B0    /* IO CRB Entry D_C       */
DECL|macro|IIO_ICRBD_D
mdefine_line|#define    IIO_ICRBD_D               0x004005B8    /* IO CRB Entry D_D       */
DECL|macro|IIO_ICRBE_A
mdefine_line|#define    IIO_ICRBE_A               0x004005C0    /* IO CRB Entry E_A       */
DECL|macro|IIO_ICRBE_B
mdefine_line|#define    IIO_ICRBE_B               0x004005C8    /* IO CRB Entry E_B       */
DECL|macro|IIO_ICRBE_C
mdefine_line|#define    IIO_ICRBE_C               0x004005D0    /* IO CRB Entry E_C       */
DECL|macro|IIO_ICRBE_D
mdefine_line|#define    IIO_ICRBE_D               0x004005D8    /* IO CRB Entry E_D       */
DECL|macro|IIO_ICSML
mdefine_line|#define    IIO_ICSML                 0x00400600    /*&n;                                                    * IO CRB Spurious&n;                                                    * Message Low&n;                                                    */
DECL|macro|IIO_ICSMH
mdefine_line|#define    IIO_ICSMH                 0x00400608    /*&n;                                                    * IO CRB Spurious&n;                                                    * Message High&n;                                                    */
DECL|macro|IIO_IDBSS
mdefine_line|#define    IIO_IDBSS                 0x00400610    /*&n;                                                    * IO Debug Submenu&n;                                                    * Select&n;                                                    */
DECL|macro|IIO_IBLS0
mdefine_line|#define    IIO_IBLS0                 0x00410000    /*&n;                                                    * IO BTE Length&n;                                                    * Status 0&n;                                                    */
DECL|macro|IIO_IBSA0
mdefine_line|#define    IIO_IBSA0                 0x00410008    /*&n;                                                    * IO BTE Source&n;                                                    * Address 0&n;                                                    */
DECL|macro|IIO_IBDA0
mdefine_line|#define    IIO_IBDA0                 0x00410010    /*&n;                                                    * IO BTE Destination&n;                                                    * Address 0&n;                                                    */
DECL|macro|IIO_IBCT0
mdefine_line|#define    IIO_IBCT0                 0x00410018    /*&n;                                                    * IO BTE Control&n;                                                    * Terminate 0&n;                                                    */
DECL|macro|IIO_IBNA0
mdefine_line|#define    IIO_IBNA0                 0x00410020    /*&n;                                                    * IO BTE Notification&n;                                                    * Address 0&n;                                                    */
DECL|macro|IIO_IBIA0
mdefine_line|#define    IIO_IBIA0                 0x00410028    /*&n;                                                    * IO BTE Interrupt&n;                                                    * Address 0&n;                                                    */
DECL|macro|IIO_IBLS1
mdefine_line|#define    IIO_IBLS1                 0x00420000    /*&n;                                                    * IO BTE Length&n;                                                    * Status 1&n;                                                    */
DECL|macro|IIO_IBSA1
mdefine_line|#define    IIO_IBSA1                 0x00420008    /*&n;                                                    * IO BTE Source&n;                                                    * Address 1&n;                                                    */
DECL|macro|IIO_IBDA1
mdefine_line|#define    IIO_IBDA1                 0x00420010    /*&n;                                                    * IO BTE Destination&n;                                                    * Address 1&n;                                                    */
DECL|macro|IIO_IBCT1
mdefine_line|#define    IIO_IBCT1                 0x00420018    /*&n;                                                    * IO BTE Control&n;                                                    * Terminate 1&n;                                                    */
DECL|macro|IIO_IBNA1
mdefine_line|#define    IIO_IBNA1                 0x00420020    /*&n;                                                    * IO BTE Notification&n;                                                    * Address 1&n;                                                    */
DECL|macro|IIO_IBIA1
mdefine_line|#define    IIO_IBIA1                 0x00420028    /*&n;                                                    * IO BTE Interrupt&n;                                                    * Address 1&n;                                                    */
DECL|macro|IIO_IPCR
mdefine_line|#define    IIO_IPCR                  0x00430000    /*&n;                                                    * IO Performance&n;                                                    * Control&n;                                                    */
DECL|macro|IIO_IPPR
mdefine_line|#define    IIO_IPPR                  0x00430008    /*&n;                                                    * IO Performance&n;                                                    * Profiling&n;                                                    */
macro_line|#ifdef _LANGUAGE_C
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register echoes some information from the         *&n; * LB_REV_ID register. It is available through Crosstalk as described   *&n; * above. The REV_NUM and MFG_NUM fields receive their values from      *&n; * the REVISION and MANUFACTURER fields in the LB_REV_ID register.      *&n; * The PART_NUM field&squot;s value is the Crosstalk device ID number that    *&n; * Steve Miller assigned to the Bedrock chip.                           *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_wid_u
r_typedef
r_union
id|ii_wid_u
(brace
DECL|member|ii_wid_regval
id|bdrkreg_t
id|ii_wid_regval
suffix:semicolon
r_struct
(brace
DECL|member|w_rsvd_1
id|bdrkreg_t
id|w_rsvd_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_mfg_num
id|bdrkreg_t
id|w_mfg_num
suffix:colon
l_int|11
suffix:semicolon
DECL|member|w_part_num
id|bdrkreg_t
id|w_part_num
suffix:colon
l_int|16
suffix:semicolon
DECL|member|w_rev_num
id|bdrkreg_t
id|w_rev_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|w_rsvd
id|bdrkreg_t
id|w_rsvd
suffix:colon
l_int|32
suffix:semicolon
DECL|member|ii_wid_fld_s
)brace
id|ii_wid_fld_s
suffix:semicolon
DECL|typedef|ii_wid_u_t
)brace
id|ii_wid_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_wid_u
r_typedef
r_union
id|ii_wid_u
(brace
DECL|member|ii_wid_regval
id|bdrkreg_t
id|ii_wid_regval
suffix:semicolon
r_struct
(brace
DECL|member|w_rsvd
id|bdrkreg_t
id|w_rsvd
suffix:colon
l_int|32
suffix:semicolon
DECL|member|w_rev_num
id|bdrkreg_t
id|w_rev_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|w_part_num
id|bdrkreg_t
id|w_part_num
suffix:colon
l_int|16
suffix:semicolon
DECL|member|w_mfg_num
id|bdrkreg_t
id|w_mfg_num
suffix:colon
l_int|11
suffix:semicolon
DECL|member|w_rsvd_1
id|bdrkreg_t
id|w_rsvd_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_wid_fld_s
)brace
id|ii_wid_fld_s
suffix:semicolon
DECL|typedef|ii_wid_u_t
)brace
id|ii_wid_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  The fields in this register are set upon detection of an error      *&n; * and cleared by various mechanisms, as explained in the               *&n; * description.                                                         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_wstat_u
r_typedef
r_union
id|ii_wstat_u
(brace
DECL|member|ii_wstat_regval
id|bdrkreg_t
id|ii_wstat_regval
suffix:semicolon
r_struct
(brace
DECL|member|w_pending
id|bdrkreg_t
id|w_pending
suffix:colon
l_int|4
suffix:semicolon
DECL|member|w_xt_crd_to
id|bdrkreg_t
id|w_xt_crd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_xt_tail_to
id|bdrkreg_t
id|w_xt_tail_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_rsvd_3
id|bdrkreg_t
id|w_rsvd_3
suffix:colon
l_int|3
suffix:semicolon
DECL|member|w_tx_mx_rty
id|bdrkreg_t
id|w_tx_mx_rty
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_rsvd_2
id|bdrkreg_t
id|w_rsvd_2
suffix:colon
l_int|6
suffix:semicolon
DECL|member|w_llp_tx_cnt
id|bdrkreg_t
id|w_llp_tx_cnt
suffix:colon
l_int|8
suffix:semicolon
DECL|member|w_rsvd_1
id|bdrkreg_t
id|w_rsvd_1
suffix:colon
l_int|8
suffix:semicolon
DECL|member|w_crazy
id|bdrkreg_t
id|w_crazy
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_rsvd
id|bdrkreg_t
id|w_rsvd
suffix:colon
l_int|31
suffix:semicolon
DECL|member|ii_wstat_fld_s
)brace
id|ii_wstat_fld_s
suffix:semicolon
DECL|typedef|ii_wstat_u_t
)brace
id|ii_wstat_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_wstat_u
r_typedef
r_union
id|ii_wstat_u
(brace
DECL|member|ii_wstat_regval
id|bdrkreg_t
id|ii_wstat_regval
suffix:semicolon
r_struct
(brace
DECL|member|w_rsvd
id|bdrkreg_t
id|w_rsvd
suffix:colon
l_int|31
suffix:semicolon
DECL|member|w_crazy
id|bdrkreg_t
id|w_crazy
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_rsvd_1
id|bdrkreg_t
id|w_rsvd_1
suffix:colon
l_int|8
suffix:semicolon
DECL|member|w_llp_tx_cnt
id|bdrkreg_t
id|w_llp_tx_cnt
suffix:colon
l_int|8
suffix:semicolon
DECL|member|w_rsvd_2
id|bdrkreg_t
id|w_rsvd_2
suffix:colon
l_int|6
suffix:semicolon
DECL|member|w_tx_mx_rty
id|bdrkreg_t
id|w_tx_mx_rty
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_rsvd_3
id|bdrkreg_t
id|w_rsvd_3
suffix:colon
l_int|3
suffix:semicolon
DECL|member|w_xt_tail_to
id|bdrkreg_t
id|w_xt_tail_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_xt_crd_to
id|bdrkreg_t
id|w_xt_crd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_pending
id|bdrkreg_t
id|w_pending
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ii_wstat_fld_s
)brace
id|ii_wstat_fld_s
suffix:semicolon
DECL|typedef|ii_wstat_u_t
)brace
id|ii_wstat_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This is a read-write enabled register. It controls     *&n; * various aspects of the Crosstalk flow control.                       *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_wcr_u
r_typedef
r_union
id|ii_wcr_u
(brace
DECL|member|ii_wcr_regval
id|bdrkreg_t
id|ii_wcr_regval
suffix:semicolon
r_struct
(brace
DECL|member|w_wid
id|bdrkreg_t
id|w_wid
suffix:colon
l_int|4
suffix:semicolon
DECL|member|w_tag
id|bdrkreg_t
id|w_tag
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_rsvd_1
id|bdrkreg_t
id|w_rsvd_1
suffix:colon
l_int|8
suffix:semicolon
DECL|member|w_dst_crd
id|bdrkreg_t
id|w_dst_crd
suffix:colon
l_int|3
suffix:semicolon
DECL|member|w_f_bad_pkt
id|bdrkreg_t
id|w_f_bad_pkt
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_dir_con
id|bdrkreg_t
id|w_dir_con
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_e_thresh
id|bdrkreg_t
id|w_e_thresh
suffix:colon
l_int|5
suffix:semicolon
DECL|member|w_rsvd
id|bdrkreg_t
id|w_rsvd
suffix:colon
l_int|41
suffix:semicolon
DECL|member|ii_wcr_fld_s
)brace
id|ii_wcr_fld_s
suffix:semicolon
DECL|typedef|ii_wcr_u_t
)brace
id|ii_wcr_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_wcr_u
r_typedef
r_union
id|ii_wcr_u
(brace
DECL|member|ii_wcr_regval
id|bdrkreg_t
id|ii_wcr_regval
suffix:semicolon
r_struct
(brace
DECL|member|w_rsvd
id|bdrkreg_t
id|w_rsvd
suffix:colon
l_int|41
suffix:semicolon
DECL|member|w_e_thresh
id|bdrkreg_t
id|w_e_thresh
suffix:colon
l_int|5
suffix:semicolon
DECL|member|w_dir_con
id|bdrkreg_t
id|w_dir_con
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_f_bad_pkt
id|bdrkreg_t
id|w_f_bad_pkt
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_dst_crd
id|bdrkreg_t
id|w_dst_crd
suffix:colon
l_int|3
suffix:semicolon
DECL|member|w_rsvd_1
id|bdrkreg_t
id|w_rsvd_1
suffix:colon
l_int|8
suffix:semicolon
DECL|member|w_tag
id|bdrkreg_t
id|w_tag
suffix:colon
l_int|1
suffix:semicolon
DECL|member|w_wid
id|bdrkreg_t
id|w_wid
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ii_wcr_fld_s
)brace
id|ii_wcr_fld_s
suffix:semicolon
DECL|typedef|ii_wcr_u_t
)brace
id|ii_wcr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register&squot;s value is a bit vector that guards      *&n; * access to local registers within the II as well as to external       *&n; * Crosstalk widgets. Each bit in the register corresponds to a         *&n; * particular region in the system; a region consists of one, two or    *&n; * four nodes (depending on the value of the REGION_SIZE field in the   *&n; * LB_REV_ID register, which is documented in Section 8.3.1.1). The     *&n; * protection provided by this register applies to PIO read             *&n; * operations as well as PIO write operations. The II will perform a    *&n; * PIO read or write request only if the bit for the requestor&squot;s        *&n; * region is set; otherwise, the II will not perform the requested      *&n; * operation and will return an error response. When a PIO read or      *&n; * write request targets an external Crosstalk widget, then not only    *&n; * must the bit for the requestor&squot;s region be set in the ILAPR, but     *&n; * also the target widget&squot;s bit in the IOWA register must be set in     *&n; * order for the II to perform the requested operation; otherwise,      *&n; * the II will return an error response. Hence, the protection          *&n; * provided by the IOWA register supplements the protection provided    *&n; * by the ILAPR for requests that target external Crosstalk widgets.    *&n; * This register itself can be accessed only by the nodes whose         *&n; * region ID bits are enabled in this same register. It can also be     *&n; * accessed through the IAlias space by the local processors.           *&n; * The reset value of this register allows access by all nodes.         *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_ilapr_u
r_typedef
r_union
id|ii_ilapr_u
(brace
DECL|member|ii_ilapr_regval
id|bdrkreg_t
id|ii_ilapr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_region
id|bdrkreg_t
id|i_region
suffix:colon
l_int|64
suffix:semicolon
DECL|member|ii_ilapr_fld_s
)brace
id|ii_ilapr_fld_s
suffix:semicolon
DECL|typedef|ii_ilapr_u_t
)brace
id|ii_ilapr_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  A write to this register of the 64-bit value           *&n; * &quot;SGIrules&quot; in ASCII, will cause the bit in the ILAPR register        *&n; * corresponding to the region of the requestor to be set (allow        *&n; * access). A write of any other value will be ignored. Access          *&n; * protection for this register is &quot;SGIrules&quot;.                          *&n; * This register can also be accessed through the IAlias space.         *&n; * However, this access will not change the access permissions in the   *&n; * ILAPR.                                                               *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ilapo_u
r_typedef
r_union
id|ii_ilapo_u
(brace
DECL|member|ii_ilapo_regval
id|bdrkreg_t
id|ii_ilapo_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_io_ovrride
id|bdrkreg_t
id|i_io_ovrride
suffix:colon
l_int|9
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|55
suffix:semicolon
DECL|member|ii_ilapo_fld_s
)brace
id|ii_ilapo_fld_s
suffix:semicolon
DECL|typedef|ii_ilapo_u_t
)brace
id|ii_ilapo_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ilapo_u
r_typedef
r_union
id|ii_ilapo_u
(brace
DECL|member|ii_ilapo_regval
id|bdrkreg_t
id|ii_ilapo_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|55
suffix:semicolon
DECL|member|i_io_ovrride
id|bdrkreg_t
id|i_io_ovrride
suffix:colon
l_int|9
suffix:semicolon
DECL|member|ii_ilapo_fld_s
)brace
id|ii_ilapo_fld_s
suffix:semicolon
DECL|typedef|ii_ilapo_u_t
)brace
id|ii_ilapo_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register qualifies all the PIO and Graphics writes launched    *&n; * from the Bedrock towards a widget.                                   *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iowa_u
r_typedef
r_union
id|ii_iowa_u
(brace
DECL|member|ii_iowa_regval
id|bdrkreg_t
id|ii_iowa_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_w0_oac
id|bdrkreg_t
id|i_w0_oac
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_wx_oac
id|bdrkreg_t
id|i_wx_oac
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|ii_iowa_fld_s
)brace
id|ii_iowa_fld_s
suffix:semicolon
DECL|typedef|ii_iowa_u_t
)brace
id|ii_iowa_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iowa_u
r_typedef
r_union
id|ii_iowa_u
(brace
DECL|member|ii_iowa_regval
id|bdrkreg_t
id|ii_iowa_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|i_wx_oac
id|bdrkreg_t
id|i_wx_oac
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_w0_oac
id|bdrkreg_t
id|i_w0_oac
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iowa_fld_s
)brace
id|ii_iowa_fld_s
suffix:semicolon
DECL|typedef|ii_iowa_u_t
)brace
id|ii_iowa_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register qualifies all the requests launched      *&n; * from a widget towards the Bedrock. This register is intended to be   *&n; * used by software in case of misbehaving widgets.                     *&n; *                                                                      *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iiwa_u
r_typedef
r_union
id|ii_iiwa_u
(brace
DECL|member|ii_iiwa_regval
id|bdrkreg_t
id|ii_iiwa_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_w0_iac
id|bdrkreg_t
id|i_w0_iac
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_wx_iac
id|bdrkreg_t
id|i_wx_iac
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|ii_iiwa_fld_s
)brace
id|ii_iiwa_fld_s
suffix:semicolon
DECL|typedef|ii_iiwa_u_t
)brace
id|ii_iiwa_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iiwa_u
r_typedef
r_union
id|ii_iiwa_u
(brace
DECL|member|ii_iiwa_regval
id|bdrkreg_t
id|ii_iiwa_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|i_wx_iac
id|bdrkreg_t
id|i_wx_iac
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_w0_iac
id|bdrkreg_t
id|i_w0_iac
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iiwa_fld_s
)brace
id|ii_iiwa_fld_s
suffix:semicolon
DECL|typedef|ii_iiwa_u_t
)brace
id|ii_iiwa_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register qualifies all the operations launched    *&n; * from a widget towards the Bedrock. It allows individual access       *&n; * control for up to 8 devices per widget. A device refers to           *&n; * individual DMA master hosted by a widget.                            *&n; * The bits in each field of this register are cleared by the Bedrock   *&n; * upon detection of an error which requires the device to be           *&n; * disabled. These fields assume that 0=TNUM=7 (i.e., Bridge-centric    *&n; * Crosstalk). Whether or not a device has access rights to this        *&n; * Bedrock is determined by an AND of the device enable bit in the      *&n; * appropriate field of this register and the corresponding bit in      *&n; * the Wx_IAC field (for the widget which this device belongs to).      *&n; * The bits in this field are set by writing a 1 to them. Incoming      *&n; * replies from Crosstalk are not subject to this access control        *&n; * mechanism.                                                           *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iidem_u
r_typedef
r_union
id|ii_iidem_u
(brace
DECL|member|ii_iidem_regval
id|bdrkreg_t
id|ii_iidem_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_w8_dxs
id|bdrkreg_t
id|i_w8_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_w9_dxs
id|bdrkreg_t
id|i_w9_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_wa_dxs
id|bdrkreg_t
id|i_wa_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_wb_dxs
id|bdrkreg_t
id|i_wb_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_wc_dxs
id|bdrkreg_t
id|i_wc_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_wd_dxs
id|bdrkreg_t
id|i_wd_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_we_dxs
id|bdrkreg_t
id|i_we_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_wf_dxs
id|bdrkreg_t
id|i_wf_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_iidem_fld_s
)brace
id|ii_iidem_fld_s
suffix:semicolon
DECL|typedef|ii_iidem_u_t
)brace
id|ii_iidem_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iidem_u
r_typedef
r_union
id|ii_iidem_u
(brace
DECL|member|ii_iidem_regval
id|bdrkreg_t
id|ii_iidem_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_wf_dxs
id|bdrkreg_t
id|i_wf_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_we_dxs
id|bdrkreg_t
id|i_we_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_wd_dxs
id|bdrkreg_t
id|i_wd_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_wc_dxs
id|bdrkreg_t
id|i_wc_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_wb_dxs
id|bdrkreg_t
id|i_wb_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_wa_dxs
id|bdrkreg_t
id|i_wa_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_w9_dxs
id|bdrkreg_t
id|i_w9_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_w8_dxs
id|bdrkreg_t
id|i_w8_dxs
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_iidem_fld_s
)brace
id|ii_iidem_fld_s
suffix:semicolon
DECL|typedef|ii_iidem_u_t
)brace
id|ii_iidem_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the various programmable fields necessary    *&n; * for controlling and observing the LLP signals.                       *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ilcsr_u
r_typedef
r_union
id|ii_ilcsr_u
(brace
DECL|member|ii_ilcsr_regval
id|bdrkreg_t
id|ii_ilcsr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_nullto
id|bdrkreg_t
id|i_nullto
suffix:colon
l_int|6
suffix:semicolon
DECL|member|i_rsvd_4
id|bdrkreg_t
id|i_rsvd_4
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_wrmrst
id|bdrkreg_t
id|i_wrmrst
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_3
id|bdrkreg_t
id|i_rsvd_3
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_llp_en
id|bdrkreg_t
id|i_llp_en
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_bm8
id|bdrkreg_t
id|i_bm8
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_llp_stat
id|bdrkreg_t
id|i_llp_stat
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_remote_power
id|bdrkreg_t
id|i_remote_power
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_maxrtry
id|bdrkreg_t
id|i_maxrtry
suffix:colon
l_int|10
suffix:semicolon
DECL|member|i_d_avail_sel
id|bdrkreg_t
id|i_d_avail_sel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_maxbrst
id|bdrkreg_t
id|i_maxbrst
suffix:colon
l_int|10
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|22
suffix:semicolon
DECL|member|ii_ilcsr_fld_s
)brace
id|ii_ilcsr_fld_s
suffix:semicolon
DECL|typedef|ii_ilcsr_u_t
)brace
id|ii_ilcsr_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ilcsr_u
r_typedef
r_union
id|ii_ilcsr_u
(brace
DECL|member|ii_ilcsr_regval
id|bdrkreg_t
id|ii_ilcsr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|22
suffix:semicolon
DECL|member|i_maxbrst
id|bdrkreg_t
id|i_maxbrst
suffix:colon
l_int|10
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_d_avail_sel
id|bdrkreg_t
id|i_d_avail_sel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_maxrtry
id|bdrkreg_t
id|i_maxrtry
suffix:colon
l_int|10
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_remote_power
id|bdrkreg_t
id|i_remote_power
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_llp_stat
id|bdrkreg_t
id|i_llp_stat
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_bm8
id|bdrkreg_t
id|i_bm8
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_llp_en
id|bdrkreg_t
id|i_llp_en
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_3
id|bdrkreg_t
id|i_rsvd_3
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_wrmrst
id|bdrkreg_t
id|i_wrmrst
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_4
id|bdrkreg_t
id|i_rsvd_4
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nullto
id|bdrkreg_t
id|i_nullto
suffix:colon
l_int|6
suffix:semicolon
DECL|member|ii_ilcsr_fld_s
)brace
id|ii_ilcsr_fld_s
suffix:semicolon
DECL|typedef|ii_ilcsr_u_t
)brace
id|ii_ilcsr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This is simply a status registers that monitors the LLP error       *&n; * rate.                                                                *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_illr_u
r_typedef
r_union
id|ii_illr_u
(brace
DECL|member|ii_illr_regval
id|bdrkreg_t
id|ii_illr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_sn_cnt
id|bdrkreg_t
id|i_sn_cnt
suffix:colon
l_int|16
suffix:semicolon
DECL|member|i_cb_cnt
id|bdrkreg_t
id|i_cb_cnt
suffix:colon
l_int|16
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|32
suffix:semicolon
DECL|member|ii_illr_fld_s
)brace
id|ii_illr_fld_s
suffix:semicolon
DECL|typedef|ii_illr_u_t
)brace
id|ii_illr_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_illr_u
r_typedef
r_union
id|ii_illr_u
(brace
DECL|member|ii_illr_regval
id|bdrkreg_t
id|ii_illr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|32
suffix:semicolon
DECL|member|i_cb_cnt
id|bdrkreg_t
id|i_cb_cnt
suffix:colon
l_int|16
suffix:semicolon
DECL|member|i_sn_cnt
id|bdrkreg_t
id|i_sn_cnt
suffix:colon
l_int|16
suffix:semicolon
DECL|member|ii_illr_fld_s
)brace
id|ii_illr_fld_s
suffix:semicolon
DECL|typedef|ii_illr_u_t
)brace
id|ii_illr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  All II-detected non-BTE error interrupts are           *&n; * specified via this register.                                         *&n; * NOTE: The PI interrupt register address is hardcoded in the II. If   *&n; * PI_ID==0, then the II sends an interrupt request (Duplonet PWRI      *&n; * packet) to address offset 0x0180_0090 within the local register      *&n; * address space of PI0 on the node specified by the NODE field. If     *&n; * PI_ID==1, then the II sends the interrupt request to address         *&n; * offset 0x01A0_0090 within the local register address space of PI1    *&n; * on the node specified by the NODE field.                             *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iidsr_u
r_typedef
r_union
id|ii_iidsr_u
(brace
DECL|member|ii_iidsr_regval
id|bdrkreg_t
id|ii_iidsr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_level
id|bdrkreg_t
id|i_level
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_rsvd_4
id|bdrkreg_t
id|i_rsvd_4
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_pi_id
id|bdrkreg_t
id|i_pi_id
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_node
id|bdrkreg_t
id|i_node
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd_3
id|bdrkreg_t
id|i_rsvd_3
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_enable
id|bdrkreg_t
id|i_enable
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_int_sent
id|bdrkreg_t
id|i_int_sent
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_pi0_forward_int
id|bdrkreg_t
id|i_pi0_forward_int
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_pi1_forward_int
id|bdrkreg_t
id|i_pi1_forward_int
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|30
suffix:semicolon
DECL|member|ii_iidsr_fld_s
)brace
id|ii_iidsr_fld_s
suffix:semicolon
DECL|typedef|ii_iidsr_u_t
)brace
id|ii_iidsr_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iidsr_u
r_typedef
r_union
id|ii_iidsr_u
(brace
DECL|member|ii_iidsr_regval
id|bdrkreg_t
id|ii_iidsr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|30
suffix:semicolon
DECL|member|i_pi1_forward_int
id|bdrkreg_t
id|i_pi1_forward_int
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_pi0_forward_int
id|bdrkreg_t
id|i_pi0_forward_int
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_int_sent
id|bdrkreg_t
id|i_int_sent
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_enable
id|bdrkreg_t
id|i_enable
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_3
id|bdrkreg_t
id|i_rsvd_3
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_node
id|bdrkreg_t
id|i_node
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_pi_id
id|bdrkreg_t
id|i_pi_id
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_4
id|bdrkreg_t
id|i_rsvd_4
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_level
id|bdrkreg_t
id|i_level
suffix:colon
l_int|7
suffix:semicolon
DECL|member|ii_iidsr_fld_s
)brace
id|ii_iidsr_fld_s
suffix:semicolon
DECL|typedef|ii_iidsr_u_t
)brace
id|ii_iidsr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are two instances of this register. This register is used     *&n; * for matching up the incoming responses from the graphics widget to   *&n; * the processor that initiated the graphics operation. The             *&n; * write-responses are converted to graphics credits and returned to    *&n; * the processor so that the processor interface can manage the flow    *&n; * control.                                                             *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_igfx0_u
r_typedef
r_union
id|ii_igfx0_u
(brace
DECL|member|ii_igfx0_regval
id|bdrkreg_t
id|ii_igfx0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_pi_id
id|bdrkreg_t
id|i_pi_id
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_n_num
id|bdrkreg_t
id|i_n_num
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_p_num
id|bdrkreg_t
id|i_p_num
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|47
suffix:semicolon
DECL|member|ii_igfx0_fld_s
)brace
id|ii_igfx0_fld_s
suffix:semicolon
DECL|typedef|ii_igfx0_u_t
)brace
id|ii_igfx0_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_igfx0_u
r_typedef
r_union
id|ii_igfx0_u
(brace
DECL|member|ii_igfx0_regval
id|bdrkreg_t
id|ii_igfx0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|47
suffix:semicolon
DECL|member|i_p_num
id|bdrkreg_t
id|i_p_num
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_n_num
id|bdrkreg_t
id|i_n_num
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_pi_id
id|bdrkreg_t
id|i_pi_id
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ii_igfx0_fld_s
)brace
id|ii_igfx0_fld_s
suffix:semicolon
DECL|typedef|ii_igfx0_u_t
)brace
id|ii_igfx0_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are two instances of this register. This register is used     *&n; * for matching up the incoming responses from the graphics widget to   *&n; * the processor that initiated the graphics operation. The             *&n; * write-responses are converted to graphics credits and returned to    *&n; * the processor so that the processor interface can manage the flow    *&n; * control.                                                             *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_igfx1_u
r_typedef
r_union
id|ii_igfx1_u
(brace
DECL|member|ii_igfx1_regval
id|bdrkreg_t
id|ii_igfx1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_pi_id
id|bdrkreg_t
id|i_pi_id
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_n_num
id|bdrkreg_t
id|i_n_num
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_p_num
id|bdrkreg_t
id|i_p_num
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|47
suffix:semicolon
DECL|member|ii_igfx1_fld_s
)brace
id|ii_igfx1_fld_s
suffix:semicolon
DECL|typedef|ii_igfx1_u_t
)brace
id|ii_igfx1_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_igfx1_u
r_typedef
r_union
id|ii_igfx1_u
(brace
DECL|member|ii_igfx1_regval
id|bdrkreg_t
id|ii_igfx1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|47
suffix:semicolon
DECL|member|i_p_num
id|bdrkreg_t
id|i_p_num
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_n_num
id|bdrkreg_t
id|i_n_num
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_pi_id
id|bdrkreg_t
id|i_pi_id
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ii_igfx1_fld_s
)brace
id|ii_igfx1_fld_s
suffix:semicolon
DECL|typedef|ii_igfx1_u_t
)brace
id|ii_igfx1_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are two instances of this registers. These registers are      *&n; * used as scratch registers for software use.                          *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iscr0_u
r_typedef
r_union
id|ii_iscr0_u
(brace
DECL|member|ii_iscr0_regval
id|bdrkreg_t
id|ii_iscr0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_scratch
id|bdrkreg_t
id|i_scratch
suffix:colon
l_int|64
suffix:semicolon
DECL|member|ii_iscr0_fld_s
)brace
id|ii_iscr0_fld_s
suffix:semicolon
DECL|typedef|ii_iscr0_u_t
)brace
id|ii_iscr0_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are two instances of this registers. These registers are      *&n; * used as scratch registers for software use.                          *&n; *                                                                      *&n; ************************************************************************/
DECL|union|ii_iscr1_u
r_typedef
r_union
id|ii_iscr1_u
(brace
DECL|member|ii_iscr1_regval
id|bdrkreg_t
id|ii_iscr1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_scratch
id|bdrkreg_t
id|i_scratch
suffix:colon
l_int|64
suffix:semicolon
DECL|member|ii_iscr1_fld_s
)brace
id|ii_iscr1_fld_s
suffix:semicolon
DECL|typedef|ii_iscr1_u_t
)brace
id|ii_iscr1_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are seven instances of translation table entry   *&n; * registers. Each register maps a Bedrock Big Window to a 48-bit       *&n; * address on Crosstalk.                                                *&n; * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *&n; * number) are used to select one of these 7 registers. The Widget      *&n; * number field is then derived from the W_NUM field for synthesizing   *&n; * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *&n; * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *&n; * are padded with zeros. Although the maximum Crosstalk space          *&n; * addressable by the Bedrock is thus the lower 16 GBytes per widget    *&n; * (M-mode), however only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt; of this       *&n; * space can be accessed.                                               *&n; * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *&n; * Window number) are used to select one of these 7 registers. The      *&n; * Widget number field is then derived from the W_NUM field for         *&n; * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *&n; * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *&n; * field is used as Crosstalk[47], and remainder of the Crosstalk       *&n; * address bits (Crosstalk[46:34]) are always zero. While the maximum   *&n; * Crosstalk space addressable by the Bedrock is thus the lower         *&n; * 8-GBytes per widget (N-mode), only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt;   *&n; * of this space can be accessed.                                       *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_itte1_u
r_typedef
r_union
id|ii_itte1_u
(brace
DECL|member|ii_itte1_regval
id|bdrkreg_t
id|ii_itte1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_offset
id|bdrkreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_iosp
id|bdrkreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_itte1_fld_s
)brace
id|ii_itte1_fld_s
suffix:semicolon
DECL|typedef|ii_itte1_u_t
)brace
id|ii_itte1_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_itte1_u
r_typedef
r_union
id|ii_itte1_u
(brace
DECL|member|ii_itte1_regval
id|bdrkreg_t
id|ii_itte1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|i_iosp
id|bdrkreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_offset
id|bdrkreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ii_itte1_fld_s
)brace
id|ii_itte1_fld_s
suffix:semicolon
DECL|typedef|ii_itte1_u_t
)brace
id|ii_itte1_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are seven instances of translation table entry   *&n; * registers. Each register maps a Bedrock Big Window to a 48-bit       *&n; * address on Crosstalk.                                                *&n; * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *&n; * number) are used to select one of these 7 registers. The Widget      *&n; * number field is then derived from the W_NUM field for synthesizing   *&n; * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *&n; * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *&n; * are padded with zeros. Although the maximum Crosstalk space          *&n; * addressable by the Bedrock is thus the lower 16 GBytes per widget    *&n; * (M-mode), however only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt; of this       *&n; * space can be accessed.                                               *&n; * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *&n; * Window number) are used to select one of these 7 registers. The      *&n; * Widget number field is then derived from the W_NUM field for         *&n; * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *&n; * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *&n; * field is used as Crosstalk[47], and remainder of the Crosstalk       *&n; * address bits (Crosstalk[46:34]) are always zero. While the maximum   *&n; * Crosstalk space addressable by the Bedrock is thus the lower         *&n; * 8-GBytes per widget (N-mode), only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt;   *&n; * of this space can be accessed.                                       *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_itte2_u
r_typedef
r_union
id|ii_itte2_u
(brace
DECL|member|ii_itte2_regval
id|bdrkreg_t
id|ii_itte2_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_offset
id|bdrkreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_iosp
id|bdrkreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_itte2_fld_s
)brace
id|ii_itte2_fld_s
suffix:semicolon
DECL|typedef|ii_itte2_u_t
)brace
id|ii_itte2_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_itte2_u
r_typedef
r_union
id|ii_itte2_u
(brace
DECL|member|ii_itte2_regval
id|bdrkreg_t
id|ii_itte2_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|i_iosp
id|bdrkreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_offset
id|bdrkreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ii_itte2_fld_s
)brace
id|ii_itte2_fld_s
suffix:semicolon
DECL|typedef|ii_itte2_u_t
)brace
id|ii_itte2_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are seven instances of translation table entry   *&n; * registers. Each register maps a Bedrock Big Window to a 48-bit       *&n; * address on Crosstalk.                                                *&n; * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *&n; * number) are used to select one of these 7 registers. The Widget      *&n; * number field is then derived from the W_NUM field for synthesizing   *&n; * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *&n; * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *&n; * are padded with zeros. Although the maximum Crosstalk space          *&n; * addressable by the Bedrock is thus the lower 16 GBytes per widget    *&n; * (M-mode), however only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt; of this       *&n; * space can be accessed.                                               *&n; * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *&n; * Window number) are used to select one of these 7 registers. The      *&n; * Widget number field is then derived from the W_NUM field for         *&n; * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *&n; * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *&n; * field is used as Crosstalk[47], and remainder of the Crosstalk       *&n; * address bits (Crosstalk[46:34]) are always zero. While the maximum   *&n; * Crosstalk space addressable by the Bedrock is thus the lower         *&n; * 8-GBytes per widget (N-mode), only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt;   *&n; * of this space can be accessed.                                       *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_itte3_u
r_typedef
r_union
id|ii_itte3_u
(brace
DECL|member|ii_itte3_regval
id|bdrkreg_t
id|ii_itte3_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_offset
id|bdrkreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_iosp
id|bdrkreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_itte3_fld_s
)brace
id|ii_itte3_fld_s
suffix:semicolon
DECL|typedef|ii_itte3_u_t
)brace
id|ii_itte3_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_itte3_u
r_typedef
r_union
id|ii_itte3_u
(brace
DECL|member|ii_itte3_regval
id|bdrkreg_t
id|ii_itte3_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|i_iosp
id|bdrkreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_offset
id|bdrkreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ii_itte3_fld_s
)brace
id|ii_itte3_fld_s
suffix:semicolon
DECL|typedef|ii_itte3_u_t
)brace
id|ii_itte3_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are seven instances of translation table entry   *&n; * registers. Each register maps a Bedrock Big Window to a 48-bit       *&n; * address on Crosstalk.                                                *&n; * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *&n; * number) are used to select one of these 7 registers. The Widget      *&n; * number field is then derived from the W_NUM field for synthesizing   *&n; * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *&n; * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *&n; * are padded with zeros. Although the maximum Crosstalk space          *&n; * addressable by the Bedrock is thus the lower 16 GBytes per widget    *&n; * (M-mode), however only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt; of this       *&n; * space can be accessed.                                               *&n; * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *&n; * Window number) are used to select one of these 7 registers. The      *&n; * Widget number field is then derived from the W_NUM field for         *&n; * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *&n; * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *&n; * field is used as Crosstalk[47], and remainder of the Crosstalk       *&n; * address bits (Crosstalk[46:34]) are always zero. While the maximum   *&n; * Crosstalk space addressable by the Bedrock is thus the lower         *&n; * 8-GBytes per widget (N-mode), only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt;   *&n; * of this space can be accessed.                                       *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_itte4_u
r_typedef
r_union
id|ii_itte4_u
(brace
DECL|member|ii_itte4_regval
id|bdrkreg_t
id|ii_itte4_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_offset
id|bdrkreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_iosp
id|bdrkreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_itte4_fld_s
)brace
id|ii_itte4_fld_s
suffix:semicolon
DECL|typedef|ii_itte4_u_t
)brace
id|ii_itte4_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_itte4_u
r_typedef
r_union
id|ii_itte4_u
(brace
DECL|member|ii_itte4_regval
id|bdrkreg_t
id|ii_itte4_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|i_iosp
id|bdrkreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_offset
id|bdrkreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ii_itte4_fld_s
)brace
id|ii_itte4_fld_s
suffix:semicolon
DECL|typedef|ii_itte4_u_t
)brace
id|ii_itte4_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are seven instances of translation table entry   *&n; * registers. Each register maps a Bedrock Big Window to a 48-bit       *&n; * address on Crosstalk.                                                *&n; * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *&n; * number) are used to select one of these 7 registers. The Widget      *&n; * number field is then derived from the W_NUM field for synthesizing   *&n; * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *&n; * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *&n; * are padded with zeros. Although the maximum Crosstalk space          *&n; * addressable by the Bedrock is thus the lower 16 GBytes per widget    *&n; * (M-mode), however only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt; of this       *&n; * space can be accessed.                                               *&n; * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *&n; * Window number) are used to select one of these 7 registers. The      *&n; * Widget number field is then derived from the W_NUM field for         *&n; * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *&n; * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *&n; * field is used as Crosstalk[47], and remainder of the Crosstalk       *&n; * address bits (Crosstalk[46:34]) are always zero. While the maximum   *&n; * Crosstalk space addressable by the Bedrock is thus the lower         *&n; * 8-GBytes per widget (N-mode), only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt;   *&n; * of this space can be accessed.                                       *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_itte5_u
r_typedef
r_union
id|ii_itte5_u
(brace
DECL|member|ii_itte5_regval
id|bdrkreg_t
id|ii_itte5_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_offset
id|bdrkreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_iosp
id|bdrkreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_itte5_fld_s
)brace
id|ii_itte5_fld_s
suffix:semicolon
DECL|typedef|ii_itte5_u_t
)brace
id|ii_itte5_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_itte5_u
r_typedef
r_union
id|ii_itte5_u
(brace
DECL|member|ii_itte5_regval
id|bdrkreg_t
id|ii_itte5_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|i_iosp
id|bdrkreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_offset
id|bdrkreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ii_itte5_fld_s
)brace
id|ii_itte5_fld_s
suffix:semicolon
DECL|typedef|ii_itte5_u_t
)brace
id|ii_itte5_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are seven instances of translation table entry   *&n; * registers. Each register maps a Bedrock Big Window to a 48-bit       *&n; * address on Crosstalk.                                                *&n; * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *&n; * number) are used to select one of these 7 registers. The Widget      *&n; * number field is then derived from the W_NUM field for synthesizing   *&n; * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *&n; * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *&n; * are padded with zeros. Although the maximum Crosstalk space          *&n; * addressable by the Bedrock is thus the lower 16 GBytes per widget    *&n; * (M-mode), however only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt; of this       *&n; * space can be accessed.                                               *&n; * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *&n; * Window number) are used to select one of these 7 registers. The      *&n; * Widget number field is then derived from the W_NUM field for         *&n; * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *&n; * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *&n; * field is used as Crosstalk[47], and remainder of the Crosstalk       *&n; * address bits (Crosstalk[46:34]) are always zero. While the maximum   *&n; * Crosstalk space addressable by the Bedrock is thus the lower         *&n; * 8-GBytes per widget (N-mode), only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt;   *&n; * of this space can be accessed.                                       *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_itte6_u
r_typedef
r_union
id|ii_itte6_u
(brace
DECL|member|ii_itte6_regval
id|bdrkreg_t
id|ii_itte6_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_offset
id|bdrkreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_iosp
id|bdrkreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_itte6_fld_s
)brace
id|ii_itte6_fld_s
suffix:semicolon
DECL|typedef|ii_itte6_u_t
)brace
id|ii_itte6_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_itte6_u
r_typedef
r_union
id|ii_itte6_u
(brace
DECL|member|ii_itte6_regval
id|bdrkreg_t
id|ii_itte6_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|i_iosp
id|bdrkreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_offset
id|bdrkreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ii_itte6_fld_s
)brace
id|ii_itte6_fld_s
suffix:semicolon
DECL|typedef|ii_itte6_u_t
)brace
id|ii_itte6_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are seven instances of translation table entry   *&n; * registers. Each register maps a Bedrock Big Window to a 48-bit       *&n; * address on Crosstalk.                                                *&n; * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *&n; * number) are used to select one of these 7 registers. The Widget      *&n; * number field is then derived from the W_NUM field for synthesizing   *&n; * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *&n; * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *&n; * are padded with zeros. Although the maximum Crosstalk space          *&n; * addressable by the Bedrock is thus the lower 16 GBytes per widget    *&n; * (M-mode), however only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt; of this       *&n; * space can be accessed.                                               *&n; * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *&n; * Window number) are used to select one of these 7 registers. The      *&n; * Widget number field is then derived from the W_NUM field for         *&n; * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *&n; * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *&n; * field is used as Crosstalk[47], and remainder of the Crosstalk       *&n; * address bits (Crosstalk[46:34]) are always zero. While the maximum   *&n; * Crosstalk space addressable by the Bedrock is thus the lower         *&n; * 8-GBytes per widget (N-mode), only &lt;SUP &gt;7&lt;/SUP&gt;/&lt;SUB &gt;32nds&lt;/SUB&gt;   *&n; * of this space can be accessed.                                       *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_itte7_u
r_typedef
r_union
id|ii_itte7_u
(brace
DECL|member|ii_itte7_regval
id|bdrkreg_t
id|ii_itte7_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_offset
id|bdrkreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_iosp
id|bdrkreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_itte7_fld_s
)brace
id|ii_itte7_fld_s
suffix:semicolon
DECL|typedef|ii_itte7_u_t
)brace
id|ii_itte7_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_itte7_u
r_typedef
r_union
id|ii_itte7_u
(brace
DECL|member|ii_itte7_regval
id|bdrkreg_t
id|ii_itte7_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|i_iosp
id|bdrkreg_t
id|i_iosp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_w_num
id|bdrkreg_t
id|i_w_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_offset
id|bdrkreg_t
id|i_offset
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ii_itte7_fld_s
)brace
id|ii_itte7_fld_s
suffix:semicolon
DECL|typedef|ii_itte7_u_t
)brace
id|ii_itte7_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of Bedrock and Crossbow.        *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprb0_u
r_typedef
r_union
id|ii_iprb0_u
(brace
DECL|member|ii_iprb0_regval
id|bdrkreg_t
id|ii_iprb0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprb0_fld_s
)brace
id|ii_iprb0_fld_s
suffix:semicolon
DECL|typedef|ii_iprb0_u_t
)brace
id|ii_iprb0_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprb0_u
r_typedef
r_union
id|ii_iprb0_u
(brace
DECL|member|ii_iprb0_regval
id|bdrkreg_t
id|ii_iprb0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_iprb0_fld_s
)brace
id|ii_iprb0_fld_s
suffix:semicolon
DECL|typedef|ii_iprb0_u_t
)brace
id|ii_iprb0_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of Bedrock and Crossbow.        *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprb8_u
r_typedef
r_union
id|ii_iprb8_u
(brace
DECL|member|ii_iprb8_regval
id|bdrkreg_t
id|ii_iprb8_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprb8_fld_s
)brace
id|ii_iprb8_fld_s
suffix:semicolon
DECL|typedef|ii_iprb8_u_t
)brace
id|ii_iprb8_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprb8_u
r_typedef
r_union
id|ii_iprb8_u
(brace
DECL|member|ii_iprb8_regval
id|bdrkreg_t
id|ii_iprb8_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_iprb8_fld_s
)brace
id|ii_iprb8_fld_s
suffix:semicolon
DECL|typedef|ii_iprb8_u_t
)brace
id|ii_iprb8_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of Bedrock and Crossbow.        *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprb9_u
r_typedef
r_union
id|ii_iprb9_u
(brace
DECL|member|ii_iprb9_regval
id|bdrkreg_t
id|ii_iprb9_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprb9_fld_s
)brace
id|ii_iprb9_fld_s
suffix:semicolon
DECL|typedef|ii_iprb9_u_t
)brace
id|ii_iprb9_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprb9_u
r_typedef
r_union
id|ii_iprb9_u
(brace
DECL|member|ii_iprb9_regval
id|bdrkreg_t
id|ii_iprb9_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_iprb9_fld_s
)brace
id|ii_iprb9_fld_s
suffix:semicolon
DECL|typedef|ii_iprb9_u_t
)brace
id|ii_iprb9_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of Bedrock and Crossbow.        *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprba_u
r_typedef
r_union
id|ii_iprba_u
(brace
DECL|member|ii_iprba_regval
id|bdrkreg_t
id|ii_iprba_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprba_fld_s
)brace
id|ii_iprba_fld_s
suffix:semicolon
DECL|typedef|ii_iprba_u_t
)brace
id|ii_iprba_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprba_u
r_typedef
r_union
id|ii_iprba_u
(brace
DECL|member|ii_iprba_regval
id|bdrkreg_t
id|ii_iprba_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_iprba_fld_s
)brace
id|ii_iprba_fld_s
suffix:semicolon
DECL|typedef|ii_iprba_u_t
)brace
id|ii_iprba_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of Bedrock and Crossbow.        *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprbb_u
r_typedef
r_union
id|ii_iprbb_u
(brace
DECL|member|ii_iprbb_regval
id|bdrkreg_t
id|ii_iprbb_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprbb_fld_s
)brace
id|ii_iprbb_fld_s
suffix:semicolon
DECL|typedef|ii_iprbb_u_t
)brace
id|ii_iprbb_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprbb_u
r_typedef
r_union
id|ii_iprbb_u
(brace
DECL|member|ii_iprbb_regval
id|bdrkreg_t
id|ii_iprbb_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_iprbb_fld_s
)brace
id|ii_iprbb_fld_s
suffix:semicolon
DECL|typedef|ii_iprbb_u_t
)brace
id|ii_iprbb_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of Bedrock and Crossbow.        *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprbc_u
r_typedef
r_union
id|ii_iprbc_u
(brace
DECL|member|ii_iprbc_regval
id|bdrkreg_t
id|ii_iprbc_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprbc_fld_s
)brace
id|ii_iprbc_fld_s
suffix:semicolon
DECL|typedef|ii_iprbc_u_t
)brace
id|ii_iprbc_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprbc_u
r_typedef
r_union
id|ii_iprbc_u
(brace
DECL|member|ii_iprbc_regval
id|bdrkreg_t
id|ii_iprbc_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_iprbc_fld_s
)brace
id|ii_iprbc_fld_s
suffix:semicolon
DECL|typedef|ii_iprbc_u_t
)brace
id|ii_iprbc_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of Bedrock and Crossbow.        *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprbd_u
r_typedef
r_union
id|ii_iprbd_u
(brace
DECL|member|ii_iprbd_regval
id|bdrkreg_t
id|ii_iprbd_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprbd_fld_s
)brace
id|ii_iprbd_fld_s
suffix:semicolon
DECL|typedef|ii_iprbd_u_t
)brace
id|ii_iprbd_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprbd_u
r_typedef
r_union
id|ii_iprbd_u
(brace
DECL|member|ii_iprbd_regval
id|bdrkreg_t
id|ii_iprbd_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_iprbd_fld_s
)brace
id|ii_iprbd_fld_s
suffix:semicolon
DECL|typedef|ii_iprbd_u_t
)brace
id|ii_iprbd_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of Bedrock and Crossbow.        *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprbe_u
r_typedef
r_union
id|ii_iprbe_u
(brace
DECL|member|ii_iprbe_regval
id|bdrkreg_t
id|ii_iprbe_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprbe_fld_s
)brace
id|ii_iprbe_fld_s
suffix:semicolon
DECL|typedef|ii_iprbe_u_t
)brace
id|ii_iprbe_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprbe_u
r_typedef
r_union
id|ii_iprbe_u
(brace
DECL|member|ii_iprbe_regval
id|bdrkreg_t
id|ii_iprbe_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_iprbe_fld_s
)brace
id|ii_iprbe_fld_s
suffix:semicolon
DECL|typedef|ii_iprbe_u_t
)brace
id|ii_iprbe_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 9 instances of this register, one per        *&n; * actual widget in this implementation of Bedrock and Crossbow.        *&n; * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *&n; * refers to Crossbow&squot;s internal space.                                 *&n; * This register contains the state elements per widget that are        *&n; * necessary to manage the PIO flow control on Crosstalk and on the     *&n; * Router Network. See the PIO Flow Control chapter for a complete      *&n; * description of this register                                         *&n; * The SPUR_WR bit requires some explanation. When this register is     *&n; * written, the new value of the C field is captured in an internal     *&n; * register so the hardware can remember what the programmer wrote      *&n; * into the credit counter. The SPUR_WR bit sets whenever the C field   *&n; * increments above this stored value, which indicates that there       *&n; * have been more responses received than requests sent. The SPUR_WR    *&n; * bit cannot be cleared until a value is written to the IPRBx          *&n; * register; the write will correct the C field and capture its new     *&n; * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *&n; * SPUR_WR bit will persist if IPRBx hasn&squot;t yet been written.           *&n; * .                                                                    *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprbf_u
r_typedef
r_union
id|ii_iprbf_u
(brace
DECL|member|ii_iprbf_regval
id|bdrkreg_t
id|ii_iprbf_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprbe_fld_s
)brace
id|ii_iprbe_fld_s
suffix:semicolon
DECL|typedef|ii_iprbf_u_t
)brace
id|ii_iprbf_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprbf_u
r_typedef
r_union
id|ii_iprbf_u
(brace
DECL|member|ii_iprbf_regval
id|bdrkreg_t
id|ii_iprbf_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_mult_err
id|bdrkreg_t
id|i_mult_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_spur_rd
id|bdrkreg_t
id|i_spur_rd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_wr
id|bdrkreg_t
id|i_spur_wr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_to
id|bdrkreg_t
id|i_rd_to
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_of_cnt
id|bdrkreg_t
id|i_of_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_f
id|bdrkreg_t
id|i_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_m
id|bdrkreg_t
id|i_m
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_nb
id|bdrkreg_t
id|i_nb
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_na
id|bdrkreg_t
id|i_na
suffix:colon
l_int|14
suffix:semicolon
DECL|member|i_c
id|bdrkreg_t
id|i_c
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_iprbf_fld_s
)brace
id|ii_iprbf_fld_s
suffix:semicolon
DECL|typedef|ii_iprbf_u_t
)brace
id|ii_iprbf_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register specifies the timeout value to use for monitoring     *&n; * Crosstalk credits which are used outbound to Crosstalk. An           *&n; * internal counter called the Crosstalk Credit Timeout Counter         *&n; * increments every 128 II clocks. The counter starts counting          *&n; * anytime the credit count drops below a threshold, and resets to      *&n; * zero (stops counting) anytime the credit count is at or above the    *&n; * threshold. The threshold is 1 credit in direct connect mode and 2    *&n; * in Crossbow connect mode. When the internal Crosstalk Credit         *&n; * Timeout Counter reaches the value programmed in this register, a     *&n; * Crosstalk Credit Timeout has occurred. The internal counter is not   *&n; * readable from software, and stops counting at its maximum value,     *&n; * so it cannot cause more than one interrupt.                          *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ixcc_u
r_typedef
r_union
id|ii_ixcc_u
(brace
DECL|member|ii_ixcc_regval
id|bdrkreg_t
id|ii_ixcc_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_time_out
id|bdrkreg_t
id|i_time_out
suffix:colon
l_int|26
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|38
suffix:semicolon
DECL|member|ii_ixcc_fld_s
)brace
id|ii_ixcc_fld_s
suffix:semicolon
DECL|typedef|ii_ixcc_u_t
)brace
id|ii_ixcc_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ixcc_u
r_typedef
r_union
id|ii_ixcc_u
(brace
DECL|member|ii_ixcc_regval
id|bdrkreg_t
id|ii_ixcc_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_time_out
id|bdrkreg_t
id|i_time_out
suffix:colon
l_int|26
suffix:semicolon
DECL|member|ii_ixcc_fld_s
)brace
id|ii_ixcc_fld_s
suffix:semicolon
DECL|typedef|ii_ixcc_u_t
)brace
id|ii_ixcc_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register qualifies all the PIO and DMA            *&n; * operations launched from widget 0 towards the Bedrock. In            *&n; * addition, it also qualifies accesses by the BTE streams.             *&n; * The bits in each field of this register are cleared by the Bedrock   *&n; * upon detection of an error which requires widget 0 or the BTE        *&n; * streams to be terminated. Whether or not widget x has access         *&n; * rights to this Bedrock is determined by an AND of the device         *&n; * enable bit in the appropriate field of this register and bit 0 in    *&n; * the Wx_IAC field. The bits in this field are set by writing a 1 to   *&n; * them. Incoming replies from Crosstalk are not subject to this        *&n; * access control mechanism.                                            *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_imem_u
r_typedef
r_union
id|ii_imem_u
(brace
DECL|member|ii_imem_regval
id|bdrkreg_t
id|ii_imem_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_w0_esd
id|bdrkreg_t
id|i_w0_esd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_3
id|bdrkreg_t
id|i_rsvd_3
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_b0_esd
id|bdrkreg_t
id|i_b0_esd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_b1_esd
id|bdrkreg_t
id|i_b1_esd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_clr_precise
id|bdrkreg_t
id|i_clr_precise
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|ii_imem_fld_s
)brace
id|ii_imem_fld_s
suffix:semicolon
DECL|typedef|ii_imem_u_t
)brace
id|ii_imem_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_imem_u
r_typedef
r_union
id|ii_imem_u
(brace
DECL|member|ii_imem_regval
id|bdrkreg_t
id|ii_imem_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|51
suffix:semicolon
DECL|member|i_clr_precise
id|bdrkreg_t
id|i_clr_precise
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_b1_esd
id|bdrkreg_t
id|i_b1_esd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_b0_esd
id|bdrkreg_t
id|i_b0_esd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_3
id|bdrkreg_t
id|i_rsvd_3
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_w0_esd
id|bdrkreg_t
id|i_w0_esd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_imem_fld_s
)brace
id|ii_imem_fld_s
suffix:semicolon
DECL|typedef|ii_imem_u_t
)brace
id|ii_imem_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register specifies the timeout value to use for   *&n; * monitoring Crosstalk tail flits coming into the Bedrock in the       *&n; * TAIL_TO field. An internal counter associated with this register     *&n; * is incremented every 128 II internal clocks (7 bits). The counter    *&n; * starts counting anytime a header micropacket is received and stops   *&n; * counting (and resets to zero) any time a micropacket with a Tail     *&n; * bit is received. Once the counter reaches the threshold value        *&n; * programmed in this register, it generates an interrupt to the        *&n; * processor that is programmed into the IIDSR. The counter saturates   *&n; * (does not roll over) at its maximum value, so it cannot cause        *&n; * another interrupt until after it is cleared.                         *&n; * The register also contains the Read Response Timeout values. The     *&n; * Prescalar is 23 bits, and counts II clocks. An internal counter      *&n; * increments on every II clock and when it reaches the value in the    *&n; * Prescalar field, all IPRTE registers with their valid bits set       *&n; * have their Read Response timers bumped. Whenever any of them match   *&n; * the value in the RRSP_TO field, a Read Response Timeout has          *&n; * occurred, and error handling occurs as described in the Error        *&n; * Handling section of this document.                                   *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ixtt_u
r_typedef
r_union
id|ii_ixtt_u
(brace
DECL|member|ii_ixtt_regval
id|bdrkreg_t
id|ii_ixtt_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_tail_to
id|bdrkreg_t
id|i_tail_to
suffix:colon
l_int|26
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|6
suffix:semicolon
DECL|member|i_rrsp_ps
id|bdrkreg_t
id|i_rrsp_ps
suffix:colon
l_int|23
suffix:semicolon
DECL|member|i_rrsp_to
id|bdrkreg_t
id|i_rrsp_to
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ii_ixtt_fld_s
)brace
id|ii_ixtt_fld_s
suffix:semicolon
DECL|typedef|ii_ixtt_u_t
)brace
id|ii_ixtt_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ixtt_u
r_typedef
r_union
id|ii_ixtt_u
(brace
DECL|member|ii_ixtt_regval
id|bdrkreg_t
id|ii_ixtt_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rrsp_to
id|bdrkreg_t
id|i_rrsp_to
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_rrsp_ps
id|bdrkreg_t
id|i_rrsp_ps
suffix:colon
l_int|23
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|6
suffix:semicolon
DECL|member|i_tail_to
id|bdrkreg_t
id|i_tail_to
suffix:colon
l_int|26
suffix:semicolon
DECL|member|ii_ixtt_fld_s
)brace
id|ii_ixtt_fld_s
suffix:semicolon
DECL|typedef|ii_ixtt_u_t
)brace
id|ii_ixtt_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Writing a 1 to the fields of this register clears the appropriate   *&n; * error bits in other areas of Bedrock_II. Note that when the          *&n; * E_PRB_x bits are used to clear error bits in PRB registers,          *&n; * SPUR_RD and SPUR_WR may persist, because they require additional     *&n; * action to clear them. See the IPRBx and IXSS Register                *&n; * specifications.                                                      *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ieclr_u
r_typedef
r_union
id|ii_ieclr_u
(brace
DECL|member|ii_ieclr_regval
id|bdrkreg_t
id|ii_ieclr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_e_prb_0
id|bdrkreg_t
id|i_e_prb_0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_e_prb_8
id|bdrkreg_t
id|i_e_prb_8
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_9
id|bdrkreg_t
id|i_e_prb_9
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_a
id|bdrkreg_t
id|i_e_prb_a
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_b
id|bdrkreg_t
id|i_e_prb_b
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_c
id|bdrkreg_t
id|i_e_prb_c
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_d
id|bdrkreg_t
id|i_e_prb_d
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_e
id|bdrkreg_t
id|i_e_prb_e
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_f
id|bdrkreg_t
id|i_e_prb_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_crazy
id|bdrkreg_t
id|i_e_crazy
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_bte_0
id|bdrkreg_t
id|i_e_bte_0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_bte_1
id|bdrkreg_t
id|i_e_bte_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_reserved_1
id|bdrkreg_t
id|i_reserved_1
suffix:colon
l_int|9
suffix:semicolon
DECL|member|i_ii_internal
id|bdrkreg_t
id|i_ii_internal
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd_hdr
id|bdrkreg_t
id|i_spur_rd_hdr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_pi0_forward_int
id|bdrkreg_t
id|i_pi0_forward_int
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_pi1_forward_int
id|bdrkreg_t
id|i_pi1_forward_int
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_reserved
id|bdrkreg_t
id|i_reserved
suffix:colon
l_int|32
suffix:semicolon
DECL|member|ii_ieclr_fld_s
)brace
id|ii_ieclr_fld_s
suffix:semicolon
DECL|typedef|ii_ieclr_u_t
)brace
id|ii_ieclr_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ieclr_u
r_typedef
r_union
id|ii_ieclr_u
(brace
DECL|member|ii_ieclr_regval
id|bdrkreg_t
id|ii_ieclr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_reserved
id|bdrkreg_t
id|i_reserved
suffix:colon
l_int|32
suffix:semicolon
DECL|member|i_pi1_forward_int
id|bdrkreg_t
id|i_pi1_forward_int
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_pi0_forward_int
id|bdrkreg_t
id|i_pi0_forward_int
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_spur_rd_hdr
id|bdrkreg_t
id|i_spur_rd_hdr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ii_internal
id|bdrkreg_t
id|i_ii_internal
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_reserved_1
id|bdrkreg_t
id|i_reserved_1
suffix:colon
l_int|9
suffix:semicolon
DECL|member|i_e_bte_1
id|bdrkreg_t
id|i_e_bte_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_bte_0
id|bdrkreg_t
id|i_e_bte_0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_crazy
id|bdrkreg_t
id|i_e_crazy
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_f
id|bdrkreg_t
id|i_e_prb_f
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_e
id|bdrkreg_t
id|i_e_prb_e
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_d
id|bdrkreg_t
id|i_e_prb_d
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_c
id|bdrkreg_t
id|i_e_prb_c
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_b
id|bdrkreg_t
id|i_e_prb_b
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_a
id|bdrkreg_t
id|i_e_prb_a
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_9
id|bdrkreg_t
id|i_e_prb_9
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_e_prb_8
id|bdrkreg_t
id|i_e_prb_8
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_e_prb_0
id|bdrkreg_t
id|i_e_prb_0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_ieclr_fld_s
)brace
id|ii_ieclr_fld_s
suffix:semicolon
DECL|typedef|ii_ieclr_u_t
)brace
id|ii_ieclr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register controls both BTEs. SOFT_RESET is intended for        *&n; * recovery after an error. COUNT controls the total number of CRBs     *&n; * that both BTEs (combined) can use, which affects total BTE           *&n; * bandwidth.                                                           *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ibcr_u
r_typedef
r_union
id|ii_ibcr_u
(brace
DECL|member|ii_ibcr_regval
id|bdrkreg_t
id|ii_ibcr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_count
id|bdrkreg_t
id|i_count
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_soft_reset
id|bdrkreg_t
id|i_soft_reset
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|55
suffix:semicolon
DECL|member|ii_ibcr_fld_s
)brace
id|ii_ibcr_fld_s
suffix:semicolon
DECL|typedef|ii_ibcr_u_t
)brace
id|ii_ibcr_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ibcr_u
r_typedef
r_union
id|ii_ibcr_u
(brace
DECL|member|ii_ibcr_regval
id|bdrkreg_t
id|ii_ibcr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|55
suffix:semicolon
DECL|member|i_soft_reset
id|bdrkreg_t
id|i_soft_reset
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_count
id|bdrkreg_t
id|i_count
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ii_ibcr_fld_s
)brace
id|ii_ibcr_fld_s
suffix:semicolon
DECL|typedef|ii_ibcr_u_t
)brace
id|ii_ibcr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the header of a spurious read response       *&n; * received from Crosstalk. A spurious read response is defined as a    *&n; * read response received by II from a widget for which (1) the SIDN    *&n; * has a value between 1 and 7, inclusive (II never sends requests to   *&n; * these widgets (2) there is no valid IPRTE register which             *&n; * corresponds to the TNUM, or (3) the widget indicated in SIDN is      *&n; * not the same as the widget recorded in the IPRTE register            *&n; * referenced by the TNUM. If this condition is true, and if the        *&n; * IXSS[VALID] bit is clear, then the header of the spurious read       *&n; * response is capture in IXSM and IXSS, and IXSS[VALID] is set. The    *&n; * errant header is thereby captured, and no further spurious read      *&n; * respones are captured until IXSS[VALID] is cleared by setting the    *&n; * appropriate bit in IECLR.Everytime a spurious read response is       *&n; * detected, the SPUR_RD bit of the PRB corresponding to the incoming   *&n; * message&squot;s SIDN field is set. This always happens, regarless of       *&n; * whether a header is captured. The programmer should check            *&n; * IXSM[SIDN] to determine which widget sent the spurious response,     *&n; * because there may be more than one SPUR_RD bit set in the PRB        *&n; * registers. The widget indicated by IXSM[SIDN] was the first          *&n; * spurious read response to be received since the last time            *&n; * IXSS[VALID] was clear. The SPUR_RD bit of the corresponding PRB      *&n; * will be set. Any SPUR_RD bits in any other PRB registers indicate    *&n; * spurious messages from other widets which were detected after the    *&n; * header was captured..                                                *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ixsm_u
r_typedef
r_union
id|ii_ixsm_u
(brace
DECL|member|ii_ixsm_regval
id|bdrkreg_t
id|ii_ixsm_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_byte_en
id|bdrkreg_t
id|i_byte_en
suffix:colon
l_int|32
suffix:semicolon
DECL|member|i_reserved
id|bdrkreg_t
id|i_reserved
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tag
id|bdrkreg_t
id|i_tag
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_alt_pactyp
id|bdrkreg_t
id|i_alt_pactyp
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_bo
id|bdrkreg_t
id|i_bo
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_vbpm
id|bdrkreg_t
id|i_vbpm
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_gbr
id|bdrkreg_t
id|i_gbr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ds
id|bdrkreg_t
id|i_ds
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_ct
id|bdrkreg_t
id|i_ct
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tnum
id|bdrkreg_t
id|i_tnum
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_pactyp
id|bdrkreg_t
id|i_pactyp
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_sidn
id|bdrkreg_t
id|i_sidn
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_didn
id|bdrkreg_t
id|i_didn
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ii_ixsm_fld_s
)brace
id|ii_ixsm_fld_s
suffix:semicolon
DECL|typedef|ii_ixsm_u_t
)brace
id|ii_ixsm_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ixsm_u
r_typedef
r_union
id|ii_ixsm_u
(brace
DECL|member|ii_ixsm_regval
id|bdrkreg_t
id|ii_ixsm_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_didn
id|bdrkreg_t
id|i_didn
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_sidn
id|bdrkreg_t
id|i_sidn
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_pactyp
id|bdrkreg_t
id|i_pactyp
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_tnum
id|bdrkreg_t
id|i_tnum
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_ct
id|bdrkreg_t
id|i_ct
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ds
id|bdrkreg_t
id|i_ds
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_gbr
id|bdrkreg_t
id|i_gbr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_vbpm
id|bdrkreg_t
id|i_vbpm
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_bo
id|bdrkreg_t
id|i_bo
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_alt_pactyp
id|bdrkreg_t
id|i_alt_pactyp
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_tag
id|bdrkreg_t
id|i_tag
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_reserved
id|bdrkreg_t
id|i_reserved
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_byte_en
id|bdrkreg_t
id|i_byte_en
suffix:colon
l_int|32
suffix:semicolon
DECL|member|ii_ixsm_fld_s
)brace
id|ii_ixsm_fld_s
suffix:semicolon
DECL|typedef|ii_ixsm_u_t
)brace
id|ii_ixsm_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the sideband bits of a spurious read         *&n; * response received from Crosstalk.                                    *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ixss_u
r_typedef
r_union
id|ii_ixss_u
(brace
DECL|member|ii_ixss_regval
id|bdrkreg_t
id|ii_ixss_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_sideband
id|bdrkreg_t
id|i_sideband
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|55
suffix:semicolon
DECL|member|i_valid
id|bdrkreg_t
id|i_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_ixss_fld_s
)brace
id|ii_ixss_fld_s
suffix:semicolon
DECL|typedef|ii_ixss_u_t
)brace
id|ii_ixss_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ixss_u
r_typedef
r_union
id|ii_ixss_u
(brace
DECL|member|ii_ixss_regval
id|bdrkreg_t
id|ii_ixss_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_valid
id|bdrkreg_t
id|i_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|55
suffix:semicolon
DECL|member|i_sideband
id|bdrkreg_t
id|i_sideband
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_ixss_fld_s
)brace
id|ii_ixss_fld_s
suffix:semicolon
DECL|typedef|ii_ixss_u_t
)brace
id|ii_ixss_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register enables software to access the II LLP&squot;s test port.    *&n; * Refer to the LLP 2.5 documentation for an explanation of the test    *&n; * port. Software can write to this register to program the values      *&n; * for the control fields (TestErrCapture, TestClear, TestFlit,         *&n; * TestMask and TestSeed). Similarly, software can read from this       *&n; * register to obtain the values of the test port&squot;s status outputs      *&n; * (TestCBerr, TestValid and TestData).                                 *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ilct_u
r_typedef
r_union
id|ii_ilct_u
(brace
DECL|member|ii_ilct_regval
id|bdrkreg_t
id|ii_ilct_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|9
suffix:semicolon
DECL|member|i_test_err_capture
id|bdrkreg_t
id|i_test_err_capture
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_test_clear
id|bdrkreg_t
id|i_test_clear
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_test_flit
id|bdrkreg_t
id|i_test_flit
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_test_cberr
id|bdrkreg_t
id|i_test_cberr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_test_valid
id|bdrkreg_t
id|i_test_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_test_data
id|bdrkreg_t
id|i_test_data
suffix:colon
l_int|20
suffix:semicolon
DECL|member|i_test_mask
id|bdrkreg_t
id|i_test_mask
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_test_seed
id|bdrkreg_t
id|i_test_seed
suffix:colon
l_int|20
suffix:semicolon
DECL|member|ii_ilct_fld_s
)brace
id|ii_ilct_fld_s
suffix:semicolon
DECL|typedef|ii_ilct_u_t
)brace
id|ii_ilct_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ilct_u
r_typedef
r_union
id|ii_ilct_u
(brace
DECL|member|ii_ilct_regval
id|bdrkreg_t
id|ii_ilct_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|9
suffix:semicolon
DECL|member|i_test_err_capture
id|bdrkreg_t
id|i_test_err_capture
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_test_clear
id|bdrkreg_t
id|i_test_clear
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_test_flit
id|bdrkreg_t
id|i_test_flit
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_test_cberr
id|bdrkreg_t
id|i_test_cberr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_test_valid
id|bdrkreg_t
id|i_test_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_test_data
id|bdrkreg_t
id|i_test_data
suffix:colon
l_int|20
suffix:semicolon
DECL|member|i_test_mask
id|bdrkreg_t
id|i_test_mask
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_test_seed
id|bdrkreg_t
id|i_test_seed
suffix:colon
l_int|20
suffix:semicolon
DECL|member|ii_ilct_fld_s
)brace
id|ii_ilct_fld_s
suffix:semicolon
DECL|typedef|ii_ilct_u_t
)brace
id|ii_ilct_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  If the II detects an illegal incoming Duplonet packet (request or   *&n; * reply) when VALID==0 in the IIEPH1 register, then it saves the       *&n; * contents of the packet&squot;s header flit in the IIEPH1 and IIEPH2        *&n; * registers, sets the VALID bit in IIEPH1, clears the OVERRUN bit,     *&n; * and assigns a value to the ERR_TYPE field which indicates the        *&n; * specific nature of the error. The II recognizes four different       *&n; * types of errors: short request packets (ERR_TYPE==2), short reply    *&n; * packets (ERR_TYPE==3), long request packets (ERR_TYPE==4) and long   *&n; * reply packets (ERR_TYPE==5). The encodings for these types of        *&n; * errors were chosen to be consistent with the same types of errors    *&n; * indicated by the ERR_TYPE field in the LB_ERROR_HDR1 register (in    *&n; * the LB unit). If the II detects an illegal incoming Duplonet         *&n; * packet when VALID==1 in the IIEPH1 register, then it merely sets     *&n; * the OVERRUN bit to indicate that a subsequent error has happened,    *&n; * and does nothing further.                                            *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iieph1_u
r_typedef
r_union
id|ii_iieph1_u
(brace
DECL|member|ii_iieph1_regval
id|bdrkreg_t
id|ii_iieph1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_command
id|bdrkreg_t
id|i_command
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_rsvd_5
id|bdrkreg_t
id|i_rsvd_5
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_suppl
id|bdrkreg_t
id|i_suppl
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_rsvd_4
id|bdrkreg_t
id|i_rsvd_4
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_rsvd_3
id|bdrkreg_t
id|i_rsvd_3
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_err_type
id|bdrkreg_t
id|i_err_type
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_overrun
id|bdrkreg_t
id|i_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_valid
id|bdrkreg_t
id|i_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|19
suffix:semicolon
DECL|member|ii_iieph1_fld_s
)brace
id|ii_iieph1_fld_s
suffix:semicolon
DECL|typedef|ii_iieph1_u_t
)brace
id|ii_iieph1_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iieph1_u
r_typedef
r_union
id|ii_iieph1_u
(brace
DECL|member|ii_iieph1_regval
id|bdrkreg_t
id|ii_iieph1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|19
suffix:semicolon
DECL|member|i_valid
id|bdrkreg_t
id|i_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_overrun
id|bdrkreg_t
id|i_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_err_type
id|bdrkreg_t
id|i_err_type
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_3
id|bdrkreg_t
id|i_rsvd_3
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_rsvd_4
id|bdrkreg_t
id|i_rsvd_4
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_suppl
id|bdrkreg_t
id|i_suppl
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_rsvd_5
id|bdrkreg_t
id|i_rsvd_5
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_command
id|bdrkreg_t
id|i_command
suffix:colon
l_int|7
suffix:semicolon
DECL|member|ii_iieph1_fld_s
)brace
id|ii_iieph1_fld_s
suffix:semicolon
DECL|typedef|ii_iieph1_u_t
)brace
id|ii_iieph1_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register holds the Address field from the header flit of an    *&n; * incoming erroneous Duplonet packet, along with the tail bit which    *&n; * accompanied this header flit. This register is essentially an        *&n; * extension of IIEPH1. Two registers were necessary because the 64     *&n; * bits available in only a single register were insufficient to        *&n; * capture the entire header flit of an erroneous packet.               *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iieph2_u
r_typedef
r_union
id|ii_iieph2_u
(brace
DECL|member|ii_iieph2_regval
id|bdrkreg_t
id|ii_iieph2_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_address
id|bdrkreg_t
id|i_address
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_tail
id|bdrkreg_t
id|i_tail
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|23
suffix:semicolon
DECL|member|ii_iieph2_fld_s
)brace
id|ii_iieph2_fld_s
suffix:semicolon
DECL|typedef|ii_iieph2_u_t
)brace
id|ii_iieph2_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iieph2_u
r_typedef
r_union
id|ii_iieph2_u
(brace
DECL|member|ii_iieph2_regval
id|bdrkreg_t
id|ii_iieph2_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|23
suffix:semicolon
DECL|member|i_tail
id|bdrkreg_t
id|i_tail
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_address
id|bdrkreg_t
id|i_address
suffix:colon
l_int|38
suffix:semicolon
DECL|member|ii_iieph2_fld_s
)brace
id|ii_iieph2_fld_s
suffix:semicolon
DECL|typedef|ii_iieph2_u_t
)brace
id|ii_iieph2_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  A write to this register causes a particular field in the           *&n; * corresponding widget&squot;s PRB entry to be adjusted up or down by 1.     *&n; * This counter should be used when recovering from error and reset     *&n; * conditions. Note that software would be capable of causing           *&n; * inadvertent overflow or underflow of these counters.                 *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ipca_u
r_typedef
r_union
id|ii_ipca_u
(brace
DECL|member|ii_ipca_regval
id|bdrkreg_t
id|ii_ipca_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_wid
id|bdrkreg_t
id|i_wid
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_adjust
id|bdrkreg_t
id|i_adjust
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_field
id|bdrkreg_t
id|i_field
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|54
suffix:semicolon
DECL|member|ii_ipca_fld_s
)brace
id|ii_ipca_fld_s
suffix:semicolon
DECL|typedef|ii_ipca_u_t
)brace
id|ii_ipca_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ipca_u
r_typedef
r_union
id|ii_ipca_u
(brace
DECL|member|ii_ipca_regval
id|bdrkreg_t
id|ii_ipca_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|54
suffix:semicolon
DECL|member|i_field
id|bdrkreg_t
id|i_field
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_adjust
id|bdrkreg_t
id|i_adjust
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_wid
id|bdrkreg_t
id|i_wid
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ii_ipca_fld_s
)brace
id|ii_ipca_fld_s
suffix:semicolon
DECL|typedef|ii_ipca_u_t
)brace
id|ii_ipca_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprte0_u
r_typedef
r_union
id|ii_iprte0_u
(brace
DECL|member|ii_iprte0_regval
id|bdrkreg_t
id|ii_iprte0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_init
id|bdrkreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_widget
id|bdrkreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|bdrkreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|bdrkreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprte0_fld_s
)brace
id|ii_iprte0_fld_s
suffix:semicolon
DECL|typedef|ii_iprte0_u_t
)brace
id|ii_iprte0_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprte0_u
r_typedef
r_union
id|ii_iprte0_u
(brace
DECL|member|ii_iprte0_regval
id|bdrkreg_t
id|ii_iprte0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_vld
id|bdrkreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_to_cnt
id|bdrkreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_widget
id|bdrkreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_init
id|bdrkreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ii_iprte0_fld_s
)brace
id|ii_iprte0_fld_s
suffix:semicolon
DECL|typedef|ii_iprte0_u_t
)brace
id|ii_iprte0_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprte1_u
r_typedef
r_union
id|ii_iprte1_u
(brace
DECL|member|ii_iprte1_regval
id|bdrkreg_t
id|ii_iprte1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_init
id|bdrkreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_widget
id|bdrkreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|bdrkreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|bdrkreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprte1_fld_s
)brace
id|ii_iprte1_fld_s
suffix:semicolon
DECL|typedef|ii_iprte1_u_t
)brace
id|ii_iprte1_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprte1_u
r_typedef
r_union
id|ii_iprte1_u
(brace
DECL|member|ii_iprte1_regval
id|bdrkreg_t
id|ii_iprte1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_vld
id|bdrkreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_to_cnt
id|bdrkreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_widget
id|bdrkreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_init
id|bdrkreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ii_iprte1_fld_s
)brace
id|ii_iprte1_fld_s
suffix:semicolon
DECL|typedef|ii_iprte1_u_t
)brace
id|ii_iprte1_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprte2_u
r_typedef
r_union
id|ii_iprte2_u
(brace
DECL|member|ii_iprte2_regval
id|bdrkreg_t
id|ii_iprte2_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_init
id|bdrkreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_widget
id|bdrkreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|bdrkreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|bdrkreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprte2_fld_s
)brace
id|ii_iprte2_fld_s
suffix:semicolon
DECL|typedef|ii_iprte2_u_t
)brace
id|ii_iprte2_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprte2_u
r_typedef
r_union
id|ii_iprte2_u
(brace
DECL|member|ii_iprte2_regval
id|bdrkreg_t
id|ii_iprte2_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_vld
id|bdrkreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_to_cnt
id|bdrkreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_widget
id|bdrkreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_init
id|bdrkreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ii_iprte2_fld_s
)brace
id|ii_iprte2_fld_s
suffix:semicolon
DECL|typedef|ii_iprte2_u_t
)brace
id|ii_iprte2_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprte3_u
r_typedef
r_union
id|ii_iprte3_u
(brace
DECL|member|ii_iprte3_regval
id|bdrkreg_t
id|ii_iprte3_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_init
id|bdrkreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_widget
id|bdrkreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|bdrkreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|bdrkreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprte3_fld_s
)brace
id|ii_iprte3_fld_s
suffix:semicolon
DECL|typedef|ii_iprte3_u_t
)brace
id|ii_iprte3_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprte3_u
r_typedef
r_union
id|ii_iprte3_u
(brace
DECL|member|ii_iprte3_regval
id|bdrkreg_t
id|ii_iprte3_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_vld
id|bdrkreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_to_cnt
id|bdrkreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_widget
id|bdrkreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_init
id|bdrkreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ii_iprte3_fld_s
)brace
id|ii_iprte3_fld_s
suffix:semicolon
DECL|typedef|ii_iprte3_u_t
)brace
id|ii_iprte3_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprte4_u
r_typedef
r_union
id|ii_iprte4_u
(brace
DECL|member|ii_iprte4_regval
id|bdrkreg_t
id|ii_iprte4_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_init
id|bdrkreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_widget
id|bdrkreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|bdrkreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|bdrkreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprte4_fld_s
)brace
id|ii_iprte4_fld_s
suffix:semicolon
DECL|typedef|ii_iprte4_u_t
)brace
id|ii_iprte4_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprte4_u
r_typedef
r_union
id|ii_iprte4_u
(brace
DECL|member|ii_iprte4_regval
id|bdrkreg_t
id|ii_iprte4_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_vld
id|bdrkreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_to_cnt
id|bdrkreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_widget
id|bdrkreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_init
id|bdrkreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ii_iprte4_fld_s
)brace
id|ii_iprte4_fld_s
suffix:semicolon
DECL|typedef|ii_iprte4_u_t
)brace
id|ii_iprte4_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprte5_u
r_typedef
r_union
id|ii_iprte5_u
(brace
DECL|member|ii_iprte5_regval
id|bdrkreg_t
id|ii_iprte5_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_init
id|bdrkreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_widget
id|bdrkreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|bdrkreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|bdrkreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprte5_fld_s
)brace
id|ii_iprte5_fld_s
suffix:semicolon
DECL|typedef|ii_iprte5_u_t
)brace
id|ii_iprte5_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprte5_u
r_typedef
r_union
id|ii_iprte5_u
(brace
DECL|member|ii_iprte5_regval
id|bdrkreg_t
id|ii_iprte5_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_vld
id|bdrkreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_to_cnt
id|bdrkreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_widget
id|bdrkreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_init
id|bdrkreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ii_iprte5_fld_s
)brace
id|ii_iprte5_fld_s
suffix:semicolon
DECL|typedef|ii_iprte5_u_t
)brace
id|ii_iprte5_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprte6_u
r_typedef
r_union
id|ii_iprte6_u
(brace
DECL|member|ii_iprte6_regval
id|bdrkreg_t
id|ii_iprte6_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_init
id|bdrkreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_widget
id|bdrkreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|bdrkreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|bdrkreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprte6_fld_s
)brace
id|ii_iprte6_fld_s
suffix:semicolon
DECL|typedef|ii_iprte6_u_t
)brace
id|ii_iprte6_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprte6_u
r_typedef
r_union
id|ii_iprte6_u
(brace
DECL|member|ii_iprte6_regval
id|bdrkreg_t
id|ii_iprte6_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_vld
id|bdrkreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_to_cnt
id|bdrkreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_widget
id|bdrkreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_init
id|bdrkreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ii_iprte6_fld_s
)brace
id|ii_iprte6_fld_s
suffix:semicolon
DECL|typedef|ii_iprte6_u_t
)brace
id|ii_iprte6_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  There are 8 instances of this register. This register contains      *&n; * the information that the II has to remember once it has launched a   *&n; * PIO Read operation. The contents are used to form the correct        *&n; * Router Network packet and direct the Crosstalk reply to the          *&n; * appropriate processor.                                               *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iprte7_u
r_typedef
r_union
id|ii_iprte7_u
(brace
DECL|member|ii_iprte7_regval
id|bdrkreg_t
id|ii_iprte7_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_init
id|bdrkreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_widget
id|bdrkreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_to_cnt
id|bdrkreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_vld
id|bdrkreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_iprte7_fld_s
)brace
id|ii_iprte7_fld_s
suffix:semicolon
DECL|typedef|ii_iprte7_u_t
)brace
id|ii_iprte7_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iprte7_u
r_typedef
r_union
id|ii_iprte7_u
(brace
DECL|member|ii_iprte7_regval
id|bdrkreg_t
id|ii_iprte7_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_vld
id|bdrkreg_t
id|i_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_to_cnt
id|bdrkreg_t
id|i_to_cnt
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_widget
id|bdrkreg_t
id|i_widget
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_source
id|bdrkreg_t
id|i_source
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_init
id|bdrkreg_t
id|i_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ii_iprte7_fld_s
)brace
id|ii_iprte7_fld_s
suffix:semicolon
DECL|typedef|ii_iprte7_u_t
)brace
id|ii_iprte7_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  Bedrock_II contains a feature which did not exist in   *&n; * the Hub which automatically cleans up after a Read Response          *&n; * timeout, including deallocation of the IPRTE and recovery of IBuf    *&n; * space. The inclusion of this register in Bedrock is for backward     *&n; * compatibility                                                        *&n; * A write to this register causes an entry from the table of           *&n; * outstanding PIO Read Requests to be freed and returned to the        *&n; * stack of free entries. This register is used in handling the         *&n; * timeout errors that result in a PIO Reply never returning from       *&n; * Crosstalk.                                                           *&n; * Note that this register does not affect the contents of the IPRTE    *&n; * registers. The Valid bits in those registers have to be              *&n; * specifically turned off by software.                                 *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ipdr_u
r_typedef
r_union
id|ii_ipdr_u
(brace
DECL|member|ii_ipdr_regval
id|bdrkreg_t
id|ii_ipdr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_te
id|bdrkreg_t
id|i_te
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_pnd
id|bdrkreg_t
id|i_pnd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_init_rpcnt
id|bdrkreg_t
id|i_init_rpcnt
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|58
suffix:semicolon
DECL|member|ii_ipdr_fld_s
)brace
id|ii_ipdr_fld_s
suffix:semicolon
DECL|typedef|ii_ipdr_u_t
)brace
id|ii_ipdr_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ipdr_u
r_typedef
r_union
id|ii_ipdr_u
(brace
DECL|member|ii_ipdr_regval
id|bdrkreg_t
id|ii_ipdr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|58
suffix:semicolon
DECL|member|i_init_rpcnt
id|bdrkreg_t
id|i_init_rpcnt
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_pnd
id|bdrkreg_t
id|i_pnd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_te
id|bdrkreg_t
id|i_te
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ii_ipdr_fld_s
)brace
id|ii_ipdr_fld_s
suffix:semicolon
DECL|typedef|ii_ipdr_u_t
)brace
id|ii_ipdr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  A write to this register causes a CRB entry to be returned to the   *&n; * queue of free CRBs. The entry should have previously been cleared    *&n; * (mark bit) via backdoor access to the pertinent CRB entry. This      *&n; * register is used in the last step of handling the errors that are    *&n; * captured and marked in CRB entries.  Briefly: 1) first error for     *&n; * DMA write from a particular device, and first error for a            *&n; * particular BTE stream, lead to a marked CRB entry, and processor     *&n; * interrupt, 2) software reads the error information captured in the   *&n; * CRB entry, and presumably takes some corrective action, 3)           *&n; * software clears the mark bit, and finally 4) software writes to      *&n; * the ICDR register to return the CRB entry to the list of free CRB    *&n; * entries.                                                             *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_icdr_u
r_typedef
r_union
id|ii_icdr_u
(brace
DECL|member|ii_icdr_regval
id|bdrkreg_t
id|ii_icdr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_crb_num
id|bdrkreg_t
id|i_crb_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_pnd
id|bdrkreg_t
id|i_pnd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|59
suffix:semicolon
DECL|member|ii_icdr_fld_s
)brace
id|ii_icdr_fld_s
suffix:semicolon
DECL|typedef|ii_icdr_u_t
)brace
id|ii_icdr_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_icdr_u
r_typedef
r_union
id|ii_icdr_u
(brace
DECL|member|ii_icdr_regval
id|bdrkreg_t
id|ii_icdr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|59
suffix:semicolon
DECL|member|i_pnd
id|bdrkreg_t
id|i_pnd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_crb_num
id|bdrkreg_t
id|i_crb_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ii_icdr_fld_s
)brace
id|ii_icdr_fld_s
suffix:semicolon
DECL|typedef|ii_icdr_u_t
)brace
id|ii_icdr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register provides debug access to two FIFOs inside of II.      *&n; * Both IOQ_MAX* fields of this register contain the instantaneous      *&n; * depth (in units of the number of available entries) of the           *&n; * associated IOQ FIFO.  A read of this register will return the        *&n; * number of free entries on each FIFO at the time of the read.  So     *&n; * when a FIFO is idle, the associated field contains the maximum       *&n; * depth of the FIFO.  This register is writable for debug reasons      *&n; * and is intended to be written with the maximum desired FIFO depth    *&n; * while the FIFO is idle. Software must assure that II is idle when    *&n; * this register is written. If there are any active entries in any     *&n; * of these FIFOs when this register is written, the results are        *&n; * undefined.                                                           *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ifdr_u
r_typedef
r_union
id|ii_ifdr_u
(brace
DECL|member|ii_ifdr_regval
id|bdrkreg_t
id|ii_ifdr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_ioq_max_rq
id|bdrkreg_t
id|i_ioq_max_rq
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_set_ioq_rq
id|bdrkreg_t
id|i_set_ioq_rq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ioq_max_rp
id|bdrkreg_t
id|i_ioq_max_rp
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_set_ioq_rp
id|bdrkreg_t
id|i_set_ioq_rp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|ii_ifdr_fld_s
)brace
id|ii_ifdr_fld_s
suffix:semicolon
DECL|typedef|ii_ifdr_u_t
)brace
id|ii_ifdr_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ifdr_u
r_typedef
r_union
id|ii_ifdr_u
(brace
DECL|member|ii_ifdr_regval
id|bdrkreg_t
id|ii_ifdr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|i_set_ioq_rp
id|bdrkreg_t
id|i_set_ioq_rp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ioq_max_rp
id|bdrkreg_t
id|i_ioq_max_rp
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_set_ioq_rq
id|bdrkreg_t
id|i_set_ioq_rq
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ioq_max_rq
id|bdrkreg_t
id|i_ioq_max_rq
suffix:colon
l_int|7
suffix:semicolon
DECL|member|ii_ifdr_fld_s
)brace
id|ii_ifdr_fld_s
suffix:semicolon
DECL|typedef|ii_ifdr_u_t
)brace
id|ii_ifdr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register allows the II to become sluggish in removing          *&n; * messages from its inbound queue (IIQ). This will cause messages to   *&n; * back up in either virtual channel. Disabling the &quot;molasses&quot; mode     *&n; * subsequently allows the II to be tested under stress. In the         *&n; * sluggish (&quot;Molasses&quot;) mode, the localized effects of congestion      *&n; * can be observed.                                                     *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iiap_u
r_typedef
r_union
id|ii_iiap_u
(brace
DECL|member|ii_iiap_regval
id|bdrkreg_t
id|ii_iiap_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rq_mls
id|bdrkreg_t
id|i_rq_mls
suffix:colon
l_int|6
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rp_mls
id|bdrkreg_t
id|i_rp_mls
suffix:colon
l_int|6
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|50
suffix:semicolon
DECL|member|ii_iiap_fld_s
)brace
id|ii_iiap_fld_s
suffix:semicolon
DECL|typedef|ii_iiap_u_t
)brace
id|ii_iiap_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iiap_u
r_typedef
r_union
id|ii_iiap_u
(brace
DECL|member|ii_iiap_regval
id|bdrkreg_t
id|ii_iiap_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|50
suffix:semicolon
DECL|member|i_rp_mls
id|bdrkreg_t
id|i_rp_mls
suffix:colon
l_int|6
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rq_mls
id|bdrkreg_t
id|i_rq_mls
suffix:colon
l_int|6
suffix:semicolon
DECL|member|ii_iiap_fld_s
)brace
id|ii_iiap_fld_s
suffix:semicolon
DECL|typedef|ii_iiap_u_t
)brace
id|ii_iiap_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register allows several parameters of CRB operation to be      *&n; * set. Note that writing to this register can have catastrophic side   *&n; * effects, if the CRB is not quiescent, i.e. if the CRB is             *&n; * processing protocol messages when the write occurs.                  *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_icmr_u
r_typedef
r_union
id|ii_icmr_u
(brace
DECL|member|ii_icmr_regval
id|bdrkreg_t
id|ii_icmr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_sp_msg
id|bdrkreg_t
id|i_sp_msg
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rd_hdr
id|bdrkreg_t
id|i_rd_hdr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_4
id|bdrkreg_t
id|i_rsvd_4
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_c_cnt
id|bdrkreg_t
id|i_c_cnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_3
id|bdrkreg_t
id|i_rsvd_3
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_clr_rqpd
id|bdrkreg_t
id|i_clr_rqpd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_clr_rppd
id|bdrkreg_t
id|i_clr_rppd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_fc_cnt
id|bdrkreg_t
id|i_fc_cnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_crb_vld
id|bdrkreg_t
id|i_crb_vld
suffix:colon
l_int|15
suffix:semicolon
DECL|member|i_crb_mark
id|bdrkreg_t
id|i_crb_mark
suffix:colon
l_int|15
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_precise
id|bdrkreg_t
id|i_precise
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|ii_icmr_fld_s
)brace
id|ii_icmr_fld_s
suffix:semicolon
DECL|typedef|ii_icmr_u_t
)brace
id|ii_icmr_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_icmr_u
r_typedef
r_union
id|ii_icmr_u
(brace
DECL|member|ii_icmr_regval
id|bdrkreg_t
id|ii_icmr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_precise
id|bdrkreg_t
id|i_precise
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_crb_mark
id|bdrkreg_t
id|i_crb_mark
suffix:colon
l_int|15
suffix:semicolon
DECL|member|i_crb_vld
id|bdrkreg_t
id|i_crb_vld
suffix:colon
l_int|15
suffix:semicolon
DECL|member|i_fc_cnt
id|bdrkreg_t
id|i_fc_cnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_clr_rppd
id|bdrkreg_t
id|i_clr_rppd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_clr_rqpd
id|bdrkreg_t
id|i_clr_rqpd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_3
id|bdrkreg_t
id|i_rsvd_3
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_c_cnt
id|bdrkreg_t
id|i_c_cnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_4
id|bdrkreg_t
id|i_rsvd_4
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_rd_hdr
id|bdrkreg_t
id|i_rd_hdr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_sp_msg
id|bdrkreg_t
id|i_sp_msg
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_icmr_fld_s
)brace
id|ii_icmr_fld_s
suffix:semicolon
DECL|typedef|ii_icmr_u_t
)brace
id|ii_icmr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register allows control of the table portion of the CRB        *&n; * logic via software. Control operations from this register have       *&n; * priority over all incoming Crosstalk or BTE requests.                *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_iccr_u
r_typedef
r_union
id|ii_iccr_u
(brace
DECL|member|ii_iccr_regval
id|bdrkreg_t
id|ii_iccr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_crb_num
id|bdrkreg_t
id|i_crb_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_cmd
id|bdrkreg_t
id|i_cmd
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_pending
id|bdrkreg_t
id|i_pending
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|47
suffix:semicolon
DECL|member|ii_iccr_fld_s
)brace
id|ii_iccr_fld_s
suffix:semicolon
DECL|typedef|ii_iccr_u_t
)brace
id|ii_iccr_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_iccr_u
r_typedef
r_union
id|ii_iccr_u
(brace
DECL|member|ii_iccr_regval
id|bdrkreg_t
id|ii_iccr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|47
suffix:semicolon
DECL|member|i_pending
id|bdrkreg_t
id|i_pending
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_cmd
id|bdrkreg_t
id|i_cmd
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_crb_num
id|bdrkreg_t
id|i_crb_num
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ii_iccr_fld_s
)brace
id|ii_iccr_fld_s
suffix:semicolon
DECL|typedef|ii_iccr_u_t
)brace
id|ii_iccr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register allows the maximum timeout value to be programmed.    *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_icto_u
r_typedef
r_union
id|ii_icto_u
(brace
DECL|member|ii_icto_regval
id|bdrkreg_t
id|ii_icto_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_timeout
id|bdrkreg_t
id|i_timeout
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|56
suffix:semicolon
DECL|member|ii_icto_fld_s
)brace
id|ii_icto_fld_s
suffix:semicolon
DECL|typedef|ii_icto_u_t
)brace
id|ii_icto_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_icto_u
r_typedef
r_union
id|ii_icto_u
(brace
DECL|member|ii_icto_regval
id|bdrkreg_t
id|ii_icto_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|56
suffix:semicolon
DECL|member|i_timeout
id|bdrkreg_t
id|i_timeout
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_icto_fld_s
)brace
id|ii_icto_fld_s
suffix:semicolon
DECL|typedef|ii_icto_u_t
)brace
id|ii_icto_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register allows the timeout prescalar to be programmed. An     *&n; * internal counter is associated with this register. When the          *&n; * internal counter reaches the value of the PRESCALE field, the        *&n; * timer registers in all valid CRBs are incremented (CRBx_D[TIMEOUT]   *&n; * field). The internal counter resets to zero, and then continues      *&n; * counting.                                                            *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ictp_u
r_typedef
r_union
id|ii_ictp_u
(brace
DECL|member|ii_ictp_regval
id|bdrkreg_t
id|ii_ictp_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_prescale
id|bdrkreg_t
id|i_prescale
suffix:colon
l_int|24
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|40
suffix:semicolon
DECL|member|ii_ictp_fld_s
)brace
id|ii_ictp_fld_s
suffix:semicolon
DECL|typedef|ii_ictp_u_t
)brace
id|ii_ictp_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ictp_u
r_typedef
r_union
id|ii_ictp_u
(brace
DECL|member|ii_ictp_regval
id|bdrkreg_t
id|ii_ictp_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|40
suffix:semicolon
DECL|member|i_prescale
id|bdrkreg_t
id|i_prescale
suffix:colon
l_int|24
suffix:semicolon
DECL|member|ii_ictp_fld_s
)brace
id|ii_ictp_fld_s
suffix:semicolon
DECL|typedef|ii_ictp_u_t
)brace
id|ii_ictp_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 15 CRB Entries (ICRB0 to ICRBE) that are     *&n; * used for Crosstalk operations (both cacheline and partial            *&n; * operations) or BTE/IO. Because the CRB entries are very wide, four   *&n; * registers (_A to _D) are required to read and write each entry.      *&n; * The CRB Entry registers can be conceptualized as rows and columns    *&n; * (illustrated in the table above). Each row contains the 4            *&n; * registers required for a single CRB Entry. The first doubleword      *&n; * (column) for each entry is labeled A, and the second doubleword      *&n; * (higher address) is labeled B, the third doubleword is labeled C,    *&n; * and the fourth doubleword is labeled D. All CRB entries have their   *&n; * addresses on a quarter cacheline aligned boundary.                   *&n; * Upon reset, only the following fields are initialized: valid         *&n; * (VLD), priority count, timeout, timeout valid, and context valid.    *&n; * All other bits should be cleared by software before use (after       *&n; * recovering any potential error state from before the reset).         *&n; * The following four tables summarize the format for the four          *&n; * registers that are used for each ICRB# Entry.                        *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_icrb0_a_u
r_typedef
r_union
id|ii_icrb0_a_u
(brace
DECL|member|ii_icrb0_a_regval
id|bdrkreg_t
id|ii_icrb0_a_regval
suffix:semicolon
r_struct
(brace
DECL|member|ia_iow
id|bdrkreg_t
id|ia_iow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_vld
id|bdrkreg_t
id|ia_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_addr
id|bdrkreg_t
id|ia_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|ia_tnum
id|bdrkreg_t
id|ia_tnum
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ia_sidn
id|bdrkreg_t
id|ia_sidn
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ia_xt_err
id|bdrkreg_t
id|ia_xt_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_mark
id|bdrkreg_t
id|ia_mark
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_ln_uce
id|bdrkreg_t
id|ia_ln_uce
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_errcode
id|bdrkreg_t
id|ia_errcode
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ia_error
id|bdrkreg_t
id|ia_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_stall__bte_1
id|bdrkreg_t
id|ia_stall__bte_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_stall__bte_0
id|bdrkreg_t
id|ia_stall__bte_0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_rsvd
id|bdrkreg_t
id|ia_rsvd
suffix:colon
l_int|6
suffix:semicolon
DECL|member|ii_icrb0_a_fld_s
)brace
id|ii_icrb0_a_fld_s
suffix:semicolon
DECL|typedef|ii_icrb0_a_u_t
)brace
id|ii_icrb0_a_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_icrb0_a_u
r_typedef
r_union
id|ii_icrb0_a_u
(brace
DECL|member|ii_icrb0_a_regval
id|bdrkreg_t
id|ii_icrb0_a_regval
suffix:semicolon
r_struct
(brace
DECL|member|ia_rsvd
id|bdrkreg_t
id|ia_rsvd
suffix:colon
l_int|6
suffix:semicolon
DECL|member|ia_stall__bte_0
id|bdrkreg_t
id|ia_stall__bte_0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_stall__bte_1
id|bdrkreg_t
id|ia_stall__bte_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_error
id|bdrkreg_t
id|ia_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_errcode
id|bdrkreg_t
id|ia_errcode
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ia_ln_uce
id|bdrkreg_t
id|ia_ln_uce
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_mark
id|bdrkreg_t
id|ia_mark
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_xt_err
id|bdrkreg_t
id|ia_xt_err
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_sidn
id|bdrkreg_t
id|ia_sidn
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ia_tnum
id|bdrkreg_t
id|ia_tnum
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ia_addr
id|bdrkreg_t
id|ia_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|ia_vld
id|bdrkreg_t
id|ia_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ia_iow
id|bdrkreg_t
id|ia_iow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_icrb0_a_fld_s
)brace
id|ii_icrb0_a_fld_s
suffix:semicolon
DECL|typedef|ii_icrb0_a_u_t
)brace
id|ii_icrb0_a_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 15 CRB Entries (ICRB0 to ICRBE) that are     *&n; * used for Crosstalk operations (both cacheline and partial            *&n; * operations) or BTE/IO. Because the CRB entries are very wide, four   *&n; * registers (_A to _D) are required to read and write each entry.      *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_icrb0_b_u
r_typedef
r_union
id|ii_icrb0_b_u
(brace
DECL|member|ii_icrb0_b_regval
id|bdrkreg_t
id|ii_icrb0_b_regval
suffix:semicolon
r_struct
(brace
DECL|member|ib_stall__intr
id|bdrkreg_t
id|ib_stall__intr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_stall_ib
id|bdrkreg_t
id|ib_stall_ib
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_intvn
id|bdrkreg_t
id|ib_intvn
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_wb
id|bdrkreg_t
id|ib_wb
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_hold
id|bdrkreg_t
id|ib_hold
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_ack
id|bdrkreg_t
id|ib_ack
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_resp
id|bdrkreg_t
id|ib_resp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_ack_cnt
id|bdrkreg_t
id|ib_ack_cnt
suffix:colon
l_int|11
suffix:semicolon
DECL|member|ib_rsvd_1
id|bdrkreg_t
id|ib_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|ib_exc
id|bdrkreg_t
id|ib_exc
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ib_init
id|bdrkreg_t
id|ib_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ib_imsg
id|bdrkreg_t
id|ib_imsg
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ib_imsgtype
id|bdrkreg_t
id|ib_imsgtype
suffix:colon
l_int|2
suffix:semicolon
DECL|member|ib_use_old
id|bdrkreg_t
id|ib_use_old
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_source
id|bdrkreg_t
id|ib_source
suffix:colon
l_int|12
suffix:semicolon
DECL|member|ib_size
id|bdrkreg_t
id|ib_size
suffix:colon
l_int|2
suffix:semicolon
DECL|member|ib_ct
id|bdrkreg_t
id|ib_ct
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_bte_num
id|bdrkreg_t
id|ib_bte_num
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_rsvd
id|bdrkreg_t
id|ib_rsvd
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ii_icrb0_b_fld_s
)brace
id|ii_icrb0_b_fld_s
suffix:semicolon
DECL|typedef|ii_icrb0_b_u_t
)brace
id|ii_icrb0_b_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_icrb0_b_u
r_typedef
r_union
id|ii_icrb0_b_u
(brace
DECL|member|ii_icrb0_b_regval
id|bdrkreg_t
id|ii_icrb0_b_regval
suffix:semicolon
r_struct
(brace
DECL|member|ib_rsvd
id|bdrkreg_t
id|ib_rsvd
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ib_bte_num
id|bdrkreg_t
id|ib_bte_num
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_ct
id|bdrkreg_t
id|ib_ct
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_size
id|bdrkreg_t
id|ib_size
suffix:colon
l_int|2
suffix:semicolon
DECL|member|ib_source
id|bdrkreg_t
id|ib_source
suffix:colon
l_int|12
suffix:semicolon
DECL|member|ib_use_old
id|bdrkreg_t
id|ib_use_old
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_imsgtype
id|bdrkreg_t
id|ib_imsgtype
suffix:colon
l_int|2
suffix:semicolon
DECL|member|ib_imsg
id|bdrkreg_t
id|ib_imsg
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ib_init
id|bdrkreg_t
id|ib_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ib_exc
id|bdrkreg_t
id|ib_exc
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ib_rsvd_1
id|bdrkreg_t
id|ib_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|ib_ack_cnt
id|bdrkreg_t
id|ib_ack_cnt
suffix:colon
l_int|11
suffix:semicolon
DECL|member|ib_resp
id|bdrkreg_t
id|ib_resp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_ack
id|bdrkreg_t
id|ib_ack
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_hold
id|bdrkreg_t
id|ib_hold
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_wb
id|bdrkreg_t
id|ib_wb
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_intvn
id|bdrkreg_t
id|ib_intvn
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_stall_ib
id|bdrkreg_t
id|ib_stall_ib
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ib_stall__intr
id|bdrkreg_t
id|ib_stall__intr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_icrb0_b_fld_s
)brace
id|ii_icrb0_b_fld_s
suffix:semicolon
DECL|typedef|ii_icrb0_b_u_t
)brace
id|ii_icrb0_b_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 15 CRB Entries (ICRB0 to ICRBE) that are     *&n; * used for Crosstalk operations (both cacheline and partial            *&n; * operations) or BTE/IO. Because the CRB entries are very wide, four   *&n; * registers (_A to _D) are required to read and write each entry.      *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_icrb0_c_u
r_typedef
r_union
id|ii_icrb0_c_u
(brace
DECL|member|ii_icrb0_c_regval
id|bdrkreg_t
id|ii_icrb0_c_regval
suffix:semicolon
r_struct
(brace
DECL|member|ic_gbr
id|bdrkreg_t
id|ic_gbr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ic_resprqd
id|bdrkreg_t
id|ic_resprqd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ic_bo
id|bdrkreg_t
id|ic_bo
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ic_suppl
id|bdrkreg_t
id|ic_suppl
suffix:colon
l_int|12
suffix:semicolon
DECL|member|ic_pa_be
id|bdrkreg_t
id|ic_pa_be
suffix:colon
l_int|34
suffix:semicolon
DECL|member|ic_bte_op
id|bdrkreg_t
id|ic_bte_op
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ic_pr_psc
id|bdrkreg_t
id|ic_pr_psc
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ic_pr_cnt
id|bdrkreg_t
id|ic_pr_cnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ic_sleep
id|bdrkreg_t
id|ic_sleep
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ic_rsvd
id|bdrkreg_t
id|ic_rsvd
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ii_icrb0_c_fld_s
)brace
id|ii_icrb0_c_fld_s
suffix:semicolon
DECL|typedef|ii_icrb0_c_u_t
)brace
id|ii_icrb0_c_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_icrb0_c_u
r_typedef
r_union
id|ii_icrb0_c_u
(brace
DECL|member|ii_icrb0_c_regval
id|bdrkreg_t
id|ii_icrb0_c_regval
suffix:semicolon
r_struct
(brace
DECL|member|ic_rsvd
id|bdrkreg_t
id|ic_rsvd
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ic_sleep
id|bdrkreg_t
id|ic_sleep
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ic_pr_cnt
id|bdrkreg_t
id|ic_pr_cnt
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ic_pr_psc
id|bdrkreg_t
id|ic_pr_psc
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ic_bte_op
id|bdrkreg_t
id|ic_bte_op
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ic_pa_be
id|bdrkreg_t
id|ic_pa_be
suffix:colon
l_int|34
suffix:semicolon
DECL|member|ic_suppl
id|bdrkreg_t
id|ic_suppl
suffix:colon
l_int|12
suffix:semicolon
DECL|member|ic_bo
id|bdrkreg_t
id|ic_bo
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ic_resprqd
id|bdrkreg_t
id|ic_resprqd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ic_gbr
id|bdrkreg_t
id|ic_gbr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_icrb0_c_fld_s
)brace
id|ii_icrb0_c_fld_s
suffix:semicolon
DECL|typedef|ii_icrb0_c_u_t
)brace
id|ii_icrb0_c_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  There are 15 CRB Entries (ICRB0 to ICRBE) that are     *&n; * used for Crosstalk operations (both cacheline and partial            *&n; * operations) or BTE/IO. Because the CRB entries are very wide, four   *&n; * registers (_A to _D) are required to read and write each entry.      *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_icrb0_d_u
r_typedef
r_union
id|ii_icrb0_d_u
(brace
DECL|member|ii_icrb0_d_regval
id|bdrkreg_t
id|ii_icrb0_d_regval
suffix:semicolon
r_struct
(brace
DECL|member|id_timeout
id|bdrkreg_t
id|id_timeout
suffix:colon
l_int|8
suffix:semicolon
DECL|member|id_context
id|bdrkreg_t
id|id_context
suffix:colon
l_int|15
suffix:semicolon
DECL|member|id_rsvd_1
id|bdrkreg_t
id|id_rsvd_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|id_tvld
id|bdrkreg_t
id|id_tvld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|id_cvld
id|bdrkreg_t
id|id_cvld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|id_rsvd
id|bdrkreg_t
id|id_rsvd
suffix:colon
l_int|38
suffix:semicolon
DECL|member|ii_icrb0_d_fld_s
)brace
id|ii_icrb0_d_fld_s
suffix:semicolon
DECL|typedef|ii_icrb0_d_u_t
)brace
id|ii_icrb0_d_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_icrb0_d_u
r_typedef
r_union
id|ii_icrb0_d_u
(brace
DECL|member|ii_icrb0_d_regval
id|bdrkreg_t
id|ii_icrb0_d_regval
suffix:semicolon
r_struct
(brace
DECL|member|id_rsvd
id|bdrkreg_t
id|id_rsvd
suffix:colon
l_int|38
suffix:semicolon
DECL|member|id_cvld
id|bdrkreg_t
id|id_cvld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|id_tvld
id|bdrkreg_t
id|id_tvld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|id_rsvd_1
id|bdrkreg_t
id|id_rsvd_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|id_context
id|bdrkreg_t
id|id_context
suffix:colon
l_int|15
suffix:semicolon
DECL|member|id_timeout
id|bdrkreg_t
id|id_timeout
suffix:colon
l_int|8
suffix:semicolon
DECL|member|ii_icrb0_d_fld_s
)brace
id|ii_icrb0_d_fld_s
suffix:semicolon
DECL|typedef|ii_icrb0_d_u_t
)brace
id|ii_icrb0_d_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the lower 64 bits of the header of the       *&n; * spurious message captured by II. Valid when the SP_MSG bit in ICMR   *&n; * register is set.                                                     *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_icsml_u
r_typedef
r_union
id|ii_icsml_u
(brace
DECL|member|ii_icsml_regval
id|bdrkreg_t
id|ii_icsml_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_tt_addr
id|bdrkreg_t
id|i_tt_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|i_tt_ack_cnt
id|bdrkreg_t
id|i_tt_ack_cnt
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_newsuppl_ex
id|bdrkreg_t
id|i_newsuppl_ex
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_reserved
id|bdrkreg_t
id|i_reserved
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_overflow
id|bdrkreg_t
id|i_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_icsml_fld_s
)brace
id|ii_icsml_fld_s
suffix:semicolon
DECL|typedef|ii_icsml_u_t
)brace
id|ii_icsml_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_icsml_u
r_typedef
r_union
id|ii_icsml_u
(brace
DECL|member|ii_icsml_regval
id|bdrkreg_t
id|ii_icsml_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_overflow
id|bdrkreg_t
id|i_overflow
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_reserved
id|bdrkreg_t
id|i_reserved
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_newsuppl_ex
id|bdrkreg_t
id|i_newsuppl_ex
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_tt_ack_cnt
id|bdrkreg_t
id|i_tt_ack_cnt
suffix:colon
l_int|11
suffix:semicolon
DECL|member|i_tt_addr
id|bdrkreg_t
id|i_tt_addr
suffix:colon
l_int|38
suffix:semicolon
DECL|member|ii_icsml_fld_s
)brace
id|ii_icsml_fld_s
suffix:semicolon
DECL|typedef|ii_icsml_u_t
)brace
id|ii_icsml_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the microscopic state, all the inputs to     *&n; * the protocol table, captured with the spurious message. Valid when   *&n; * the SP_MSG bit in the ICMR register is set.                          *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_icsmh_u
r_typedef
r_union
id|ii_icsmh_u
(brace
DECL|member|ii_icsmh_regval
id|bdrkreg_t
id|ii_icsmh_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_tt_vld
id|bdrkreg_t
id|i_tt_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_xerr
id|bdrkreg_t
id|i_xerr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ft_cwact_o
id|bdrkreg_t
id|i_ft_cwact_o
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ft_wact_o
id|bdrkreg_t
id|i_ft_wact_o
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ft_active_o
id|bdrkreg_t
id|i_ft_active_o
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_sync
id|bdrkreg_t
id|i_sync
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_mnusg
id|bdrkreg_t
id|i_mnusg
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_mnusz
id|bdrkreg_t
id|i_mnusz
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_plusz
id|bdrkreg_t
id|i_plusz
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_plusg
id|bdrkreg_t
id|i_plusg
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_exc
id|bdrkreg_t
id|i_tt_exc
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_tt_wb
id|bdrkreg_t
id|i_tt_wb
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_hold
id|bdrkreg_t
id|i_tt_hold
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_ack
id|bdrkreg_t
id|i_tt_ack
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_resp
id|bdrkreg_t
id|i_tt_resp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_intvn
id|bdrkreg_t
id|i_tt_intvn
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_g_stall_bte1
id|bdrkreg_t
id|i_g_stall_bte1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_g_stall_bte0
id|bdrkreg_t
id|i_g_stall_bte0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_g_stall_il
id|bdrkreg_t
id|i_g_stall_il
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_g_stall_ib
id|bdrkreg_t
id|i_g_stall_ib
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_imsg
id|bdrkreg_t
id|i_tt_imsg
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_tt_imsgtype
id|bdrkreg_t
id|i_tt_imsgtype
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_tt_use_old
id|bdrkreg_t
id|i_tt_use_old
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_respreqd
id|bdrkreg_t
id|i_tt_respreqd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_bte_num
id|bdrkreg_t
id|i_tt_bte_num
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_cbn
id|bdrkreg_t
id|i_cbn
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_match
id|bdrkreg_t
id|i_match
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_lt_34
id|bdrkreg_t
id|i_rpcnt_lt_34
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_ge_34
id|bdrkreg_t
id|i_rpcnt_ge_34
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_lt_18
id|bdrkreg_t
id|i_rpcnt_lt_18
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_ge_18
id|bdrkreg_t
id|i_rpcnt_ge_18
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_lt_2
id|bdrkreg_t
id|i_rpcnt_lt_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_ge_2
id|bdrkreg_t
id|i_rpcnt_ge_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rqcnt_lt_18
id|bdrkreg_t
id|i_rqcnt_lt_18
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rqcnt_ge_18
id|bdrkreg_t
id|i_rqcnt_ge_18
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rqcnt_lt_2
id|bdrkreg_t
id|i_rqcnt_lt_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rqcnt_ge_2
id|bdrkreg_t
id|i_rqcnt_ge_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_device
id|bdrkreg_t
id|i_tt_device
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_tt_init
id|bdrkreg_t
id|i_tt_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_reserved
id|bdrkreg_t
id|i_reserved
suffix:colon
l_int|5
suffix:semicolon
DECL|member|ii_icsmh_fld_s
)brace
id|ii_icsmh_fld_s
suffix:semicolon
DECL|typedef|ii_icsmh_u_t
)brace
id|ii_icsmh_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_icsmh_u
r_typedef
r_union
id|ii_icsmh_u
(brace
DECL|member|ii_icsmh_regval
id|bdrkreg_t
id|ii_icsmh_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_reserved
id|bdrkreg_t
id|i_reserved
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_tt_init
id|bdrkreg_t
id|i_tt_init
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_tt_device
id|bdrkreg_t
id|i_tt_device
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_rqcnt_ge_2
id|bdrkreg_t
id|i_rqcnt_ge_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rqcnt_lt_2
id|bdrkreg_t
id|i_rqcnt_lt_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rqcnt_ge_18
id|bdrkreg_t
id|i_rqcnt_ge_18
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rqcnt_lt_18
id|bdrkreg_t
id|i_rqcnt_lt_18
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_ge_2
id|bdrkreg_t
id|i_rpcnt_ge_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_lt_2
id|bdrkreg_t
id|i_rpcnt_lt_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_ge_18
id|bdrkreg_t
id|i_rpcnt_ge_18
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_lt_18
id|bdrkreg_t
id|i_rpcnt_lt_18
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_ge_34
id|bdrkreg_t
id|i_rpcnt_ge_34
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rpcnt_lt_34
id|bdrkreg_t
id|i_rpcnt_lt_34
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_match
id|bdrkreg_t
id|i_match
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_cbn
id|bdrkreg_t
id|i_cbn
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_bte_num
id|bdrkreg_t
id|i_tt_bte_num
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_respreqd
id|bdrkreg_t
id|i_tt_respreqd
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_use_old
id|bdrkreg_t
id|i_tt_use_old
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_imsgtype
id|bdrkreg_t
id|i_tt_imsgtype
suffix:colon
l_int|2
suffix:semicolon
DECL|member|i_tt_imsg
id|bdrkreg_t
id|i_tt_imsg
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_g_stall_ib
id|bdrkreg_t
id|i_g_stall_ib
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_g_stall_il
id|bdrkreg_t
id|i_g_stall_il
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_g_stall_bte0
id|bdrkreg_t
id|i_g_stall_bte0
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_g_stall_bte1
id|bdrkreg_t
id|i_g_stall_bte1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_intvn
id|bdrkreg_t
id|i_tt_intvn
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_resp
id|bdrkreg_t
id|i_tt_resp
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_ack
id|bdrkreg_t
id|i_tt_ack
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_hold
id|bdrkreg_t
id|i_tt_hold
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_wb
id|bdrkreg_t
id|i_tt_wb
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_exc
id|bdrkreg_t
id|i_tt_exc
suffix:colon
l_int|5
suffix:semicolon
DECL|member|i_plusg
id|bdrkreg_t
id|i_plusg
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_plusz
id|bdrkreg_t
id|i_plusz
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_mnusz
id|bdrkreg_t
id|i_mnusz
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_mnusg
id|bdrkreg_t
id|i_mnusg
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_sync
id|bdrkreg_t
id|i_sync
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ft_active_o
id|bdrkreg_t
id|i_ft_active_o
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ft_wact_o
id|bdrkreg_t
id|i_ft_wact_o
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_ft_cwact_o
id|bdrkreg_t
id|i_ft_cwact_o
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_xerr
id|bdrkreg_t
id|i_xerr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_tt_vld
id|bdrkreg_t
id|i_tt_vld
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_icsmh_fld_s
)brace
id|ii_icsmh_fld_s
suffix:semicolon
DECL|typedef|ii_icsmh_u_t
)brace
id|ii_icsmh_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  The Bedrock DEBUG unit provides a 3-bit selection signal to the     *&n; * II unit, thus allowing a choice of one set of debug signal outputs   *&n; * from a menu of 8 options. Each option is limited to 32 bits in       *&n; * size. There are more signals of interest than can be accommodated    *&n; * in this 8*32 framework, so the IDBSS register has been defined to    *&n; * extend the range of choices available. For each menu option          *&n; * available to the DEBUG unit, the II provides a &quot;submenu&quot; of          *&n; * several options. The value of the SUBMENU field in the IDBSS         *&n; * register selects the desired submenu. Hence, the particular debug    *&n; * signals provided by the II are determined by the 3-bit selection     *&n; * signal from the DEBUG unit and the value of the SUBMENU field        *&n; * within the IDBSS register. For a detailed description of the         *&n; * available menus and submenus for II debug signals, refer to the      *&n; * documentation in ii_interface.doc..                                  *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LIITLE_ENDIAN
DECL|union|ii_idbss_u
r_typedef
r_union
id|ii_idbss_u
(brace
DECL|member|ii_idbss_regval
id|bdrkreg_t
id|ii_idbss_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_submenu
id|bdrkreg_t
id|i_submenu
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|61
suffix:semicolon
DECL|member|ii_idbss_fld_s
)brace
id|ii_idbss_fld_s
suffix:semicolon
DECL|typedef|ii_idbss_u_t
)brace
id|ii_idbss_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_idbss_u
r_typedef
r_union
id|ii_idbss_u
(brace
DECL|member|ii_idbss_regval
id|bdrkreg_t
id|ii_idbss_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|61
suffix:semicolon
DECL|member|i_submenu
id|bdrkreg_t
id|i_submenu
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ii_idbss_fld_s
)brace
id|ii_idbss_fld_s
suffix:semicolon
DECL|typedef|ii_idbss_u_t
)brace
id|ii_idbss_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register is used to set up the length for a       *&n; * transfer and then to monitor the progress of that transfer. This     *&n; * register needs to be initialized before a transfer is started. A     *&n; * legitimate write to this register will set the Busy bit, clear the   *&n; * Error bit, and initialize the length to the value desired.           *&n; * While the transfer is in progress, hardware will decrement the       *&n; * length field with each successful block that is copied. Once the     *&n; * transfer completes, hardware will clear the Busy bit. The length     *&n; * field will also contain the number of cache lines left to be         *&n; * transferred.                                                         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LIITLE_ENDIAN
DECL|union|ii_ibls0_u
r_typedef
r_union
id|ii_ibls0_u
(brace
DECL|member|ii_ibls0_regval
id|bdrkreg_t
id|ii_ibls0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_length
id|bdrkreg_t
id|i_length
suffix:colon
l_int|16
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_busy
id|bdrkreg_t
id|i_busy
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|43
suffix:semicolon
DECL|member|ii_ibls0_fld_s
)brace
id|ii_ibls0_fld_s
suffix:semicolon
DECL|typedef|ii_ibls0_u_t
)brace
id|ii_ibls0_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ibls0_u
r_typedef
r_union
id|ii_ibls0_u
(brace
DECL|member|ii_ibls0_regval
id|bdrkreg_t
id|ii_ibls0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|43
suffix:semicolon
DECL|member|i_busy
id|bdrkreg_t
id|i_busy
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_length
id|bdrkreg_t
id|i_length
suffix:colon
l_int|16
suffix:semicolon
DECL|member|ii_ibls0_fld_s
)brace
id|ii_ibls0_fld_s
suffix:semicolon
DECL|typedef|ii_ibls0_u_t
)brace
id|ii_ibls0_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register should be loaded before a transfer is started. The    *&n; * address to be loaded in bits 39:0 is the 40-bit TRex+ physical       *&n; * address as described in Section 1.3, Figure2 and Figure3. Since      *&n; * the bottom 7 bits of the address are always taken to be zero, BTE    *&n; * transfers are always cacheline-aligned.                              *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ibsa0_u
r_typedef
r_union
id|ii_ibsa0_u
(brace
DECL|member|ii_ibsa0_regval
id|bdrkreg_t
id|ii_ibsa0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|33
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|24
suffix:semicolon
DECL|member|ii_ibsa0_fld_s
)brace
id|ii_ibsa0_fld_s
suffix:semicolon
DECL|typedef|ii_ibsa0_u_t
)brace
id|ii_ibsa0_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ibsa0_u
r_typedef
r_union
id|ii_ibsa0_u
(brace
DECL|member|ii_ibsa0_regval
id|bdrkreg_t
id|ii_ibsa0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|24
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|33
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|ii_ibsa0_fld_s
)brace
id|ii_ibsa0_fld_s
suffix:semicolon
DECL|typedef|ii_ibsa0_u_t
)brace
id|ii_ibsa0_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register should be loaded before a transfer is started. The    *&n; * address to be loaded in bits 39:0 is the 40-bit TRex+ physical       *&n; * address as described in Section 1.3, Figure2 and Figure3. Since      *&n; * the bottom 7 bits of the address are always taken to be zero, BTE    *&n; * transfers are always cacheline-aligned.                              *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ibda0_u
r_typedef
r_union
id|ii_ibda0_u
(brace
DECL|member|ii_ibda0_regval
id|bdrkreg_t
id|ii_ibda0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|33
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|24
suffix:semicolon
DECL|member|ii_ibda0_fld_s
)brace
id|ii_ibda0_fld_s
suffix:semicolon
DECL|typedef|ii_ibda0_u_t
)brace
id|ii_ibda0_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ibda0_u
r_typedef
r_union
id|ii_ibda0_u
(brace
DECL|member|ii_ibda0_regval
id|bdrkreg_t
id|ii_ibda0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|24
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|33
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|ii_ibda0_fld_s
)brace
id|ii_ibda0_fld_s
suffix:semicolon
DECL|typedef|ii_ibda0_u_t
)brace
id|ii_ibda0_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Writing to this register sets up the attributes of the transfer     *&n; * and initiates the transfer operation. Reading this register has      *&n; * the side effect of terminating any transfer in progress. Note:       *&n; * stopping a transfer midstream could have an adverse impact on the    *&n; * other BTE. If a BTE stream has to be stopped (due to error           *&n; * handling for example), both BTE streams should be stopped and        *&n; * their transfers discarded.                                           *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ibct0_u
r_typedef
r_union
id|ii_ibct0_u
(brace
DECL|member|ii_ibct0_regval
id|bdrkreg_t
id|ii_ibct0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_zerofill
id|bdrkreg_t
id|i_zerofill
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_notify
id|bdrkreg_t
id|i_notify
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_poison
id|bdrkreg_t
id|i_poison
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|55
suffix:semicolon
DECL|member|ii_ibct0_fld_s
)brace
id|ii_ibct0_fld_s
suffix:semicolon
DECL|typedef|ii_ibct0_u_t
)brace
id|ii_ibct0_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ibct0_u
r_typedef
r_union
id|ii_ibct0_u
(brace
DECL|member|ii_ibct0_regval
id|bdrkreg_t
id|ii_ibct0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|55
suffix:semicolon
DECL|member|i_poison
id|bdrkreg_t
id|i_poison
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_notify
id|bdrkreg_t
id|i_notify
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_zerofill
id|bdrkreg_t
id|i_zerofill
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_ibct0_fld_s
)brace
id|ii_ibct0_fld_s
suffix:semicolon
DECL|typedef|ii_ibct0_u_t
)brace
id|ii_ibct0_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the address to which the WINV is sent.       *&n; * This address has to be cache line aligned.                           *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ibna0_u
r_typedef
r_union
id|ii_ibna0_u
(brace
DECL|member|ii_ibna0_regval
id|bdrkreg_t
id|ii_ibna0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|33
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|24
suffix:semicolon
DECL|member|ii_ibna0_fld_s
)brace
id|ii_ibna0_fld_s
suffix:semicolon
DECL|typedef|ii_ibna0_u_t
)brace
id|ii_ibna0_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ibna0_u
r_typedef
r_union
id|ii_ibna0_u
(brace
DECL|member|ii_ibna0_regval
id|bdrkreg_t
id|ii_ibna0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|24
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|33
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|ii_ibna0_fld_s
)brace
id|ii_ibna0_fld_s
suffix:semicolon
DECL|typedef|ii_ibna0_u_t
)brace
id|ii_ibna0_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the programmable level as well as the node   *&n; * ID and PI unit of the processor to which the interrupt will be       *&n; * sent.                                                                *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ibia0_u
r_typedef
r_union
id|ii_ibia0_u
(brace
DECL|member|ii_ibia0_regval
id|bdrkreg_t
id|ii_ibia0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_pi_id
id|bdrkreg_t
id|i_pi_id
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_node_id
id|bdrkreg_t
id|i_node_id
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_level
id|bdrkreg_t
id|i_level
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|41
suffix:semicolon
DECL|member|ii_ibia0_fld_s
)brace
id|ii_ibia0_fld_s
suffix:semicolon
DECL|typedef|ii_ibia0_u_t
)brace
id|ii_ibia0_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ibia0_u
r_typedef
r_union
id|ii_ibia0_u
(brace
DECL|member|ii_ibia0_regval
id|bdrkreg_t
id|ii_ibia0_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|41
suffix:semicolon
DECL|member|i_level
id|bdrkreg_t
id|i_level
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_node_id
id|bdrkreg_t
id|i_node_id
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_pi_id
id|bdrkreg_t
id|i_pi_id
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_ibia0_fld_s
)brace
id|ii_ibia0_fld_s
suffix:semicolon
DECL|typedef|ii_ibia0_u_t
)brace
id|ii_ibia0_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register is used to set up the length for a       *&n; * transfer and then to monitor the progress of that transfer. This     *&n; * register needs to be initialized before a transfer is started. A     *&n; * legitimate write to this register will set the Busy bit, clear the   *&n; * Error bit, and initialize the length to the value desired.           *&n; * While the transfer is in progress, hardware will decrement the       *&n; * length field with each successful block that is copied. Once the     *&n; * transfer completes, hardware will clear the Busy bit. The length     *&n; * field will also contain the number of cache lines left to be         *&n; * transferred.                                                         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ibls1_u
r_typedef
r_union
id|ii_ibls1_u
(brace
DECL|member|ii_ibls1_regval
id|bdrkreg_t
id|ii_ibls1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_length
id|bdrkreg_t
id|i_length
suffix:colon
l_int|16
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_busy
id|bdrkreg_t
id|i_busy
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|43
suffix:semicolon
DECL|member|ii_ibls1_fld_s
)brace
id|ii_ibls1_fld_s
suffix:semicolon
DECL|typedef|ii_ibls1_u_t
)brace
id|ii_ibls1_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ibls1_u
r_typedef
r_union
id|ii_ibls1_u
(brace
DECL|member|ii_ibls1_regval
id|bdrkreg_t
id|ii_ibls1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|43
suffix:semicolon
DECL|member|i_busy
id|bdrkreg_t
id|i_busy
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_error
id|bdrkreg_t
id|i_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_length
id|bdrkreg_t
id|i_length
suffix:colon
l_int|16
suffix:semicolon
DECL|member|ii_ibls1_fld_s
)brace
id|ii_ibls1_fld_s
suffix:semicolon
DECL|typedef|ii_ibls1_u_t
)brace
id|ii_ibls1_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register should be loaded before a transfer is started. The    *&n; * address to be loaded in bits 39:0 is the 40-bit TRex+ physical       *&n; * address as described in Section 1.3, Figure2 and Figure3. Since      *&n; * the bottom 7 bits of the address are always taken to be zero, BTE    *&n; * transfers are always cacheline-aligned.                              *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ibsa1_u
r_typedef
r_union
id|ii_ibsa1_u
(brace
DECL|member|ii_ibsa1_regval
id|bdrkreg_t
id|ii_ibsa1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|33
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|24
suffix:semicolon
DECL|member|ii_ibsa1_fld_s
)brace
id|ii_ibsa1_fld_s
suffix:semicolon
DECL|typedef|ii_ibsa1_u_t
)brace
id|ii_ibsa1_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ibsa1_u
r_typedef
r_union
id|ii_ibsa1_u
(brace
DECL|member|ii_ibsa1_regval
id|bdrkreg_t
id|ii_ibsa1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|24
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|33
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|ii_ibsa1_fld_s
)brace
id|ii_ibsa1_fld_s
suffix:semicolon
DECL|typedef|ii_ibsa1_u_t
)brace
id|ii_ibsa1_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register should be loaded before a transfer is started. The    *&n; * address to be loaded in bits 39:0 is the 40-bit TRex+ physical       *&n; * address as described in Section 1.3, Figure2 and Figure3. Since      *&n; * the bottom 7 bits of the address are always taken to be zero, BTE    *&n; * transfers are always cacheline-aligned.                              *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ibda1_u
r_typedef
r_union
id|ii_ibda1_u
(brace
DECL|member|ii_ibda1_regval
id|bdrkreg_t
id|ii_ibda1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|33
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|24
suffix:semicolon
DECL|member|ii_ibda1_fld_s
)brace
id|ii_ibda1_fld_s
suffix:semicolon
DECL|typedef|ii_ibda1_u_t
)brace
id|ii_ibda1_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ibda1_u
r_typedef
r_union
id|ii_ibda1_u
(brace
DECL|member|ii_ibda1_regval
id|bdrkreg_t
id|ii_ibda1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|24
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|33
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|ii_ibda1_fld_s
)brace
id|ii_ibda1_fld_s
suffix:semicolon
DECL|typedef|ii_ibda1_u_t
)brace
id|ii_ibda1_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Writing to this register sets up the attributes of the transfer     *&n; * and initiates the transfer operation. Reading this register has      *&n; * the side effect of terminating any transfer in progress. Note:       *&n; * stopping a transfer midstream could have an adverse impact on the    *&n; * other BTE. If a BTE stream has to be stopped (due to error           *&n; * handling for example), both BTE streams should be stopped and        *&n; * their transfers discarded.                                           *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ibct1_u
r_typedef
r_union
id|ii_ibct1_u
(brace
DECL|member|ii_ibct1_regval
id|bdrkreg_t
id|ii_ibct1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_zerofill
id|bdrkreg_t
id|i_zerofill
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_notify
id|bdrkreg_t
id|i_notify
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_poison
id|bdrkreg_t
id|i_poison
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|55
suffix:semicolon
DECL|member|ii_ibct1_fld_s
)brace
id|ii_ibct1_fld_s
suffix:semicolon
DECL|typedef|ii_ibct1_u_t
)brace
id|ii_ibct1_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ibct1_u
r_typedef
r_union
id|ii_ibct1_u
(brace
DECL|member|ii_ibct1_regval
id|bdrkreg_t
id|ii_ibct1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|55
suffix:semicolon
DECL|member|i_poison
id|bdrkreg_t
id|i_poison
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_notify
id|bdrkreg_t
id|i_notify
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_rsvd_2
id|bdrkreg_t
id|i_rsvd_2
suffix:colon
l_int|3
suffix:semicolon
DECL|member|i_zerofill
id|bdrkreg_t
id|i_zerofill
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_ibct1_fld_s
)brace
id|ii_ibct1_fld_s
suffix:semicolon
DECL|typedef|ii_ibct1_u_t
)brace
id|ii_ibct1_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the address to which the WINV is sent.       *&n; * This address has to be cache line aligned.                           *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ibna1_u
r_typedef
r_union
id|ii_ibna1_u
(brace
DECL|member|ii_ibna1_regval
id|bdrkreg_t
id|ii_ibna1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|33
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|24
suffix:semicolon
DECL|member|ii_ibna1_fld_s
)brace
id|ii_ibna1_fld_s
suffix:semicolon
DECL|typedef|ii_ibna1_u_t
)brace
id|ii_ibna1_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ibna1_u
r_typedef
r_union
id|ii_ibna1_u
(brace
DECL|member|ii_ibna1_regval
id|bdrkreg_t
id|ii_ibna1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|24
suffix:semicolon
DECL|member|i_addr
id|bdrkreg_t
id|i_addr
suffix:colon
l_int|33
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|ii_ibna1_fld_s
)brace
id|ii_ibna1_fld_s
suffix:semicolon
DECL|typedef|ii_ibna1_u_t
)brace
id|ii_ibna1_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register contains the programmable level as well as the node   *&n; * ID and PI unit of the processor to which the interrupt will be       *&n; * sent.                                                                *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ibia1_u
r_typedef
r_union
id|ii_ibia1_u
(brace
DECL|member|ii_ibia1_regval
id|bdrkreg_t
id|ii_ibia1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_pi_id
id|bdrkreg_t
id|i_pi_id
suffix:colon
l_int|1
suffix:semicolon
DECL|member|i_node_id
id|bdrkreg_t
id|i_node_id
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_level
id|bdrkreg_t
id|i_level
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|41
suffix:semicolon
DECL|member|ii_ibia1_fld_s
)brace
id|ii_ibia1_fld_s
suffix:semicolon
DECL|typedef|ii_ibia1_u_t
)brace
id|ii_ibia1_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ibia1_u
r_typedef
r_union
id|ii_ibia1_u
(brace
DECL|member|ii_ibia1_regval
id|bdrkreg_t
id|ii_ibia1_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|41
suffix:semicolon
DECL|member|i_level
id|bdrkreg_t
id|i_level
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_rsvd_1
id|bdrkreg_t
id|i_rsvd_1
suffix:colon
l_int|7
suffix:semicolon
DECL|member|i_node_id
id|bdrkreg_t
id|i_node_id
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_pi_id
id|bdrkreg_t
id|i_pi_id
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ii_ibia1_fld_s
)brace
id|ii_ibia1_fld_s
suffix:semicolon
DECL|typedef|ii_ibia1_u_t
)brace
id|ii_ibia1_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register defines the resources that feed information into      *&n; * the two performance counters located in the IO Performance           *&n; * Profiling Register. There are 17 different quantities that can be    *&n; * measured. Given these 17 different options, the two performance      *&n; * counters have 15 of them in common; menu selections 0 through 0xE    *&n; * are identical for each performance counter. As for the other two     *&n; * options, one is available from one performance counter and the       *&n; * other is available from the other performance counter. Hence, the    *&n; * II supports all 17*16=272 possible combinations of quantities to     *&n; * measure.                                                             *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ipcr_u
r_typedef
r_union
id|ii_ipcr_u
(brace
DECL|member|ii_ipcr_regval
id|bdrkreg_t
id|ii_ipcr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_ippr0_c
id|bdrkreg_t
id|i_ippr0_c
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_ippr1_c
id|bdrkreg_t
id|i_ippr1_c
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_icct
id|bdrkreg_t
id|i_icct
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|ii_ipcr_fld_s
)brace
id|ii_ipcr_fld_s
suffix:semicolon
DECL|typedef|ii_ipcr_u_t
)brace
id|ii_ipcr_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ipcr_u
r_typedef
r_union
id|ii_ipcr_u
(brace
DECL|member|ii_ipcr_regval
id|bdrkreg_t
id|ii_ipcr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_rsvd
id|bdrkreg_t
id|i_rsvd
suffix:colon
l_int|48
suffix:semicolon
DECL|member|i_icct
id|bdrkreg_t
id|i_icct
suffix:colon
l_int|8
suffix:semicolon
DECL|member|i_ippr1_c
id|bdrkreg_t
id|i_ippr1_c
suffix:colon
l_int|4
suffix:semicolon
DECL|member|i_ippr0_c
id|bdrkreg_t
id|i_ippr0_c
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ii_ipcr_fld_s
)brace
id|ii_ipcr_fld_s
suffix:semicolon
DECL|typedef|ii_ipcr_u_t
)brace
id|ii_ipcr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *                                                                      *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|ii_ippr_u
r_typedef
r_union
id|ii_ippr_u
(brace
DECL|member|ii_ippr_regval
id|bdrkreg_t
id|ii_ippr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_ippr0
id|bdrkreg_t
id|i_ippr0
suffix:colon
l_int|32
suffix:semicolon
DECL|member|i_ippr1
id|bdrkreg_t
id|i_ippr1
suffix:colon
l_int|32
suffix:semicolon
DECL|member|ii_ippr_fld_s
)brace
id|ii_ippr_fld_s
suffix:semicolon
DECL|typedef|ii_ippr_u_t
)brace
id|ii_ippr_u_t
suffix:semicolon
macro_line|#else
DECL|union|ii_ippr_u
r_typedef
r_union
id|ii_ippr_u
(brace
DECL|member|ii_ippr_regval
id|bdrkreg_t
id|ii_ippr_regval
suffix:semicolon
r_struct
(brace
DECL|member|i_ippr1
id|bdrkreg_t
id|i_ippr1
suffix:colon
l_int|32
suffix:semicolon
DECL|member|i_ippr0
id|bdrkreg_t
id|i_ippr0
suffix:colon
l_int|32
suffix:semicolon
DECL|member|ii_ippr_fld_s
)brace
id|ii_ippr_fld_s
suffix:semicolon
DECL|typedef|ii_ippr_u_t
)brace
id|ii_ippr_u_t
suffix:semicolon
macro_line|#endif
macro_line|#endif /* _LANGUAGE_C */
multiline_comment|/************************************************************************&n; *                                                                      *&n; * The following defines which were not formed into structures are      *&n; * probably indentical to another register, and the name of the         *&n; * register is provided against each of these registers. This           *&n; * information needs to be checked carefully                            *&n; *                                                                      *&n; *           IIO_ICRB1_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB1_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB1_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB1_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB2_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB2_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB2_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB2_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB3_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB3_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB3_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB3_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB4_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB4_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB4_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB4_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB5_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB5_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB5_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB5_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB6_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB6_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB6_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB6_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB7_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB7_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB7_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB7_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB8_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB8_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB8_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB8_D                IIO_ICRB0_D                       *&n; *           IIO_ICRB9_A                IIO_ICRB0_A                       *&n; *           IIO_ICRB9_B                IIO_ICRB0_B                       *&n; *           IIO_ICRB9_C                IIO_ICRB0_C                       *&n; *           IIO_ICRB9_D                IIO_ICRB0_D                       *&n; *           IIO_ICRBA_A                IIO_ICRB0_A                       *&n; *           IIO_ICRBA_B                IIO_ICRB0_B                       *&n; *           IIO_ICRBA_C                IIO_ICRB0_C                       *&n; *           IIO_ICRBA_D                IIO_ICRB0_D                       *&n; *           IIO_ICRBB_A                IIO_ICRB0_A                       *&n; *           IIO_ICRBB_B                IIO_ICRB0_B                       *&n; *           IIO_ICRBB_C                IIO_ICRB0_C                       *&n; *           IIO_ICRBB_D                IIO_ICRB0_D                       *&n; *           IIO_ICRBC_A                IIO_ICRB0_A                       *&n; *           IIO_ICRBC_B                IIO_ICRB0_B                       *&n; *           IIO_ICRBC_C                IIO_ICRB0_C                       *&n; *           IIO_ICRBC_D                IIO_ICRB0_D                       *&n; *           IIO_ICRBD_A                IIO_ICRB0_A                       *&n; *           IIO_ICRBD_B                IIO_ICRB0_B                       *&n; *           IIO_ICRBD_C                IIO_ICRB0_C                       *&n; *           IIO_ICRBD_D                IIO_ICRB0_D                       *&n; *           IIO_ICRBE_A                IIO_ICRB0_A                       *&n; *           IIO_ICRBE_B                IIO_ICRB0_B                       *&n; *           IIO_ICRBE_C                IIO_ICRB0_C                       *&n; *           IIO_ICRBE_D                IIO_ICRB0_D                       *&n; *                                                                      *&n; ************************************************************************/
multiline_comment|/************************************************************************&n; *                                                                      *&n; *               MAKE ALL ADDITIONS AFTER THIS LINE                     *&n; *                                                                      *&n; ************************************************************************/
macro_line|#endif /* _ASM_SN_SN1_HUBIO_H */
eof
