multiline_comment|/* $Id$&n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 1992 - 1997, 2000 Silicon Graphics, Inc.&n; * Copyright (C) 2000 by Colin Ngam&n; */
macro_line|#ifndef _ASM_SN_SN1_HUBMD_H
DECL|macro|_ASM_SN_SN1_HUBMD_H
mdefine_line|#define _ASM_SN_SN1_HUBMD_H
multiline_comment|/************************************************************************&n; *                                                                      *&n; *      WARNING!!!  WARNING!!!  WARNING!!!  WARNING!!!  WARNING!!!      *&n; *                                                                      *&n; * This file is created by an automated script. Any (minimal) changes   *&n; * made manually to this  file should be made with care.                *&n; *                                                                      *&n; *               MAKE ALL ADDITIONS TO THE END OF THIS FILE             *&n; *                                                                      *&n; ************************************************************************/
DECL|macro|MD_CURRENT_CELL
mdefine_line|#define    MD_CURRENT_CELL           0x00780000    /*&n;                                                    * BDDIR, LREG, LBOOT,&n;                                                    * RREG, RBOOT&n;                                                    * protection and mask&n;                                                    * for using Local&n;                                                    * Access protection.&n;                                                    */
DECL|macro|MD_MEMORY_CONFIG
mdefine_line|#define    MD_MEMORY_CONFIG          0x00780008    /*&n;                                                    * Memory/Directory&n;                                                    * DIMM control&n;                                                    */
DECL|macro|MD_ARBITRATION_CONTROL
mdefine_line|#define    MD_ARBITRATION_CONTROL    0x00780010    /*&n;                                                    * Arbitration&n;                                                    * Parameters&n;                                                    */
DECL|macro|MD_MIG_CONFIG
mdefine_line|#define    MD_MIG_CONFIG             0x00780018    /*&n;                                                    * Page Migration&n;                                                    * control&n;                                                    */
DECL|macro|MD_FANDOP_CAC_STAT0
mdefine_line|#define    MD_FANDOP_CAC_STAT0       0x00780020    /*&n;                                                    * Fetch-and-op cache&n;                                                    * 0 status&n;                                                    */
DECL|macro|MD_FANDOP_CAC_STAT1
mdefine_line|#define    MD_FANDOP_CAC_STAT1       0x00780028    /*&n;                                                    * Fetch-and-op cache&n;                                                    * 1 status&n;                                                    */
DECL|macro|MD_MISC0_ERROR
mdefine_line|#define    MD_MISC0_ERROR            0x00780040    /*&n;                                                    * Miscellaneous MD&n;                                                    * error&n;                                                    */
DECL|macro|MD_MISC1_ERROR
mdefine_line|#define    MD_MISC1_ERROR            0x00780048    /*&n;                                                    * Miscellaneous MD&n;                                                    * error&n;                                                    */
DECL|macro|MD_MISC1_ERROR_CLR
mdefine_line|#define    MD_MISC1_ERROR_CLR        0x00780058    /*&n;                                                    * Miscellaneous MD&n;                                                    * error clear&n;                                                    */
DECL|macro|MD_OUTGOING_RP_QUEUE_SIZE
mdefine_line|#define    MD_OUTGOING_RP_QUEUE_SIZE 0x00780060    /*&n;                                                    * MD outgoing reply&n;                                                    * queues sizing&n;                                                    */
DECL|macro|MD_PERF_SEL0
mdefine_line|#define    MD_PERF_SEL0              0x00790000    /*&n;                                                    * Selects events&n;                                                    * monitored by&n;                                                    * MD_PERF_CNT0&n;                                                    */
DECL|macro|MD_PERF_SEL1
mdefine_line|#define    MD_PERF_SEL1              0x00790008    /*&n;                                                    * Selects events&n;                                                    * monitored by&n;                                                    * MD_PERF_CNT1&n;                                                    */
DECL|macro|MD_PERF_CNT0
mdefine_line|#define    MD_PERF_CNT0              0x00790010    /*&n;                                                    * Performance counter&n;                                                    * 0&n;                                                    */
DECL|macro|MD_PERF_CNT1
mdefine_line|#define    MD_PERF_CNT1              0x00790018    /*&n;                                                    * Performance counter&n;                                                    * 1&n;                                                    */
DECL|macro|MD_REFRESH_CONTROL
mdefine_line|#define    MD_REFRESH_CONTROL        0x007A0000    /*&n;                                                    * Memory/Directory&n;                                                    * refresh control&n;                                                    */
DECL|macro|MD_JUNK_BUS_TIMING
mdefine_line|#define    MD_JUNK_BUS_TIMING        0x007A0008    /* Junk Bus Timing        */
DECL|macro|MD_LED0
mdefine_line|#define    MD_LED0                   0x007A0010    /* Reads of 8-bit LED0    */
DECL|macro|MD_LED1
mdefine_line|#define    MD_LED1                   0x007A0018    /* Reads of 8-bit LED1    */
DECL|macro|MD_LED2
mdefine_line|#define    MD_LED2                   0x007A0020    /* Reads of 8-bit LED2    */
DECL|macro|MD_LED3
mdefine_line|#define    MD_LED3                   0x007A0028    /* Reads of 8-bit LED3    */
DECL|macro|MD_BIST_CTL
mdefine_line|#define    MD_BIST_CTL               0x007A0030    /*&n;                                                    * BIST general&n;                                                    * control&n;                                                    */
DECL|macro|MD_BIST_DATA
mdefine_line|#define    MD_BIST_DATA              0x007A0038    /*&n;                                                    * BIST initial data&n;                                                    * pattern and&n;                                                    * variation control&n;                                                    */
DECL|macro|MD_BIST_AB_ERR_ADDR
mdefine_line|#define    MD_BIST_AB_ERR_ADDR       0x007A0040    /* BIST error address     */
DECL|macro|MD_BIST_STATUS
mdefine_line|#define    MD_BIST_STATUS            0x007A0048    /* BIST status            */
DECL|macro|MD_IB_DEBUG
mdefine_line|#define    MD_IB_DEBUG               0x007A0060    /* IB debug select        */
DECL|macro|MD_DIR_CONFIG
mdefine_line|#define    MD_DIR_CONFIG             0x007C0000    /*&n;                                                    * Directory mode&n;                                                    * control&n;                                                    */
DECL|macro|MD_DIR_ERROR
mdefine_line|#define    MD_DIR_ERROR              0x007C0010    /*&n;                                                    * Directory DIMM&n;                                                    * error&n;                                                    */
DECL|macro|MD_DIR_ERROR_CLR
mdefine_line|#define    MD_DIR_ERROR_CLR          0x007C0018    /*&n;                                                    * Directory DIMM&n;                                                    * error clear&n;                                                    */
DECL|macro|MD_PROTOCOL_ERROR
mdefine_line|#define    MD_PROTOCOL_ERROR         0x007C0020    /*&n;                                                    * Directory protocol&n;                                                    * error&n;                                                    */
DECL|macro|MD_PROTOCOL_ERR_CLR
mdefine_line|#define    MD_PROTOCOL_ERR_CLR       0x007C0028    /*&n;                                                    * Directory protocol&n;                                                    * error clear&n;                                                    */
DECL|macro|MD_MIG_CANDIDATE
mdefine_line|#define    MD_MIG_CANDIDATE          0x007C0030    /*&n;                                                    * Page migration&n;                                                    * candidate&n;                                                    */
DECL|macro|MD_MIG_CANDIDATE_CLR
mdefine_line|#define    MD_MIG_CANDIDATE_CLR      0x007C0038    /*&n;                                                    * Page migration&n;                                                    * candidate clear&n;                                                    */
DECL|macro|MD_MIG_DIFF_THRESH
mdefine_line|#define    MD_MIG_DIFF_THRESH        0x007C0040    /*&n;                                                    * Page migration&n;                                                    * count difference&n;                                                    * threshold&n;                                                    */
DECL|macro|MD_MIG_VALUE_THRESH
mdefine_line|#define    MD_MIG_VALUE_THRESH       0x007C0048    /*&n;                                                    * Page migration&n;                                                    * count absolute&n;                                                    * threshold&n;                                                    */
DECL|macro|MD_OUTGOING_RQ_QUEUE_SIZE
mdefine_line|#define    MD_OUTGOING_RQ_QUEUE_SIZE 0x007C0050    /*&n;                                                    * MD outgoing request&n;                                                    * queues sizing&n;                                                    */
DECL|macro|MD_BIST_DB_ERR_DATA
mdefine_line|#define    MD_BIST_DB_ERR_DATA       0x007C0058    /*&n;                                                    * BIST directory&n;                                                    * error data&n;                                                    */
DECL|macro|MD_DB_DEBUG
mdefine_line|#define    MD_DB_DEBUG               0x007C0060    /* DB debug select        */
DECL|macro|MD_MB_ECC_CONFIG
mdefine_line|#define    MD_MB_ECC_CONFIG          0x007E0000    /*&n;                                                    * Data ECC&n;                                                    * Configuration&n;                                                    */
DECL|macro|MD_MEM_ERROR
mdefine_line|#define    MD_MEM_ERROR              0x007E0010    /* Memory DIMM error      */
DECL|macro|MD_MEM_ERROR_CLR
mdefine_line|#define    MD_MEM_ERROR_CLR          0x007E0018    /*&n;                                                    * Memory DIMM error&n;                                                    * clear&n;                                                    */
DECL|macro|MD_BIST_MB_ERR_DATA_0
mdefine_line|#define    MD_BIST_MB_ERR_DATA_0     0x007E0020    /*&n;                                                    * BIST memory error&n;                                                    * data&n;                                                    */
DECL|macro|MD_BIST_MB_ERR_DATA_1
mdefine_line|#define    MD_BIST_MB_ERR_DATA_1     0x007E0028    /*&n;                                                    * BIST memory error&n;                                                    * data&n;                                                    */
DECL|macro|MD_BIST_MB_ERR_DATA_2
mdefine_line|#define    MD_BIST_MB_ERR_DATA_2     0x007E0030    /*&n;                                                    * BIST memory error&n;                                                    * data&n;                                                    */
DECL|macro|MD_BIST_MB_ERR_DATA_3
mdefine_line|#define    MD_BIST_MB_ERR_DATA_3     0x007E0038    /*&n;                                                    * BIST memory error&n;                                                    * data&n;                                                    */
DECL|macro|MD_MB_DEBUG
mdefine_line|#define    MD_MB_DEBUG               0x007E0040    /* MB debug select        */
macro_line|#ifdef _LANGUAGE_C
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register shows which regions are in the current   *&n; * cell. If a region has its bit set in this register, then it uses     *&n; * the Local Access protection in the directory instead of the          *&n; * separate per-region protection (which would cause a small            *&n; * performance penalty). In addition, writeback and write reply         *&n; * commands from outside the current cell will always check the         *&n; * directory protection before writing data to memory. Writeback and    *&n; * write reply commands from inside the current cell will write         *&n; * memory regardless of the protection value.                           *&n; * This register is also used as the access-rights bit-vector for       *&n; * most of the ASIC-special (HSpec) portion of the address space. It    *&n; * covers the BDDIR, LREG, LBOOT, RREG, and RBOOT spaces. It does not   *&n; * cover the UALIAS and BDECC spaces, as they are covered by the        *&n; * protection in the directory. If a bit in the bit-vector is set,      *&n; * the region corresponding to that bit has read/write permission on    *&n; * these spaces. If the bit is clear, then that region has read-only    *&n; * access to these spaces (except for LREG/RREG which have no access    *&n; * when the bit is clear).                                              *&n; * The granularity of a region is set by the REGION_SIZE register in    *&n; * the NI local register space.                                         *&n; * NOTE: This means that no processor outside the current cell can      *&n; * write into the BDDIR, LREG, LBOOT, RREG, or RBOOT spaces.            *&n; *                                                                      *&n; ************************************************************************/
DECL|union|md_current_cell_u
r_typedef
r_union
id|md_current_cell_u
(brace
DECL|member|md_current_cell_regval
id|bdrkreg_t
id|md_current_cell_regval
suffix:semicolon
r_struct
(brace
DECL|member|cc_hspec_prot
id|bdrkreg_t
id|cc_hspec_prot
suffix:colon
l_int|64
suffix:semicolon
DECL|member|md_current_cell_fld_s
)brace
id|md_current_cell_fld_s
suffix:semicolon
DECL|typedef|md_current_cell_u_t
)brace
id|md_current_cell_u_t
suffix:semicolon
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register contains three sets of information.      *&n; * The first set describes the size and configuration of DIMMs that     *&n; * are plugged into a system, the second set controls which set of      *&n; * protection checks are performed on each access and the third set     *&n; * controls various DDR SDRAM timing parameters.                        *&n; * In order to config a DIMM bank, three fields must be initialized:    *&n; * BANK_SIZE, DRAM_WIDTH, and BANK_ENABLE. The BANK_SIZE field sets     *&n; * the address range that the MD unit will accept for that DIMM bank.   *&n; * All addresses larger than the specified size will return errors on   *&n; * access. In order to read from a DIMM bank, Bedrock must know         *&n; * whether or not the bank contains x4 or x8/x16 DRAM. The operating    *&n; * system must query the System Controller for this information and     *&n; * then set the DRAM_WIDTH field accordingly. The BANK_ENABLE field     *&n; * can be used to individually enable the two physical banks located    *&n; * on each DIMM bank.                                                   *&n; * The contents of this register are preserved through soft-resets.     *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_memory_config_u
r_typedef
r_union
id|md_memory_config_u
(brace
DECL|member|md_memory_config_regval
id|bdrkreg_t
id|md_memory_config_regval
suffix:semicolon
r_struct
(brace
DECL|member|mc_dimm0_bank_enable
id|bdrkreg_t
id|mc_dimm0_bank_enable
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mc_reserved_7
id|bdrkreg_t
id|mc_reserved_7
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_dimm0_dram_width
id|bdrkreg_t
id|mc_dimm0_dram_width
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_dimm0_bank_size
id|bdrkreg_t
id|mc_dimm0_bank_size
suffix:colon
l_int|4
suffix:semicolon
DECL|member|mc_dimm1_bank_enable
id|bdrkreg_t
id|mc_dimm1_bank_enable
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mc_reserved_6
id|bdrkreg_t
id|mc_reserved_6
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_dimm1_dram_width
id|bdrkreg_t
id|mc_dimm1_dram_width
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_dimm1_bank_size
id|bdrkreg_t
id|mc_dimm1_bank_size
suffix:colon
l_int|4
suffix:semicolon
DECL|member|mc_dimm2_bank_enable
id|bdrkreg_t
id|mc_dimm2_bank_enable
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mc_reserved_5
id|bdrkreg_t
id|mc_reserved_5
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_dimm2_dram_width
id|bdrkreg_t
id|mc_dimm2_dram_width
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_dimm2_bank_size
id|bdrkreg_t
id|mc_dimm2_bank_size
suffix:colon
l_int|4
suffix:semicolon
DECL|member|mc_dimm3_bank_enable
id|bdrkreg_t
id|mc_dimm3_bank_enable
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mc_reserved_4
id|bdrkreg_t
id|mc_reserved_4
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_dimm3_dram_width
id|bdrkreg_t
id|mc_dimm3_dram_width
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_dimm3_bank_size
id|bdrkreg_t
id|mc_dimm3_bank_size
suffix:colon
l_int|4
suffix:semicolon
DECL|member|mc_dimm0_sel
id|bdrkreg_t
id|mc_dimm0_sel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mc_reserved_3
id|bdrkreg_t
id|mc_reserved_3
suffix:colon
l_int|10
suffix:semicolon
DECL|member|mc_cc_enable
id|bdrkreg_t
id|mc_cc_enable
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_io_prot_en
id|bdrkreg_t
id|mc_io_prot_en
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_io_prot_ignore
id|bdrkreg_t
id|mc_io_prot_ignore
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_cpu_prot_ignore
id|bdrkreg_t
id|mc_cpu_prot_ignore
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_db_neg_edge
id|bdrkreg_t
id|mc_db_neg_edge
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_phase_delay
id|bdrkreg_t
id|mc_phase_delay
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_delay_mux_sel
id|bdrkreg_t
id|mc_delay_mux_sel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mc_sample_time
id|bdrkreg_t
id|mc_sample_time
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mc_reserved_2
id|bdrkreg_t
id|mc_reserved_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mc_mb_neg_edge
id|bdrkreg_t
id|mc_mb_neg_edge
suffix:colon
l_int|3
suffix:semicolon
DECL|member|mc_reserved_1
id|bdrkreg_t
id|mc_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_rcd_config
id|bdrkreg_t
id|mc_rcd_config
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_rp_config
id|bdrkreg_t
id|mc_rp_config
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_reserved
id|bdrkreg_t
id|mc_reserved
suffix:colon
l_int|2
suffix:semicolon
DECL|member|md_memory_config_fld_s
)brace
id|md_memory_config_fld_s
suffix:semicolon
DECL|typedef|md_memory_config_u_t
)brace
id|md_memory_config_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_memory_config_u
r_typedef
r_union
id|md_memory_config_u
(brace
DECL|member|md_memory_config_regval
id|bdrkreg_t
id|md_memory_config_regval
suffix:semicolon
r_struct
(brace
DECL|member|mc_reserved
id|bdrkreg_t
id|mc_reserved
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mc_rp_config
id|bdrkreg_t
id|mc_rp_config
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_rcd_config
id|bdrkreg_t
id|mc_rcd_config
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_reserved_1
id|bdrkreg_t
id|mc_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_mb_neg_edge
id|bdrkreg_t
id|mc_mb_neg_edge
suffix:colon
l_int|3
suffix:semicolon
DECL|member|mc_reserved_2
id|bdrkreg_t
id|mc_reserved_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mc_sample_time
id|bdrkreg_t
id|mc_sample_time
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mc_delay_mux_sel
id|bdrkreg_t
id|mc_delay_mux_sel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mc_phase_delay
id|bdrkreg_t
id|mc_phase_delay
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_db_neg_edge
id|bdrkreg_t
id|mc_db_neg_edge
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_cpu_prot_ignore
id|bdrkreg_t
id|mc_cpu_prot_ignore
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_io_prot_ignore
id|bdrkreg_t
id|mc_io_prot_ignore
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_io_prot_en
id|bdrkreg_t
id|mc_io_prot_en
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_cc_enable
id|bdrkreg_t
id|mc_cc_enable
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_reserved_3
id|bdrkreg_t
id|mc_reserved_3
suffix:colon
l_int|10
suffix:semicolon
DECL|member|mc_dimm0_sel
id|bdrkreg_t
id|mc_dimm0_sel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mc_dimm3_bank_size
id|bdrkreg_t
id|mc_dimm3_bank_size
suffix:colon
l_int|4
suffix:semicolon
DECL|member|mc_dimm3_dram_width
id|bdrkreg_t
id|mc_dimm3_dram_width
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_reserved_4
id|bdrkreg_t
id|mc_reserved_4
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_dimm3_bank_enable
id|bdrkreg_t
id|mc_dimm3_bank_enable
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mc_dimm2_bank_size
id|bdrkreg_t
id|mc_dimm2_bank_size
suffix:colon
l_int|4
suffix:semicolon
DECL|member|mc_dimm2_dram_width
id|bdrkreg_t
id|mc_dimm2_dram_width
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_reserved_5
id|bdrkreg_t
id|mc_reserved_5
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_dimm2_bank_enable
id|bdrkreg_t
id|mc_dimm2_bank_enable
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mc_dimm1_bank_size
id|bdrkreg_t
id|mc_dimm1_bank_size
suffix:colon
l_int|4
suffix:semicolon
DECL|member|mc_dimm1_dram_width
id|bdrkreg_t
id|mc_dimm1_dram_width
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_reserved_6
id|bdrkreg_t
id|mc_reserved_6
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_dimm1_bank_enable
id|bdrkreg_t
id|mc_dimm1_bank_enable
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mc_dimm0_bank_size
id|bdrkreg_t
id|mc_dimm0_bank_size
suffix:colon
l_int|4
suffix:semicolon
DECL|member|mc_dimm0_dram_width
id|bdrkreg_t
id|mc_dimm0_dram_width
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_reserved_7
id|bdrkreg_t
id|mc_reserved_7
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_dimm0_bank_enable
id|bdrkreg_t
id|mc_dimm0_bank_enable
suffix:colon
l_int|2
suffix:semicolon
DECL|member|md_memory_config_fld_s
)brace
id|md_memory_config_fld_s
suffix:semicolon
DECL|typedef|md_memory_config_u_t
)brace
id|md_memory_config_u_t
suffix:semicolon
macro_line|#endif
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_arbitration_control_u
r_typedef
r_union
id|md_arbitration_control_u
(brace
DECL|member|md_arbitration_control_regval
id|bdrkreg_t
id|md_arbitration_control_regval
suffix:semicolon
r_struct
(brace
DECL|member|ac_reply_guar
id|bdrkreg_t
id|ac_reply_guar
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ac_write_guar
id|bdrkreg_t
id|ac_write_guar
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ac_reserved
id|bdrkreg_t
id|ac_reserved
suffix:colon
l_int|56
suffix:semicolon
DECL|member|md_arbitration_control_fld_s
)brace
id|md_arbitration_control_fld_s
suffix:semicolon
DECL|typedef|md_arbitration_control_u_t
)brace
id|md_arbitration_control_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_arbitration_control_u
r_typedef
r_union
id|md_arbitration_control_u
(brace
DECL|member|md_arbitration_control_regval
id|bdrkreg_t
id|md_arbitration_control_regval
suffix:semicolon
r_struct
(brace
DECL|member|ac_reserved
id|bdrkreg_t
id|ac_reserved
suffix:colon
l_int|56
suffix:semicolon
DECL|member|ac_write_guar
id|bdrkreg_t
id|ac_write_guar
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ac_reply_guar
id|bdrkreg_t
id|ac_reply_guar
suffix:colon
l_int|4
suffix:semicolon
DECL|member|md_arbitration_control_fld_s
)brace
id|md_arbitration_control_fld_s
suffix:semicolon
DECL|typedef|md_arbitration_control_u_t
)brace
id|md_arbitration_control_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains page migration control fields.                             *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_mig_config_u
r_typedef
r_union
id|md_mig_config_u
(brace
DECL|member|md_mig_config_regval
id|bdrkreg_t
id|md_mig_config_regval
suffix:semicolon
r_struct
(brace
DECL|member|mc_mig_interval
id|bdrkreg_t
id|mc_mig_interval
suffix:colon
l_int|10
suffix:semicolon
DECL|member|mc_reserved_2
id|bdrkreg_t
id|mc_reserved_2
suffix:colon
l_int|6
suffix:semicolon
DECL|member|mc_mig_node_mask
id|bdrkreg_t
id|mc_mig_node_mask
suffix:colon
l_int|8
suffix:semicolon
DECL|member|mc_reserved_1
id|bdrkreg_t
id|mc_reserved_1
suffix:colon
l_int|8
suffix:semicolon
DECL|member|mc_mig_enable
id|bdrkreg_t
id|mc_mig_enable
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_reserved
id|bdrkreg_t
id|mc_reserved
suffix:colon
l_int|31
suffix:semicolon
DECL|member|md_mig_config_fld_s
)brace
id|md_mig_config_fld_s
suffix:semicolon
DECL|typedef|md_mig_config_u_t
)brace
id|md_mig_config_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_mig_config_u
r_typedef
r_union
id|md_mig_config_u
(brace
DECL|member|md_mig_config_regval
id|bdrkreg_t
id|md_mig_config_regval
suffix:semicolon
r_struct
(brace
DECL|member|mc_reserved
id|bdrkreg_t
id|mc_reserved
suffix:colon
l_int|31
suffix:semicolon
DECL|member|mc_mig_enable
id|bdrkreg_t
id|mc_mig_enable
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_reserved_1
id|bdrkreg_t
id|mc_reserved_1
suffix:colon
l_int|8
suffix:semicolon
DECL|member|mc_mig_node_mask
id|bdrkreg_t
id|mc_mig_node_mask
suffix:colon
l_int|8
suffix:semicolon
DECL|member|mc_reserved_2
id|bdrkreg_t
id|mc_reserved_2
suffix:colon
l_int|6
suffix:semicolon
DECL|member|mc_mig_interval
id|bdrkreg_t
id|mc_mig_interval
suffix:colon
l_int|10
suffix:semicolon
DECL|member|md_mig_config_fld_s
)brace
id|md_mig_config_fld_s
suffix:semicolon
DECL|typedef|md_mig_config_u_t
)brace
id|md_mig_config_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Each register contains the valid bit and address of the entry in    *&n; * the fetch-and-op for cache 0 (or 1).                                 *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_fandop_cac_stat0_u
r_typedef
r_union
id|md_fandop_cac_stat0_u
(brace
DECL|member|md_fandop_cac_stat0_regval
id|bdrkreg_t
id|md_fandop_cac_stat0_regval
suffix:semicolon
r_struct
(brace
DECL|member|fcs_reserved_1
id|bdrkreg_t
id|fcs_reserved_1
suffix:colon
l_int|6
suffix:semicolon
DECL|member|fcs_addr
id|bdrkreg_t
id|fcs_addr
suffix:colon
l_int|27
suffix:semicolon
DECL|member|fcs_reserved
id|bdrkreg_t
id|fcs_reserved
suffix:colon
l_int|30
suffix:semicolon
DECL|member|fcs_valid
id|bdrkreg_t
id|fcs_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_fandop_cac_stat0_fld_s
)brace
id|md_fandop_cac_stat0_fld_s
suffix:semicolon
DECL|typedef|md_fandop_cac_stat0_u_t
)brace
id|md_fandop_cac_stat0_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_fandop_cac_stat0_u
r_typedef
r_union
id|md_fandop_cac_stat0_u
(brace
DECL|member|md_fandop_cac_stat0_regval
id|bdrkreg_t
id|md_fandop_cac_stat0_regval
suffix:semicolon
r_struct
(brace
DECL|member|fcs_valid
id|bdrkreg_t
id|fcs_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|fcs_reserved
id|bdrkreg_t
id|fcs_reserved
suffix:colon
l_int|30
suffix:semicolon
DECL|member|fcs_addr
id|bdrkreg_t
id|fcs_addr
suffix:colon
l_int|27
suffix:semicolon
DECL|member|fcs_reserved_1
id|bdrkreg_t
id|fcs_reserved_1
suffix:colon
l_int|6
suffix:semicolon
DECL|member|md_fandop_cac_stat0_fld_s
)brace
id|md_fandop_cac_stat0_fld_s
suffix:semicolon
DECL|typedef|md_fandop_cac_stat0_u_t
)brace
id|md_fandop_cac_stat0_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Each register contains the valid bit and address of the entry in    *&n; * the fetch-and-op for cache 0 (or 1).                                 *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_fandop_cac_stat1_u
r_typedef
r_union
id|md_fandop_cac_stat1_u
(brace
DECL|member|md_fandop_cac_stat1_regval
id|bdrkreg_t
id|md_fandop_cac_stat1_regval
suffix:semicolon
r_struct
(brace
DECL|member|fcs_reserved_1
id|bdrkreg_t
id|fcs_reserved_1
suffix:colon
l_int|6
suffix:semicolon
DECL|member|fcs_addr
id|bdrkreg_t
id|fcs_addr
suffix:colon
l_int|27
suffix:semicolon
DECL|member|fcs_reserved
id|bdrkreg_t
id|fcs_reserved
suffix:colon
l_int|30
suffix:semicolon
DECL|member|fcs_valid
id|bdrkreg_t
id|fcs_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_fandop_cac_stat1_fld_s
)brace
id|md_fandop_cac_stat1_fld_s
suffix:semicolon
DECL|typedef|md_fandop_cac_stat1_u_t
)brace
id|md_fandop_cac_stat1_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_fandop_cac_stat1_u
r_typedef
r_union
id|md_fandop_cac_stat1_u
(brace
DECL|member|md_fandop_cac_stat1_regval
id|bdrkreg_t
id|md_fandop_cac_stat1_regval
suffix:semicolon
r_struct
(brace
DECL|member|fcs_valid
id|bdrkreg_t
id|fcs_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|fcs_reserved
id|bdrkreg_t
id|fcs_reserved
suffix:colon
l_int|30
suffix:semicolon
DECL|member|fcs_addr
id|bdrkreg_t
id|fcs_addr
suffix:colon
l_int|27
suffix:semicolon
DECL|member|fcs_reserved_1
id|bdrkreg_t
id|fcs_reserved_1
suffix:colon
l_int|6
suffix:semicolon
DECL|member|md_fandop_cac_stat1_fld_s
)brace
id|md_fandop_cac_stat1_fld_s
suffix:semicolon
DECL|typedef|md_fandop_cac_stat1_u_t
)brace
id|md_fandop_cac_stat1_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  Contains a number of fields to capture various         *&n; * random memory/directory errors. For each 2-bit field, the LSB        *&n; * indicates that additional information has been captured for the      *&n; * error and the MSB indicates overrun, thus:                           *&n; *  x1: bits 51...0 of this register contain additional information     *&n; * for the message that caused this error                               *&n; *  1x: overrun occurred                                                *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_misc0_error_u
r_typedef
r_union
id|md_misc0_error_u
(brace
DECL|member|md_misc0_error_regval
id|bdrkreg_t
id|md_misc0_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|me_command
id|bdrkreg_t
id|me_command
suffix:colon
l_int|7
suffix:semicolon
DECL|member|me_reserved_4
id|bdrkreg_t
id|me_reserved_4
suffix:colon
l_int|1
suffix:semicolon
DECL|member|me_source
id|bdrkreg_t
id|me_source
suffix:colon
l_int|11
suffix:semicolon
DECL|member|me_reserved_3
id|bdrkreg_t
id|me_reserved_3
suffix:colon
l_int|1
suffix:semicolon
DECL|member|me_suppl
id|bdrkreg_t
id|me_suppl
suffix:colon
l_int|11
suffix:semicolon
DECL|member|me_reserved_2
id|bdrkreg_t
id|me_reserved_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|me_virtual_channel
id|bdrkreg_t
id|me_virtual_channel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_reserved_1
id|bdrkreg_t
id|me_reserved_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_tail
id|bdrkreg_t
id|me_tail
suffix:colon
l_int|1
suffix:semicolon
DECL|member|me_reserved
id|bdrkreg_t
id|me_reserved
suffix:colon
l_int|11
suffix:semicolon
DECL|member|me_xb_error
id|bdrkreg_t
id|me_xb_error
suffix:colon
l_int|4
suffix:semicolon
DECL|member|me_bad_partial_data
id|bdrkreg_t
id|me_bad_partial_data
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_missing_dv
id|bdrkreg_t
id|me_missing_dv
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_short_pack
id|bdrkreg_t
id|me_short_pack
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_long_pack
id|bdrkreg_t
id|me_long_pack
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_ill_msg
id|bdrkreg_t
id|me_ill_msg
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_ill_revision
id|bdrkreg_t
id|me_ill_revision
suffix:colon
l_int|2
suffix:semicolon
DECL|member|md_misc0_error_fld_s
)brace
id|md_misc0_error_fld_s
suffix:semicolon
DECL|typedef|md_misc0_error_u_t
)brace
id|md_misc0_error_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_misc0_error_u
r_typedef
r_union
id|md_misc0_error_u
(brace
DECL|member|md_misc0_error_regval
id|bdrkreg_t
id|md_misc0_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|me_ill_revision
id|bdrkreg_t
id|me_ill_revision
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_ill_msg
id|bdrkreg_t
id|me_ill_msg
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_long_pack
id|bdrkreg_t
id|me_long_pack
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_short_pack
id|bdrkreg_t
id|me_short_pack
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_missing_dv
id|bdrkreg_t
id|me_missing_dv
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_bad_partial_data
id|bdrkreg_t
id|me_bad_partial_data
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_xb_error
id|bdrkreg_t
id|me_xb_error
suffix:colon
l_int|4
suffix:semicolon
DECL|member|me_reserved
id|bdrkreg_t
id|me_reserved
suffix:colon
l_int|11
suffix:semicolon
DECL|member|me_tail
id|bdrkreg_t
id|me_tail
suffix:colon
l_int|1
suffix:semicolon
DECL|member|me_reserved_1
id|bdrkreg_t
id|me_reserved_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_virtual_channel
id|bdrkreg_t
id|me_virtual_channel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_reserved_2
id|bdrkreg_t
id|me_reserved_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|me_suppl
id|bdrkreg_t
id|me_suppl
suffix:colon
l_int|11
suffix:semicolon
DECL|member|me_reserved_3
id|bdrkreg_t
id|me_reserved_3
suffix:colon
l_int|1
suffix:semicolon
DECL|member|me_source
id|bdrkreg_t
id|me_source
suffix:colon
l_int|11
suffix:semicolon
DECL|member|me_reserved_4
id|bdrkreg_t
id|me_reserved_4
suffix:colon
l_int|1
suffix:semicolon
DECL|member|me_command
id|bdrkreg_t
id|me_command
suffix:colon
l_int|7
suffix:semicolon
DECL|member|md_misc0_error_fld_s
)brace
id|md_misc0_error_fld_s
suffix:semicolon
DECL|typedef|md_misc0_error_u_t
)brace
id|md_misc0_error_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Address for error captured in MISC0_ERROR. Error valid bits are     *&n; * repeated in both MISC0_ERROR and MISC1_ERROR (allowing them to be    *&n; * read sequentially without missing any errors).                       *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_misc1_error_u
r_typedef
r_union
id|md_misc1_error_u
(brace
DECL|member|md_misc1_error_regval
id|bdrkreg_t
id|md_misc1_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|me_reserved_1
id|bdrkreg_t
id|me_reserved_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|me_address
id|bdrkreg_t
id|me_address
suffix:colon
l_int|38
suffix:semicolon
DECL|member|me_reserved
id|bdrkreg_t
id|me_reserved
suffix:colon
l_int|7
suffix:semicolon
DECL|member|me_xb_error
id|bdrkreg_t
id|me_xb_error
suffix:colon
l_int|4
suffix:semicolon
DECL|member|me_bad_partial_data
id|bdrkreg_t
id|me_bad_partial_data
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_missing_dv
id|bdrkreg_t
id|me_missing_dv
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_short_pack
id|bdrkreg_t
id|me_short_pack
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_long_pack
id|bdrkreg_t
id|me_long_pack
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_ill_msg
id|bdrkreg_t
id|me_ill_msg
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_ill_revision
id|bdrkreg_t
id|me_ill_revision
suffix:colon
l_int|2
suffix:semicolon
DECL|member|md_misc1_error_fld_s
)brace
id|md_misc1_error_fld_s
suffix:semicolon
DECL|typedef|md_misc1_error_u_t
)brace
id|md_misc1_error_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_misc1_error_u
r_typedef
r_union
id|md_misc1_error_u
(brace
DECL|member|md_misc1_error_regval
id|bdrkreg_t
id|md_misc1_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|me_ill_revision
id|bdrkreg_t
id|me_ill_revision
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_ill_msg
id|bdrkreg_t
id|me_ill_msg
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_long_pack
id|bdrkreg_t
id|me_long_pack
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_short_pack
id|bdrkreg_t
id|me_short_pack
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_missing_dv
id|bdrkreg_t
id|me_missing_dv
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_bad_partial_data
id|bdrkreg_t
id|me_bad_partial_data
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_xb_error
id|bdrkreg_t
id|me_xb_error
suffix:colon
l_int|4
suffix:semicolon
DECL|member|me_reserved
id|bdrkreg_t
id|me_reserved
suffix:colon
l_int|7
suffix:semicolon
DECL|member|me_address
id|bdrkreg_t
id|me_address
suffix:colon
l_int|38
suffix:semicolon
DECL|member|me_reserved_1
id|bdrkreg_t
id|me_reserved_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|md_misc1_error_fld_s
)brace
id|md_misc1_error_fld_s
suffix:semicolon
DECL|typedef|md_misc1_error_u_t
)brace
id|md_misc1_error_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Address for error captured in MISC0_ERROR. Error valid bits are     *&n; * repeated in both MISC0_ERROR and MISC1_ERROR (allowing them to be    *&n; * read sequentially without missing any errors).                       *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_misc1_error_clr_u
r_typedef
r_union
id|md_misc1_error_clr_u
(brace
DECL|member|md_misc1_error_clr_regval
id|bdrkreg_t
id|md_misc1_error_clr_regval
suffix:semicolon
r_struct
(brace
DECL|member|mec_reserved_1
id|bdrkreg_t
id|mec_reserved_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|mec_address
id|bdrkreg_t
id|mec_address
suffix:colon
l_int|38
suffix:semicolon
DECL|member|mec_reserved
id|bdrkreg_t
id|mec_reserved
suffix:colon
l_int|7
suffix:semicolon
DECL|member|mec_xb_error
id|bdrkreg_t
id|mec_xb_error
suffix:colon
l_int|4
suffix:semicolon
DECL|member|mec_bad_partial_data
id|bdrkreg_t
id|mec_bad_partial_data
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_missing_dv
id|bdrkreg_t
id|mec_missing_dv
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_short_pack
id|bdrkreg_t
id|mec_short_pack
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_long_pack
id|bdrkreg_t
id|mec_long_pack
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_ill_msg
id|bdrkreg_t
id|mec_ill_msg
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_ill_revision
id|bdrkreg_t
id|mec_ill_revision
suffix:colon
l_int|2
suffix:semicolon
DECL|member|md_misc1_error_clr_fld_s
)brace
id|md_misc1_error_clr_fld_s
suffix:semicolon
DECL|typedef|md_misc1_error_clr_u_t
)brace
id|md_misc1_error_clr_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_misc1_error_clr_u
r_typedef
r_union
id|md_misc1_error_clr_u
(brace
DECL|member|md_misc1_error_clr_regval
id|bdrkreg_t
id|md_misc1_error_clr_regval
suffix:semicolon
r_struct
(brace
DECL|member|mec_ill_revision
id|bdrkreg_t
id|mec_ill_revision
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_ill_msg
id|bdrkreg_t
id|mec_ill_msg
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_long_pack
id|bdrkreg_t
id|mec_long_pack
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_short_pack
id|bdrkreg_t
id|mec_short_pack
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_missing_dv
id|bdrkreg_t
id|mec_missing_dv
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_bad_partial_data
id|bdrkreg_t
id|mec_bad_partial_data
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_xb_error
id|bdrkreg_t
id|mec_xb_error
suffix:colon
l_int|4
suffix:semicolon
DECL|member|mec_reserved
id|bdrkreg_t
id|mec_reserved
suffix:colon
l_int|7
suffix:semicolon
DECL|member|mec_address
id|bdrkreg_t
id|mec_address
suffix:colon
l_int|38
suffix:semicolon
DECL|member|mec_reserved_1
id|bdrkreg_t
id|mec_reserved_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|md_misc1_error_clr_fld_s
)brace
id|md_misc1_error_clr_fld_s
suffix:semicolon
DECL|typedef|md_misc1_error_clr_u_t
)brace
id|md_misc1_error_clr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  The MD no longer allows for arbitrarily sizing the     *&n; * reply queues, so all of the fields in this register are read-only    *&n; * and contain the reset default value of 12 for the MOQHs (for         *&n; * headers) and 24 for the MOQDs (for data).                            *&n; * Reading from this register returns the values currently held in      *&n; * the MD&squot;s credit counters. Writing to the register resets the         *&n; * counters to the default reset values specified in the table below.   *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_outgoing_rp_queue_size_u
r_typedef
r_union
id|md_outgoing_rp_queue_size_u
(brace
DECL|member|md_outgoing_rp_queue_size_regval
id|bdrkreg_t
id|md_outgoing_rp_queue_size_regval
suffix:semicolon
r_struct
(brace
DECL|member|orqs_reserved_6
id|bdrkreg_t
id|orqs_reserved_6
suffix:colon
l_int|8
suffix:semicolon
DECL|member|orqs_moqh_p0_rp_size
id|bdrkreg_t
id|orqs_moqh_p0_rp_size
suffix:colon
l_int|4
suffix:semicolon
DECL|member|orqs_reserved_5
id|bdrkreg_t
id|orqs_reserved_5
suffix:colon
l_int|4
suffix:semicolon
DECL|member|orqs_moqh_p1_rp_size
id|bdrkreg_t
id|orqs_moqh_p1_rp_size
suffix:colon
l_int|4
suffix:semicolon
DECL|member|orqs_reserved_4
id|bdrkreg_t
id|orqs_reserved_4
suffix:colon
l_int|4
suffix:semicolon
DECL|member|orqs_moqh_np_rp_size
id|bdrkreg_t
id|orqs_moqh_np_rp_size
suffix:colon
l_int|4
suffix:semicolon
DECL|member|orqs_reserved_3
id|bdrkreg_t
id|orqs_reserved_3
suffix:colon
l_int|4
suffix:semicolon
DECL|member|orqs_moqd_pi0_rp_size
id|bdrkreg_t
id|orqs_moqd_pi0_rp_size
suffix:colon
l_int|5
suffix:semicolon
DECL|member|orqs_reserved_2
id|bdrkreg_t
id|orqs_reserved_2
suffix:colon
l_int|3
suffix:semicolon
DECL|member|orqs_moqd_pi1_rp_size
id|bdrkreg_t
id|orqs_moqd_pi1_rp_size
suffix:colon
l_int|5
suffix:semicolon
DECL|member|orqs_reserved_1
id|bdrkreg_t
id|orqs_reserved_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|orqs_moqd_np_rp_size
id|bdrkreg_t
id|orqs_moqd_np_rp_size
suffix:colon
l_int|5
suffix:semicolon
DECL|member|orqs_reserved
id|bdrkreg_t
id|orqs_reserved
suffix:colon
l_int|11
suffix:semicolon
DECL|member|md_outgoing_rp_queue_size_fld_s
)brace
id|md_outgoing_rp_queue_size_fld_s
suffix:semicolon
DECL|typedef|md_outgoing_rp_queue_size_u_t
)brace
id|md_outgoing_rp_queue_size_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_outgoing_rp_queue_size_u
r_typedef
r_union
id|md_outgoing_rp_queue_size_u
(brace
DECL|member|md_outgoing_rp_queue_size_regval
id|bdrkreg_t
id|md_outgoing_rp_queue_size_regval
suffix:semicolon
r_struct
(brace
DECL|member|orqs_reserved
id|bdrkreg_t
id|orqs_reserved
suffix:colon
l_int|11
suffix:semicolon
DECL|member|orqs_moqd_np_rp_size
id|bdrkreg_t
id|orqs_moqd_np_rp_size
suffix:colon
l_int|5
suffix:semicolon
DECL|member|orqs_reserved_1
id|bdrkreg_t
id|orqs_reserved_1
suffix:colon
l_int|3
suffix:semicolon
DECL|member|orqs_moqd_pi1_rp_size
id|bdrkreg_t
id|orqs_moqd_pi1_rp_size
suffix:colon
l_int|5
suffix:semicolon
DECL|member|orqs_reserved_2
id|bdrkreg_t
id|orqs_reserved_2
suffix:colon
l_int|3
suffix:semicolon
DECL|member|orqs_moqd_pi0_rp_size
id|bdrkreg_t
id|orqs_moqd_pi0_rp_size
suffix:colon
l_int|5
suffix:semicolon
DECL|member|orqs_reserved_3
id|bdrkreg_t
id|orqs_reserved_3
suffix:colon
l_int|4
suffix:semicolon
DECL|member|orqs_moqh_np_rp_size
id|bdrkreg_t
id|orqs_moqh_np_rp_size
suffix:colon
l_int|4
suffix:semicolon
DECL|member|orqs_reserved_4
id|bdrkreg_t
id|orqs_reserved_4
suffix:colon
l_int|4
suffix:semicolon
DECL|member|orqs_moqh_p1_rp_size
id|bdrkreg_t
id|orqs_moqh_p1_rp_size
suffix:colon
l_int|4
suffix:semicolon
DECL|member|orqs_reserved_5
id|bdrkreg_t
id|orqs_reserved_5
suffix:colon
l_int|4
suffix:semicolon
DECL|member|orqs_moqh_p0_rp_size
id|bdrkreg_t
id|orqs_moqh_p0_rp_size
suffix:colon
l_int|4
suffix:semicolon
DECL|member|orqs_reserved_6
id|bdrkreg_t
id|orqs_reserved_6
suffix:colon
l_int|8
suffix:semicolon
DECL|member|md_outgoing_rp_queue_size_fld_s
)brace
id|md_outgoing_rp_queue_size_fld_s
suffix:semicolon
DECL|typedef|md_outgoing_rp_queue_size_u_t
)brace
id|md_outgoing_rp_queue_size_u_t
suffix:semicolon
macro_line|#endif
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_perf_sel0_u
r_typedef
r_union
id|md_perf_sel0_u
(brace
DECL|member|md_perf_sel0_regval
id|bdrkreg_t
id|md_perf_sel0_regval
suffix:semicolon
r_struct
(brace
DECL|member|ps_cnt_mode
id|bdrkreg_t
id|ps_cnt_mode
suffix:colon
l_int|2
suffix:semicolon
DECL|member|ps_reserved_2
id|bdrkreg_t
id|ps_reserved_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|ps_activity
id|bdrkreg_t
id|ps_activity
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ps_source
id|bdrkreg_t
id|ps_source
suffix:colon
l_int|7
suffix:semicolon
DECL|member|ps_reserved_1
id|bdrkreg_t
id|ps_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ps_channel
id|bdrkreg_t
id|ps_channel
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ps_command
id|bdrkreg_t
id|ps_command
suffix:colon
l_int|40
suffix:semicolon
DECL|member|ps_reserved
id|bdrkreg_t
id|ps_reserved
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ps_interrupt
id|bdrkreg_t
id|ps_interrupt
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_perf_sel0_fld_s
)brace
id|md_perf_sel0_fld_s
suffix:semicolon
DECL|typedef|md_perf_sel0_u_t
)brace
id|md_perf_sel0_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_perf_sel0_u
r_typedef
r_union
id|md_perf_sel0_u
(brace
DECL|member|md_perf_sel0_regval
id|bdrkreg_t
id|md_perf_sel0_regval
suffix:semicolon
r_struct
(brace
DECL|member|ps_interrupt
id|bdrkreg_t
id|ps_interrupt
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ps_reserved
id|bdrkreg_t
id|ps_reserved
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ps_command
id|bdrkreg_t
id|ps_command
suffix:colon
l_int|40
suffix:semicolon
DECL|member|ps_channel
id|bdrkreg_t
id|ps_channel
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ps_reserved_1
id|bdrkreg_t
id|ps_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ps_source
id|bdrkreg_t
id|ps_source
suffix:colon
l_int|7
suffix:semicolon
DECL|member|ps_activity
id|bdrkreg_t
id|ps_activity
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ps_reserved_2
id|bdrkreg_t
id|ps_reserved_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|ps_cnt_mode
id|bdrkreg_t
id|ps_cnt_mode
suffix:colon
l_int|2
suffix:semicolon
DECL|member|md_perf_sel0_fld_s
)brace
id|md_perf_sel0_fld_s
suffix:semicolon
DECL|typedef|md_perf_sel0_u_t
)brace
id|md_perf_sel0_u_t
suffix:semicolon
macro_line|#endif
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_perf_sel1_u
r_typedef
r_union
id|md_perf_sel1_u
(brace
DECL|member|md_perf_sel1_regval
id|bdrkreg_t
id|md_perf_sel1_regval
suffix:semicolon
r_struct
(brace
DECL|member|ps_cnt_mode
id|bdrkreg_t
id|ps_cnt_mode
suffix:colon
l_int|2
suffix:semicolon
DECL|member|ps_reserved_2
id|bdrkreg_t
id|ps_reserved_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|ps_activity
id|bdrkreg_t
id|ps_activity
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ps_source
id|bdrkreg_t
id|ps_source
suffix:colon
l_int|7
suffix:semicolon
DECL|member|ps_reserved_1
id|bdrkreg_t
id|ps_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ps_channel
id|bdrkreg_t
id|ps_channel
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ps_command
id|bdrkreg_t
id|ps_command
suffix:colon
l_int|40
suffix:semicolon
DECL|member|ps_reserved
id|bdrkreg_t
id|ps_reserved
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ps_interrupt
id|bdrkreg_t
id|ps_interrupt
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_perf_sel1_fld_s
)brace
id|md_perf_sel1_fld_s
suffix:semicolon
DECL|typedef|md_perf_sel1_u_t
)brace
id|md_perf_sel1_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_perf_sel1_u
r_typedef
r_union
id|md_perf_sel1_u
(brace
DECL|member|md_perf_sel1_regval
id|bdrkreg_t
id|md_perf_sel1_regval
suffix:semicolon
r_struct
(brace
DECL|member|ps_interrupt
id|bdrkreg_t
id|ps_interrupt
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ps_reserved
id|bdrkreg_t
id|ps_reserved
suffix:colon
l_int|3
suffix:semicolon
DECL|member|ps_command
id|bdrkreg_t
id|ps_command
suffix:colon
l_int|40
suffix:semicolon
DECL|member|ps_channel
id|bdrkreg_t
id|ps_channel
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ps_reserved_1
id|bdrkreg_t
id|ps_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|ps_source
id|bdrkreg_t
id|ps_source
suffix:colon
l_int|7
suffix:semicolon
DECL|member|ps_activity
id|bdrkreg_t
id|ps_activity
suffix:colon
l_int|4
suffix:semicolon
DECL|member|ps_reserved_2
id|bdrkreg_t
id|ps_reserved_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|ps_cnt_mode
id|bdrkreg_t
id|ps_cnt_mode
suffix:colon
l_int|2
suffix:semicolon
DECL|member|md_perf_sel1_fld_s
)brace
id|md_perf_sel1_fld_s
suffix:semicolon
DECL|typedef|md_perf_sel1_u_t
)brace
id|md_perf_sel1_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Performance counter.                                                *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_perf_cnt0_u
r_typedef
r_union
id|md_perf_cnt0_u
(brace
DECL|member|md_perf_cnt0_regval
id|bdrkreg_t
id|md_perf_cnt0_regval
suffix:semicolon
r_struct
(brace
DECL|member|pc_perf_cnt
id|bdrkreg_t
id|pc_perf_cnt
suffix:colon
l_int|41
suffix:semicolon
DECL|member|pc_reserved
id|bdrkreg_t
id|pc_reserved
suffix:colon
l_int|23
suffix:semicolon
DECL|member|md_perf_cnt0_fld_s
)brace
id|md_perf_cnt0_fld_s
suffix:semicolon
DECL|typedef|md_perf_cnt0_u_t
)brace
id|md_perf_cnt0_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_perf_cnt0_u
r_typedef
r_union
id|md_perf_cnt0_u
(brace
DECL|member|md_perf_cnt0_regval
id|bdrkreg_t
id|md_perf_cnt0_regval
suffix:semicolon
r_struct
(brace
DECL|member|pc_reserved
id|bdrkreg_t
id|pc_reserved
suffix:colon
l_int|23
suffix:semicolon
DECL|member|pc_perf_cnt
id|bdrkreg_t
id|pc_perf_cnt
suffix:colon
l_int|41
suffix:semicolon
DECL|member|md_perf_cnt0_fld_s
)brace
id|md_perf_cnt0_fld_s
suffix:semicolon
DECL|typedef|md_perf_cnt0_u_t
)brace
id|md_perf_cnt0_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Performance counter.                                                *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_perf_cnt1_u
r_typedef
r_union
id|md_perf_cnt1_u
(brace
DECL|member|md_perf_cnt1_regval
id|bdrkreg_t
id|md_perf_cnt1_regval
suffix:semicolon
r_struct
(brace
DECL|member|pc_perf_cnt
id|bdrkreg_t
id|pc_perf_cnt
suffix:colon
l_int|41
suffix:semicolon
DECL|member|pc_reserved
id|bdrkreg_t
id|pc_reserved
suffix:colon
l_int|23
suffix:semicolon
DECL|member|md_perf_cnt1_fld_s
)brace
id|md_perf_cnt1_fld_s
suffix:semicolon
DECL|typedef|md_perf_cnt1_u_t
)brace
id|md_perf_cnt1_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_perf_cnt1_u
r_typedef
r_union
id|md_perf_cnt1_u
(brace
DECL|member|md_perf_cnt1_regval
id|bdrkreg_t
id|md_perf_cnt1_regval
suffix:semicolon
r_struct
(brace
DECL|member|pc_reserved
id|bdrkreg_t
id|pc_reserved
suffix:colon
l_int|23
suffix:semicolon
DECL|member|pc_perf_cnt
id|bdrkreg_t
id|pc_perf_cnt
suffix:colon
l_int|41
suffix:semicolon
DECL|member|md_perf_cnt1_fld_s
)brace
id|md_perf_cnt1_fld_s
suffix:semicolon
DECL|typedef|md_perf_cnt1_u_t
)brace
id|md_perf_cnt1_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  This register contains the control for                 *&n; * memory/directory refresh. Once the MEMORY_CONFIG register contains   *&n; * the correct DIMM information, the hardware takes care of             *&n; * refreshing all the banks in the system. Therefore, the value in      *&n; * the counter threshold is corresponds exactly to the refresh value    *&n; * required by the SDRAM parts (expressed in Bedrock clock cycles).     *&n; * The refresh will execute whenever there is a free cycle and there    *&n; * are still banks that have not been refreshed in the current          *&n; * window. If the window expires with banks still waiting to be         *&n; * refreshed, all other transactions are halted until the banks are     *&n; * refreshed.                                                           *&n; * The upper order bit contains an enable, which may be needed for      *&n; * correct initialization of the DIMMs (according to the specs, the     *&n; * first operation to the DIMMs should be a mode register write, not    *&n; * a refresh, so this bit is cleared on reset) and is also useful for   *&n; * diagnostic purposes.                                                 *&n; * For the SDRAM parts used by Bedrock, 4096 refreshes need to be       *&n; * issued during every 64 ms window, resulting in a refresh threshold   *&n; * of 3125 Bedrock cycles.                                              *&n; * The ENABLE and CNT_THRESH fields of this register are preserved      *&n; * through soft-resets.                                                 *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_refresh_control_u
r_typedef
r_union
id|md_refresh_control_u
(brace
DECL|member|md_refresh_control_regval
id|bdrkreg_t
id|md_refresh_control_regval
suffix:semicolon
r_struct
(brace
DECL|member|rc_cnt_thresh
id|bdrkreg_t
id|rc_cnt_thresh
suffix:colon
l_int|12
suffix:semicolon
DECL|member|rc_counter
id|bdrkreg_t
id|rc_counter
suffix:colon
l_int|12
suffix:semicolon
DECL|member|rc_reserved
id|bdrkreg_t
id|rc_reserved
suffix:colon
l_int|39
suffix:semicolon
DECL|member|rc_enable
id|bdrkreg_t
id|rc_enable
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_refresh_control_fld_s
)brace
id|md_refresh_control_fld_s
suffix:semicolon
DECL|typedef|md_refresh_control_u_t
)brace
id|md_refresh_control_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_refresh_control_u
r_typedef
r_union
id|md_refresh_control_u
(brace
DECL|member|md_refresh_control_regval
id|bdrkreg_t
id|md_refresh_control_regval
suffix:semicolon
r_struct
(brace
DECL|member|rc_enable
id|bdrkreg_t
id|rc_enable
suffix:colon
l_int|1
suffix:semicolon
DECL|member|rc_reserved
id|bdrkreg_t
id|rc_reserved
suffix:colon
l_int|39
suffix:semicolon
DECL|member|rc_counter
id|bdrkreg_t
id|rc_counter
suffix:colon
l_int|12
suffix:semicolon
DECL|member|rc_cnt_thresh
id|bdrkreg_t
id|rc_cnt_thresh
suffix:colon
l_int|12
suffix:semicolon
DECL|member|md_refresh_control_fld_s
)brace
id|md_refresh_control_fld_s
suffix:semicolon
DECL|typedef|md_refresh_control_u_t
)brace
id|md_refresh_control_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  This register controls the read and write timing for Flash PROM,    *&n; * UART and Synergy junk bus devices.                                   *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_junk_bus_timing_u
r_typedef
r_union
id|md_junk_bus_timing_u
(brace
DECL|member|md_junk_bus_timing_regval
id|bdrkreg_t
id|md_junk_bus_timing_regval
suffix:semicolon
r_struct
(brace
DECL|member|jbt_fprom_setup_hold
id|bdrkreg_t
id|jbt_fprom_setup_hold
suffix:colon
l_int|8
suffix:semicolon
DECL|member|jbt_fprom_enable
id|bdrkreg_t
id|jbt_fprom_enable
suffix:colon
l_int|8
suffix:semicolon
DECL|member|jbt_uart_setup_hold
id|bdrkreg_t
id|jbt_uart_setup_hold
suffix:colon
l_int|8
suffix:semicolon
DECL|member|jbt_uart_enable
id|bdrkreg_t
id|jbt_uart_enable
suffix:colon
l_int|8
suffix:semicolon
DECL|member|jbt_synergy_setup_hold
id|bdrkreg_t
id|jbt_synergy_setup_hold
suffix:colon
l_int|8
suffix:semicolon
DECL|member|jbt_synergy_enable
id|bdrkreg_t
id|jbt_synergy_enable
suffix:colon
l_int|8
suffix:semicolon
DECL|member|jbt_reserved
id|bdrkreg_t
id|jbt_reserved
suffix:colon
l_int|16
suffix:semicolon
DECL|member|md_junk_bus_timing_fld_s
)brace
id|md_junk_bus_timing_fld_s
suffix:semicolon
DECL|typedef|md_junk_bus_timing_u_t
)brace
id|md_junk_bus_timing_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_junk_bus_timing_u
r_typedef
r_union
id|md_junk_bus_timing_u
(brace
DECL|member|md_junk_bus_timing_regval
id|bdrkreg_t
id|md_junk_bus_timing_regval
suffix:semicolon
r_struct
(brace
DECL|member|jbt_reserved
id|bdrkreg_t
id|jbt_reserved
suffix:colon
l_int|16
suffix:semicolon
DECL|member|jbt_synergy_enable
id|bdrkreg_t
id|jbt_synergy_enable
suffix:colon
l_int|8
suffix:semicolon
DECL|member|jbt_synergy_setup_hold
id|bdrkreg_t
id|jbt_synergy_setup_hold
suffix:colon
l_int|8
suffix:semicolon
DECL|member|jbt_uart_enable
id|bdrkreg_t
id|jbt_uart_enable
suffix:colon
l_int|8
suffix:semicolon
DECL|member|jbt_uart_setup_hold
id|bdrkreg_t
id|jbt_uart_setup_hold
suffix:colon
l_int|8
suffix:semicolon
DECL|member|jbt_fprom_enable
id|bdrkreg_t
id|jbt_fprom_enable
suffix:colon
l_int|8
suffix:semicolon
DECL|member|jbt_fprom_setup_hold
id|bdrkreg_t
id|jbt_fprom_setup_hold
suffix:colon
l_int|8
suffix:semicolon
DECL|member|md_junk_bus_timing_fld_s
)brace
id|md_junk_bus_timing_fld_s
suffix:semicolon
DECL|typedef|md_junk_bus_timing_u_t
)brace
id|md_junk_bus_timing_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Each of these addresses allows the value on one 8-bit bank of       *&n; * LEDs to be read.                                                     *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_led0_u
r_typedef
r_union
id|md_led0_u
(brace
DECL|member|md_led0_regval
id|bdrkreg_t
id|md_led0_regval
suffix:semicolon
r_struct
(brace
DECL|member|l_data
id|bdrkreg_t
id|l_data
suffix:colon
l_int|8
suffix:semicolon
DECL|member|l_reserved
id|bdrkreg_t
id|l_reserved
suffix:colon
l_int|56
suffix:semicolon
DECL|member|md_led0_fld_s
)brace
id|md_led0_fld_s
suffix:semicolon
DECL|typedef|md_led0_u_t
)brace
id|md_led0_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_led0_u
r_typedef
r_union
id|md_led0_u
(brace
DECL|member|md_led0_regval
id|bdrkreg_t
id|md_led0_regval
suffix:semicolon
r_struct
(brace
DECL|member|l_reserved
id|bdrkreg_t
id|l_reserved
suffix:colon
l_int|56
suffix:semicolon
DECL|member|l_data
id|bdrkreg_t
id|l_data
suffix:colon
l_int|8
suffix:semicolon
DECL|member|md_led0_fld_s
)brace
id|md_led0_fld_s
suffix:semicolon
DECL|typedef|md_led0_u_t
)brace
id|md_led0_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Each of these addresses allows the value on one 8-bit bank of       *&n; * LEDs to be read.                                                     *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_led1_u
r_typedef
r_union
id|md_led1_u
(brace
DECL|member|md_led1_regval
id|bdrkreg_t
id|md_led1_regval
suffix:semicolon
r_struct
(brace
DECL|member|l_data
id|bdrkreg_t
id|l_data
suffix:colon
l_int|8
suffix:semicolon
DECL|member|l_reserved
id|bdrkreg_t
id|l_reserved
suffix:colon
l_int|56
suffix:semicolon
DECL|member|md_led1_fld_s
)brace
id|md_led1_fld_s
suffix:semicolon
DECL|typedef|md_led1_u_t
)brace
id|md_led1_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_led1_u
r_typedef
r_union
id|md_led1_u
(brace
DECL|member|md_led1_regval
id|bdrkreg_t
id|md_led1_regval
suffix:semicolon
r_struct
(brace
DECL|member|l_reserved
id|bdrkreg_t
id|l_reserved
suffix:colon
l_int|56
suffix:semicolon
DECL|member|l_data
id|bdrkreg_t
id|l_data
suffix:colon
l_int|8
suffix:semicolon
DECL|member|md_led1_fld_s
)brace
id|md_led1_fld_s
suffix:semicolon
DECL|typedef|md_led1_u_t
)brace
id|md_led1_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Each of these addresses allows the value on one 8-bit bank of       *&n; * LEDs to be read.                                                     *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_led2_u
r_typedef
r_union
id|md_led2_u
(brace
DECL|member|md_led2_regval
id|bdrkreg_t
id|md_led2_regval
suffix:semicolon
r_struct
(brace
DECL|member|l_data
id|bdrkreg_t
id|l_data
suffix:colon
l_int|8
suffix:semicolon
DECL|member|l_reserved
id|bdrkreg_t
id|l_reserved
suffix:colon
l_int|56
suffix:semicolon
DECL|member|md_led2_fld_s
)brace
id|md_led2_fld_s
suffix:semicolon
DECL|typedef|md_led2_u_t
)brace
id|md_led2_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_led2_u
r_typedef
r_union
id|md_led2_u
(brace
DECL|member|md_led2_regval
id|bdrkreg_t
id|md_led2_regval
suffix:semicolon
r_struct
(brace
DECL|member|l_reserved
id|bdrkreg_t
id|l_reserved
suffix:colon
l_int|56
suffix:semicolon
DECL|member|l_data
id|bdrkreg_t
id|l_data
suffix:colon
l_int|8
suffix:semicolon
DECL|member|md_led2_fld_s
)brace
id|md_led2_fld_s
suffix:semicolon
DECL|typedef|md_led2_u_t
)brace
id|md_led2_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Each of these addresses allows the value on one 8-bit bank of       *&n; * LEDs to be read.                                                     *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_led3_u
r_typedef
r_union
id|md_led3_u
(brace
DECL|member|md_led3_regval
id|bdrkreg_t
id|md_led3_regval
suffix:semicolon
r_struct
(brace
DECL|member|l_data
id|bdrkreg_t
id|l_data
suffix:colon
l_int|8
suffix:semicolon
DECL|member|l_reserved
id|bdrkreg_t
id|l_reserved
suffix:colon
l_int|56
suffix:semicolon
DECL|member|md_led3_fld_s
)brace
id|md_led3_fld_s
suffix:semicolon
DECL|typedef|md_led3_u_t
)brace
id|md_led3_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_led3_u
r_typedef
r_union
id|md_led3_u
(brace
DECL|member|md_led3_regval
id|bdrkreg_t
id|md_led3_regval
suffix:semicolon
r_struct
(brace
DECL|member|l_reserved
id|bdrkreg_t
id|l_reserved
suffix:colon
l_int|56
suffix:semicolon
DECL|member|l_data
id|bdrkreg_t
id|l_data
suffix:colon
l_int|8
suffix:semicolon
DECL|member|md_led3_fld_s
)brace
id|md_led3_fld_s
suffix:semicolon
DECL|typedef|md_led3_u_t
)brace
id|md_led3_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Core control for the BIST function. Start and stop BIST at any      *&n; * time.                                                                *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_bist_ctl_u
r_typedef
r_union
id|md_bist_ctl_u
(brace
DECL|member|md_bist_ctl_regval
id|bdrkreg_t
id|md_bist_ctl_regval
suffix:semicolon
r_struct
(brace
DECL|member|bc_bist_start
id|bdrkreg_t
id|bc_bist_start
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bc_bist_stop
id|bdrkreg_t
id|bc_bist_stop
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bc_bist_reset
id|bdrkreg_t
id|bc_bist_reset
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bc_reserved_1
id|bdrkreg_t
id|bc_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bc_bank_num
id|bdrkreg_t
id|bc_bank_num
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bc_dimm_num
id|bdrkreg_t
id|bc_dimm_num
suffix:colon
l_int|2
suffix:semicolon
DECL|member|bc_reserved
id|bdrkreg_t
id|bc_reserved
suffix:colon
l_int|57
suffix:semicolon
DECL|member|md_bist_ctl_fld_s
)brace
id|md_bist_ctl_fld_s
suffix:semicolon
DECL|typedef|md_bist_ctl_u_t
)brace
id|md_bist_ctl_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_bist_ctl_u
r_typedef
r_union
id|md_bist_ctl_u
(brace
DECL|member|md_bist_ctl_regval
id|bdrkreg_t
id|md_bist_ctl_regval
suffix:semicolon
r_struct
(brace
DECL|member|bc_reserved
id|bdrkreg_t
id|bc_reserved
suffix:colon
l_int|57
suffix:semicolon
DECL|member|bc_dimm_num
id|bdrkreg_t
id|bc_dimm_num
suffix:colon
l_int|2
suffix:semicolon
DECL|member|bc_bank_num
id|bdrkreg_t
id|bc_bank_num
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bc_reserved_1
id|bdrkreg_t
id|bc_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bc_bist_reset
id|bdrkreg_t
id|bc_bist_reset
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bc_bist_stop
id|bdrkreg_t
id|bc_bist_stop
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bc_bist_start
id|bdrkreg_t
id|bc_bist_start
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_bist_ctl_fld_s
)brace
id|md_bist_ctl_fld_s
suffix:semicolon
DECL|typedef|md_bist_ctl_u_t
)brace
id|md_bist_ctl_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contain the initial BIST data nibble and the 4-bit data control     *&n; * field..                                                              *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_bist_data_u
r_typedef
r_union
id|md_bist_data_u
(brace
DECL|member|md_bist_data_regval
id|bdrkreg_t
id|md_bist_data_regval
suffix:semicolon
r_struct
(brace
DECL|member|bd_bist_data
id|bdrkreg_t
id|bd_bist_data
suffix:colon
l_int|4
suffix:semicolon
DECL|member|bd_bist_nibble
id|bdrkreg_t
id|bd_bist_nibble
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bd_bist_byte
id|bdrkreg_t
id|bd_bist_byte
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bd_bist_cycle
id|bdrkreg_t
id|bd_bist_cycle
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bd_bist_write
id|bdrkreg_t
id|bd_bist_write
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bd_reserved
id|bdrkreg_t
id|bd_reserved
suffix:colon
l_int|56
suffix:semicolon
DECL|member|md_bist_data_fld_s
)brace
id|md_bist_data_fld_s
suffix:semicolon
DECL|typedef|md_bist_data_u_t
)brace
id|md_bist_data_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_bist_data_u
r_typedef
r_union
id|md_bist_data_u
(brace
DECL|member|md_bist_data_regval
id|bdrkreg_t
id|md_bist_data_regval
suffix:semicolon
r_struct
(brace
DECL|member|bd_reserved
id|bdrkreg_t
id|bd_reserved
suffix:colon
l_int|56
suffix:semicolon
DECL|member|bd_bist_write
id|bdrkreg_t
id|bd_bist_write
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bd_bist_cycle
id|bdrkreg_t
id|bd_bist_cycle
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bd_bist_byte
id|bdrkreg_t
id|bd_bist_byte
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bd_bist_nibble
id|bdrkreg_t
id|bd_bist_nibble
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bd_bist_data
id|bdrkreg_t
id|bd_bist_data
suffix:colon
l_int|4
suffix:semicolon
DECL|member|md_bist_data_fld_s
)brace
id|md_bist_data_fld_s
suffix:semicolon
DECL|typedef|md_bist_data_u_t
)brace
id|md_bist_data_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Captures the BIST error address and indicates whether it is an MB   *&n; * error or DB error.                                                   *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_bist_ab_err_addr_u
r_typedef
r_union
id|md_bist_ab_err_addr_u
(brace
DECL|member|md_bist_ab_err_addr_regval
id|bdrkreg_t
id|md_bist_ab_err_addr_regval
suffix:semicolon
r_struct
(brace
DECL|member|baea_be_db_cas_addr
id|bdrkreg_t
id|baea_be_db_cas_addr
suffix:colon
l_int|15
suffix:semicolon
DECL|member|baea_reserved_3
id|bdrkreg_t
id|baea_reserved_3
suffix:colon
l_int|1
suffix:semicolon
DECL|member|baea_be_mb_cas_addr
id|bdrkreg_t
id|baea_be_mb_cas_addr
suffix:colon
l_int|15
suffix:semicolon
DECL|member|baea_reserved_2
id|bdrkreg_t
id|baea_reserved_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|baea_be_ras_addr
id|bdrkreg_t
id|baea_be_ras_addr
suffix:colon
l_int|15
suffix:semicolon
DECL|member|baea_reserved_1
id|bdrkreg_t
id|baea_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|baea_bist_mb_error
id|bdrkreg_t
id|baea_bist_mb_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|baea_bist_db_error
id|bdrkreg_t
id|baea_bist_db_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|baea_reserved
id|bdrkreg_t
id|baea_reserved
suffix:colon
l_int|14
suffix:semicolon
DECL|member|md_bist_ab_err_addr_fld_s
)brace
id|md_bist_ab_err_addr_fld_s
suffix:semicolon
DECL|typedef|md_bist_ab_err_addr_u_t
)brace
id|md_bist_ab_err_addr_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_bist_ab_err_addr_u
r_typedef
r_union
id|md_bist_ab_err_addr_u
(brace
DECL|member|md_bist_ab_err_addr_regval
id|bdrkreg_t
id|md_bist_ab_err_addr_regval
suffix:semicolon
r_struct
(brace
DECL|member|baea_reserved
id|bdrkreg_t
id|baea_reserved
suffix:colon
l_int|14
suffix:semicolon
DECL|member|baea_bist_db_error
id|bdrkreg_t
id|baea_bist_db_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|baea_bist_mb_error
id|bdrkreg_t
id|baea_bist_mb_error
suffix:colon
l_int|1
suffix:semicolon
DECL|member|baea_reserved_1
id|bdrkreg_t
id|baea_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|baea_be_ras_addr
id|bdrkreg_t
id|baea_be_ras_addr
suffix:colon
l_int|15
suffix:semicolon
DECL|member|baea_reserved_2
id|bdrkreg_t
id|baea_reserved_2
suffix:colon
l_int|1
suffix:semicolon
DECL|member|baea_be_mb_cas_addr
id|bdrkreg_t
id|baea_be_mb_cas_addr
suffix:colon
l_int|15
suffix:semicolon
DECL|member|baea_reserved_3
id|bdrkreg_t
id|baea_reserved_3
suffix:colon
l_int|1
suffix:semicolon
DECL|member|baea_be_db_cas_addr
id|bdrkreg_t
id|baea_be_db_cas_addr
suffix:colon
l_int|15
suffix:semicolon
DECL|member|md_bist_ab_err_addr_fld_s
)brace
id|md_bist_ab_err_addr_fld_s
suffix:semicolon
DECL|typedef|md_bist_ab_err_addr_u_t
)brace
id|md_bist_ab_err_addr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains information on BIST progress and memory bank currently     *&n; * under BIST.                                                          *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_bist_status_u
r_typedef
r_union
id|md_bist_status_u
(brace
DECL|member|md_bist_status_regval
id|bdrkreg_t
id|md_bist_status_regval
suffix:semicolon
r_struct
(brace
DECL|member|bs_bist_passed
id|bdrkreg_t
id|bs_bist_passed
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bs_bist_done
id|bdrkreg_t
id|bs_bist_done
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bs_reserved
id|bdrkreg_t
id|bs_reserved
suffix:colon
l_int|62
suffix:semicolon
DECL|member|md_bist_status_fld_s
)brace
id|md_bist_status_fld_s
suffix:semicolon
DECL|typedef|md_bist_status_u_t
)brace
id|md_bist_status_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_bist_status_u
r_typedef
r_union
id|md_bist_status_u
(brace
DECL|member|md_bist_status_regval
id|bdrkreg_t
id|md_bist_status_regval
suffix:semicolon
r_struct
(brace
DECL|member|bs_reserved
id|bdrkreg_t
id|bs_reserved
suffix:colon
l_int|62
suffix:semicolon
DECL|member|bs_bist_done
id|bdrkreg_t
id|bs_bist_done
suffix:colon
l_int|1
suffix:semicolon
DECL|member|bs_bist_passed
id|bdrkreg_t
id|bs_bist_passed
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_bist_status_fld_s
)brace
id|md_bist_status_fld_s
suffix:semicolon
DECL|typedef|md_bist_status_u_t
)brace
id|md_bist_status_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains 3 bits that allow the selection of IB debug information    *&n; * at the debug port (see design specification for available debug      *&n; * information).                                                        *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_ib_debug_u
r_typedef
r_union
id|md_ib_debug_u
(brace
DECL|member|md_ib_debug_regval
id|bdrkreg_t
id|md_ib_debug_regval
suffix:semicolon
r_struct
(brace
DECL|member|id_ib_debug_sel
id|bdrkreg_t
id|id_ib_debug_sel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|id_reserved
id|bdrkreg_t
id|id_reserved
suffix:colon
l_int|62
suffix:semicolon
DECL|member|md_ib_debug_fld_s
)brace
id|md_ib_debug_fld_s
suffix:semicolon
DECL|typedef|md_ib_debug_u_t
)brace
id|md_ib_debug_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_ib_debug_u
r_typedef
r_union
id|md_ib_debug_u
(brace
DECL|member|md_ib_debug_regval
id|bdrkreg_t
id|md_ib_debug_regval
suffix:semicolon
r_struct
(brace
DECL|member|id_reserved
id|bdrkreg_t
id|id_reserved
suffix:colon
l_int|62
suffix:semicolon
DECL|member|id_ib_debug_sel
id|bdrkreg_t
id|id_ib_debug_sel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|md_ib_debug_fld_s
)brace
id|md_ib_debug_fld_s
suffix:semicolon
DECL|typedef|md_ib_debug_u_t
)brace
id|md_ib_debug_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains the directory specific mode bits. The contents of this     *&n; * register are preserved through soft-resets.                          *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_dir_config_u
r_typedef
r_union
id|md_dir_config_u
(brace
DECL|member|md_dir_config_regval
id|bdrkreg_t
id|md_dir_config_regval
suffix:semicolon
r_struct
(brace
DECL|member|dc_dir_flavor
id|bdrkreg_t
id|dc_dir_flavor
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dc_ignore_dir_ecc
id|bdrkreg_t
id|dc_ignore_dir_ecc
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dc_reserved
id|bdrkreg_t
id|dc_reserved
suffix:colon
l_int|62
suffix:semicolon
DECL|member|md_dir_config_fld_s
)brace
id|md_dir_config_fld_s
suffix:semicolon
DECL|typedef|md_dir_config_u_t
)brace
id|md_dir_config_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_dir_config_u
r_typedef
r_union
id|md_dir_config_u
(brace
DECL|member|md_dir_config_regval
id|bdrkreg_t
id|md_dir_config_regval
suffix:semicolon
r_struct
(brace
DECL|member|dc_reserved
id|bdrkreg_t
id|dc_reserved
suffix:colon
l_int|62
suffix:semicolon
DECL|member|dc_ignore_dir_ecc
id|bdrkreg_t
id|dc_ignore_dir_ecc
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dc_dir_flavor
id|bdrkreg_t
id|dc_dir_flavor
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_dir_config_fld_s
)brace
id|md_dir_config_fld_s
suffix:semicolon
DECL|typedef|md_dir_config_u_t
)brace
id|md_dir_config_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  Contains information on uncorrectable and              *&n; * correctable directory ECC errors, along with protection ECC          *&n; * errors. The priority of ECC errors latched is: uncorrectable         *&n; * directory, protection error, correctable directory. Thus the valid   *&n; * bits signal:                                                         *&n; * 1xxx: uncorrectable directory ECC error (UCE)                        *&n; * 01xx: access protection double bit error (AE)                        *&n; * 001x: correctable directory ECC error (CE)                           *&n; * 0001: access protection correctable error (ACE)                      *&n; * If the UCE valid bit is set, the address field contains a pointer    *&n; * to the Hspec address of the offending directory entry, the           *&n; * syndrome field contains the bad syndrome, and the UCE overrun bit    *&n; * indicates whether multiple double-bit errors were received.          *&n; * If the UCE valid bit is clear but the AE valid bit is set, the       *&n; * address field contains a pointer to the Hspec address of the         *&n; * offending protection entry, the Bad Protection field contains the    *&n; * 4-bit bad protection value, the PROT_INDEX field shows which of      *&n; * the 8 protection values in the word was bad and the AE overrun bit   *&n; * indicates whether multiple AE errors were received.                  *&n; * If the UCE and AE valid bits are clear, but the CE valid bit is      *&n; * set, the address field contains a pointer to the Hspec address of    *&n; * the offending directory entry, the syndrome field contains the bad   *&n; * syndrome, and the CE overrun bit indicates whether multiple          *&n; * single-bit errors were received.                                     *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_dir_error_u
r_typedef
r_union
id|md_dir_error_u
(brace
DECL|member|md_dir_error_regval
id|bdrkreg_t
id|md_dir_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|de_reserved_3
id|bdrkreg_t
id|de_reserved_3
suffix:colon
l_int|3
suffix:semicolon
DECL|member|de_hspec_addr
id|bdrkreg_t
id|de_hspec_addr
suffix:colon
l_int|30
suffix:semicolon
DECL|member|de_reserved_2
id|bdrkreg_t
id|de_reserved_2
suffix:colon
l_int|7
suffix:semicolon
DECL|member|de_bad_syn
id|bdrkreg_t
id|de_bad_syn
suffix:colon
l_int|7
suffix:semicolon
DECL|member|de_reserved_1
id|bdrkreg_t
id|de_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_bad_protect
id|bdrkreg_t
id|de_bad_protect
suffix:colon
l_int|4
suffix:semicolon
DECL|member|de_prot_index
id|bdrkreg_t
id|de_prot_index
suffix:colon
l_int|3
suffix:semicolon
DECL|member|de_reserved
id|bdrkreg_t
id|de_reserved
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_ace_overrun
id|bdrkreg_t
id|de_ace_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_ce_overrun
id|bdrkreg_t
id|de_ce_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_ae_overrun
id|bdrkreg_t
id|de_ae_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_uce_overrun
id|bdrkreg_t
id|de_uce_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_ace_valid
id|bdrkreg_t
id|de_ace_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_ce_valid
id|bdrkreg_t
id|de_ce_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_ae_valid
id|bdrkreg_t
id|de_ae_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_uce_valid
id|bdrkreg_t
id|de_uce_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_dir_error_fld_s
)brace
id|md_dir_error_fld_s
suffix:semicolon
DECL|typedef|md_dir_error_u_t
)brace
id|md_dir_error_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_dir_error_u
r_typedef
r_union
id|md_dir_error_u
(brace
DECL|member|md_dir_error_regval
id|bdrkreg_t
id|md_dir_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|de_uce_valid
id|bdrkreg_t
id|de_uce_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_ae_valid
id|bdrkreg_t
id|de_ae_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_ce_valid
id|bdrkreg_t
id|de_ce_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_ace_valid
id|bdrkreg_t
id|de_ace_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_uce_overrun
id|bdrkreg_t
id|de_uce_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_ae_overrun
id|bdrkreg_t
id|de_ae_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_ce_overrun
id|bdrkreg_t
id|de_ce_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_ace_overrun
id|bdrkreg_t
id|de_ace_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_reserved
id|bdrkreg_t
id|de_reserved
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_prot_index
id|bdrkreg_t
id|de_prot_index
suffix:colon
l_int|3
suffix:semicolon
DECL|member|de_bad_protect
id|bdrkreg_t
id|de_bad_protect
suffix:colon
l_int|4
suffix:semicolon
DECL|member|de_reserved_1
id|bdrkreg_t
id|de_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|de_bad_syn
id|bdrkreg_t
id|de_bad_syn
suffix:colon
l_int|7
suffix:semicolon
DECL|member|de_reserved_2
id|bdrkreg_t
id|de_reserved_2
suffix:colon
l_int|7
suffix:semicolon
DECL|member|de_hspec_addr
id|bdrkreg_t
id|de_hspec_addr
suffix:colon
l_int|30
suffix:semicolon
DECL|member|de_reserved_3
id|bdrkreg_t
id|de_reserved_3
suffix:colon
l_int|3
suffix:semicolon
DECL|member|md_dir_error_fld_s
)brace
id|md_dir_error_fld_s
suffix:semicolon
DECL|typedef|md_dir_error_u_t
)brace
id|md_dir_error_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  Contains information on uncorrectable and              *&n; * correctable directory ECC errors, along with protection ECC          *&n; * errors. The priority of ECC errors latched is: uncorrectable         *&n; * directory, protection error, correctable directory. Thus the valid   *&n; * bits signal:                                                         *&n; * 1xxx: uncorrectable directory ECC error (UCE)                        *&n; * 01xx: access protection double bit error (AE)                        *&n; * 001x: correctable directory ECC error (CE)                           *&n; * 0001: access protection correctable error (ACE)                      *&n; * If the UCE valid bit is set, the address field contains a pointer    *&n; * to the Hspec address of the offending directory entry, the           *&n; * syndrome field contains the bad syndrome, and the UCE overrun bit    *&n; * indicates whether multiple double-bit errors were received.          *&n; * If the UCE valid bit is clear but the AE valid bit is set, the       *&n; * address field contains a pointer to the Hspec address of the         *&n; * offending protection entry, the Bad Protection field contains the    *&n; * 4-bit bad protection value, the PROT_INDEX field shows which of      *&n; * the 8 protection values in the word was bad and the AE overrun bit   *&n; * indicates whether multiple AE errors were received.                  *&n; * If the UCE and AE valid bits are clear, but the CE valid bit is      *&n; * set, the address field contains a pointer to the Hspec address of    *&n; * the offending directory entry, the syndrome field contains the bad   *&n; * syndrome, and the CE overrun bit indicates whether multiple          *&n; * single-bit errors were received.                                     *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_dir_error_clr_u
r_typedef
r_union
id|md_dir_error_clr_u
(brace
DECL|member|md_dir_error_clr_regval
id|bdrkreg_t
id|md_dir_error_clr_regval
suffix:semicolon
r_struct
(brace
DECL|member|dec_reserved_3
id|bdrkreg_t
id|dec_reserved_3
suffix:colon
l_int|3
suffix:semicolon
DECL|member|dec_hspec_addr
id|bdrkreg_t
id|dec_hspec_addr
suffix:colon
l_int|30
suffix:semicolon
DECL|member|dec_reserved_2
id|bdrkreg_t
id|dec_reserved_2
suffix:colon
l_int|7
suffix:semicolon
DECL|member|dec_bad_syn
id|bdrkreg_t
id|dec_bad_syn
suffix:colon
l_int|7
suffix:semicolon
DECL|member|dec_reserved_1
id|bdrkreg_t
id|dec_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_bad_protect
id|bdrkreg_t
id|dec_bad_protect
suffix:colon
l_int|4
suffix:semicolon
DECL|member|dec_prot_index
id|bdrkreg_t
id|dec_prot_index
suffix:colon
l_int|3
suffix:semicolon
DECL|member|dec_reserved
id|bdrkreg_t
id|dec_reserved
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_ace_overrun
id|bdrkreg_t
id|dec_ace_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_ce_overrun
id|bdrkreg_t
id|dec_ce_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_ae_overrun
id|bdrkreg_t
id|dec_ae_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_uce_overrun
id|bdrkreg_t
id|dec_uce_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_ace_valid
id|bdrkreg_t
id|dec_ace_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_ce_valid
id|bdrkreg_t
id|dec_ce_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_ae_valid
id|bdrkreg_t
id|dec_ae_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_uce_valid
id|bdrkreg_t
id|dec_uce_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_dir_error_clr_fld_s
)brace
id|md_dir_error_clr_fld_s
suffix:semicolon
DECL|typedef|md_dir_error_clr_u_t
)brace
id|md_dir_error_clr_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_dir_error_clr_u
r_typedef
r_union
id|md_dir_error_clr_u
(brace
DECL|member|md_dir_error_clr_regval
id|bdrkreg_t
id|md_dir_error_clr_regval
suffix:semicolon
r_struct
(brace
DECL|member|dec_uce_valid
id|bdrkreg_t
id|dec_uce_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_ae_valid
id|bdrkreg_t
id|dec_ae_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_ce_valid
id|bdrkreg_t
id|dec_ce_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_ace_valid
id|bdrkreg_t
id|dec_ace_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_uce_overrun
id|bdrkreg_t
id|dec_uce_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_ae_overrun
id|bdrkreg_t
id|dec_ae_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_ce_overrun
id|bdrkreg_t
id|dec_ce_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_ace_overrun
id|bdrkreg_t
id|dec_ace_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_reserved
id|bdrkreg_t
id|dec_reserved
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_prot_index
id|bdrkreg_t
id|dec_prot_index
suffix:colon
l_int|3
suffix:semicolon
DECL|member|dec_bad_protect
id|bdrkreg_t
id|dec_bad_protect
suffix:colon
l_int|4
suffix:semicolon
DECL|member|dec_reserved_1
id|bdrkreg_t
id|dec_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|dec_bad_syn
id|bdrkreg_t
id|dec_bad_syn
suffix:colon
l_int|7
suffix:semicolon
DECL|member|dec_reserved_2
id|bdrkreg_t
id|dec_reserved_2
suffix:colon
l_int|7
suffix:semicolon
DECL|member|dec_hspec_addr
id|bdrkreg_t
id|dec_hspec_addr
suffix:colon
l_int|30
suffix:semicolon
DECL|member|dec_reserved_3
id|bdrkreg_t
id|dec_reserved_3
suffix:colon
l_int|3
suffix:semicolon
DECL|member|md_dir_error_clr_fld_s
)brace
id|md_dir_error_clr_fld_s
suffix:semicolon
DECL|typedef|md_dir_error_clr_u_t
)brace
id|md_dir_error_clr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains information on requests that encounter no valid protocol   *&n; * table entry.                                                         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_protocol_error_u
r_typedef
r_union
id|md_protocol_error_u
(brace
DECL|member|md_protocol_error_regval
id|bdrkreg_t
id|md_protocol_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|pe_overrun
id|bdrkreg_t
id|pe_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pe_pointer_me
id|bdrkreg_t
id|pe_pointer_me
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pe_reserved_1
id|bdrkreg_t
id|pe_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pe_address
id|bdrkreg_t
id|pe_address
suffix:colon
l_int|30
suffix:semicolon
DECL|member|pe_reserved
id|bdrkreg_t
id|pe_reserved
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pe_ptr1_btmbits
id|bdrkreg_t
id|pe_ptr1_btmbits
suffix:colon
l_int|3
suffix:semicolon
DECL|member|pe_dir_format
id|bdrkreg_t
id|pe_dir_format
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_dir_state
id|bdrkreg_t
id|pe_dir_state
suffix:colon
l_int|3
suffix:semicolon
DECL|member|pe_priority
id|bdrkreg_t
id|pe_priority
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pe_access
id|bdrkreg_t
id|pe_access
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pe_msg_type
id|bdrkreg_t
id|pe_msg_type
suffix:colon
l_int|8
suffix:semicolon
DECL|member|pe_initiator
id|bdrkreg_t
id|pe_initiator
suffix:colon
l_int|11
suffix:semicolon
DECL|member|pe_valid
id|bdrkreg_t
id|pe_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_protocol_error_fld_s
)brace
id|md_protocol_error_fld_s
suffix:semicolon
DECL|typedef|md_protocol_error_u_t
)brace
id|md_protocol_error_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_protocol_error_u
r_typedef
r_union
id|md_protocol_error_u
(brace
DECL|member|md_protocol_error_regval
id|bdrkreg_t
id|md_protocol_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|pe_valid
id|bdrkreg_t
id|pe_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pe_initiator
id|bdrkreg_t
id|pe_initiator
suffix:colon
l_int|11
suffix:semicolon
DECL|member|pe_msg_type
id|bdrkreg_t
id|pe_msg_type
suffix:colon
l_int|8
suffix:semicolon
DECL|member|pe_access
id|bdrkreg_t
id|pe_access
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pe_priority
id|bdrkreg_t
id|pe_priority
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pe_dir_state
id|bdrkreg_t
id|pe_dir_state
suffix:colon
l_int|3
suffix:semicolon
DECL|member|pe_dir_format
id|bdrkreg_t
id|pe_dir_format
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pe_ptr1_btmbits
id|bdrkreg_t
id|pe_ptr1_btmbits
suffix:colon
l_int|3
suffix:semicolon
DECL|member|pe_reserved
id|bdrkreg_t
id|pe_reserved
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pe_address
id|bdrkreg_t
id|pe_address
suffix:colon
l_int|30
suffix:semicolon
DECL|member|pe_reserved_1
id|bdrkreg_t
id|pe_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pe_pointer_me
id|bdrkreg_t
id|pe_pointer_me
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pe_overrun
id|bdrkreg_t
id|pe_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_protocol_error_fld_s
)brace
id|md_protocol_error_fld_s
suffix:semicolon
DECL|typedef|md_protocol_error_u_t
)brace
id|md_protocol_error_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains information on requests that encounter no valid protocol   *&n; * table entry.                                                         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_protocol_err_clr_u
r_typedef
r_union
id|md_protocol_err_clr_u
(brace
DECL|member|md_protocol_err_clr_regval
id|bdrkreg_t
id|md_protocol_err_clr_regval
suffix:semicolon
r_struct
(brace
DECL|member|pec_overrun
id|bdrkreg_t
id|pec_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pec_pointer_me
id|bdrkreg_t
id|pec_pointer_me
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pec_reserved_1
id|bdrkreg_t
id|pec_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pec_address
id|bdrkreg_t
id|pec_address
suffix:colon
l_int|30
suffix:semicolon
DECL|member|pec_reserved
id|bdrkreg_t
id|pec_reserved
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pec_ptr1_btmbits
id|bdrkreg_t
id|pec_ptr1_btmbits
suffix:colon
l_int|3
suffix:semicolon
DECL|member|pec_dir_format
id|bdrkreg_t
id|pec_dir_format
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_dir_state
id|bdrkreg_t
id|pec_dir_state
suffix:colon
l_int|3
suffix:semicolon
DECL|member|pec_priority
id|bdrkreg_t
id|pec_priority
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pec_access
id|bdrkreg_t
id|pec_access
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pec_msg_type
id|bdrkreg_t
id|pec_msg_type
suffix:colon
l_int|8
suffix:semicolon
DECL|member|pec_initiator
id|bdrkreg_t
id|pec_initiator
suffix:colon
l_int|11
suffix:semicolon
DECL|member|pec_valid
id|bdrkreg_t
id|pec_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_protocol_err_clr_fld_s
)brace
id|md_protocol_err_clr_fld_s
suffix:semicolon
DECL|typedef|md_protocol_err_clr_u_t
)brace
id|md_protocol_err_clr_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_protocol_err_clr_u
r_typedef
r_union
id|md_protocol_err_clr_u
(brace
DECL|member|md_protocol_err_clr_regval
id|bdrkreg_t
id|md_protocol_err_clr_regval
suffix:semicolon
r_struct
(brace
DECL|member|pec_valid
id|bdrkreg_t
id|pec_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pec_initiator
id|bdrkreg_t
id|pec_initiator
suffix:colon
l_int|11
suffix:semicolon
DECL|member|pec_msg_type
id|bdrkreg_t
id|pec_msg_type
suffix:colon
l_int|8
suffix:semicolon
DECL|member|pec_access
id|bdrkreg_t
id|pec_access
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pec_priority
id|bdrkreg_t
id|pec_priority
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pec_dir_state
id|bdrkreg_t
id|pec_dir_state
suffix:colon
l_int|3
suffix:semicolon
DECL|member|pec_dir_format
id|bdrkreg_t
id|pec_dir_format
suffix:colon
l_int|2
suffix:semicolon
DECL|member|pec_ptr1_btmbits
id|bdrkreg_t
id|pec_ptr1_btmbits
suffix:colon
l_int|3
suffix:semicolon
DECL|member|pec_reserved
id|bdrkreg_t
id|pec_reserved
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pec_address
id|bdrkreg_t
id|pec_address
suffix:colon
l_int|30
suffix:semicolon
DECL|member|pec_reserved_1
id|bdrkreg_t
id|pec_reserved_1
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pec_pointer_me
id|bdrkreg_t
id|pec_pointer_me
suffix:colon
l_int|1
suffix:semicolon
DECL|member|pec_overrun
id|bdrkreg_t
id|pec_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_protocol_err_clr_fld_s
)brace
id|md_protocol_err_clr_fld_s
suffix:semicolon
DECL|typedef|md_protocol_err_clr_u_t
)brace
id|md_protocol_err_clr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains the address of the page and the requestor which caused a   *&n; * migration threshold to be exceeded. Also contains the type of        *&n; * threshold exceeded and an overrun bit. For Value mode type           *&n; * interrupts, it indicates whether the local or the remote counter     *&n; * triggered the interrupt. Unlike most registers, when the overrun     *&n; * bit is set the register contains information on the most recent      *&n; * (the last) migration candidate.                                      *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_mig_candidate_u
r_typedef
r_union
id|md_mig_candidate_u
(brace
DECL|member|md_mig_candidate_regval
id|bdrkreg_t
id|md_mig_candidate_regval
suffix:semicolon
r_struct
(brace
DECL|member|mc_address
id|bdrkreg_t
id|mc_address
suffix:colon
l_int|21
suffix:semicolon
DECL|member|mc_initiator
id|bdrkreg_t
id|mc_initiator
suffix:colon
l_int|11
suffix:semicolon
DECL|member|mc_overrun
id|bdrkreg_t
id|mc_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_type
id|bdrkreg_t
id|mc_type
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_local
id|bdrkreg_t
id|mc_local
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_reserved
id|bdrkreg_t
id|mc_reserved
suffix:colon
l_int|28
suffix:semicolon
DECL|member|mc_valid
id|bdrkreg_t
id|mc_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_mig_candidate_fld_s
)brace
id|md_mig_candidate_fld_s
suffix:semicolon
DECL|typedef|md_mig_candidate_u_t
)brace
id|md_mig_candidate_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_mig_candidate_u
r_typedef
r_union
id|md_mig_candidate_u
(brace
DECL|member|md_mig_candidate_regval
id|bdrkreg_t
id|md_mig_candidate_regval
suffix:semicolon
r_struct
(brace
DECL|member|mc_valid
id|bdrkreg_t
id|mc_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_reserved
id|bdrkreg_t
id|mc_reserved
suffix:colon
l_int|28
suffix:semicolon
DECL|member|mc_local
id|bdrkreg_t
id|mc_local
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_type
id|bdrkreg_t
id|mc_type
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_overrun
id|bdrkreg_t
id|mc_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mc_initiator
id|bdrkreg_t
id|mc_initiator
suffix:colon
l_int|11
suffix:semicolon
DECL|member|mc_address
id|bdrkreg_t
id|mc_address
suffix:colon
l_int|21
suffix:semicolon
DECL|member|md_mig_candidate_fld_s
)brace
id|md_mig_candidate_fld_s
suffix:semicolon
DECL|typedef|md_mig_candidate_u_t
)brace
id|md_mig_candidate_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains the address of the page and the requestor which caused a   *&n; * migration threshold to be exceeded. Also contains the type of        *&n; * threshold exceeded and an overrun bit. For Value mode type           *&n; * interrupts, it indicates whether the local or the remote counter     *&n; * triggered the interrupt. Unlike most registers, when the overrun     *&n; * bit is set the register contains information on the most recent      *&n; * (the last) migration candidate.                                      *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_mig_candidate_clr_u
r_typedef
r_union
id|md_mig_candidate_clr_u
(brace
DECL|member|md_mig_candidate_clr_regval
id|bdrkreg_t
id|md_mig_candidate_clr_regval
suffix:semicolon
r_struct
(brace
DECL|member|mcc_address
id|bdrkreg_t
id|mcc_address
suffix:colon
l_int|21
suffix:semicolon
DECL|member|mcc_initiator
id|bdrkreg_t
id|mcc_initiator
suffix:colon
l_int|11
suffix:semicolon
DECL|member|mcc_overrun
id|bdrkreg_t
id|mcc_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mcc_type
id|bdrkreg_t
id|mcc_type
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mcc_local
id|bdrkreg_t
id|mcc_local
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mcc_reserved
id|bdrkreg_t
id|mcc_reserved
suffix:colon
l_int|28
suffix:semicolon
DECL|member|mcc_valid
id|bdrkreg_t
id|mcc_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_mig_candidate_clr_fld_s
)brace
id|md_mig_candidate_clr_fld_s
suffix:semicolon
DECL|typedef|md_mig_candidate_clr_u_t
)brace
id|md_mig_candidate_clr_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_mig_candidate_clr_u
r_typedef
r_union
id|md_mig_candidate_clr_u
(brace
DECL|member|md_mig_candidate_clr_regval
id|bdrkreg_t
id|md_mig_candidate_clr_regval
suffix:semicolon
r_struct
(brace
DECL|member|mcc_valid
id|bdrkreg_t
id|mcc_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mcc_reserved
id|bdrkreg_t
id|mcc_reserved
suffix:colon
l_int|28
suffix:semicolon
DECL|member|mcc_local
id|bdrkreg_t
id|mcc_local
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mcc_type
id|bdrkreg_t
id|mcc_type
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mcc_overrun
id|bdrkreg_t
id|mcc_overrun
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mcc_initiator
id|bdrkreg_t
id|mcc_initiator
suffix:colon
l_int|11
suffix:semicolon
DECL|member|mcc_address
id|bdrkreg_t
id|mcc_address
suffix:colon
l_int|21
suffix:semicolon
DECL|member|md_mig_candidate_clr_fld_s
)brace
id|md_mig_candidate_clr_fld_s
suffix:semicolon
DECL|typedef|md_mig_candidate_clr_u_t
)brace
id|md_mig_candidate_clr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Controls the generation of page-migration interrupts and loading    *&n; * of the MIGRATION_CANDIDATE register for pages which are using the    *&n; * difference between the requestor and home counts. If the             *&n; * difference is greater-than or equal to than the threshold            *&n; * contained in the register, and the valid bit is set, the migration   *&n; * candidate is loaded (and an interrupt generated if enabled by the    *&n; * page migration mode).                                                *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_mig_diff_thresh_u
r_typedef
r_union
id|md_mig_diff_thresh_u
(brace
DECL|member|md_mig_diff_thresh_regval
id|bdrkreg_t
id|md_mig_diff_thresh_regval
suffix:semicolon
r_struct
(brace
DECL|member|mdt_threshold
id|bdrkreg_t
id|mdt_threshold
suffix:colon
l_int|15
suffix:semicolon
DECL|member|mdt_reserved_1
id|bdrkreg_t
id|mdt_reserved_1
suffix:colon
l_int|17
suffix:semicolon
DECL|member|mdt_th_action
id|bdrkreg_t
id|mdt_th_action
suffix:colon
l_int|3
suffix:semicolon
DECL|member|mdt_sat_action
id|bdrkreg_t
id|mdt_sat_action
suffix:colon
l_int|3
suffix:semicolon
DECL|member|mdt_reserved
id|bdrkreg_t
id|mdt_reserved
suffix:colon
l_int|25
suffix:semicolon
DECL|member|mdt_valid
id|bdrkreg_t
id|mdt_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_mig_diff_thresh_fld_s
)brace
id|md_mig_diff_thresh_fld_s
suffix:semicolon
DECL|typedef|md_mig_diff_thresh_u_t
)brace
id|md_mig_diff_thresh_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_mig_diff_thresh_u
r_typedef
r_union
id|md_mig_diff_thresh_u
(brace
DECL|member|md_mig_diff_thresh_regval
id|bdrkreg_t
id|md_mig_diff_thresh_regval
suffix:semicolon
r_struct
(brace
DECL|member|mdt_valid
id|bdrkreg_t
id|mdt_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mdt_reserved
id|bdrkreg_t
id|mdt_reserved
suffix:colon
l_int|25
suffix:semicolon
DECL|member|mdt_sat_action
id|bdrkreg_t
id|mdt_sat_action
suffix:colon
l_int|3
suffix:semicolon
DECL|member|mdt_th_action
id|bdrkreg_t
id|mdt_th_action
suffix:colon
l_int|3
suffix:semicolon
DECL|member|mdt_reserved_1
id|bdrkreg_t
id|mdt_reserved_1
suffix:colon
l_int|17
suffix:semicolon
DECL|member|mdt_threshold
id|bdrkreg_t
id|mdt_threshold
suffix:colon
l_int|15
suffix:semicolon
DECL|member|md_mig_diff_thresh_fld_s
)brace
id|md_mig_diff_thresh_fld_s
suffix:semicolon
DECL|typedef|md_mig_diff_thresh_u_t
)brace
id|md_mig_diff_thresh_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Controls the generation of page-migration interrupts and loading    *&n; * of the MIGRATION_CANDIDATE register for pages that are using the     *&n; * absolute value of the requestor count. If the value is               *&n; * greater-than or equal to the threshold contained in the register,    *&n; * and the register valid bit is set, the migration candidate is        *&n; * loaded and an interrupt generated. For the value mode of page        *&n; * migration, there are two variations. In the first variation,         *&n; * interrupts are only generated when the remote counter reaches the    *&n; * threshold, not when the local counter reaches the threshold. In      *&n; * the second mode, both the local counter and the remote counter       *&n; * generate interrupts if they reach the threshold. This second mode    *&n; * is useful for performance monitoring, to track the number of local   *&n; * and remote references to a page. LOCAL_INT determines whether we     *&n; * will generate interrupts when the local counter reaches the          *&n; * threshold.                                                           *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_mig_value_thresh_u
r_typedef
r_union
id|md_mig_value_thresh_u
(brace
DECL|member|md_mig_value_thresh_regval
id|bdrkreg_t
id|md_mig_value_thresh_regval
suffix:semicolon
r_struct
(brace
DECL|member|mvt_threshold
id|bdrkreg_t
id|mvt_threshold
suffix:colon
l_int|15
suffix:semicolon
DECL|member|mvt_reserved_1
id|bdrkreg_t
id|mvt_reserved_1
suffix:colon
l_int|17
suffix:semicolon
DECL|member|mvt_th_action
id|bdrkreg_t
id|mvt_th_action
suffix:colon
l_int|3
suffix:semicolon
DECL|member|mvt_sat_action
id|bdrkreg_t
id|mvt_sat_action
suffix:colon
l_int|3
suffix:semicolon
DECL|member|mvt_reserved
id|bdrkreg_t
id|mvt_reserved
suffix:colon
l_int|24
suffix:semicolon
DECL|member|mvt_local_int
id|bdrkreg_t
id|mvt_local_int
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mvt_valid
id|bdrkreg_t
id|mvt_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_mig_value_thresh_fld_s
)brace
id|md_mig_value_thresh_fld_s
suffix:semicolon
DECL|typedef|md_mig_value_thresh_u_t
)brace
id|md_mig_value_thresh_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_mig_value_thresh_u
r_typedef
r_union
id|md_mig_value_thresh_u
(brace
DECL|member|md_mig_value_thresh_regval
id|bdrkreg_t
id|md_mig_value_thresh_regval
suffix:semicolon
r_struct
(brace
DECL|member|mvt_valid
id|bdrkreg_t
id|mvt_valid
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mvt_local_int
id|bdrkreg_t
id|mvt_local_int
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mvt_reserved
id|bdrkreg_t
id|mvt_reserved
suffix:colon
l_int|24
suffix:semicolon
DECL|member|mvt_sat_action
id|bdrkreg_t
id|mvt_sat_action
suffix:colon
l_int|3
suffix:semicolon
DECL|member|mvt_th_action
id|bdrkreg_t
id|mvt_th_action
suffix:colon
l_int|3
suffix:semicolon
DECL|member|mvt_reserved_1
id|bdrkreg_t
id|mvt_reserved_1
suffix:colon
l_int|17
suffix:semicolon
DECL|member|mvt_threshold
id|bdrkreg_t
id|mvt_threshold
suffix:colon
l_int|15
suffix:semicolon
DECL|member|md_mig_value_thresh_fld_s
)brace
id|md_mig_value_thresh_fld_s
suffix:semicolon
DECL|typedef|md_mig_value_thresh_u_t
)brace
id|md_mig_value_thresh_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains the controls for the sizing of the three MOQH request      *&n; * queues. The maximum (and default) value is 4. Queue sizes are in     *&n; * flits. One header equals one flit.                                   *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_outgoing_rq_queue_size_u
r_typedef
r_union
id|md_outgoing_rq_queue_size_u
(brace
DECL|member|md_outgoing_rq_queue_size_regval
id|bdrkreg_t
id|md_outgoing_rq_queue_size_regval
suffix:semicolon
r_struct
(brace
DECL|member|orqs_reserved_3
id|bdrkreg_t
id|orqs_reserved_3
suffix:colon
l_int|8
suffix:semicolon
DECL|member|orqs_moqh_p0_rq_size
id|bdrkreg_t
id|orqs_moqh_p0_rq_size
suffix:colon
l_int|3
suffix:semicolon
DECL|member|orqs_reserved_2
id|bdrkreg_t
id|orqs_reserved_2
suffix:colon
l_int|5
suffix:semicolon
DECL|member|orqs_moqh_p1_rq_size
id|bdrkreg_t
id|orqs_moqh_p1_rq_size
suffix:colon
l_int|3
suffix:semicolon
DECL|member|orqs_reserved_1
id|bdrkreg_t
id|orqs_reserved_1
suffix:colon
l_int|5
suffix:semicolon
DECL|member|orqs_moqh_np_rq_size
id|bdrkreg_t
id|orqs_moqh_np_rq_size
suffix:colon
l_int|3
suffix:semicolon
DECL|member|orqs_reserved
id|bdrkreg_t
id|orqs_reserved
suffix:colon
l_int|37
suffix:semicolon
DECL|member|md_outgoing_rq_queue_size_fld_s
)brace
id|md_outgoing_rq_queue_size_fld_s
suffix:semicolon
DECL|typedef|md_outgoing_rq_queue_size_u_t
)brace
id|md_outgoing_rq_queue_size_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_outgoing_rq_queue_size_u
r_typedef
r_union
id|md_outgoing_rq_queue_size_u
(brace
DECL|member|md_outgoing_rq_queue_size_regval
id|bdrkreg_t
id|md_outgoing_rq_queue_size_regval
suffix:semicolon
r_struct
(brace
DECL|member|orqs_reserved
id|bdrkreg_t
id|orqs_reserved
suffix:colon
l_int|37
suffix:semicolon
DECL|member|orqs_moqh_np_rq_size
id|bdrkreg_t
id|orqs_moqh_np_rq_size
suffix:colon
l_int|3
suffix:semicolon
DECL|member|orqs_reserved_1
id|bdrkreg_t
id|orqs_reserved_1
suffix:colon
l_int|5
suffix:semicolon
DECL|member|orqs_moqh_p1_rq_size
id|bdrkreg_t
id|orqs_moqh_p1_rq_size
suffix:colon
l_int|3
suffix:semicolon
DECL|member|orqs_reserved_2
id|bdrkreg_t
id|orqs_reserved_2
suffix:colon
l_int|5
suffix:semicolon
DECL|member|orqs_moqh_p0_rq_size
id|bdrkreg_t
id|orqs_moqh_p0_rq_size
suffix:colon
l_int|3
suffix:semicolon
DECL|member|orqs_reserved_3
id|bdrkreg_t
id|orqs_reserved_3
suffix:colon
l_int|8
suffix:semicolon
DECL|member|md_outgoing_rq_queue_size_fld_s
)brace
id|md_outgoing_rq_queue_size_fld_s
suffix:semicolon
DECL|typedef|md_outgoing_rq_queue_size_u_t
)brace
id|md_outgoing_rq_queue_size_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains the 32-bit directory word failing BIST.                    *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_bist_db_err_data_u
r_typedef
r_union
id|md_bist_db_err_data_u
(brace
DECL|member|md_bist_db_err_data_regval
id|bdrkreg_t
id|md_bist_db_err_data_regval
suffix:semicolon
r_struct
(brace
DECL|member|bded_db_er_d
id|bdrkreg_t
id|bded_db_er_d
suffix:colon
l_int|32
suffix:semicolon
DECL|member|bded_reserved
id|bdrkreg_t
id|bded_reserved
suffix:colon
l_int|32
suffix:semicolon
DECL|member|md_bist_db_err_data_fld_s
)brace
id|md_bist_db_err_data_fld_s
suffix:semicolon
DECL|typedef|md_bist_db_err_data_u_t
)brace
id|md_bist_db_err_data_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_bist_db_err_data_u
r_typedef
r_union
id|md_bist_db_err_data_u
(brace
DECL|member|md_bist_db_err_data_regval
id|bdrkreg_t
id|md_bist_db_err_data_regval
suffix:semicolon
r_struct
(brace
DECL|member|bded_reserved
id|bdrkreg_t
id|bded_reserved
suffix:colon
l_int|32
suffix:semicolon
DECL|member|bded_db_er_d
id|bdrkreg_t
id|bded_db_er_d
suffix:colon
l_int|32
suffix:semicolon
DECL|member|md_bist_db_err_data_fld_s
)brace
id|md_bist_db_err_data_fld_s
suffix:semicolon
DECL|typedef|md_bist_db_err_data_u_t
)brace
id|md_bist_db_err_data_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains 2 bits that allow the selection of DB debug information    *&n; * at the debug port (see the design specification for descrition of    *&n; * the available debug information).                                    *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_db_debug_u
r_typedef
r_union
id|md_db_debug_u
(brace
DECL|member|md_db_debug_regval
id|bdrkreg_t
id|md_db_debug_regval
suffix:semicolon
r_struct
(brace
DECL|member|dd_db_debug_sel
id|bdrkreg_t
id|dd_db_debug_sel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|dd_reserved
id|bdrkreg_t
id|dd_reserved
suffix:colon
l_int|62
suffix:semicolon
DECL|member|md_db_debug_fld_s
)brace
id|md_db_debug_fld_s
suffix:semicolon
DECL|typedef|md_db_debug_u_t
)brace
id|md_db_debug_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_db_debug_u
r_typedef
r_union
id|md_db_debug_u
(brace
DECL|member|md_db_debug_regval
id|bdrkreg_t
id|md_db_debug_regval
suffix:semicolon
r_struct
(brace
DECL|member|dd_reserved
id|bdrkreg_t
id|dd_reserved
suffix:colon
l_int|62
suffix:semicolon
DECL|member|dd_db_debug_sel
id|bdrkreg_t
id|dd_db_debug_sel
suffix:colon
l_int|2
suffix:semicolon
DECL|member|md_db_debug_fld_s
)brace
id|md_db_debug_fld_s
suffix:semicolon
DECL|typedef|md_db_debug_u_t
)brace
id|md_db_debug_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains the IgnoreECC bit. When this bit is set, all ECC errors    *&n; * are ignored. ECC bits will still be generated on writebacks.         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_mb_ecc_config_u
r_typedef
r_union
id|md_mb_ecc_config_u
(brace
DECL|member|md_mb_ecc_config_regval
id|bdrkreg_t
id|md_mb_ecc_config_regval
suffix:semicolon
r_struct
(brace
DECL|member|mec_ignore_dataecc
id|bdrkreg_t
id|mec_ignore_dataecc
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mec_reserved
id|bdrkreg_t
id|mec_reserved
suffix:colon
l_int|63
suffix:semicolon
DECL|member|md_mb_ecc_config_fld_s
)brace
id|md_mb_ecc_config_fld_s
suffix:semicolon
DECL|typedef|md_mb_ecc_config_u_t
)brace
id|md_mb_ecc_config_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_mb_ecc_config_u
r_typedef
r_union
id|md_mb_ecc_config_u
(brace
DECL|member|md_mb_ecc_config_regval
id|bdrkreg_t
id|md_mb_ecc_config_regval
suffix:semicolon
r_struct
(brace
DECL|member|mec_reserved
id|bdrkreg_t
id|mec_reserved
suffix:colon
l_int|63
suffix:semicolon
DECL|member|mec_ignore_dataecc
id|bdrkreg_t
id|mec_ignore_dataecc
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_mb_ecc_config_fld_s
)brace
id|md_mb_ecc_config_fld_s
suffix:semicolon
DECL|typedef|md_mb_ecc_config_u_t
)brace
id|md_mb_ecc_config_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  Contains information on read memory errors (both       *&n; * correctable and uncorrectable) and write memory errors (always       *&n; * uncorrectable). The errors are prioritized as follows:               *&n; *  highest: uncorrectable read error (READ_UCE)                        *&n; *  middle: write error (WRITE_UCE)                                     *&n; *  lowest: correctable read error (READ_CE)                            *&n; * Each type of error maintains a two-bit valid/overrun field           *&n; * (READ_UCE, WRITE_UCE, or READ_CE). Bit 0 of each two-bit field       *&n; * corresponds to the valid bit, and bit 1 of each two-bit field        *&n; * corresponds to the overrun bit.                                      *&n; * The rule for the valid bit is that it gets set whenever that error   *&n; * occurs, regardless of whether a higher priority error has occured.   *&n; * The rule for the overrun bit is that it gets set whenever we are     *&n; * unable to record the address information for this particular         *&n; * error, due to a previous error of the same or higher priority.       *&n; * Note that the syndrome and address information always corresponds    *&n; * to the earliest, highest priority error.                             *&n; *  Finally, the UCE_DIFF_ADDR bit is set whenever there have been      *&n; * several uncorrectable errors, to different cache line addresses.     *&n; * If all the UCEs were to the same cache line address, then            *&n; * UCE_DIFF_ADDR will be 0. This allows the operating system to         *&n; * detect the case where a UCE error is read exclusively, and then      *&n; * written back by the processor. If the bit is 0, it indicates that    *&n; * no information has been lost about UCEs on other cache lines. In     *&n; * particular, partial writes do a read modify write of the cache       *&n; * line. A UCE read error will be set when the cache line is read,      *&n; * and a UCE write error will occur when the cache line is written      *&n; * back, but the UCE_DIFF_ADDR will not be set.                         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_mem_error_u
r_typedef
r_union
id|md_mem_error_u
(brace
DECL|member|md_mem_error_regval
id|bdrkreg_t
id|md_mem_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|me_reserved_5
id|bdrkreg_t
id|me_reserved_5
suffix:colon
l_int|3
suffix:semicolon
DECL|member|me_address
id|bdrkreg_t
id|me_address
suffix:colon
l_int|30
suffix:semicolon
DECL|member|me_reserved_4
id|bdrkreg_t
id|me_reserved_4
suffix:colon
l_int|7
suffix:semicolon
DECL|member|me_bad_syn
id|bdrkreg_t
id|me_bad_syn
suffix:colon
l_int|8
suffix:semicolon
DECL|member|me_reserved_3
id|bdrkreg_t
id|me_reserved_3
suffix:colon
l_int|4
suffix:semicolon
DECL|member|me_read_ce
id|bdrkreg_t
id|me_read_ce
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_reserved_2
id|bdrkreg_t
id|me_reserved_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_write_uce
id|bdrkreg_t
id|me_write_uce
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_reserved_1
id|bdrkreg_t
id|me_reserved_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_read_uce
id|bdrkreg_t
id|me_read_uce
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_reserved
id|bdrkreg_t
id|me_reserved
suffix:colon
l_int|1
suffix:semicolon
DECL|member|me_uce_diff_addr
id|bdrkreg_t
id|me_uce_diff_addr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_mem_error_fld_s
)brace
id|md_mem_error_fld_s
suffix:semicolon
DECL|typedef|md_mem_error_u_t
)brace
id|md_mem_error_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_mem_error_u
r_typedef
r_union
id|md_mem_error_u
(brace
DECL|member|md_mem_error_regval
id|bdrkreg_t
id|md_mem_error_regval
suffix:semicolon
r_struct
(brace
DECL|member|me_uce_diff_addr
id|bdrkreg_t
id|me_uce_diff_addr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|me_reserved
id|bdrkreg_t
id|me_reserved
suffix:colon
l_int|1
suffix:semicolon
DECL|member|me_read_uce
id|bdrkreg_t
id|me_read_uce
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_reserved_1
id|bdrkreg_t
id|me_reserved_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_write_uce
id|bdrkreg_t
id|me_write_uce
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_reserved_2
id|bdrkreg_t
id|me_reserved_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_read_ce
id|bdrkreg_t
id|me_read_ce
suffix:colon
l_int|2
suffix:semicolon
DECL|member|me_reserved_3
id|bdrkreg_t
id|me_reserved_3
suffix:colon
l_int|4
suffix:semicolon
DECL|member|me_bad_syn
id|bdrkreg_t
id|me_bad_syn
suffix:colon
l_int|8
suffix:semicolon
DECL|member|me_reserved_4
id|bdrkreg_t
id|me_reserved_4
suffix:colon
l_int|7
suffix:semicolon
DECL|member|me_address
id|bdrkreg_t
id|me_address
suffix:colon
l_int|30
suffix:semicolon
DECL|member|me_reserved_5
id|bdrkreg_t
id|me_reserved_5
suffix:colon
l_int|3
suffix:semicolon
DECL|member|md_mem_error_fld_s
)brace
id|md_mem_error_fld_s
suffix:semicolon
DECL|typedef|md_mem_error_u_t
)brace
id|md_mem_error_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; * Description:  Contains information on read memory errors (both       *&n; * correctable and uncorrectable) and write memory errors (always       *&n; * uncorrectable). The errors are prioritized as follows:               *&n; *  highest: uncorrectable read error (READ_UCE)                        *&n; *  middle: write error (WRITE_UCE)                                     *&n; *  lowest: correctable read error (READ_CE)                            *&n; * Each type of error maintains a two-bit valid/overrun field           *&n; * (READ_UCE, WRITE_UCE, or READ_CE). Bit 0 of each two-bit field       *&n; * corresponds to the valid bit, and bit 1 of each two-bit field        *&n; * corresponds to the overrun bit.                                      *&n; * The rule for the valid bit is that it gets set whenever that error   *&n; * occurs, regardless of whether a higher priority error has occured.   *&n; * The rule for the overrun bit is that it gets set whenever we are     *&n; * unable to record the address information for this particular         *&n; * error, due to a previous error of the same or higher priority.       *&n; * Note that the syndrome and address information always corresponds    *&n; * to the earliest, highest priority error.                             *&n; *  Finally, the UCE_DIFF_ADDR bit is set whenever there have been      *&n; * several uncorrectable errors, to different cache line addresses.     *&n; * If all the UCEs were to the same cache line address, then            *&n; * UCE_DIFF_ADDR will be 0. This allows the operating system to         *&n; * detect the case where a UCE error is read exclusively, and then      *&n; * written back by the processor. If the bit is 0, it indicates that    *&n; * no information has been lost about UCEs on other cache lines. In     *&n; * particular, partial writes do a read modify write of the cache       *&n; * line. A UCE read error will be set when the cache line is read,      *&n; * and a UCE write error will occur when the cache line is written      *&n; * back, but the UCE_DIFF_ADDR will not be set.                         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_mem_error_clr_u
r_typedef
r_union
id|md_mem_error_clr_u
(brace
DECL|member|md_mem_error_clr_regval
id|bdrkreg_t
id|md_mem_error_clr_regval
suffix:semicolon
r_struct
(brace
DECL|member|mec_reserved_5
id|bdrkreg_t
id|mec_reserved_5
suffix:colon
l_int|3
suffix:semicolon
DECL|member|mec_address
id|bdrkreg_t
id|mec_address
suffix:colon
l_int|30
suffix:semicolon
DECL|member|mec_reserved_4
id|bdrkreg_t
id|mec_reserved_4
suffix:colon
l_int|7
suffix:semicolon
DECL|member|mec_bad_syn
id|bdrkreg_t
id|mec_bad_syn
suffix:colon
l_int|8
suffix:semicolon
DECL|member|mec_reserved_3
id|bdrkreg_t
id|mec_reserved_3
suffix:colon
l_int|4
suffix:semicolon
DECL|member|mec_read_ce
id|bdrkreg_t
id|mec_read_ce
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_reserved_2
id|bdrkreg_t
id|mec_reserved_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_write_uce
id|bdrkreg_t
id|mec_write_uce
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_reserved_1
id|bdrkreg_t
id|mec_reserved_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_read_uce
id|bdrkreg_t
id|mec_read_uce
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_reserved
id|bdrkreg_t
id|mec_reserved
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mec_uce_diff_addr
id|bdrkreg_t
id|mec_uce_diff_addr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_mem_error_clr_fld_s
)brace
id|md_mem_error_clr_fld_s
suffix:semicolon
DECL|typedef|md_mem_error_clr_u_t
)brace
id|md_mem_error_clr_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_mem_error_clr_u
r_typedef
r_union
id|md_mem_error_clr_u
(brace
DECL|member|md_mem_error_clr_regval
id|bdrkreg_t
id|md_mem_error_clr_regval
suffix:semicolon
r_struct
(brace
DECL|member|mec_uce_diff_addr
id|bdrkreg_t
id|mec_uce_diff_addr
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mec_reserved
id|bdrkreg_t
id|mec_reserved
suffix:colon
l_int|1
suffix:semicolon
DECL|member|mec_read_uce
id|bdrkreg_t
id|mec_read_uce
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_reserved_1
id|bdrkreg_t
id|mec_reserved_1
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_write_uce
id|bdrkreg_t
id|mec_write_uce
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_reserved_2
id|bdrkreg_t
id|mec_reserved_2
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_read_ce
id|bdrkreg_t
id|mec_read_ce
suffix:colon
l_int|2
suffix:semicolon
DECL|member|mec_reserved_3
id|bdrkreg_t
id|mec_reserved_3
suffix:colon
l_int|4
suffix:semicolon
DECL|member|mec_bad_syn
id|bdrkreg_t
id|mec_bad_syn
suffix:colon
l_int|8
suffix:semicolon
DECL|member|mec_reserved_4
id|bdrkreg_t
id|mec_reserved_4
suffix:colon
l_int|7
suffix:semicolon
DECL|member|mec_address
id|bdrkreg_t
id|mec_address
suffix:colon
l_int|30
suffix:semicolon
DECL|member|mec_reserved_5
id|bdrkreg_t
id|mec_reserved_5
suffix:colon
l_int|3
suffix:semicolon
DECL|member|md_mem_error_clr_fld_s
)brace
id|md_mem_error_clr_fld_s
suffix:semicolon
DECL|typedef|md_mem_error_clr_u_t
)brace
id|md_mem_error_clr_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains one-quarter of the error memory line failing BIST.         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_bist_mb_err_data_0_u
r_typedef
r_union
id|md_bist_mb_err_data_0_u
(brace
DECL|member|md_bist_mb_err_data_0_regval
id|bdrkreg_t
id|md_bist_mb_err_data_0_regval
suffix:semicolon
r_struct
(brace
DECL|member|bmed0_mb_er_d
id|bdrkreg_t
id|bmed0_mb_er_d
suffix:colon
l_int|36
suffix:semicolon
DECL|member|bmed0_reserved
id|bdrkreg_t
id|bmed0_reserved
suffix:colon
l_int|28
suffix:semicolon
DECL|member|md_bist_mb_err_data_0_fld_s
)brace
id|md_bist_mb_err_data_0_fld_s
suffix:semicolon
DECL|typedef|md_bist_mb_err_data_0_u_t
)brace
id|md_bist_mb_err_data_0_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_bist_mb_err_data_0_u
r_typedef
r_union
id|md_bist_mb_err_data_0_u
(brace
DECL|member|md_bist_mb_err_data_0_regval
id|bdrkreg_t
id|md_bist_mb_err_data_0_regval
suffix:semicolon
r_struct
(brace
DECL|member|bmed0_reserved
id|bdrkreg_t
id|bmed0_reserved
suffix:colon
l_int|28
suffix:semicolon
DECL|member|bmed0_mb_er_d
id|bdrkreg_t
id|bmed0_mb_er_d
suffix:colon
l_int|36
suffix:semicolon
DECL|member|md_bist_mb_err_data_0_fld_s
)brace
id|md_bist_mb_err_data_0_fld_s
suffix:semicolon
DECL|typedef|md_bist_mb_err_data_0_u_t
)brace
id|md_bist_mb_err_data_0_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains one-quarter of the error memory line failing BIST.         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_bist_mb_err_data_1_u
r_typedef
r_union
id|md_bist_mb_err_data_1_u
(brace
DECL|member|md_bist_mb_err_data_1_regval
id|bdrkreg_t
id|md_bist_mb_err_data_1_regval
suffix:semicolon
r_struct
(brace
DECL|member|bmed1_mb_er_d
id|bdrkreg_t
id|bmed1_mb_er_d
suffix:colon
l_int|36
suffix:semicolon
DECL|member|bmed1_reserved
id|bdrkreg_t
id|bmed1_reserved
suffix:colon
l_int|28
suffix:semicolon
DECL|member|md_bist_mb_err_data_1_fld_s
)brace
id|md_bist_mb_err_data_1_fld_s
suffix:semicolon
DECL|typedef|md_bist_mb_err_data_1_u_t
)brace
id|md_bist_mb_err_data_1_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_bist_mb_err_data_1_u
r_typedef
r_union
id|md_bist_mb_err_data_1_u
(brace
DECL|member|md_bist_mb_err_data_1_regval
id|bdrkreg_t
id|md_bist_mb_err_data_1_regval
suffix:semicolon
r_struct
(brace
DECL|member|bmed1_reserved
id|bdrkreg_t
id|bmed1_reserved
suffix:colon
l_int|28
suffix:semicolon
DECL|member|bmed1_mb_er_d
id|bdrkreg_t
id|bmed1_mb_er_d
suffix:colon
l_int|36
suffix:semicolon
DECL|member|md_bist_mb_err_data_1_fld_s
)brace
id|md_bist_mb_err_data_1_fld_s
suffix:semicolon
DECL|typedef|md_bist_mb_err_data_1_u_t
)brace
id|md_bist_mb_err_data_1_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains one-quarter of the error memory line failing BIST.         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_bist_mb_err_data_2_u
r_typedef
r_union
id|md_bist_mb_err_data_2_u
(brace
DECL|member|md_bist_mb_err_data_2_regval
id|bdrkreg_t
id|md_bist_mb_err_data_2_regval
suffix:semicolon
r_struct
(brace
DECL|member|bmed2_mb_er_d
id|bdrkreg_t
id|bmed2_mb_er_d
suffix:colon
l_int|36
suffix:semicolon
DECL|member|bmed2_reserved
id|bdrkreg_t
id|bmed2_reserved
suffix:colon
l_int|28
suffix:semicolon
DECL|member|md_bist_mb_err_data_2_fld_s
)brace
id|md_bist_mb_err_data_2_fld_s
suffix:semicolon
DECL|typedef|md_bist_mb_err_data_2_u_t
)brace
id|md_bist_mb_err_data_2_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_bist_mb_err_data_2_u
r_typedef
r_union
id|md_bist_mb_err_data_2_u
(brace
DECL|member|md_bist_mb_err_data_2_regval
id|bdrkreg_t
id|md_bist_mb_err_data_2_regval
suffix:semicolon
r_struct
(brace
DECL|member|bmed2_reserved
id|bdrkreg_t
id|bmed2_reserved
suffix:colon
l_int|28
suffix:semicolon
DECL|member|bmed2_mb_er_d
id|bdrkreg_t
id|bmed2_mb_er_d
suffix:colon
l_int|36
suffix:semicolon
DECL|member|md_bist_mb_err_data_2_fld_s
)brace
id|md_bist_mb_err_data_2_fld_s
suffix:semicolon
DECL|typedef|md_bist_mb_err_data_2_u_t
)brace
id|md_bist_mb_err_data_2_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains one-quarter of the error memory line failing BIST.         *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_bist_mb_err_data_3_u
r_typedef
r_union
id|md_bist_mb_err_data_3_u
(brace
DECL|member|md_bist_mb_err_data_3_regval
id|bdrkreg_t
id|md_bist_mb_err_data_3_regval
suffix:semicolon
r_struct
(brace
DECL|member|bmed3_mb_er_d
id|bdrkreg_t
id|bmed3_mb_er_d
suffix:colon
l_int|36
suffix:semicolon
DECL|member|bmed3_reserved
id|bdrkreg_t
id|bmed3_reserved
suffix:colon
l_int|28
suffix:semicolon
DECL|member|md_bist_mb_err_data_3_fld_s
)brace
id|md_bist_mb_err_data_3_fld_s
suffix:semicolon
DECL|typedef|md_bist_mb_err_data_3_u_t
)brace
id|md_bist_mb_err_data_3_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_bist_mb_err_data_3_u
r_typedef
r_union
id|md_bist_mb_err_data_3_u
(brace
DECL|member|md_bist_mb_err_data_3_regval
id|bdrkreg_t
id|md_bist_mb_err_data_3_regval
suffix:semicolon
r_struct
(brace
DECL|member|bmed3_reserved
id|bdrkreg_t
id|bmed3_reserved
suffix:colon
l_int|28
suffix:semicolon
DECL|member|bmed3_mb_er_d
id|bdrkreg_t
id|bmed3_mb_er_d
suffix:colon
l_int|36
suffix:semicolon
DECL|member|md_bist_mb_err_data_3_fld_s
)brace
id|md_bist_mb_err_data_3_fld_s
suffix:semicolon
DECL|typedef|md_bist_mb_err_data_3_u_t
)brace
id|md_bist_mb_err_data_3_u_t
suffix:semicolon
macro_line|#endif
multiline_comment|/************************************************************************&n; *                                                                      *&n; *  Contains 1 bit that allow the selection of MB debug information     *&n; * at the debug port (see the design specification for the available    *&n; * debug information).                                                  *&n; *                                                                      *&n; ************************************************************************/
macro_line|#ifdef LITTLE_ENDIAN
DECL|union|md_mb_debug_u
r_typedef
r_union
id|md_mb_debug_u
(brace
DECL|member|md_mb_debug_regval
id|bdrkreg_t
id|md_mb_debug_regval
suffix:semicolon
r_struct
(brace
DECL|member|md_mb_debug_sel
id|bdrkreg_t
id|md_mb_debug_sel
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_reserved
id|bdrkreg_t
id|md_reserved
suffix:colon
l_int|63
suffix:semicolon
DECL|member|md_mb_debug_fld_s
)brace
id|md_mb_debug_fld_s
suffix:semicolon
DECL|typedef|md_mb_debug_u_t
)brace
id|md_mb_debug_u_t
suffix:semicolon
macro_line|#else
DECL|union|md_mb_debug_u
r_typedef
r_union
id|md_mb_debug_u
(brace
DECL|member|md_mb_debug_regval
id|bdrkreg_t
id|md_mb_debug_regval
suffix:semicolon
r_struct
(brace
DECL|member|md_reserved
id|bdrkreg_t
id|md_reserved
suffix:colon
l_int|63
suffix:semicolon
DECL|member|md_mb_debug_sel
id|bdrkreg_t
id|md_mb_debug_sel
suffix:colon
l_int|1
suffix:semicolon
DECL|member|md_mb_debug_fld_s
)brace
id|md_mb_debug_fld_s
suffix:semicolon
DECL|typedef|md_mb_debug_u_t
)brace
id|md_mb_debug_u_t
suffix:semicolon
macro_line|#endif
macro_line|#endif /* _LANGUAGE_C */
multiline_comment|/************************************************************************&n; *                                                                      *&n; *               MAKE ALL ADDITIONS AFTER THIS LINE                     *&n; *                                                                      *&n; ************************************************************************/
macro_line|#endif /* _ASM_SN_SN1_HUBMD_H */
eof
