multiline_comment|/* $Id$&n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 1992 - 1997, 2000-2002 Silicon Graphics, Inc. All rights reserved.&n; */
macro_line|#ifndef _ASM_IA64_SN_NIC_H
DECL|macro|_ASM_IA64_SN_NIC_H
mdefine_line|#define _ASM_IA64_SN_NIC_H
macro_line|#include &lt;asm/types.h&gt;
macro_line|#include &lt;asm/sn/types.h&gt;
macro_line|#include &lt;linux/devfs_fs_kernel.h&gt;
DECL|macro|MCR_DATA
mdefine_line|#define MCR_DATA(x)&t;&t;&t;((int) ((x) &amp; 1))
DECL|macro|MCR_DONE
mdefine_line|#define MCR_DONE(x)&t;&t;&t;((x) &amp; 2)
DECL|macro|MCR_PACK
mdefine_line|#define MCR_PACK(pulse, sample)&t;&t;((pulse) &lt;&lt; 10 | (sample) &lt;&lt; 2)
DECL|typedef|nic_data_t
r_typedef
id|__psunsigned_t
id|nic_data_t
suffix:semicolon
r_typedef
r_int
DECL|typedef|nic_access_f
id|nic_access_f
c_func
(paren
id|nic_data_t
id|data
comma
r_int
id|pulse
comma
r_int
id|sample
comma
r_int
id|delay
)paren
suffix:semicolon
DECL|typedef|nic_access_t
r_typedef
id|nic_access_f
op_star
id|nic_access_t
suffix:semicolon
DECL|typedef|nic_vmce_t
r_typedef
r_struct
id|nic_vmce_s
op_star
id|nic_vmce_t
suffix:semicolon
DECL|typedef|nic_vmc_func
r_typedef
r_void
id|nic_vmc_func
c_func
(paren
id|devfs_handle_t
id|v
)paren
suffix:semicolon
multiline_comment|/*&n; * PRIVATE data for Dallas NIC&n; */
DECL|struct|nic_state_t
r_typedef
r_struct
id|nic_state_t
(brace
DECL|member|access
id|nic_access_t
id|access
suffix:semicolon
DECL|member|data
id|nic_data_t
id|data
suffix:semicolon
DECL|member|last_disc
r_int
id|last_disc
suffix:semicolon
DECL|member|done
r_int
id|done
suffix:semicolon
DECL|member|bit_index
r_int
id|bit_index
suffix:semicolon
DECL|member|disc_marker
r_int
id|disc_marker
suffix:semicolon
DECL|member|bits
id|uchar_t
id|bits
(braket
l_int|64
)braket
suffix:semicolon
DECL|typedef|nic_state_t
)brace
id|nic_state_t
suffix:semicolon
multiline_comment|/*&n; * Public interface for Dallas NIC&n; *&n; *&n; *   Access Routine&n; *&n; *   nic_setup requires an access routine that pulses the NIC line for a&n; *   specified duration, samples the NIC line after a specified duration,&n; *   then delays for a third specified duration (for precharge).&n; *&n; *   This general scheme allows us to access NICs through any medium&n; *   (e.g. hub regs, bridge regs, vector writes, system ctlr commands).&n; *&n; *   The access routine should return the sample value 0 or 1, or if an&n; *   error occurs, return a negative error code.  Negative error codes from&n; *   the access routine will abort the NIC operation and be propagated&n; *   through out of the top-level NIC call.&n; */
DECL|macro|NIC_OK
mdefine_line|#define NIC_OK&t;&t;&t;0
DECL|macro|NIC_DONE
mdefine_line|#define NIC_DONE&t;&t;1
DECL|macro|NIC_FAIL
mdefine_line|#define NIC_FAIL&t;&t;2
DECL|macro|NIC_BAD_CRC
mdefine_line|#define NIC_BAD_CRC&t;&t;3
DECL|macro|NIC_NOT_PRESENT
mdefine_line|#define NIC_NOT_PRESENT&t;&t;4
DECL|macro|NIC_REDIR_LOOP
mdefine_line|#define NIC_REDIR_LOOP&t;&t;5
DECL|macro|NIC_PARAM
mdefine_line|#define NIC_PARAM&t;&t;6
DECL|macro|NIC_NOMEM
mdefine_line|#define NIC_NOMEM&t;&t;7
r_uint64
id|nic_get_phase_bits
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|nic_setup
c_func
(paren
id|nic_state_t
op_star
id|ns
comma
id|nic_access_t
id|access
comma
id|nic_data_t
id|data
)paren
suffix:semicolon
r_extern
r_int
id|nic_next
c_func
(paren
id|nic_state_t
op_star
id|ns
comma
r_char
op_star
id|serial
comma
r_char
op_star
id|family
comma
r_char
op_star
id|crc
)paren
suffix:semicolon
r_extern
r_int
id|nic_read_one_page
c_func
(paren
id|nic_state_t
op_star
id|ns
comma
r_char
op_star
id|family
comma
r_char
op_star
id|serial
comma
r_char
op_star
id|crc
comma
r_int
id|start
comma
id|uchar_t
op_star
id|redirect
comma
id|uchar_t
op_star
id|byte
)paren
suffix:semicolon
r_extern
r_int
id|nic_read_mfg
c_func
(paren
id|nic_state_t
op_star
id|ns
comma
r_char
op_star
id|family
comma
r_char
op_star
id|serial
comma
r_char
op_star
id|crc
comma
id|uchar_t
op_star
id|pageA
comma
id|uchar_t
op_star
id|pageB
)paren
suffix:semicolon
r_extern
r_int
id|nic_info_get
c_func
(paren
id|nic_access_t
id|access
comma
id|nic_data_t
id|data
comma
r_char
op_star
id|info
)paren
suffix:semicolon
r_extern
r_int
id|nic_item_info_get
c_func
(paren
r_char
op_star
id|buf
comma
r_char
op_star
id|item
comma
r_char
op_star
op_star
id|item_info
)paren
suffix:semicolon
DECL|variable|nic_access_mcr32
id|nic_access_f
id|nic_access_mcr32
suffix:semicolon
r_extern
r_char
op_star
id|nic_vertex_info_get
c_func
(paren
id|devfs_handle_t
id|v
)paren
suffix:semicolon
r_extern
r_char
op_star
id|nic_vertex_info_set
c_func
(paren
id|nic_access_t
id|access
comma
id|nic_data_t
id|data
comma
id|devfs_handle_t
id|v
)paren
suffix:semicolon
r_extern
r_int
id|nic_vertex_info_match
c_func
(paren
id|devfs_handle_t
id|vertex
comma
r_char
op_star
id|name
)paren
suffix:semicolon
r_extern
r_char
op_star
id|nic_bridge_vertex_info
c_func
(paren
id|devfs_handle_t
id|vertex
comma
id|nic_data_t
id|data
)paren
suffix:semicolon
r_extern
r_char
op_star
id|nic_hq4_vertex_info
c_func
(paren
id|devfs_handle_t
id|vertex
comma
id|nic_data_t
id|data
)paren
suffix:semicolon
r_extern
r_char
op_star
id|nic_ioc3_vertex_info
c_func
(paren
id|devfs_handle_t
id|vertex
comma
id|nic_data_t
id|data
comma
r_int32
op_star
id|gpcr_s
)paren
suffix:semicolon
r_extern
r_char
op_star
id|nic_hub_vertex_info
c_func
(paren
id|devfs_handle_t
id|vertex
)paren
suffix:semicolon
r_extern
id|nic_vmce_t
id|nic_vmc_add
c_func
(paren
r_char
op_star
comma
id|nic_vmc_func
op_star
)paren
suffix:semicolon
r_extern
r_void
id|nic_vmc_del
c_func
(paren
id|nic_vmce_t
)paren
suffix:semicolon
macro_line|#endif /* _ASM_IA64_SN_NIC_H */
eof
