macro_line|#ifndef _SPARC64_TLBFLUSH_H
DECL|macro|_SPARC64_TLBFLUSH_H
mdefine_line|#define _SPARC64_TLBFLUSH_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/mm.h&gt;
macro_line|#include &lt;asm/mmu_context.h&gt;
multiline_comment|/* TLB flush operations. */
r_extern
r_void
id|__flush_tlb_all
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|__flush_tlb_mm
c_func
(paren
r_int
r_int
id|context
comma
r_int
r_int
id|r
)paren
suffix:semicolon
r_extern
r_void
id|__flush_tlb_range
c_func
(paren
r_int
r_int
id|context
comma
r_int
r_int
id|start
comma
r_int
r_int
id|r
comma
r_int
r_int
id|end
comma
r_int
r_int
id|pgsz
comma
r_int
r_int
id|size
)paren
suffix:semicolon
r_extern
r_void
id|__flush_tlb_page
c_func
(paren
r_int
r_int
id|context
comma
r_int
r_int
id|page
comma
r_int
r_int
id|r
)paren
suffix:semicolon
r_extern
r_void
id|__flush_tlb_kernel_range
c_func
(paren
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
suffix:semicolon
macro_line|#ifndef CONFIG_SMP
DECL|macro|flush_tlb_all
mdefine_line|#define flush_tlb_all()&t;&t;__flush_tlb_all()
DECL|macro|flush_tlb_kernel_range
mdefine_line|#define flush_tlb_kernel_range(start,end) &bslash;&n;&t;__flush_tlb_kernel_range(start,end)
DECL|macro|flush_tlb_mm
mdefine_line|#define flush_tlb_mm(__mm) &bslash;&n;do { if (CTX_VALID((__mm)-&gt;context)) &bslash;&n;&t;__flush_tlb_mm(CTX_HWBITS((__mm)-&gt;context), SECONDARY_CONTEXT); &bslash;&n;} while (0)
DECL|macro|flush_tlb_range
mdefine_line|#define flush_tlb_range(__vma, start, end) &bslash;&n;do { if (CTX_VALID((__vma)-&gt;vm_mm-&gt;context)) { &bslash;&n;&t;unsigned long __start = (start)&amp;PAGE_MASK; &bslash;&n;&t;unsigned long __end = PAGE_ALIGN(end); &bslash;&n;&t;__flush_tlb_range(CTX_HWBITS((__vma)-&gt;vm_mm-&gt;context), __start, &bslash;&n;&t;&t;&t;  SECONDARY_CONTEXT, __end, PAGE_SIZE, &bslash;&n;&t;&t;&t;  (__end - __start)); &bslash;&n;     } &bslash;&n;} while (0)
DECL|macro|flush_tlb_vpte_range
mdefine_line|#define flush_tlb_vpte_range(__mm, start, end) &bslash;&n;do { if (CTX_VALID((__mm)-&gt;context)) { &bslash;&n;&t;unsigned long __start = (start)&amp;PAGE_MASK; &bslash;&n;&t;unsigned long __end = PAGE_ALIGN(end); &bslash;&n;&t;__flush_tlb_range(CTX_HWBITS((__mm)-&gt;context), __start, &bslash;&n;&t;&t;&t;  SECONDARY_CONTEXT, __end, PAGE_SIZE, &bslash;&n;&t;&t;&t;  (__end - __start)); &bslash;&n;     } &bslash;&n;} while (0)
DECL|macro|flush_tlb_page
mdefine_line|#define flush_tlb_page(vma, page) &bslash;&n;do { struct mm_struct *__mm = (vma)-&gt;vm_mm; &bslash;&n;     if (CTX_VALID(__mm-&gt;context)) &bslash;&n;&t;__flush_tlb_page(CTX_HWBITS(__mm-&gt;context), (page)&amp;PAGE_MASK, &bslash;&n;&t;&t;&t; SECONDARY_CONTEXT); &bslash;&n;} while (0)
DECL|macro|flush_tlb_vpte_page
mdefine_line|#define flush_tlb_vpte_page(mm, addr) &bslash;&n;do { struct mm_struct *__mm = (mm); &bslash;&n;     if (CTX_VALID(__mm-&gt;context)) &bslash;&n;&t;__flush_tlb_page(CTX_HWBITS(__mm-&gt;context), (addr)&amp;PAGE_MASK, &bslash;&n;&t;&t;&t; SECONDARY_CONTEXT); &bslash;&n;} while (0)
macro_line|#else /* CONFIG_SMP */
r_extern
r_void
id|smp_flush_tlb_all
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|smp_flush_tlb_mm
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
suffix:semicolon
r_extern
r_void
id|smp_flush_tlb_range
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
suffix:semicolon
r_extern
r_void
id|smp_flush_tlb_kernel_range
c_func
(paren
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
suffix:semicolon
r_extern
r_void
id|smp_flush_tlb_page
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|page
)paren
suffix:semicolon
DECL|macro|flush_cache_all
mdefine_line|#define flush_cache_all()&t;smp_flush_cache_all()
DECL|macro|flush_tlb_all
mdefine_line|#define flush_tlb_all()&t;&t;smp_flush_tlb_all()
DECL|macro|flush_tlb_mm
mdefine_line|#define flush_tlb_mm(mm)&t;smp_flush_tlb_mm(mm)
DECL|macro|flush_tlb_range
mdefine_line|#define flush_tlb_range(vma, start, end) &bslash;&n;&t;smp_flush_tlb_range((vma)-&gt;vm_mm, start, end)
DECL|macro|flush_tlb_vpte_range
mdefine_line|#define flush_tlb_vpte_range(mm, start, end) &bslash;&n;&t;smp_flush_tlb_range(mm, start, end)
DECL|macro|flush_tlb_kernel_range
mdefine_line|#define flush_tlb_kernel_range(start, end) &bslash;&n;&t;smp_flush_tlb_kernel_range(start, end)
DECL|macro|flush_tlb_page
mdefine_line|#define flush_tlb_page(vma, page) &bslash;&n;&t;smp_flush_tlb_page((vma)-&gt;vm_mm, page)
DECL|macro|flush_tlb_vpte_page
mdefine_line|#define flush_tlb_vpte_page(mm, page) &bslash;&n;&t;smp_flush_tlb_page((mm), page)
macro_line|#endif /* ! CONFIG_SMP */
DECL|function|flush_tlb_pgtables
r_static
id|__inline__
r_void
id|flush_tlb_pgtables
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
(brace
multiline_comment|/* Note the signed type.  */
r_int
id|s
op_assign
id|start
comma
id|e
op_assign
id|end
comma
id|vpte_base
suffix:semicolon
r_if
c_cond
(paren
id|s
OG
id|e
)paren
multiline_comment|/* Nobody should call us with start below VM hole and end above.&n;&t;&t;   See if it is really true.  */
id|BUG
c_func
(paren
)paren
suffix:semicolon
macro_line|#if 0
multiline_comment|/* Currently free_pgtables guarantees this.  */
id|s
op_and_assign
id|PMD_MASK
suffix:semicolon
id|e
op_assign
(paren
id|e
op_plus
id|PMD_SIZE
op_minus
l_int|1
)paren
op_amp
id|PMD_MASK
suffix:semicolon
macro_line|#endif
id|vpte_base
op_assign
(paren
id|tlb_type
op_eq
id|spitfire
ques
c_cond
id|VPTE_BASE_SPITFIRE
suffix:colon
id|VPTE_BASE_CHEETAH
)paren
suffix:semicolon
id|flush_tlb_vpte_range
c_func
(paren
id|mm
comma
id|vpte_base
op_plus
(paren
id|s
op_rshift
(paren
id|PAGE_SHIFT
op_minus
l_int|3
)paren
)paren
comma
id|vpte_base
op_plus
(paren
id|e
op_rshift
(paren
id|PAGE_SHIFT
op_minus
l_int|3
)paren
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif /* _SPARC64_TLBFLUSH_H */
eof
