multiline_comment|/*&n; * Author: Pete Popov &lt;ppopov@mvista.com&gt;&n; *&n; * 2000 (c) MontaVista, Software, Inc.  This file is licensed under&n; * the terms of the GNU General Public License version 2.1.  This program&n; * is licensed &quot;as is&quot; without any warranty of any kind, whether express&n; * or implied.&n; *&n; * Data structures specific to the IBM PowerPC 405 on-chip DMA controller&n; * and API.&n; */
macro_line|#ifdef __KERNEL__
macro_line|#ifndef __ASMPPC_405_DMA_H
DECL|macro|__ASMPPC_405_DMA_H
mdefine_line|#define __ASMPPC_405_DMA_H
macro_line|#include &lt;linux/types.h&gt;
multiline_comment|/* #define DEBUG_405DMA */
DECL|macro|TRUE
mdefine_line|#define TRUE  1
DECL|macro|FALSE
mdefine_line|#define FALSE 0
DECL|macro|SGL_LIST_SIZE
mdefine_line|#define SGL_LIST_SIZE 4096
multiline_comment|/* #define PCI_ALLOC_IS_NONCONSISTENT */
DECL|macro|MAX_405GP_DMA_CHANNELS
mdefine_line|#define MAX_405GP_DMA_CHANNELS&t;4
multiline_comment|/* The maximum address that we can perform a DMA transfer to on this platform */
multiline_comment|/* Doesn&squot;t really apply... */
DECL|macro|MAX_DMA_ADDRESS
mdefine_line|#define MAX_DMA_ADDRESS&t;&t;0xFFFFFFFF
r_extern
r_int
r_int
id|ISA_DMA_THRESHOLD
suffix:semicolon
DECL|macro|dma_outb
mdefine_line|#define dma_outb&t;outb
DECL|macro|dma_inb
mdefine_line|#define dma_inb&t;&t;inb
multiline_comment|/* &n; * Function return status codes&n; * These values are used to indicate whether or not the function&n; * call was successful, or a bad/invalid parameter was passed.&n; */
DECL|macro|DMA_STATUS_GOOD
mdefine_line|#define DMA_STATUS_GOOD&t;&t;&t;0
DECL|macro|DMA_STATUS_BAD_CHANNEL
mdefine_line|#define DMA_STATUS_BAD_CHANNEL&t;&t;1
DECL|macro|DMA_STATUS_BAD_HANDLE
mdefine_line|#define DMA_STATUS_BAD_HANDLE&t;&t;2
DECL|macro|DMA_STATUS_BAD_MODE
mdefine_line|#define DMA_STATUS_BAD_MODE&t;&t;3
DECL|macro|DMA_STATUS_NULL_POINTER
mdefine_line|#define DMA_STATUS_NULL_POINTER&t;&t;4
DECL|macro|DMA_STATUS_OUT_OF_MEMORY
mdefine_line|#define DMA_STATUS_OUT_OF_MEMORY&t;5
DECL|macro|DMA_STATUS_SGL_LIST_EMPTY
mdefine_line|#define DMA_STATUS_SGL_LIST_EMPTY&t;6
DECL|macro|DMA_STATUS_GENERAL_ERROR
mdefine_line|#define DMA_STATUS_GENERAL_ERROR&t;7
multiline_comment|/*&n; * These indicate status as returned from the DMA Status Register.&n; */
DECL|macro|DMA_STATUS_NO_ERROR
mdefine_line|#define DMA_STATUS_NO_ERROR&t;0
DECL|macro|DMA_STATUS_CS
mdefine_line|#define DMA_STATUS_CS&t;&t;1&t;/* Count Status        */
DECL|macro|DMA_STATUS_TS
mdefine_line|#define DMA_STATUS_TS&t;&t;2&t;/* Transfer Status     */
DECL|macro|DMA_STATUS_DMA_ERROR
mdefine_line|#define DMA_STATUS_DMA_ERROR&t;3&t;/* DMA Error Occurred  */
DECL|macro|DMA_STATUS_DMA_BUSY
mdefine_line|#define DMA_STATUS_DMA_BUSY&t;4&t;/* The channel is busy */
multiline_comment|/*&n; * Transfer Modes&n; * These modes are defined in a way that makes it possible to&n; * simply &quot;or&quot; in the value in the control register.&n; */
DECL|macro|DMA_MODE_READ
mdefine_line|#define DMA_MODE_READ&t;&t;DMA_TD                /* Peripheral to Memory */
DECL|macro|DMA_MODE_WRITE
mdefine_line|#define DMA_MODE_WRITE&t;&t;0                     /* Memory to Peripheral */
DECL|macro|DMA_MODE_MM
mdefine_line|#define DMA_MODE_MM&t;&t;(SET_DMA_TM(TM_S_MM)) /* memory to memory */
multiline_comment|/* Device-paced memory to memory, */
multiline_comment|/* device is at source address    */
DECL|macro|DMA_MODE_MM_DEVATSRC
mdefine_line|#define DMA_MODE_MM_DEVATSRC&t;(DMA_TD | SET_DMA_TM(TM_D_MM))
multiline_comment|/* Device-paced memory to memory,      */
multiline_comment|/* device is at destination address    */
DECL|macro|DMA_MODE_MM_DEVATDST
mdefine_line|#define DMA_MODE_MM_DEVATDST&t;(SET_DMA_TM(TM_D_MM))
multiline_comment|/* &n; * DMA Polarity Configuration Register&n; */
DECL|macro|DMAReq0_ActiveLow
mdefine_line|#define DMAReq0_ActiveLow (1&lt;&lt;31)
DECL|macro|DMAAck0_ActiveLow
mdefine_line|#define DMAAck0_ActiveLow (1&lt;&lt;30)
DECL|macro|EOT0_ActiveLow
mdefine_line|#define EOT0_ActiveLow    (1&lt;&lt;29)           /* End of Transfer      */
DECL|macro|DMAReq1_ActiveLow
mdefine_line|#define DMAReq1_ActiveLow (1&lt;&lt;28)
DECL|macro|DMAAck1_ActiveLow
mdefine_line|#define DMAAck1_ActiveLow (1&lt;&lt;27)
DECL|macro|EOT1_ActiveLow
mdefine_line|#define EOT1_ActiveLow    (1&lt;&lt;26)
DECL|macro|DMAReq2_ActiveLow
mdefine_line|#define DMAReq2_ActiveLow (1&lt;&lt;25)
DECL|macro|DMAAck2_ActiveLow
mdefine_line|#define DMAAck2_ActiveLow (1&lt;&lt;24)
DECL|macro|EOT2_ActiveLow
mdefine_line|#define EOT2_ActiveLow    (1&lt;&lt;23)
DECL|macro|DMAReq3_ActiveLow
mdefine_line|#define DMAReq3_ActiveLow (1&lt;&lt;22)
DECL|macro|DMAAck3_ActiveLow
mdefine_line|#define DMAAck3_ActiveLow (1&lt;&lt;21)
DECL|macro|EOT3_ActiveLow
mdefine_line|#define EOT3_ActiveLow    (1&lt;&lt;20)
multiline_comment|/*&n; * DMA Sleep Mode Register&n; */
DECL|macro|SLEEP_MODE_ENABLE
mdefine_line|#define SLEEP_MODE_ENABLE (1&lt;&lt;21)
multiline_comment|/*&n; * DMA Status Register&n; */
DECL|macro|DMA_CS0
mdefine_line|#define DMA_CS0           (1&lt;&lt;31) /* Terminal Count has been reached */
DECL|macro|DMA_CS1
mdefine_line|#define DMA_CS1           (1&lt;&lt;30)
DECL|macro|DMA_CS2
mdefine_line|#define DMA_CS2           (1&lt;&lt;29)
DECL|macro|DMA_CS3
mdefine_line|#define DMA_CS3           (1&lt;&lt;28)
DECL|macro|DMA_TS0
mdefine_line|#define DMA_TS0           (1&lt;&lt;27) /* End of Transfer has been requested */
DECL|macro|DMA_TS1
mdefine_line|#define DMA_TS1           (1&lt;&lt;26) 
DECL|macro|DMA_TS2
mdefine_line|#define DMA_TS2           (1&lt;&lt;25)  
DECL|macro|DMA_TS3
mdefine_line|#define DMA_TS3           (1&lt;&lt;24)   
DECL|macro|DMA_CH0_ERR
mdefine_line|#define DMA_CH0_ERR       (1&lt;&lt;23) /* DMA Chanel 0 Error */
DECL|macro|DMA_CH1_ERR
mdefine_line|#define DMA_CH1_ERR       (1&lt;&lt;22) 
DECL|macro|DMA_CH2_ERR
mdefine_line|#define DMA_CH2_ERR       (1&lt;&lt;21) 
DECL|macro|DMA_CH3_ERR
mdefine_line|#define DMA_CH3_ERR       (1&lt;&lt;20) 
DECL|macro|DMA_IN_DMA_REQ0
mdefine_line|#define DMA_IN_DMA_REQ0   (1&lt;&lt;19) /* Internal DMA Request is pending */
DECL|macro|DMA_IN_DMA_REQ1
mdefine_line|#define DMA_IN_DMA_REQ1   (1&lt;&lt;18)
DECL|macro|DMA_IN_DMA_REQ2
mdefine_line|#define DMA_IN_DMA_REQ2   (1&lt;&lt;17)
DECL|macro|DMA_IN_DMA_REQ3
mdefine_line|#define DMA_IN_DMA_REQ3   (1&lt;&lt;16)
DECL|macro|DMA_EXT_DMA_REQ0
mdefine_line|#define DMA_EXT_DMA_REQ0  (1&lt;&lt;15) /* External DMA Request is pending */
DECL|macro|DMA_EXT_DMA_REQ1
mdefine_line|#define DMA_EXT_DMA_REQ1  (1&lt;&lt;14)
DECL|macro|DMA_EXT_DMA_REQ2
mdefine_line|#define DMA_EXT_DMA_REQ2  (1&lt;&lt;13)
DECL|macro|DMA_EXT_DMA_REQ3
mdefine_line|#define DMA_EXT_DMA_REQ3  (1&lt;&lt;12)
DECL|macro|DMA_CH0_BUSY
mdefine_line|#define DMA_CH0_BUSY      (1&lt;&lt;11) /* DMA Channel 0 Busy */
DECL|macro|DMA_CH1_BUSY
mdefine_line|#define DMA_CH1_BUSY      (1&lt;&lt;10)  
DECL|macro|DMA_CH2_BUSY
mdefine_line|#define DMA_CH2_BUSY       (1&lt;&lt;9)  
DECL|macro|DMA_CH3_BUSY
mdefine_line|#define DMA_CH3_BUSY       (1&lt;&lt;8)  
DECL|macro|DMA_SG0
mdefine_line|#define DMA_SG0            (1&lt;&lt;7) /* DMA Channel 0 Scatter/Gather in progress */
DECL|macro|DMA_SG1
mdefine_line|#define DMA_SG1            (1&lt;&lt;6) 
DECL|macro|DMA_SG2
mdefine_line|#define DMA_SG2            (1&lt;&lt;5) 
DECL|macro|DMA_SG3
mdefine_line|#define DMA_SG3            (1&lt;&lt;4) 
multiline_comment|/*&n; * DMA Channel Control Registers&n; */
DECL|macro|DMA_CH_ENABLE
mdefine_line|#define DMA_CH_ENABLE         (1&lt;&lt;31)     /* DMA Channel Enable */
DECL|macro|SET_DMA_CH_ENABLE
mdefine_line|#define SET_DMA_CH_ENABLE(x)  (((x)&amp;0x1)&lt;&lt;31)
DECL|macro|GET_DMA_CH_ENABLE
mdefine_line|#define GET_DMA_CH_ENABLE(x)  (((x)&amp;DMA_CH_ENABLE)&gt;&gt;31)
DECL|macro|DMA_CIE_ENABLE
mdefine_line|#define DMA_CIE_ENABLE        (1&lt;&lt;30)     /* DMA Channel Interrupt Enable */
DECL|macro|SET_DMA_CIE_ENABLE
mdefine_line|#define SET_DMA_CIE_ENABLE(x) (((x)&amp;0x1)&lt;&lt;30)
DECL|macro|GET_DMA_CIE_ENABLE
mdefine_line|#define GET_DMA_CIE_ENABLE(x) (((x)&amp;DMA_CIE_ENABLE)&gt;&gt;30)
DECL|macro|DMA_TD
mdefine_line|#define DMA_TD                (1&lt;&lt;29)      
DECL|macro|SET_DMA_TD
mdefine_line|#define SET_DMA_TD(x)         (((x)&amp;0x1)&lt;&lt;29)
DECL|macro|GET_DMA_TD
mdefine_line|#define GET_DMA_TD(x)         (((x)&amp;DMA_TD)&gt;&gt;29)
DECL|macro|DMA_PL
mdefine_line|#define DMA_PL                (1&lt;&lt;28)     /* Peripheral Location */
DECL|macro|SET_DMA_PL
mdefine_line|#define SET_DMA_PL(x)         (((x)&amp;0x1)&lt;&lt;28)
DECL|macro|GET_DMA_PL
mdefine_line|#define GET_DMA_PL(x)         (((x)&amp;DMA_PL)&gt;&gt;28)
DECL|macro|EXTERNAL_PERIPHERAL
mdefine_line|#define EXTERNAL_PERIPHERAL    0
DECL|macro|INTERNAL_PERIPHERAL
mdefine_line|#define INTERNAL_PERIPHERAL    1
DECL|macro|SET_DMA_PW
mdefine_line|#define SET_DMA_PW(x)     (((x)&amp;0x3)&lt;&lt;26) /* Peripheral Width */
DECL|macro|DMA_PW_MASK
mdefine_line|#define DMA_PW_MASK       SET_DMA_PW(3)
DECL|macro|PW_8
mdefine_line|#define   PW_8                 0
DECL|macro|PW_16
mdefine_line|#define   PW_16                1
DECL|macro|PW_32
mdefine_line|#define   PW_32                2
DECL|macro|PW_64
mdefine_line|#define   PW_64                3
DECL|macro|GET_DMA_PW
mdefine_line|#define GET_DMA_PW(x)     (((x)&amp;DMA_PW_MASK)&gt;&gt;26)
DECL|macro|DMA_DAI
mdefine_line|#define DMA_DAI           (1&lt;&lt;25)         /* Destination Address Increment */
DECL|macro|SET_DMA_DAI
mdefine_line|#define SET_DMA_DAI(x)    (((x)&amp;0x1)&lt;&lt;25)
DECL|macro|DMA_SAI
mdefine_line|#define DMA_SAI           (1&lt;&lt;24)         /* Source Address Increment */
DECL|macro|SET_DMA_SAI
mdefine_line|#define SET_DMA_SAI(x)    (((x)&amp;0x1)&lt;&lt;24)
DECL|macro|DMA_BEN
mdefine_line|#define DMA_BEN           (1&lt;&lt;23)         /* Buffer Enable */
DECL|macro|SET_DMA_BEN
mdefine_line|#define SET_DMA_BEN(x)    (((x)&amp;0x1)&lt;&lt;23)
DECL|macro|SET_DMA_TM
mdefine_line|#define SET_DMA_TM(x)     (((x)&amp;0x3)&lt;&lt;21) /* Transfer Mode */
DECL|macro|DMA_TM_MASK
mdefine_line|#define DMA_TM_MASK       SET_DMA_TM(3)
DECL|macro|TM_PERIPHERAL
mdefine_line|#define   TM_PERIPHERAL        0          /* Peripheral */
DECL|macro|TM_RESERVED
mdefine_line|#define   TM_RESERVED          1          /* Reserved */
DECL|macro|TM_S_MM
mdefine_line|#define   TM_S_MM              2          /* Memory to Memory */
DECL|macro|TM_D_MM
mdefine_line|#define   TM_D_MM              3          /* Device Paced Memory to Memory */
DECL|macro|GET_DMA_TM
mdefine_line|#define GET_DMA_TM(x)     (((x)&amp;DMA_TM_MASK)&gt;&gt;21)
DECL|macro|SET_DMA_PSC
mdefine_line|#define SET_DMA_PSC(x)    (((x)&amp;0x3)&lt;&lt;19) /* Peripheral Setup Cycles */
DECL|macro|DMA_PSC_MASK
mdefine_line|#define DMA_PSC_MASK      SET_DMA_PSC(3)
DECL|macro|GET_DMA_PSC
mdefine_line|#define GET_DMA_PSC(x)    (((x)&amp;DMA_PSC_MASK)&gt;&gt;19)
DECL|macro|SET_DMA_PWC
mdefine_line|#define SET_DMA_PWC(x)    (((x)&amp;0x3F)&lt;&lt;13) /* Peripheral Wait Cycles */
DECL|macro|DMA_PWC_MASK
mdefine_line|#define DMA_PWC_MASK      SET_DMA_PWC(0x3F)
DECL|macro|GET_DMA_PWC
mdefine_line|#define GET_DMA_PWC(x)    (((x)&amp;DMA_PWC_MASK)&gt;&gt;13)
DECL|macro|SET_DMA_PHC
mdefine_line|#define SET_DMA_PHC(x)    (((x)&amp;0x7)&lt;&lt;10) /* Peripheral Hold Cycles */
DECL|macro|DMA_PHC_MASK
mdefine_line|#define DMA_PHC_MASK      SET_DMA_PHC(0x7)
DECL|macro|GET_DMA_PHC
mdefine_line|#define GET_DMA_PHC(x)    (((x)&amp;DMA_PHC_MASK)&gt;&gt;10)
DECL|macro|DMA_ETD_OUTPUT
mdefine_line|#define DMA_ETD_OUTPUT     (1&lt;&lt;9)         /* EOT pin is a TC output */
DECL|macro|SET_DMA_ETD
mdefine_line|#define SET_DMA_ETD(x)     (((x)&amp;0x1)&lt;&lt;9)
DECL|macro|DMA_TCE_ENABLE
mdefine_line|#define DMA_TCE_ENABLE     (1&lt;&lt;8)
DECL|macro|SET_DMA_TCE
mdefine_line|#define SET_DMA_TCE(x)     (((x)&amp;0x1)&lt;&lt;8)
DECL|macro|SET_DMA_PRIORITY
mdefine_line|#define SET_DMA_PRIORITY(x)   (((x)&amp;0x3)&lt;&lt;6)   /* DMA Channel Priority */
DECL|macro|DMA_PRIORITY_MASK
mdefine_line|#define DMA_PRIORITY_MASK SET_DMA_PRIORITY(3)
DECL|macro|PRIORITY_LOW
mdefine_line|#define   PRIORITY_LOW         0 
DECL|macro|PRIORITY_MID_LOW
mdefine_line|#define   PRIORITY_MID_LOW     1
DECL|macro|PRIORITY_MID_HIGH
mdefine_line|#define   PRIORITY_MID_HIGH    2
DECL|macro|PRIORITY_HIGH
mdefine_line|#define   PRIORITY_HIGH        3
DECL|macro|GET_DMA_PRIORITY
mdefine_line|#define GET_DMA_PRIORITY(x) (((x)&amp;DMA_PRIORITY_MASK)&gt;&gt;6)
DECL|macro|SET_DMA_PREFETCH
mdefine_line|#define SET_DMA_PREFETCH(x)   (((x)&amp;0x3)&lt;&lt;4)  /* Memory Read Prefetch */
DECL|macro|DMA_PREFETCH_MASK
mdefine_line|#define DMA_PREFETCH_MASK      SET_DMA_PREFETCH(3)
DECL|macro|PREFETCH_1
mdefine_line|#define   PREFETCH_1           0              /* Prefetch 1 Double Word */
DECL|macro|PREFETCH_2
mdefine_line|#define   PREFETCH_2           1
DECL|macro|PREFETCH_4
mdefine_line|#define   PREFETCH_4           2
DECL|macro|GET_DMA_PREFETCH
mdefine_line|#define GET_DMA_PREFETCH(x) (((x)&amp;DMA_PREFETCH_MASK)&gt;&gt;4)
DECL|macro|DMA_PCE
mdefine_line|#define DMA_PCE            (1&lt;&lt;3)         /* Parity Check Enable */
DECL|macro|SET_DMA_PCE
mdefine_line|#define SET_DMA_PCE(x)     (((x)&amp;0x1)&lt;&lt;3)
DECL|macro|GET_DMA_PCE
mdefine_line|#define GET_DMA_PCE(x)     (((x)&amp;DMA_PCE)&gt;&gt;3)
DECL|macro|DMA_DEC
mdefine_line|#define DMA_DEC            (1&lt;&lt;2)         /* Address Decrement */
DECL|macro|SET_DMA_DEC
mdefine_line|#define SET_DMA_DEC(x)     (((x)&amp;0x1)&lt;&lt;2)
DECL|macro|GET_DMA_DEC
mdefine_line|#define GET_DMA_DEC(x)     (((x)&amp;DMA_DEC)&gt;&gt;2)
multiline_comment|/*&n; * DMA SG Command Register&n; */
DECL|macro|SSG0_ENABLE
mdefine_line|#define SSG0_ENABLE        (1&lt;&lt;31)        /* Start Scatter Gather */
DECL|macro|SSG1_ENABLE
mdefine_line|#define SSG1_ENABLE        (1&lt;&lt;30)
DECL|macro|SSG2_ENABLE
mdefine_line|#define SSG2_ENABLE        (1&lt;&lt;29)
DECL|macro|SSG3_ENABLE
mdefine_line|#define SSG3_ENABLE        (1&lt;&lt;28)
DECL|macro|SSG0_MASK_ENABLE
mdefine_line|#define SSG0_MASK_ENABLE   (1&lt;&lt;15)        /* Enable writing to SSG0 bit */
DECL|macro|SSG1_MASK_ENABLE
mdefine_line|#define SSG1_MASK_ENABLE   (1&lt;&lt;14)   
DECL|macro|SSG2_MASK_ENABLE
mdefine_line|#define SSG2_MASK_ENABLE   (1&lt;&lt;13)  
DECL|macro|SSG3_MASK_ENABLE
mdefine_line|#define SSG3_MASK_ENABLE   (1&lt;&lt;12) 
multiline_comment|/*&n; * DMA Scatter/Gather Descriptor Bit fields &n; */
DECL|macro|SG_LINK
mdefine_line|#define SG_LINK            (1&lt;&lt;31)        /* Link */
DECL|macro|SG_TCI_ENABLE
mdefine_line|#define SG_TCI_ENABLE      (1&lt;&lt;29)        /* Enable Terminal Count Interrupt */
DECL|macro|SG_ETI_ENABLE
mdefine_line|#define SG_ETI_ENABLE      (1&lt;&lt;28)        /* Enable End of Transfer Interrupt */
DECL|macro|SG_ERI_ENABLE
mdefine_line|#define SG_ERI_ENABLE      (1&lt;&lt;27)        /* Enable Error Interrupt */
DECL|macro|SG_COUNT_MASK
mdefine_line|#define SG_COUNT_MASK       0xFFFF        /* Count Field */
DECL|typedef|sgl_handle_t
r_typedef
r_uint32
id|sgl_handle_t
suffix:semicolon
r_typedef
r_struct
(brace
multiline_comment|/* &n;&t; * Valid polarity settings:&n;&t; *   DMAReq0_ActiveLow&n;&t; *   DMAAck0_ActiveLow&n;&t; *   EOT0_ActiveLow&n;&t; *&n;&t; *   DMAReq1_ActiveLow&n;&t; *   DMAAck1_ActiveLow&n;&t; *   EOT1_ActiveLow&n;&t; * &n;&t; *   DMAReq2_ActiveLow&n;&t; *   DMAAck2_ActiveLow&n;&t; *   EOT2_ActiveLow&n;&t; *&n;&t; *   DMAReq3_ActiveLow &n;&t; *   DMAAck3_ActiveLow&n;&t; *   EOT3_ActiveLow&n;&t; */
DECL|member|polarity
r_int
r_int
id|polarity
suffix:semicolon
DECL|member|buffer_enable
r_char
id|buffer_enable
suffix:semicolon
multiline_comment|/* Boolean: buffer enable            */
DECL|member|tce_enable
r_char
id|tce_enable
suffix:semicolon
multiline_comment|/* Boolean: terminal count enable    */
DECL|member|etd_output
r_char
id|etd_output
suffix:semicolon
multiline_comment|/* Boolean: eot pin is a tc output   */
DECL|member|pce
r_char
id|pce
suffix:semicolon
multiline_comment|/* Boolean: parity check enable      */
multiline_comment|/*&n;&t; * Peripheral location:&n;&t; * INTERNAL_PERIPHERAL (UART0 on the 405GP)&n;&t; * EXTERNAL_PERIPHERAL&n;&t; */
DECL|member|pl
r_char
id|pl
suffix:semicolon
multiline_comment|/* internal/external peripheral      */
multiline_comment|/*&n;&t; * Valid pwidth settings:&n;&t; *   PW_8&n;&t; *   PW_16&n;&t; *   PW_32&n;&t; *   PW_64&n;&t; */
DECL|member|pwidth
r_int
r_int
id|pwidth
suffix:semicolon
DECL|member|dai
r_char
id|dai
suffix:semicolon
multiline_comment|/* Boolean: dst address increment   */
DECL|member|sai
r_char
id|sai
suffix:semicolon
multiline_comment|/* Boolean: src address increment   */
multiline_comment|/*&n;&t; * Valid psc settings: 0-3&n;&t; */
DECL|member|psc
r_int
r_int
id|psc
suffix:semicolon
multiline_comment|/* Peripheral Setup Cycles         */
multiline_comment|/*&n;&t; * Valid pwc settings:&n;&t; * 0-63&n;&t; */
DECL|member|pwc
r_int
r_int
id|pwc
suffix:semicolon
multiline_comment|/* Peripheral Wait Cycles          */
multiline_comment|/*&n;&t; * Valid phc settings:&n;&t; * 0-7&n;&t; */
DECL|member|phc
r_int
r_int
id|phc
suffix:semicolon
multiline_comment|/* Peripheral Hold Cycles          */
multiline_comment|/*&n;&t; * Valid cp (channel priority) settings:&n;&t; *   PRIORITY_LOW&n;&t; *   PRIORITY_MID_LOW&n;&t; *   PRIORITY_MID_HIGH&n;&t; *   PRIORITY_HIGH&n;&t; */
DECL|member|cp
r_int
r_int
id|cp
suffix:semicolon
multiline_comment|/* channel priority                */
multiline_comment|/*&n;&t; * Valid pf (memory read prefetch) settings:&n;&t; *&n;&t; *   PREFETCH_1&n;&t; *   PREFETCH_2&n;&t; *   PREFETCH_4&n;&t; */
DECL|member|pf
r_int
r_int
id|pf
suffix:semicolon
multiline_comment|/* memory read prefetch            */
multiline_comment|/*&n;&t; * Boolean: channel interrupt enable&n;&t; * NOTE: for sgl transfers, only the last descriptor will be setup to&n;&t; * interrupt.&n;&t; */
DECL|member|int_enable
r_char
id|int_enable
suffix:semicolon
DECL|member|shift
r_char
id|shift
suffix:semicolon
multiline_comment|/* easy access to byte_count shift, based on */
multiline_comment|/* the width of the channel                  */
DECL|member|control
r_uint32
id|control
suffix:semicolon
multiline_comment|/* channel control word                      */
multiline_comment|/* These variabled are used ONLY in single dma transfers              */
DECL|member|mode
r_int
r_int
id|mode
suffix:semicolon
multiline_comment|/* transfer mode                     */
DECL|member|addr
id|dma_addr_t
id|addr
suffix:semicolon
DECL|typedef|ppc_dma_ch_t
)brace
id|ppc_dma_ch_t
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|control
r_uint32
id|control
suffix:semicolon
DECL|member|src_addr
r_uint32
id|src_addr
suffix:semicolon
DECL|member|dst_addr
r_uint32
id|dst_addr
suffix:semicolon
DECL|member|control_count
r_uint32
id|control_count
suffix:semicolon
DECL|member|next
r_uint32
id|next
suffix:semicolon
DECL|typedef|ppc_sgl_t
)brace
id|ppc_sgl_t
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|dmanr
r_int
r_int
id|dmanr
suffix:semicolon
DECL|member|control
r_uint32
id|control
suffix:semicolon
multiline_comment|/* channel ctrl word; loaded from each descrptr */
DECL|member|sgl_control
r_uint32
id|sgl_control
suffix:semicolon
multiline_comment|/* LK, TCI, ETI, and ERI bits in sgl descriptor */
DECL|member|dma_addr
id|dma_addr_t
id|dma_addr
suffix:semicolon
multiline_comment|/* dma (physical) address of this list          */
DECL|member|phead
id|ppc_sgl_t
op_star
id|phead
suffix:semicolon
DECL|member|ptail
id|ppc_sgl_t
op_star
id|ptail
suffix:semicolon
DECL|typedef|sgl_list_info_t
)brace
id|sgl_list_info_t
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|src_addr
r_int
r_int
op_star
id|src_addr
suffix:semicolon
DECL|member|dst_addr
r_int
r_int
op_star
id|dst_addr
suffix:semicolon
DECL|member|dma_src_addr
id|dma_addr_t
id|dma_src_addr
suffix:semicolon
DECL|member|dma_dst_addr
id|dma_addr_t
id|dma_dst_addr
suffix:semicolon
DECL|typedef|pci_alloc_desc_t
)brace
id|pci_alloc_desc_t
suffix:semicolon
r_extern
id|ppc_dma_ch_t
id|dma_channels
(braket
)braket
suffix:semicolon
multiline_comment|/*&n; *&n; * DMA API inline functions&n; * These functions are implemented here as inline functions for&n; * performance reasons.&n; *&n; */
DECL|function|get_405gp_dma_status
r_static
id|__inline__
r_int
id|get_405gp_dma_status
c_func
(paren
r_void
)paren
(brace
r_return
(paren
id|mfdcr
c_func
(paren
id|DCRN_DMASR
)paren
)paren
suffix:semicolon
)brace
DECL|function|enable_405gp_dma
r_static
id|__inline__
r_int
id|enable_405gp_dma
c_func
(paren
r_int
r_int
id|dmanr
)paren
(brace
r_int
r_int
id|control
suffix:semicolon
id|ppc_dma_ch_t
op_star
id|p_dma_ch
op_assign
op_amp
id|dma_channels
(braket
id|dmanr
)braket
suffix:semicolon
macro_line|#ifdef DEBUG_405DMA
r_if
c_cond
(paren
id|dmanr
op_ge
id|MAX_405GP_DMA_CHANNELS
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;enable_dma: bad channel: %d&bslash;n&quot;
comma
id|dmanr
)paren
suffix:semicolon
r_return
id|DMA_STATUS_BAD_CHANNEL
suffix:semicolon
)brace
macro_line|#endif
r_switch
c_cond
(paren
id|dmanr
)paren
(brace
r_case
l_int|0
suffix:colon
r_if
c_cond
(paren
id|p_dma_ch-&gt;mode
op_eq
id|DMA_MODE_READ
)paren
(brace
multiline_comment|/* peripheral to memory */
id|mtdcr
c_func
(paren
id|DCRN_DMASA0
comma
l_int|NULL
)paren
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMADA0
comma
id|p_dma_ch-&gt;addr
)paren
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|p_dma_ch-&gt;mode
op_eq
id|DMA_MODE_WRITE
)paren
(brace
multiline_comment|/* memory to peripheral */
id|mtdcr
c_func
(paren
id|DCRN_DMASA0
comma
id|p_dma_ch-&gt;addr
)paren
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMADA0
comma
l_int|NULL
)paren
suffix:semicolon
)brace
multiline_comment|/* for other xfer modes, the addresses are already set */
id|control
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACR0
)paren
suffix:semicolon
id|control
op_and_assign
op_complement
(paren
id|DMA_TM_MASK
op_or
id|DMA_TD
)paren
suffix:semicolon
multiline_comment|/* clear all mode bits */
id|control
op_or_assign
(paren
id|p_dma_ch-&gt;mode
op_or
id|DMA_CH_ENABLE
)paren
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMACR0
comma
id|control
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
r_if
c_cond
(paren
id|p_dma_ch-&gt;mode
op_eq
id|DMA_MODE_READ
)paren
(brace
id|mtdcr
c_func
(paren
id|DCRN_DMASA1
comma
l_int|NULL
)paren
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMADA1
comma
id|p_dma_ch-&gt;addr
)paren
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|p_dma_ch-&gt;mode
op_eq
id|DMA_MODE_WRITE
)paren
(brace
id|mtdcr
c_func
(paren
id|DCRN_DMASA1
comma
id|p_dma_ch-&gt;addr
)paren
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMADA1
comma
l_int|NULL
)paren
suffix:semicolon
)brace
id|control
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACR1
)paren
suffix:semicolon
id|control
op_and_assign
op_complement
(paren
id|DMA_TM_MASK
op_or
id|DMA_TD
)paren
suffix:semicolon
id|control
op_or_assign
(paren
id|p_dma_ch-&gt;mode
op_or
id|DMA_CH_ENABLE
)paren
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMACR1
comma
id|control
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
r_if
c_cond
(paren
id|p_dma_ch-&gt;mode
op_eq
id|DMA_MODE_READ
)paren
(brace
id|mtdcr
c_func
(paren
id|DCRN_DMASA2
comma
l_int|NULL
)paren
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMADA2
comma
id|p_dma_ch-&gt;addr
)paren
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|p_dma_ch-&gt;mode
op_eq
id|DMA_MODE_WRITE
)paren
(brace
id|mtdcr
c_func
(paren
id|DCRN_DMASA2
comma
id|p_dma_ch-&gt;addr
)paren
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMADA2
comma
l_int|NULL
)paren
suffix:semicolon
)brace
id|control
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACR2
)paren
suffix:semicolon
id|control
op_and_assign
op_complement
(paren
id|DMA_TM_MASK
op_or
id|DMA_TD
)paren
suffix:semicolon
id|control
op_or_assign
(paren
id|p_dma_ch-&gt;mode
op_or
id|DMA_CH_ENABLE
)paren
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMACR2
comma
id|control
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|3
suffix:colon
r_if
c_cond
(paren
id|p_dma_ch-&gt;mode
op_eq
id|DMA_MODE_READ
)paren
(brace
id|mtdcr
c_func
(paren
id|DCRN_DMASA3
comma
l_int|NULL
)paren
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMADA3
comma
id|p_dma_ch-&gt;addr
)paren
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|p_dma_ch-&gt;mode
op_eq
id|DMA_MODE_WRITE
)paren
(brace
id|mtdcr
c_func
(paren
id|DCRN_DMASA3
comma
id|p_dma_ch-&gt;addr
)paren
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMADA3
comma
l_int|NULL
)paren
suffix:semicolon
)brace
id|control
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACR3
)paren
suffix:semicolon
id|control
op_and_assign
op_complement
(paren
id|DMA_TM_MASK
op_or
id|DMA_TD
)paren
suffix:semicolon
id|control
op_or_assign
(paren
id|p_dma_ch-&gt;mode
op_or
id|DMA_CH_ENABLE
)paren
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMACR3
comma
id|control
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
r_return
id|DMA_STATUS_BAD_CHANNEL
suffix:semicolon
)brace
r_return
id|DMA_STATUS_GOOD
suffix:semicolon
)brace
DECL|function|disable_405gp_dma
r_static
id|__inline__
r_void
id|disable_405gp_dma
c_func
(paren
r_int
r_int
id|dmanr
)paren
(brace
r_int
r_int
id|control
suffix:semicolon
r_switch
c_cond
(paren
id|dmanr
)paren
(brace
r_case
l_int|0
suffix:colon
id|control
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACR0
)paren
suffix:semicolon
id|control
op_and_assign
op_complement
id|DMA_CH_ENABLE
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMACR0
comma
id|control
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
id|control
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACR1
)paren
suffix:semicolon
id|control
op_and_assign
op_complement
id|DMA_CH_ENABLE
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMACR1
comma
id|control
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|control
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACR2
)paren
suffix:semicolon
id|control
op_and_assign
op_complement
id|DMA_CH_ENABLE
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMACR2
comma
id|control
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|3
suffix:colon
id|control
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACR3
)paren
suffix:semicolon
id|control
op_and_assign
op_complement
id|DMA_CH_ENABLE
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMACR3
comma
id|control
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
macro_line|#ifdef DEBUG_405DMA
id|printk
c_func
(paren
l_string|&quot;disable_dma: bad channel: %d&bslash;n&quot;
comma
id|dmanr
)paren
suffix:semicolon
macro_line|#endif
)brace
)brace
multiline_comment|/*&n; * Sets the dma mode for single DMA transfers only.&n; * For scatter/gather transfers, the mode is passed to the&n; * alloc_dma_handle() function as one of the parameters.&n; *&n; * The mode is simply saved and used later.  This allows&n; * the driver to call set_dma_mode() and set_dma_addr() in&n; * any order.&n; *&n; * Valid mode values are:&n; *&n; * DMA_MODE_READ          peripheral to memory &n; * DMA_MODE_WRITE         memory to peripheral&n; * DMA_MODE_MM            memory to memory&n; * DMA_MODE_MM_DEVATSRC   device-paced memory to memory, device at src&n; * DMA_MODE_MM_DEVATDST   device-paced memory to memory, device at dst&n; */
DECL|function|set_405gp_dma_mode
r_static
id|__inline__
r_int
id|set_405gp_dma_mode
c_func
(paren
r_int
r_int
id|dmanr
comma
r_int
r_int
id|mode
)paren
(brace
id|ppc_dma_ch_t
op_star
id|p_dma_ch
op_assign
op_amp
id|dma_channels
(braket
id|dmanr
)braket
suffix:semicolon
macro_line|#ifdef DEBUG_405DMA
r_switch
c_cond
(paren
id|mode
)paren
(brace
r_case
id|DMA_MODE_READ
suffix:colon
r_case
id|DMA_MODE_WRITE
suffix:colon
r_case
id|DMA_MODE_MM
suffix:colon
r_case
id|DMA_MODE_MM_DEVATSRC
suffix:colon
r_case
id|DMA_MODE_MM_DEVATDST
suffix:colon
r_break
suffix:semicolon
r_default
suffix:colon
id|printk
c_func
(paren
l_string|&quot;set_dma_mode: bad mode 0x%x&bslash;n&quot;
comma
id|mode
)paren
suffix:semicolon
r_return
id|DMA_STATUS_BAD_MODE
suffix:semicolon
)brace
r_if
c_cond
(paren
id|dmanr
op_ge
id|MAX_405GP_DMA_CHANNELS
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;set_dma_mode: bad channel 0x%x&bslash;n&quot;
comma
id|dmanr
)paren
suffix:semicolon
r_return
id|DMA_STATUS_BAD_CHANNEL
suffix:semicolon
)brace
macro_line|#endif
id|p_dma_ch-&gt;mode
op_assign
id|mode
suffix:semicolon
r_return
id|DMA_STATUS_GOOD
suffix:semicolon
)brace
multiline_comment|/*&n; * Sets the DMA Count register. Note that &squot;count&squot; is in bytes.&n; * However, the DMA Count register counts the number of &quot;transfers&quot;,&n; * where each transfer is equal to the bus width.  Thus, count&n; * MUST be a multiple of the bus width.&n; */
r_static
id|__inline__
r_void
DECL|function|set_405gp_dma_count
id|set_405gp_dma_count
c_func
(paren
r_int
r_int
id|dmanr
comma
r_int
r_int
id|count
)paren
(brace
id|ppc_dma_ch_t
op_star
id|p_dma_ch
op_assign
op_amp
id|dma_channels
(braket
id|dmanr
)braket
suffix:semicolon
macro_line|#ifdef DEBUG_405DMA
(brace
r_int
id|error
op_assign
l_int|0
suffix:semicolon
r_switch
c_cond
(paren
id|p_dma_ch-&gt;pwidth
)paren
(brace
r_case
id|PW_8
suffix:colon
r_break
suffix:semicolon
r_case
id|PW_16
suffix:colon
r_if
c_cond
(paren
id|count
op_amp
l_int|0x1
)paren
id|error
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_case
id|PW_32
suffix:colon
r_if
c_cond
(paren
id|count
op_amp
l_int|0x3
)paren
id|error
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_case
id|PW_64
suffix:colon
r_if
c_cond
(paren
id|count
op_amp
l_int|0x7
)paren
id|error
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|printk
c_func
(paren
l_string|&quot;set_dma_count: invalid bus width: 0x%x&bslash;n&quot;
comma
id|p_dma_ch-&gt;pwidth
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_if
c_cond
(paren
id|error
)paren
id|printk
c_func
(paren
l_string|&quot;Warning: set_dma_count count 0x%x bus width %d&bslash;n&quot;
comma
id|count
comma
id|p_dma_ch-&gt;pwidth
)paren
suffix:semicolon
)brace
macro_line|#endif
id|count
op_assign
id|count
op_rshift
id|p_dma_ch-&gt;shift
suffix:semicolon
r_switch
c_cond
(paren
id|dmanr
)paren
(brace
r_case
l_int|0
suffix:colon
id|mtdcr
c_func
(paren
id|DCRN_DMACT0
comma
id|count
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
id|mtdcr
c_func
(paren
id|DCRN_DMACT1
comma
id|count
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|mtdcr
c_func
(paren
id|DCRN_DMACT2
comma
id|count
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|3
suffix:colon
id|mtdcr
c_func
(paren
id|DCRN_DMACT3
comma
id|count
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
macro_line|#ifdef DEBUG_405DMA
id|printk
c_func
(paren
l_string|&quot;set_dma_count: bad channel: %d&bslash;n&quot;
comma
id|dmanr
)paren
suffix:semicolon
macro_line|#endif
)brace
)brace
multiline_comment|/*&n; *   Returns the number of bytes left to be transfered.&n; *   After a DMA transfer, this should return zero.&n; *   Reading this while a DMA transfer is still in progress will return&n; *   unpredictable results.&n; */
DECL|function|get_405gp_dma_residue
r_static
id|__inline__
r_int
id|get_405gp_dma_residue
c_func
(paren
r_int
r_int
id|dmanr
)paren
(brace
r_int
r_int
id|count
suffix:semicolon
id|ppc_dma_ch_t
op_star
id|p_dma_ch
op_assign
op_amp
id|dma_channels
(braket
id|dmanr
)braket
suffix:semicolon
r_switch
c_cond
(paren
id|dmanr
)paren
(brace
r_case
l_int|0
suffix:colon
id|count
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACT0
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
id|count
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACT1
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|count
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACT2
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|3
suffix:colon
id|count
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACT3
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
macro_line|#ifdef DEBUG_405DMA
id|printk
c_func
(paren
l_string|&quot;get_dma_residue: bad channel: %d&bslash;n&quot;
comma
id|dmanr
)paren
suffix:semicolon
macro_line|#endif
r_return
l_int|0
suffix:semicolon
)brace
r_return
(paren
id|count
op_lshift
id|p_dma_ch-&gt;shift
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Sets the DMA address for a memory to peripheral or peripheral&n; * to memory transfer.  The address is just saved in the channel&n; * structure for now and used later in enable_dma().&n; */
DECL|function|set_405gp_dma_addr
r_static
id|__inline__
r_void
id|set_405gp_dma_addr
c_func
(paren
r_int
r_int
id|dmanr
comma
id|dma_addr_t
id|addr
)paren
(brace
id|ppc_dma_ch_t
op_star
id|p_dma_ch
op_assign
op_amp
id|dma_channels
(braket
id|dmanr
)braket
suffix:semicolon
macro_line|#ifdef DEBUG_405DMA
(brace
r_int
id|error
op_assign
l_int|0
suffix:semicolon
r_switch
c_cond
(paren
id|p_dma_ch-&gt;pwidth
)paren
(brace
r_case
id|PW_8
suffix:colon
r_break
suffix:semicolon
r_case
id|PW_16
suffix:colon
r_if
c_cond
(paren
(paren
r_int
)paren
id|addr
op_amp
l_int|0x1
)paren
id|error
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_case
id|PW_32
suffix:colon
r_if
c_cond
(paren
(paren
r_int
)paren
id|addr
op_amp
l_int|0x3
)paren
id|error
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_case
id|PW_64
suffix:colon
r_if
c_cond
(paren
(paren
r_int
)paren
id|addr
op_amp
l_int|0x7
)paren
id|error
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|printk
c_func
(paren
l_string|&quot;set_dma_addr: invalid bus width: 0x%x&bslash;n&quot;
comma
id|p_dma_ch-&gt;pwidth
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_if
c_cond
(paren
id|error
)paren
id|printk
c_func
(paren
l_string|&quot;Warning: set_dma_addr addr 0x%x bus width %d&bslash;n&quot;
comma
id|addr
comma
id|p_dma_ch-&gt;pwidth
)paren
suffix:semicolon
)brace
macro_line|#endif 
multiline_comment|/* save dma address and program it later after we know the xfer mode */
id|p_dma_ch-&gt;addr
op_assign
id|addr
suffix:semicolon
)brace
multiline_comment|/*&n; * Sets both DMA addresses for a memory to memory transfer. &n; * For memory to peripheral or peripheral to memory transfers&n; * the function set_dma_addr() should be used instead.&n; */
r_static
id|__inline__
r_void
DECL|function|set_405gp_dma_addr2
id|set_405gp_dma_addr2
c_func
(paren
r_int
r_int
id|dmanr
comma
id|dma_addr_t
id|src_dma_addr
comma
id|dma_addr_t
id|dst_dma_addr
)paren
(brace
macro_line|#ifdef DEBUG_405DMA
(brace
id|ppc_dma_ch_t
op_star
id|p_dma_ch
op_assign
op_amp
id|dma_channels
(braket
id|dmanr
)braket
suffix:semicolon
r_int
id|error
op_assign
l_int|0
suffix:semicolon
r_switch
c_cond
(paren
id|p_dma_ch-&gt;pwidth
)paren
(brace
r_case
id|PW_8
suffix:colon
r_break
suffix:semicolon
r_case
id|PW_16
suffix:colon
r_if
c_cond
(paren
(paren
(paren
r_int
)paren
id|src_dma_addr
op_amp
l_int|0x1
)paren
op_logical_or
(paren
(paren
r_int
)paren
id|dst_dma_addr
op_amp
l_int|0x1
)paren
)paren
id|error
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_case
id|PW_32
suffix:colon
r_if
c_cond
(paren
(paren
(paren
r_int
)paren
id|src_dma_addr
op_amp
l_int|0x3
)paren
op_logical_or
(paren
(paren
r_int
)paren
id|dst_dma_addr
op_amp
l_int|0x3
)paren
)paren
id|error
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_case
id|PW_64
suffix:colon
r_if
c_cond
(paren
(paren
(paren
r_int
)paren
id|src_dma_addr
op_amp
l_int|0x7
)paren
op_logical_or
(paren
(paren
r_int
)paren
id|dst_dma_addr
op_amp
l_int|0x7
)paren
)paren
id|error
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|printk
c_func
(paren
l_string|&quot;set_dma_addr2: invalid bus width: 0x%x&bslash;n&quot;
comma
id|p_dma_ch-&gt;pwidth
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_if
c_cond
(paren
id|error
)paren
id|printk
c_func
(paren
l_string|&quot;Warning: set_dma_addr2 src 0x%x dst 0x%x bus width %d&bslash;n&quot;
comma
id|src_dma_addr
comma
id|dst_dma_addr
comma
id|p_dma_ch-&gt;pwidth
)paren
suffix:semicolon
)brace
macro_line|#endif
r_switch
c_cond
(paren
id|dmanr
)paren
(brace
r_case
l_int|0
suffix:colon
id|mtdcr
c_func
(paren
id|DCRN_DMASA0
comma
id|src_dma_addr
)paren
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMADA0
comma
id|dst_dma_addr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
id|mtdcr
c_func
(paren
id|DCRN_DMASA1
comma
id|src_dma_addr
)paren
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMADA1
comma
id|dst_dma_addr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|mtdcr
c_func
(paren
id|DCRN_DMASA2
comma
id|src_dma_addr
)paren
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMADA2
comma
id|dst_dma_addr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|3
suffix:colon
id|mtdcr
c_func
(paren
id|DCRN_DMASA3
comma
id|src_dma_addr
)paren
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMADA3
comma
id|dst_dma_addr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
macro_line|#ifdef DEBUG_405DMA
id|printk
c_func
(paren
l_string|&quot;set_dma_addr2: bad channel: %d&bslash;n&quot;
comma
id|dmanr
)paren
suffix:semicolon
macro_line|#endif
)brace
)brace
multiline_comment|/*&n; * Enables the channel interrupt.&n; *&n; * If performing a scatter/gatter transfer, this function &n; * MUST be called before calling alloc_dma_handle() and building&n; * the sgl list.  Otherwise, interrupts will not be enabled, if &n; * they were previously disabled.&n; */
r_static
id|__inline__
r_int
DECL|function|enable_405gp_dma_interrupt
id|enable_405gp_dma_interrupt
c_func
(paren
r_int
r_int
id|dmanr
)paren
(brace
r_int
r_int
id|control
suffix:semicolon
id|ppc_dma_ch_t
op_star
id|p_dma_ch
op_assign
op_amp
id|dma_channels
(braket
id|dmanr
)braket
suffix:semicolon
id|p_dma_ch-&gt;int_enable
op_assign
id|TRUE
suffix:semicolon
r_switch
c_cond
(paren
id|dmanr
)paren
(brace
r_case
l_int|0
suffix:colon
id|control
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACR0
)paren
suffix:semicolon
id|control
op_or_assign
id|DMA_CIE_ENABLE
suffix:semicolon
multiline_comment|/* Channel Interrupt Enable */
id|mtdcr
c_func
(paren
id|DCRN_DMACR0
comma
id|control
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
id|control
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACR1
)paren
suffix:semicolon
id|control
op_or_assign
id|DMA_CIE_ENABLE
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMACR1
comma
id|control
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|control
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACR2
)paren
suffix:semicolon
id|control
op_or_assign
id|DMA_CIE_ENABLE
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMACR2
comma
id|control
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|3
suffix:colon
id|control
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACR3
)paren
suffix:semicolon
id|control
op_or_assign
id|DMA_CIE_ENABLE
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMACR3
comma
id|control
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
macro_line|#ifdef DEBUG_405DMA
id|printk
c_func
(paren
l_string|&quot;enable_dma_interrupt: bad channel: %d&bslash;n&quot;
comma
id|dmanr
)paren
suffix:semicolon
macro_line|#endif
r_return
id|DMA_STATUS_BAD_CHANNEL
suffix:semicolon
)brace
r_return
id|DMA_STATUS_GOOD
suffix:semicolon
)brace
multiline_comment|/*&n; * Disables the channel interrupt.&n; *&n; * If performing a scatter/gatter transfer, this function &n; * MUST be called before calling alloc_dma_handle() and building&n; * the sgl list.  Otherwise, interrupts will not be disabled, if &n; * they were previously enabled.&n; */
r_static
id|__inline__
r_int
DECL|function|disable_405gp_dma_interrupt
id|disable_405gp_dma_interrupt
c_func
(paren
r_int
r_int
id|dmanr
)paren
(brace
r_int
r_int
id|control
suffix:semicolon
id|ppc_dma_ch_t
op_star
id|p_dma_ch
op_assign
op_amp
id|dma_channels
(braket
id|dmanr
)braket
suffix:semicolon
id|p_dma_ch-&gt;int_enable
op_assign
id|TRUE
suffix:semicolon
r_switch
c_cond
(paren
id|dmanr
)paren
(brace
r_case
l_int|0
suffix:colon
id|control
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACR0
)paren
suffix:semicolon
id|control
op_and_assign
op_complement
id|DMA_CIE_ENABLE
suffix:semicolon
multiline_comment|/* Channel Interrupt Enable */
id|mtdcr
c_func
(paren
id|DCRN_DMACR0
comma
id|control
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
id|control
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACR1
)paren
suffix:semicolon
id|control
op_and_assign
op_complement
id|DMA_CIE_ENABLE
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMACR1
comma
id|control
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|control
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACR2
)paren
suffix:semicolon
id|control
op_and_assign
op_complement
id|DMA_CIE_ENABLE
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMACR2
comma
id|control
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|3
suffix:colon
id|control
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACR3
)paren
suffix:semicolon
id|control
op_and_assign
op_complement
id|DMA_CIE_ENABLE
suffix:semicolon
id|mtdcr
c_func
(paren
id|DCRN_DMACR3
comma
id|control
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
macro_line|#ifdef DEBUG_405DMA
id|printk
c_func
(paren
l_string|&quot;enable_dma_interrupt: bad channel: %d&bslash;n&quot;
comma
id|dmanr
)paren
suffix:semicolon
macro_line|#endif
r_return
id|DMA_STATUS_BAD_CHANNEL
suffix:semicolon
)brace
r_return
id|DMA_STATUS_GOOD
suffix:semicolon
)brace
macro_line|#ifdef DCRNCAP_DMA_SG
multiline_comment|/*&n; *   Add a new sgl descriptor to the end of a scatter/gather list &n; *   which was created by alloc_dma_handle(). &n; *&n; *   For a memory to memory transfer, both dma addresses must be&n; *   valid. For a peripheral to memory transfer, one of the addresses&n; *   must be set to NULL, depending on the direction of the transfer:&n; *   memory to peripheral: set dst_addr to NULL,&n; *   peripheral to memory: set src_addr to NULL.&n; */
r_static
id|__inline__
r_int
DECL|function|add_405gp_dma_sgl
id|add_405gp_dma_sgl
c_func
(paren
id|sgl_handle_t
id|handle
comma
id|dma_addr_t
id|src_addr
comma
id|dma_addr_t
id|dst_addr
comma
r_int
r_int
id|count
)paren
(brace
id|sgl_list_info_t
op_star
id|psgl
op_assign
(paren
id|sgl_list_info_t
op_star
)paren
id|handle
suffix:semicolon
id|ppc_dma_ch_t
op_star
id|p_dma_ch
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|handle
)paren
(brace
macro_line|#ifdef DEBUG_405DMA
id|printk
c_func
(paren
l_string|&quot;add_dma_sgl: null handle&bslash;n&quot;
)paren
suffix:semicolon
macro_line|#endif
r_return
id|DMA_STATUS_BAD_HANDLE
suffix:semicolon
)brace
macro_line|#ifdef DEBUG_405DMA
r_if
c_cond
(paren
id|psgl-&gt;dmanr
op_ge
id|MAX_405GP_DMA_CHANNELS
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;add_dma_sgl error: psgl-&gt;dmanr == %d&bslash;n&quot;
comma
id|psgl-&gt;dmanr
)paren
suffix:semicolon
r_return
id|DMA_STATUS_BAD_CHANNEL
suffix:semicolon
)brace
macro_line|#endif
id|p_dma_ch
op_assign
op_amp
id|dma_channels
(braket
id|psgl-&gt;dmanr
)braket
suffix:semicolon
macro_line|#ifdef DEBUG_405DMA
(brace
r_int
id|error
op_assign
l_int|0
suffix:semicolon
r_int
r_int
id|aligned
op_assign
(paren
r_int
)paren
id|src_addr
op_or
(paren
r_int
)paren
id|dst_addr
op_or
id|count
suffix:semicolon
r_switch
c_cond
(paren
id|p_dma_ch-&gt;pwidth
)paren
(brace
r_case
id|PW_8
suffix:colon
r_break
suffix:semicolon
r_case
id|PW_16
suffix:colon
r_if
c_cond
(paren
id|aligned
op_amp
l_int|0x1
)paren
id|error
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_case
id|PW_32
suffix:colon
r_if
c_cond
(paren
id|aligned
op_amp
l_int|0x3
)paren
id|error
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_case
id|PW_64
suffix:colon
r_if
c_cond
(paren
id|aligned
op_amp
l_int|0x7
)paren
id|error
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|printk
c_func
(paren
l_string|&quot;add_dma_sgl: invalid bus width: 0x%x&bslash;n&quot;
comma
id|p_dma_ch-&gt;pwidth
)paren
suffix:semicolon
r_return
id|DMA_STATUS_GENERAL_ERROR
suffix:semicolon
)brace
r_if
c_cond
(paren
id|error
)paren
id|printk
c_func
(paren
l_string|&quot;Alignment warning: add_dma_sgl src 0x%x dst 0x%x count 0x%x bus width var %d&bslash;n&quot;
comma
id|src_addr
comma
id|dst_addr
comma
id|count
comma
id|p_dma_ch-&gt;pwidth
)paren
suffix:semicolon
)brace
macro_line|#endif
r_if
c_cond
(paren
(paren
r_int
)paren
(paren
id|psgl-&gt;ptail
op_plus
l_int|1
)paren
op_ge
(paren
(paren
r_int
)paren
id|psgl
op_plus
id|SGL_LIST_SIZE
)paren
)paren
(brace
macro_line|#ifdef DEBUG_405DMA
id|printk
c_func
(paren
l_string|&quot;sgl handle out of memory &bslash;n&quot;
)paren
suffix:semicolon
macro_line|#endif
r_return
id|DMA_STATUS_OUT_OF_MEMORY
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|psgl-&gt;ptail
)paren
(brace
id|psgl-&gt;phead
op_assign
(paren
id|ppc_sgl_t
op_star
)paren
(paren
(paren
r_int
)paren
id|psgl
op_plus
r_sizeof
(paren
id|sgl_list_info_t
)paren
)paren
suffix:semicolon
id|psgl-&gt;ptail
op_assign
id|psgl-&gt;phead
suffix:semicolon
)brace
r_else
(brace
id|psgl-&gt;ptail-&gt;next
op_assign
id|virt_to_bus
c_func
(paren
id|psgl-&gt;ptail
op_plus
l_int|1
)paren
suffix:semicolon
id|psgl-&gt;ptail
op_increment
suffix:semicolon
)brace
id|psgl-&gt;ptail-&gt;control
op_assign
id|psgl-&gt;control
suffix:semicolon
id|psgl-&gt;ptail-&gt;src_addr
op_assign
id|src_addr
suffix:semicolon
id|psgl-&gt;ptail-&gt;dst_addr
op_assign
id|dst_addr
suffix:semicolon
id|psgl-&gt;ptail-&gt;control_count
op_assign
(paren
id|count
op_rshift
id|p_dma_ch-&gt;shift
)paren
op_or
id|psgl-&gt;sgl_control
suffix:semicolon
id|psgl-&gt;ptail-&gt;next
op_assign
(paren
r_uint32
)paren
l_int|NULL
suffix:semicolon
r_return
id|DMA_STATUS_GOOD
suffix:semicolon
)brace
multiline_comment|/*&n; * Enable (start) the DMA described by the sgl handle.&n; */
DECL|function|enable_405gp_dma_sgl
r_static
id|__inline__
r_void
id|enable_405gp_dma_sgl
c_func
(paren
id|sgl_handle_t
id|handle
)paren
(brace
id|sgl_list_info_t
op_star
id|psgl
op_assign
(paren
id|sgl_list_info_t
op_star
)paren
id|handle
suffix:semicolon
id|ppc_dma_ch_t
op_star
id|p_dma_ch
suffix:semicolon
r_uint32
id|sg_command
suffix:semicolon
macro_line|#ifdef DEBUG_405DMA
r_if
c_cond
(paren
op_logical_neg
id|handle
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;enable_dma_sgl: null handle&bslash;n&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|psgl-&gt;dmanr
OG
(paren
id|MAX_405GP_DMA_CHANNELS
op_minus
l_int|1
)paren
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;enable_dma_sgl: bad channel in handle %d&bslash;n&quot;
comma
id|psgl-&gt;dmanr
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
op_logical_neg
id|psgl-&gt;phead
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;enable_dma_sgl: sg list empty&bslash;n&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
macro_line|#endif
id|p_dma_ch
op_assign
op_amp
id|dma_channels
(braket
id|psgl-&gt;dmanr
)braket
suffix:semicolon
id|psgl-&gt;ptail-&gt;control_count
op_and_assign
op_complement
id|SG_LINK
suffix:semicolon
multiline_comment|/* make this the last dscrptr */
id|sg_command
op_assign
id|mfdcr
c_func
(paren
id|DCRN_ASGC
)paren
suffix:semicolon
r_switch
c_cond
(paren
id|psgl-&gt;dmanr
)paren
(brace
r_case
l_int|0
suffix:colon
id|mtdcr
c_func
(paren
id|DCRN_ASG0
comma
id|virt_to_bus
c_func
(paren
id|psgl-&gt;phead
)paren
)paren
suffix:semicolon
id|sg_command
op_or_assign
id|SSG0_ENABLE
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
id|mtdcr
c_func
(paren
id|DCRN_ASG1
comma
id|virt_to_bus
c_func
(paren
id|psgl-&gt;phead
)paren
)paren
suffix:semicolon
id|sg_command
op_or_assign
id|SSG1_ENABLE
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|mtdcr
c_func
(paren
id|DCRN_ASG2
comma
id|virt_to_bus
c_func
(paren
id|psgl-&gt;phead
)paren
)paren
suffix:semicolon
id|sg_command
op_or_assign
id|SSG2_ENABLE
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|3
suffix:colon
id|mtdcr
c_func
(paren
id|DCRN_ASG3
comma
id|virt_to_bus
c_func
(paren
id|psgl-&gt;phead
)paren
)paren
suffix:semicolon
id|sg_command
op_or_assign
id|SSG3_ENABLE
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
macro_line|#ifdef DEBUG_405DMA
id|printk
c_func
(paren
l_string|&quot;enable_dma_sgl: bad channel: %d&bslash;n&quot;
comma
id|psgl-&gt;dmanr
)paren
suffix:semicolon
macro_line|#endif
)brace
macro_line|#if 0 /* debug */
id|printk
c_func
(paren
l_string|&quot;&bslash;n&bslash;nenable_dma_sgl at dma_addr 0x%x&bslash;n&quot;
comma
id|virt_to_bus
c_func
(paren
id|psgl-&gt;phead
)paren
)paren
suffix:semicolon
(brace
id|ppc_sgl_t
op_star
id|pnext
comma
op_star
id|sgl_addr
suffix:semicolon
id|pnext
op_assign
id|psgl-&gt;phead
suffix:semicolon
r_while
c_loop
(paren
id|pnext
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;dma descriptor at 0x%x, dma addr 0x%x&bslash;n&quot;
comma
(paren
r_int
)paren
id|pnext
comma
(paren
r_int
)paren
id|virt_to_bus
c_func
(paren
id|pnext
)paren
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;control 0x%x src 0x%x dst 0x%x c_count 0x%x, next 0x%x&bslash;n&quot;
comma
(paren
r_int
)paren
id|pnext-&gt;control
comma
(paren
r_int
)paren
id|pnext-&gt;src_addr
comma
(paren
r_int
)paren
id|pnext-&gt;dst_addr
comma
(paren
r_int
)paren
id|pnext-&gt;control_count
comma
(paren
r_int
)paren
id|pnext-&gt;next
)paren
suffix:semicolon
(paren
r_int
)paren
id|pnext
op_assign
id|bus_to_virt
c_func
(paren
id|pnext-&gt;next
)paren
suffix:semicolon
)brace
id|printk
c_func
(paren
l_string|&quot;sg_command 0x%x&bslash;n&quot;
comma
id|sg_command
)paren
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifdef PCI_ALLOC_IS_NONCONSISTENT
multiline_comment|/*&n;&t;* This is temporary only, until pci_alloc_consistent() really does&n;&t;* return &quot;consistent&quot; memory.&n;&t;*/
id|flush_dcache_range
c_func
(paren
(paren
r_int
)paren
id|handle
comma
(paren
r_int
)paren
id|handle
op_plus
id|SGL_LIST_SIZE
)paren
suffix:semicolon
macro_line|#endif
id|mtdcr
c_func
(paren
id|DCRN_ASGC
comma
id|sg_command
)paren
suffix:semicolon
multiline_comment|/* start transfer */
)brace
multiline_comment|/*&n; * Halt an active scatter/gather DMA operation.&n; */
DECL|function|disable_405gp_dma_sgl
r_static
id|__inline__
r_void
id|disable_405gp_dma_sgl
c_func
(paren
id|sgl_handle_t
id|handle
)paren
(brace
id|sgl_list_info_t
op_star
id|psgl
op_assign
(paren
id|sgl_list_info_t
op_star
)paren
id|handle
suffix:semicolon
r_uint32
id|sg_command
suffix:semicolon
macro_line|#ifdef DEBUG_405DMA
r_if
c_cond
(paren
op_logical_neg
id|handle
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;enable_dma_sgl: null handle&bslash;n&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|psgl-&gt;dmanr
OG
(paren
id|MAX_405GP_DMA_CHANNELS
op_minus
l_int|1
)paren
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;enable_dma_sgl: bad channel in handle %d&bslash;n&quot;
comma
id|psgl-&gt;dmanr
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
macro_line|#endif
id|sg_command
op_assign
id|mfdcr
c_func
(paren
id|DCRN_ASGC
)paren
suffix:semicolon
r_switch
c_cond
(paren
id|psgl-&gt;dmanr
)paren
(brace
r_case
l_int|0
suffix:colon
id|sg_command
op_and_assign
op_complement
id|SSG0_ENABLE
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
id|sg_command
op_and_assign
op_complement
id|SSG1_ENABLE
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|sg_command
op_and_assign
op_complement
id|SSG2_ENABLE
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|3
suffix:colon
id|sg_command
op_and_assign
op_complement
id|SSG3_ENABLE
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
macro_line|#ifdef DEBUG_405DMA
id|printk
c_func
(paren
l_string|&quot;enable_dma_sgl: bad channel: %d&bslash;n&quot;
comma
id|psgl-&gt;dmanr
)paren
suffix:semicolon
macro_line|#endif
)brace
id|mtdcr
c_func
(paren
id|DCRN_ASGC
comma
id|sg_command
)paren
suffix:semicolon
multiline_comment|/* stop transfer */
)brace
multiline_comment|/*&n; *  Returns number of bytes left to be transferred from the entire sgl list.&n; *  *src_addr and *dst_addr get set to the source/destination address of&n; *  the sgl descriptor where the DMA stopped.&n; *&n; *  An sgl transfer must NOT be active when this function is called.&n; */
r_static
id|__inline__
r_int
DECL|function|get_405gp_dma_sgl_residue
id|get_405gp_dma_sgl_residue
c_func
(paren
id|sgl_handle_t
id|handle
comma
id|dma_addr_t
op_star
id|src_addr
comma
id|dma_addr_t
op_star
id|dst_addr
)paren
(brace
id|sgl_list_info_t
op_star
id|psgl
op_assign
(paren
id|sgl_list_info_t
op_star
)paren
id|handle
suffix:semicolon
id|ppc_dma_ch_t
op_star
id|p_dma_ch
suffix:semicolon
id|ppc_sgl_t
op_star
id|pnext
comma
op_star
id|sgl_addr
suffix:semicolon
r_uint32
id|count_left
suffix:semicolon
macro_line|#ifdef DEBUG_405DMA
r_if
c_cond
(paren
op_logical_neg
id|handle
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;get_dma_sgl_residue: null handle&bslash;n&quot;
)paren
suffix:semicolon
r_return
id|DMA_STATUS_BAD_HANDLE
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|psgl-&gt;dmanr
OG
(paren
id|MAX_405GP_DMA_CHANNELS
op_minus
l_int|1
)paren
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;get_dma_sgl_residue: bad channel in handle %d&bslash;n&quot;
comma
id|psgl-&gt;dmanr
)paren
suffix:semicolon
r_return
id|DMA_STATUS_BAD_CHANNEL
suffix:semicolon
)brace
macro_line|#endif
r_switch
c_cond
(paren
id|psgl-&gt;dmanr
)paren
(brace
r_case
l_int|0
suffix:colon
id|sgl_addr
op_assign
(paren
id|ppc_sgl_t
op_star
)paren
id|bus_to_virt
c_func
(paren
id|mfdcr
c_func
(paren
id|DCRN_ASG0
)paren
)paren
suffix:semicolon
id|count_left
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACT0
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
id|sgl_addr
op_assign
(paren
id|ppc_sgl_t
op_star
)paren
id|bus_to_virt
c_func
(paren
id|mfdcr
c_func
(paren
id|DCRN_ASG1
)paren
)paren
suffix:semicolon
id|count_left
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACT1
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|sgl_addr
op_assign
(paren
id|ppc_sgl_t
op_star
)paren
id|bus_to_virt
c_func
(paren
id|mfdcr
c_func
(paren
id|DCRN_ASG2
)paren
)paren
suffix:semicolon
id|count_left
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACT2
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|3
suffix:colon
id|sgl_addr
op_assign
(paren
id|ppc_sgl_t
op_star
)paren
id|bus_to_virt
c_func
(paren
id|mfdcr
c_func
(paren
id|DCRN_ASG3
)paren
)paren
suffix:semicolon
id|count_left
op_assign
id|mfdcr
c_func
(paren
id|DCRN_DMACT3
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
macro_line|#ifdef DEBUG_405DMA
id|printk
c_func
(paren
l_string|&quot;get_dma_sgl_residue: bad channel: %d&bslash;n&quot;
comma
id|psgl-&gt;dmanr
)paren
suffix:semicolon
macro_line|#endif
r_goto
id|error
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|sgl_addr
)paren
(brace
macro_line|#ifdef DEBUG_405DMA
id|printk
c_func
(paren
l_string|&quot;get_dma_sgl_residue: sgl addr register is null&bslash;n&quot;
)paren
suffix:semicolon
macro_line|#endif
r_goto
id|error
suffix:semicolon
)brace
id|pnext
op_assign
id|psgl-&gt;phead
suffix:semicolon
r_while
c_loop
(paren
id|pnext
op_logical_and
(paren
(paren
r_int
)paren
id|pnext
OL
(paren
(paren
r_int
)paren
id|psgl
op_plus
id|SGL_LIST_SIZE
)paren
op_logical_and
(paren
id|pnext
op_ne
id|sgl_addr
)paren
)paren
)paren
(brace
id|pnext
op_assign
id|pnext
op_increment
suffix:semicolon
)brace
r_if
c_cond
(paren
id|pnext
op_eq
id|sgl_addr
)paren
(brace
multiline_comment|/* found the sgl descriptor */
op_star
id|src_addr
op_assign
id|pnext-&gt;src_addr
suffix:semicolon
op_star
id|dst_addr
op_assign
id|pnext-&gt;dst_addr
suffix:semicolon
multiline_comment|/*&n;&t;&t; * Now search the remaining descriptors and add their count.&n;&t;&t; * We already have the remaining count from this descriptor in&n;&t;&t; * count_left.&n;&t;&t; */
id|pnext
op_increment
suffix:semicolon
r_while
c_loop
(paren
(paren
id|pnext
op_ne
id|psgl-&gt;ptail
)paren
op_logical_and
(paren
(paren
r_int
)paren
id|pnext
OL
(paren
(paren
r_int
)paren
id|psgl
op_plus
id|SGL_LIST_SIZE
)paren
)paren
)paren
(brace
id|count_left
op_add_assign
id|pnext-&gt;control_count
op_amp
id|SG_COUNT_MASK
suffix:semicolon
)brace
r_if
c_cond
(paren
id|pnext
op_ne
id|psgl-&gt;ptail
)paren
(brace
multiline_comment|/* should never happen */
macro_line|#ifdef DEBUG_405DMA
id|printk
c_func
(paren
l_string|&quot;get_dma_sgl_residue error (1) psgl-&gt;ptail 0x%x handle 0x%x&bslash;n&quot;
comma
(paren
r_int
r_int
)paren
id|psgl-&gt;ptail
comma
(paren
r_int
r_int
)paren
id|handle
)paren
suffix:semicolon
macro_line|#endif
r_goto
id|error
suffix:semicolon
)brace
multiline_comment|/* success */
id|p_dma_ch
op_assign
op_amp
id|dma_channels
(braket
id|psgl-&gt;dmanr
)braket
suffix:semicolon
r_return
(paren
id|count_left
op_lshift
id|p_dma_ch-&gt;shift
)paren
suffix:semicolon
multiline_comment|/* count in bytes */
)brace
r_else
(brace
multiline_comment|/* this shouldn&squot;t happen */
macro_line|#ifdef DEBUG_405DMA
id|printk
c_func
(paren
l_string|&quot;get_dma_sgl_residue, unable to match current address 0x%x, handle 0x%x&bslash;n&quot;
comma
(paren
r_int
r_int
)paren
id|sgl_addr
comma
(paren
r_int
r_int
)paren
id|handle
)paren
suffix:semicolon
macro_line|#endif
)brace
id|error
suffix:colon
op_star
id|src_addr
op_assign
(paren
id|dma_addr_t
)paren
l_int|NULL
suffix:semicolon
op_star
id|dst_addr
op_assign
(paren
id|dma_addr_t
)paren
l_int|NULL
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * Returns the address(es) of the buffer(s) contained in the head element of&n; * the scatter/gather list.  The element is removed from the scatter/gather&n; * list and the next element becomes the head.&n; *&n; * This function should only be called when the DMA is not active.&n; */
r_static
id|__inline__
r_int
DECL|function|delete_405gp_dma_sgl_element
id|delete_405gp_dma_sgl_element
c_func
(paren
id|sgl_handle_t
id|handle
comma
id|dma_addr_t
op_star
id|src_dma_addr
comma
id|dma_addr_t
op_star
id|dst_dma_addr
)paren
(brace
id|sgl_list_info_t
op_star
id|psgl
op_assign
(paren
id|sgl_list_info_t
op_star
)paren
id|handle
suffix:semicolon
macro_line|#ifdef DEBUG_405DMA
r_if
c_cond
(paren
op_logical_neg
id|handle
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;delete_sgl_element: null handle&bslash;n&quot;
)paren
suffix:semicolon
r_return
id|DMA_STATUS_BAD_HANDLE
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|psgl-&gt;dmanr
OG
(paren
id|MAX_405GP_DMA_CHANNELS
op_minus
l_int|1
)paren
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;delete_sgl_element: bad channel in handle %d&bslash;n&quot;
comma
id|psgl-&gt;dmanr
)paren
suffix:semicolon
r_return
id|DMA_STATUS_BAD_CHANNEL
suffix:semicolon
)brace
macro_line|#endif
r_if
c_cond
(paren
op_logical_neg
id|psgl-&gt;phead
)paren
(brace
macro_line|#ifdef DEBUG_405DMA
id|printk
c_func
(paren
l_string|&quot;delete_sgl_element: sgl list empty&bslash;n&quot;
)paren
suffix:semicolon
macro_line|#endif
op_star
id|src_dma_addr
op_assign
(paren
id|dma_addr_t
)paren
l_int|NULL
suffix:semicolon
op_star
id|dst_dma_addr
op_assign
(paren
id|dma_addr_t
)paren
l_int|NULL
suffix:semicolon
r_return
id|DMA_STATUS_SGL_LIST_EMPTY
suffix:semicolon
)brace
op_star
id|src_dma_addr
op_assign
(paren
id|dma_addr_t
)paren
id|psgl-&gt;phead-&gt;src_addr
suffix:semicolon
op_star
id|dst_dma_addr
op_assign
(paren
id|dma_addr_t
)paren
id|psgl-&gt;phead-&gt;dst_addr
suffix:semicolon
r_if
c_cond
(paren
id|psgl-&gt;phead
op_eq
id|psgl-&gt;ptail
)paren
(brace
multiline_comment|/* last descriptor on the list */
id|psgl-&gt;phead
op_assign
l_int|NULL
suffix:semicolon
id|psgl-&gt;ptail
op_assign
l_int|NULL
suffix:semicolon
)brace
r_else
(brace
id|psgl-&gt;phead
op_increment
suffix:semicolon
)brace
r_return
id|DMA_STATUS_GOOD
suffix:semicolon
)brace
macro_line|#endif /* DCRNCAP_DMA_SG */
multiline_comment|/*&n; * The rest of the DMA API, in ppc405_dma.c&n; */
r_extern
r_int
id|hw_init_dma_channel
c_func
(paren
r_int
r_int
comma
id|ppc_dma_ch_t
op_star
)paren
suffix:semicolon
r_extern
r_int
id|get_channel_config
c_func
(paren
r_int
r_int
comma
id|ppc_dma_ch_t
op_star
)paren
suffix:semicolon
r_extern
r_int
id|set_channel_priority
c_func
(paren
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
r_int
id|get_peripheral_width
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
id|alloc_dma_handle
c_func
(paren
id|sgl_handle_t
op_star
comma
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|free_dma_handle
c_func
(paren
id|sgl_handle_t
)paren
suffix:semicolon
macro_line|#endif
macro_line|#endif /* __KERNEL__ */
eof
