macro_line|#ifndef __OF_DEVICE_H__
DECL|macro|__OF_DEVICE_H__
mdefine_line|#define __OF_DEVICE_H__
macro_line|#include &lt;linux/device.h&gt;
macro_line|#include &lt;asm/prom.h&gt;
multiline_comment|/*&n; * The of_platform_bus_type is a bus type used by drivers that do not&n; * attach to a macio or similar bus but still use OF probing&n; * mecanism&n; */
r_extern
r_struct
id|bus_type
id|of_platform_bus_type
suffix:semicolon
multiline_comment|/*&n; * The of_device is a kind of &quot;base class&quot; that is a superset of&n; * struct device for use by devices attached to an OF node and&n; * probed using OF properties&n; */
DECL|struct|of_device
r_struct
id|of_device
(brace
DECL|member|node
r_struct
id|device_node
op_star
id|node
suffix:semicolon
multiline_comment|/* OF device node */
DECL|member|dma_mask
id|u64
id|dma_mask
suffix:semicolon
multiline_comment|/* DMA mask */
DECL|member|dev
r_struct
id|device
id|dev
suffix:semicolon
multiline_comment|/* Generic device interface */
)brace
suffix:semicolon
DECL|macro|to_of_device
mdefine_line|#define&t;to_of_device(d) container_of(d, struct of_device, dev)
multiline_comment|/*&n; * Struct used for matching a device&n; */
DECL|struct|of_match
r_struct
id|of_match
(brace
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|type
r_char
op_star
id|type
suffix:semicolon
DECL|member|compatible
r_char
op_star
id|compatible
suffix:semicolon
DECL|member|data
r_void
op_star
id|data
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|OF_ANY_MATCH
mdefine_line|#define OF_ANY_MATCH&t;&t;((char *)-1L)
r_extern
r_const
r_struct
id|of_match
op_star
id|of_match_device
c_func
(paren
r_const
r_struct
id|of_match
op_star
id|matches
comma
r_const
r_struct
id|of_device
op_star
id|dev
)paren
suffix:semicolon
r_extern
r_struct
id|of_device
op_star
id|of_dev_get
c_func
(paren
r_struct
id|of_device
op_star
id|dev
)paren
suffix:semicolon
r_extern
r_void
id|of_dev_put
c_func
(paren
r_struct
id|of_device
op_star
id|dev
)paren
suffix:semicolon
multiline_comment|/*&n; * An of_platform_driver driver is attached to a basic of_device on&n; * the &quot;platform bus&quot; (of_platform_bus_type)&n; */
DECL|struct|of_platform_driver
r_struct
id|of_platform_driver
(brace
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|match_table
r_struct
id|of_match
op_star
id|match_table
suffix:semicolon
DECL|member|owner
r_struct
id|module
op_star
id|owner
suffix:semicolon
DECL|member|probe
r_int
(paren
op_star
id|probe
)paren
(paren
r_struct
id|of_device
op_star
id|dev
comma
r_const
r_struct
id|of_match
op_star
id|match
)paren
suffix:semicolon
DECL|member|remove
r_int
(paren
op_star
id|remove
)paren
(paren
r_struct
id|of_device
op_star
id|dev
)paren
suffix:semicolon
DECL|member|suspend
r_int
(paren
op_star
id|suspend
)paren
(paren
r_struct
id|of_device
op_star
id|dev
comma
id|u32
id|state
)paren
suffix:semicolon
DECL|member|resume
r_int
(paren
op_star
id|resume
)paren
(paren
r_struct
id|of_device
op_star
id|dev
)paren
suffix:semicolon
DECL|member|shutdown
r_int
(paren
op_star
id|shutdown
)paren
(paren
r_struct
id|of_device
op_star
id|dev
)paren
suffix:semicolon
DECL|member|driver
r_struct
id|device_driver
id|driver
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|to_of_platform_driver
mdefine_line|#define&t;to_of_platform_driver(drv) container_of(drv,struct of_platform_driver, driver)
r_extern
r_int
id|of_register_driver
c_func
(paren
r_struct
id|of_platform_driver
op_star
id|drv
)paren
suffix:semicolon
r_extern
r_void
id|of_unregister_driver
c_func
(paren
r_struct
id|of_platform_driver
op_star
id|drv
)paren
suffix:semicolon
r_extern
r_int
id|of_device_register
c_func
(paren
r_struct
id|of_device
op_star
id|ofdev
)paren
suffix:semicolon
r_extern
r_void
id|of_device_unregister
c_func
(paren
r_struct
id|of_device
op_star
id|ofdev
)paren
suffix:semicolon
r_extern
r_struct
id|of_device
op_star
id|of_platform_device_create
c_func
(paren
r_struct
id|device_node
op_star
id|np
comma
r_const
r_char
op_star
id|bus_id
)paren
suffix:semicolon
r_extern
r_void
id|of_release_dev
c_func
(paren
r_struct
id|device
op_star
id|dev
)paren
suffix:semicolon
macro_line|#endif /* __OF_DEVICE_H__ */
eof
