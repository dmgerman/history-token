multiline_comment|/*&n; * This is based on both include/asm-sh/dma-mapping.h and&n; * include/asm-ppc/pci.h&n; */
macro_line|#ifndef __ASM_PPC_DMA_MAPPING_H
DECL|macro|__ASM_PPC_DMA_MAPPING_H
mdefine_line|#define __ASM_PPC_DMA_MAPPING_H
macro_line|#include &lt;linux/config.h&gt;
multiline_comment|/* need struct page definitions */
macro_line|#include &lt;linux/mm.h&gt;
macro_line|#include &lt;asm/scatterlist.h&gt;
macro_line|#include &lt;asm/io.h&gt;
macro_line|#ifdef CONFIG_NOT_COHERENT_CACHE
multiline_comment|/*&n; * DMA-consistent mapping functions for PowerPCs that don&squot;t support&n; * cache snooping.  These allocate/free a region of uncached mapped&n; * memory space for use with DMA devices.  Alternatively, you could&n; * allocate the space &quot;normally&quot; and use the cache management functions&n; * to ensure it is consistent.&n; */
r_extern
r_void
op_star
id|__dma_alloc_coherent
c_func
(paren
r_int
id|size
comma
id|dma_addr_t
op_star
id|handle
comma
r_int
id|gfp
)paren
suffix:semicolon
r_extern
r_void
id|__dma_free_coherent
c_func
(paren
r_int
id|size
comma
r_void
op_star
id|vaddr
)paren
suffix:semicolon
r_extern
r_void
id|__dma_sync
c_func
(paren
r_void
op_star
id|vaddr
comma
r_int
id|size
comma
r_int
id|direction
)paren
suffix:semicolon
r_extern
r_void
id|__dma_sync_page
c_func
(paren
r_struct
id|page
op_star
id|page
comma
r_int
r_int
id|offset
comma
r_int
id|size
comma
r_int
id|direction
)paren
suffix:semicolon
DECL|macro|dma_cache_inv
mdefine_line|#define dma_cache_inv(_start,_size) &bslash;&n;&t;invalidate_dcache_range(_start, (_start + _size))
DECL|macro|dma_cache_wback
mdefine_line|#define dma_cache_wback(_start,_size) &bslash;&n;&t;clean_dcache_range(_start, (_start + _size))
DECL|macro|dma_cache_wback_inv
mdefine_line|#define dma_cache_wback_inv(_start,_size) &bslash;&n;&t;flush_dcache_range(_start, (_start + _size))
macro_line|#else /* ! CONFIG_NOT_COHERENT_CACHE */
multiline_comment|/*&n; * Cache coherent cores.&n; */
DECL|macro|dma_cache_inv
mdefine_line|#define dma_cache_inv(_start,_size)&t;&t;do { } while (0)
DECL|macro|dma_cache_wback
mdefine_line|#define dma_cache_wback(_start,_size)&t;&t;do { } while (0)
DECL|macro|dma_cache_wback_inv
mdefine_line|#define dma_cache_wback_inv(_start,_size)&t;do { } while (0)
DECL|macro|__dma_alloc_coherent
mdefine_line|#define __dma_alloc_coherent(gfp, size, handle)&t;NULL
DECL|macro|__dma_free_coherent
mdefine_line|#define __dma_free_coherent(size, addr)&t;&t;do { } while (0)
DECL|macro|__dma_sync
mdefine_line|#define __dma_sync(addr, size, rw)&t;&t;do { } while (0)
DECL|macro|__dma_sync_page
mdefine_line|#define __dma_sync_page(pg, off, sz, rw)&t;do { } while (0)
macro_line|#endif /* ! CONFIG_NOT_COHERENT_CACHE */
DECL|macro|dma_supported
mdefine_line|#define dma_supported(dev, mask)&t;(1)
DECL|function|dma_set_mask
r_static
r_inline
r_int
id|dma_set_mask
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|u64
id|dma_mask
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|dev-&gt;dma_mask
op_logical_or
op_logical_neg
id|dma_supported
c_func
(paren
id|dev
comma
id|mask
)paren
)paren
r_return
op_minus
id|EIO
suffix:semicolon
op_star
id|dev-&gt;dma_mask
op_assign
id|dma_mask
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|dma_alloc_coherent
r_static
r_inline
r_void
op_star
id|dma_alloc_coherent
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_int
id|size
comma
id|dma_addr_t
op_star
id|dma_handle
comma
r_int
id|gfp
)paren
(brace
macro_line|#ifdef CONFIG_NOT_COHERENT_CACHE
r_return
id|__dma_alloc_coherent
c_func
(paren
id|size
comma
id|dma_handle
comma
id|gfp
)paren
suffix:semicolon
macro_line|#else
r_void
op_star
id|ret
suffix:semicolon
multiline_comment|/* ignore region specifiers */
id|gfp
op_and_assign
op_complement
(paren
id|__GFP_DMA
op_or
id|__GFP_HIGHMEM
)paren
suffix:semicolon
r_if
c_cond
(paren
id|dev
op_eq
l_int|NULL
op_logical_or
id|dev-&gt;coherent_dma_mask
OL
l_int|0xffffffff
)paren
id|gfp
op_or_assign
id|GFP_DMA
suffix:semicolon
id|ret
op_assign
(paren
r_void
op_star
)paren
id|__get_free_pages
c_func
(paren
id|gfp
comma
id|get_order
c_func
(paren
id|size
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ret
op_ne
l_int|NULL
)paren
(brace
id|memset
c_func
(paren
id|ret
comma
l_int|0
comma
id|size
)paren
suffix:semicolon
op_star
id|dma_handle
op_assign
id|virt_to_bus
c_func
(paren
id|ret
)paren
suffix:semicolon
)brace
r_return
id|ret
suffix:semicolon
macro_line|#endif
)brace
r_static
r_inline
r_void
DECL|function|dma_free_coherent
id|dma_free_coherent
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_int
id|size
comma
r_void
op_star
id|vaddr
comma
id|dma_addr_t
id|dma_handle
)paren
(brace
macro_line|#ifdef CONFIG_NOT_COHERENT_CACHE
id|__dma_free_coherent
c_func
(paren
id|size
comma
id|vaddr
)paren
suffix:semicolon
macro_line|#else
id|free_pages
c_func
(paren
(paren
r_int
r_int
)paren
id|vaddr
comma
id|get_order
c_func
(paren
id|size
)paren
)paren
suffix:semicolon
macro_line|#endif
)brace
r_static
r_inline
id|dma_addr_t
DECL|function|dma_map_single
id|dma_map_single
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_void
op_star
id|ptr
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
id|BUG_ON
c_func
(paren
id|direction
op_eq
id|DMA_NONE
)paren
suffix:semicolon
id|__dma_sync
c_func
(paren
id|ptr
comma
id|size
comma
id|direction
)paren
suffix:semicolon
r_return
id|virt_to_bus
c_func
(paren
id|ptr
)paren
suffix:semicolon
)brace
multiline_comment|/* We do nothing. */
DECL|macro|dma_unmap_single
mdefine_line|#define dma_unmap_single(dev, addr, size, dir)&t;do { } while (0)
r_static
r_inline
id|dma_addr_t
DECL|function|dma_map_page
id|dma_map_page
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|page
op_star
id|page
comma
r_int
r_int
id|offset
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
id|BUG_ON
c_func
(paren
id|direction
op_eq
id|DMA_NONE
)paren
suffix:semicolon
id|__dma_sync_page
c_func
(paren
id|page
comma
id|offset
comma
id|size
comma
id|direction
)paren
suffix:semicolon
r_return
(paren
id|page
op_minus
id|mem_map
)paren
op_star
id|PAGE_SIZE
op_plus
id|PCI_DRAM_OFFSET
op_plus
id|offset
suffix:semicolon
)brace
multiline_comment|/* We do nothing. */
DECL|macro|dma_unmap_page
mdefine_line|#define dma_unmap_page(dev, handle, size, dir)&t;do { } while (0)
r_static
r_inline
r_int
DECL|function|dma_map_sg
id|dma_map_sg
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nents
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
r_int
id|i
suffix:semicolon
id|BUG_ON
c_func
(paren
id|direction
op_eq
id|DMA_NONE
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|nents
suffix:semicolon
id|i
op_increment
comma
id|sg
op_increment
)paren
(brace
id|BUG_ON
c_func
(paren
op_logical_neg
id|sg-&gt;page
)paren
suffix:semicolon
id|__dma_sync_page
c_func
(paren
id|sg-&gt;page
comma
id|sg-&gt;offset
comma
id|sg-&gt;length
comma
id|direction
)paren
suffix:semicolon
id|sg-&gt;dma_address
op_assign
id|page_to_bus
c_func
(paren
id|sg-&gt;page
)paren
op_plus
id|sg-&gt;offset
suffix:semicolon
)brace
r_return
id|nents
suffix:semicolon
)brace
multiline_comment|/* We don&squot;t do anything here. */
DECL|macro|dma_unmap_sg
mdefine_line|#define dma_unmap_sg(dev, sg, nents, dir)&t;do { } while (0)
r_static
r_inline
r_void
DECL|function|dma_sync_single_for_cpu
id|dma_sync_single_for_cpu
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_handle
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
id|BUG_ON
c_func
(paren
id|direction
op_eq
id|DMA_NONE
)paren
suffix:semicolon
id|__dma_sync
c_func
(paren
id|bus_to_virt
c_func
(paren
id|dma_handle
)paren
comma
id|size
comma
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|dma_sync_single_for_device
id|dma_sync_single_for_device
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_handle
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
id|BUG_ON
c_func
(paren
id|direction
op_eq
id|DMA_NONE
)paren
suffix:semicolon
id|__dma_sync
c_func
(paren
id|bus_to_virt
c_func
(paren
id|dma_handle
)paren
comma
id|size
comma
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|dma_sync_sg_for_cpu
id|dma_sync_sg_for_cpu
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nents
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
r_int
id|i
suffix:semicolon
id|BUG_ON
c_func
(paren
id|direction
op_eq
id|DMA_NONE
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|nents
suffix:semicolon
id|i
op_increment
comma
id|sg
op_increment
)paren
id|__dma_sync_page
c_func
(paren
id|sg-&gt;page
comma
id|sg-&gt;offset
comma
id|sg-&gt;length
comma
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|dma_sync_sg_for_device
id|dma_sync_sg_for_device
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nents
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
r_int
id|i
suffix:semicolon
id|BUG_ON
c_func
(paren
id|direction
op_eq
id|DMA_NONE
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|nents
suffix:semicolon
id|i
op_increment
comma
id|sg
op_increment
)paren
id|__dma_sync_page
c_func
(paren
id|sg-&gt;page
comma
id|sg-&gt;offset
comma
id|sg-&gt;length
comma
id|direction
)paren
suffix:semicolon
)brace
DECL|macro|dma_alloc_noncoherent
mdefine_line|#define dma_alloc_noncoherent(d, s, h, f) dma_alloc_coherent(d, s, h, f)
DECL|macro|dma_free_noncoherent
mdefine_line|#define dma_free_noncoherent(d, s, v, h) dma_free_coherent(d, s, v, h)
macro_line|#ifdef CONFIG_NOT_COHERENT_CACHE
DECL|macro|dma_is_consistent
mdefine_line|#define dma_is_consistent(d)&t;(0)
macro_line|#else
DECL|macro|dma_is_consistent
mdefine_line|#define dma_is_consistent(d)&t;(1)
macro_line|#endif
DECL|function|dma_get_cache_alignment
r_static
r_inline
r_int
id|dma_get_cache_alignment
c_func
(paren
r_void
)paren
(brace
multiline_comment|/*&n;&t; * Each processor family will define its own L1_CACHE_SHIFT,&n;&t; * L1_CACHE_BYTES wraps to this, so this is always safe.&n;&t; */
r_return
id|L1_CACHE_BYTES
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|dma_sync_single_range_for_cpu
id|dma_sync_single_range_for_cpu
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_handle
comma
r_int
r_int
id|offset
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
multiline_comment|/* just sync everything for now */
id|dma_sync_single_for_cpu
c_func
(paren
id|dev
comma
id|dma_handle
comma
id|offset
op_plus
id|size
comma
id|direction
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|dma_sync_single_range_for_device
id|dma_sync_single_range_for_device
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_handle
comma
r_int
r_int
id|offset
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
multiline_comment|/* just sync everything for now */
id|dma_sync_single_for_device
c_func
(paren
id|dev
comma
id|dma_handle
comma
id|offset
op_plus
id|size
comma
id|direction
)paren
suffix:semicolon
)brace
DECL|function|dma_cache_sync
r_static
r_inline
r_void
id|dma_cache_sync
c_func
(paren
r_void
op_star
id|vaddr
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
id|__dma_sync
c_func
(paren
id|vaddr
comma
id|size
comma
(paren
r_int
)paren
id|direction
)paren
suffix:semicolon
)brace
DECL|function|dma_mapping_error
r_static
r_inline
r_int
id|dma_mapping_error
c_func
(paren
id|dma_addr_t
id|dma_addr
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
macro_line|#endif&t;&t;&t;&t;/* __ASM_PPC_DMA_MAPPING_H */
eof
