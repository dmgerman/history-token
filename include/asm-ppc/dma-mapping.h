multiline_comment|/*&n; * This is based on both include/asm-sh/dma-mapping.h and&n; * include/asm-ppc/pci.h&n; */
macro_line|#ifndef __ASM_PPC_DMA_MAPPING_H
DECL|macro|__ASM_PPC_DMA_MAPPING_H
mdefine_line|#define __ASM_PPC_DMA_MAPPING_H
macro_line|#include &lt;linux/config.h&gt;
multiline_comment|/* we implement the API below in terms of the existing PCI one,&n; * so include it */
macro_line|#include &lt;linux/pci.h&gt;
multiline_comment|/* need struct page definitions */
macro_line|#include &lt;linux/mm.h&gt;
macro_line|#include &lt;linux/device.h&gt;
macro_line|#include &lt;asm/scatterlist.h&gt;
macro_line|#include &lt;asm/io.h&gt;
DECL|macro|dma_supported
mdefine_line|#define dma_supported(dev, mask)&t;(1)
DECL|function|dma_set_mask
r_static
r_inline
r_int
id|dma_set_mask
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|u64
id|dma_mask
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|dev-&gt;dma_mask
op_logical_or
op_logical_neg
id|dma_supported
c_func
(paren
id|dev
comma
id|mask
)paren
)paren
r_return
op_minus
id|EIO
suffix:semicolon
op_star
id|dev-&gt;dma_mask
op_assign
id|dma_mask
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|dma_alloc_coherent
r_static
r_inline
r_void
op_star
id|dma_alloc_coherent
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_int
id|size
comma
id|dma_addr_t
op_star
id|dma_handle
comma
r_int
id|flag
)paren
(brace
macro_line|#ifdef CONFIG_PCI
r_if
c_cond
(paren
id|dev
op_logical_and
id|dev-&gt;bus
op_eq
op_amp
id|pci_bus_type
)paren
r_return
id|pci_alloc_consistent
c_func
(paren
id|to_pci_dev
c_func
(paren
id|dev
)paren
comma
id|size
comma
id|dma_handle
)paren
suffix:semicolon
macro_line|#endif
r_return
id|consistent_alloc
c_func
(paren
id|flag
comma
id|size
comma
id|dma_handle
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|dma_free_coherent
id|dma_free_coherent
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_int
id|size
comma
r_void
op_star
id|vaddr
comma
id|dma_addr_t
id|dma_handle
)paren
(brace
macro_line|#ifdef CONFIG_PCI
r_if
c_cond
(paren
id|dev
op_logical_and
id|dev-&gt;bus
op_eq
op_amp
id|pci_bus_type
)paren
(brace
id|pci_free_consistent
c_func
(paren
id|to_pci_dev
c_func
(paren
id|dev
)paren
comma
id|size
comma
id|vaddr
comma
id|dma_handle
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
macro_line|#endif
id|consistent_free
c_func
(paren
id|vaddr
comma
id|size
)paren
suffix:semicolon
)brace
r_static
r_inline
id|dma_addr_t
DECL|function|dma_map_single
id|dma_map_single
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_void
op_star
id|ptr
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
id|BUG_ON
c_func
(paren
id|direction
op_eq
id|DMA_NONE
)paren
suffix:semicolon
id|consistent_sync
c_func
(paren
id|ptr
comma
id|size
comma
id|direction
)paren
suffix:semicolon
r_return
id|virt_to_bus
c_func
(paren
id|ptr
)paren
suffix:semicolon
)brace
multiline_comment|/* We do nothing. */
DECL|macro|dma_unmap_single
mdefine_line|#define dma_unmap_single(dev, addr, size, dir)&t;do { } while (0)
r_static
r_inline
id|dma_addr_t
DECL|function|dma_map_page
id|dma_map_page
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|page
op_star
id|page
comma
r_int
r_int
id|offset
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
id|BUG_ON
c_func
(paren
id|direction
op_eq
id|DMA_NONE
)paren
suffix:semicolon
id|consistent_sync_page
c_func
(paren
id|page
comma
id|offset
comma
id|size
comma
id|direction
)paren
suffix:semicolon
r_return
(paren
id|page
op_minus
id|mem_map
)paren
op_star
id|PAGE_SIZE
op_plus
id|PCI_DRAM_OFFSET
op_plus
id|offset
suffix:semicolon
)brace
multiline_comment|/* We do nothing. */
DECL|macro|dma_unmap_single
mdefine_line|#define dma_unmap_single(dev, addr, size, dir)&t;do { } while (0)
r_static
r_inline
r_int
DECL|function|dma_map_sg
id|dma_map_sg
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nents
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
r_int
id|i
suffix:semicolon
id|BUG_ON
c_func
(paren
id|direction
op_eq
id|DMA_NONE
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|nents
suffix:semicolon
id|i
op_increment
comma
id|sg
op_increment
)paren
(brace
id|BUG_ON
c_func
(paren
op_logical_neg
id|sg-&gt;page
)paren
suffix:semicolon
id|consistent_sync_page
c_func
(paren
id|sg-&gt;page
comma
id|sg-&gt;offset
comma
id|sg-&gt;length
comma
id|direction
)paren
suffix:semicolon
id|sg-&gt;dma_address
op_assign
id|page_to_bus
c_func
(paren
id|sg-&gt;page
)paren
op_plus
id|sg-&gt;offset
suffix:semicolon
)brace
r_return
id|nents
suffix:semicolon
)brace
multiline_comment|/* We don&squot;t do anything here. */
DECL|macro|dma_unmap_sg
mdefine_line|#define dma_unmap_sg(dev, sg, nents, dir)&t;do { } while (0)
DECL|function|dma_sync_single
r_static
r_inline
r_void
id|dma_sync_single
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_handle
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
id|BUG_ON
c_func
(paren
id|direction
op_eq
id|DMA_NONE
)paren
suffix:semicolon
id|consistent_sync
c_func
(paren
id|bus_to_virt
c_func
(paren
id|dma_handle
)paren
comma
id|size
comma
id|direction
)paren
suffix:semicolon
)brace
DECL|function|dma_sync_sg
r_static
r_inline
r_void
id|dma_sync_sg
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nelems
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
r_int
id|i
suffix:semicolon
id|BUG_ON
c_func
(paren
id|direction
op_eq
id|DMA_NONE
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|nelems
suffix:semicolon
id|i
op_increment
comma
id|sg
op_increment
)paren
id|consistent_sync_page
c_func
(paren
id|sg-&gt;page
comma
id|sg-&gt;offset
comma
id|sg-&gt;length
comma
id|direction
)paren
suffix:semicolon
)brace
multiline_comment|/* Now for the API extensions over the pci_ one */
DECL|macro|dma_alloc_noncoherent
mdefine_line|#define dma_alloc_noncoherent(d, s, h, f) dma_alloc_coherent(d, s, h, f)
DECL|macro|dma_free_noncoherent
mdefine_line|#define dma_free_noncoherent(d, s, v, h) dma_free_coherent(d, s, v, h)
DECL|macro|dma_is_consistent
mdefine_line|#define dma_is_consistent(d)&t;(1)
DECL|function|dma_get_cache_alignment
r_static
r_inline
r_int
id|dma_get_cache_alignment
c_func
(paren
r_void
)paren
(brace
multiline_comment|/*&n;&t; * Each processor family will define its own L1_CACHE_SHIFT,&n;&t; * L1_CACHE_BYTES wraps to this, so this is always safe.&n;&t; */
r_return
id|L1_CACHE_BYTES
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|dma_sync_single_range
id|dma_sync_single_range
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_handle
comma
r_int
r_int
id|offset
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
multiline_comment|/* just sync everything, that&squot;s all the pci API can do */
id|dma_sync_single
c_func
(paren
id|dev
comma
id|dma_handle
comma
id|offset
op_plus
id|size
comma
id|direction
)paren
suffix:semicolon
)brace
DECL|function|dma_cache_sync
r_static
r_inline
r_void
id|dma_cache_sync
c_func
(paren
r_void
op_star
id|vaddr
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|direction
)paren
(brace
id|consistent_sync
c_func
(paren
id|vaddr
comma
id|size
comma
(paren
r_int
)paren
id|direction
)paren
suffix:semicolon
)brace
macro_line|#endif&t;&t;&t;&t;/* __ASM_PPC_DMA_MAPPING_H */
eof
