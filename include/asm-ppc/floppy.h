multiline_comment|/*&n; * Architecture specific parts of the Floppy driver&n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 1995&n; */
macro_line|#ifdef __KERNEL__
macro_line|#ifndef __ASM_PPC_FLOPPY_H
DECL|macro|__ASM_PPC_FLOPPY_H
mdefine_line|#define __ASM_PPC_FLOPPY_H
DECL|macro|fd_inb
mdefine_line|#define fd_inb(port)&t;&t;inb_p(port)
DECL|macro|fd_outb
mdefine_line|#define fd_outb(value,port)&t;outb_p(value,port)
DECL|macro|fd_disable_dma
mdefine_line|#define fd_disable_dma()&t;fd_ops-&gt;_disable_dma(FLOPPY_DMA)
DECL|macro|fd_free_dma
mdefine_line|#define fd_free_dma()           fd_ops-&gt;_free_dma(FLOPPY_DMA)
DECL|macro|fd_get_dma_residue
mdefine_line|#define fd_get_dma_residue()    fd_ops-&gt;_get_dma_residue(FLOPPY_DMA)
DECL|macro|fd_dma_setup
mdefine_line|#define fd_dma_setup(addr, size, mode, io) fd_ops-&gt;_dma_setup(addr, size, mode, io)
DECL|macro|fd_enable_irq
mdefine_line|#define fd_enable_irq()         enable_irq(FLOPPY_IRQ)
DECL|macro|fd_disable_irq
mdefine_line|#define fd_disable_irq()        disable_irq(FLOPPY_IRQ)
DECL|macro|fd_free_irq
mdefine_line|#define fd_free_irq()           free_irq(FLOPPY_IRQ, NULL);
r_static
r_int
id|fd_request_dma
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|struct|fd_dma_ops
r_struct
id|fd_dma_ops
(brace
DECL|member|_disable_dma
r_void
(paren
op_star
id|_disable_dma
)paren
(paren
r_int
r_int
id|dmanr
)paren
suffix:semicolon
DECL|member|_free_dma
r_void
(paren
op_star
id|_free_dma
)paren
(paren
r_int
r_int
id|dmanr
)paren
suffix:semicolon
DECL|member|_get_dma_residue
r_int
(paren
op_star
id|_get_dma_residue
)paren
(paren
r_int
r_int
id|dummy
)paren
suffix:semicolon
DECL|member|_dma_setup
r_int
(paren
op_star
id|_dma_setup
)paren
(paren
r_char
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
id|mode
comma
r_int
id|io
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|variable|virtual_dma_count
r_static
r_int
id|virtual_dma_count
suffix:semicolon
DECL|variable|virtual_dma_residue
r_static
r_int
id|virtual_dma_residue
suffix:semicolon
DECL|variable|virtual_dma_addr
r_static
r_char
op_star
id|virtual_dma_addr
suffix:semicolon
DECL|variable|virtual_dma_mode
r_static
r_int
id|virtual_dma_mode
suffix:semicolon
DECL|variable|doing_vdma
r_static
r_int
id|doing_vdma
suffix:semicolon
DECL|variable|fd_ops
r_static
r_struct
id|fd_dma_ops
op_star
id|fd_ops
suffix:semicolon
DECL|function|floppy_hardint
r_static
id|irqreturn_t
id|floppy_hardint
c_func
(paren
r_int
id|irq
comma
r_void
op_star
id|dev_id
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
(brace
r_int
r_char
id|st
suffix:semicolon
r_int
id|lcount
suffix:semicolon
r_char
op_star
id|lptr
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|doing_vdma
)paren
r_return
id|floppy_interrupt
c_func
(paren
id|irq
comma
id|dev_id
comma
id|regs
)paren
suffix:semicolon
id|st
op_assign
l_int|1
suffix:semicolon
r_for
c_loop
(paren
id|lcount
op_assign
id|virtual_dma_count
comma
id|lptr
op_assign
id|virtual_dma_addr
suffix:semicolon
id|lcount
suffix:semicolon
id|lcount
op_decrement
comma
id|lptr
op_increment
)paren
(brace
id|st
op_assign
id|inb
c_func
(paren
id|virtual_dma_port
op_plus
l_int|4
)paren
op_amp
l_int|0xa0
suffix:semicolon
r_if
c_cond
(paren
id|st
op_ne
l_int|0xa0
)paren
r_break
suffix:semicolon
r_if
c_cond
(paren
id|virtual_dma_mode
)paren
id|outb_p
c_func
(paren
op_star
id|lptr
comma
id|virtual_dma_port
op_plus
l_int|5
)paren
suffix:semicolon
r_else
op_star
id|lptr
op_assign
id|inb_p
c_func
(paren
id|virtual_dma_port
op_plus
l_int|5
)paren
suffix:semicolon
)brace
id|virtual_dma_count
op_assign
id|lcount
suffix:semicolon
id|virtual_dma_addr
op_assign
id|lptr
suffix:semicolon
id|st
op_assign
id|inb
c_func
(paren
id|virtual_dma_port
op_plus
l_int|4
)paren
suffix:semicolon
r_if
c_cond
(paren
id|st
op_eq
l_int|0x20
)paren
r_return
id|IRQ_HANDLED
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|st
op_amp
l_int|0x20
)paren
)paren
(brace
id|virtual_dma_residue
op_add_assign
id|virtual_dma_count
suffix:semicolon
id|virtual_dma_count
op_assign
l_int|0
suffix:semicolon
id|doing_vdma
op_assign
l_int|0
suffix:semicolon
id|floppy_interrupt
c_func
(paren
id|irq
comma
id|dev_id
comma
id|regs
)paren
suffix:semicolon
r_return
id|IRQ_HANDLED
suffix:semicolon
)brace
r_return
id|IRQ_HANDLED
suffix:semicolon
)brace
DECL|function|vdma_disable_dma
r_static
r_void
id|vdma_disable_dma
c_func
(paren
r_int
r_int
id|dummy
)paren
(brace
id|doing_vdma
op_assign
l_int|0
suffix:semicolon
id|virtual_dma_residue
op_add_assign
id|virtual_dma_count
suffix:semicolon
id|virtual_dma_count
op_assign
l_int|0
suffix:semicolon
)brace
DECL|function|vdma_nop
r_static
r_void
id|vdma_nop
c_func
(paren
r_int
r_int
id|dummy
)paren
(brace
)brace
DECL|function|vdma_get_dma_residue
r_static
r_int
id|vdma_get_dma_residue
c_func
(paren
r_int
r_int
id|dummy
)paren
(brace
r_return
id|virtual_dma_count
op_plus
id|virtual_dma_residue
suffix:semicolon
)brace
DECL|function|fd_request_irq
r_static
r_int
id|fd_request_irq
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
id|can_use_virtual_dma
)paren
r_return
id|request_irq
c_func
(paren
id|FLOPPY_IRQ
comma
id|floppy_hardint
comma
id|SA_INTERRUPT
comma
l_string|&quot;floppy&quot;
comma
l_int|NULL
)paren
suffix:semicolon
r_else
r_return
id|request_irq
c_func
(paren
id|FLOPPY_IRQ
comma
id|floppy_interrupt
comma
id|SA_INTERRUPT
op_or
id|SA_SAMPLE_RANDOM
comma
l_string|&quot;floppy&quot;
comma
l_int|NULL
)paren
suffix:semicolon
)brace
DECL|function|vdma_dma_setup
r_static
r_int
id|vdma_dma_setup
c_func
(paren
r_char
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
id|mode
comma
r_int
id|io
)paren
(brace
id|doing_vdma
op_assign
l_int|1
suffix:semicolon
id|virtual_dma_port
op_assign
id|io
suffix:semicolon
id|virtual_dma_mode
op_assign
(paren
id|mode
op_eq
id|DMA_MODE_WRITE
)paren
suffix:semicolon
id|virtual_dma_addr
op_assign
id|addr
suffix:semicolon
id|virtual_dma_count
op_assign
id|size
suffix:semicolon
id|virtual_dma_residue
op_assign
l_int|0
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|hard_dma_setup
r_static
r_int
id|hard_dma_setup
c_func
(paren
r_char
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
id|mode
comma
r_int
id|io
)paren
(brace
multiline_comment|/* actual, physical DMA */
id|doing_vdma
op_assign
l_int|0
suffix:semicolon
id|clear_dma_ff
c_func
(paren
id|FLOPPY_DMA
)paren
suffix:semicolon
id|set_dma_mode
c_func
(paren
id|FLOPPY_DMA
comma
id|mode
)paren
suffix:semicolon
id|set_dma_addr
c_func
(paren
id|FLOPPY_DMA
comma
(paren
r_int
r_int
)paren
id|virt_to_bus
c_func
(paren
id|addr
)paren
)paren
suffix:semicolon
id|set_dma_count
c_func
(paren
id|FLOPPY_DMA
comma
id|size
)paren
suffix:semicolon
id|enable_dma
c_func
(paren
id|FLOPPY_DMA
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|variable|real_dma_ops
r_static
r_struct
id|fd_dma_ops
id|real_dma_ops
op_assign
(brace
dot
id|_disable_dma
op_assign
id|disable_dma
comma
dot
id|_free_dma
op_assign
id|free_dma
comma
dot
id|_get_dma_residue
op_assign
id|get_dma_residue
comma
dot
id|_dma_setup
op_assign
id|hard_dma_setup
)brace
suffix:semicolon
DECL|variable|virt_dma_ops
r_static
r_struct
id|fd_dma_ops
id|virt_dma_ops
op_assign
(brace
dot
id|_disable_dma
op_assign
id|vdma_disable_dma
comma
dot
id|_free_dma
op_assign
id|vdma_nop
comma
dot
id|_get_dma_residue
op_assign
id|vdma_get_dma_residue
comma
dot
id|_dma_setup
op_assign
id|vdma_dma_setup
)brace
suffix:semicolon
DECL|function|fd_request_dma
r_static
r_int
id|fd_request_dma
c_func
(paren
)paren
(brace
r_if
c_cond
(paren
id|can_use_virtual_dma
op_amp
l_int|1
)paren
(brace
id|fd_ops
op_assign
op_amp
id|virt_dma_ops
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
r_else
(brace
id|fd_ops
op_assign
op_amp
id|real_dma_ops
suffix:semicolon
r_return
id|request_dma
c_func
(paren
id|FLOPPY_DMA
comma
l_string|&quot;floppy&quot;
)paren
suffix:semicolon
)brace
)brace
DECL|variable|FDC1
r_static
r_int
id|FDC1
op_assign
l_int|0x3f0
suffix:semicolon
DECL|variable|FDC2
r_static
r_int
id|FDC2
op_assign
op_minus
l_int|1
suffix:semicolon
multiline_comment|/*&n; * Again, the CMOS information not available&n; */
DECL|macro|FLOPPY0_TYPE
mdefine_line|#define FLOPPY0_TYPE 6
DECL|macro|FLOPPY1_TYPE
mdefine_line|#define FLOPPY1_TYPE 0
DECL|macro|N_FDC
mdefine_line|#define N_FDC 2&t;&t;&t;/* Don&squot;t change this! */
DECL|macro|N_DRIVE
mdefine_line|#define N_DRIVE 8
DECL|macro|FLOPPY_MOTOR_MASK
mdefine_line|#define FLOPPY_MOTOR_MASK 0xf0
multiline_comment|/*&n; * The PowerPC has no problems with floppy DMA crossing 64k borders.&n; */
DECL|macro|CROSS_64KB
mdefine_line|#define CROSS_64KB(a,s)&t;(0)
macro_line|#endif /* __ASM_PPC_FLOPPY_H */
DECL|macro|EXTRA_FLOPPY_PARAMS
mdefine_line|#define EXTRA_FLOPPY_PARAMS
macro_line|#endif /* __KERNEL__ */
eof
