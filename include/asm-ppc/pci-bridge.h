macro_line|#ifdef __KERNEL__
macro_line|#ifndef _ASM_PCI_BRIDGE_H
DECL|macro|_ASM_PCI_BRIDGE_H
mdefine_line|#define _ASM_PCI_BRIDGE_H
macro_line|#include &lt;linux/ioport.h&gt;
macro_line|#include &lt;linux/pci.h&gt;
r_struct
id|device_node
suffix:semicolon
r_struct
id|pci_controller
suffix:semicolon
multiline_comment|/*&n; * pci_io_base returns the memory address at which you can access&n; * the I/O space for PCI bus number `bus&squot; (or NULL on error).&n; */
r_extern
r_void
op_star
id|pci_bus_io_base
c_func
(paren
r_int
r_int
id|bus
)paren
suffix:semicolon
r_extern
r_int
r_int
id|pci_bus_io_base_phys
c_func
(paren
r_int
r_int
id|bus
)paren
suffix:semicolon
r_extern
r_int
r_int
id|pci_bus_mem_base_phys
c_func
(paren
r_int
r_int
id|bus
)paren
suffix:semicolon
multiline_comment|/* Allocate a new PCI host bridge structure */
r_extern
r_struct
id|pci_controller
op_star
id|pcibios_alloc_controller
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/* Helper function for setting up resources */
r_extern
r_void
id|pci_init_resource
c_func
(paren
r_struct
id|resource
op_star
id|res
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
comma
r_int
id|flags
comma
r_char
op_star
id|name
)paren
suffix:semicolon
multiline_comment|/*&n; * PCI &lt;-&gt; OF matching functions &n; */
r_extern
r_int
id|pci_device_from_OF_node
c_func
(paren
r_struct
id|device_node
op_star
id|node
comma
id|u8
op_star
id|bus
comma
id|u8
op_star
id|devfn
)paren
suffix:semicolon
r_extern
r_struct
id|device_node
op_star
id|pci_busdev_to_OF_node
c_func
(paren
r_struct
id|pci_bus
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_struct
id|device_node
op_star
id|pci_device_to_OF_node
c_func
(paren
r_struct
id|pci_dev
op_star
)paren
suffix:semicolon
r_extern
r_void
id|pci_create_OF_bus_map
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/* Get the PCI host controller for a bus */
r_extern
r_struct
id|pci_controller
op_star
id|pci_bus_to_hose
c_func
(paren
r_int
id|bus
)paren
suffix:semicolon
multiline_comment|/* Get the PCI host controller for an OF device */
r_extern
r_struct
id|pci_controller
op_star
id|pci_find_hose_for_OF_device
c_func
(paren
r_struct
id|device_node
op_star
id|node
)paren
suffix:semicolon
multiline_comment|/* Fill up host controller resources from the OF node */
r_extern
r_void
id|pci_process_bridge_OF_ranges
c_func
(paren
r_struct
id|pci_controller
op_star
id|hose
comma
r_struct
id|device_node
op_star
id|dev
comma
r_int
id|primary
)paren
suffix:semicolon
multiline_comment|/*&n; * Structure of a PCI controller (host bridge)&n; */
DECL|struct|pci_controller
r_struct
id|pci_controller
(brace
DECL|member|index
r_int
id|index
suffix:semicolon
multiline_comment|/* used for pci_controller_num */
DECL|member|next
r_struct
id|pci_controller
op_star
id|next
suffix:semicolon
DECL|member|bus
r_struct
id|pci_bus
op_star
id|bus
suffix:semicolon
DECL|member|arch_data
r_void
op_star
id|arch_data
suffix:semicolon
DECL|member|first_busno
r_int
id|first_busno
suffix:semicolon
DECL|member|last_busno
r_int
id|last_busno
suffix:semicolon
DECL|member|bus_offset
r_int
id|bus_offset
suffix:semicolon
DECL|member|io_base_virt
r_void
op_star
id|io_base_virt
suffix:semicolon
DECL|member|io_base_phys
r_int
r_int
id|io_base_phys
suffix:semicolon
multiline_comment|/* Some machines (PReP) have a non 1:1 mapping of&n;&t; * the PCI memory space in the CPU bus space&n;&t; */
DECL|member|pci_mem_offset
r_int
r_int
id|pci_mem_offset
suffix:semicolon
DECL|member|ops
r_struct
id|pci_ops
op_star
id|ops
suffix:semicolon
DECL|member|cfg_addr
r_volatile
r_int
r_int
op_star
id|cfg_addr
suffix:semicolon
DECL|member|cfg_data
r_volatile
r_int
r_char
op_star
id|cfg_data
suffix:semicolon
multiline_comment|/*&n;&t; * If set, indirect method will set the cfg_type bit as&n;&t; * needed to generate type 1 configuration transactions.&n;&t; */
DECL|member|set_cfg_type
r_int
id|set_cfg_type
suffix:semicolon
multiline_comment|/* Currently, we limit ourselves to 1 IO range and 3 mem&n;&t; * ranges since the common pci_bus structure can&squot;t handle more&n;&t; */
DECL|member|io_resource
r_struct
id|resource
id|io_resource
suffix:semicolon
DECL|member|mem_resources
r_struct
id|resource
id|mem_resources
(braket
l_int|3
)braket
suffix:semicolon
DECL|member|mem_resource_count
r_int
id|mem_resource_count
suffix:semicolon
multiline_comment|/* Host bridge I/O and Memory space&n;&t; * Used for BAR placement algorithms&n;&t; */
DECL|member|io_space
r_struct
id|resource
id|io_space
suffix:semicolon
DECL|member|mem_space
r_struct
id|resource
id|mem_space
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* These are used for config access before all the PCI probing&n;   has been done. */
r_int
id|early_read_config_byte
c_func
(paren
r_struct
id|pci_controller
op_star
id|hose
comma
r_int
id|bus
comma
r_int
id|dev_fn
comma
r_int
id|where
comma
id|u8
op_star
id|val
)paren
suffix:semicolon
r_int
id|early_read_config_word
c_func
(paren
r_struct
id|pci_controller
op_star
id|hose
comma
r_int
id|bus
comma
r_int
id|dev_fn
comma
r_int
id|where
comma
id|u16
op_star
id|val
)paren
suffix:semicolon
r_int
id|early_read_config_dword
c_func
(paren
r_struct
id|pci_controller
op_star
id|hose
comma
r_int
id|bus
comma
r_int
id|dev_fn
comma
r_int
id|where
comma
id|u32
op_star
id|val
)paren
suffix:semicolon
r_int
id|early_write_config_byte
c_func
(paren
r_struct
id|pci_controller
op_star
id|hose
comma
r_int
id|bus
comma
r_int
id|dev_fn
comma
r_int
id|where
comma
id|u8
id|val
)paren
suffix:semicolon
r_int
id|early_write_config_word
c_func
(paren
r_struct
id|pci_controller
op_star
id|hose
comma
r_int
id|bus
comma
r_int
id|dev_fn
comma
r_int
id|where
comma
id|u16
id|val
)paren
suffix:semicolon
r_int
id|early_write_config_dword
c_func
(paren
r_struct
id|pci_controller
op_star
id|hose
comma
r_int
id|bus
comma
r_int
id|dev_fn
comma
r_int
id|where
comma
id|u32
id|val
)paren
suffix:semicolon
r_extern
r_void
id|setup_indirect_pci
c_func
(paren
r_struct
id|pci_controller
op_star
id|hose
comma
id|u32
id|cfg_addr
comma
id|u32
id|cfg_data
)paren
suffix:semicolon
r_extern
r_void
id|setup_grackle
c_func
(paren
r_struct
id|pci_controller
op_star
id|hose
)paren
suffix:semicolon
r_extern
r_int
r_char
id|common_swizzle
c_func
(paren
r_struct
id|pci_dev
op_star
comma
r_int
r_char
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; *   The following code swizzles for exactly one bridge.  The routine&n; *   common_swizzle below handles multiple bridges.  But there are a&n; *   some boards that don&squot;t follow the PCI spec&squot;s suggestion so we&n; *   break this piece out separately.&n; */
DECL|function|bridge_swizzle
r_static
r_inline
r_int
r_char
id|bridge_swizzle
c_func
(paren
r_int
r_char
id|pin
comma
r_int
r_char
id|idsel
)paren
(brace
r_return
(paren
(paren
(paren
id|pin
op_minus
l_int|1
)paren
op_plus
id|idsel
)paren
op_mod
l_int|4
)paren
op_plus
l_int|1
suffix:semicolon
)brace
multiline_comment|/*&n; * The following macro is used to lookup irqs in a standard table&n; * format for those PPC systems that do not already have PCI&n; * interrupts properly routed.&n; */
multiline_comment|/* FIXME - double check this */
DECL|macro|PCI_IRQ_TABLE_LOOKUP
mdefine_line|#define PCI_IRQ_TABLE_LOOKUP&t;&t;&t;&t;&t;&t;    &bslash;&n;({ long _ctl_ = -1; &t;&t;&t;&t;&t;&t;&t;    &bslash;&n;   if (idsel &gt;= min_idsel &amp;&amp; idsel &lt;= max_idsel &amp;&amp; pin &lt;= irqs_per_slot)    &bslash;&n;     _ctl_ = pci_irq_table[idsel - min_idsel][pin-1];&t;&t;&t;    &bslash;&n;   _ctl_; })
multiline_comment|/*&n; * Scan the buses below a given PCI host bridge and assign suitable&n; * resources to all devices found.&n; */
r_extern
r_int
id|pciauto_bus_scan
c_func
(paren
r_struct
id|pci_controller
op_star
comma
r_int
)paren
suffix:semicolon
macro_line|#endif
macro_line|#endif /* __KERNEL__ */
eof
