multiline_comment|/*&n; * ocp.h&n; *&n; *&n; * &t;Current Maintainer&n; *      Armin Kuster akuster@pacbell.net&n; *      Jan, 2002&n; *&n; *&n; *&n; * This program is free software; you can redistribute  it and/or modify it&n; *  under  the terms of  the GNU General  Public License as published by the&n; *  Free Software Foundation;  either version 2 of the  License, or (at your&n; *  option) any later version.&n; *&n; *  THIS  SOFTWARE  IS PROVIDED   ``AS  IS&squot;&squot; AND   ANY  EXPRESS OR   IMPLIED&n; *  WARRANTIES,   INCLUDING, BUT NOT  LIMITED  TO, THE IMPLIED WARRANTIES OF&n; *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN&n; *  NO  EVENT  SHALL   THE AUTHOR  BE    LIABLE FOR ANY   DIRECT,  INDIRECT,&n; *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT&n; *  NOT LIMITED   TO, PROCUREMENT OF  SUBSTITUTE GOODS  OR SERVICES; LOSS OF&n; *  USE, DATA,  OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON&n; *  ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT&n; *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF&n; *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&n; *&n; *  You should have received a copy of the  GNU General Public License along&n; *  with this program; if not, write  to the Free Software Foundation, Inc.,&n; *  675 Mass Ave, Cambridge, MA 02139, USA.&n; */
macro_line|#ifdef __KERNEL__
macro_line|#ifndef __OCP_H__
DECL|macro|__OCP_H__
mdefine_line|#define __OCP_H__
macro_line|#include &lt;linux/list.h&gt;
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/device.h&gt;
macro_line|#include &lt;asm/ocp_ids.h&gt;
macro_line|#include &lt;asm/mmu.h&gt;&t;&t;/* For phys_addr_t */
DECL|macro|DEBUG
macro_line|#undef DEBUG
multiline_comment|/* #define DEBUG*/
macro_line|#ifdef DEBUG
DECL|macro|DBG
mdefine_line|#define DBG(x...) printk(x)
macro_line|#else
DECL|macro|DBG
mdefine_line|#define DBG(x...)
macro_line|#endif
DECL|macro|OCP_IRQ_NA
mdefine_line|#define OCP_IRQ_NA&t;-1&t;/* used when ocp device does not have an irq */
DECL|macro|OCP_IRQ_MUL
mdefine_line|#define OCP_IRQ_MUL&t;-2&t;/* used for ocp devices with multiple irqs */
DECL|macro|OCP_NULL_TYPE
mdefine_line|#define OCP_NULL_TYPE&t;0&t;/* used to mark end of list */
DECL|macro|OCP_DEV_NA
mdefine_line|#define OCP_DEV_NA&t;-1
DECL|macro|OCP_CPM_NA
mdefine_line|#define OCP_CPM_NA&t;0&t;/* No Clock or Power Management avaliable */
DECL|macro|OCP_ANY_ID
mdefine_line|#define OCP_ANY_ID&t;(~0)
r_extern
r_struct
id|list_head
id|ocp_root_buses
suffix:semicolon
r_extern
r_struct
id|list_head
id|ocp_devices
suffix:semicolon
DECL|struct|ocp_device_id
r_struct
id|ocp_device_id
(brace
DECL|member|vendor
DECL|member|device
r_int
r_int
id|vendor
comma
id|device
suffix:semicolon
multiline_comment|/* Vendor and device ID or PCI_ANY_ID */
DECL|member|name
r_char
id|name
(braket
l_int|16
)braket
suffix:semicolon
DECL|member|desc
r_char
id|desc
(braket
l_int|50
)braket
suffix:semicolon
DECL|member|driver_data
r_int
r_int
id|driver_data
suffix:semicolon
multiline_comment|/* Data private to the driver */
)brace
suffix:semicolon
DECL|struct|func_info
r_struct
id|func_info
(brace
DECL|member|name
r_char
id|name
(braket
l_int|16
)braket
suffix:semicolon
DECL|member|desc
r_char
id|desc
(braket
l_int|50
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ocp_def
r_struct
id|ocp_def
(brace
DECL|member|vendor
r_int
r_int
id|vendor
suffix:semicolon
DECL|member|device
r_int
r_int
id|device
suffix:semicolon
DECL|member|paddr
id|phys_addr_t
id|paddr
suffix:semicolon
DECL|member|irq
r_int
id|irq
suffix:semicolon
DECL|member|pm
r_int
r_int
id|pm
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Struct for single ocp device managment */
DECL|struct|ocp_device
r_struct
id|ocp_device
(brace
DECL|member|global_list
r_struct
id|list_head
id|global_list
suffix:semicolon
DECL|member|num
r_int
r_int
id|num
suffix:semicolon
multiline_comment|/* instance of device */
DECL|member|name
r_char
id|name
(braket
l_int|80
)braket
suffix:semicolon
multiline_comment|/* device name */
DECL|member|vendor
r_int
r_int
id|vendor
suffix:semicolon
DECL|member|device
r_int
r_int
id|device
suffix:semicolon
DECL|member|paddr
id|phys_addr_t
id|paddr
suffix:semicolon
DECL|member|irq
r_int
id|irq
suffix:semicolon
DECL|member|pm
r_int
r_int
id|pm
suffix:semicolon
DECL|member|ocpdev
r_void
op_star
id|ocpdev
suffix:semicolon
multiline_comment|/* driver data for this device */
DECL|member|driver
r_struct
id|ocp_driver
op_star
id|driver
suffix:semicolon
DECL|member|current_state
id|u32
id|current_state
suffix:semicolon
multiline_comment|/* Current operating state. In ACPI-speak,&n;&t;&t;&t;&t;   this is D0-D3, D0 being fully functional,&n;&t;&t;&t;&t;   and D3 being off. */
DECL|member|dev
r_struct
id|device
id|dev
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|ocp_driver
r_struct
id|ocp_driver
(brace
DECL|member|node
r_struct
id|list_head
id|node
suffix:semicolon
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|id_table
r_const
r_struct
id|ocp_device_id
op_star
id|id_table
suffix:semicolon
multiline_comment|/* NULL if wants all devices */
DECL|member|probe
r_int
(paren
op_star
id|probe
)paren
(paren
r_struct
id|ocp_device
op_star
id|dev
)paren
suffix:semicolon
multiline_comment|/* New device inserted */
DECL|member|remove
r_void
(paren
op_star
id|remove
)paren
(paren
r_struct
id|ocp_device
op_star
id|dev
)paren
suffix:semicolon
multiline_comment|/* Device removed (NULL if not a hot-plug capable driver) */
DECL|member|save_state
r_int
(paren
op_star
id|save_state
)paren
(paren
r_struct
id|ocp_device
op_star
id|dev
comma
id|u32
id|state
)paren
suffix:semicolon
multiline_comment|/* Save Device Context */
DECL|member|suspend
r_int
(paren
op_star
id|suspend
)paren
(paren
r_struct
id|ocp_device
op_star
id|dev
comma
id|u32
id|state
)paren
suffix:semicolon
multiline_comment|/* Device suspended */
DECL|member|resume
r_int
(paren
op_star
id|resume
)paren
(paren
r_struct
id|ocp_device
op_star
id|dev
)paren
suffix:semicolon
multiline_comment|/* Device woken up */
DECL|member|enable_wake
r_int
(paren
op_star
id|enable_wake
)paren
(paren
r_struct
id|ocp_device
op_star
id|dev
comma
id|u32
id|state
comma
r_int
id|enable
)paren
suffix:semicolon
multiline_comment|/* Enable wake event */
DECL|member|driver
r_struct
id|device_driver
id|driver
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|to_ocp_dev
mdefine_line|#define&t;to_ocp_dev(n) container_of(n, struct ocp_device, dev)
DECL|macro|to_ocp_driver
mdefine_line|#define&t;to_ocp_driver(n) container_of(n, struct ocp_driver, driver)
r_extern
r_int
id|ocp_register_driver
c_func
(paren
r_struct
id|ocp_driver
op_star
id|drv
)paren
suffix:semicolon
r_extern
r_void
id|ocp_unregister_driver
c_func
(paren
r_struct
id|ocp_driver
op_star
id|drv
)paren
suffix:semicolon
DECL|macro|ocp_dev_g
mdefine_line|#define ocp_dev_g(n) list_entry(n, struct ocp_device, global_list)
DECL|macro|ocp_for_each_dev
mdefine_line|#define ocp_for_each_dev(dev) &bslash;&n;&t;for(dev = ocp_dev_g(ocp_devices.next); dev != ocp_dev_g(&amp;ocp_devices); dev = ocp_dev_g(dev-&gt;global_list.next))
multiline_comment|/* Similar to the helpers above, these manipulate per-ocp_dev&n; * driver-specific data.  Currently stored as ocp_dev::ocpdev,&n; * a void pointer, but it is not present on older kernels.&n; */
r_static
r_inline
r_void
op_star
DECL|function|ocp_get_drvdata
id|ocp_get_drvdata
c_func
(paren
r_struct
id|ocp_device
op_star
id|pdev
)paren
(brace
r_return
id|pdev-&gt;ocpdev
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|ocp_set_drvdata
id|ocp_set_drvdata
c_func
(paren
r_struct
id|ocp_device
op_star
id|pdev
comma
r_void
op_star
id|data
)paren
(brace
id|pdev-&gt;ocpdev
op_assign
id|data
suffix:semicolon
)brace
multiline_comment|/*&n; * a helper function which helps ensure correct pci_driver&n; * setup and cleanup for commonly-encountered hotplug/modular cases&n; *&n; * This MUST stay in a header, as it checks for -DMODULE&n; */
DECL|function|ocp_module_init
r_static
r_inline
r_int
id|ocp_module_init
c_func
(paren
r_struct
id|ocp_driver
op_star
id|drv
)paren
(brace
r_int
id|rc
op_assign
id|ocp_register_driver
c_func
(paren
id|drv
)paren
suffix:semicolon
r_if
c_cond
(paren
id|rc
OG
l_int|0
)paren
r_return
l_int|0
suffix:semicolon
multiline_comment|/* iff CONFIG_HOTPLUG and built into kernel, we should&n;&t; * leave the driver around for future hotplug events.&n;&t; * For the module case, a hotplug daemon of some sort&n;&t; * should load a module in response to an insert event. */
macro_line|#if defined(CONFIG_HOTPLUG) &amp;&amp; !defined(MODULE)
r_if
c_cond
(paren
id|rc
op_eq
l_int|0
)paren
r_return
l_int|0
suffix:semicolon
macro_line|#else
r_if
c_cond
(paren
id|rc
op_eq
l_int|0
)paren
id|rc
op_assign
op_minus
id|ENODEV
suffix:semicolon
macro_line|#endif
multiline_comment|/* if we get here, we need to clean up pci driver instance&n;&t; * and return some sort of error */
id|ocp_unregister_driver
(paren
id|drv
)paren
suffix:semicolon
r_return
id|rc
suffix:semicolon
)brace
macro_line|#if defined (CONFIG_PM)
multiline_comment|/*&n; * This is right for the IBM 405 and 440 but will need to be&n; * generalized if the OCP stuff gets used on other processors.&n; */
r_static
r_inline
r_void
DECL|function|ocp_force_power_off
id|ocp_force_power_off
c_func
(paren
r_struct
id|ocp_device
op_star
id|odev
)paren
(brace
id|mtdcr
c_func
(paren
id|DCRN_CPMFR
comma
id|mfdcr
c_func
(paren
id|DCRN_CPMFR
)paren
op_or
id|odev-&gt;pm
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|ocp_force_power_on
id|ocp_force_power_on
c_func
(paren
r_struct
id|ocp_device
op_star
id|odev
)paren
(brace
id|mtdcr
c_func
(paren
id|DCRN_CPMFR
comma
id|mfdcr
c_func
(paren
id|DCRN_CPMFR
)paren
op_amp
op_complement
id|odev-&gt;pm
)paren
suffix:semicolon
)brace
macro_line|#else
DECL|macro|ocp_force_power_off
mdefine_line|#define ocp_force_power_off(x)&t;(void)(x)
DECL|macro|ocp_force_power_on
mdefine_line|#define ocp_force_power_on(x)&t;(void)(x)
macro_line|#endif
r_extern
r_void
id|ocp_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_struct
id|bus_type
id|ocp_bus_type
suffix:semicolon
r_extern
r_struct
id|ocp_device
op_star
id|ocp_get_dev
c_func
(paren
r_int
r_int
id|device
comma
r_int
id|index
)paren
suffix:semicolon
r_extern
r_int
r_int
id|ocp_get_num
c_func
(paren
r_int
r_int
id|device
)paren
suffix:semicolon
r_extern
r_int
id|ocp_generic_suspend
c_func
(paren
r_struct
id|ocp_device
op_star
id|pdev
comma
id|u32
id|state
)paren
suffix:semicolon
r_extern
r_int
id|ocp_generic_resume
c_func
(paren
r_struct
id|ocp_device
op_star
id|pdev
)paren
suffix:semicolon
macro_line|#endif&t;&t;&t;&t;/* __OCP_H__ */
macro_line|#endif&t;&t;&t;&t;/* __KERNEL__ */
eof
