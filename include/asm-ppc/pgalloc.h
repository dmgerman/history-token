macro_line|#ifdef __KERNEL__
macro_line|#ifndef _PPC_PGALLOC_H
DECL|macro|_PPC_PGALLOC_H
mdefine_line|#define _PPC_PGALLOC_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/threads.h&gt;
macro_line|#include &lt;asm/processor.h&gt;
multiline_comment|/*&n; * This is handled very differently on the PPC since out page tables&n; * are all 0&squot;s and I want to be able to use these zero&squot;d pages elsewhere&n; * as well - it gives us quite a speedup.&n; *&n; * Note that the SMP/UP versions are the same but we don&squot;t need a&n; * per cpu list of zero pages because we do the zero-ing with the cache&n; * off and the access routines are lock-free but the pgt cache stuff&n; * is per-cpu since it isn&squot;t done with any lock-free access routines&n; * (although I think we need arch-specific routines so I can do lock-free).&n; *&n; * I need to generalize this so we can use it for other arch&squot;s as well.&n; * -- Cort&n; */
macro_line|#ifdef CONFIG_SMP
DECL|macro|quicklists
mdefine_line|#define quicklists&t;cpu_data[smp_processor_id()]
macro_line|#else
DECL|struct|pgtable_cache_struct
r_extern
r_struct
id|pgtable_cache_struct
(brace
DECL|member|pgd_cache
r_int
r_int
op_star
id|pgd_cache
suffix:semicolon
DECL|member|pte_cache
r_int
r_int
op_star
id|pte_cache
suffix:semicolon
DECL|member|pgtable_cache_sz
r_int
r_int
id|pgtable_cache_sz
suffix:semicolon
)brace
id|quicklists
suffix:semicolon
macro_line|#endif
DECL|macro|pgd_quicklist
mdefine_line|#define pgd_quicklist &t;&t;(quicklists.pgd_cache)
DECL|macro|pmd_quicklist
mdefine_line|#define pmd_quicklist &t;&t;((unsigned long *)0)
DECL|macro|pte_quicklist
mdefine_line|#define pte_quicklist &t;&t;(quicklists.pte_cache)
DECL|macro|pgtable_cache_size
mdefine_line|#define pgtable_cache_size &t;(quicklists.pgtable_cache_sz)
r_extern
r_int
r_int
op_star
id|zero_cache
suffix:semicolon
multiline_comment|/* head linked list of pre-zero&squot;d pages */
r_extern
id|atomic_t
id|zero_sz
suffix:semicolon
multiline_comment|/* # currently pre-zero&squot;d pages */
r_extern
id|atomic_t
id|zeropage_hits
suffix:semicolon
multiline_comment|/* # zero&squot;d pages request that we&squot;ve done */
r_extern
id|atomic_t
id|zeropage_calls
suffix:semicolon
multiline_comment|/* # zero&squot;d pages request that&squot;ve been made */
r_extern
id|atomic_t
id|zerototal
suffix:semicolon
multiline_comment|/* # pages zero&squot;d over time */
DECL|macro|zero_quicklist
mdefine_line|#define zero_quicklist     &t;(zero_cache)
DECL|macro|zero_cache_sz
mdefine_line|#define zero_cache_sz  &t; &t;(zero_sz)
DECL|macro|zero_cache_calls
mdefine_line|#define zero_cache_calls &t;(zeropage_calls)
DECL|macro|zero_cache_hits
mdefine_line|#define zero_cache_hits  &t;(zeropage_hits)
DECL|macro|zero_cache_total
mdefine_line|#define zero_cache_total &t;(zerototal)
multiline_comment|/* return a pre-zero&squot;d page from the list, return NULL if none available -- Cort */
r_extern
r_int
r_int
id|get_zero_page_fast
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|__bad_pte
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
suffix:semicolon
DECL|function|get_pgd_slow
r_extern
id|__inline__
id|pgd_t
op_star
id|get_pgd_slow
c_func
(paren
r_void
)paren
(brace
id|pgd_t
op_star
id|ret
suffix:semicolon
r_if
c_cond
(paren
(paren
id|ret
op_assign
(paren
id|pgd_t
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
)paren
op_ne
l_int|NULL
)paren
id|clear_page
c_func
(paren
id|ret
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|get_pgd_fast
r_extern
id|__inline__
id|pgd_t
op_star
id|get_pgd_fast
c_func
(paren
r_void
)paren
(brace
r_int
r_int
op_star
id|ret
suffix:semicolon
r_if
c_cond
(paren
(paren
id|ret
op_assign
id|pgd_quicklist
)paren
op_ne
l_int|NULL
)paren
(brace
id|pgd_quicklist
op_assign
(paren
r_int
r_int
op_star
)paren
(paren
op_star
id|ret
)paren
suffix:semicolon
id|ret
(braket
l_int|0
)braket
op_assign
l_int|0
suffix:semicolon
id|pgtable_cache_size
op_decrement
suffix:semicolon
)brace
r_else
id|ret
op_assign
(paren
r_int
r_int
op_star
)paren
id|get_pgd_slow
c_func
(paren
)paren
suffix:semicolon
r_return
(paren
id|pgd_t
op_star
)paren
id|ret
suffix:semicolon
)brace
DECL|function|free_pgd_fast
r_extern
id|__inline__
r_void
id|free_pgd_fast
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
op_star
(paren
r_int
r_int
op_star
op_star
)paren
id|pgd
op_assign
id|pgd_quicklist
suffix:semicolon
id|pgd_quicklist
op_assign
(paren
r_int
r_int
op_star
)paren
id|pgd
suffix:semicolon
id|pgtable_cache_size
op_increment
suffix:semicolon
)brace
DECL|function|free_pgd_slow
r_extern
id|__inline__
r_void
id|free_pgd_slow
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pgd
)paren
suffix:semicolon
)brace
DECL|macro|pgd_free
mdefine_line|#define pgd_free(pgd)&t;&t;free_pgd_fast(pgd)
DECL|macro|pgd_alloc
mdefine_line|#define pgd_alloc()&t;&t;get_pgd_fast()
multiline_comment|/*&n; * We don&squot;t have any real pmd&squot;s, and this code never triggers because&n; * the pgd will always be present..&n; */
DECL|macro|pmd_alloc_one_fast
mdefine_line|#define pmd_alloc_one_fast(mm, address) ({ BUG(); ((pmd_t *)1); })
DECL|macro|pmd_alloc_one
mdefine_line|#define pmd_alloc_one(mm,address)       ({ BUG(); ((pmd_t *)2); })
DECL|macro|pmd_free
mdefine_line|#define pmd_free(x)                     do { } while (0)
DECL|macro|pgd_populate
mdefine_line|#define pgd_populate(mm, pmd, pte)      BUG()
DECL|function|pte_alloc_one
r_static
r_inline
id|pte_t
op_star
id|pte_alloc_one
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|address
)paren
(brace
id|pte_t
op_star
id|pte
suffix:semicolon
r_extern
r_int
id|mem_init_done
suffix:semicolon
r_extern
r_void
op_star
id|early_get_page
c_func
(paren
r_void
)paren
suffix:semicolon
r_if
c_cond
(paren
id|mem_init_done
)paren
id|pte
op_assign
(paren
id|pte_t
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_else
id|pte
op_assign
(paren
id|pte_t
op_star
)paren
id|early_get_page
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pte
op_ne
l_int|NULL
)paren
id|clear_page
c_func
(paren
id|pte
)paren
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pte_alloc_one_fast
r_static
r_inline
id|pte_t
op_star
id|pte_alloc_one_fast
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|address
)paren
(brace
r_int
r_int
op_star
id|ret
suffix:semicolon
r_if
c_cond
(paren
(paren
id|ret
op_assign
id|pte_quicklist
)paren
op_ne
l_int|NULL
)paren
(brace
id|pte_quicklist
op_assign
(paren
r_int
r_int
op_star
)paren
(paren
op_star
id|ret
)paren
suffix:semicolon
id|ret
(braket
l_int|0
)braket
op_assign
l_int|0
suffix:semicolon
id|pgtable_cache_size
op_decrement
suffix:semicolon
)brace
r_return
(paren
id|pte_t
op_star
)paren
id|ret
suffix:semicolon
)brace
DECL|function|pte_free_fast
r_extern
id|__inline__
r_void
id|pte_free_fast
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
op_star
(paren
r_int
r_int
op_star
op_star
)paren
id|pte
op_assign
id|pte_quicklist
suffix:semicolon
id|pte_quicklist
op_assign
(paren
r_int
r_int
op_star
)paren
id|pte
suffix:semicolon
id|pgtable_cache_size
op_increment
suffix:semicolon
)brace
DECL|function|pte_free_slow
r_extern
id|__inline__
r_void
id|pte_free_slow
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
)brace
DECL|macro|pte_free
mdefine_line|#define pte_free(pte)    pte_free_slow(pte)
DECL|macro|pmd_populate
mdefine_line|#define pmd_populate(mm, pmd, pte)&t;(pmd_val(*(pmd)) = (unsigned long) (pte))
r_extern
r_int
id|do_check_pgt_cache
c_func
(paren
r_int
comma
r_int
)paren
suffix:semicolon
macro_line|#endif /* _PPC_PGALLOC_H */
macro_line|#endif /* __KERNEL__ */
eof
