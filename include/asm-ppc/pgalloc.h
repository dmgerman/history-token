multiline_comment|/*&n; * BK Id: %F% %I% %G% %U% %#%&n; */
macro_line|#ifdef __KERNEL__
macro_line|#ifndef _PPC_PGALLOC_H
DECL|macro|_PPC_PGALLOC_H
mdefine_line|#define _PPC_PGALLOC_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/threads.h&gt;
macro_line|#include &lt;linux/highmem.h&gt;
macro_line|#include &lt;asm/processor.h&gt;
r_extern
r_void
id|__bad_pte
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
suffix:semicolon
DECL|function|pgd_alloc
r_static
r_inline
id|pgd_t
op_star
id|pgd_alloc
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
id|pgd_t
op_star
id|ret
suffix:semicolon
r_if
c_cond
(paren
(paren
id|ret
op_assign
(paren
id|pgd_t
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
)paren
op_ne
l_int|NULL
)paren
id|clear_page
c_func
(paren
id|ret
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|pgd_free
r_extern
id|__inline__
r_void
id|pgd_free
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pgd
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * We don&squot;t have any real pmd&squot;s, and this code never triggers because&n; * the pgd will always be present..&n; */
DECL|macro|pmd_alloc_one
mdefine_line|#define pmd_alloc_one(mm,address)       ({ BUG(); ((pmd_t *)2); })
DECL|macro|pmd_free
mdefine_line|#define pmd_free(x)                     do { } while (0)
DECL|macro|pgd_populate
mdefine_line|#define pgd_populate(mm, pmd, pte)      BUG()
r_static
r_inline
id|pte_t
op_star
DECL|function|pte_alloc_one_kernel
id|pte_alloc_one_kernel
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|address
)paren
(brace
id|pte_t
op_star
id|pte
suffix:semicolon
r_extern
r_int
id|mem_init_done
suffix:semicolon
r_extern
r_void
op_star
id|early_get_page
c_func
(paren
r_void
)paren
suffix:semicolon
r_int
id|timeout
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|mem_init_done
)paren
(brace
r_while
c_loop
(paren
(paren
id|pte
op_assign
(paren
id|pte_t
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
)paren
op_eq
l_int|NULL
op_logical_and
op_increment
id|timeout
OL
l_int|10
)paren
(brace
id|set_current_state
c_func
(paren
id|TASK_UNINTERRUPTIBLE
)paren
suffix:semicolon
id|schedule_timeout
c_func
(paren
id|HZ
)paren
suffix:semicolon
)brace
)brace
r_else
id|pte
op_assign
(paren
id|pte_t
op_star
)paren
id|early_get_page
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pte
op_ne
l_int|NULL
)paren
id|clear_page
c_func
(paren
id|pte
)paren
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
r_static
r_inline
r_struct
id|page
op_star
DECL|function|pte_alloc_one
id|pte_alloc_one
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|address
)paren
(brace
r_struct
id|page
op_star
id|pte
suffix:semicolon
r_int
id|timeout
op_assign
l_int|0
suffix:semicolon
macro_line|#ifdef CONFIG_HIGHPTE
r_int
id|flags
op_assign
id|GFP_KERNEL
op_or
id|__GFP_HIGHMEM
suffix:semicolon
macro_line|#else
r_int
id|flags
op_assign
id|GFP_KERNEL
suffix:semicolon
macro_line|#endif
r_while
c_loop
(paren
(paren
id|pte
op_assign
id|alloc_pages
c_func
(paren
id|flags
comma
l_int|0
)paren
)paren
op_eq
l_int|NULL
)paren
(brace
r_if
c_cond
(paren
op_increment
id|timeout
op_ge
l_int|10
)paren
r_return
l_int|NULL
suffix:semicolon
id|set_current_state
c_func
(paren
id|TASK_UNINTERRUPTIBLE
)paren
suffix:semicolon
id|schedule_timeout
c_func
(paren
id|HZ
)paren
suffix:semicolon
)brace
id|clear_highpage
c_func
(paren
id|pte
)paren
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pte_free_kernel
r_static
r_inline
r_void
id|pte_free_kernel
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
)brace
DECL|function|pte_free
r_static
r_inline
r_void
id|pte_free
c_func
(paren
r_struct
id|page
op_star
id|pte
)paren
(brace
id|__free_page
c_func
(paren
id|pte
)paren
suffix:semicolon
)brace
DECL|macro|pmd_populate_kernel
mdefine_line|#define pmd_populate_kernel(mm, pmd, pte)&t;&bslash;&n;&t;&t;(pmd_val(*(pmd)) = __pa(pte))
DECL|macro|pmd_populate
mdefine_line|#define pmd_populate(mm, pmd, pte)&t;&bslash;&n;&t;&t;(pmd_val(*(pmd)) = ((pte) - mem_map) &lt;&lt; PAGE_SHIFT)
r_extern
r_int
id|do_check_pgt_cache
c_func
(paren
r_int
comma
r_int
)paren
suffix:semicolon
macro_line|#endif /* _PPC_PGALLOC_H */
macro_line|#endif /* __KERNEL__ */
eof
