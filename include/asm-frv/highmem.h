multiline_comment|/* highmem.h: virtual kernel memory mappings for high memory&n; *&n; * Copyright (C) 2004 Red Hat, Inc. All Rights Reserved.&n; * Written by David Howells (dhowells@redhat.com)&n; * - Derived from include/asm-i386/highmem.h&n; *&n; * See Documentation/fujitsu/frv/mmu-layout.txt for more information.&n; *&n; * This program is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License&n; * as published by the Free Software Foundation; either version&n; * 2 of the License, or (at your option) any later version.&n; */
macro_line|#ifndef _ASM_HIGHMEM_H
DECL|macro|_ASM_HIGHMEM_H
mdefine_line|#define _ASM_HIGHMEM_H
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/init.h&gt;
macro_line|#include &lt;asm/mem-layout.h&gt;
macro_line|#include &lt;asm/spr-regs.h&gt;
macro_line|#include &lt;asm/mb-regs.h&gt;
DECL|macro|NR_TLB_LINES
mdefine_line|#define NR_TLB_LINES&t;&t;64&t;/* number of lines in the TLB */
macro_line|#ifndef __ASSEMBLY__
macro_line|#include &lt;linux/interrupt.h&gt;
macro_line|#include &lt;asm/kmap_types.h&gt;
macro_line|#include &lt;asm/pgtable.h&gt;
macro_line|#ifdef CONFIG_DEBUG_HIGHMEM
DECL|macro|HIGHMEM_DEBUG
mdefine_line|#define HIGHMEM_DEBUG 1
macro_line|#else
DECL|macro|HIGHMEM_DEBUG
mdefine_line|#define HIGHMEM_DEBUG 0
macro_line|#endif
multiline_comment|/* declarations for highmem.c */
r_extern
r_int
r_int
id|highstart_pfn
comma
id|highend_pfn
suffix:semicolon
DECL|macro|kmap_prot
mdefine_line|#define kmap_prot PAGE_KERNEL
DECL|macro|kmap_pte
mdefine_line|#define kmap_pte ______kmap_pte_in_TLB
r_extern
id|pte_t
op_star
id|pkmap_page_table
suffix:semicolon
DECL|macro|flush_cache_kmaps
mdefine_line|#define flush_cache_kmaps()  do { } while (0)
multiline_comment|/*&n; * Right now we initialize only a single pte table. It can be extended&n; * easily, subsequent pte tables have to be allocated in one physical&n; * chunk of RAM.&n; */
DECL|macro|LAST_PKMAP
mdefine_line|#define LAST_PKMAP&t;PTRS_PER_PTE
DECL|macro|LAST_PKMAP_MASK
mdefine_line|#define LAST_PKMAP_MASK&t;(LAST_PKMAP - 1)
DECL|macro|PKMAP_NR
mdefine_line|#define PKMAP_NR(virt)&t;((virt - PKMAP_BASE) &gt;&gt; PAGE_SHIFT)
DECL|macro|PKMAP_ADDR
mdefine_line|#define PKMAP_ADDR(nr)&t;(PKMAP_BASE + ((nr) &lt;&lt; PAGE_SHIFT))
r_extern
r_void
op_star
id|kmap_high
c_func
(paren
r_struct
id|page
op_star
id|page
)paren
suffix:semicolon
r_extern
r_void
id|kunmap_high
c_func
(paren
r_struct
id|page
op_star
id|page
)paren
suffix:semicolon
r_extern
r_void
op_star
id|kmap
c_func
(paren
r_struct
id|page
op_star
id|page
)paren
suffix:semicolon
r_extern
r_void
id|kunmap
c_func
(paren
r_struct
id|page
op_star
id|page
)paren
suffix:semicolon
r_extern
r_struct
id|page
op_star
id|kmap_atomic_to_page
c_func
(paren
r_void
op_star
id|ptr
)paren
suffix:semicolon
macro_line|#endif /* !__ASSEMBLY__ */
multiline_comment|/*&n; * The use of kmap_atomic/kunmap_atomic is discouraged - kmap/kunmap&n; * gives a more generic (and caching) interface. But kmap_atomic can&n; * be used in IRQ contexts, so in some (very limited) cases we need&n; * it.&n; */
DECL|macro|KMAP_ATOMIC_CACHE_DAMR
mdefine_line|#define KMAP_ATOMIC_CACHE_DAMR&t;&t;8
macro_line|#ifndef __ASSEMBLY__
DECL|macro|__kmap_atomic_primary
mdefine_line|#define __kmap_atomic_primary(type, paddr, ampr)&t;&t;&t;&t;&t;&t;&bslash;&n;({&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;unsigned long damlr, dampr;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;dampr = paddr | xAMPRx_L | xAMPRx_M | xAMPRx_S | xAMPRx_SS_16Kb | xAMPRx_V;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if (type != __KM_CACHE)&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;asm volatile(&quot;movgs %0,dampr&quot;#ampr :: &quot;r&quot;(dampr));&t;&t;&t;&t;&bslash;&n;&t;else&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;asm volatile(&quot;movgs %0,iampr&quot;#ampr&quot;&bslash;n&quot;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;     &quot;movgs %0,dampr&quot;#ampr&quot;&bslash;n&quot;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;     :: &quot;r&quot;(dampr)&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;     );&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;asm(&quot;movsg damlr&quot;#ampr&quot;,%0&quot; : &quot;=r&quot;(damlr));&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;/*printk(&quot;DAMR&quot;#ampr&quot;: PRIM sl=%d L=%08lx P=%08lx&bslash;n&quot;, type, damlr, dampr);*/&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;(void *) damlr;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;})
DECL|macro|__kmap_atomic_secondary
mdefine_line|#define __kmap_atomic_secondary(slot, paddr)&t;&t;&t;&t;&t;&t;&t;  &bslash;&n;({&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;  &bslash;&n;&t;unsigned long damlr = KMAP_ATOMIC_SECONDARY_FRAME + (slot) * PAGE_SIZE;&t;&t;&t;  &bslash;&n;&t;unsigned long dampr = paddr | xAMPRx_L | xAMPRx_M | xAMPRx_S | xAMPRx_SS_16Kb | xAMPRx_V; &bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;  &bslash;&n;&t;asm volatile(&quot;movgs %0,tplr &bslash;n&quot;&t;&t;&t;&t;&t;&t;&t;&t;  &bslash;&n;&t;&t;     &quot;movgs %1,tppr &bslash;n&quot;&t;&t;&t;&t;&t;&t;&t;&t;  &bslash;&n;&t;&t;     &quot;tlbpr %0,gr0,#2,#1&quot;&t;&t;&t;&t;&t;&t;&t;  &bslash;&n;&t;&t;     : : &quot;r&quot;(damlr), &quot;r&quot;(dampr));&t;&t;&t;&t;&t;&t;  &bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;  &bslash;&n;&t;/*printk(&quot;TLB: SECN sl=%d L=%08lx P=%08lx&bslash;n&quot;, slot, damlr, dampr);*/&t;&t;&t;  &bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;  &bslash;&n;&t;(void *) damlr;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;  &bslash;&n;})
DECL|function|kmap_atomic
r_static
r_inline
r_void
op_star
id|kmap_atomic
c_func
(paren
r_struct
id|page
op_star
id|page
comma
r_enum
id|km_type
id|type
)paren
(brace
r_int
r_int
id|paddr
suffix:semicolon
id|preempt_disable
c_func
(paren
)paren
suffix:semicolon
id|paddr
op_assign
id|page_to_phys
c_func
(paren
id|page
)paren
suffix:semicolon
r_switch
c_cond
(paren
id|type
)paren
(brace
r_case
l_int|0
suffix:colon
r_return
id|__kmap_atomic_primary
c_func
(paren
l_int|0
comma
id|paddr
comma
l_int|2
)paren
suffix:semicolon
r_case
l_int|1
suffix:colon
r_return
id|__kmap_atomic_primary
c_func
(paren
l_int|1
comma
id|paddr
comma
l_int|3
)paren
suffix:semicolon
r_case
l_int|2
suffix:colon
r_return
id|__kmap_atomic_primary
c_func
(paren
l_int|2
comma
id|paddr
comma
l_int|4
)paren
suffix:semicolon
r_case
l_int|3
suffix:colon
r_return
id|__kmap_atomic_primary
c_func
(paren
l_int|3
comma
id|paddr
comma
l_int|5
)paren
suffix:semicolon
r_case
l_int|4
suffix:colon
r_return
id|__kmap_atomic_primary
c_func
(paren
l_int|4
comma
id|paddr
comma
l_int|6
)paren
suffix:semicolon
r_case
l_int|5
suffix:colon
r_return
id|__kmap_atomic_primary
c_func
(paren
l_int|5
comma
id|paddr
comma
l_int|7
)paren
suffix:semicolon
r_case
l_int|6
suffix:colon
r_return
id|__kmap_atomic_primary
c_func
(paren
l_int|6
comma
id|paddr
comma
l_int|8
)paren
suffix:semicolon
r_case
l_int|7
suffix:colon
r_return
id|__kmap_atomic_primary
c_func
(paren
l_int|7
comma
id|paddr
comma
l_int|9
)paren
suffix:semicolon
r_case
l_int|8
suffix:colon
r_return
id|__kmap_atomic_primary
c_func
(paren
l_int|8
comma
id|paddr
comma
l_int|10
)paren
suffix:semicolon
r_case
l_int|9
dot
dot
dot
l_int|9
op_plus
id|NR_TLB_LINES
op_minus
l_int|1
suffix:colon
r_return
id|__kmap_atomic_secondary
c_func
(paren
id|type
op_minus
l_int|9
comma
id|paddr
)paren
suffix:semicolon
r_default
suffix:colon
id|BUG
c_func
(paren
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
)brace
DECL|macro|__kunmap_atomic_primary
mdefine_line|#define __kunmap_atomic_primary(type, ampr)&t;&t;&t;&bslash;&n;do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;asm volatile(&quot;movgs gr0,dampr&quot;#ampr&quot;&bslash;n&quot;);&t;&t;&bslash;&n;&t;if (type == __KM_CACHE)&t;&t;&t;&t;&t;&bslash;&n;&t;&t;asm volatile(&quot;movgs gr0,iampr&quot;#ampr&quot;&bslash;n&quot;);&t;&bslash;&n;} while(0)
DECL|macro|__kunmap_atomic_secondary
mdefine_line|#define __kunmap_atomic_secondary(slot, vaddr)&t;&t;&t;&bslash;&n;do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;asm volatile(&quot;tlbpr %0,gr0,#4,#1&quot; : : &quot;r&quot;(vaddr));&t;&bslash;&n;} while(0)
DECL|function|kunmap_atomic
r_static
r_inline
r_void
id|kunmap_atomic
c_func
(paren
r_void
op_star
id|kvaddr
comma
r_enum
id|km_type
id|type
)paren
(brace
r_switch
c_cond
(paren
id|type
)paren
(brace
r_case
l_int|0
suffix:colon
id|__kunmap_atomic_primary
c_func
(paren
l_int|0
comma
l_int|2
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
id|__kunmap_atomic_primary
c_func
(paren
l_int|1
comma
l_int|3
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|__kunmap_atomic_primary
c_func
(paren
l_int|2
comma
l_int|4
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|3
suffix:colon
id|__kunmap_atomic_primary
c_func
(paren
l_int|3
comma
l_int|5
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|4
suffix:colon
id|__kunmap_atomic_primary
c_func
(paren
l_int|4
comma
l_int|6
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|5
suffix:colon
id|__kunmap_atomic_primary
c_func
(paren
l_int|5
comma
l_int|7
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|6
suffix:colon
id|__kunmap_atomic_primary
c_func
(paren
l_int|6
comma
l_int|8
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|7
suffix:colon
id|__kunmap_atomic_primary
c_func
(paren
l_int|7
comma
l_int|9
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|8
suffix:colon
id|__kunmap_atomic_primary
c_func
(paren
l_int|8
comma
l_int|10
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|9
dot
dot
dot
l_int|9
op_plus
id|NR_TLB_LINES
op_minus
l_int|1
suffix:colon
id|__kunmap_atomic_secondary
c_func
(paren
id|type
op_minus
l_int|9
comma
id|kvaddr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|BUG
c_func
(paren
)paren
suffix:semicolon
)brace
id|preempt_enable
c_func
(paren
)paren
suffix:semicolon
)brace
macro_line|#endif /* !__ASSEMBLY__ */
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _ASM_HIGHMEM_H */
eof
