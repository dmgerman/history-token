multiline_comment|/* atomic.h: atomic operation emulation for FR-V&n; *&n; * For an explanation of how atomic ops work in this arch, see:&n; *   Documentation/fujitsu/frv/atomic-ops.txt&n; *&n; * Copyright (C) 2004 Red Hat, Inc. All Rights Reserved.&n; * Written by David Howells (dhowells@redhat.com)&n; *&n; * This program is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License&n; * as published by the Free Software Foundation; either version&n; * 2 of the License, or (at your option) any later version.&n; */
macro_line|#ifndef _ASM_ATOMIC_H
DECL|macro|_ASM_ATOMIC_H
mdefine_line|#define _ASM_ATOMIC_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;asm/spr-regs.h&gt;
macro_line|#ifdef CONFIG_SMP
macro_line|#error not SMP safe
macro_line|#endif
multiline_comment|/*&n; * Atomic operations that C can&squot;t guarantee us.  Useful for&n; * resource counting etc..&n; *&n; * We do not have SMP systems, so we don&squot;t have to deal with that.&n; */
multiline_comment|/* Atomic operations are already serializing */
DECL|macro|smp_mb__before_atomic_dec
mdefine_line|#define smp_mb__before_atomic_dec()&t;barrier()
DECL|macro|smp_mb__after_atomic_dec
mdefine_line|#define smp_mb__after_atomic_dec()&t;barrier()
DECL|macro|smp_mb__before_atomic_inc
mdefine_line|#define smp_mb__before_atomic_inc()&t;barrier()
DECL|macro|smp_mb__after_atomic_inc
mdefine_line|#define smp_mb__after_atomic_inc()&t;barrier()
r_typedef
r_struct
(brace
DECL|member|counter
r_int
id|counter
suffix:semicolon
DECL|typedef|atomic_t
)brace
id|atomic_t
suffix:semicolon
DECL|macro|ATOMIC_INIT
mdefine_line|#define ATOMIC_INIT(i)&t;&t;{ (i) }
DECL|macro|atomic_read
mdefine_line|#define atomic_read(v)&t;&t;((v)-&gt;counter)
DECL|macro|atomic_set
mdefine_line|#define atomic_set(v, i)&t;(((v)-&gt;counter) = (i))
macro_line|#ifndef CONFIG_FRV_OUTOFLINE_ATOMIC_OPS
DECL|function|atomic_add_return
r_static
r_inline
r_int
id|atomic_add_return
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
r_int
r_int
id|val
suffix:semicolon
id|asm
c_func
(paren
l_string|&quot;0:&t;&t;&t;&t;&t;&t;&bslash;n&quot;
l_string|&quot;&t;orcc&t;&t;gr0,gr0,gr0,icc3&t;&bslash;n&quot;
multiline_comment|/* set ICC3.Z */
l_string|&quot;&t;ckeq&t;&t;icc3,cc7&t;&t;&bslash;n&quot;
l_string|&quot;&t;ld.p&t;&t;%M0,%1&t;&t;&t;&bslash;n&quot;
multiline_comment|/* LD.P/ORCR must be atomic */
l_string|&quot;&t;orcr&t;&t;cc7,cc7,cc3&t;&t;&bslash;n&quot;
multiline_comment|/* set CC3 to true */
l_string|&quot;&t;add%I2&t;&t;%1,%2,%1&t;&t;&bslash;n&quot;
l_string|&quot;&t;cst.p&t;&t;%1,%M0&t;&t;,cc3,#1&t;&bslash;n&quot;
l_string|&quot;&t;corcc&t;&t;gr29,gr29,gr0&t;,cc3,#1&t;&bslash;n&quot;
multiline_comment|/* clear ICC3.Z if store happens */
l_string|&quot;&t;beq&t;&t;icc3,#0,0b&t;&t;&bslash;n&quot;
suffix:colon
l_string|&quot;+U&quot;
(paren
id|v-&gt;counter
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|val
)paren
suffix:colon
l_string|&quot;NPr&quot;
(paren
id|i
)paren
suffix:colon
l_string|&quot;memory&quot;
comma
l_string|&quot;cc7&quot;
comma
l_string|&quot;cc3&quot;
comma
l_string|&quot;icc3&quot;
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
DECL|function|atomic_sub_return
r_static
r_inline
r_int
id|atomic_sub_return
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
r_int
r_int
id|val
suffix:semicolon
id|asm
c_func
(paren
l_string|&quot;0:&t;&t;&t;&t;&t;&t;&bslash;n&quot;
l_string|&quot;&t;orcc&t;&t;gr0,gr0,gr0,icc3&t;&bslash;n&quot;
multiline_comment|/* set ICC3.Z */
l_string|&quot;&t;ckeq&t;&t;icc3,cc7&t;&t;&bslash;n&quot;
l_string|&quot;&t;ld.p&t;&t;%M0,%1&t;&t;&t;&bslash;n&quot;
multiline_comment|/* LD.P/ORCR must be atomic */
l_string|&quot;&t;orcr&t;&t;cc7,cc7,cc3&t;&t;&bslash;n&quot;
multiline_comment|/* set CC3 to true */
l_string|&quot;&t;sub%I2&t;&t;%1,%2,%1&t;&t;&bslash;n&quot;
l_string|&quot;&t;cst.p&t;&t;%1,%M0&t;&t;,cc3,#1&t;&bslash;n&quot;
l_string|&quot;&t;corcc&t;&t;gr29,gr29,gr0&t;,cc3,#1&t;&bslash;n&quot;
multiline_comment|/* clear ICC3.Z if store happens */
l_string|&quot;&t;beq&t;&t;icc3,#0,0b&t;&t;&bslash;n&quot;
suffix:colon
l_string|&quot;+U&quot;
(paren
id|v-&gt;counter
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|val
)paren
suffix:colon
l_string|&quot;NPr&quot;
(paren
id|i
)paren
suffix:colon
l_string|&quot;memory&quot;
comma
l_string|&quot;cc7&quot;
comma
l_string|&quot;cc3&quot;
comma
l_string|&quot;icc3&quot;
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
macro_line|#else
r_extern
r_int
id|atomic_add_return
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
suffix:semicolon
r_extern
r_int
id|atomic_sub_return
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
suffix:semicolon
macro_line|#endif
DECL|function|atomic_add_negative
r_static
r_inline
r_int
id|atomic_add_negative
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
r_return
id|atomic_add_return
c_func
(paren
id|i
comma
id|v
)paren
OL
l_int|0
suffix:semicolon
)brace
DECL|function|atomic_add
r_static
r_inline
r_void
id|atomic_add
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
id|atomic_add_return
c_func
(paren
id|i
comma
id|v
)paren
suffix:semicolon
)brace
DECL|function|atomic_sub
r_static
r_inline
r_void
id|atomic_sub
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
id|atomic_sub_return
c_func
(paren
id|i
comma
id|v
)paren
suffix:semicolon
)brace
DECL|function|atomic_inc
r_static
r_inline
r_void
id|atomic_inc
c_func
(paren
id|atomic_t
op_star
id|v
)paren
(brace
id|atomic_add_return
c_func
(paren
l_int|1
comma
id|v
)paren
suffix:semicolon
)brace
DECL|function|atomic_dec
r_static
r_inline
r_void
id|atomic_dec
c_func
(paren
id|atomic_t
op_star
id|v
)paren
(brace
id|atomic_sub_return
c_func
(paren
l_int|1
comma
id|v
)paren
suffix:semicolon
)brace
DECL|macro|atomic_dec_return
mdefine_line|#define atomic_dec_return(v)&t;&t;atomic_sub_return(1, (v))
DECL|macro|atomic_inc_return
mdefine_line|#define atomic_inc_return(v)&t;&t;atomic_add_return(1, (v))
DECL|macro|atomic_sub_and_test
mdefine_line|#define atomic_sub_and_test(i,v)&t;(atomic_sub_return((i), (v)) == 0)
DECL|macro|atomic_dec_and_test
mdefine_line|#define atomic_dec_and_test(v)&t;&t;(atomic_sub_return(1, (v)) == 0)
DECL|macro|atomic_inc_and_test
mdefine_line|#define atomic_inc_and_test(v)&t;&t;(atomic_add_return(1, (v)) == 0)
macro_line|#ifndef CONFIG_FRV_OUTOFLINE_ATOMIC_OPS
r_static
r_inline
DECL|function|atomic_test_and_ANDNOT_mask
r_int
r_int
id|atomic_test_and_ANDNOT_mask
c_func
(paren
r_int
r_int
id|mask
comma
r_volatile
r_int
r_int
op_star
id|v
)paren
(brace
r_int
r_int
id|old
comma
id|tmp
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;0:&t;&t;&t;&t;&t;&t;&bslash;n&quot;
l_string|&quot;&t;orcc&t;&t;gr0,gr0,gr0,icc3&t;&bslash;n&quot;
multiline_comment|/* set ICC3.Z */
l_string|&quot;&t;ckeq&t;&t;icc3,cc7&t;&t;&bslash;n&quot;
l_string|&quot;&t;ld.p&t;&t;%M0,%1&t;&t;&t;&bslash;n&quot;
multiline_comment|/* LD.P/ORCR are atomic */
l_string|&quot;&t;orcr&t;&t;cc7,cc7,cc3&t;&t;&bslash;n&quot;
multiline_comment|/* set CC3 to true */
l_string|&quot;&t;and%I3&t;&t;%1,%3,%2&t;&t;&bslash;n&quot;
l_string|&quot;&t;cst.p&t;&t;%2,%M0&t;&t;,cc3,#1&t;&bslash;n&quot;
multiline_comment|/* if store happens... */
l_string|&quot;&t;corcc&t;&t;gr29,gr29,gr0&t;,cc3,#1&t;&bslash;n&quot;
multiline_comment|/* ... clear ICC3.Z */
l_string|&quot;&t;beq&t;&t;icc3,#0,0b&t;&t;&bslash;n&quot;
suffix:colon
l_string|&quot;+U&quot;
(paren
op_star
id|v
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|old
)paren
comma
l_string|&quot;=r&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;NPr&quot;
(paren
op_complement
id|mask
)paren
suffix:colon
l_string|&quot;memory&quot;
comma
l_string|&quot;cc7&quot;
comma
l_string|&quot;cc3&quot;
comma
l_string|&quot;icc3&quot;
)paren
suffix:semicolon
r_return
id|old
suffix:semicolon
)brace
r_static
r_inline
DECL|function|atomic_test_and_OR_mask
r_int
r_int
id|atomic_test_and_OR_mask
c_func
(paren
r_int
r_int
id|mask
comma
r_volatile
r_int
r_int
op_star
id|v
)paren
(brace
r_int
r_int
id|old
comma
id|tmp
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;0:&t;&t;&t;&t;&t;&t;&bslash;n&quot;
l_string|&quot;&t;orcc&t;&t;gr0,gr0,gr0,icc3&t;&bslash;n&quot;
multiline_comment|/* set ICC3.Z */
l_string|&quot;&t;ckeq&t;&t;icc3,cc7&t;&t;&bslash;n&quot;
l_string|&quot;&t;ld.p&t;&t;%M0,%1&t;&t;&t;&bslash;n&quot;
multiline_comment|/* LD.P/ORCR are atomic */
l_string|&quot;&t;orcr&t;&t;cc7,cc7,cc3&t;&t;&bslash;n&quot;
multiline_comment|/* set CC3 to true */
l_string|&quot;&t;or%I3&t;&t;%1,%3,%2&t;&t;&bslash;n&quot;
l_string|&quot;&t;cst.p&t;&t;%2,%M0&t;&t;,cc3,#1&t;&bslash;n&quot;
multiline_comment|/* if store happens... */
l_string|&quot;&t;corcc&t;&t;gr29,gr29,gr0&t;,cc3,#1&t;&bslash;n&quot;
multiline_comment|/* ... clear ICC3.Z */
l_string|&quot;&t;beq&t;&t;icc3,#0,0b&t;&t;&bslash;n&quot;
suffix:colon
l_string|&quot;+U&quot;
(paren
op_star
id|v
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|old
)paren
comma
l_string|&quot;=r&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;NPr&quot;
(paren
id|mask
)paren
suffix:colon
l_string|&quot;memory&quot;
comma
l_string|&quot;cc7&quot;
comma
l_string|&quot;cc3&quot;
comma
l_string|&quot;icc3&quot;
)paren
suffix:semicolon
r_return
id|old
suffix:semicolon
)brace
r_static
r_inline
DECL|function|atomic_test_and_XOR_mask
r_int
r_int
id|atomic_test_and_XOR_mask
c_func
(paren
r_int
r_int
id|mask
comma
r_volatile
r_int
r_int
op_star
id|v
)paren
(brace
r_int
r_int
id|old
comma
id|tmp
suffix:semicolon
id|asm
r_volatile
(paren
l_string|&quot;0:&t;&t;&t;&t;&t;&t;&bslash;n&quot;
l_string|&quot;&t;orcc&t;&t;gr0,gr0,gr0,icc3&t;&bslash;n&quot;
multiline_comment|/* set ICC3.Z */
l_string|&quot;&t;ckeq&t;&t;icc3,cc7&t;&t;&bslash;n&quot;
l_string|&quot;&t;ld.p&t;&t;%M0,%1&t;&t;&t;&bslash;n&quot;
multiline_comment|/* LD.P/ORCR are atomic */
l_string|&quot;&t;orcr&t;&t;cc7,cc7,cc3&t;&t;&bslash;n&quot;
multiline_comment|/* set CC3 to true */
l_string|&quot;&t;xor%I3&t;&t;%1,%3,%2&t;&t;&bslash;n&quot;
l_string|&quot;&t;cst.p&t;&t;%2,%M0&t;&t;,cc3,#1&t;&bslash;n&quot;
multiline_comment|/* if store happens... */
l_string|&quot;&t;corcc&t;&t;gr29,gr29,gr0&t;,cc3,#1&t;&bslash;n&quot;
multiline_comment|/* ... clear ICC3.Z */
l_string|&quot;&t;beq&t;&t;icc3,#0,0b&t;&t;&bslash;n&quot;
suffix:colon
l_string|&quot;+U&quot;
(paren
op_star
id|v
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|old
)paren
comma
l_string|&quot;=r&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;NPr&quot;
(paren
id|mask
)paren
suffix:colon
l_string|&quot;memory&quot;
comma
l_string|&quot;cc7&quot;
comma
l_string|&quot;cc3&quot;
comma
l_string|&quot;icc3&quot;
)paren
suffix:semicolon
r_return
id|old
suffix:semicolon
)brace
macro_line|#else
r_extern
r_int
r_int
id|atomic_test_and_ANDNOT_mask
c_func
(paren
r_int
r_int
id|mask
comma
r_volatile
r_int
r_int
op_star
id|v
)paren
suffix:semicolon
r_extern
r_int
r_int
id|atomic_test_and_OR_mask
c_func
(paren
r_int
r_int
id|mask
comma
r_volatile
r_int
r_int
op_star
id|v
)paren
suffix:semicolon
r_extern
r_int
r_int
id|atomic_test_and_XOR_mask
c_func
(paren
r_int
r_int
id|mask
comma
r_volatile
r_int
r_int
op_star
id|v
)paren
suffix:semicolon
macro_line|#endif
DECL|macro|atomic_clear_mask
mdefine_line|#define atomic_clear_mask(mask, v)&t;atomic_test_and_ANDNOT_mask((mask), (v))
DECL|macro|atomic_set_mask
mdefine_line|#define atomic_set_mask(mask, v)&t;atomic_test_and_OR_mask((mask), (v))
multiline_comment|/*****************************************************************************/
multiline_comment|/*&n; * exchange value with memory&n; */
macro_line|#ifndef CONFIG_FRV_OUTOFLINE_ATOMIC_OPS
DECL|macro|xchg
mdefine_line|#define xchg(ptr, x)&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;({&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;__typeof__(ptr) __xg_ptr = (ptr);&t;&t;&t;&t;&t;&bslash;&n;&t;__typeof__(*(ptr)) __xg_orig;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;switch (sizeof(__xg_orig)) {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;case 1:&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;asm volatile(&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&quot;0:&t;&t;&t;&t;&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;orcc&t;&t;gr0,gr0,gr0,icc3&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;ckeq&t;&t;icc3,cc7&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;ldub.p&t;&t;%M0,%1&t;&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;orcr&t;&t;cc7,cc7,cc3&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;cstb.p&t;&t;%2,%M0&t;&t;,cc3,#1&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;corcc&t;&t;gr29,gr29,gr0&t;,cc3,#1&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;beq&t;&t;icc3,#0,0b&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;: &quot;+U&quot;(*__xg_ptr), &quot;=&amp;r&quot;(__xg_orig)&t;&t;&t;&bslash;&n;&t;&t;&t;: &quot;r&quot;(x)&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;: &quot;memory&quot;, &quot;cc7&quot;, &quot;cc3&quot;, &quot;icc3&quot;&t;&t;&t;&bslash;&n;&t;&t;&t;);&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;case 2:&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;asm volatile(&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&quot;0:&t;&t;&t;&t;&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;orcc&t;&t;gr0,gr0,gr0,icc3&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;ckeq&t;&t;icc3,cc7&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;lduh.p&t;&t;%M0,%1&t;&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;orcr&t;&t;cc7,cc7,cc3&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;csth.p&t;&t;%2,%M0&t;&t;,cc3,#1&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;corcc&t;&t;gr29,gr29,gr0&t;,cc3,#1&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;beq&t;&t;icc3,#0,0b&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;: &quot;+U&quot;(*__xg_ptr), &quot;=&amp;r&quot;(__xg_orig)&t;&t;&t;&bslash;&n;&t;&t;&t;: &quot;r&quot;(x)&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;: &quot;memory&quot;, &quot;cc7&quot;, &quot;cc3&quot;, &quot;icc3&quot;&t;&t;&t;&bslash;&n;&t;&t;&t;);&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;case 4:&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;asm volatile(&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&quot;0:&t;&t;&t;&t;&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;orcc&t;&t;gr0,gr0,gr0,icc3&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;ckeq&t;&t;icc3,cc7&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;ld.p&t;&t;%M0,%1&t;&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;orcr&t;&t;cc7,cc7,cc3&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;cst.p&t;&t;%2,%M0&t;&t;,cc3,#1&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;corcc&t;&t;gr29,gr29,gr0&t;,cc3,#1&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;beq&t;&t;icc3,#0,0b&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;: &quot;+U&quot;(*__xg_ptr), &quot;=&amp;r&quot;(__xg_orig)&t;&t;&t;&bslash;&n;&t;&t;&t;: &quot;r&quot;(x)&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;: &quot;memory&quot;, &quot;cc7&quot;, &quot;cc3&quot;, &quot;icc3&quot;&t;&t;&t;&bslash;&n;&t;&t;&t;);&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;default:&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__xg_orig = 0;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;asm volatile(&quot;break&quot;);&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;__xg_orig;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;})
macro_line|#else
r_extern
r_uint8
id|__xchg_8
(paren
r_uint8
id|i
comma
r_volatile
r_void
op_star
id|v
)paren
suffix:semicolon
r_extern
r_uint16
id|__xchg_16
c_func
(paren
r_uint16
id|i
comma
r_volatile
r_void
op_star
id|v
)paren
suffix:semicolon
r_extern
r_uint32
id|__xchg_32
c_func
(paren
r_uint32
id|i
comma
r_volatile
r_void
op_star
id|v
)paren
suffix:semicolon
DECL|macro|xchg
mdefine_line|#define xchg(ptr, x)&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;({&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;__typeof__(ptr) __xg_ptr = (ptr);&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;__typeof__(*(ptr)) __xg_orig;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;switch (sizeof(__xg_orig)) {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;case 1: __xg_orig = (__typeof__(*(ptr))) __xchg_8 ((uint8_t)  x, __xg_ptr);&t;break;&t;&bslash;&n;&t;case 2: __xg_orig = (__typeof__(*(ptr))) __xchg_16((uint16_t) x, __xg_ptr);&t;break;&t;&bslash;&n;&t;case 4: __xg_orig = (__typeof__(*(ptr))) __xchg_32((uint32_t) x, __xg_ptr);&t;break;&t;&bslash;&n;&t;default:&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__xg_orig = 0;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;asm volatile(&quot;break&quot;);&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;__xg_orig;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;})
macro_line|#endif
DECL|macro|tas
mdefine_line|#define tas(ptr) (xchg((ptr), 1))
multiline_comment|/*****************************************************************************/
multiline_comment|/*&n; * compare and conditionally exchange value with memory&n; * - if (*ptr == test) then orig = *ptr; *ptr = test;&n; * - if (*ptr != test) then orig = *ptr;&n; */
macro_line|#ifndef CONFIG_FRV_OUTOFLINE_ATOMIC_OPS
DECL|macro|cmpxchg
mdefine_line|#define cmpxchg(ptr, test, new)&t;&t;&t;&t;&t;&t;&t;&bslash;&n;({&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;__typeof__(ptr) __xg_ptr = (ptr);&t;&t;&t;&t;&t;&bslash;&n;&t;__typeof__(*(ptr)) __xg_orig, __xg_tmp;&t;&t;&t;&t;&t;&bslash;&n;&t;__typeof__(*(ptr)) __xg_test = (test);&t;&t;&t;&t;&t;&bslash;&n;&t;__typeof__(*(ptr)) __xg_new = (new);&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;switch (sizeof(__xg_orig)) {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;case 1:&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;asm volatile(&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&quot;0:&t;&t;&t;&t;&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;orcc&t;&t;gr0,gr0,gr0,icc3&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;ckeq&t;&t;icc3,cc7&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;ldub.p&t;&t;%M0,%1&t;&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;orcr&t;&t;cc7,cc7,cc3&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;sub%I4&t;&t;%1,%4,%2&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;sllcc&t;&t;%2,#24,gr0,icc0&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;bne&t;&t;icc0,#0,1f&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;cstb.p&t;&t;%3,%M0&t;&t;,cc3,#1&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;corcc&t;&t;gr29,gr29,gr0&t;,cc3,#1&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;beq&t;&t;icc3,#0,0b&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;1:&t;&t;&t;&t;&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;: &quot;+U&quot;(*__xg_ptr), &quot;=&amp;r&quot;(__xg_orig), &quot;=&amp;r&quot;(__xg_tmp)&t;&bslash;&n;&t;&t;&t;: &quot;r&quot;(__xg_new), &quot;NPr&quot;(__xg_test)&t;&t;&t;&bslash;&n;&t;&t;&t;: &quot;memory&quot;, &quot;cc7&quot;, &quot;cc3&quot;, &quot;icc3&quot;, &quot;icc0&quot;&t;&t;&bslash;&n;&t;&t;&t;);&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;case 2:&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;asm volatile(&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&quot;0:&t;&t;&t;&t;&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;orcc&t;&t;gr0,gr0,gr0,icc3&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;ckeq&t;&t;icc3,cc7&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;lduh.p&t;&t;%M0,%1&t;&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;orcr&t;&t;cc7,cc7,cc3&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;sub%I4&t;&t;%1,%4,%2&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;sllcc&t;&t;%2,#16,gr0,icc0&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;bne&t;&t;icc0,#0,1f&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;csth.p&t;&t;%3,%M0&t;&t;,cc3,#1&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;corcc&t;&t;gr29,gr29,gr0&t;,cc3,#1&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;beq&t;&t;icc3,#0,0b&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;1:&t;&t;&t;&t;&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;: &quot;+U&quot;(*__xg_ptr), &quot;=&amp;r&quot;(__xg_orig), &quot;=&amp;r&quot;(__xg_tmp)&t;&bslash;&n;&t;&t;&t;: &quot;r&quot;(__xg_new), &quot;NPr&quot;(__xg_test)&t;&t;&t;&bslash;&n;&t;&t;&t;: &quot;memory&quot;, &quot;cc7&quot;, &quot;cc3&quot;, &quot;icc3&quot;, &quot;icc0&quot;&t;&t;&bslash;&n;&t;&t;&t;);&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;case 4:&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;asm volatile(&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&quot;0:&t;&t;&t;&t;&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;orcc&t;&t;gr0,gr0,gr0,icc3&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;ckeq&t;&t;icc3,cc7&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;ld.p&t;&t;%M0,%1&t;&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;orcr&t;&t;cc7,cc7,cc3&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;sub%I4cc&t;%1,%4,%2,icc0&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;bne&t;&t;icc0,#0,1f&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;cst.p&t;&t;%3,%M0&t;&t;,cc3,#1&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;corcc&t;&t;gr29,gr29,gr0&t;,cc3,#1&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;&t;beq&t;&t;icc3,#0,0b&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;&quot;1:&t;&t;&t;&t;&t;&t;&bslash;n&quot;&t;&bslash;&n;&t;&t;&t;: &quot;+U&quot;(*__xg_ptr), &quot;=&amp;r&quot;(__xg_orig), &quot;=&amp;r&quot;(__xg_tmp)&t;&bslash;&n;&t;&t;&t;: &quot;r&quot;(__xg_new), &quot;NPr&quot;(__xg_test)&t;&t;&t;&bslash;&n;&t;&t;&t;: &quot;memory&quot;, &quot;cc7&quot;, &quot;cc3&quot;, &quot;icc3&quot;, &quot;icc0&quot;&t;&t;&bslash;&n;&t;&t;&t;);&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;default:&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__xg_orig = 0;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;asm volatile(&quot;break&quot;);&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;__xg_orig;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;})
macro_line|#else
r_extern
r_uint8
id|__cmpxchg_8
(paren
r_uint8
op_star
id|v
comma
r_uint8
id|test
comma
r_uint8
r_new
)paren
suffix:semicolon
r_extern
r_uint16
id|__cmpxchg_16
c_func
(paren
r_uint16
op_star
id|v
comma
r_uint16
id|test
comma
r_uint16
r_new
)paren
suffix:semicolon
r_extern
r_uint32
id|__cmpxchg_32
c_func
(paren
r_uint32
op_star
id|v
comma
r_uint32
id|test
comma
r_uint32
r_new
)paren
suffix:semicolon
DECL|macro|cmpxchg
mdefine_line|#define cmpxchg(ptr, test, new)&t;&t;&t;&t;&t;&t;&t;&bslash;&n;({&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;__typeof__(ptr) __xg_ptr = (ptr);&t;&t;&t;&t;&t;&bslash;&n;&t;__typeof__(*(ptr)) __xg_orig;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;__typeof__(*(ptr)) __xg_test = (test);&t;&t;&t;&t;&t;&bslash;&n;&t;__typeof__(*(ptr)) __xg_new = (new);&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;switch (sizeof(__xg_orig)) {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;case 1: __xg_orig = __cmpxchg_8 (__xg_ptr, __xg_test, __xg_new); break;&t;&bslash;&n;&t;case 2: __xg_orig = __cmpxchg_16(__xg_ptr, __xg_test, __xg_new); break;&t;&bslash;&n;&t;case 4: __xg_orig = __cmpxchg_32(__xg_ptr, __xg_test, __xg_new); break;&t;&bslash;&n;&t;default:&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__xg_orig = 0;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;asm volatile(&quot;break&quot;);&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;__xg_orig;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;})
macro_line|#endif
macro_line|#endif /* _ASM_ATOMIC_H */
eof
