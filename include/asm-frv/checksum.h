multiline_comment|/* checksum.h: FRV checksumming&n; *&n; * Copyright (C) 2004 Red Hat, Inc. All Rights Reserved.&n; * Written by David Howells (dhowells@redhat.com)&n; *&n; * This program is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License&n; * as published by the Free Software Foundation; either version&n; * 2 of the License, or (at your option) any later version.&n; */
macro_line|#ifndef _ASM_CHECKSUM_H
DECL|macro|_ASM_CHECKSUM_H
mdefine_line|#define _ASM_CHECKSUM_H
macro_line|#include &lt;linux/in6.h&gt;
multiline_comment|/*&n; * computes the checksum of a memory block at buff, length len,&n; * and adds in &quot;sum&quot; (32-bit)&n; *&n; * returns a 32-bit number suitable for feeding into itself&n; * or csum_tcpudp_magic&n; *&n; * this function must be called with even lengths, except&n; * for the last fragment, which may be odd&n; *&n; * it&squot;s best to have buff aligned on a 32-bit boundary&n; */
r_int
r_int
id|csum_partial
c_func
(paren
r_const
r_int
r_char
op_star
id|buff
comma
r_int
id|len
comma
r_int
r_int
id|sum
)paren
suffix:semicolon
multiline_comment|/*&n; * the same as csum_partial, but copies from src while it&n; * checksums&n; *&n; * here even more important to align src and dst on a 32-bit (or even&n; * better 64-bit) boundary&n; */
r_int
r_int
id|csum_partial_copy
c_func
(paren
r_const
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
id|sum
)paren
suffix:semicolon
multiline_comment|/*&n; * the same as csum_partial_copy, but copies from user space.&n; *&n; * here even more important to align src and dst on a 32-bit (or even&n; * better 64-bit) boundary&n; */
r_extern
r_int
r_int
id|csum_partial_copy_from_user
c_func
(paren
r_const
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
id|sum
comma
r_int
op_star
id|csum_err
)paren
suffix:semicolon
DECL|macro|csum_partial_copy_nocheck
mdefine_line|#define csum_partial_copy_nocheck(src, dst, len, sum)&t;&bslash;&n;&t;csum_partial_copy((src), (dst), (len), (sum))
multiline_comment|/*&n; *&t;This is a version of ip_compute_csum() optimized for IP headers,&n; *&t;which always checksum on 4 octet boundaries.&n; *&n; */
r_static
r_inline
DECL|function|ip_fast_csum
r_int
r_int
id|ip_fast_csum
c_func
(paren
r_int
r_char
op_star
id|iph
comma
r_int
r_int
id|ihl
)paren
(brace
r_int
r_int
id|tmp
comma
id|inc
comma
id|sum
op_assign
l_int|0
suffix:semicolon
id|asm
c_func
(paren
l_string|&quot;&t;addcc&t;&t;gr0,gr0,gr0,icc0&bslash;n&quot;
multiline_comment|/* clear icc0.C */
l_string|&quot;&t;subi&t;&t;%1,#4,%1&t;&bslash;n&quot;
l_string|&quot;0:&t;&t;&t;&t;&t;&bslash;n&quot;
l_string|&quot;&t;ldu.p&t;&t;@(%1,%3),%4&t;&bslash;n&quot;
l_string|&quot;&t;subicc&t;&t;%2,#1,%2,icc1&t;&bslash;n&quot;
l_string|&quot;&t;addxcc.p&t;%4,%0,%0,icc0&t;&bslash;n&quot;
l_string|&quot;&t;bhi&t;&t;icc1,#2,0b&t;&bslash;n&quot;
multiline_comment|/* fold the 33-bit result into 16-bits */
l_string|&quot;&t;addxcc&t;&t;gr0,%0,%0,icc0&t;&bslash;n&quot;
l_string|&quot;&t;srli&t;&t;%0,#16,%1&t;&bslash;n&quot;
l_string|&quot;&t;sethi&t;&t;#0,%0&t;&t;&bslash;n&quot;
l_string|&quot;&t;add&t;&t;%1,%0,%0&t;&bslash;n&quot;
l_string|&quot;&t;srli&t;&t;%0,#16,%1&t;&bslash;n&quot;
l_string|&quot;&t;add&t;&t;%1,%0,%0&t;&bslash;n&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|sum
)paren
comma
l_string|&quot;=r&quot;
(paren
id|iph
)paren
comma
l_string|&quot;=r&quot;
(paren
id|ihl
)paren
comma
l_string|&quot;=r&quot;
(paren
id|inc
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|sum
)paren
comma
l_string|&quot;1&quot;
(paren
id|iph
)paren
comma
l_string|&quot;2&quot;
(paren
id|ihl
)paren
comma
l_string|&quot;3&quot;
(paren
l_int|4
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
(paren
r_volatile
r_struct
(brace
r_int
id|_
(braket
l_int|100
)braket
suffix:semicolon
)brace
op_star
)paren
id|iph
)paren
suffix:colon
l_string|&quot;icc0&quot;
comma
l_string|&quot;icc1&quot;
)paren
suffix:semicolon
r_return
op_complement
id|sum
suffix:semicolon
)brace
multiline_comment|/*&n; *&t;Fold a partial checksum&n; */
DECL|function|csum_fold
r_static
r_inline
r_int
r_int
id|csum_fold
c_func
(paren
r_int
r_int
id|sum
)paren
(brace
r_int
r_int
id|tmp
suffix:semicolon
id|asm
c_func
(paren
l_string|&quot;&t;srli&t;&t;%0,#16,%1&t;&bslash;n&quot;
l_string|&quot;&t;sethi&t;&t;#0,%0&t;&t;&bslash;n&quot;
l_string|&quot;&t;add&t;&t;%1,%0,%0&t;&bslash;n&quot;
l_string|&quot;&t;srli&t;&t;%0,#16,%1&t;&bslash;n&quot;
l_string|&quot;&t;add&t;&t;%1,%0,%0&t;&bslash;n&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|sum
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|sum
)paren
)paren
suffix:semicolon
r_return
op_complement
id|sum
suffix:semicolon
)brace
multiline_comment|/*&n; * computes the checksum of the TCP/UDP pseudo-header&n; * returns a 16-bit checksum, already complemented&n; */
r_static
r_inline
r_int
r_int
DECL|function|csum_tcpudp_nofold
id|csum_tcpudp_nofold
c_func
(paren
r_int
r_int
id|saddr
comma
r_int
r_int
id|daddr
comma
r_int
r_int
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
id|asm
c_func
(paren
l_string|&quot;&t;addcc&t;&t;%1,%0,%0,icc0&t;&bslash;n&quot;
l_string|&quot;&t;addxcc&t;&t;%2,%0,%0,icc0&t;&bslash;n&quot;
l_string|&quot;&t;addxcc&t;&t;%3,%0,%0,icc0&t;&bslash;n&quot;
l_string|&quot;&t;addxcc&t;&t;gr0,%0,%0,icc0&t;&bslash;n&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|daddr
)paren
comma
l_string|&quot;r&quot;
(paren
id|saddr
)paren
comma
l_string|&quot;r&quot;
(paren
id|len
op_plus
id|proto
)paren
comma
l_string|&quot;0&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;icc0&quot;
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
r_int
DECL|function|csum_tcpudp_magic
id|csum_tcpudp_magic
c_func
(paren
r_int
r_int
id|saddr
comma
r_int
r_int
id|daddr
comma
r_int
r_int
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
r_return
id|csum_fold
c_func
(paren
id|csum_tcpudp_nofold
c_func
(paren
id|saddr
comma
id|daddr
comma
id|len
comma
id|proto
comma
id|sum
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * this routine is used for miscellaneous IP-like checksums, mainly&n; * in icmp.c&n; */
r_extern
r_int
r_int
id|ip_compute_csum
c_func
(paren
r_const
r_int
r_char
op_star
id|buff
comma
r_int
id|len
)paren
suffix:semicolon
DECL|macro|_HAVE_ARCH_IPV6_CSUM
mdefine_line|#define _HAVE_ARCH_IPV6_CSUM
r_static
r_inline
r_int
r_int
r_int
DECL|function|csum_ipv6_magic
id|csum_ipv6_magic
c_func
(paren
r_struct
id|in6_addr
op_star
id|saddr
comma
r_struct
id|in6_addr
op_star
id|daddr
comma
id|__u32
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
r_int
r_int
id|tmp
comma
id|tmp2
suffix:semicolon
id|asm
c_func
(paren
l_string|&quot;&t;addcc&t;&t;%2,%0,%0,icc0&t;&bslash;n&quot;
multiline_comment|/* add up the source addr */
l_string|&quot;&t;ldi&t;&t;@(%3,0),%1&t;&bslash;n&quot;
l_string|&quot;&t;addxcc&t;&t;%1,%0,%0,icc0&t;&bslash;n&quot;
l_string|&quot;&t;ldi&t;&t;@(%3,4),%2&t;&bslash;n&quot;
l_string|&quot;&t;addxcc&t;&t;%2,%0,%0,icc0&t;&bslash;n&quot;
l_string|&quot;&t;ldi&t;&t;@(%3,8),%1&t;&bslash;n&quot;
l_string|&quot;&t;addxcc&t;&t;%1,%0,%0,icc0&t;&bslash;n&quot;
l_string|&quot;&t;ldi&t;&t;@(%3,12),%2&t;&bslash;n&quot;
l_string|&quot;&t;addxcc&t;&t;%2,%0,%0,icc0&t;&bslash;n&quot;
multiline_comment|/* add up the dest addr */
l_string|&quot;&t;ldi&t;&t;@(%4,0),%1&t;&bslash;n&quot;
l_string|&quot;&t;addxcc&t;&t;%1,%0,%0,icc0&t;&bslash;n&quot;
l_string|&quot;&t;ldi&t;&t;@(%4,4),%2&t;&bslash;n&quot;
l_string|&quot;&t;addxcc&t;&t;%2,%0,%0,icc0&t;&bslash;n&quot;
l_string|&quot;&t;ldi&t;&t;@(%4,8),%1&t;&bslash;n&quot;
l_string|&quot;&t;addxcc&t;&t;%1,%0,%0,icc0&t;&bslash;n&quot;
l_string|&quot;&t;ldi&t;&t;@(%4,12),%2&t;&bslash;n&quot;
l_string|&quot;&t;addxcc&t;&t;%2,%0,%0,icc0&t;&bslash;n&quot;
multiline_comment|/* fold the 33-bit result into 16-bits */
l_string|&quot;&t;addxcc&t;&t;gr0,%0,%0,icc0&t;&bslash;n&quot;
l_string|&quot;&t;srli&t;&t;%0,#16,%1&t;&bslash;n&quot;
l_string|&quot;&t;sethi&t;&t;#0,%0&t;&t;&bslash;n&quot;
l_string|&quot;&t;add&t;&t;%1,%0,%0&t;&bslash;n&quot;
l_string|&quot;&t;srli&t;&t;%0,#16,%1&t;&bslash;n&quot;
l_string|&quot;&t;add&t;&t;%1,%0,%0&t;&bslash;n&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|sum
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
comma
l_string|&quot;=r&quot;
(paren
id|tmp2
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|saddr
)paren
comma
l_string|&quot;r&quot;
(paren
id|daddr
)paren
comma
l_string|&quot;0&quot;
(paren
id|sum
)paren
comma
l_string|&quot;2&quot;
(paren
id|len
op_plus
id|proto
)paren
suffix:colon
l_string|&quot;icc0&quot;
)paren
suffix:semicolon
r_return
op_complement
id|sum
suffix:semicolon
)brace
macro_line|#endif /* _ASM_CHECKSUM_H */
eof
