multiline_comment|/* io.h: FRV I/O operations&n; *&n; * Copyright (C) 2004 Red Hat, Inc. All Rights Reserved.&n; * Written by David Howells (dhowells@redhat.com)&n; *&n; * This program is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License&n; * as published by the Free Software Foundation; either version&n; * 2 of the License, or (at your option) any later version.&n; *&n; * This gets interesting when talking to the PCI bus - the CPU is in big endian&n; * mode, the PCI bus is little endian and the hardware in the middle can do&n; * byte swapping&n; */
macro_line|#ifndef _ASM_IO_H
DECL|macro|_ASM_IO_H
mdefine_line|#define _ASM_IO_H
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;asm/virtconvert.h&gt;
macro_line|#include &lt;asm/string.h&gt;
macro_line|#include &lt;asm/mb-regs.h&gt;
macro_line|#include &lt;linux/delay.h&gt;
multiline_comment|/*&n; * swap functions are sometimes needed to interface little-endian hardware&n; */
DECL|function|_swapw
r_static
r_inline
r_int
r_int
id|_swapw
c_func
(paren
r_int
r_int
id|v
)paren
(brace
r_return
(paren
(paren
id|v
op_lshift
l_int|8
)paren
op_or
(paren
id|v
op_rshift
l_int|8
)paren
)paren
suffix:semicolon
)brace
DECL|function|_swapl
r_static
r_inline
r_int
r_int
id|_swapl
c_func
(paren
r_int
r_int
id|v
)paren
(brace
r_return
(paren
(paren
id|v
op_lshift
l_int|24
)paren
op_or
(paren
(paren
id|v
op_amp
l_int|0xff00
)paren
op_lshift
l_int|8
)paren
op_or
(paren
(paren
id|v
op_amp
l_int|0xff0000
)paren
op_rshift
l_int|8
)paren
op_or
(paren
id|v
op_rshift
l_int|24
)paren
)paren
suffix:semicolon
)brace
singleline_comment|//#define __iormb() asm volatile(&quot;membar&quot;)
singleline_comment|//#define __iowmb() asm volatile(&quot;membar&quot;)
DECL|macro|__raw_readb
mdefine_line|#define __raw_readb(addr) __builtin_read8((void *) (addr))
DECL|macro|__raw_readw
mdefine_line|#define __raw_readw(addr) __builtin_read16((void *) (addr))
DECL|macro|__raw_readl
mdefine_line|#define __raw_readl(addr) __builtin_read32((void *) (addr))
DECL|macro|__raw_writeb
mdefine_line|#define __raw_writeb(datum, addr) __builtin_write8((void *) (addr), datum)
DECL|macro|__raw_writew
mdefine_line|#define __raw_writew(datum, addr) __builtin_write16((void *) (addr), datum)
DECL|macro|__raw_writel
mdefine_line|#define __raw_writel(datum, addr) __builtin_write32((void *) (addr), datum)
DECL|function|io_outsb
r_static
r_inline
r_void
id|io_outsb
c_func
(paren
r_int
r_int
id|addr
comma
r_const
r_void
op_star
id|buf
comma
r_int
id|len
)paren
(brace
r_int
r_int
id|__ioaddr
op_assign
(paren
r_int
r_int
)paren
id|addr
suffix:semicolon
r_const
r_uint8
op_star
id|bp
op_assign
id|buf
suffix:semicolon
r_while
c_loop
(paren
id|len
op_decrement
)paren
id|__builtin_write8
c_func
(paren
(paren
r_volatile
r_void
id|__iomem
op_star
)paren
id|__ioaddr
comma
op_star
id|bp
op_increment
)paren
suffix:semicolon
)brace
DECL|function|io_outsw
r_static
r_inline
r_void
id|io_outsw
c_func
(paren
r_int
r_int
id|addr
comma
r_const
r_void
op_star
id|buf
comma
r_int
id|len
)paren
(brace
r_int
r_int
id|__ioaddr
op_assign
(paren
r_int
r_int
)paren
id|addr
suffix:semicolon
r_const
r_uint16
op_star
id|bp
op_assign
id|buf
suffix:semicolon
r_while
c_loop
(paren
id|len
op_decrement
)paren
id|__builtin_write16
c_func
(paren
(paren
r_volatile
r_void
id|__iomem
op_star
)paren
id|__ioaddr
comma
(paren
op_star
id|bp
op_increment
)paren
)paren
suffix:semicolon
)brace
r_extern
r_void
id|__outsl_ns
c_func
(paren
r_int
r_int
id|addr
comma
r_const
r_void
op_star
id|buf
comma
r_int
id|len
)paren
suffix:semicolon
r_extern
r_void
id|__outsl_sw
c_func
(paren
r_int
r_int
id|addr
comma
r_const
r_void
op_star
id|buf
comma
r_int
id|len
)paren
suffix:semicolon
DECL|function|__outsl
r_static
r_inline
r_void
id|__outsl
c_func
(paren
r_int
r_int
id|addr
comma
r_const
r_void
op_star
id|buf
comma
r_int
id|len
comma
r_int
id|swap
)paren
(brace
r_int
r_int
id|__ioaddr
op_assign
(paren
r_int
r_int
)paren
id|addr
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|swap
)paren
id|__outsl_ns
c_func
(paren
id|__ioaddr
comma
id|buf
comma
id|len
)paren
suffix:semicolon
r_else
id|__outsl_sw
c_func
(paren
id|__ioaddr
comma
id|buf
comma
id|len
)paren
suffix:semicolon
)brace
DECL|function|io_insb
r_static
r_inline
r_void
id|io_insb
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|buf
comma
r_int
id|len
)paren
(brace
r_uint8
op_star
id|bp
op_assign
id|buf
suffix:semicolon
r_while
c_loop
(paren
id|len
op_decrement
)paren
op_star
id|bp
op_increment
op_assign
id|__builtin_read8
c_func
(paren
(paren
r_volatile
r_void
id|__iomem
op_star
)paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|io_insw
r_static
r_inline
r_void
id|io_insw
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|buf
comma
r_int
id|len
)paren
(brace
r_uint16
op_star
id|bp
op_assign
id|buf
suffix:semicolon
r_while
c_loop
(paren
id|len
op_decrement
)paren
op_star
id|bp
op_increment
op_assign
id|__builtin_read16
c_func
(paren
(paren
r_volatile
r_void
id|__iomem
op_star
)paren
id|addr
)paren
suffix:semicolon
)brace
r_extern
r_void
id|__insl_ns
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|buf
comma
r_int
id|len
)paren
suffix:semicolon
r_extern
r_void
id|__insl_sw
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|buf
comma
r_int
id|len
)paren
suffix:semicolon
DECL|function|__insl
r_static
r_inline
r_void
id|__insl
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|buf
comma
r_int
id|len
comma
r_int
id|swap
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|swap
)paren
id|__insl_ns
c_func
(paren
id|addr
comma
id|buf
comma
id|len
)paren
suffix:semicolon
r_else
id|__insl_sw
c_func
(paren
id|addr
comma
id|buf
comma
id|len
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; *&t;make the short names macros so specific devices&n; *&t;can override them as required&n; */
DECL|function|memset_io
r_static
r_inline
r_void
id|memset_io
c_func
(paren
r_volatile
r_void
id|__iomem
op_star
id|addr
comma
r_int
r_char
id|val
comma
r_int
id|count
)paren
(brace
id|memset
c_func
(paren
(paren
r_void
id|__force
op_star
)paren
id|addr
comma
id|val
comma
id|count
)paren
suffix:semicolon
)brace
DECL|function|memcpy_fromio
r_static
r_inline
r_void
id|memcpy_fromio
c_func
(paren
r_void
op_star
id|dst
comma
r_volatile
r_void
id|__iomem
op_star
id|src
comma
r_int
id|count
)paren
(brace
id|memcpy
c_func
(paren
id|dst
comma
(paren
r_void
id|__force
op_star
)paren
id|src
comma
id|count
)paren
suffix:semicolon
)brace
DECL|function|memcpy_toio
r_static
r_inline
r_void
id|memcpy_toio
c_func
(paren
r_volatile
r_void
id|__iomem
op_star
id|dst
comma
r_const
r_void
op_star
id|src
comma
r_int
id|count
)paren
(brace
id|memcpy
c_func
(paren
(paren
r_void
id|__force
op_star
)paren
id|dst
comma
id|src
comma
id|count
)paren
suffix:semicolon
)brace
DECL|function|inb
r_static
r_inline
r_uint8
id|inb
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
id|__builtin_read8
c_func
(paren
(paren
r_void
op_star
)paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|inw
r_static
r_inline
r_uint16
id|inw
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_uint16
id|ret
op_assign
id|__builtin_read16
c_func
(paren
(paren
r_void
op_star
)paren
id|addr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__is_PCI_IO
c_func
(paren
id|addr
)paren
)paren
id|ret
op_assign
id|_swapw
c_func
(paren
id|ret
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|inl
r_static
r_inline
r_uint32
id|inl
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_uint32
id|ret
op_assign
id|__builtin_read32
c_func
(paren
(paren
r_void
op_star
)paren
id|addr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__is_PCI_IO
c_func
(paren
id|addr
)paren
)paren
id|ret
op_assign
id|_swapl
c_func
(paren
id|ret
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|outb
r_static
r_inline
r_void
id|outb
c_func
(paren
r_uint8
id|datum
comma
r_int
r_int
id|addr
)paren
(brace
id|__builtin_write8
c_func
(paren
(paren
r_void
op_star
)paren
id|addr
comma
id|datum
)paren
suffix:semicolon
)brace
DECL|function|outw
r_static
r_inline
r_void
id|outw
c_func
(paren
r_uint16
id|datum
comma
r_int
r_int
id|addr
)paren
(brace
r_if
c_cond
(paren
id|__is_PCI_IO
c_func
(paren
id|addr
)paren
)paren
id|datum
op_assign
id|_swapw
c_func
(paren
id|datum
)paren
suffix:semicolon
id|__builtin_write16
c_func
(paren
(paren
r_void
op_star
)paren
id|addr
comma
id|datum
)paren
suffix:semicolon
)brace
DECL|function|outl
r_static
r_inline
r_void
id|outl
c_func
(paren
r_uint32
id|datum
comma
r_int
r_int
id|addr
)paren
(brace
r_if
c_cond
(paren
id|__is_PCI_IO
c_func
(paren
id|addr
)paren
)paren
id|datum
op_assign
id|_swapl
c_func
(paren
id|datum
)paren
suffix:semicolon
id|__builtin_write32
c_func
(paren
(paren
r_void
op_star
)paren
id|addr
comma
id|datum
)paren
suffix:semicolon
)brace
DECL|macro|inb_p
mdefine_line|#define inb_p(addr)&t;inb(addr)
DECL|macro|inw_p
mdefine_line|#define inw_p(addr)&t;inw(addr)
DECL|macro|inl_p
mdefine_line|#define inl_p(addr)&t;inl(addr)
DECL|macro|outb_p
mdefine_line|#define outb_p(x,addr)&t;outb(x,addr)
DECL|macro|outw_p
mdefine_line|#define outw_p(x,addr)&t;outw(x,addr)
DECL|macro|outl_p
mdefine_line|#define outl_p(x,addr)&t;outl(x,addr)
DECL|macro|outsb
mdefine_line|#define outsb(a,b,l)&t;io_outsb(a,b,l)
DECL|macro|outsw
mdefine_line|#define outsw(a,b,l)&t;io_outsw(a,b,l)
DECL|macro|outsl
mdefine_line|#define outsl(a,b,l)&t;__outsl(a,b,l,0)
DECL|macro|insb
mdefine_line|#define insb(a,b,l)&t;io_insb(a,b,l)
DECL|macro|insw
mdefine_line|#define insw(a,b,l)&t;io_insw(a,b,l)
DECL|macro|insl
mdefine_line|#define insl(a,b,l)&t;__insl(a,b,l,0)
DECL|macro|IO_SPACE_LIMIT
mdefine_line|#define IO_SPACE_LIMIT&t;0xffffffff
DECL|function|readb
r_static
r_inline
r_uint8
id|readb
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_return
id|__builtin_read8
c_func
(paren
(paren
r_volatile
r_uint8
id|__force
op_star
)paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|readw
r_static
r_inline
r_uint16
id|readw
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_uint16
id|ret
op_assign
id|__builtin_read16
c_func
(paren
(paren
r_volatile
r_uint16
id|__force
op_star
)paren
id|addr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__is_PCI_MEM
c_func
(paren
id|addr
)paren
)paren
id|ret
op_assign
id|_swapw
c_func
(paren
id|ret
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|readl
r_static
r_inline
r_uint32
id|readl
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_uint32
id|ret
op_assign
id|__builtin_read32
c_func
(paren
(paren
r_volatile
r_uint32
id|__force
op_star
)paren
id|addr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__is_PCI_MEM
c_func
(paren
id|addr
)paren
)paren
id|ret
op_assign
id|_swapl
c_func
(paren
id|ret
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|writeb
r_static
r_inline
r_void
id|writeb
c_func
(paren
r_uint8
id|datum
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
id|__builtin_write8
c_func
(paren
(paren
r_volatile
r_uint8
id|__force
op_star
)paren
id|addr
comma
id|datum
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__is_PCI_MEM
c_func
(paren
id|addr
)paren
)paren
id|__flush_PCI_writes
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|writew
r_static
r_inline
r_void
id|writew
c_func
(paren
r_uint16
id|datum
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_if
c_cond
(paren
id|__is_PCI_MEM
c_func
(paren
id|addr
)paren
)paren
id|datum
op_assign
id|_swapw
c_func
(paren
id|datum
)paren
suffix:semicolon
id|__builtin_write16
c_func
(paren
(paren
r_volatile
r_uint16
id|__force
op_star
)paren
id|addr
comma
id|datum
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__is_PCI_MEM
c_func
(paren
id|addr
)paren
)paren
id|__flush_PCI_writes
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|writel
r_static
r_inline
r_void
id|writel
c_func
(paren
r_uint32
id|datum
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_if
c_cond
(paren
id|__is_PCI_MEM
c_func
(paren
id|addr
)paren
)paren
id|datum
op_assign
id|_swapl
c_func
(paren
id|datum
)paren
suffix:semicolon
id|__builtin_write32
c_func
(paren
(paren
r_volatile
r_uint32
id|__force
op_star
)paren
id|addr
comma
id|datum
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__is_PCI_MEM
c_func
(paren
id|addr
)paren
)paren
id|__flush_PCI_writes
c_func
(paren
)paren
suffix:semicolon
)brace
multiline_comment|/* Values for nocacheflag and cmode */
DECL|macro|IOMAP_FULL_CACHING
mdefine_line|#define IOMAP_FULL_CACHING&t;&t;0
DECL|macro|IOMAP_NOCACHE_SER
mdefine_line|#define IOMAP_NOCACHE_SER&t;&t;1
DECL|macro|IOMAP_NOCACHE_NONSER
mdefine_line|#define IOMAP_NOCACHE_NONSER&t;&t;2
DECL|macro|IOMAP_WRITETHROUGH
mdefine_line|#define IOMAP_WRITETHROUGH&t;&t;3
r_extern
r_void
id|__iomem
op_star
id|__ioremap
c_func
(paren
r_int
r_int
id|physaddr
comma
r_int
r_int
id|size
comma
r_int
id|cacheflag
)paren
suffix:semicolon
r_extern
r_void
id|__iounmap
c_func
(paren
r_void
id|__iomem
op_star
id|addr
comma
r_int
r_int
id|size
)paren
suffix:semicolon
DECL|function|ioremap
r_static
r_inline
r_void
id|__iomem
op_star
id|ioremap
c_func
(paren
r_int
r_int
id|physaddr
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|__ioremap
c_func
(paren
id|physaddr
comma
id|size
comma
id|IOMAP_NOCACHE_SER
)paren
suffix:semicolon
)brace
DECL|function|ioremap_nocache
r_static
r_inline
r_void
id|__iomem
op_star
id|ioremap_nocache
c_func
(paren
r_int
r_int
id|physaddr
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|__ioremap
c_func
(paren
id|physaddr
comma
id|size
comma
id|IOMAP_NOCACHE_SER
)paren
suffix:semicolon
)brace
DECL|function|ioremap_writethrough
r_static
r_inline
r_void
id|__iomem
op_star
id|ioremap_writethrough
c_func
(paren
r_int
r_int
id|physaddr
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|__ioremap
c_func
(paren
id|physaddr
comma
id|size
comma
id|IOMAP_WRITETHROUGH
)paren
suffix:semicolon
)brace
DECL|function|ioremap_fullcache
r_static
r_inline
r_void
id|__iomem
op_star
id|ioremap_fullcache
c_func
(paren
r_int
r_int
id|physaddr
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|__ioremap
c_func
(paren
id|physaddr
comma
id|size
comma
id|IOMAP_FULL_CACHING
)paren
suffix:semicolon
)brace
r_extern
r_void
id|iounmap
c_func
(paren
r_void
id|__iomem
op_star
id|addr
)paren
suffix:semicolon
DECL|function|flush_write_buffers
r_static
r_inline
r_void
id|flush_write_buffers
c_func
(paren
r_void
)paren
(brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;membar&quot;
suffix:colon
suffix:colon
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Convert a physical pointer to a virtual kernel pointer for /dev/mem&n; * access&n; */
DECL|macro|xlate_dev_mem_ptr
mdefine_line|#define xlate_dev_mem_ptr(p)&t;__va(p)
multiline_comment|/*&n; * Convert a virtual cached pointer to an uncached pointer&n; */
DECL|macro|xlate_dev_kmem_ptr
mdefine_line|#define xlate_dev_kmem_ptr(p)&t;p
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _ASM_IO_H */
eof
