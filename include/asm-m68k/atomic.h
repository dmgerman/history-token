macro_line|#ifndef __ARCH_M68K_ATOMIC__
DECL|macro|__ARCH_M68K_ATOMIC__
mdefine_line|#define __ARCH_M68K_ATOMIC__
macro_line|#include &lt;asm/system.h&gt;&t;/* local_irq_XXX() */
multiline_comment|/*&n; * Atomic operations that C can&squot;t guarantee us.  Useful for&n; * resource counting etc..&n; */
multiline_comment|/*&n; * We do not have SMP m68k systems, so we don&squot;t have to deal with that.&n; */
DECL|member|counter
DECL|typedef|atomic_t
r_typedef
r_struct
(brace
r_int
id|counter
suffix:semicolon
)brace
id|atomic_t
suffix:semicolon
DECL|macro|ATOMIC_INIT
mdefine_line|#define ATOMIC_INIT(i)&t;{ (i) }
DECL|macro|atomic_read
mdefine_line|#define atomic_read(v)&t;&t;((v)-&gt;counter)
DECL|macro|atomic_set
mdefine_line|#define atomic_set(v, i)&t;(((v)-&gt;counter) = i)
DECL|function|atomic_add
r_static
r_inline
r_void
id|atomic_add
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;addl %1,%0&quot;
suffix:colon
l_string|&quot;+m&quot;
(paren
op_star
id|v
)paren
suffix:colon
l_string|&quot;id&quot;
(paren
id|i
)paren
)paren
suffix:semicolon
)brace
DECL|function|atomic_sub
r_static
r_inline
r_void
id|atomic_sub
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;subl %1,%0&quot;
suffix:colon
l_string|&quot;+m&quot;
(paren
op_star
id|v
)paren
suffix:colon
l_string|&quot;id&quot;
(paren
id|i
)paren
)paren
suffix:semicolon
)brace
DECL|function|atomic_inc
r_static
r_inline
r_void
id|atomic_inc
c_func
(paren
id|atomic_t
op_star
id|v
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;addql #1,%0&quot;
suffix:colon
l_string|&quot;+m&quot;
(paren
op_star
id|v
)paren
)paren
suffix:semicolon
)brace
DECL|function|atomic_dec
r_static
r_inline
r_void
id|atomic_dec
c_func
(paren
id|atomic_t
op_star
id|v
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;subql #1,%0&quot;
suffix:colon
l_string|&quot;+m&quot;
(paren
op_star
id|v
)paren
)paren
suffix:semicolon
)brace
DECL|function|atomic_dec_and_test
r_static
r_inline
r_int
id|atomic_dec_and_test
c_func
(paren
id|atomic_t
op_star
id|v
)paren
(brace
r_char
id|c
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;subql #1,%1; seq %0&quot;
suffix:colon
l_string|&quot;=d&quot;
(paren
id|c
)paren
comma
l_string|&quot;+m&quot;
(paren
op_star
id|v
)paren
)paren
suffix:semicolon
r_return
id|c
op_ne
l_int|0
suffix:semicolon
)brace
DECL|function|atomic_inc_and_test
r_static
r_inline
r_int
id|atomic_inc_and_test
c_func
(paren
id|atomic_t
op_star
id|v
)paren
(brace
r_char
id|c
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;addql #1,%1; seq %0&quot;
suffix:colon
l_string|&quot;=d&quot;
(paren
id|c
)paren
comma
l_string|&quot;+m&quot;
(paren
op_star
id|v
)paren
)paren
suffix:semicolon
r_return
id|c
op_ne
l_int|0
suffix:semicolon
)brace
macro_line|#ifdef CONFIG_RMW_INSNS
DECL|function|atomic_add_return
r_static
r_inline
r_int
id|atomic_add_return
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
r_int
id|t
comma
id|tmp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&t;movel %2,%1&bslash;n&quot;
l_string|&quot;&t;addl %3,%1&bslash;n&quot;
l_string|&quot;&t;casl %2,%1,%0&bslash;n&quot;
l_string|&quot;&t;jne 1b&quot;
suffix:colon
l_string|&quot;+m&quot;
(paren
op_star
id|v
)paren
comma
l_string|&quot;=&amp;d&quot;
(paren
id|t
)paren
comma
l_string|&quot;=&amp;d&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|i
)paren
comma
l_string|&quot;2&quot;
(paren
id|atomic_read
c_func
(paren
id|v
)paren
)paren
)paren
suffix:semicolon
r_return
id|t
suffix:semicolon
)brace
DECL|function|atomic_sub_return
r_static
r_inline
r_int
id|atomic_sub_return
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
r_int
id|t
comma
id|tmp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&t;movel %2,%1&bslash;n&quot;
l_string|&quot;&t;subl %3,%1&bslash;n&quot;
l_string|&quot;&t;casl %2,%1,%0&bslash;n&quot;
l_string|&quot;&t;jne 1b&quot;
suffix:colon
l_string|&quot;+m&quot;
(paren
op_star
id|v
)paren
comma
l_string|&quot;=&amp;d&quot;
(paren
id|t
)paren
comma
l_string|&quot;=&amp;d&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|i
)paren
comma
l_string|&quot;2&quot;
(paren
id|atomic_read
c_func
(paren
id|v
)paren
)paren
)paren
suffix:semicolon
r_return
id|t
suffix:semicolon
)brace
macro_line|#else /* !CONFIG_RMW_INSNS */
DECL|function|atomic_add_return
r_static
r_inline
r_int
id|atomic_add_return
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
r_int
id|t
suffix:semicolon
id|local_irq_save
c_func
(paren
id|flags
)paren
suffix:semicolon
id|t
op_assign
id|atomic_read
c_func
(paren
id|v
)paren
suffix:semicolon
id|t
op_add_assign
id|i
suffix:semicolon
id|atomic_set
c_func
(paren
id|v
comma
id|t
)paren
suffix:semicolon
id|local_irq_restore
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
id|t
suffix:semicolon
)brace
DECL|function|atomic_sub_return
r_static
r_inline
r_int
id|atomic_sub_return
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
r_int
id|t
suffix:semicolon
id|local_irq_save
c_func
(paren
id|flags
)paren
suffix:semicolon
id|t
op_assign
id|atomic_read
c_func
(paren
id|v
)paren
suffix:semicolon
id|t
op_sub_assign
id|i
suffix:semicolon
id|atomic_set
c_func
(paren
id|v
comma
id|t
)paren
suffix:semicolon
id|local_irq_restore
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
id|t
suffix:semicolon
)brace
macro_line|#endif /* !CONFIG_RMW_INSNS */
DECL|macro|atomic_dec_return
mdefine_line|#define atomic_dec_return(v)&t;atomic_sub_return(1, (v))
DECL|macro|atomic_inc_return
mdefine_line|#define atomic_inc_return(v)&t;atomic_add_return(1, (v))
DECL|function|atomic_sub_and_test
r_static
r_inline
r_int
id|atomic_sub_and_test
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
r_char
id|c
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;subl %2,%1; seq %0&quot;
suffix:colon
l_string|&quot;=d&quot;
(paren
id|c
)paren
comma
l_string|&quot;+m&quot;
(paren
op_star
id|v
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|i
)paren
)paren
suffix:semicolon
r_return
id|c
op_ne
l_int|0
suffix:semicolon
)brace
DECL|function|atomic_add_negative
r_static
r_inline
r_int
id|atomic_add_negative
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
r_char
id|c
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;addl %2,%1; smi %0&quot;
suffix:colon
l_string|&quot;=d&quot;
(paren
id|c
)paren
comma
l_string|&quot;+m&quot;
(paren
op_star
id|v
)paren
suffix:colon
l_string|&quot;g&quot;
(paren
id|i
)paren
)paren
suffix:semicolon
r_return
id|c
op_ne
l_int|0
suffix:semicolon
)brace
DECL|function|atomic_clear_mask
r_static
r_inline
r_void
id|atomic_clear_mask
c_func
(paren
r_int
r_int
id|mask
comma
r_int
r_int
op_star
id|v
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;andl %1,%0&quot;
suffix:colon
l_string|&quot;+m&quot;
(paren
op_star
id|v
)paren
suffix:colon
l_string|&quot;id&quot;
(paren
op_complement
(paren
id|mask
)paren
)paren
)paren
suffix:semicolon
)brace
DECL|function|atomic_set_mask
r_static
r_inline
r_void
id|atomic_set_mask
c_func
(paren
r_int
r_int
id|mask
comma
r_int
r_int
op_star
id|v
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;orl %1,%0&quot;
suffix:colon
l_string|&quot;+m&quot;
(paren
op_star
id|v
)paren
suffix:colon
l_string|&quot;id&quot;
(paren
id|mask
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/* Atomic operations are already serializing */
DECL|macro|smp_mb__before_atomic_dec
mdefine_line|#define smp_mb__before_atomic_dec()&t;barrier()
DECL|macro|smp_mb__after_atomic_dec
mdefine_line|#define smp_mb__after_atomic_dec()&t;barrier()
DECL|macro|smp_mb__before_atomic_inc
mdefine_line|#define smp_mb__before_atomic_inc()&t;barrier()
DECL|macro|smp_mb__after_atomic_inc
mdefine_line|#define smp_mb__after_atomic_inc()&t;barrier()
macro_line|#endif /* __ARCH_M68K_ATOMIC __ */
eof
