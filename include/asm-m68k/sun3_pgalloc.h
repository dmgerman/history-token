multiline_comment|/* sun3_pgalloc.h --&n; * reorganization around 2.3.39, routines moved from sun3_pgtable.h &n; *&n; * moved 1/26/2000 Sam Creasey&n; */
macro_line|#ifndef _SUN3_PGALLOC_H
DECL|macro|_SUN3_PGALLOC_H
mdefine_line|#define _SUN3_PGALLOC_H
multiline_comment|/* Pagetable caches. */
singleline_comment|//todo: should implement for at least ptes. --m
DECL|macro|pgd_quicklist
mdefine_line|#define pgd_quicklist ((unsigned long *) 0)
DECL|macro|pmd_quicklist
mdefine_line|#define pmd_quicklist ((unsigned long *) 0)
DECL|macro|pte_quicklist
mdefine_line|#define pte_quicklist ((unsigned long *) 0)
DECL|macro|pgtable_cache_size
mdefine_line|#define pgtable_cache_size (0L)
multiline_comment|/* Allocation and deallocation of various flavours of pagetables. */
DECL|function|free_pmd_fast
r_extern
r_inline
r_int
id|free_pmd_fast
(paren
id|pmd_t
op_star
id|pmdp
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|free_pmd_slow
r_extern
r_inline
r_int
id|free_pmd_slow
(paren
id|pmd_t
op_star
id|pmdp
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|get_pmd_fast
r_extern
r_inline
id|pmd_t
op_star
id|get_pmd_fast
(paren
r_void
)paren
(brace
r_return
(paren
id|pmd_t
op_star
)paren
l_int|0
suffix:semicolon
)brace
singleline_comment|//todo: implement the following properly.
DECL|macro|get_pte_fast
mdefine_line|#define get_pte_fast() ((pte_t *) 0)
DECL|macro|get_pte_slow
mdefine_line|#define get_pte_slow pte_alloc
DECL|macro|free_pte_fast
mdefine_line|#define free_pte_fast(pte)
DECL|macro|free_pte_slow
mdefine_line|#define free_pte_slow pte_free
multiline_comment|/* FIXME - when we get this compiling */
multiline_comment|/* erm, now that it&squot;s compiling, what do we do with it? */
DECL|macro|_KERNPG_TABLE
mdefine_line|#define _KERNPG_TABLE 0
DECL|function|pte_free_kernel
r_extern
r_inline
r_void
id|pte_free_kernel
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
)brace
r_extern
r_const
r_char
id|bad_pmd_string
(braket
)braket
suffix:semicolon
DECL|function|pte_alloc_kernel
r_extern
r_inline
id|pte_t
op_star
id|pte_alloc_kernel
c_func
(paren
id|pmd_t
op_star
id|pmd
comma
r_int
r_int
id|address
)paren
(brace
id|address
op_assign
(paren
id|address
op_rshift
id|PAGE_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PTE
op_minus
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd_none
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
id|pte_t
op_star
id|page
op_assign
(paren
id|pte_t
op_star
)paren
id|get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd_none
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
r_if
c_cond
(paren
id|page
)paren
(brace
id|pmd_val
c_func
(paren
op_star
id|pmd
)paren
op_assign
id|_KERNPG_TABLE
op_plus
id|__pa
c_func
(paren
id|page
)paren
suffix:semicolon
r_return
id|page
op_plus
id|address
suffix:semicolon
)brace
id|pmd_val
c_func
(paren
op_star
id|pmd
)paren
op_assign
id|_KERNPG_TABLE
op_plus
id|__pa
c_func
(paren
(paren
r_int
r_int
)paren
id|BAD_PAGETABLE
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|page
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|pmd_bad
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
id|printk
c_func
(paren
id|bad_pmd_string
comma
id|pmd_val
c_func
(paren
op_star
id|pmd
)paren
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;at kernel pgd off %08x&bslash;n&quot;
comma
(paren
r_int
r_int
)paren
id|pmd
)paren
suffix:semicolon
id|pmd_val
c_func
(paren
op_star
id|pmd
)paren
op_assign
id|_KERNPG_TABLE
op_plus
id|__pa
c_func
(paren
(paren
r_int
r_int
)paren
id|BAD_PAGETABLE
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
r_return
(paren
id|pte_t
op_star
)paren
id|__pmd_page
c_func
(paren
op_star
id|pmd
)paren
op_plus
id|address
suffix:semicolon
)brace
multiline_comment|/*&n; * allocating and freeing a pmd is trivial: the 1-entry pmd is&n; * inside the pgd, so has no extra memory associated with it.&n; */
DECL|function|pmd_free_kernel
r_extern
r_inline
r_void
id|pmd_free_kernel
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
singleline_comment|//        pmd_val(*pmd) = 0;
)brace
DECL|function|pmd_alloc_kernel
r_extern
r_inline
id|pmd_t
op_star
id|pmd_alloc_kernel
c_func
(paren
id|pgd_t
op_star
id|pgd
comma
r_int
r_int
id|address
)paren
(brace
r_return
(paren
id|pmd_t
op_star
)paren
id|pgd
suffix:semicolon
)brace
DECL|macro|pmd_alloc_one_fast
mdefine_line|#define pmd_alloc_one_fast(mm, address) ({ BUG(); ((pmd_t *)1); })
DECL|macro|pmd_alloc_one
mdefine_line|#define pmd_alloc_one(mm,address)       ({ BUG(); ((pmd_t *)2); })
DECL|function|pte_free
r_extern
r_inline
r_void
id|pte_free
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
)brace
DECL|function|pte_alloc_one
r_static
r_inline
id|pte_t
op_star
id|pte_alloc_one
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|address
)paren
(brace
r_int
r_int
id|page
op_assign
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|page
)paren
r_return
l_int|NULL
suffix:semicolon
id|memset
c_func
(paren
(paren
r_void
op_star
)paren
id|page
comma
l_int|0
comma
id|PAGE_SIZE
)paren
suffix:semicolon
singleline_comment|//&t;pmd_val(*pmd) = SUN3_PMD_MAGIC + __pa(page);
multiline_comment|/*&t;pmd_val(*pmd) = __pa(page); */
r_return
(paren
id|pte_t
op_star
)paren
(paren
id|page
)paren
suffix:semicolon
)brace
DECL|macro|pte_alloc_one_fast
mdefine_line|#define pte_alloc_one_fast(mm,addr) pte_alloc_one(mm,addr)
DECL|macro|pmd_populate
mdefine_line|#define pmd_populate(mm, pmd, pte) (pmd_val(*pmd) = __pa((unsigned long)pte))
multiline_comment|/*&n; * allocating and freeing a pmd is trivial: the 1-entry pmd is&n; * inside the pgd, so has no extra memory associated with it.&n; */
DECL|function|pmd_free
r_extern
r_inline
r_void
id|pmd_free
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
id|pmd_val
c_func
(paren
op_star
id|pmd
)paren
op_assign
l_int|0
suffix:semicolon
)brace
DECL|function|pgd_free
r_extern
r_inline
r_void
id|pgd_free
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pgd
)paren
suffix:semicolon
)brace
DECL|function|pgd_alloc
r_extern
r_inline
id|pgd_t
op_star
id|pgd_alloc
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
id|pgd_t
op_star
id|new_pgd
suffix:semicolon
id|new_pgd
op_assign
(paren
id|pgd_t
op_star
)paren
id|get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
id|memcpy
c_func
(paren
id|new_pgd
comma
id|swapper_pg_dir
comma
id|PAGE_SIZE
)paren
suffix:semicolon
id|memset
c_func
(paren
id|new_pgd
comma
l_int|0
comma
(paren
id|PAGE_OFFSET
op_rshift
id|PGDIR_SHIFT
)paren
)paren
suffix:semicolon
r_return
id|new_pgd
suffix:semicolon
)brace
DECL|macro|pgd_populate
mdefine_line|#define pgd_populate(mm, pmd, pte) BUG()
multiline_comment|/* FIXME: the sun3 doesn&squot;t have a page table cache! &n;   (but the motorola routine should just return 0) */
r_extern
r_int
id|do_check_pgt_cache
c_func
(paren
r_int
comma
r_int
)paren
suffix:semicolon
DECL|function|set_pgdir
r_extern
r_inline
r_void
id|set_pgdir
c_func
(paren
r_int
r_int
id|address
comma
id|pgd_t
id|entry
)paren
(brace
)brace
multiline_comment|/* Reserved PMEGs. */
r_extern
r_char
id|sun3_reserved_pmeg
(braket
id|SUN3_PMEGS_NUM
)braket
suffix:semicolon
r_extern
r_int
r_int
id|pmeg_vaddr
(braket
id|SUN3_PMEGS_NUM
)braket
suffix:semicolon
r_extern
r_int
r_char
id|pmeg_alloc
(braket
id|SUN3_PMEGS_NUM
)braket
suffix:semicolon
r_extern
r_int
r_char
id|pmeg_ctx
(braket
id|SUN3_PMEGS_NUM
)braket
suffix:semicolon
macro_line|#endif /* SUN3_PGALLOC_H */
eof
