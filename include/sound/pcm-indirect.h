multiline_comment|/*&n; * Helper functions for indirect PCM data transfer&n; *&n; *  Copyright (c) by Takashi Iwai &lt;tiwai@suse.de&gt;&n; *                   Jaroslav Kysela &lt;perex@suse.cz&gt;&n; *&n; *   This program is free software; you can redistribute it and/or modify&n; *   it under the terms of the GNU General Public License as published by&n; *   the Free Software Foundation; either version 2 of the License, or&n; *   (at your option) any later version.&n; *&n; *   This program is distributed in the hope that it will be useful,&n; *   but WITHOUT ANY WARRANTY; without even the implied warranty of&n; *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; *   GNU General Public License for more details.&n; *&n; *   You should have received a copy of the GNU General Public License&n; *   along with this program; if not, write to the Free Software&n; *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.&n; */
macro_line|#ifndef __SOUND_PCM_INDIRECT_H
DECL|macro|__SOUND_PCM_INDIRECT_H
mdefine_line|#define __SOUND_PCM_INDIRECT_H
macro_line|#include &lt;sound/pcm.h&gt;
DECL|struct|sndrv_pcm_indirect
r_typedef
r_struct
id|sndrv_pcm_indirect
(brace
DECL|member|hw_buffer_size
r_int
r_int
id|hw_buffer_size
suffix:semicolon
multiline_comment|/* Byte size of hardware buffer */
DECL|member|hw_queue_size
r_int
r_int
id|hw_queue_size
suffix:semicolon
multiline_comment|/* Max queue size of hw buffer (0 = buffer size) */
DECL|member|hw_data
r_int
r_int
id|hw_data
suffix:semicolon
multiline_comment|/* Offset to next dst (or src) in hw ring buffer */
DECL|member|hw_io
r_int
r_int
id|hw_io
suffix:semicolon
multiline_comment|/* Ring buffer hw pointer */
DECL|member|hw_ready
r_int
id|hw_ready
suffix:semicolon
multiline_comment|/* Bytes ready for play (or captured) in hw ring buffer */
DECL|member|sw_buffer_size
r_int
r_int
id|sw_buffer_size
suffix:semicolon
multiline_comment|/* Byte size of software buffer */
DECL|member|sw_data
r_int
r_int
id|sw_data
suffix:semicolon
multiline_comment|/* Offset to next dst (or src) in sw ring buffer */
DECL|member|sw_io
r_int
r_int
id|sw_io
suffix:semicolon
multiline_comment|/* Current software pointer in bytes */
DECL|member|sw_ready
r_int
id|sw_ready
suffix:semicolon
multiline_comment|/* Bytes ready to be transferred to/from hw */
DECL|member|appl_ptr
r_int
id|appl_ptr
suffix:semicolon
multiline_comment|/* Last seen appl_ptr */
DECL|typedef|snd_pcm_indirect_t
)brace
id|snd_pcm_indirect_t
suffix:semicolon
DECL|typedef|snd_pcm_indirect_copy_t
r_typedef
r_void
(paren
op_star
id|snd_pcm_indirect_copy_t
)paren
(paren
id|snd_pcm_substream_t
op_star
id|substream
comma
id|snd_pcm_indirect_t
op_star
id|rec
comma
r_int
id|bytes
)paren
suffix:semicolon
multiline_comment|/*&n; * helper function for playback ack callback&n; */
r_static
r_inline
r_void
DECL|function|snd_pcm_indirect_playback_transfer
id|snd_pcm_indirect_playback_transfer
c_func
(paren
id|snd_pcm_substream_t
op_star
id|substream
comma
id|snd_pcm_indirect_t
op_star
id|rec
comma
id|snd_pcm_indirect_copy_t
id|copy
)paren
(brace
id|snd_pcm_runtime_t
op_star
id|runtime
op_assign
id|substream-&gt;runtime
suffix:semicolon
id|snd_pcm_uframes_t
id|appl_ptr
op_assign
id|runtime-&gt;control-&gt;appl_ptr
suffix:semicolon
id|snd_pcm_sframes_t
id|diff
op_assign
id|appl_ptr
op_minus
id|rec-&gt;appl_ptr
suffix:semicolon
id|snd_pcm_uframes_t
id|qsize
suffix:semicolon
r_if
c_cond
(paren
id|diff
)paren
(brace
r_if
c_cond
(paren
id|diff
OL
op_minus
(paren
id|snd_pcm_sframes_t
)paren
(paren
id|runtime-&gt;boundary
op_div
l_int|2
)paren
)paren
id|diff
op_add_assign
id|runtime-&gt;boundary
suffix:semicolon
id|rec-&gt;sw_ready
op_add_assign
id|frames_to_bytes
c_func
(paren
id|runtime
comma
id|diff
)paren
suffix:semicolon
id|rec-&gt;appl_ptr
op_assign
id|appl_ptr
suffix:semicolon
)brace
id|qsize
op_assign
id|rec-&gt;hw_queue_size
ques
c_cond
id|rec-&gt;hw_queue_size
suffix:colon
id|rec-&gt;hw_buffer_size
suffix:semicolon
r_while
c_loop
(paren
id|rec-&gt;hw_ready
template_param
l_int|0
)paren
(brace
r_int
id|hw_to_end
op_assign
id|rec-&gt;hw_buffer_size
op_minus
id|rec-&gt;hw_data
suffix:semicolon
r_int
id|sw_to_end
op_assign
id|rec-&gt;sw_buffer_size
op_minus
id|rec-&gt;sw_data
suffix:semicolon
r_int
id|bytes
op_assign
id|rec-&gt;hw_buffer_size
op_minus
id|rec-&gt;hw_ready
suffix:semicolon
r_if
c_cond
(paren
id|rec-&gt;sw_ready
OL
(paren
r_int
)paren
id|bytes
)paren
id|bytes
op_assign
id|rec-&gt;sw_ready
suffix:semicolon
r_if
c_cond
(paren
id|hw_to_end
OL
id|bytes
)paren
id|bytes
op_assign
id|hw_to_end
suffix:semicolon
r_if
c_cond
(paren
id|sw_to_end
OL
id|bytes
)paren
id|bytes
op_assign
id|sw_to_end
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|bytes
)paren
r_break
suffix:semicolon
id|copy
c_func
(paren
id|substream
comma
id|rec
comma
id|bytes
)paren
suffix:semicolon
id|rec-&gt;hw_data
op_add_assign
id|bytes
suffix:semicolon
r_if
c_cond
(paren
(paren
r_int
)paren
id|rec-&gt;hw_data
op_eq
id|rec-&gt;hw_buffer_size
)paren
id|rec-&gt;hw_data
op_assign
l_int|0
suffix:semicolon
id|rec-&gt;sw_data
op_add_assign
id|bytes
suffix:semicolon
r_if
c_cond
(paren
id|rec-&gt;sw_data
op_eq
id|rec-&gt;sw_buffer_size
)paren
id|rec-&gt;sw_data
op_assign
l_int|0
suffix:semicolon
id|rec-&gt;hw_ready
op_add_assign
id|bytes
suffix:semicolon
id|rec-&gt;sw_ready
op_sub_assign
id|bytes
suffix:semicolon
)brace
)brace
multiline_comment|/*&n; * helper function for playback pointer callback&n; * ptr = current byte pointer&n; */
r_static
r_inline
id|snd_pcm_uframes_t
DECL|function|snd_pcm_indirect_playback_pointer
id|snd_pcm_indirect_playback_pointer
c_func
(paren
id|snd_pcm_substream_t
op_star
id|substream
comma
id|snd_pcm_indirect_t
op_star
id|rec
comma
r_int
id|ptr
)paren
(brace
id|ssize_t
id|bytes
op_assign
id|ptr
op_minus
id|rec-&gt;hw_io
suffix:semicolon
r_if
c_cond
(paren
id|bytes
OL
l_int|0
)paren
id|bytes
op_add_assign
id|rec-&gt;hw_buffer_size
suffix:semicolon
id|rec-&gt;hw_io
op_assign
id|ptr
suffix:semicolon
id|rec-&gt;hw_ready
op_sub_assign
id|bytes
suffix:semicolon
id|rec-&gt;sw_io
op_add_assign
id|bytes
suffix:semicolon
r_if
c_cond
(paren
id|rec-&gt;sw_io
op_ge
id|rec-&gt;sw_buffer_size
)paren
id|rec-&gt;sw_io
op_sub_assign
id|rec-&gt;sw_buffer_size
suffix:semicolon
r_if
c_cond
(paren
id|substream-&gt;ops-&gt;ack
)paren
id|substream-&gt;ops
op_member_access_from_pointer
id|ack
c_func
(paren
id|substream
)paren
suffix:semicolon
r_return
id|bytes_to_frames
c_func
(paren
id|substream-&gt;runtime
comma
id|rec-&gt;sw_io
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * helper function for capture ack callback&n; */
r_static
r_inline
r_void
DECL|function|snd_pcm_indirect_capture_transfer
id|snd_pcm_indirect_capture_transfer
c_func
(paren
id|snd_pcm_substream_t
op_star
id|substream
comma
id|snd_pcm_indirect_t
op_star
id|rec
comma
id|snd_pcm_indirect_copy_t
id|copy
)paren
(brace
id|snd_pcm_runtime_t
op_star
id|runtime
op_assign
id|substream-&gt;runtime
suffix:semicolon
id|snd_pcm_uframes_t
id|appl_ptr
op_assign
id|runtime-&gt;control-&gt;appl_ptr
suffix:semicolon
id|snd_pcm_sframes_t
id|diff
op_assign
id|appl_ptr
op_minus
id|rec-&gt;appl_ptr
suffix:semicolon
r_if
c_cond
(paren
id|diff
)paren
(brace
r_if
c_cond
(paren
id|diff
OL
op_minus
(paren
id|snd_pcm_sframes_t
)paren
(paren
id|runtime-&gt;boundary
op_div
l_int|2
)paren
)paren
id|diff
op_add_assign
id|runtime-&gt;boundary
suffix:semicolon
id|rec-&gt;sw_ready
op_sub_assign
id|frames_to_bytes
c_func
(paren
id|runtime
comma
id|diff
)paren
suffix:semicolon
id|rec-&gt;appl_ptr
op_assign
id|appl_ptr
suffix:semicolon
)brace
r_while
c_loop
(paren
id|rec-&gt;hw_ready
OG
l_int|0
op_logical_and
id|rec-&gt;sw_ready
OL
(paren
r_int
)paren
id|rec-&gt;sw_buffer_size
)paren
(brace
r_int
id|hw_to_end
op_assign
id|rec-&gt;hw_buffer_size
op_minus
id|rec-&gt;hw_data
suffix:semicolon
r_int
id|sw_to_end
op_assign
id|rec-&gt;sw_buffer_size
op_minus
id|rec-&gt;sw_data
suffix:semicolon
r_int
id|bytes
op_assign
id|rec-&gt;sw_buffer_size
op_minus
id|rec-&gt;sw_ready
suffix:semicolon
r_if
c_cond
(paren
id|rec-&gt;hw_ready
OL
(paren
r_int
)paren
id|bytes
)paren
id|bytes
op_assign
id|rec-&gt;hw_ready
suffix:semicolon
r_if
c_cond
(paren
id|hw_to_end
OL
id|bytes
)paren
id|bytes
op_assign
id|hw_to_end
suffix:semicolon
r_if
c_cond
(paren
id|sw_to_end
OL
id|bytes
)paren
id|bytes
op_assign
id|sw_to_end
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|bytes
)paren
r_break
suffix:semicolon
id|copy
c_func
(paren
id|substream
comma
id|rec
comma
id|bytes
)paren
suffix:semicolon
id|rec-&gt;hw_data
op_add_assign
id|bytes
suffix:semicolon
r_if
c_cond
(paren
(paren
r_int
)paren
id|rec-&gt;hw_data
op_eq
id|rec-&gt;hw_buffer_size
)paren
id|rec-&gt;hw_data
op_assign
l_int|0
suffix:semicolon
id|rec-&gt;sw_data
op_add_assign
id|bytes
suffix:semicolon
r_if
c_cond
(paren
id|rec-&gt;sw_data
op_eq
id|rec-&gt;sw_buffer_size
)paren
id|rec-&gt;sw_data
op_assign
l_int|0
suffix:semicolon
id|rec-&gt;hw_ready
op_sub_assign
id|bytes
suffix:semicolon
id|rec-&gt;sw_ready
op_add_assign
id|bytes
suffix:semicolon
)brace
)brace
multiline_comment|/*&n; * helper function for capture pointer callback,&n; * ptr = current byte pointer&n; */
r_static
r_inline
id|snd_pcm_uframes_t
DECL|function|snd_pcm_indirect_capture_pointer
id|snd_pcm_indirect_capture_pointer
c_func
(paren
id|snd_pcm_substream_t
op_star
id|substream
comma
id|snd_pcm_indirect_t
op_star
id|rec
comma
r_int
id|ptr
)paren
(brace
id|ssize_t
id|bytes
op_assign
id|ptr
op_minus
id|rec-&gt;hw_io
suffix:semicolon
r_if
c_cond
(paren
id|bytes
OL
l_int|0
)paren
id|bytes
op_add_assign
id|rec-&gt;hw_buffer_size
suffix:semicolon
id|rec-&gt;hw_io
op_assign
id|ptr
suffix:semicolon
id|rec-&gt;hw_ready
op_add_assign
id|bytes
suffix:semicolon
id|rec-&gt;sw_io
op_add_assign
id|bytes
suffix:semicolon
r_if
c_cond
(paren
id|rec-&gt;sw_io
op_ge
id|rec-&gt;sw_buffer_size
)paren
id|rec-&gt;sw_io
op_sub_assign
id|rec-&gt;sw_buffer_size
suffix:semicolon
r_if
c_cond
(paren
id|substream-&gt;ops-&gt;ack
)paren
id|substream-&gt;ops
op_member_access_from_pointer
id|ack
c_func
(paren
id|substream
)paren
suffix:semicolon
r_return
id|bytes_to_frames
c_func
(paren
id|substream-&gt;runtime
comma
id|rec-&gt;sw_io
)paren
suffix:semicolon
)brace
macro_line|#endif /* __SOUND_PCM_INDIRECT_H */
eof
