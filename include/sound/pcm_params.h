macro_line|#ifndef __SOUND_PCM_PARAMS_H
DECL|macro|__SOUND_PCM_PARAMS_H
mdefine_line|#define __SOUND_PCM_PARAMS_H
multiline_comment|/*&n; *  PCM params helpers&n; *  Copyright (c) by Abramo Bagnara &lt;abramo@alsa-project.org&gt;&n; *&n; *&n; *   This program is free software; you can redistribute it and/or modify&n; *   it under the terms of the GNU General Public License as published by&n; *   the Free Software Foundation; either version 2 of the License, or&n; *   (at your option) any later version.&n; *&n; *   This program is distributed in the hope that it will be useful,&n; *   but WITHOUT ANY WARRANTY; without even the implied warranty of&n; *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; *   GNU General Public License for more details.&n; *&n; *   You should have received a copy of the GNU General Public License&n; *   along with this program; if not, write to the Free Software&n; *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA&n; *&n; */
r_extern
r_int
id|snd_pcm_hw_param_mask
c_func
(paren
id|snd_pcm_substream_t
op_star
id|pcm
comma
id|snd_pcm_hw_params_t
op_star
id|params
comma
id|snd_pcm_hw_param_t
id|var
comma
r_const
id|snd_mask_t
op_star
id|val
)paren
suffix:semicolon
r_extern
r_int
r_int
id|snd_pcm_hw_param_value_min
c_func
(paren
r_const
id|snd_pcm_hw_params_t
op_star
id|params
comma
id|snd_pcm_hw_param_t
id|var
comma
r_int
op_star
id|dir
)paren
suffix:semicolon
r_extern
r_int
r_int
id|snd_pcm_hw_param_value_max
c_func
(paren
r_const
id|snd_pcm_hw_params_t
op_star
id|params
comma
id|snd_pcm_hw_param_t
id|var
comma
r_int
op_star
id|dir
)paren
suffix:semicolon
r_extern
r_int
id|_snd_pcm_hw_param_min
c_func
(paren
id|snd_pcm_hw_params_t
op_star
id|params
comma
id|snd_pcm_hw_param_t
id|var
comma
r_int
r_int
id|val
comma
r_int
id|dir
)paren
suffix:semicolon
r_extern
r_int
id|_snd_pcm_hw_param_setinteger
c_func
(paren
id|snd_pcm_hw_params_t
op_star
id|params
comma
id|snd_pcm_hw_param_t
id|var
)paren
suffix:semicolon
r_extern
r_int
id|_snd_pcm_hw_param_set
c_func
(paren
id|snd_pcm_hw_params_t
op_star
id|params
comma
id|snd_pcm_hw_param_t
id|var
comma
r_int
r_int
id|val
comma
r_int
id|dir
)paren
suffix:semicolon
multiline_comment|/* To share the same code we have  alsa-lib */
DECL|macro|INLINE
mdefine_line|#define INLINE static inline
DECL|macro|assert
mdefine_line|#define assert(a) (void)(a)
DECL|macro|SNDRV_MASK_BITS
mdefine_line|#define SNDRV_MASK_BITS&t;64&t;/* we use so far 64bits only */
DECL|macro|SNDRV_MASK_SIZE
mdefine_line|#define SNDRV_MASK_SIZE&t;(SNDRV_MASK_BITS / 32)
DECL|macro|MASK_OFS
mdefine_line|#define MASK_OFS(i)&t;((i) &gt;&gt; 5)
DECL|macro|MASK_BIT
mdefine_line|#define MASK_BIT(i)&t;(1U &lt;&lt; ((i) &amp; 31))
DECL|function|ld2
id|INLINE
r_int
r_int
id|ld2
c_func
(paren
id|u_int32_t
id|v
)paren
(brace
r_int
id|r
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|v
op_ge
l_int|0x10000
)paren
(brace
id|v
op_rshift_assign
l_int|16
suffix:semicolon
id|r
op_add_assign
l_int|16
suffix:semicolon
)brace
r_if
c_cond
(paren
id|v
op_ge
l_int|0x100
)paren
(brace
id|v
op_rshift_assign
l_int|8
suffix:semicolon
id|r
op_add_assign
l_int|8
suffix:semicolon
)brace
r_if
c_cond
(paren
id|v
op_ge
l_int|0x10
)paren
(brace
id|v
op_rshift_assign
l_int|4
suffix:semicolon
id|r
op_add_assign
l_int|4
suffix:semicolon
)brace
r_if
c_cond
(paren
id|v
op_ge
l_int|4
)paren
(brace
id|v
op_rshift_assign
l_int|2
suffix:semicolon
id|r
op_add_assign
l_int|2
suffix:semicolon
)brace
r_if
c_cond
(paren
id|v
op_ge
l_int|2
)paren
id|r
op_increment
suffix:semicolon
r_return
id|r
suffix:semicolon
)brace
DECL|function|snd_mask_sizeof
id|INLINE
r_int
id|snd_mask_sizeof
c_func
(paren
r_void
)paren
(brace
r_return
r_sizeof
(paren
id|snd_mask_t
)paren
suffix:semicolon
)brace
DECL|function|snd_mask_none
id|INLINE
r_void
id|snd_mask_none
c_func
(paren
id|snd_mask_t
op_star
id|mask
)paren
(brace
id|memset
c_func
(paren
id|mask
comma
l_int|0
comma
r_sizeof
(paren
op_star
id|mask
)paren
)paren
suffix:semicolon
)brace
DECL|function|snd_mask_any
id|INLINE
r_void
id|snd_mask_any
c_func
(paren
id|snd_mask_t
op_star
id|mask
)paren
(brace
id|memset
c_func
(paren
id|mask
comma
l_int|0xff
comma
id|SNDRV_MASK_SIZE
op_star
r_sizeof
(paren
id|u_int32_t
)paren
)paren
suffix:semicolon
)brace
DECL|function|snd_mask_empty
id|INLINE
r_int
id|snd_mask_empty
c_func
(paren
r_const
id|snd_mask_t
op_star
id|mask
)paren
(brace
r_int
id|i
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|SNDRV_MASK_SIZE
suffix:semicolon
id|i
op_increment
)paren
r_if
c_cond
(paren
id|mask-&gt;bits
(braket
id|i
)braket
)paren
r_return
l_int|0
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|snd_mask_min
id|INLINE
r_int
r_int
id|snd_mask_min
c_func
(paren
r_const
id|snd_mask_t
op_star
id|mask
)paren
(brace
r_int
id|i
suffix:semicolon
m_assert
(paren
op_logical_neg
id|snd_mask_empty
c_func
(paren
id|mask
)paren
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|SNDRV_MASK_SIZE
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|mask-&gt;bits
(braket
id|i
)braket
)paren
r_return
id|ffs
c_func
(paren
id|mask-&gt;bits
(braket
id|i
)braket
)paren
op_minus
l_int|1
op_plus
(paren
id|i
op_lshift
l_int|5
)paren
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|snd_mask_max
id|INLINE
r_int
r_int
id|snd_mask_max
c_func
(paren
r_const
id|snd_mask_t
op_star
id|mask
)paren
(brace
r_int
id|i
suffix:semicolon
m_assert
(paren
op_logical_neg
id|snd_mask_empty
c_func
(paren
id|mask
)paren
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
id|SNDRV_MASK_SIZE
op_minus
l_int|1
suffix:semicolon
id|i
op_ge
l_int|0
suffix:semicolon
id|i
op_decrement
)paren
(brace
r_if
c_cond
(paren
id|mask-&gt;bits
(braket
id|i
)braket
)paren
r_return
id|ld2
c_func
(paren
id|mask-&gt;bits
(braket
id|i
)braket
)paren
op_plus
(paren
id|i
op_lshift
l_int|5
)paren
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|snd_mask_set
id|INLINE
r_void
id|snd_mask_set
c_func
(paren
id|snd_mask_t
op_star
id|mask
comma
r_int
r_int
id|val
)paren
(brace
m_assert
(paren
id|val
op_le
id|SNDRV_MASK_BITS
)paren
suffix:semicolon
id|mask-&gt;bits
(braket
id|MASK_OFS
c_func
(paren
id|val
)paren
)braket
op_or_assign
id|MASK_BIT
c_func
(paren
id|val
)paren
suffix:semicolon
)brace
DECL|function|snd_mask_reset
id|INLINE
r_void
id|snd_mask_reset
c_func
(paren
id|snd_mask_t
op_star
id|mask
comma
r_int
r_int
id|val
)paren
(brace
m_assert
(paren
id|val
op_le
id|SNDRV_MASK_BITS
)paren
suffix:semicolon
id|mask-&gt;bits
(braket
id|MASK_OFS
c_func
(paren
id|val
)paren
)braket
op_and_assign
op_complement
id|MASK_BIT
c_func
(paren
id|val
)paren
suffix:semicolon
)brace
DECL|function|snd_mask_set_range
id|INLINE
r_void
id|snd_mask_set_range
c_func
(paren
id|snd_mask_t
op_star
id|mask
comma
r_int
r_int
id|from
comma
r_int
r_int
id|to
)paren
(brace
r_int
id|i
suffix:semicolon
m_assert
(paren
id|to
op_le
id|SNDRV_MASK_BITS
op_logical_and
id|from
op_le
id|to
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
id|from
suffix:semicolon
id|i
op_le
id|to
suffix:semicolon
id|i
op_increment
)paren
id|mask-&gt;bits
(braket
id|MASK_OFS
c_func
(paren
id|i
)paren
)braket
op_or_assign
id|MASK_BIT
c_func
(paren
id|i
)paren
suffix:semicolon
)brace
DECL|function|snd_mask_reset_range
id|INLINE
r_void
id|snd_mask_reset_range
c_func
(paren
id|snd_mask_t
op_star
id|mask
comma
r_int
r_int
id|from
comma
r_int
r_int
id|to
)paren
(brace
r_int
id|i
suffix:semicolon
m_assert
(paren
id|to
op_le
id|SNDRV_MASK_BITS
op_logical_and
id|from
op_le
id|to
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
id|from
suffix:semicolon
id|i
op_le
id|to
suffix:semicolon
id|i
op_increment
)paren
id|mask-&gt;bits
(braket
id|MASK_OFS
c_func
(paren
id|i
)paren
)braket
op_and_assign
op_complement
id|MASK_BIT
c_func
(paren
id|i
)paren
suffix:semicolon
)brace
DECL|function|snd_mask_leave
id|INLINE
r_void
id|snd_mask_leave
c_func
(paren
id|snd_mask_t
op_star
id|mask
comma
r_int
r_int
id|val
)paren
(brace
r_int
r_int
id|v
suffix:semicolon
m_assert
(paren
id|val
op_le
id|SNDRV_MASK_BITS
)paren
suffix:semicolon
id|v
op_assign
id|mask-&gt;bits
(braket
id|MASK_OFS
c_func
(paren
id|val
)paren
)braket
op_amp
id|MASK_BIT
c_func
(paren
id|val
)paren
suffix:semicolon
id|snd_mask_none
c_func
(paren
id|mask
)paren
suffix:semicolon
id|mask-&gt;bits
(braket
id|MASK_OFS
c_func
(paren
id|val
)paren
)braket
op_assign
id|v
suffix:semicolon
)brace
DECL|function|snd_mask_intersect
id|INLINE
r_void
id|snd_mask_intersect
c_func
(paren
id|snd_mask_t
op_star
id|mask
comma
r_const
id|snd_mask_t
op_star
id|v
)paren
(brace
r_int
id|i
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|SNDRV_MASK_SIZE
suffix:semicolon
id|i
op_increment
)paren
id|mask-&gt;bits
(braket
id|i
)braket
op_and_assign
id|v-&gt;bits
(braket
id|i
)braket
suffix:semicolon
)brace
DECL|function|snd_mask_eq
id|INLINE
r_int
id|snd_mask_eq
c_func
(paren
r_const
id|snd_mask_t
op_star
id|mask
comma
r_const
id|snd_mask_t
op_star
id|v
)paren
(brace
r_return
op_logical_neg
id|memcmp
c_func
(paren
id|mask
comma
id|v
comma
id|SNDRV_MASK_SIZE
op_star
r_sizeof
(paren
id|u_int32_t
)paren
)paren
suffix:semicolon
)brace
DECL|function|snd_mask_copy
id|INLINE
r_void
id|snd_mask_copy
c_func
(paren
id|snd_mask_t
op_star
id|mask
comma
r_const
id|snd_mask_t
op_star
id|v
)paren
(brace
op_star
id|mask
op_assign
op_star
id|v
suffix:semicolon
)brace
DECL|function|snd_mask_test
id|INLINE
r_int
id|snd_mask_test
c_func
(paren
r_const
id|snd_mask_t
op_star
id|mask
comma
r_int
r_int
id|val
)paren
(brace
m_assert
(paren
id|val
op_le
id|SNDRV_MASK_BITS
)paren
suffix:semicolon
r_return
id|mask-&gt;bits
(braket
id|MASK_OFS
c_func
(paren
id|val
)paren
)braket
op_amp
id|MASK_BIT
c_func
(paren
id|val
)paren
suffix:semicolon
)brace
DECL|function|snd_mask_single
id|INLINE
r_int
id|snd_mask_single
c_func
(paren
r_const
id|snd_mask_t
op_star
id|mask
)paren
(brace
r_int
id|i
comma
id|c
op_assign
l_int|0
suffix:semicolon
m_assert
(paren
op_logical_neg
id|snd_mask_empty
c_func
(paren
id|mask
)paren
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|SNDRV_MASK_SIZE
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|mask-&gt;bits
(braket
id|i
)braket
)paren
r_continue
suffix:semicolon
r_if
c_cond
(paren
id|mask-&gt;bits
(braket
id|i
)braket
op_amp
(paren
id|mask-&gt;bits
(braket
id|i
)braket
op_minus
l_int|1
)paren
)paren
r_return
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|c
)paren
r_return
l_int|0
suffix:semicolon
id|c
op_increment
suffix:semicolon
)brace
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|snd_mask_refine
id|INLINE
r_int
id|snd_mask_refine
c_func
(paren
id|snd_mask_t
op_star
id|mask
comma
r_const
id|snd_mask_t
op_star
id|v
)paren
(brace
id|snd_mask_t
id|old
suffix:semicolon
m_assert
(paren
op_logical_neg
id|snd_mask_empty
c_func
(paren
id|mask
)paren
)paren
suffix:semicolon
id|snd_mask_copy
c_func
(paren
op_amp
id|old
comma
id|mask
)paren
suffix:semicolon
id|snd_mask_intersect
c_func
(paren
id|mask
comma
id|v
)paren
suffix:semicolon
r_if
c_cond
(paren
id|snd_mask_empty
c_func
(paren
id|mask
)paren
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_return
op_logical_neg
id|snd_mask_eq
c_func
(paren
id|mask
comma
op_amp
id|old
)paren
suffix:semicolon
)brace
DECL|function|snd_mask_refine_first
id|INLINE
r_int
id|snd_mask_refine_first
c_func
(paren
id|snd_mask_t
op_star
id|mask
)paren
(brace
m_assert
(paren
op_logical_neg
id|snd_mask_empty
c_func
(paren
id|mask
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|snd_mask_single
c_func
(paren
id|mask
)paren
)paren
r_return
l_int|0
suffix:semicolon
id|snd_mask_leave
c_func
(paren
id|mask
comma
id|snd_mask_min
c_func
(paren
id|mask
)paren
)paren
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|snd_mask_refine_last
id|INLINE
r_int
id|snd_mask_refine_last
c_func
(paren
id|snd_mask_t
op_star
id|mask
)paren
(brace
m_assert
(paren
op_logical_neg
id|snd_mask_empty
c_func
(paren
id|mask
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|snd_mask_single
c_func
(paren
id|mask
)paren
)paren
r_return
l_int|0
suffix:semicolon
id|snd_mask_leave
c_func
(paren
id|mask
comma
id|snd_mask_max
c_func
(paren
id|mask
)paren
)paren
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|snd_mask_refine_min
id|INLINE
r_int
id|snd_mask_refine_min
c_func
(paren
id|snd_mask_t
op_star
id|mask
comma
r_int
r_int
id|val
)paren
(brace
m_assert
(paren
op_logical_neg
id|snd_mask_empty
c_func
(paren
id|mask
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|snd_mask_min
c_func
(paren
id|mask
)paren
op_ge
id|val
)paren
r_return
l_int|0
suffix:semicolon
id|snd_mask_reset_range
c_func
(paren
id|mask
comma
l_int|0
comma
id|val
op_minus
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|snd_mask_empty
c_func
(paren
id|mask
)paren
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|snd_mask_refine_max
id|INLINE
r_int
id|snd_mask_refine_max
c_func
(paren
id|snd_mask_t
op_star
id|mask
comma
r_int
r_int
id|val
)paren
(brace
m_assert
(paren
op_logical_neg
id|snd_mask_empty
c_func
(paren
id|mask
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|snd_mask_max
c_func
(paren
id|mask
)paren
op_le
id|val
)paren
r_return
l_int|0
suffix:semicolon
id|snd_mask_reset_range
c_func
(paren
id|mask
comma
id|val
op_plus
l_int|1
comma
id|SNDRV_MASK_BITS
)paren
suffix:semicolon
r_if
c_cond
(paren
id|snd_mask_empty
c_func
(paren
id|mask
)paren
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|snd_mask_refine_set
id|INLINE
r_int
id|snd_mask_refine_set
c_func
(paren
id|snd_mask_t
op_star
id|mask
comma
r_int
r_int
id|val
)paren
(brace
r_int
id|changed
suffix:semicolon
m_assert
(paren
op_logical_neg
id|snd_mask_empty
c_func
(paren
id|mask
)paren
)paren
suffix:semicolon
id|changed
op_assign
op_logical_neg
id|snd_mask_single
c_func
(paren
id|mask
)paren
suffix:semicolon
id|snd_mask_leave
c_func
(paren
id|mask
comma
id|val
)paren
suffix:semicolon
r_if
c_cond
(paren
id|snd_mask_empty
c_func
(paren
id|mask
)paren
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_return
id|changed
suffix:semicolon
)brace
DECL|function|snd_mask_value
id|INLINE
r_int
id|snd_mask_value
c_func
(paren
r_const
id|snd_mask_t
op_star
id|mask
)paren
(brace
m_assert
(paren
op_logical_neg
id|snd_mask_empty
c_func
(paren
id|mask
)paren
)paren
suffix:semicolon
r_return
id|snd_mask_min
c_func
(paren
id|mask
)paren
suffix:semicolon
)brace
DECL|function|snd_interval_any
id|INLINE
r_void
id|snd_interval_any
c_func
(paren
id|snd_interval_t
op_star
id|i
)paren
(brace
id|i-&gt;min
op_assign
l_int|0
suffix:semicolon
id|i-&gt;openmin
op_assign
l_int|0
suffix:semicolon
id|i-&gt;max
op_assign
id|UINT_MAX
suffix:semicolon
id|i-&gt;openmax
op_assign
l_int|0
suffix:semicolon
id|i-&gt;integer
op_assign
l_int|0
suffix:semicolon
id|i-&gt;empty
op_assign
l_int|0
suffix:semicolon
)brace
DECL|function|snd_interval_none
id|INLINE
r_void
id|snd_interval_none
c_func
(paren
id|snd_interval_t
op_star
id|i
)paren
(brace
id|i-&gt;empty
op_assign
l_int|1
suffix:semicolon
)brace
DECL|function|snd_interval_checkempty
id|INLINE
r_int
id|snd_interval_checkempty
c_func
(paren
r_const
id|snd_interval_t
op_star
id|i
)paren
(brace
r_return
(paren
id|i-&gt;min
OG
id|i-&gt;max
op_logical_or
(paren
id|i-&gt;min
op_eq
id|i-&gt;max
op_logical_and
(paren
id|i-&gt;openmin
op_logical_or
id|i-&gt;openmax
)paren
)paren
)paren
suffix:semicolon
)brace
DECL|function|snd_interval_empty
id|INLINE
r_int
id|snd_interval_empty
c_func
(paren
r_const
id|snd_interval_t
op_star
id|i
)paren
(brace
r_return
id|i-&gt;empty
suffix:semicolon
)brace
DECL|function|snd_interval_single
id|INLINE
r_int
id|snd_interval_single
c_func
(paren
r_const
id|snd_interval_t
op_star
id|i
)paren
(brace
m_assert
(paren
op_logical_neg
id|snd_interval_empty
c_func
(paren
id|i
)paren
)paren
suffix:semicolon
r_return
(paren
id|i-&gt;min
op_eq
id|i-&gt;max
op_logical_or
(paren
id|i-&gt;min
op_plus
l_int|1
op_eq
id|i-&gt;max
op_logical_and
id|i-&gt;openmax
)paren
)paren
suffix:semicolon
)brace
DECL|function|snd_interval_value
id|INLINE
r_int
id|snd_interval_value
c_func
(paren
r_const
id|snd_interval_t
op_star
id|i
)paren
(brace
m_assert
(paren
id|snd_interval_single
c_func
(paren
id|i
)paren
)paren
suffix:semicolon
r_return
id|i-&gt;min
suffix:semicolon
)brace
DECL|function|snd_interval_min
id|INLINE
r_int
id|snd_interval_min
c_func
(paren
r_const
id|snd_interval_t
op_star
id|i
)paren
(brace
m_assert
(paren
op_logical_neg
id|snd_interval_empty
c_func
(paren
id|i
)paren
)paren
suffix:semicolon
r_return
id|i-&gt;min
suffix:semicolon
)brace
DECL|function|snd_interval_max
id|INLINE
r_int
id|snd_interval_max
c_func
(paren
r_const
id|snd_interval_t
op_star
id|i
)paren
(brace
r_int
r_int
id|v
suffix:semicolon
m_assert
(paren
op_logical_neg
id|snd_interval_empty
c_func
(paren
id|i
)paren
)paren
suffix:semicolon
id|v
op_assign
id|i-&gt;max
suffix:semicolon
r_if
c_cond
(paren
id|i-&gt;openmax
)paren
id|v
op_decrement
suffix:semicolon
r_return
id|v
suffix:semicolon
)brace
DECL|function|snd_interval_test
id|INLINE
r_int
id|snd_interval_test
c_func
(paren
r_const
id|snd_interval_t
op_star
id|i
comma
r_int
r_int
id|val
)paren
(brace
r_return
op_logical_neg
(paren
(paren
id|i-&gt;min
OG
id|val
op_logical_or
(paren
id|i-&gt;min
op_eq
id|val
op_logical_and
id|i-&gt;openmin
)paren
op_logical_or
id|i-&gt;max
OL
id|val
op_logical_or
(paren
id|i-&gt;max
op_eq
id|val
op_logical_and
id|i-&gt;openmax
)paren
)paren
)paren
suffix:semicolon
)brace
DECL|function|snd_interval_copy
id|INLINE
r_void
id|snd_interval_copy
c_func
(paren
id|snd_interval_t
op_star
id|d
comma
r_const
id|snd_interval_t
op_star
id|s
)paren
(brace
op_star
id|d
op_assign
op_star
id|s
suffix:semicolon
)brace
DECL|function|snd_interval_setinteger
id|INLINE
r_int
id|snd_interval_setinteger
c_func
(paren
id|snd_interval_t
op_star
id|i
)paren
(brace
r_if
c_cond
(paren
id|i-&gt;integer
)paren
r_return
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|i-&gt;openmin
op_logical_and
id|i-&gt;openmax
op_logical_and
id|i-&gt;min
op_eq
id|i-&gt;max
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
id|i-&gt;integer
op_assign
l_int|1
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|snd_interval_eq
id|INLINE
r_int
id|snd_interval_eq
c_func
(paren
r_const
id|snd_interval_t
op_star
id|i1
comma
r_const
id|snd_interval_t
op_star
id|i2
)paren
(brace
r_if
c_cond
(paren
id|i1-&gt;empty
)paren
r_return
id|i2-&gt;empty
suffix:semicolon
r_if
c_cond
(paren
id|i2-&gt;empty
)paren
r_return
id|i1-&gt;empty
suffix:semicolon
r_return
id|i1-&gt;min
op_eq
id|i2-&gt;min
op_logical_and
id|i1-&gt;openmin
op_eq
id|i2-&gt;openmin
op_logical_and
id|i1-&gt;max
op_eq
id|i2-&gt;max
op_logical_and
id|i1-&gt;openmax
op_eq
id|i2-&gt;openmax
suffix:semicolon
)brace
DECL|function|add
r_static
r_inline
r_int
r_int
id|add
c_func
(paren
r_int
r_int
id|a
comma
r_int
r_int
id|b
)paren
(brace
r_if
c_cond
(paren
id|a
op_ge
id|UINT_MAX
op_minus
id|b
)paren
r_return
id|UINT_MAX
suffix:semicolon
r_return
id|a
op_plus
id|b
suffix:semicolon
)brace
DECL|function|sub
r_static
r_inline
r_int
r_int
id|sub
c_func
(paren
r_int
r_int
id|a
comma
r_int
r_int
id|b
)paren
(brace
r_if
c_cond
(paren
id|a
OG
id|b
)paren
r_return
id|a
op_minus
id|b
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|macro|INLINE
macro_line|#undef INLINE
DECL|macro|assert
macro_line|#undef assert
macro_line|#endif /* __SOUND_PCM_PARAMS_H */
eof
