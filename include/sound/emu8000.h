macro_line|#ifndef __SOUND_EMU8000_H
DECL|macro|__SOUND_EMU8000_H
mdefine_line|#define __SOUND_EMU8000_H
multiline_comment|/*&n; *  Defines for the emu8000 (AWE32/64)&n; *&n; *  Copyright (C) 1999 Steve Ratcliffe&n; *  Copyright (C) 1999-2000 Takashi Iwai &lt;tiwai@suse.de&gt;&n; *&n; *   This program is free software; you can redistribute it and/or modify&n; *   it under the terms of the GNU General Public License as published by&n; *   the Free Software Foundation; either version 2 of the License, or&n; *   (at your option) any later version.&n; *&n; *   This program is distributed in the hope that it will be useful,&n; *   but WITHOUT ANY WARRANTY; without even the implied warranty of&n; *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; *   GNU General Public License for more details.&n; *&n; *   You should have received a copy of the GNU General Public License&n; *   along with this program; if not, write to the Free Software&n; *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA&n; */
macro_line|#include &quot;emux_synth.h&quot;
macro_line|#include &quot;seq_kernel.h&quot;
multiline_comment|/*&n; * Hardware parameters.&n; */
DECL|macro|EMU8000_MAX_DRAM
mdefine_line|#define EMU8000_MAX_DRAM (28 * 1024 * 1024) /* Max on-board mem is 28Mb ???*/
DECL|macro|EMU8000_DRAM_OFFSET
mdefine_line|#define EMU8000_DRAM_OFFSET 0x200000&t;/* Beginning of on board ram */
DECL|macro|EMU8000_CHANNELS
mdefine_line|#define EMU8000_CHANNELS   32&t;/* Number of hardware channels */
DECL|macro|EMU8000_DRAM_VOICES
mdefine_line|#define EMU8000_DRAM_VOICES&t;30&t;/* number of normal voices */
multiline_comment|/* Flags to set a dma channel to read or write */
DECL|macro|EMU8000_RAM_READ
mdefine_line|#define EMU8000_RAM_READ   0
DECL|macro|EMU8000_RAM_WRITE
mdefine_line|#define EMU8000_RAM_WRITE  1
DECL|macro|EMU8000_RAM_CLOSE
mdefine_line|#define EMU8000_RAM_CLOSE  2
DECL|macro|EMU8000_RAM_MODE_MASK
mdefine_line|#define EMU8000_RAM_MODE_MASK&t;0x03
DECL|macro|EMU8000_RAM_RIGHT
mdefine_line|#define EMU8000_RAM_RIGHT&t;0x10&t;/* use &squot;right&squot; DMA channel */
r_enum
(brace
DECL|enumerator|EMU8000_CONTROL_BASS
id|EMU8000_CONTROL_BASS
op_assign
l_int|0
comma
DECL|enumerator|EMU8000_CONTROL_TREBLE
id|EMU8000_CONTROL_TREBLE
comma
DECL|enumerator|EMU8000_CONTROL_CHORUS_MODE
id|EMU8000_CONTROL_CHORUS_MODE
comma
DECL|enumerator|EMU8000_CONTROL_REVERB_MODE
id|EMU8000_CONTROL_REVERB_MODE
comma
DECL|enumerator|EMU8000_CONTROL_FM_CHORUS_DEPTH
id|EMU8000_CONTROL_FM_CHORUS_DEPTH
comma
DECL|enumerator|EMU8000_CONTROL_FM_REVERB_DEPTH
id|EMU8000_CONTROL_FM_REVERB_DEPTH
comma
DECL|enumerator|EMU8000_NUM_CONTROLS
id|EMU8000_NUM_CONTROLS
comma
)brace
suffix:semicolon
multiline_comment|/*&n; * Structure to hold all state information for the emu8000 driver.&n; *&n; * Note 1: The chip supports 32 channels in hardware this is max_channels&n; * some of the channels may be used for other things so max_channels is&n; * the number in use for wave voices.&n; */
DECL|struct|snd_emu8000
r_typedef
r_struct
id|snd_emu8000
(brace
DECL|member|emu
id|snd_emux_t
op_star
id|emu
suffix:semicolon
DECL|member|index
r_int
id|index
suffix:semicolon
multiline_comment|/* sequencer client index */
DECL|member|seq_ports
r_int
id|seq_ports
suffix:semicolon
multiline_comment|/* number of sequencer ports */
DECL|member|fm_chorus_depth
r_int
id|fm_chorus_depth
suffix:semicolon
multiline_comment|/* FM OPL3 chorus depth */
DECL|member|fm_reverb_depth
r_int
id|fm_reverb_depth
suffix:semicolon
multiline_comment|/* FM OPL3 reverb depth */
DECL|member|mem_size
r_int
id|mem_size
suffix:semicolon
multiline_comment|/* memory size */
DECL|member|port1
r_int
r_int
id|port1
suffix:semicolon
multiline_comment|/* Port usually base+0 */
DECL|member|port2
r_int
r_int
id|port2
suffix:semicolon
multiline_comment|/* Port usually at base+0x400 */
DECL|member|port3
r_int
r_int
id|port3
suffix:semicolon
multiline_comment|/* Port usually at base+0x800 */
DECL|member|res_port1
r_struct
id|resource
op_star
id|res_port1
suffix:semicolon
DECL|member|res_port2
r_struct
id|resource
op_star
id|res_port2
suffix:semicolon
DECL|member|res_port3
r_struct
id|resource
op_star
id|res_port3
suffix:semicolon
DECL|member|last_reg
r_int
r_int
id|last_reg
suffix:semicolon
multiline_comment|/* Last register command */
DECL|member|reg_lock
id|spinlock_t
id|reg_lock
suffix:semicolon
DECL|member|dram_checked
r_int
id|dram_checked
suffix:semicolon
DECL|member|card
id|snd_card_t
op_star
id|card
suffix:semicolon
multiline_comment|/* The card that this belongs to */
DECL|member|chorus_mode
r_int
id|chorus_mode
suffix:semicolon
DECL|member|reverb_mode
r_int
id|reverb_mode
suffix:semicolon
DECL|member|bass_level
r_int
id|bass_level
suffix:semicolon
DECL|member|treble_level
r_int
id|treble_level
suffix:semicolon
DECL|member|memhdr
id|snd_util_memhdr_t
op_star
id|memhdr
suffix:semicolon
DECL|member|control_lock
id|spinlock_t
id|control_lock
suffix:semicolon
DECL|member|controls
id|snd_kcontrol_t
op_star
id|controls
(braket
id|EMU8000_NUM_CONTROLS
)braket
suffix:semicolon
DECL|member|pcm
id|snd_pcm_t
op_star
id|pcm
suffix:semicolon
multiline_comment|/* pcm on emu8000 wavetable */
DECL|typedef|emu8000_t
)brace
id|emu8000_t
suffix:semicolon
multiline_comment|/* sequencer device id */
DECL|macro|SNDRV_SEQ_DEV_ID_EMU8000
mdefine_line|#define SNDRV_SEQ_DEV_ID_EMU8000&t;&quot;emu8000-synth&quot;
multiline_comment|/* exported functions */
r_int
id|snd_emu8000_new
c_func
(paren
id|snd_card_t
op_star
id|card
comma
r_int
id|device
comma
r_int
id|port
comma
r_int
id|seq_ports
comma
id|snd_seq_device_t
op_star
op_star
id|ret
)paren
suffix:semicolon
r_void
id|snd_emu8000_poke
c_func
(paren
id|emu8000_t
op_star
id|emu
comma
r_int
r_int
id|port
comma
r_int
r_int
id|reg
comma
r_int
r_int
id|val
)paren
suffix:semicolon
r_int
r_int
id|snd_emu8000_peek
c_func
(paren
id|emu8000_t
op_star
id|emu
comma
r_int
r_int
id|port
comma
r_int
r_int
id|reg
)paren
suffix:semicolon
r_void
id|snd_emu8000_poke_dw
c_func
(paren
id|emu8000_t
op_star
id|emu
comma
r_int
r_int
id|port
comma
r_int
r_int
id|reg
comma
r_int
r_int
id|val
)paren
suffix:semicolon
r_int
r_int
id|snd_emu8000_peek_dw
c_func
(paren
id|emu8000_t
op_star
id|emu
comma
r_int
r_int
id|port
comma
r_int
r_int
id|reg
)paren
suffix:semicolon
r_void
id|snd_emu8000_dma_chan
c_func
(paren
id|emu8000_t
op_star
id|emu
comma
r_int
id|ch
comma
r_int
id|mode
)paren
suffix:semicolon
r_void
id|snd_emu8000_init_fm
c_func
(paren
id|emu8000_t
op_star
id|emu
)paren
suffix:semicolon
r_void
id|snd_emu8000_update_chorus_mode
c_func
(paren
id|emu8000_t
op_star
id|emu
)paren
suffix:semicolon
r_void
id|snd_emu8000_update_reverb_mode
c_func
(paren
id|emu8000_t
op_star
id|emu
)paren
suffix:semicolon
r_void
id|snd_emu8000_update_equalizer
c_func
(paren
id|emu8000_t
op_star
id|emu
)paren
suffix:semicolon
r_int
id|snd_emu8000_load_chorus_fx
c_func
(paren
id|emu8000_t
op_star
id|emu
comma
r_int
id|mode
comma
r_const
r_void
op_star
id|buf
comma
r_int
id|len
)paren
suffix:semicolon
r_int
id|snd_emu8000_load_reverb_fx
c_func
(paren
id|emu8000_t
op_star
id|emu
comma
r_int
id|mode
comma
r_const
r_void
op_star
id|buf
comma
r_int
id|len
)paren
suffix:semicolon
macro_line|#endif /* __SOUND_EMU8000_H */
eof
