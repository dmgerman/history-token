macro_line|#ifndef __SOUND_AK4XXX_ADDA_H
DECL|macro|__SOUND_AK4XXX_ADDA_H
mdefine_line|#define __SOUND_AK4XXX_ADDA_H
multiline_comment|/*&n; *   ALSA driver for AK4524 / AK4528 / AK4529 / AK4355 / AK4381&n; *   AD and DA converters&n; *&n; *&t;Copyright (c) 2000 Jaroslav Kysela &lt;perex@suse.cz&gt;&n; *&n; *   This program is free software; you can redistribute it and/or modify&n; *   it under the terms of the GNU General Public License as published by&n; *   the Free Software Foundation; either version 2 of the License, or&n; *   (at your option) any later version.&n; *&n; *   This program is distributed in the hope that it will be useful,&n; *   but WITHOUT ANY WARRANTY; without even the implied warranty of&n; *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; *   GNU General Public License for more details.&n; *&n; *   You should have received a copy of the GNU General Public License&n; *   along with this program; if not, write to the Free Software&n; *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA&n; *&n; */
macro_line|#ifndef AK4XXX_MAX_CHIPS
DECL|macro|AK4XXX_MAX_CHIPS
mdefine_line|#define AK4XXX_MAX_CHIPS&t;4
macro_line|#endif
DECL|typedef|akm4xxx_t
r_typedef
r_struct
id|snd_akm4xxx
id|akm4xxx_t
suffix:semicolon
DECL|struct|snd_ak4xxx_ops
r_struct
id|snd_ak4xxx_ops
(brace
DECL|member|lock
r_void
(paren
op_star
id|lock
)paren
(paren
id|akm4xxx_t
op_star
id|ak
comma
r_int
id|chip
)paren
suffix:semicolon
DECL|member|unlock
r_void
(paren
op_star
id|unlock
)paren
(paren
id|akm4xxx_t
op_star
id|ak
comma
r_int
id|chip
)paren
suffix:semicolon
DECL|member|write
r_void
(paren
op_star
id|write
)paren
(paren
id|akm4xxx_t
op_star
id|ak
comma
r_int
id|chip
comma
r_int
r_char
id|reg
comma
r_int
r_char
id|val
)paren
suffix:semicolon
singleline_comment|// unsigned char (*read)(akm4xxx_t *ak, int chip, unsigned char reg);
DECL|member|set_rate_val
r_void
(paren
op_star
id|set_rate_val
)paren
(paren
id|akm4xxx_t
op_star
id|ak
comma
r_int
r_int
id|rate
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|AK4XXX_IMAGE_SIZE
mdefine_line|#define AK4XXX_IMAGE_SIZE&t;(AK4XXX_MAX_CHIPS * 16)&t;/* 64 bytes */
DECL|struct|snd_akm4xxx
r_struct
id|snd_akm4xxx
(brace
DECL|member|card
id|snd_card_t
op_star
id|card
suffix:semicolon
DECL|member|num_adcs
r_int
r_int
id|num_adcs
suffix:semicolon
multiline_comment|/* AK4524 or AK4528 ADCs */
DECL|member|num_dacs
r_int
r_int
id|num_dacs
suffix:semicolon
multiline_comment|/* AK4524 or AK4528 DACs */
DECL|member|images
r_int
r_char
id|images
(braket
id|AK4XXX_IMAGE_SIZE
)braket
suffix:semicolon
multiline_comment|/* saved register image */
DECL|member|ipga_gain
r_int
r_char
id|ipga_gain
(braket
id|AK4XXX_MAX_CHIPS
)braket
(braket
l_int|2
)braket
suffix:semicolon
multiline_comment|/* saved register image for IPGA (AK4528) */
DECL|member|private_value
r_int
r_int
id|private_value
(braket
id|AK4XXX_MAX_CHIPS
)braket
suffix:semicolon
multiline_comment|/* helper for driver */
DECL|member|private_data
r_void
op_star
id|private_data
(braket
id|AK4XXX_MAX_CHIPS
)braket
suffix:semicolon
multiline_comment|/* helper for driver */
multiline_comment|/* template should fill the following fields */
DECL|member|idx_offset
r_int
r_int
id|idx_offset
suffix:semicolon
multiline_comment|/* control index offset */
r_enum
(brace
DECL|enumerator|SND_AK4524
DECL|enumerator|SND_AK4528
DECL|enumerator|SND_AK4529
DECL|enumerator|SND_AK4355
DECL|enumerator|SND_AK4381
id|SND_AK4524
comma
id|SND_AK4528
comma
id|SND_AK4529
comma
id|SND_AK4355
comma
id|SND_AK4381
DECL|member|type
)brace
id|type
suffix:semicolon
DECL|member|ops
r_struct
id|snd_ak4xxx_ops
id|ops
suffix:semicolon
)brace
suffix:semicolon
r_void
id|snd_akm4xxx_write
c_func
(paren
id|akm4xxx_t
op_star
id|ak
comma
r_int
id|chip
comma
r_int
r_char
id|reg
comma
r_int
r_char
id|val
)paren
suffix:semicolon
r_void
id|snd_akm4xxx_reset
c_func
(paren
id|akm4xxx_t
op_star
id|ak
comma
r_int
id|state
)paren
suffix:semicolon
r_void
id|snd_akm4xxx_init
c_func
(paren
id|akm4xxx_t
op_star
id|ak
)paren
suffix:semicolon
r_int
id|snd_akm4xxx_build_controls
c_func
(paren
id|akm4xxx_t
op_star
id|ak
)paren
suffix:semicolon
DECL|macro|snd_akm4xxx_get
mdefine_line|#define snd_akm4xxx_get(ak,chip,reg) (ak)-&gt;images[(chip) * 16 + (reg)]
DECL|macro|snd_akm4xxx_set
mdefine_line|#define snd_akm4xxx_set(ak,chip,reg,val) ((ak)-&gt;images[(chip) * 16 + (reg)] = (val))
DECL|macro|snd_akm4xxx_get_ipga
mdefine_line|#define snd_akm4xxx_get_ipga(ak,chip,reg) (ak)-&gt;ipga_gain[chip][(reg)-4]
DECL|macro|snd_akm4xxx_set_ipga
mdefine_line|#define snd_akm4xxx_set_ipga(ak,chip,reg,val) ((ak)-&gt;ipga_gain[chip][(reg)-4] = (val))
macro_line|#endif /* __SOUND_AK4XXX_ADDA_H */
eof
