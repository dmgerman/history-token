macro_line|#ifndef __SOUND_SEQ_INSTR_H
DECL|macro|__SOUND_SEQ_INSTR_H
mdefine_line|#define __SOUND_SEQ_INSTR_H
multiline_comment|/*&n; *  Main kernel header file for the ALSA sequencer&n; *  Copyright (c) 1999 by Jaroslav Kysela &lt;perex@suse.cz&gt;&n; *&n; *&n; *   This program is free software; you can redistribute it and/or modify&n; *   it under the terms of the GNU General Public License as published by&n; *   the Free Software Foundation; either version 2 of the License, or&n; *   (at your option) any later version.&n; *&n; *   This program is distributed in the hope that it will be useful,&n; *   but WITHOUT ANY WARRANTY; without even the implied warranty of&n; *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; *   GNU General Public License for more details.&n; *&n; *   You should have received a copy of the GNU General Public License&n; *   along with this program; if not, write to the Free Software&n; *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA&n; *&n; */
macro_line|#include &quot;seq_kernel.h&quot;
multiline_comment|/* Instrument cluster */
DECL|struct|_snd_seq_kcluster
r_typedef
r_struct
id|_snd_seq_kcluster
(brace
DECL|member|cluster
id|snd_seq_instr_cluster_t
id|cluster
suffix:semicolon
DECL|member|name
r_char
id|name
(braket
l_int|32
)braket
suffix:semicolon
DECL|member|priority
r_int
id|priority
suffix:semicolon
DECL|member|next
r_struct
id|_snd_seq_kcluster
op_star
id|next
suffix:semicolon
DECL|typedef|snd_seq_kcluster_t
)brace
id|snd_seq_kcluster_t
suffix:semicolon
multiline_comment|/* return pointer to private data */
DECL|macro|KINSTR_DATA
mdefine_line|#define KINSTR_DATA(kinstr)&t;(void *)(((char *)kinstr) + sizeof(snd_seq_kinstr_t))
DECL|typedef|snd_seq_kinstr_ops_t
r_typedef
r_struct
id|snd_seq_kinstr_ops
id|snd_seq_kinstr_ops_t
suffix:semicolon
multiline_comment|/* Instrument structure */
DECL|struct|_snd_seq_kinstr
r_typedef
r_struct
id|_snd_seq_kinstr
(brace
DECL|member|instr
id|snd_seq_instr_t
id|instr
suffix:semicolon
DECL|member|name
r_char
id|name
(braket
l_int|32
)braket
suffix:semicolon
DECL|member|type
r_int
id|type
suffix:semicolon
multiline_comment|/* instrument type */
DECL|member|use
r_int
id|use
suffix:semicolon
multiline_comment|/* use count */
DECL|member|busy
r_int
id|busy
suffix:semicolon
multiline_comment|/* not useable */
DECL|member|add_len
r_int
id|add_len
suffix:semicolon
multiline_comment|/* additional length */
DECL|member|ops
id|snd_seq_kinstr_ops_t
op_star
id|ops
suffix:semicolon
multiline_comment|/* operations */
DECL|member|next
r_struct
id|_snd_seq_kinstr
op_star
id|next
suffix:semicolon
DECL|typedef|snd_seq_kinstr_t
)brace
id|snd_seq_kinstr_t
suffix:semicolon
DECL|macro|SNDRV_SEQ_INSTR_HASH_SIZE
mdefine_line|#define SNDRV_SEQ_INSTR_HASH_SIZE&t;&t;32
multiline_comment|/* Instrument flags */
DECL|macro|SNDRV_SEQ_INSTR_FLG_DIRECT
mdefine_line|#define SNDRV_SEQ_INSTR_FLG_DIRECT&t;(1&lt;&lt;0)&t;/* accept only direct events */
multiline_comment|/* List of all instruments */
r_typedef
r_struct
(brace
DECL|member|hash
id|snd_seq_kinstr_t
op_star
id|hash
(braket
id|SNDRV_SEQ_INSTR_HASH_SIZE
)braket
suffix:semicolon
DECL|member|count
r_int
id|count
suffix:semicolon
multiline_comment|/* count of all instruments */
DECL|member|chash
id|snd_seq_kcluster_t
op_star
id|chash
(braket
id|SNDRV_SEQ_INSTR_HASH_SIZE
)braket
suffix:semicolon
DECL|member|ccount
r_int
id|ccount
suffix:semicolon
multiline_comment|/* count of all clusters */
DECL|member|owner
r_int
id|owner
suffix:semicolon
multiline_comment|/* current owner of the instrument list */
DECL|member|flags
r_int
r_int
id|flags
suffix:semicolon
DECL|member|lock
id|spinlock_t
id|lock
suffix:semicolon
DECL|member|ops_lock
id|spinlock_t
id|ops_lock
suffix:semicolon
DECL|member|ops_mutex
r_struct
id|semaphore
id|ops_mutex
suffix:semicolon
DECL|member|ops_flags
r_int
r_int
id|ops_flags
suffix:semicolon
DECL|typedef|snd_seq_kinstr_list_t
)brace
id|snd_seq_kinstr_list_t
suffix:semicolon
DECL|macro|SNDRV_SEQ_INSTR_NOTIFY_REMOVE
mdefine_line|#define SNDRV_SEQ_INSTR_NOTIFY_REMOVE&t;0
DECL|macro|SNDRV_SEQ_INSTR_NOTIFY_CHANGE
mdefine_line|#define SNDRV_SEQ_INSTR_NOTIFY_CHANGE&t;1
DECL|struct|snd_seq_kinstr_ops
r_struct
id|snd_seq_kinstr_ops
(brace
DECL|member|private_data
r_void
op_star
id|private_data
suffix:semicolon
DECL|member|add_len
r_int
id|add_len
suffix:semicolon
multiline_comment|/* additional length */
DECL|member|instr_type
r_char
op_star
id|instr_type
suffix:semicolon
DECL|member|info
r_int
(paren
op_star
id|info
)paren
(paren
r_void
op_star
id|private_data
comma
r_char
op_star
id|info_data
comma
r_int
id|len
)paren
suffix:semicolon
DECL|member|put
r_int
(paren
op_star
id|put
)paren
(paren
r_void
op_star
id|private_data
comma
id|snd_seq_kinstr_t
op_star
id|kinstr
comma
r_char
id|__user
op_star
id|instr_data
comma
r_int
id|len
comma
r_int
id|atomic
comma
r_int
id|cmd
)paren
suffix:semicolon
DECL|member|get
r_int
(paren
op_star
id|get
)paren
(paren
r_void
op_star
id|private_data
comma
id|snd_seq_kinstr_t
op_star
id|kinstr
comma
r_char
id|__user
op_star
id|instr_data
comma
r_int
id|len
comma
r_int
id|atomic
comma
r_int
id|cmd
)paren
suffix:semicolon
DECL|member|get_size
r_int
(paren
op_star
id|get_size
)paren
(paren
r_void
op_star
id|private_data
comma
id|snd_seq_kinstr_t
op_star
id|kinstr
comma
r_int
op_star
id|size
)paren
suffix:semicolon
DECL|member|remove
r_int
(paren
op_star
id|remove
)paren
(paren
r_void
op_star
id|private_data
comma
id|snd_seq_kinstr_t
op_star
id|kinstr
comma
r_int
id|atomic
)paren
suffix:semicolon
DECL|member|notify
r_void
(paren
op_star
id|notify
)paren
(paren
r_void
op_star
id|private_data
comma
id|snd_seq_kinstr_t
op_star
id|kinstr
comma
r_int
id|what
)paren
suffix:semicolon
DECL|member|next
r_struct
id|snd_seq_kinstr_ops
op_star
id|next
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* instrument operations */
id|snd_seq_kinstr_list_t
op_star
id|snd_seq_instr_list_new
c_func
(paren
r_void
)paren
suffix:semicolon
r_void
id|snd_seq_instr_list_free
c_func
(paren
id|snd_seq_kinstr_list_t
op_star
op_star
id|list
)paren
suffix:semicolon
r_int
id|snd_seq_instr_list_free_cond
c_func
(paren
id|snd_seq_kinstr_list_t
op_star
id|list
comma
id|snd_seq_instr_header_t
op_star
id|ifree
comma
r_int
id|client
comma
r_int
id|atomic
)paren
suffix:semicolon
id|snd_seq_kinstr_t
op_star
id|snd_seq_instr_find
c_func
(paren
id|snd_seq_kinstr_list_t
op_star
id|list
comma
id|snd_seq_instr_t
op_star
id|instr
comma
r_int
id|exact
comma
r_int
id|follow_alias
)paren
suffix:semicolon
r_void
id|snd_seq_instr_free_use
c_func
(paren
id|snd_seq_kinstr_list_t
op_star
id|list
comma
id|snd_seq_kinstr_t
op_star
id|instr
)paren
suffix:semicolon
r_int
id|snd_seq_instr_event
c_func
(paren
id|snd_seq_kinstr_ops_t
op_star
id|ops
comma
id|snd_seq_kinstr_list_t
op_star
id|list
comma
id|snd_seq_event_t
op_star
id|ev
comma
r_int
id|client
comma
r_int
id|atomic
comma
r_int
id|hop
)paren
suffix:semicolon
macro_line|#endif /* __SOUND_SEQ_INSTR_H */
eof
