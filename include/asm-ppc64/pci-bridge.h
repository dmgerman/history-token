macro_line|#ifdef __KERNEL__
macro_line|#ifndef _ASM_PCI_BRIDGE_H
DECL|macro|_ASM_PCI_BRIDGE_H
mdefine_line|#define _ASM_PCI_BRIDGE_H
multiline_comment|/*&n; * This program is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License&n; * as published by the Free Software Foundation; either version&n; * 2 of the License, or (at your option) any later version.&n; */
r_struct
id|device_node
suffix:semicolon
r_struct
id|pci_controller
suffix:semicolon
multiline_comment|/* Get the PCI host controller for an OF device */
r_extern
r_struct
id|pci_controller
op_star
id|pci_find_hose_for_OF_device
c_func
(paren
r_struct
id|device_node
op_star
id|node
)paren
suffix:semicolon
DECL|enum|phb_types
r_enum
id|phb_types
(brace
DECL|enumerator|phb_type_unknown
id|phb_type_unknown
op_assign
l_int|0x0
comma
DECL|enumerator|phb_type_hypervisor
id|phb_type_hypervisor
op_assign
l_int|0x1
comma
DECL|enumerator|phb_type_python
id|phb_type_python
op_assign
l_int|0x10
comma
DECL|enumerator|phb_type_speedwagon
id|phb_type_speedwagon
op_assign
l_int|0x11
comma
DECL|enumerator|phb_type_winnipeg
id|phb_type_winnipeg
op_assign
l_int|0x12
comma
DECL|enumerator|phb_type_apple
id|phb_type_apple
op_assign
l_int|0xff
)brace
suffix:semicolon
multiline_comment|/*&n; * Structure of a PCI controller (host bridge)&n; */
DECL|struct|pci_controller
r_struct
id|pci_controller
(brace
DECL|member|what
r_char
id|what
(braket
l_int|8
)braket
suffix:semicolon
multiline_comment|/* Eye catcher      */
DECL|member|type
r_enum
id|phb_types
id|type
suffix:semicolon
multiline_comment|/* Type of hardware */
DECL|member|next
r_struct
id|pci_controller
op_star
id|next
suffix:semicolon
DECL|member|bus
r_struct
id|pci_bus
op_star
id|bus
suffix:semicolon
DECL|member|arch_data
r_void
op_star
id|arch_data
suffix:semicolon
DECL|member|first_busno
r_int
id|first_busno
suffix:semicolon
DECL|member|last_busno
r_int
id|last_busno
suffix:semicolon
DECL|member|io_base_virt
r_void
op_star
id|io_base_virt
suffix:semicolon
DECL|member|io_base_phys
r_int
r_int
id|io_base_phys
suffix:semicolon
multiline_comment|/* Some machines have a non 1:1 mapping of&n;&t; * the PCI memory space in the CPU bus space&n;&t; */
DECL|member|pci_mem_offset
r_int
r_int
id|pci_mem_offset
suffix:semicolon
DECL|member|pci_io_offset
r_int
r_int
id|pci_io_offset
suffix:semicolon
DECL|member|ops
r_struct
id|pci_ops
op_star
id|ops
suffix:semicolon
DECL|member|cfg_addr
r_volatile
r_int
r_int
op_star
id|cfg_addr
suffix:semicolon
DECL|member|cfg_data
r_volatile
r_int
r_char
op_star
id|cfg_data
suffix:semicolon
multiline_comment|/* Currently, we limit ourselves to 1 IO range and 3 mem&n;&t; * ranges since the common pci_bus structure can&squot;t handle more&n;&t; */
DECL|member|io_resource
r_struct
id|resource
id|io_resource
suffix:semicolon
DECL|member|mem_resources
r_struct
id|resource
id|mem_resources
(braket
l_int|3
)braket
suffix:semicolon
DECL|member|mem_resource_count
r_int
id|mem_resource_count
suffix:semicolon
DECL|member|global_number
r_int
id|global_number
suffix:semicolon
DECL|member|local_number
r_int
id|local_number
suffix:semicolon
DECL|member|buid
r_int
r_int
id|buid
suffix:semicolon
DECL|member|dma_window_base_cur
r_int
r_int
id|dma_window_base_cur
suffix:semicolon
DECL|member|dma_window_size
r_int
r_int
id|dma_window_size
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * pci_device_loc returns the bus number and device/function number&n; * for a device on a PCI bus, given its device_node struct.&n; * It returns 0 if OK, -1 on error.&n; */
r_int
id|pci_device_loc
c_func
(paren
r_struct
id|device_node
op_star
id|dev
comma
r_int
r_char
op_star
id|bus_ptr
comma
r_int
r_char
op_star
id|devfn_ptr
)paren
suffix:semicolon
r_struct
id|device_node
op_star
id|fetch_dev_dn
c_func
(paren
r_struct
id|pci_dev
op_star
id|dev
)paren
suffix:semicolon
multiline_comment|/* Get a device_node from a pci_dev.  This code must be fast except in the case&n; * where the sysdata is incorrect and needs to be fixed up (hopefully just once)&n; */
DECL|function|pci_device_to_OF_node
r_static
r_inline
r_struct
id|device_node
op_star
id|pci_device_to_OF_node
c_func
(paren
r_struct
id|pci_dev
op_star
id|dev
)paren
(brace
r_struct
id|device_node
op_star
id|dn
op_assign
(paren
r_struct
id|device_node
op_star
)paren
(paren
id|dev-&gt;sysdata
)paren
suffix:semicolon
r_if
c_cond
(paren
id|dn-&gt;devfn
op_eq
id|dev-&gt;devfn
op_logical_and
id|dn-&gt;busno
op_eq
(paren
id|dev-&gt;bus-&gt;number
op_amp
l_int|0xff
)paren
)paren
r_return
id|dn
suffix:semicolon
multiline_comment|/* fast path.  sysdata is good */
r_else
r_return
id|fetch_dev_dn
c_func
(paren
id|dev
)paren
suffix:semicolon
)brace
multiline_comment|/* Use this macro after the PCI bus walk for max performance when it&n; * is known that sysdata is correct.&n; */
DECL|macro|PCI_GET_DN
mdefine_line|#define PCI_GET_DN(dev) ((struct device_node *)((dev)-&gt;sysdata))
macro_line|#endif
macro_line|#endif /* __KERNEL__ */
eof
