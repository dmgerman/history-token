macro_line|#ifndef _PPC64_LMB_H
DECL|macro|_PPC64_LMB_H
mdefine_line|#define _PPC64_LMB_H
multiline_comment|/*&n; * Definitions for talking to the Open Firmware PROM on&n; * Power Macintosh computers.&n; *&n; * Copyright (C) 2001 Peter Bergner, IBM Corp.&n; *&n; * This program is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License&n; * as published by the Free Software Foundation; either version&n; * 2 of the License, or (at your option) any later version.&n; */
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;asm/prom.h&gt;
r_extern
r_int
r_int
id|reloc_offset
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|macro|MAX_LMB_REGIONS
mdefine_line|#define MAX_LMB_REGIONS 64
DECL|union|lmb_reg_property
r_union
id|lmb_reg_property
(brace
DECL|member|addr32
r_struct
id|reg_property32
id|addr32
(braket
id|MAX_LMB_REGIONS
)braket
suffix:semicolon
DECL|member|addr64
r_struct
id|reg_property64
id|addr64
(braket
id|MAX_LMB_REGIONS
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|LMB_MEMORY_AREA
mdefine_line|#define LMB_MEMORY_AREA&t;1
DECL|macro|LMB_IO_AREA
mdefine_line|#define LMB_IO_AREA&t;2
DECL|macro|LMB_ALLOC_ANYWHERE
mdefine_line|#define LMB_ALLOC_ANYWHERE&t;0
DECL|macro|LMB_ALLOC_FIRST4GBYTE
mdefine_line|#define LMB_ALLOC_FIRST4GBYTE&t;(1UL&lt;&lt;32)
DECL|struct|lmb_property
r_struct
id|lmb_property
(brace
DECL|member|base
r_int
r_int
id|base
suffix:semicolon
DECL|member|physbase
r_int
r_int
id|physbase
suffix:semicolon
DECL|member|size
r_int
r_int
id|size
suffix:semicolon
DECL|member|type
r_int
r_int
id|type
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|lmb_region
r_struct
id|lmb_region
(brace
DECL|member|cnt
r_int
r_int
id|cnt
suffix:semicolon
DECL|member|size
r_int
r_int
id|size
suffix:semicolon
DECL|member|iosize
r_int
r_int
id|iosize
suffix:semicolon
DECL|member|lcd_size
r_int
r_int
id|lcd_size
suffix:semicolon
multiline_comment|/* Least Common Denominator */
DECL|member|region
r_struct
id|lmb_property
id|region
(braket
id|MAX_LMB_REGIONS
op_plus
l_int|1
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|lmb
r_struct
id|lmb
(brace
DECL|member|debug
r_int
r_int
id|debug
suffix:semicolon
DECL|member|rmo_size
r_int
r_int
id|rmo_size
suffix:semicolon
DECL|member|memory
r_struct
id|lmb_region
id|memory
suffix:semicolon
DECL|member|reserved
r_struct
id|lmb_region
id|reserved
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|lmb
id|lmb
suffix:semicolon
r_extern
r_void
id|lmb_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|lmb_analyze
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|lmb_add
c_func
(paren
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_MSCHUNKS
r_extern
r_int
id|lmb_add_io
c_func
(paren
r_int
r_int
id|base
comma
r_int
r_int
id|size
)paren
suffix:semicolon
macro_line|#endif /* CONFIG_MSCHUNKS */
r_extern
r_int
id|lmb_reserve
c_func
(paren
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
r_int
id|lmb_alloc
c_func
(paren
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
r_int
id|lmb_alloc_base
c_func
(paren
r_int
r_int
comma
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
r_int
id|lmb_phys_mem_size
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
r_int
id|lmb_end_of_DRAM
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
r_int
id|lmb_abs_to_phys
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|lmb_dump
c_func
(paren
r_char
op_star
)paren
suffix:semicolon
r_static
r_inline
r_int
r_int
DECL|function|lmb_addrs_overlap
id|lmb_addrs_overlap
c_func
(paren
r_int
r_int
id|base1
comma
r_int
r_int
id|size1
comma
r_int
r_int
id|base2
comma
r_int
r_int
id|size2
)paren
(brace
r_return
(paren
(paren
id|base1
OL
(paren
id|base2
op_plus
id|size2
)paren
)paren
op_logical_and
(paren
id|base2
OL
(paren
id|base1
op_plus
id|size1
)paren
)paren
)paren
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|lmb_regions_overlap
id|lmb_regions_overlap
c_func
(paren
r_struct
id|lmb_region
op_star
id|rgn
comma
r_int
r_int
id|r1
comma
r_int
r_int
id|r2
)paren
(brace
r_int
r_int
id|base1
op_assign
id|rgn-&gt;region
(braket
id|r1
)braket
dot
id|base
suffix:semicolon
r_int
r_int
id|size1
op_assign
id|rgn-&gt;region
(braket
id|r1
)braket
dot
id|size
suffix:semicolon
r_int
r_int
id|base2
op_assign
id|rgn-&gt;region
(braket
id|r2
)braket
dot
id|base
suffix:semicolon
r_int
r_int
id|size2
op_assign
id|rgn-&gt;region
(braket
id|r2
)braket
dot
id|size
suffix:semicolon
r_return
id|lmb_addrs_overlap
c_func
(paren
id|base1
comma
id|size1
comma
id|base2
comma
id|size2
)paren
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|lmb_addrs_adjacent
id|lmb_addrs_adjacent
c_func
(paren
r_int
r_int
id|base1
comma
r_int
r_int
id|size1
comma
r_int
r_int
id|base2
comma
r_int
r_int
id|size2
)paren
(brace
r_if
c_cond
(paren
id|base2
op_eq
id|base1
op_plus
id|size1
)paren
(brace
r_return
l_int|1
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|base1
op_eq
id|base2
op_plus
id|size2
)paren
(brace
r_return
op_minus
l_int|1
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|lmb_regions_adjacent
id|lmb_regions_adjacent
c_func
(paren
r_struct
id|lmb_region
op_star
id|rgn
comma
r_int
r_int
id|r1
comma
r_int
r_int
id|r2
)paren
(brace
r_int
r_int
id|base1
op_assign
id|rgn-&gt;region
(braket
id|r1
)braket
dot
id|base
suffix:semicolon
r_int
r_int
id|size1
op_assign
id|rgn-&gt;region
(braket
id|r1
)braket
dot
id|size
suffix:semicolon
r_int
r_int
id|type1
op_assign
id|rgn-&gt;region
(braket
id|r1
)braket
dot
id|type
suffix:semicolon
r_int
r_int
id|base2
op_assign
id|rgn-&gt;region
(braket
id|r2
)braket
dot
id|base
suffix:semicolon
r_int
r_int
id|size2
op_assign
id|rgn-&gt;region
(braket
id|r2
)braket
dot
id|size
suffix:semicolon
r_int
r_int
id|type2
op_assign
id|rgn-&gt;region
(braket
id|r2
)braket
dot
id|type
suffix:semicolon
r_return
(paren
id|type1
op_eq
id|type2
)paren
op_logical_and
id|lmb_addrs_adjacent
c_func
(paren
id|base1
comma
id|size1
comma
id|base2
comma
id|size2
)paren
suffix:semicolon
)brace
macro_line|#endif /* _PPC64_LMB_H */
eof
