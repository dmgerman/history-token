multiline_comment|/* -*- linux-c -*-&n; *  drivers/char/vio.h&n; *&n; *  iSeries Virtual I/O Message Path header&n; *&n; *  Authors: Dave Boutcher &lt;boutcher@us.ibm.com&gt;&n; *           Ryan Arnold &lt;ryanarn@us.ibm.com&gt;&n; *           Colin Devilbiss &lt;devilbis@us.ibm.com&gt;&n; *&n; * (C) Copyright 2000 IBM Corporation&n; * &n; * This header file is used by the iSeries virtual I/O device&n; * drivers.  It defines the interfaces to the common functions&n; * (implemented in drivers/char/viopath.h) as well as defining&n; * common functions and structures.  Currently (at the time I &n; * wrote this comment) the iSeries virtual I/O device drivers&n; * that use this are &n; *   drivers/block/viodasd.c &n; *   drivers/char/viocons.c&n; *   drivers/char/viotape.c&n; *   drivers/cdrom/viocd.c&n; *&n; * The iSeries virtual ethernet support (veth.c) uses a whole&n; * different set of functions.&n; * &n; * This program is free software;  you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License as&n; * published by the Free Software Foundation; either version 2 of the&n; * License, or (at your option) anyu later version.&n; *&n; * This program is distributed in the hope that it will be useful, but&n; * WITHOUT ANY WARRANTY; without even the implied warranty of &n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU&n; * General Public License for more details.  &n; *&n; * You should have received a copy of the GNU General Public License &n; * along with this program; if not, write to the Free Software Foundation,&n; * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA&n; *&n; */
macro_line|#ifndef _ISERIES_VIO_H
DECL|macro|_ISERIES_VIO_H
mdefine_line|#define _ISERIES_VIO_H
macro_line|#include &lt;asm/iSeries/HvTypes.h&gt;
macro_line|#include &lt;asm/iSeries/HvLpEvent.h&gt;
multiline_comment|/* iSeries virtual I/O events use the subtype field in&n; * HvLpEvent to figure out what kind of vio event is coming&n; * in.  We use a table to route these, and this defines&n; * the maximum number of distinct subtypes&n; */
DECL|macro|VIO_MAX_SUBTYPES
mdefine_line|#define VIO_MAX_SUBTYPES 8
multiline_comment|/* Each subtype can register a handler to process their events.&n; * The handler must have this interface.&n; */
DECL|typedef|vio_event_handler_t
r_typedef
r_void
(paren
id|vio_event_handler_t
)paren
(paren
r_struct
id|HvLpEvent
op_star
id|event
)paren
suffix:semicolon
r_int
id|viopath_open
c_func
(paren
id|HvLpIndex
id|remoteLp
comma
r_int
id|subtype
comma
r_int
id|numReq
)paren
suffix:semicolon
r_int
id|viopath_close
c_func
(paren
id|HvLpIndex
id|remoteLp
comma
r_int
id|subtype
comma
r_int
id|numReq
)paren
suffix:semicolon
r_int
id|vio_setHandler
c_func
(paren
r_int
id|subtype
comma
id|vio_event_handler_t
op_star
id|beh
)paren
suffix:semicolon
r_int
id|vio_clearHandler
c_func
(paren
r_int
id|subtype
)paren
suffix:semicolon
r_int
id|viopath_isactive
c_func
(paren
id|HvLpIndex
id|lp
)paren
suffix:semicolon
id|HvLpInstanceId
id|viopath_sourceinst
c_func
(paren
id|HvLpIndex
id|lp
)paren
suffix:semicolon
id|HvLpInstanceId
id|viopath_targetinst
c_func
(paren
id|HvLpIndex
id|lp
)paren
suffix:semicolon
r_void
id|vio_set_hostlp
c_func
(paren
r_void
)paren
suffix:semicolon
r_void
op_star
id|vio_get_event_buffer
c_func
(paren
r_int
id|subtype
)paren
suffix:semicolon
r_void
id|vio_free_event_buffer
c_func
(paren
r_int
id|subtype
comma
r_void
op_star
id|buffer
)paren
suffix:semicolon
r_extern
id|HvLpIndex
id|viopath_hostLp
suffix:semicolon
r_extern
id|HvLpIndex
id|viopath_ourLp
suffix:semicolon
DECL|macro|VIOCHAR_MAX_DATA
mdefine_line|#define VIOCHAR_MAX_DATA 200
DECL|macro|VIOMAJOR_SUBTYPE_MASK
mdefine_line|#define VIOMAJOR_SUBTYPE_MASK 0xff00
DECL|macro|VIOMINOR_SUBTYPE_MASK
mdefine_line|#define VIOMINOR_SUBTYPE_MASK 0x00ff
DECL|macro|VIOMAJOR_SUBTYPE_SHIFT
mdefine_line|#define VIOMAJOR_SUBTYPE_SHIFT 8
DECL|macro|VIOVERSION
mdefine_line|#define VIOVERSION            0x0101
multiline_comment|/*&n; * This is the general structure for VIO errors; each module should have&n; * a table of them, and each table should be terminated by an entry of&n; * { 0, 0, NULL }.  Then, to find a specific error message, a module&n; * should pass its local table and the return code.&n; */
DECL|struct|vio_error_entry
r_struct
id|vio_error_entry
(brace
DECL|member|rc
id|u16
id|rc
suffix:semicolon
DECL|member|errno
r_int
id|errno
suffix:semicolon
DECL|member|msg
r_const
r_char
op_star
id|msg
suffix:semicolon
)brace
suffix:semicolon
r_const
r_struct
id|vio_error_entry
op_star
id|vio_lookup_rc
c_func
(paren
r_const
r_struct
id|vio_error_entry
op_star
id|local_table
comma
id|u16
id|rc
)paren
suffix:semicolon
DECL|enum|viosubtypes
r_enum
id|viosubtypes
(brace
DECL|enumerator|viomajorsubtype_monitor
id|viomajorsubtype_monitor
op_assign
l_int|0x0100
comma
DECL|enumerator|viomajorsubtype_blockio
id|viomajorsubtype_blockio
op_assign
l_int|0x0200
comma
DECL|enumerator|viomajorsubtype_chario
id|viomajorsubtype_chario
op_assign
l_int|0x0300
comma
DECL|enumerator|viomajorsubtype_config
id|viomajorsubtype_config
op_assign
l_int|0x0400
comma
DECL|enumerator|viomajorsubtype_cdio
id|viomajorsubtype_cdio
op_assign
l_int|0x0500
comma
DECL|enumerator|viomajorsubtype_tape
id|viomajorsubtype_tape
op_assign
l_int|0x0600
comma
DECL|enumerator|viomajorsubtype_scsi
id|viomajorsubtype_scsi
op_assign
l_int|0x0700
)brace
suffix:semicolon
DECL|enum|vioconfigsubtype
r_enum
id|vioconfigsubtype
(brace
DECL|enumerator|vioconfigget
id|vioconfigget
op_assign
l_int|0x0001
comma
)brace
suffix:semicolon
DECL|enum|viorc
r_enum
id|viorc
(brace
DECL|enumerator|viorc_good
id|viorc_good
op_assign
l_int|0x0000
comma
DECL|enumerator|viorc_noConnection
id|viorc_noConnection
op_assign
l_int|0x0001
comma
DECL|enumerator|viorc_noReceiver
id|viorc_noReceiver
op_assign
l_int|0x0002
comma
DECL|enumerator|viorc_noBufferAvailable
id|viorc_noBufferAvailable
op_assign
l_int|0x0003
comma
DECL|enumerator|viorc_invalidMessageType
id|viorc_invalidMessageType
op_assign
l_int|0x0004
comma
DECL|enumerator|viorc_invalidRange
id|viorc_invalidRange
op_assign
l_int|0x0201
comma
DECL|enumerator|viorc_invalidToken
id|viorc_invalidToken
op_assign
l_int|0x0202
comma
DECL|enumerator|viorc_DMAError
id|viorc_DMAError
op_assign
l_int|0x0203
comma
DECL|enumerator|viorc_useError
id|viorc_useError
op_assign
l_int|0x0204
comma
DECL|enumerator|viorc_releaseError
id|viorc_releaseError
op_assign
l_int|0x0205
comma
DECL|enumerator|viorc_invalidDisk
id|viorc_invalidDisk
op_assign
l_int|0x0206
comma
DECL|enumerator|viorc_openRejected
id|viorc_openRejected
op_assign
l_int|0x0301
)brace
suffix:semicolon
r_struct
id|device
suffix:semicolon
r_extern
r_struct
id|device
op_star
id|iSeries_vio_dev
suffix:semicolon
macro_line|#endif /* _ISERIES_VIO_H */
eof
