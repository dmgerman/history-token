multiline_comment|/*&n; * mf.h&n; * Copyright (C) 2001  Troy D. Armstrong IBM Corporation&n; *&n; * This modules exists as an interface between a Linux secondary partition&n; * running on an iSeries and the primary partition&squot;s Virtual Service&n; * Processor (VSP) object.  The VSP has final authority over powering on/off&n; * all partitions in the iSeries.  It also provides miscellaneous low-level&n; * machine facility type operations.&n; *&n; * &n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2 of the License, or&n; * (at your option) any later version.&n; * &n; * This program is distributed in the hope that it will be useful,&n; * but WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; * GNU General Public License for more details.&n; * &n; * You should have received a copy of the GNU General Public License&n; * along with this program; if not, write to the Free Software&n; * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA&n; */
macro_line|#ifndef MF_H_INCLUDED
DECL|macro|MF_H_INCLUDED
mdefine_line|#define MF_H_INCLUDED
macro_line|#include &lt;linux/proc_fs.h&gt;
macro_line|#include &lt;asm/iSeries/HvTypes.h&gt;
macro_line|#include &lt;asm/iSeries/HvLpEvent.h&gt;
r_struct
id|rtc_time
suffix:semicolon
DECL|typedef|MFCompleteHandler
r_typedef
r_void
(paren
op_star
id|MFCompleteHandler
)paren
(paren
r_void
op_star
id|clientToken
comma
r_int
id|returnCode
)paren
suffix:semicolon
r_extern
r_void
id|mf_allocateLpEvents
c_func
(paren
id|HvLpIndex
id|targetLp
comma
id|HvLpEvent_Type
id|type
comma
r_int
id|size
comma
r_int
id|amount
comma
id|MFCompleteHandler
id|hdlr
comma
r_void
op_star
id|userToken
)paren
suffix:semicolon
r_extern
r_void
id|mf_deallocateLpEvents
c_func
(paren
id|HvLpIndex
id|targetLp
comma
id|HvLpEvent_Type
id|type
comma
r_int
id|count
comma
id|MFCompleteHandler
id|hdlr
comma
r_void
op_star
id|userToken
)paren
suffix:semicolon
r_extern
r_void
id|mf_powerOff
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|mf_reboot
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|mf_displaySrc
c_func
(paren
id|u32
id|word
)paren
suffix:semicolon
r_extern
r_void
id|mf_displayProgress
c_func
(paren
id|u16
id|value
)paren
suffix:semicolon
r_extern
r_void
id|mf_clearSrc
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|mf_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|mf_setSide
c_func
(paren
r_char
id|side
)paren
suffix:semicolon
r_extern
r_char
id|mf_getSide
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|mf_setCmdLine
c_func
(paren
r_const
r_char
op_star
id|cmdline
comma
r_int
id|size
comma
id|u64
id|side
)paren
suffix:semicolon
r_extern
r_int
id|mf_getCmdLine
c_func
(paren
r_char
op_star
id|cmdline
comma
r_int
op_star
id|size
comma
id|u64
id|side
)paren
suffix:semicolon
r_extern
r_void
id|mf_getSrcHistory
c_func
(paren
r_char
op_star
id|buffer
comma
r_int
id|size
)paren
suffix:semicolon
r_extern
r_int
id|mf_setVmlinuxChunk
c_func
(paren
r_const
r_char
op_star
id|buffer
comma
r_int
id|size
comma
r_int
id|offset
comma
id|u64
id|side
)paren
suffix:semicolon
r_extern
r_int
id|mf_getVmlinuxChunk
c_func
(paren
r_char
op_star
id|buffer
comma
r_int
op_star
id|size
comma
r_int
id|offset
comma
id|u64
id|side
)paren
suffix:semicolon
r_extern
r_int
id|mf_setRtcTime
c_func
(paren
r_int
r_int
id|time
)paren
suffix:semicolon
r_extern
r_int
id|mf_getRtcTime
c_func
(paren
r_int
r_int
op_star
id|time
)paren
suffix:semicolon
r_extern
r_int
id|mf_getRtc
c_func
(paren
r_struct
id|rtc_time
op_star
id|tm
)paren
suffix:semicolon
r_extern
r_int
id|mf_setRtc
c_func
(paren
r_struct
id|rtc_time
op_star
id|tm
)paren
suffix:semicolon
r_extern
r_void
id|mf_proc_init
c_func
(paren
r_struct
id|proc_dir_entry
op_star
id|iSeries_proc
)paren
suffix:semicolon
macro_line|#endif /* MF_H_INCLUDED */
eof
