multiline_comment|/*&n; * Non-machine dependent bootinfo structure.  Basic idea&n; * borrowed from the m68k.&n; *&n; * Copyright (C) 1999 Cort Dougan &lt;cort@ppc.kernel.org&gt;&n; * Copyright (c) 2001 PPC64 Team, IBM Corp &n; *&n; * This program is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License&n; * as published by the Free Software Foundation; either version&n; * 2 of the License, or (at your option) any later version.&n; */
macro_line|#ifndef _PPC64_BOOTINFO_H
DECL|macro|_PPC64_BOOTINFO_H
mdefine_line|#define _PPC64_BOOTINFO_H
macro_line|#include &lt;asm/types.h&gt;
multiline_comment|/* We use a u32 for the type of the fields since they&squot;re written by&n; * the bootloader which is a 32-bit process and read by the kernel&n; * which is a 64-bit process.  This way they can both agree on the&n; * size of the type.&n; */
DECL|typedef|bi_rec_field
r_typedef
id|u32
id|bi_rec_field
suffix:semicolon
DECL|struct|bi_record
r_struct
id|bi_record
(brace
DECL|member|tag
id|bi_rec_field
id|tag
suffix:semicolon
multiline_comment|/* tag ID */
DECL|member|size
id|bi_rec_field
id|size
suffix:semicolon
multiline_comment|/* size of record (in bytes) */
DECL|member|data
id|bi_rec_field
id|data
(braket
l_int|0
)braket
suffix:semicolon
multiline_comment|/* data */
)brace
suffix:semicolon
DECL|macro|BI_FIRST
mdefine_line|#define BI_FIRST&t;&t;0x1010  /* first record - marker */
DECL|macro|BI_LAST
mdefine_line|#define BI_LAST&t;&t;&t;0x1011&t;/* last record - marker */
DECL|macro|BI_CMD_LINE
mdefine_line|#define BI_CMD_LINE&t;&t;0x1012
DECL|macro|BI_BOOTLOADER_ID
mdefine_line|#define BI_BOOTLOADER_ID&t;0x1013
DECL|macro|BI_INITRD
mdefine_line|#define BI_INITRD&t;&t;0x1014
DECL|macro|BI_SYSMAP
mdefine_line|#define BI_SYSMAP&t;&t;0x1015
DECL|macro|BI_MACHTYPE
mdefine_line|#define BI_MACHTYPE&t;&t;0x1016
DECL|function|bi_rec_init
r_static
id|__inline__
r_struct
id|bi_record
op_star
id|bi_rec_init
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_struct
id|bi_record
op_star
id|bi_recs
suffix:semicolon
id|bi_recs
op_assign
(paren
r_struct
id|bi_record
op_star
)paren
id|_ALIGN
c_func
(paren
id|addr
comma
id|PAGE_SIZE
)paren
suffix:semicolon
id|bi_recs-&gt;size
op_assign
l_int|0
suffix:semicolon
r_return
id|bi_recs
suffix:semicolon
)brace
DECL|function|bi_rec_alloc
r_static
id|__inline__
r_struct
id|bi_record
op_star
id|bi_rec_alloc
c_func
(paren
r_struct
id|bi_record
op_star
id|rec
comma
r_int
r_int
id|args
)paren
(brace
id|rec
op_assign
(paren
r_struct
id|bi_record
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|rec
op_plus
id|rec-&gt;size
)paren
suffix:semicolon
id|rec-&gt;size
op_assign
r_sizeof
(paren
r_struct
id|bi_record
)paren
op_plus
id|args
op_star
r_sizeof
(paren
id|bi_rec_field
)paren
suffix:semicolon
r_return
id|rec
suffix:semicolon
)brace
DECL|function|bi_rec_alloc_bytes
r_static
id|__inline__
r_struct
id|bi_record
op_star
id|bi_rec_alloc_bytes
c_func
(paren
r_struct
id|bi_record
op_star
id|rec
comma
r_int
r_int
id|bytes
)paren
(brace
id|rec
op_assign
(paren
r_struct
id|bi_record
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|rec
op_plus
id|rec-&gt;size
)paren
suffix:semicolon
id|rec-&gt;size
op_assign
r_sizeof
(paren
r_struct
id|bi_record
)paren
op_plus
id|bytes
suffix:semicolon
r_return
id|rec
suffix:semicolon
)brace
DECL|function|bi_rec_next
r_static
id|__inline__
r_struct
id|bi_record
op_star
id|bi_rec_next
c_func
(paren
r_struct
id|bi_record
op_star
id|rec
)paren
(brace
r_return
(paren
r_struct
id|bi_record
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|rec
op_plus
id|rec-&gt;size
)paren
suffix:semicolon
)brace
macro_line|#endif /* _PPC64_BOOTINFO_H */
eof
