multiline_comment|/* &n; * eeh.h&n; * Copyright (C) 2001  Dave Engebretsen &amp; Todd Inglett IBM Corporation.&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2 of the License, or&n; * (at your option) any later version.&n; * &n; * This program is distributed in the hope that it will be useful,&n; * but WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; * GNU General Public License for more details.&n; * &n; * You should have received a copy of the GNU General Public License&n; * along with this program; if not, write to the Free Software&n; * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA&n; */
macro_line|#ifndef _PPC64_EEH_H
DECL|macro|_PPC64_EEH_H
mdefine_line|#define _PPC64_EEH_H
macro_line|#include &lt;linux/string.h&gt;
macro_line|#include &lt;linux/init.h&gt;
r_struct
id|pci_dev
suffix:semicolon
r_struct
id|device_node
suffix:semicolon
multiline_comment|/* Values for eeh_mode bits in device_node */
DECL|macro|EEH_MODE_SUPPORTED
mdefine_line|#define EEH_MODE_SUPPORTED&t;(1&lt;&lt;0)
DECL|macro|EEH_MODE_NOCHECK
mdefine_line|#define EEH_MODE_NOCHECK&t;(1&lt;&lt;1)
r_extern
r_void
id|__init
id|eeh_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_int
r_int
id|eeh_check_failure
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|token
comma
r_int
r_int
id|val
)paren
suffix:semicolon
r_int
id|eeh_dn_check_failure
(paren
r_struct
id|device_node
op_star
id|dn
comma
r_struct
id|pci_dev
op_star
id|dev
)paren
suffix:semicolon
r_void
id|__iomem
op_star
id|eeh_ioremap
c_func
(paren
r_int
r_int
id|addr
comma
r_void
id|__iomem
op_star
id|vaddr
)paren
suffix:semicolon
r_void
id|__init
id|pci_addr_cache_build
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/**&n; * eeh_add_device_early&n; * eeh_add_device_late&n; *&n; * Perform eeh initialization for devices added after boot.&n; * Call eeh_add_device_early before doing any i/o to the&n; * device (including config space i/o).  Call eeh_add_device_late&n; * to finish the eeh setup for this device.&n; */
r_struct
id|device_node
suffix:semicolon
r_void
id|eeh_add_device_early
c_func
(paren
r_struct
id|device_node
op_star
)paren
suffix:semicolon
r_void
id|eeh_add_device_late
c_func
(paren
r_struct
id|pci_dev
op_star
)paren
suffix:semicolon
multiline_comment|/**&n; * eeh_remove_device - undo EEH setup for the indicated pci device&n; * @dev: pci device to be removed&n; *&n; * This routine should be when a device is removed from a running&n; * system (e.g. by hotplug or dlpar).&n; */
r_void
id|eeh_remove_device
c_func
(paren
r_struct
id|pci_dev
op_star
)paren
suffix:semicolon
DECL|macro|EEH_DISABLE
mdefine_line|#define EEH_DISABLE&t;&t;0
DECL|macro|EEH_ENABLE
mdefine_line|#define EEH_ENABLE&t;&t;1
DECL|macro|EEH_RELEASE_LOADSTORE
mdefine_line|#define EEH_RELEASE_LOADSTORE&t;2
DECL|macro|EEH_RELEASE_DMA
mdefine_line|#define EEH_RELEASE_DMA&t;&t;3
r_int
id|eeh_set_option
c_func
(paren
r_struct
id|pci_dev
op_star
id|dev
comma
r_int
id|options
)paren
suffix:semicolon
multiline_comment|/*&n; * EEH_POSSIBLE_ERROR() -- test for possible MMIO failure.&n; *&n; * Order this macro for performance.&n; * If EEH is off for a device and it is a memory BAR, ioremap will&n; * map it to the IOREGION.  In this case addr == vaddr and since these&n; * should be in registers we compare them first.  Next we check for&n; * ff&squot;s which indicates a (very) possible failure.&n; *&n; * If this macro yields TRUE, the caller relays to eeh_check_failure()&n; * which does further tests out of line.&n; */
DECL|macro|EEH_POSSIBLE_IO_ERROR
mdefine_line|#define EEH_POSSIBLE_IO_ERROR(val, type)&t;((val) == (type)~0)
multiline_comment|/*&n; * Reads from a device which has been isolated by EEH will return&n; * all 1s.  This macro gives an all-1s value of the given size (in&n; * bytes: 1, 2, or 4) for comparing with the result of a read.&n; */
DECL|macro|EEH_IO_ERROR_VALUE
mdefine_line|#define EEH_IO_ERROR_VALUE(size)&t;(~0U &gt;&gt; ((4 - (size)) * 8))
multiline_comment|/*&n; * The vaddr will equal the addr if EEH checking is disabled for&n; * this device.  This is because eeh_ioremap() will not have&n; * remapped to 0xA0, and thus both vaddr and addr will be 0xE0...&n; */
DECL|macro|EEH_POSSIBLE_ERROR
mdefine_line|#define EEH_POSSIBLE_ERROR(addr, vaddr, val, type) &bslash;&n;&t;&t;((vaddr) != (addr) &amp;&amp; EEH_POSSIBLE_IO_ERROR(val, type))
multiline_comment|/* &n; * MMIO read/write operations with EEH support.&n; */
DECL|function|eeh_readb
r_static
r_inline
id|u8
id|eeh_readb
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_volatile
id|u8
op_star
id|vaddr
op_assign
(paren
r_volatile
id|u8
id|__force
op_star
)paren
id|addr
suffix:semicolon
id|u8
id|val
op_assign
id|in_8
c_func
(paren
id|vaddr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|EEH_POSSIBLE_ERROR
c_func
(paren
id|addr
comma
id|vaddr
comma
id|val
comma
id|u8
)paren
)paren
r_return
id|eeh_check_failure
c_func
(paren
id|addr
comma
id|val
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
DECL|function|eeh_writeb
r_static
r_inline
r_void
id|eeh_writeb
c_func
(paren
id|u8
id|val
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_volatile
id|u8
op_star
id|vaddr
op_assign
(paren
r_volatile
id|u8
id|__force
op_star
)paren
id|addr
suffix:semicolon
id|out_8
c_func
(paren
id|vaddr
comma
id|val
)paren
suffix:semicolon
)brace
DECL|function|eeh_readw
r_static
r_inline
id|u16
id|eeh_readw
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_volatile
id|u16
op_star
id|vaddr
op_assign
(paren
r_volatile
id|u16
id|__force
op_star
)paren
id|addr
suffix:semicolon
id|u16
id|val
op_assign
id|in_le16
c_func
(paren
id|vaddr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|EEH_POSSIBLE_ERROR
c_func
(paren
id|addr
comma
id|vaddr
comma
id|val
comma
id|u16
)paren
)paren
r_return
id|eeh_check_failure
c_func
(paren
id|addr
comma
id|val
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
DECL|function|eeh_writew
r_static
r_inline
r_void
id|eeh_writew
c_func
(paren
id|u16
id|val
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_volatile
id|u16
op_star
id|vaddr
op_assign
(paren
r_volatile
id|u16
id|__force
op_star
)paren
id|addr
suffix:semicolon
id|out_le16
c_func
(paren
id|vaddr
comma
id|val
)paren
suffix:semicolon
)brace
DECL|function|eeh_raw_readw
r_static
r_inline
id|u16
id|eeh_raw_readw
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_volatile
id|u16
op_star
id|vaddr
op_assign
(paren
r_volatile
id|u16
id|__force
op_star
)paren
id|addr
suffix:semicolon
id|u16
id|val
op_assign
id|in_be16
c_func
(paren
id|vaddr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|EEH_POSSIBLE_ERROR
c_func
(paren
id|addr
comma
id|vaddr
comma
id|val
comma
id|u16
)paren
)paren
r_return
id|eeh_check_failure
c_func
(paren
id|addr
comma
id|val
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
DECL|function|eeh_raw_writew
r_static
r_inline
r_void
id|eeh_raw_writew
c_func
(paren
id|u16
id|val
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_volatile
id|u16
op_star
id|vaddr
op_assign
(paren
r_volatile
id|u16
id|__force
op_star
)paren
id|addr
suffix:semicolon
id|out_be16
c_func
(paren
id|vaddr
comma
id|val
)paren
suffix:semicolon
)brace
DECL|function|eeh_readl
r_static
r_inline
id|u32
id|eeh_readl
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_volatile
id|u32
op_star
id|vaddr
op_assign
(paren
r_volatile
id|u32
id|__force
op_star
)paren
id|addr
suffix:semicolon
id|u32
id|val
op_assign
id|in_le32
c_func
(paren
id|vaddr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|EEH_POSSIBLE_ERROR
c_func
(paren
id|addr
comma
id|vaddr
comma
id|val
comma
id|u32
)paren
)paren
r_return
id|eeh_check_failure
c_func
(paren
id|addr
comma
id|val
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
DECL|function|eeh_writel
r_static
r_inline
r_void
id|eeh_writel
c_func
(paren
id|u32
id|val
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_volatile
id|u32
op_star
id|vaddr
op_assign
(paren
r_volatile
id|u32
id|__force
op_star
)paren
id|addr
suffix:semicolon
id|out_le32
c_func
(paren
id|vaddr
comma
id|val
)paren
suffix:semicolon
)brace
DECL|function|eeh_raw_readl
r_static
r_inline
id|u32
id|eeh_raw_readl
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_volatile
id|u32
op_star
id|vaddr
op_assign
(paren
r_volatile
id|u32
id|__force
op_star
)paren
id|addr
suffix:semicolon
id|u32
id|val
op_assign
id|in_be32
c_func
(paren
id|vaddr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|EEH_POSSIBLE_ERROR
c_func
(paren
id|addr
comma
id|vaddr
comma
id|val
comma
id|u32
)paren
)paren
r_return
id|eeh_check_failure
c_func
(paren
id|addr
comma
id|val
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
DECL|function|eeh_raw_writel
r_static
r_inline
r_void
id|eeh_raw_writel
c_func
(paren
id|u32
id|val
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_volatile
id|u32
op_star
id|vaddr
op_assign
(paren
r_volatile
id|u32
id|__force
op_star
)paren
id|addr
suffix:semicolon
id|out_be32
c_func
(paren
id|vaddr
comma
id|val
)paren
suffix:semicolon
)brace
DECL|function|eeh_readq
r_static
r_inline
id|u64
id|eeh_readq
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_volatile
id|u64
op_star
id|vaddr
op_assign
(paren
r_volatile
id|u64
id|__force
op_star
)paren
id|addr
suffix:semicolon
id|u64
id|val
op_assign
id|in_le64
c_func
(paren
id|vaddr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|EEH_POSSIBLE_ERROR
c_func
(paren
id|addr
comma
id|vaddr
comma
id|val
comma
id|u64
)paren
)paren
r_return
id|eeh_check_failure
c_func
(paren
id|addr
comma
id|val
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
DECL|function|eeh_writeq
r_static
r_inline
r_void
id|eeh_writeq
c_func
(paren
id|u64
id|val
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_volatile
id|u64
op_star
id|vaddr
op_assign
(paren
r_volatile
id|u64
id|__force
op_star
)paren
id|addr
suffix:semicolon
id|out_le64
c_func
(paren
id|vaddr
comma
id|val
)paren
suffix:semicolon
)brace
DECL|function|eeh_raw_readq
r_static
r_inline
id|u64
id|eeh_raw_readq
c_func
(paren
r_const
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_volatile
id|u64
op_star
id|vaddr
op_assign
(paren
r_volatile
id|u64
id|__force
op_star
)paren
id|addr
suffix:semicolon
id|u64
id|val
op_assign
id|in_be64
c_func
(paren
id|vaddr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|EEH_POSSIBLE_ERROR
c_func
(paren
id|addr
comma
id|vaddr
comma
id|val
comma
id|u64
)paren
)paren
r_return
id|eeh_check_failure
c_func
(paren
id|addr
comma
id|val
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
DECL|function|eeh_raw_writeq
r_static
r_inline
r_void
id|eeh_raw_writeq
c_func
(paren
id|u64
id|val
comma
r_volatile
r_void
id|__iomem
op_star
id|addr
)paren
(brace
r_volatile
id|u64
op_star
id|vaddr
op_assign
(paren
r_volatile
id|u64
id|__force
op_star
)paren
id|addr
suffix:semicolon
id|out_be64
c_func
(paren
id|vaddr
comma
id|val
)paren
suffix:semicolon
)brace
DECL|macro|EEH_CHECK_ALIGN
mdefine_line|#define EEH_CHECK_ALIGN(v,a) &bslash;&n;&t;((((unsigned long)(v)) &amp; ((a) - 1)) == 0)
DECL|function|eeh_memset_io
r_static
r_inline
r_void
id|eeh_memset_io
c_func
(paren
r_volatile
r_void
id|__iomem
op_star
id|addr
comma
r_int
id|c
comma
r_int
r_int
id|n
)paren
(brace
r_void
op_star
id|vaddr
op_assign
(paren
r_void
id|__force
op_star
)paren
id|addr
suffix:semicolon
id|u32
id|lc
op_assign
id|c
suffix:semicolon
id|lc
op_or_assign
id|lc
op_lshift
l_int|8
suffix:semicolon
id|lc
op_or_assign
id|lc
op_lshift
l_int|16
suffix:semicolon
r_while
c_loop
(paren
id|n
op_logical_and
op_logical_neg
id|EEH_CHECK_ALIGN
c_func
(paren
id|vaddr
comma
l_int|4
)paren
)paren
(brace
op_star
(paren
(paren
r_volatile
id|u8
op_star
)paren
id|vaddr
)paren
op_assign
id|c
suffix:semicolon
id|vaddr
op_assign
(paren
r_void
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|vaddr
op_plus
l_int|1
)paren
suffix:semicolon
id|n
op_decrement
suffix:semicolon
)brace
r_while
c_loop
(paren
id|n
op_ge
l_int|4
)paren
(brace
op_star
(paren
(paren
r_volatile
id|u32
op_star
)paren
id|vaddr
)paren
op_assign
id|lc
suffix:semicolon
id|vaddr
op_assign
(paren
r_void
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|vaddr
op_plus
l_int|4
)paren
suffix:semicolon
id|n
op_sub_assign
l_int|4
suffix:semicolon
)brace
r_while
c_loop
(paren
id|n
)paren
(brace
op_star
(paren
(paren
r_volatile
id|u8
op_star
)paren
id|vaddr
)paren
op_assign
id|c
suffix:semicolon
id|vaddr
op_assign
(paren
r_void
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|vaddr
op_plus
l_int|1
)paren
suffix:semicolon
id|n
op_decrement
suffix:semicolon
)brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;sync&quot;
suffix:colon
suffix:colon
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
DECL|function|eeh_memcpy_fromio
r_static
r_inline
r_void
id|eeh_memcpy_fromio
c_func
(paren
r_void
op_star
id|dest
comma
r_const
r_volatile
r_void
id|__iomem
op_star
id|src
comma
r_int
r_int
id|n
)paren
(brace
r_void
op_star
id|vsrc
op_assign
(paren
r_void
id|__force
op_star
)paren
id|src
suffix:semicolon
r_void
op_star
id|vsrcsave
op_assign
id|vsrc
comma
op_star
id|destsave
op_assign
id|dest
suffix:semicolon
r_const
r_volatile
r_void
id|__iomem
op_star
id|srcsave
op_assign
id|src
suffix:semicolon
r_int
r_int
id|nsave
op_assign
id|n
suffix:semicolon
r_while
c_loop
(paren
id|n
op_logical_and
(paren
op_logical_neg
id|EEH_CHECK_ALIGN
c_func
(paren
id|vsrc
comma
l_int|4
)paren
op_logical_or
op_logical_neg
id|EEH_CHECK_ALIGN
c_func
(paren
id|dest
comma
l_int|4
)paren
)paren
)paren
(brace
op_star
(paren
(paren
id|u8
op_star
)paren
id|dest
)paren
op_assign
op_star
(paren
(paren
r_volatile
id|u8
op_star
)paren
id|vsrc
)paren
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;eieio&quot;
suffix:colon
suffix:colon
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
id|vsrc
op_assign
(paren
r_void
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|vsrc
op_plus
l_int|1
)paren
suffix:semicolon
id|dest
op_assign
(paren
r_void
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|dest
op_plus
l_int|1
)paren
suffix:semicolon
id|n
op_decrement
suffix:semicolon
)brace
r_while
c_loop
(paren
id|n
OG
l_int|4
)paren
(brace
op_star
(paren
(paren
id|u32
op_star
)paren
id|dest
)paren
op_assign
op_star
(paren
(paren
r_volatile
id|u32
op_star
)paren
id|vsrc
)paren
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;eieio&quot;
suffix:colon
suffix:colon
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
id|vsrc
op_assign
(paren
r_void
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|vsrc
op_plus
l_int|4
)paren
suffix:semicolon
id|dest
op_assign
(paren
r_void
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|dest
op_plus
l_int|4
)paren
suffix:semicolon
id|n
op_sub_assign
l_int|4
suffix:semicolon
)brace
r_while
c_loop
(paren
id|n
)paren
(brace
op_star
(paren
(paren
id|u8
op_star
)paren
id|dest
)paren
op_assign
op_star
(paren
(paren
r_volatile
id|u8
op_star
)paren
id|vsrc
)paren
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;eieio&quot;
suffix:colon
suffix:colon
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
id|vsrc
op_assign
(paren
r_void
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|vsrc
op_plus
l_int|1
)paren
suffix:semicolon
id|dest
op_assign
(paren
r_void
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|dest
op_plus
l_int|1
)paren
suffix:semicolon
id|n
op_decrement
suffix:semicolon
)brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;sync&quot;
suffix:colon
suffix:colon
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
multiline_comment|/* Look for ffff&squot;s here at dest[n].  Assume that at least 4 bytes&n;&t; * were copied. Check all four bytes.&n;&t; */
r_if
c_cond
(paren
(paren
id|nsave
op_ge
l_int|4
)paren
op_logical_and
(paren
id|EEH_POSSIBLE_ERROR
c_func
(paren
id|srcsave
comma
id|vsrcsave
comma
(paren
op_star
(paren
(paren
id|u32
op_star
)paren
id|destsave
op_plus
id|nsave
op_minus
l_int|4
)paren
)paren
comma
id|u32
)paren
)paren
)paren
(brace
id|eeh_check_failure
c_func
(paren
id|srcsave
comma
(paren
op_star
(paren
(paren
id|u32
op_star
)paren
id|destsave
op_plus
id|nsave
op_minus
l_int|4
)paren
)paren
)paren
suffix:semicolon
)brace
)brace
DECL|function|eeh_memcpy_toio
r_static
r_inline
r_void
id|eeh_memcpy_toio
c_func
(paren
r_volatile
r_void
id|__iomem
op_star
id|dest
comma
r_const
r_void
op_star
id|src
comma
r_int
r_int
id|n
)paren
(brace
r_void
op_star
id|vdest
op_assign
(paren
r_void
id|__force
op_star
)paren
id|dest
suffix:semicolon
r_while
c_loop
(paren
id|n
op_logical_and
(paren
op_logical_neg
id|EEH_CHECK_ALIGN
c_func
(paren
id|vdest
comma
l_int|4
)paren
op_logical_or
op_logical_neg
id|EEH_CHECK_ALIGN
c_func
(paren
id|src
comma
l_int|4
)paren
)paren
)paren
(brace
op_star
(paren
(paren
r_volatile
id|u8
op_star
)paren
id|vdest
)paren
op_assign
op_star
(paren
(paren
id|u8
op_star
)paren
id|src
)paren
suffix:semicolon
id|src
op_assign
(paren
r_void
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|src
op_plus
l_int|1
)paren
suffix:semicolon
id|vdest
op_assign
(paren
r_void
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|vdest
op_plus
l_int|1
)paren
suffix:semicolon
id|n
op_decrement
suffix:semicolon
)brace
r_while
c_loop
(paren
id|n
OG
l_int|4
)paren
(brace
op_star
(paren
(paren
r_volatile
id|u32
op_star
)paren
id|vdest
)paren
op_assign
op_star
(paren
(paren
r_volatile
id|u32
op_star
)paren
id|src
)paren
suffix:semicolon
id|src
op_assign
(paren
r_void
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|src
op_plus
l_int|4
)paren
suffix:semicolon
id|vdest
op_assign
(paren
r_void
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|vdest
op_plus
l_int|4
)paren
suffix:semicolon
id|n
op_sub_assign
l_int|4
suffix:semicolon
)brace
r_while
c_loop
(paren
id|n
)paren
(brace
op_star
(paren
(paren
r_volatile
id|u8
op_star
)paren
id|vdest
)paren
op_assign
op_star
(paren
(paren
id|u8
op_star
)paren
id|src
)paren
suffix:semicolon
id|src
op_assign
(paren
r_void
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|src
op_plus
l_int|1
)paren
suffix:semicolon
id|vdest
op_assign
(paren
r_void
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|vdest
op_plus
l_int|1
)paren
suffix:semicolon
id|n
op_decrement
suffix:semicolon
)brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;sync&quot;
suffix:colon
suffix:colon
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
DECL|macro|EEH_CHECK_ALIGN
macro_line|#undef EEH_CHECK_ALIGN
DECL|macro|MAX_ISA_PORT
mdefine_line|#define MAX_ISA_PORT 0x10000
r_extern
r_int
r_int
id|io_page_mask
suffix:semicolon
DECL|macro|_IO_IS_VALID
mdefine_line|#define _IO_IS_VALID(port) ((port) &gt;= MAX_ISA_PORT || (1 &lt;&lt; (port&gt;&gt;PAGE_SHIFT)) &amp; io_page_mask)
DECL|function|eeh_inb
r_static
r_inline
id|u8
id|eeh_inb
c_func
(paren
r_int
r_int
id|port
)paren
(brace
id|u8
id|val
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|_IO_IS_VALID
c_func
(paren
id|port
)paren
)paren
r_return
op_complement
l_int|0
suffix:semicolon
id|val
op_assign
id|in_8
c_func
(paren
(paren
id|u8
op_star
)paren
(paren
id|port
op_plus
id|pci_io_base
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|EEH_POSSIBLE_IO_ERROR
c_func
(paren
id|val
comma
id|u8
)paren
)paren
r_return
id|eeh_check_failure
c_func
(paren
(paren
r_void
id|__iomem
op_star
)paren
(paren
id|port
)paren
comma
id|val
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
DECL|function|eeh_outb
r_static
r_inline
r_void
id|eeh_outb
c_func
(paren
id|u8
id|val
comma
r_int
r_int
id|port
)paren
(brace
r_if
c_cond
(paren
id|_IO_IS_VALID
c_func
(paren
id|port
)paren
)paren
id|out_8
c_func
(paren
(paren
id|u8
op_star
)paren
(paren
id|port
op_plus
id|pci_io_base
)paren
comma
id|val
)paren
suffix:semicolon
)brace
DECL|function|eeh_inw
r_static
r_inline
id|u16
id|eeh_inw
c_func
(paren
r_int
r_int
id|port
)paren
(brace
id|u16
id|val
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|_IO_IS_VALID
c_func
(paren
id|port
)paren
)paren
r_return
op_complement
l_int|0
suffix:semicolon
id|val
op_assign
id|in_le16
c_func
(paren
(paren
id|u16
op_star
)paren
(paren
id|port
op_plus
id|pci_io_base
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|EEH_POSSIBLE_IO_ERROR
c_func
(paren
id|val
comma
id|u16
)paren
)paren
r_return
id|eeh_check_failure
c_func
(paren
(paren
r_void
id|__iomem
op_star
)paren
(paren
id|port
)paren
comma
id|val
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
DECL|function|eeh_outw
r_static
r_inline
r_void
id|eeh_outw
c_func
(paren
id|u16
id|val
comma
r_int
r_int
id|port
)paren
(brace
r_if
c_cond
(paren
id|_IO_IS_VALID
c_func
(paren
id|port
)paren
)paren
id|out_le16
c_func
(paren
(paren
id|u16
op_star
)paren
(paren
id|port
op_plus
id|pci_io_base
)paren
comma
id|val
)paren
suffix:semicolon
)brace
DECL|function|eeh_inl
r_static
r_inline
id|u32
id|eeh_inl
c_func
(paren
r_int
r_int
id|port
)paren
(brace
id|u32
id|val
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|_IO_IS_VALID
c_func
(paren
id|port
)paren
)paren
r_return
op_complement
l_int|0
suffix:semicolon
id|val
op_assign
id|in_le32
c_func
(paren
(paren
id|u32
op_star
)paren
(paren
id|port
op_plus
id|pci_io_base
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|EEH_POSSIBLE_IO_ERROR
c_func
(paren
id|val
comma
id|u32
)paren
)paren
r_return
id|eeh_check_failure
c_func
(paren
(paren
r_void
id|__iomem
op_star
)paren
(paren
id|port
)paren
comma
id|val
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
DECL|function|eeh_outl
r_static
r_inline
r_void
id|eeh_outl
c_func
(paren
id|u32
id|val
comma
r_int
r_int
id|port
)paren
(brace
r_if
c_cond
(paren
id|_IO_IS_VALID
c_func
(paren
id|port
)paren
)paren
id|out_le32
c_func
(paren
(paren
id|u32
op_star
)paren
(paren
id|port
op_plus
id|pci_io_base
)paren
comma
id|val
)paren
suffix:semicolon
)brace
multiline_comment|/* in-string eeh macros */
DECL|function|eeh_insb
r_static
r_inline
r_void
id|eeh_insb
c_func
(paren
r_int
r_int
id|port
comma
r_void
op_star
id|buf
comma
r_int
id|ns
)paren
(brace
id|_insb
c_func
(paren
(paren
id|u8
op_star
)paren
(paren
id|port
op_plus
id|pci_io_base
)paren
comma
id|buf
comma
id|ns
)paren
suffix:semicolon
r_if
c_cond
(paren
id|EEH_POSSIBLE_IO_ERROR
c_func
(paren
(paren
op_star
(paren
(paren
(paren
id|u8
op_star
)paren
id|buf
)paren
op_plus
id|ns
op_minus
l_int|1
)paren
)paren
comma
id|u8
)paren
)paren
id|eeh_check_failure
c_func
(paren
(paren
r_void
id|__iomem
op_star
)paren
(paren
id|port
)paren
comma
op_star
(paren
id|u8
op_star
)paren
id|buf
)paren
suffix:semicolon
)brace
DECL|function|eeh_insw_ns
r_static
r_inline
r_void
id|eeh_insw_ns
c_func
(paren
r_int
r_int
id|port
comma
r_void
op_star
id|buf
comma
r_int
id|ns
)paren
(brace
id|_insw_ns
c_func
(paren
(paren
id|u16
op_star
)paren
(paren
id|port
op_plus
id|pci_io_base
)paren
comma
id|buf
comma
id|ns
)paren
suffix:semicolon
r_if
c_cond
(paren
id|EEH_POSSIBLE_IO_ERROR
c_func
(paren
(paren
op_star
(paren
(paren
(paren
id|u16
op_star
)paren
id|buf
)paren
op_plus
id|ns
op_minus
l_int|1
)paren
)paren
comma
id|u16
)paren
)paren
id|eeh_check_failure
c_func
(paren
(paren
r_void
id|__iomem
op_star
)paren
(paren
id|port
)paren
comma
op_star
(paren
id|u16
op_star
)paren
id|buf
)paren
suffix:semicolon
)brace
DECL|function|eeh_insl_ns
r_static
r_inline
r_void
id|eeh_insl_ns
c_func
(paren
r_int
r_int
id|port
comma
r_void
op_star
id|buf
comma
r_int
id|nl
)paren
(brace
id|_insl_ns
c_func
(paren
(paren
id|u32
op_star
)paren
(paren
id|port
op_plus
id|pci_io_base
)paren
comma
id|buf
comma
id|nl
)paren
suffix:semicolon
r_if
c_cond
(paren
id|EEH_POSSIBLE_IO_ERROR
c_func
(paren
(paren
op_star
(paren
(paren
(paren
id|u32
op_star
)paren
id|buf
)paren
op_plus
id|nl
op_minus
l_int|1
)paren
)paren
comma
id|u32
)paren
)paren
id|eeh_check_failure
c_func
(paren
(paren
r_void
id|__iomem
op_star
)paren
(paren
id|port
)paren
comma
op_star
(paren
id|u32
op_star
)paren
id|buf
)paren
suffix:semicolon
)brace
macro_line|#endif /* _PPC64_EEH_H */
eof
