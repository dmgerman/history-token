macro_line|#ifndef __ASM_SPINLOCK_H
DECL|macro|__ASM_SPINLOCK_H
mdefine_line|#define __ASM_SPINLOCK_H
multiline_comment|/*&n; * Simple spin lock operations.  &n; *&n; * Copyright (C) 2001-2004 Paul Mackerras &lt;paulus@au.ibm.com&gt;, IBM&n; * Copyright (C) 2001 Anton Blanchard &lt;anton@au.ibm.com&gt;, IBM&n; * Copyright (C) 2002 Dave Engebretsen &lt;engebret@us.ibm.com&gt;, IBM&n; *&t;Rework to support virtual processors&n; *&n; * Type of int is used as a full 64b word is not necessary.&n; *&n; * This program is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License&n; * as published by the Free Software Foundation; either version&n; * 2 of the License, or (at your option) any later version.&n; */
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;asm/paca.h&gt;
macro_line|#include &lt;asm/hvcall.h&gt;
macro_line|#include &lt;asm/iSeries/HvCall.h&gt;
r_typedef
r_struct
(brace
DECL|member|lock
r_volatile
r_int
r_int
id|lock
suffix:semicolon
DECL|typedef|spinlock_t
)brace
id|spinlock_t
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|lock
r_volatile
r_int
r_int
id|lock
suffix:semicolon
DECL|typedef|rwlock_t
)brace
id|rwlock_t
suffix:semicolon
macro_line|#ifdef __KERNEL__
DECL|macro|SPIN_LOCK_UNLOCKED
mdefine_line|#define SPIN_LOCK_UNLOCKED&t;(spinlock_t) { 0 }
DECL|macro|spin_is_locked
mdefine_line|#define spin_is_locked(x)&t;((x)-&gt;lock != 0)
DECL|macro|spin_lock_init
mdefine_line|#define spin_lock_init(x)&t;do { *(x) = SPIN_LOCK_UNLOCKED; } while(0)
DECL|function|_raw_spin_unlock
r_static
id|__inline__
r_void
id|_raw_spin_unlock
c_func
(paren
id|spinlock_t
op_star
id|lock
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;lwsync&t;# spin_unlock&quot;
suffix:colon
suffix:colon
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
id|lock-&gt;lock
op_assign
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * On a system with shared processors (that is, where a physical&n; * processor is multiplexed between several virtual processors),&n; * there is no point spinning on a lock if the holder of the lock&n; * isn&squot;t currently scheduled on a physical processor.  Instead&n; * we detect this situation and ask the hypervisor to give the&n; * rest of our timeslice to the lock holder.&n; *&n; * So that we can tell which virtual processor is holding a lock,&n; * we put 0x80000000 | smp_processor_id() in the lock when it is&n; * held.  Conveniently, we have a word in the paca that holds this&n; * value.&n; */
macro_line|#if defined(CONFIG_PPC_SPLPAR) || defined(CONFIG_PPC_ISERIES)
multiline_comment|/* We only yield to the hypervisor if we are in shared processor mode */
DECL|macro|SHARED_PROCESSOR
mdefine_line|#define SHARED_PROCESSOR (get_paca()-&gt;lppaca.shared_proc)
r_extern
r_void
id|__spin_yield
c_func
(paren
id|spinlock_t
op_star
id|lock
)paren
suffix:semicolon
r_extern
r_void
id|__rw_yield
c_func
(paren
id|rwlock_t
op_star
id|lock
)paren
suffix:semicolon
macro_line|#else /* SPLPAR || ISERIES */
DECL|macro|__spin_yield
mdefine_line|#define __spin_yield(x)&t;barrier()
DECL|macro|__rw_yield
mdefine_line|#define __rw_yield(x)&t;barrier()
DECL|macro|SHARED_PROCESSOR
mdefine_line|#define SHARED_PROCESSOR&t;0
macro_line|#endif
r_extern
r_void
id|spin_unlock_wait
c_func
(paren
id|spinlock_t
op_star
id|lock
)paren
suffix:semicolon
multiline_comment|/*&n; * This returns the old value in the lock, so we succeeded&n; * in getting the lock if the return value is 0.&n; */
DECL|function|__spin_trylock
r_static
id|__inline__
r_int
r_int
id|__spin_trylock
c_func
(paren
id|spinlock_t
op_star
id|lock
)paren
(brace
r_int
r_int
id|tmp
comma
id|tmp2
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&t;lwz&t;&t;%1,%3(13)&t;&t;# __spin_trylock&bslash;n&bslash;&n;1:&t;lwarx&t;&t;%0,0,%2&bslash;n&bslash;&n;&t;cmpwi&t;&t;0,%0,0&bslash;n&bslash;&n;&t;bne-&t;&t;2f&bslash;n&bslash;&n;&t;stwcx.&t;&t;%1,0,%2&bslash;n&bslash;&n;&t;bne-&t;&t;1b&bslash;n&bslash;&n;&t;isync&bslash;n&bslash;&n;2:&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp2
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
op_amp
id|lock-&gt;lock
)paren
comma
l_string|&quot;i&quot;
(paren
m_offsetof
(paren
r_struct
id|paca_struct
comma
id|lock_token
)paren
)paren
suffix:colon
l_string|&quot;cr0&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|tmp
suffix:semicolon
)brace
DECL|function|_raw_spin_trylock
r_static
r_int
id|__inline__
id|_raw_spin_trylock
c_func
(paren
id|spinlock_t
op_star
id|lock
)paren
(brace
r_return
id|__spin_trylock
c_func
(paren
id|lock
)paren
op_eq
l_int|0
suffix:semicolon
)brace
DECL|function|_raw_spin_lock
r_static
r_void
id|__inline__
id|_raw_spin_lock
c_func
(paren
id|spinlock_t
op_star
id|lock
)paren
(brace
r_while
c_loop
(paren
l_int|1
)paren
(brace
r_if
c_cond
(paren
id|likely
c_func
(paren
id|__spin_trylock
c_func
(paren
id|lock
)paren
op_eq
l_int|0
)paren
)paren
r_break
suffix:semicolon
r_do
(brace
id|HMT_low
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|SHARED_PROCESSOR
)paren
id|__spin_yield
c_func
(paren
id|lock
)paren
suffix:semicolon
)brace
r_while
c_loop
(paren
id|likely
c_func
(paren
id|lock-&gt;lock
op_ne
l_int|0
)paren
)paren
suffix:semicolon
id|HMT_medium
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
DECL|function|_raw_spin_lock_flags
r_static
r_void
id|__inline__
id|_raw_spin_lock_flags
c_func
(paren
id|spinlock_t
op_star
id|lock
comma
r_int
r_int
id|flags
)paren
(brace
r_int
r_int
id|flags_dis
suffix:semicolon
r_while
c_loop
(paren
l_int|1
)paren
(brace
r_if
c_cond
(paren
id|likely
c_func
(paren
id|__spin_trylock
c_func
(paren
id|lock
)paren
op_eq
l_int|0
)paren
)paren
r_break
suffix:semicolon
id|local_save_flags
c_func
(paren
id|flags_dis
)paren
suffix:semicolon
id|local_irq_restore
c_func
(paren
id|flags
)paren
suffix:semicolon
r_do
(brace
id|HMT_low
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|SHARED_PROCESSOR
)paren
id|__spin_yield
c_func
(paren
id|lock
)paren
suffix:semicolon
)brace
r_while
c_loop
(paren
id|likely
c_func
(paren
id|lock-&gt;lock
op_ne
l_int|0
)paren
)paren
suffix:semicolon
id|HMT_medium
c_func
(paren
)paren
suffix:semicolon
id|local_irq_restore
c_func
(paren
id|flags_dis
)paren
suffix:semicolon
)brace
)brace
multiline_comment|/*&n; * Read-write spinlocks, allowing multiple readers&n; * but only one writer.&n; *&n; * NOTE! it is quite common to have readers in interrupts&n; * but no interrupt writers. For those circumstances we&n; * can &quot;mix&quot; irq-safe locks - any writer needs to get a&n; * irq-safe write-lock, but readers can get non-irqsafe&n; * read-locks.&n; */
DECL|macro|RW_LOCK_UNLOCKED
mdefine_line|#define RW_LOCK_UNLOCKED (rwlock_t) { 0 }
DECL|macro|rwlock_init
mdefine_line|#define rwlock_init(x)&t;&t;do { *(x) = RW_LOCK_UNLOCKED; } while(0)
DECL|macro|rwlock_is_locked
mdefine_line|#define rwlock_is_locked(x)&t;((x)-&gt;lock)
DECL|function|is_read_locked
r_static
id|__inline__
r_int
id|is_read_locked
c_func
(paren
id|rwlock_t
op_star
id|rw
)paren
(brace
r_return
id|rw-&gt;lock
OG
l_int|0
suffix:semicolon
)brace
DECL|function|is_write_locked
r_static
id|__inline__
r_int
id|is_write_locked
c_func
(paren
id|rwlock_t
op_star
id|rw
)paren
(brace
r_return
id|rw-&gt;lock
OL
l_int|0
suffix:semicolon
)brace
DECL|function|_raw_write_unlock
r_static
id|__inline__
r_void
id|_raw_write_unlock
c_func
(paren
id|rwlock_t
op_star
id|rw
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;lwsync&t;&t;# write_unlock&quot;
suffix:colon
suffix:colon
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
id|rw-&gt;lock
op_assign
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * This returns the old value in the lock + 1,&n; * so we got a read lock if the return value is &gt; 0.&n; */
DECL|function|__read_trylock
r_static
r_int
id|__inline__
id|__read_trylock
c_func
(paren
id|rwlock_t
op_star
id|rw
)paren
(brace
r_int
id|tmp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&t;lwarx&t;&t;%0,0,%1&t;&t;# read_trylock&bslash;n&bslash;&n;&t;extsw&t;&t;%0,%0&bslash;n&bslash;&n;&t;addic.&t;&t;%0,%0,1&bslash;n&bslash;&n;&t;ble-&t;&t;2f&bslash;n&bslash;&n;&t;stwcx.&t;&t;%0,0,%1&bslash;n&bslash;&n;&t;bne-&t;&t;1b&bslash;n&bslash;&n;&t;isync&bslash;n&bslash;&n;2:&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
op_amp
id|rw-&gt;lock
)paren
suffix:colon
l_string|&quot;cr0&quot;
comma
l_string|&quot;xer&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|tmp
suffix:semicolon
)brace
DECL|function|_raw_read_trylock
r_static
r_int
id|__inline__
id|_raw_read_trylock
c_func
(paren
id|rwlock_t
op_star
id|rw
)paren
(brace
r_return
id|__read_trylock
c_func
(paren
id|rw
)paren
OG
l_int|0
suffix:semicolon
)brace
DECL|function|_raw_read_lock
r_static
r_void
id|__inline__
id|_raw_read_lock
c_func
(paren
id|rwlock_t
op_star
id|rw
)paren
(brace
r_while
c_loop
(paren
l_int|1
)paren
(brace
r_if
c_cond
(paren
id|likely
c_func
(paren
id|__read_trylock
c_func
(paren
id|rw
)paren
OG
l_int|0
)paren
)paren
r_break
suffix:semicolon
r_do
(brace
id|HMT_low
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|SHARED_PROCESSOR
)paren
id|__rw_yield
c_func
(paren
id|rw
)paren
suffix:semicolon
)brace
r_while
c_loop
(paren
id|likely
c_func
(paren
id|rw-&gt;lock
OL
l_int|0
)paren
)paren
suffix:semicolon
id|HMT_medium
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
DECL|function|_raw_read_unlock
r_static
r_void
id|__inline__
id|_raw_read_unlock
c_func
(paren
id|rwlock_t
op_star
id|rw
)paren
(brace
r_int
id|tmp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;eieio&t;&t;&t;&t;# read_unlock&bslash;n&bslash;&n;1:&t;lwarx&t;&t;%0,0,%1&bslash;n&bslash;&n;&t;addic&t;&t;%0,%0,-1&bslash;n&bslash;&n;&t;stwcx.&t;&t;%0,0,%1&bslash;n&bslash;&n;&t;bne-&t;&t;1b&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
op_amp
id|rw-&gt;lock
)paren
suffix:colon
l_string|&quot;cr0&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * This returns the old value in the lock,&n; * so we got the write lock if the return value is 0.&n; */
DECL|function|__write_trylock
r_static
id|__inline__
r_int
id|__write_trylock
c_func
(paren
id|rwlock_t
op_star
id|rw
)paren
(brace
r_int
id|tmp
comma
id|tmp2
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&t;lwz&t;&t;%1,%3(13)&t;# write_trylock&bslash;n&bslash;&n;1:&t;lwarx&t;&t;%0,0,%2&bslash;n&bslash;&n;&t;cmpwi&t;&t;0,%0,0&bslash;n&bslash;&n;&t;bne-&t;&t;2f&bslash;n&bslash;&n;&t;stwcx.&t;&t;%1,0,%2&bslash;n&bslash;&n;&t;bne-&t;&t;1b&bslash;n&bslash;&n;&t;isync&bslash;n&bslash;&n;2:&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp2
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
op_amp
id|rw-&gt;lock
)paren
comma
l_string|&quot;i&quot;
(paren
m_offsetof
(paren
r_struct
id|paca_struct
comma
id|lock_token
)paren
)paren
suffix:colon
l_string|&quot;cr0&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|tmp
suffix:semicolon
)brace
DECL|function|_raw_write_trylock
r_static
r_int
id|__inline__
id|_raw_write_trylock
c_func
(paren
id|rwlock_t
op_star
id|rw
)paren
(brace
r_return
id|__write_trylock
c_func
(paren
id|rw
)paren
op_eq
l_int|0
suffix:semicolon
)brace
DECL|function|_raw_write_lock
r_static
r_void
id|__inline__
id|_raw_write_lock
c_func
(paren
id|rwlock_t
op_star
id|rw
)paren
(brace
r_while
c_loop
(paren
l_int|1
)paren
(brace
r_if
c_cond
(paren
id|likely
c_func
(paren
id|__write_trylock
c_func
(paren
id|rw
)paren
op_eq
l_int|0
)paren
)paren
r_break
suffix:semicolon
r_do
(brace
id|HMT_low
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|SHARED_PROCESSOR
)paren
id|__rw_yield
c_func
(paren
id|rw
)paren
suffix:semicolon
)brace
r_while
c_loop
(paren
id|likely
c_func
(paren
id|rw-&gt;lock
op_ne
l_int|0
)paren
)paren
suffix:semicolon
id|HMT_medium
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* __ASM_SPINLOCK_H */
eof
