multiline_comment|/*&n; *  linux/arch/ppc64/kernel/ptrace-common.h&n; *&n; *    Copyright (c) 2002 Stephen Rothwell, IBM Coproration&n; *    Extracted from ptrace.c and ptrace32.c&n; *&n; * This file is subject to the terms and conditions of the GNU General&n; * Public License.  See the file README.legal in the main directory of&n; * this archive for more details.&n; */
multiline_comment|/*&n; * Set of msr bits that gdb can change on behalf of a process.&n; */
DECL|macro|MSR_DEBUGCHANGE
mdefine_line|#define MSR_DEBUGCHANGE&t;(MSR_FE0 | MSR_SE | MSR_BE | MSR_FE1)
multiline_comment|/*&n; * Get contents of register REGNO in task TASK.&n; */
DECL|function|get_reg
r_static
r_inline
r_int
r_int
id|get_reg
c_func
(paren
r_struct
id|task_struct
op_star
id|task
comma
r_int
id|regno
)paren
(brace
r_if
c_cond
(paren
id|regno
OL
(paren
r_sizeof
(paren
r_struct
id|pt_regs
)paren
op_div
r_sizeof
(paren
r_int
r_int
)paren
)paren
)paren
r_return
(paren
(paren
r_int
r_int
op_star
)paren
id|task-&gt;thread.regs
)paren
(braket
id|regno
)braket
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * Write contents of register REGNO in task TASK.&n; */
DECL|function|put_reg
r_static
r_inline
r_int
id|put_reg
c_func
(paren
r_struct
id|task_struct
op_star
id|task
comma
r_int
id|regno
comma
r_int
r_int
id|data
)paren
(brace
r_if
c_cond
(paren
id|regno
OL
id|PT_SOFTE
)paren
(brace
r_if
c_cond
(paren
id|regno
op_eq
id|PT_MSR
)paren
id|data
op_assign
(paren
id|data
op_amp
id|MSR_DEBUGCHANGE
)paren
op_or
(paren
id|task-&gt;thread.regs-&gt;msr
op_amp
op_complement
id|MSR_DEBUGCHANGE
)paren
suffix:semicolon
(paren
(paren
r_int
r_int
op_star
)paren
id|task-&gt;thread.regs
)paren
(braket
id|regno
)braket
op_assign
id|data
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
r_return
op_minus
id|EIO
suffix:semicolon
)brace
DECL|function|set_single_step
r_static
r_inline
r_void
id|set_single_step
c_func
(paren
r_struct
id|task_struct
op_star
id|task
)paren
(brace
r_struct
id|pt_regs
op_star
id|regs
op_assign
id|task-&gt;thread.regs
suffix:semicolon
r_if
c_cond
(paren
id|regs
op_ne
l_int|NULL
)paren
id|regs-&gt;msr
op_or_assign
id|MSR_SE
suffix:semicolon
)brace
DECL|function|clear_single_step
r_static
r_inline
r_void
id|clear_single_step
c_func
(paren
r_struct
id|task_struct
op_star
id|task
)paren
(brace
r_struct
id|pt_regs
op_star
id|regs
op_assign
id|task-&gt;thread.regs
suffix:semicolon
r_if
c_cond
(paren
id|regs
op_ne
l_int|NULL
)paren
id|regs-&gt;msr
op_and_assign
op_complement
id|MSR_SE
suffix:semicolon
)brace
eof
