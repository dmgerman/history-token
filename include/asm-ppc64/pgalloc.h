macro_line|#ifndef _PPC64_PGALLOC_H
DECL|macro|_PPC64_PGALLOC_H
mdefine_line|#define _PPC64_PGALLOC_H
macro_line|#include &lt;linux/threads.h&gt;
macro_line|#include &lt;asm/processor.h&gt;
macro_line|#include &lt;asm/Naca.h&gt;
macro_line|#include &lt;asm/Paca.h&gt;
multiline_comment|/*&n; * This program is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License&n; * as published by the Free Software Foundation; either version&n; * 2 of the License, or (at your option) any later version.&n; */
r_static
r_inline
id|pgd_t
op_star
DECL|function|pgd_alloc
id|pgd_alloc
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
id|pgd_t
op_star
id|pgd
op_assign
(paren
id|pgd_t
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pgd
op_ne
l_int|NULL
)paren
id|clear_page
c_func
(paren
id|pgd
)paren
suffix:semicolon
r_return
id|pgd
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|pgd_free
id|pgd_free
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pgd
)paren
suffix:semicolon
)brace
DECL|macro|pgd_populate
mdefine_line|#define pgd_populate(MM, PGD, PMD)&t;pgd_set(PGD, PMD)
r_static
r_inline
id|pmd_t
op_star
DECL|function|pmd_alloc_one
id|pmd_alloc_one
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|addr
)paren
(brace
r_int
id|count
op_assign
l_int|0
suffix:semicolon
id|pmd_t
op_star
id|pmd
suffix:semicolon
r_do
(brace
id|pmd
op_assign
(paren
id|pmd_t
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd
)paren
id|clear_page
c_func
(paren
id|pmd
)paren
suffix:semicolon
r_else
(brace
id|current-&gt;state
op_assign
id|TASK_UNINTERRUPTIBLE
suffix:semicolon
id|schedule_timeout
c_func
(paren
id|HZ
)paren
suffix:semicolon
)brace
)brace
r_while
c_loop
(paren
op_logical_neg
id|pmd
op_logical_and
(paren
id|count
op_increment
OL
l_int|10
)paren
)paren
suffix:semicolon
r_return
id|pmd
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|pmd_free
id|pmd_free
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pmd
)paren
suffix:semicolon
)brace
DECL|macro|pmd_populate
mdefine_line|#define pmd_populate(mm, pmd, pte)&t;pmd_set(pmd, pte)
DECL|macro|pmd_populate_kernel
mdefine_line|#define pmd_populate_kernel(mm, pmd, pte) pmd_set(pmd, pte)
r_static
r_inline
id|pte_t
op_star
DECL|function|pte_alloc_one
id|pte_alloc_one
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|addr
)paren
(brace
r_int
id|count
op_assign
l_int|0
suffix:semicolon
id|pte_t
op_star
id|pte
suffix:semicolon
r_do
(brace
id|pte
op_assign
(paren
id|pte_t
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pte
)paren
id|clear_page
c_func
(paren
id|pte
)paren
suffix:semicolon
r_else
(brace
id|current-&gt;state
op_assign
id|TASK_UNINTERRUPTIBLE
suffix:semicolon
id|schedule_timeout
c_func
(paren
id|HZ
)paren
suffix:semicolon
)brace
)brace
r_while
c_loop
(paren
op_logical_neg
id|pte
op_logical_and
(paren
id|count
op_increment
OL
l_int|10
)paren
)paren
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|macro|pte_alloc_one_kernel
mdefine_line|#define pte_alloc_one_kernel(mm, address)&t;pte_alloc_one((mm), (address))
r_static
r_inline
r_void
DECL|function|pte_free
id|pte_free
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
)brace
DECL|macro|pte_free_kernel
mdefine_line|#define pte_free_kernel(pte)&t;pte_free(pte)
macro_line|#endif /* _PPC64_PGALLOC_H */
eof
