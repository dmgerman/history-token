macro_line|#ifndef _PPC64_PGALLOC_H
DECL|macro|_PPC64_PGALLOC_H
mdefine_line|#define _PPC64_PGALLOC_H
macro_line|#include &lt;linux/mm.h&gt;
macro_line|#include &lt;linux/slab.h&gt;
macro_line|#include &lt;asm/processor.h&gt;
r_extern
id|kmem_cache_t
op_star
id|zero_cache
suffix:semicolon
multiline_comment|/*&n; * This program is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License&n; * as published by the Free Software Foundation; either version&n; * 2 of the License, or (at your option) any later version.&n; */
r_static
r_inline
id|pgd_t
op_star
DECL|function|pgd_alloc
id|pgd_alloc
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
r_return
id|kmem_cache_alloc
c_func
(paren
id|zero_cache
comma
id|GFP_KERNEL
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|pgd_free
id|pgd_free
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
id|kmem_cache_free
c_func
(paren
id|zero_cache
comma
id|pgd
)paren
suffix:semicolon
)brace
DECL|macro|pgd_populate
mdefine_line|#define pgd_populate(MM, PGD, PMD)&t;pgd_set(PGD, PMD)
r_static
r_inline
id|pmd_t
op_star
DECL|function|pmd_alloc_one
id|pmd_alloc_one
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|addr
)paren
(brace
r_return
id|kmem_cache_alloc
c_func
(paren
id|zero_cache
comma
id|GFP_KERNEL
op_or
id|__GFP_REPEAT
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|pmd_free
id|pmd_free
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
id|kmem_cache_free
c_func
(paren
id|zero_cache
comma
id|pmd
)paren
suffix:semicolon
)brace
DECL|macro|__pmd_free_tlb
mdefine_line|#define __pmd_free_tlb(tlb, pmd)&t;pmd_free(pmd)
DECL|macro|pmd_populate_kernel
mdefine_line|#define pmd_populate_kernel(mm, pmd, pte) pmd_set(pmd, pte)
DECL|macro|pmd_populate
mdefine_line|#define pmd_populate(mm, pmd, pte_page) &bslash;&n;&t;pmd_populate_kernel(mm, pmd, page_address(pte_page))
r_static
r_inline
id|pte_t
op_star
DECL|function|pte_alloc_one_kernel
id|pte_alloc_one_kernel
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|addr
)paren
(brace
r_return
id|kmem_cache_alloc
c_func
(paren
id|zero_cache
comma
id|GFP_KERNEL
op_or
id|__GFP_REPEAT
)paren
suffix:semicolon
)brace
r_static
r_inline
r_struct
id|page
op_star
DECL|function|pte_alloc_one
id|pte_alloc_one
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|address
)paren
(brace
id|pte_t
op_star
id|pte
op_assign
id|pte_alloc_one_kernel
c_func
(paren
id|mm
comma
id|address
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pte
)paren
r_return
id|virt_to_page
c_func
(paren
id|pte
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|pte_free_kernel
id|pte_free_kernel
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|kmem_cache_free
c_func
(paren
id|zero_cache
comma
id|pte
)paren
suffix:semicolon
)brace
DECL|macro|pte_free
mdefine_line|#define pte_free(pte_page)&t;pte_free_kernel(page_address(pte_page))
DECL|macro|__pte_free_tlb
mdefine_line|#define __pte_free_tlb(tlb, pte)&t;pte_free(pte)
DECL|macro|check_pgt_cache
mdefine_line|#define check_pgt_cache()&t;do { } while (0)
macro_line|#endif /* _PPC64_PGALLOC_H */
eof
