macro_line|#ifndef _PPC64_PGALLOC_H
DECL|macro|_PPC64_PGALLOC_H
mdefine_line|#define _PPC64_PGALLOC_H
macro_line|#include &lt;linux/mm.h&gt;
macro_line|#include &lt;linux/slab.h&gt;
macro_line|#include &lt;linux/cpumask.h&gt;
macro_line|#include &lt;linux/percpu.h&gt;
macro_line|#include &lt;asm/processor.h&gt;
macro_line|#include &lt;asm/tlb.h&gt;
r_extern
id|kmem_cache_t
op_star
id|zero_cache
suffix:semicolon
multiline_comment|/*&n; * This program is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License&n; * as published by the Free Software Foundation; either version&n; * 2 of the License, or (at your option) any later version.&n; */
r_static
r_inline
id|pgd_t
op_star
DECL|function|pgd_alloc
id|pgd_alloc
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
r_return
id|kmem_cache_alloc
c_func
(paren
id|zero_cache
comma
id|GFP_KERNEL
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|pgd_free
id|pgd_free
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
id|kmem_cache_free
c_func
(paren
id|zero_cache
comma
id|pgd
)paren
suffix:semicolon
)brace
DECL|macro|pgd_populate
mdefine_line|#define pgd_populate(MM, PGD, PMD)&t;pgd_set(PGD, PMD)
r_static
r_inline
id|pmd_t
op_star
DECL|function|pmd_alloc_one
id|pmd_alloc_one
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|addr
)paren
(brace
r_return
id|kmem_cache_alloc
c_func
(paren
id|zero_cache
comma
id|GFP_KERNEL
op_or
id|__GFP_REPEAT
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|pmd_free
id|pmd_free
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
id|kmem_cache_free
c_func
(paren
id|zero_cache
comma
id|pmd
)paren
suffix:semicolon
)brace
DECL|macro|pmd_populate_kernel
mdefine_line|#define pmd_populate_kernel(mm, pmd, pte) pmd_set(pmd, pte)
DECL|macro|pmd_populate
mdefine_line|#define pmd_populate(mm, pmd, pte_page) &bslash;&n;&t;pmd_populate_kernel(mm, pmd, page_address(pte_page))
r_static
r_inline
id|pte_t
op_star
DECL|function|pte_alloc_one_kernel
id|pte_alloc_one_kernel
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|addr
)paren
(brace
r_return
id|kmem_cache_alloc
c_func
(paren
id|zero_cache
comma
id|GFP_KERNEL
op_or
id|__GFP_REPEAT
)paren
suffix:semicolon
)brace
r_static
r_inline
r_struct
id|page
op_star
DECL|function|pte_alloc_one
id|pte_alloc_one
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|address
)paren
(brace
id|pte_t
op_star
id|pte
op_assign
id|pte_alloc_one_kernel
c_func
(paren
id|mm
comma
id|address
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pte
)paren
r_return
id|virt_to_page
c_func
(paren
id|pte
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
DECL|function|pte_free_kernel
r_static
r_inline
r_void
id|pte_free_kernel
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|kmem_cache_free
c_func
(paren
id|zero_cache
comma
id|pte
)paren
suffix:semicolon
)brace
DECL|macro|pte_free
mdefine_line|#define pte_free(pte_page)&t;pte_free_kernel(page_address(pte_page))
DECL|struct|pte_freelist_batch
r_struct
id|pte_freelist_batch
(brace
DECL|member|rcu
r_struct
id|rcu_head
id|rcu
suffix:semicolon
DECL|member|index
r_int
r_int
id|index
suffix:semicolon
DECL|member|pages
r_struct
id|page
op_star
id|pages
(braket
l_int|0
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|PTE_FREELIST_SIZE
mdefine_line|#define PTE_FREELIST_SIZE&t;((PAGE_SIZE - sizeof(struct pte_freelist_batch) / &bslash;&n;&t;&t;&t;&t;  sizeof(struct page *)))
r_extern
r_void
id|pte_free_now
c_func
(paren
r_struct
id|page
op_star
id|ptepage
)paren
suffix:semicolon
r_extern
r_void
id|pte_free_submit
c_func
(paren
r_struct
id|pte_freelist_batch
op_star
id|batch
)paren
suffix:semicolon
id|DECLARE_PER_CPU
c_func
(paren
r_struct
id|pte_freelist_batch
op_star
comma
id|pte_freelist_cur
)paren
suffix:semicolon
DECL|function|__pte_free_tlb
r_static
r_inline
r_void
id|__pte_free_tlb
c_func
(paren
r_struct
id|mmu_gather
op_star
id|tlb
comma
r_struct
id|page
op_star
id|ptepage
)paren
(brace
multiline_comment|/* This is safe as we are holding page_table_lock */
id|cpumask_t
id|local_cpumask
op_assign
id|cpumask_of_cpu
c_func
(paren
id|smp_processor_id
c_func
(paren
)paren
)paren
suffix:semicolon
r_struct
id|pte_freelist_batch
op_star
op_star
id|batchp
op_assign
op_amp
id|__get_cpu_var
c_func
(paren
id|pte_freelist_cur
)paren
suffix:semicolon
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|tlb-&gt;mm-&gt;mm_users
)paren
OL
l_int|2
op_logical_or
id|cpus_equal
c_func
(paren
id|tlb-&gt;mm-&gt;cpu_vm_mask
comma
id|local_cpumask
)paren
)paren
(brace
id|pte_free
c_func
(paren
id|ptepage
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_if
c_cond
(paren
op_star
id|batchp
op_eq
l_int|NULL
)paren
(brace
op_star
id|batchp
op_assign
(paren
r_struct
id|pte_freelist_batch
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_ATOMIC
)paren
suffix:semicolon
r_if
c_cond
(paren
op_star
id|batchp
op_eq
l_int|NULL
)paren
(brace
id|pte_free_now
c_func
(paren
id|ptepage
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
(paren
op_star
id|batchp
)paren
op_member_access_from_pointer
id|index
op_assign
l_int|0
suffix:semicolon
)brace
(paren
op_star
id|batchp
)paren
op_member_access_from_pointer
id|pages
(braket
(paren
op_star
id|batchp
)paren
op_member_access_from_pointer
id|index
op_increment
)braket
op_assign
id|ptepage
suffix:semicolon
r_if
c_cond
(paren
(paren
op_star
id|batchp
)paren
op_member_access_from_pointer
id|index
op_eq
id|PTE_FREELIST_SIZE
)paren
(brace
id|pte_free_submit
c_func
(paren
op_star
id|batchp
)paren
suffix:semicolon
op_star
id|batchp
op_assign
l_int|NULL
suffix:semicolon
)brace
)brace
DECL|macro|__pmd_free_tlb
mdefine_line|#define __pmd_free_tlb(tlb, pmd)&t;__pte_free_tlb(tlb, virt_to_page(pmd))
DECL|macro|check_pgt_cache
mdefine_line|#define check_pgt_cache()&t;do { } while (0)
macro_line|#endif /* _PPC64_PGALLOC_H */
eof
