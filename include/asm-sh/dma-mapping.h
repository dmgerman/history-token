macro_line|#ifndef __ASM_SH_DMA_MAPPING_H
DECL|macro|__ASM_SH_DMA_MAPPING_H
mdefine_line|#define __ASM_SH_DMA_MAPPING_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/mm.h&gt;
macro_line|#include &lt;asm/scatterlist.h&gt;
macro_line|#include &lt;asm/io.h&gt;
r_extern
r_struct
id|bus_type
id|pci_bus_type
suffix:semicolon
multiline_comment|/* arch/sh/mm/consistent.c */
r_extern
r_void
op_star
id|consistent_alloc
c_func
(paren
r_int
id|gfp
comma
r_int
id|size
comma
id|dma_addr_t
op_star
id|handle
)paren
suffix:semicolon
r_extern
r_void
id|consistent_free
c_func
(paren
r_void
op_star
id|vaddr
comma
r_int
id|size
)paren
suffix:semicolon
r_extern
r_void
id|consistent_sync
c_func
(paren
r_void
op_star
id|vaddr
comma
r_int
id|size
comma
r_int
id|direction
)paren
suffix:semicolon
DECL|macro|dma_supported
mdefine_line|#define dma_supported(dev, mask)&t;(1)
DECL|function|dma_set_mask
r_static
r_inline
r_int
id|dma_set_mask
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|u64
id|mask
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|dev-&gt;dma_mask
op_logical_or
op_logical_neg
id|dma_supported
c_func
(paren
id|dev
comma
id|mask
)paren
)paren
r_return
op_minus
id|EIO
suffix:semicolon
op_star
id|dev-&gt;dma_mask
op_assign
id|mask
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|dma_alloc_coherent
r_static
r_inline
r_void
op_star
id|dma_alloc_coherent
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_int
id|size
comma
id|dma_addr_t
op_star
id|dma_handle
comma
r_int
id|flag
)paren
(brace
r_if
c_cond
(paren
id|sh_mv.mv_consistent_alloc
)paren
(brace
r_void
op_star
id|ret
suffix:semicolon
id|ret
op_assign
id|sh_mv
dot
id|mv_consistent_alloc
c_func
(paren
id|dev
comma
id|size
comma
id|dma_handle
comma
id|flag
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ret
op_ne
l_int|NULL
)paren
r_return
id|ret
suffix:semicolon
)brace
r_return
id|consistent_alloc
c_func
(paren
id|flag
comma
id|size
comma
id|dma_handle
)paren
suffix:semicolon
)brace
DECL|function|dma_free_coherent
r_static
r_inline
r_void
id|dma_free_coherent
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_int
id|size
comma
r_void
op_star
id|vaddr
comma
id|dma_addr_t
id|dma_handle
)paren
(brace
r_if
c_cond
(paren
id|sh_mv.mv_consistent_free
)paren
(brace
r_int
id|ret
suffix:semicolon
id|ret
op_assign
id|sh_mv
dot
id|mv_consistent_free
c_func
(paren
id|dev
comma
id|size
comma
id|vaddr
comma
id|dma_handle
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ret
op_eq
l_int|0
)paren
r_return
suffix:semicolon
)brace
id|consistent_free
c_func
(paren
id|vaddr
comma
id|size
)paren
suffix:semicolon
)brace
DECL|function|dma_cache_sync
r_static
r_inline
r_void
id|dma_cache_sync
c_func
(paren
r_void
op_star
id|vaddr
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|dir
)paren
(brace
id|consistent_sync
c_func
(paren
id|vaddr
comma
id|size
comma
(paren
r_int
)paren
id|dir
)paren
suffix:semicolon
)brace
DECL|function|dma_map_single
r_static
r_inline
id|dma_addr_t
id|dma_map_single
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_void
op_star
id|ptr
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|dir
)paren
(brace
macro_line|#if defined(CONFIG_PCI) &amp;&amp; !defined(CONFIG_SH_PCIDMA_NONCOHERENT)
r_if
c_cond
(paren
id|dev-&gt;bus
op_eq
op_amp
id|pci_bus_type
)paren
r_return
id|virt_to_bus
c_func
(paren
id|ptr
)paren
suffix:semicolon
macro_line|#endif
id|dma_cache_sync
c_func
(paren
id|ptr
comma
id|size
comma
id|dir
)paren
suffix:semicolon
r_return
id|virt_to_bus
c_func
(paren
id|ptr
)paren
suffix:semicolon
)brace
DECL|macro|dma_unmap_single
mdefine_line|#define dma_unmap_single(dev, addr, size, dir)&t;do { } while (0)
DECL|function|dma_map_sg
r_static
r_inline
r_int
id|dma_map_sg
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nents
comma
r_enum
id|dma_data_direction
id|dir
)paren
(brace
r_int
id|i
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|nents
suffix:semicolon
id|i
op_increment
)paren
(brace
macro_line|#if !defined(CONFIG_PCI) || defined(CONFIG_SH_PCIDMA_NONCOHERENT)
id|dma_cache_sync
c_func
(paren
id|page_address
c_func
(paren
id|sg
(braket
id|i
)braket
dot
id|page
)paren
op_plus
id|sg
(braket
id|i
)braket
dot
id|offset
comma
id|sg
(braket
id|i
)braket
dot
id|length
comma
id|dir
)paren
suffix:semicolon
macro_line|#endif
id|sg
(braket
id|i
)braket
dot
id|dma_address
op_assign
id|page_to_phys
c_func
(paren
id|sg
(braket
id|i
)braket
dot
id|page
)paren
op_plus
id|sg
(braket
id|i
)braket
dot
id|offset
suffix:semicolon
)brace
r_return
id|nents
suffix:semicolon
)brace
DECL|macro|dma_unmap_sg
mdefine_line|#define dma_unmap_sg(dev, sg, nents, dir)&t;do { } while (0)
DECL|function|dma_map_page
r_static
r_inline
id|dma_addr_t
id|dma_map_page
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|page
op_star
id|page
comma
r_int
r_int
id|offset
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|dir
)paren
(brace
r_return
id|dma_map_single
c_func
(paren
id|dev
comma
id|page_address
c_func
(paren
id|page
)paren
op_plus
id|offset
comma
id|size
comma
id|dir
)paren
suffix:semicolon
)brace
DECL|function|dma_unmap_page
r_static
r_inline
r_void
id|dma_unmap_page
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_address
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|dir
)paren
(brace
id|dma_unmap_single
c_func
(paren
id|dev
comma
id|dma_address
comma
id|size
comma
id|dir
)paren
suffix:semicolon
)brace
DECL|function|dma_sync_single
r_static
r_inline
r_void
id|dma_sync_single
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_handle
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|dir
)paren
(brace
macro_line|#if defined(CONFIG_PCI) &amp;&amp; !defined(CONFIG_SH_PCIDMA_NONCOHERENT)
r_if
c_cond
(paren
id|dev-&gt;bus
op_eq
op_amp
id|pci_bus_type
)paren
r_return
suffix:semicolon
macro_line|#endif
id|dma_cache_sync
c_func
(paren
id|bus_to_virt
c_func
(paren
id|dma_handle
)paren
comma
id|size
comma
id|dir
)paren
suffix:semicolon
)brace
DECL|function|dma_sync_single_range
r_static
r_inline
r_void
id|dma_sync_single_range
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_handle
comma
r_int
r_int
id|offset
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|dir
)paren
(brace
macro_line|#if defined(CONFIG_PCI) &amp;&amp; !defined(CONFIG_SH_PCIDMA_NONCOHERENT)
r_if
c_cond
(paren
id|dev-&gt;bus
op_eq
op_amp
id|pci_bus_type
)paren
r_return
suffix:semicolon
macro_line|#endif
id|dma_cache_sync
c_func
(paren
id|bus_to_virt
c_func
(paren
id|dma_handle
)paren
op_plus
id|offset
comma
id|size
comma
id|dir
)paren
suffix:semicolon
)brace
DECL|function|dma_sync_sg
r_static
r_inline
r_void
id|dma_sync_sg
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nelems
comma
r_enum
id|dma_data_direction
id|dir
)paren
(brace
r_int
id|i
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|nelems
suffix:semicolon
id|i
op_increment
)paren
(brace
macro_line|#if !defined(CONFIG_PCI) || defined(CONFIG_SH_PCIDMA_NONCOHERENT)
id|dma_cache_sync
c_func
(paren
id|page_address
c_func
(paren
id|sg
(braket
id|i
)braket
dot
id|page
)paren
op_plus
id|sg
(braket
id|i
)braket
dot
id|offset
comma
id|sg
(braket
id|i
)braket
dot
id|length
comma
id|dir
)paren
suffix:semicolon
macro_line|#endif
id|sg
(braket
id|i
)braket
dot
id|dma_address
op_assign
id|page_to_phys
c_func
(paren
id|sg
(braket
id|i
)braket
dot
id|page
)paren
op_plus
id|sg
(braket
id|i
)braket
dot
id|offset
suffix:semicolon
)brace
)brace
r_static
r_inline
r_void
id|dma_sync_single_for_cpu
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_handle
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|dir
)paren
id|__attribute__
(paren
(paren
id|alias
c_func
(paren
l_string|&quot;dma_sync_single&quot;
)paren
)paren
)paren
suffix:semicolon
r_static
r_inline
r_void
id|dma_sync_single_for_device
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
id|dma_addr_t
id|dma_handle
comma
r_int
id|size
comma
r_enum
id|dma_data_direction
id|dir
)paren
id|__attribute__
(paren
(paren
id|alias
c_func
(paren
l_string|&quot;dma_sync_single&quot;
)paren
)paren
)paren
suffix:semicolon
r_static
r_inline
r_void
id|dma_sync_sg_for_cpu
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nelems
comma
r_enum
id|dma_data_direction
id|dir
)paren
id|__attribute__
(paren
(paren
id|alias
c_func
(paren
l_string|&quot;dma_sync_sg&quot;
)paren
)paren
)paren
suffix:semicolon
r_static
r_inline
r_void
id|dma_sync_sg_for_device
c_func
(paren
r_struct
id|device
op_star
id|dev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|nelems
comma
r_enum
id|dma_data_direction
id|dir
)paren
id|__attribute__
(paren
(paren
id|alias
c_func
(paren
l_string|&quot;dma_sync_sg&quot;
)paren
)paren
)paren
suffix:semicolon
DECL|function|dma_get_cache_alignment
r_static
r_inline
r_int
id|dma_get_cache_alignment
c_func
(paren
r_void
)paren
(brace
multiline_comment|/*&n;&t; * Each processor family will define its own L1_CACHE_SHIFT,&n;&t; * L1_CACHE_BYTES wraps to this, so this is always safe.&n;&t; */
r_return
id|L1_CACHE_BYTES
suffix:semicolon
)brace
DECL|function|dma_mapping_error
r_static
r_inline
r_int
id|dma_mapping_error
c_func
(paren
id|dma_addr_t
id|dma_addr
)paren
(brace
r_return
id|dma_addr
op_eq
l_int|0
suffix:semicolon
)brace
macro_line|#endif /* __ASM_SH_DMA_MAPPING_H */
eof
