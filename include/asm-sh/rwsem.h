multiline_comment|/*&n; * include/asm-ppc/rwsem.h: R/W semaphores for SH using the stuff&n; * in lib/rwsem.c.&n; */
macro_line|#ifndef _ASM_SH_RWSEM_H
DECL|macro|_ASM_SH_RWSEM_H
mdefine_line|#define _ASM_SH_RWSEM_H
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/list.h&gt;
macro_line|#include &lt;linux/spinlock.h&gt;
macro_line|#include &lt;asm/atomic.h&gt;
macro_line|#include &lt;asm/system.h&gt;
multiline_comment|/*&n; * the semaphore definition&n; */
DECL|struct|rw_semaphore
r_struct
id|rw_semaphore
(brace
DECL|member|count
r_int
id|count
suffix:semicolon
DECL|macro|RWSEM_UNLOCKED_VALUE
mdefine_line|#define RWSEM_UNLOCKED_VALUE&t;&t;0x00000000
DECL|macro|RWSEM_ACTIVE_BIAS
mdefine_line|#define RWSEM_ACTIVE_BIAS&t;&t;0x00000001
DECL|macro|RWSEM_ACTIVE_MASK
mdefine_line|#define RWSEM_ACTIVE_MASK&t;&t;0x0000ffff
DECL|macro|RWSEM_WAITING_BIAS
mdefine_line|#define RWSEM_WAITING_BIAS&t;&t;(-0x00010000)
DECL|macro|RWSEM_ACTIVE_READ_BIAS
mdefine_line|#define RWSEM_ACTIVE_READ_BIAS&t;&t;RWSEM_ACTIVE_BIAS
DECL|macro|RWSEM_ACTIVE_WRITE_BIAS
mdefine_line|#define RWSEM_ACTIVE_WRITE_BIAS&t;&t;(RWSEM_WAITING_BIAS + RWSEM_ACTIVE_BIAS)
DECL|member|wait_lock
id|spinlock_t
id|wait_lock
suffix:semicolon
DECL|member|wait_list
r_struct
id|list_head
id|wait_list
suffix:semicolon
macro_line|#if RWSEM_DEBUG
DECL|member|debug
r_int
id|debug
suffix:semicolon
macro_line|#endif
)brace
suffix:semicolon
multiline_comment|/*&n; * initialisation&n; */
macro_line|#if RWSEM_DEBUG
DECL|macro|__RWSEM_DEBUG_INIT
mdefine_line|#define __RWSEM_DEBUG_INIT      , 0
macro_line|#else
DECL|macro|__RWSEM_DEBUG_INIT
mdefine_line|#define __RWSEM_DEBUG_INIT&t;/* */
macro_line|#endif
DECL|macro|__RWSEM_INITIALIZER
mdefine_line|#define __RWSEM_INITIALIZER(name) &bslash;&n;&t;{ RWSEM_UNLOCKED_VALUE, SPIN_LOCK_UNLOCKED, &bslash;&n;&t;  LIST_HEAD_INIT((name).wait_list) &bslash;&n;&t;  __RWSEM_DEBUG_INIT }
DECL|macro|DECLARE_RWSEM
mdefine_line|#define DECLARE_RWSEM(name)&t;&t;&bslash;&n;&t;struct rw_semaphore name = __RWSEM_INITIALIZER(name)
r_extern
r_struct
id|rw_semaphore
op_star
id|rwsem_down_read_failed
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
suffix:semicolon
r_extern
r_struct
id|rw_semaphore
op_star
id|rwsem_down_write_failed
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
suffix:semicolon
r_extern
r_struct
id|rw_semaphore
op_star
id|rwsem_wake
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
suffix:semicolon
r_extern
r_struct
id|rw_semaphore
op_star
id|rwsem_downgrade_wake
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
suffix:semicolon
DECL|function|init_rwsem
r_static
r_inline
r_void
id|init_rwsem
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|sem-&gt;count
op_assign
id|RWSEM_UNLOCKED_VALUE
suffix:semicolon
id|spin_lock_init
c_func
(paren
op_amp
id|sem-&gt;wait_lock
)paren
suffix:semicolon
id|INIT_LIST_HEAD
c_func
(paren
op_amp
id|sem-&gt;wait_list
)paren
suffix:semicolon
macro_line|#if RWSEM_DEBUG
id|sem-&gt;debug
op_assign
l_int|0
suffix:semicolon
macro_line|#endif
)brace
multiline_comment|/*&n; * lock for reading&n; */
DECL|function|__down_read
r_static
r_inline
r_void
id|__down_read
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_if
c_cond
(paren
id|atomic_inc_return
c_func
(paren
(paren
id|atomic_t
op_star
)paren
(paren
op_amp
id|sem-&gt;count
)paren
)paren
OG
l_int|0
)paren
id|smp_wmb
c_func
(paren
)paren
suffix:semicolon
r_else
id|rwsem_down_read_failed
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
DECL|function|__down_read_trylock
r_static
r_inline
r_int
id|__down_read_trylock
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|tmp
suffix:semicolon
r_while
c_loop
(paren
(paren
id|tmp
op_assign
id|sem-&gt;count
)paren
op_ge
l_int|0
)paren
(brace
r_if
c_cond
(paren
id|tmp
op_eq
id|cmpxchg
c_func
(paren
op_amp
id|sem-&gt;count
comma
id|tmp
comma
id|tmp
op_plus
id|RWSEM_ACTIVE_READ_BIAS
)paren
)paren
(brace
id|smp_wmb
c_func
(paren
)paren
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
)brace
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * lock for writing&n; */
DECL|function|__down_write
r_static
r_inline
r_void
id|__down_write
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|tmp
suffix:semicolon
id|tmp
op_assign
id|atomic_add_return
c_func
(paren
id|RWSEM_ACTIVE_WRITE_BIAS
comma
(paren
id|atomic_t
op_star
)paren
(paren
op_amp
id|sem-&gt;count
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_eq
id|RWSEM_ACTIVE_WRITE_BIAS
)paren
id|smp_wmb
c_func
(paren
)paren
suffix:semicolon
r_else
id|rwsem_down_write_failed
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
DECL|function|__down_write_trylock
r_static
r_inline
r_int
id|__down_write_trylock
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|tmp
suffix:semicolon
id|tmp
op_assign
id|cmpxchg
c_func
(paren
op_amp
id|sem-&gt;count
comma
id|RWSEM_UNLOCKED_VALUE
comma
id|RWSEM_ACTIVE_WRITE_BIAS
)paren
suffix:semicolon
id|smp_wmb
c_func
(paren
)paren
suffix:semicolon
r_return
id|tmp
op_eq
id|RWSEM_UNLOCKED_VALUE
suffix:semicolon
)brace
multiline_comment|/*&n; * unlock after reading&n; */
DECL|function|__up_read
r_static
r_inline
r_void
id|__up_read
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|tmp
suffix:semicolon
id|smp_wmb
c_func
(paren
)paren
suffix:semicolon
id|tmp
op_assign
id|atomic_dec_return
c_func
(paren
(paren
id|atomic_t
op_star
)paren
(paren
op_amp
id|sem-&gt;count
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|tmp
OL
op_minus
l_int|1
op_logical_and
(paren
id|tmp
op_amp
id|RWSEM_ACTIVE_MASK
)paren
op_eq
l_int|0
)paren
id|rwsem_wake
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * unlock after writing&n; */
DECL|function|__up_write
r_static
r_inline
r_void
id|__up_write
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|smp_wmb
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|atomic_sub_return
c_func
(paren
id|RWSEM_ACTIVE_WRITE_BIAS
comma
(paren
id|atomic_t
op_star
)paren
(paren
op_amp
id|sem-&gt;count
)paren
)paren
OL
l_int|0
)paren
id|rwsem_wake
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * implement atomic add functionality&n; */
DECL|function|rwsem_atomic_add
r_static
r_inline
r_void
id|rwsem_atomic_add
c_func
(paren
r_int
id|delta
comma
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|atomic_add
c_func
(paren
id|delta
comma
(paren
id|atomic_t
op_star
)paren
(paren
op_amp
id|sem-&gt;count
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * downgrade write lock to read lock&n; */
DECL|function|__downgrade_write
r_static
r_inline
r_void
id|__downgrade_write
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|tmp
suffix:semicolon
id|smp_wmb
c_func
(paren
)paren
suffix:semicolon
id|tmp
op_assign
id|atomic_add_return
c_func
(paren
op_minus
id|RWSEM_WAITING_BIAS
comma
(paren
id|atomic_t
op_star
)paren
(paren
op_amp
id|sem-&gt;count
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|tmp
OL
l_int|0
)paren
id|rwsem_downgrade_wake
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * implement exchange and add functionality&n; */
DECL|function|rwsem_atomic_update
r_static
r_inline
r_int
id|rwsem_atomic_update
c_func
(paren
r_int
id|delta
comma
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|smp_mb
c_func
(paren
)paren
suffix:semicolon
r_return
id|atomic_add_return
c_func
(paren
id|delta
comma
(paren
id|atomic_t
op_star
)paren
(paren
op_amp
id|sem-&gt;count
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _ASM_SH_RWSEM_H */
eof
