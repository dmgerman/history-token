multiline_comment|/*&n; * include/asm-m32r/flat.h&n; *&n; * uClinux flat-format executables&n; *&n; * Copyright (C) 2004  Kazuhiro Inaoka&n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive for&n; * more details.&n; */
macro_line|#ifndef __ASM_M32R_FLAT_H
DECL|macro|__ASM_M32R_FLAT_H
mdefine_line|#define __ASM_M32R_FLAT_H
DECL|macro|flat_stack_align
mdefine_line|#define&t;flat_stack_align(sp)&t;&t;(*sp += (*sp &amp; 3 ? (4 - (*sp &amp; 3)): 0))
DECL|macro|flat_argvp_envp_on_stack
mdefine_line|#define&t;flat_argvp_envp_on_stack()&t;&t;0
DECL|macro|flat_old_ram_flag
mdefine_line|#define&t;flat_old_ram_flag(flags)&t;&t;(flags)
DECL|macro|flat_reloc_valid
mdefine_line|#define&t;flat_reloc_valid(reloc, size)&t;&t;&bslash;&n;&t;(((reloc) - textlen_for_m32r_lo16_data) &lt;= (size))
DECL|macro|flat_get_addr_from_rp
mdefine_line|#define flat_get_addr_from_rp(rp, relval, flags) &bslash;&n;&t;m32r_flat_get_addr_from_rp(rp, relval, (text_len) )
DECL|macro|flat_put_addr_at_rp
mdefine_line|#define flat_put_addr_at_rp(rp, addr, relval) &bslash;&n;&t;m32r_flat_put_addr_at_rp(rp, addr, relval)
multiline_comment|/* Convert a relocation entry into an address.  */
r_static
r_inline
r_int
r_int
DECL|function|flat_get_relocate_addr
id|flat_get_relocate_addr
(paren
r_int
r_int
id|relval
)paren
(brace
r_return
id|relval
op_amp
l_int|0x00ffffff
suffix:semicolon
multiline_comment|/* Mask out top 8-bits */
)brace
DECL|macro|flat_m32r_get_reloc_type
mdefine_line|#define&t;flat_m32r_get_reloc_type(relval)&t;((relval) &gt;&gt; 24)
DECL|macro|M32R_SETH_OPCODE
mdefine_line|#define M32R_SETH_OPCODE&t;0xd0c00000 /* SETH instruction code */
DECL|macro|FLAT_M32R_32
mdefine_line|#define FLAT_M32R_32&t;&t;0x00&t;/* 32bits reloc */
DECL|macro|FLAT_M32R_24
mdefine_line|#define FLAT_M32R_24&t;&t;0x01&t;/* unsigned 24bits reloc */
DECL|macro|FLAT_M32R_16
mdefine_line|#define FLAT_M32R_16&t;&t;0x02&t;/* 16bits reloc */
DECL|macro|FLAT_M32R_LO16
mdefine_line|#define FLAT_M32R_LO16&t;&t;0x03&t;/* signed low 16bits reloc (low()) */
DECL|macro|FLAT_M32R_LO16_DATA
mdefine_line|#define FLAT_M32R_LO16_DATA&t;0x04&t;/* signed low 16bits reloc (low())&n;&t;&t;&t;&t;&t;   for a symbol in .data section */
multiline_comment|/* High 16bits of an address used&n;&t;&t;&t;&t;&t;   when the lower 16bbits are treated&n;&t;&t;&t;&t;&t;   as unsigned.&n;                                           To create SETH instruction only.&n;&t;&t;&t;&t;&t;   0x1X: X means a number of register.&n;&t;&t;&t;&t;&t;   0x10 - 0x3F are reserved. */
DECL|macro|FLAT_M32R_HI16_ULO
mdefine_line|#define FLAT_M32R_HI16_ULO&t;0x10&t;/* reloc for SETH Rn,#high(imm16) */
multiline_comment|/* High 16bits of an address used&n;&t;&t;&t;&t;&t;   when the lower 16bbits are treated&n;&t;&t;&t;&t;&t;   as signed.&n;                                           To create SETH instruction only.&n;&t;&t;&t;&t;&t;   0x2X: X means a number of register.&n;&t;&t;&t;&t;&t;   0x20 - 0x4F are reserved. */
DECL|macro|FLAT_M32R_HI16_SLO
mdefine_line|#define FLAT_M32R_HI16_SLO&t;0x20&t;/* reloc for SETH Rn,#shigh(imm16) */
DECL|variable|textlen_for_m32r_lo16_data
r_static
r_int
r_int
id|textlen_for_m32r_lo16_data
op_assign
l_int|0
suffix:semicolon
DECL|function|m32r_flat_get_addr_from_rp
r_static
r_inline
r_int
r_int
id|m32r_flat_get_addr_from_rp
(paren
r_int
r_int
op_star
id|rp
comma
r_int
r_int
id|relval
comma
r_int
r_int
id|textlen
)paren
(brace
r_int
r_int
id|reloc
op_assign
id|flat_m32r_get_reloc_type
(paren
id|relval
)paren
suffix:semicolon
id|textlen_for_m32r_lo16_data
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|reloc
op_amp
l_int|0xf0
)paren
(brace
r_int
r_int
id|addr
op_assign
id|htonl
c_func
(paren
op_star
id|rp
)paren
suffix:semicolon
r_switch
c_cond
(paren
id|reloc
op_amp
l_int|0xf0
)paren
(brace
r_case
id|FLAT_M32R_HI16_ULO
suffix:colon
r_case
id|FLAT_M32R_HI16_SLO
suffix:colon
r_if
c_cond
(paren
id|addr
op_eq
l_int|0
)paren
(brace
multiline_comment|/* put &quot;seth Rn,#0x0&quot; instead of 0 (addr). */
op_star
id|rp
op_assign
(paren
id|M32R_SETH_OPCODE
op_or
(paren
(paren
id|reloc
op_amp
l_int|0x0f
)paren
op_lshift
l_int|24
)paren
)paren
suffix:semicolon
)brace
r_return
id|addr
suffix:semicolon
r_default
suffix:colon
r_break
suffix:semicolon
)brace
)brace
r_else
(brace
r_switch
c_cond
(paren
id|reloc
)paren
(brace
r_case
id|FLAT_M32R_LO16
suffix:colon
r_return
id|htonl
c_func
(paren
op_star
id|rp
)paren
op_amp
l_int|0xFFFF
suffix:semicolon
r_case
id|FLAT_M32R_LO16_DATA
suffix:colon
multiline_comment|/* FIXME: The return value will decrease by textlen&n;&t;&t;&t;   at m32r_flat_put_addr_at_rp () */
id|textlen_for_m32r_lo16_data
op_assign
id|textlen
suffix:semicolon
r_return
(paren
id|htonl
c_func
(paren
op_star
id|rp
)paren
op_amp
l_int|0xFFFF
)paren
op_plus
id|textlen
suffix:semicolon
r_case
id|FLAT_M32R_16
suffix:colon
r_return
id|htons
c_func
(paren
op_star
(paren
r_int
r_int
op_star
)paren
id|rp
)paren
op_amp
l_int|0xFFFF
suffix:semicolon
r_case
id|FLAT_M32R_24
suffix:colon
r_return
id|htonl
c_func
(paren
op_star
id|rp
)paren
op_amp
l_int|0xFFFFFF
suffix:semicolon
r_case
id|FLAT_M32R_32
suffix:colon
r_return
id|htonl
c_func
(paren
op_star
id|rp
)paren
suffix:semicolon
r_default
suffix:colon
r_break
suffix:semicolon
)brace
)brace
r_return
op_complement
l_int|0
suffix:semicolon
multiline_comment|/* bogus value */
)brace
DECL|function|m32r_flat_put_addr_at_rp
r_static
r_inline
r_void
id|m32r_flat_put_addr_at_rp
(paren
r_int
r_int
op_star
id|rp
comma
r_int
r_int
id|addr
comma
r_int
r_int
id|relval
)paren
(brace
r_int
r_int
id|reloc
op_assign
id|flat_m32r_get_reloc_type
(paren
id|relval
)paren
suffix:semicolon
r_if
c_cond
(paren
id|reloc
op_amp
l_int|0xf0
)paren
(brace
r_int
r_int
id|Rn
op_assign
id|reloc
op_amp
l_int|0x0f
suffix:semicolon
multiline_comment|/* get a number of register */
id|Rn
op_lshift_assign
l_int|24
suffix:semicolon
multiline_comment|/* 0x0R000000 */
id|reloc
op_and_assign
l_int|0xf0
suffix:semicolon
r_switch
c_cond
(paren
id|reloc
)paren
(brace
r_case
id|FLAT_M32R_HI16_ULO
suffix:colon
multiline_comment|/* To create SETH Rn,#high(imm16) */
op_star
id|rp
op_assign
(paren
id|M32R_SETH_OPCODE
op_or
id|Rn
op_or
(paren
(paren
id|addr
op_rshift
l_int|16
)paren
op_amp
l_int|0xFFFF
)paren
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|FLAT_M32R_HI16_SLO
suffix:colon
multiline_comment|/* To create SETH Rn,#shigh(imm16) */
op_star
id|rp
op_assign
(paren
id|M32R_SETH_OPCODE
op_or
id|Rn
op_or
(paren
(paren
(paren
id|addr
op_rshift
l_int|16
)paren
op_plus
(paren
(paren
id|addr
op_amp
l_int|0x8000
)paren
ques
c_cond
l_int|1
suffix:colon
l_int|0
)paren
)paren
op_amp
l_int|0xFFFF
)paren
)paren
suffix:semicolon
r_break
suffix:semicolon
)brace
)brace
r_else
(brace
r_switch
c_cond
(paren
id|reloc
)paren
(brace
r_case
id|FLAT_M32R_LO16_DATA
suffix:colon
id|addr
op_sub_assign
id|textlen_for_m32r_lo16_data
suffix:semicolon
id|textlen_for_m32r_lo16_data
op_assign
l_int|0
suffix:semicolon
r_case
id|FLAT_M32R_LO16
suffix:colon
op_star
id|rp
op_assign
(paren
id|htonl
c_func
(paren
op_star
id|rp
)paren
op_amp
l_int|0xFFFF0000
)paren
op_or
(paren
id|addr
op_amp
l_int|0xFFFF
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|FLAT_M32R_16
suffix:colon
op_star
(paren
r_int
r_int
op_star
)paren
id|rp
op_assign
id|addr
op_amp
l_int|0xFFFF
suffix:semicolon
r_break
suffix:semicolon
r_case
id|FLAT_M32R_24
suffix:colon
op_star
id|rp
op_assign
(paren
id|htonl
c_func
(paren
op_star
id|rp
)paren
op_amp
l_int|0xFF000000
)paren
op_or
(paren
id|addr
op_amp
l_int|0xFFFFFF
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|FLAT_M32R_32
suffix:colon
op_star
id|rp
op_assign
id|addr
suffix:semicolon
r_break
suffix:semicolon
)brace
)brace
)brace
macro_line|#endif /* __ASM_M32R_FLAT_H */
eof
