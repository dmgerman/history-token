macro_line|#ifndef _ASM_M32R_IO_H
DECL|macro|_ASM_M32R_IO_H
mdefine_line|#define _ASM_M32R_IO_H
multiline_comment|/* $Id$ */
macro_line|#include &lt;asm/page.h&gt;  /* __va */
macro_line|#ifdef __KERNEL__
DECL|macro|IO_SPACE_LIMIT
mdefine_line|#define IO_SPACE_LIMIT  0xFFFFFFFF
multiline_comment|/**&n; *&t;virt_to_phys&t;-&t;map virtual addresses to physical&n; *&t;@address: address to remap&n; *&n; *&t;The returned physical address is the physical (CPU) mapping for&n; *&t;the memory address given. It is only valid to use this function on&n; *&t;addresses directly mapped or allocated via kmalloc.&n; *&n; *&t;This function does not give bus mappings for DMA transfers. In&n; *&t;almost all conceivable cases a device driver should not be using&n; *&t;this function&n; */
DECL|function|virt_to_phys
r_static
id|__inline__
r_int
r_int
id|virt_to_phys
c_func
(paren
r_volatile
r_void
op_star
id|address
)paren
(brace
r_return
id|__pa
c_func
(paren
id|address
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; *&t;phys_to_virt&t;-&t;map physical address to virtual&n; *&t;@address: address to remap&n; *&n; *&t;The returned virtual address is a current CPU mapping for&n; *&t;the memory address given. It is only valid to use this function on&n; *&t;addresses that have a kernel mapping&n; *&n; *&t;This function does not handle bus mappings for DMA transfers. In&n; *&t;almost all conceivable cases a device driver should not be using&n; *&t;this function&n; */
DECL|function|phys_to_virt
r_static
id|__inline__
r_void
op_star
id|phys_to_virt
c_func
(paren
r_int
r_int
id|address
)paren
(brace
r_return
id|__va
c_func
(paren
id|address
)paren
suffix:semicolon
)brace
r_extern
r_void
op_star
id|__ioremap
c_func
(paren
r_int
r_int
id|offset
comma
r_int
r_int
id|size
comma
r_int
r_int
id|flags
)paren
suffix:semicolon
multiline_comment|/**&n; *&t;ioremap&t;&t;-&t;map bus memory into CPU space&n; *&t;@offset:&t;bus address of the memory&n; *&t;@size:&t;&t;size of the resource to map&n; *&n; *&t;ioremap performs a platform specific sequence of operations to&n; *&t;make bus memory CPU accessible via the readb/readw/readl/writeb/&n; *&t;writew/writel functions and the other mmio helpers. The returned&n; *&t;address is not guaranteed to be usable directly as a virtual&n; *&t;address.&n; */
DECL|function|ioremap
r_static
id|__inline__
r_void
op_star
id|ioremap
c_func
(paren
r_int
r_int
id|offset
comma
r_int
r_int
id|size
)paren
(brace
r_return
id|__ioremap
c_func
(paren
id|offset
comma
id|size
comma
l_int|0
)paren
suffix:semicolon
)brace
r_extern
r_void
id|iounmap
c_func
(paren
r_void
op_star
id|addr
)paren
suffix:semicolon
DECL|macro|ioremap_nocache
mdefine_line|#define ioremap_nocache(off,size) ioremap(off,size)
multiline_comment|/*&n; * IO bus memory addresses are also 1:1 with the physical address&n; */
DECL|macro|page_to_phys
mdefine_line|#define page_to_phys(page)&t;(page_to_pfn(page) &lt;&lt; PAGE_SHIFT)
DECL|macro|page_to_bus
mdefine_line|#define page_to_bus&t;page_to_phys
DECL|macro|virt_to_bus
mdefine_line|#define virt_to_bus&t;virt_to_phys
r_extern
r_int
r_char
id|_inb
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
r_int
id|_inw
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
r_int
id|_inl
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
r_char
id|_inb_p
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
r_int
id|_inw_p
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
r_int
id|_inl_p
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|_outb
c_func
(paren
r_int
r_char
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|_outw
c_func
(paren
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|_outl
c_func
(paren
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|_outb_p
c_func
(paren
r_int
r_char
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|_outw_p
c_func
(paren
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|_outl_p
c_func
(paren
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|_insb
c_func
(paren
r_int
r_int
comma
r_void
op_star
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|_insw
c_func
(paren
r_int
r_int
comma
r_void
op_star
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|_insl
c_func
(paren
r_int
r_int
comma
r_void
op_star
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|_outsb
c_func
(paren
r_int
r_int
comma
r_const
r_void
op_star
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|_outsw
c_func
(paren
r_int
r_int
comma
r_const
r_void
op_star
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|_outsl
c_func
(paren
r_int
r_int
comma
r_const
r_void
op_star
comma
r_int
r_int
)paren
suffix:semicolon
DECL|function|_readb
r_static
r_inline
r_int
r_char
id|_readb
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
)brace
DECL|function|_readw
r_static
r_inline
r_int
r_int
id|_readw
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
)brace
DECL|function|_readl
r_static
r_inline
r_int
r_int
id|_readl
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
)brace
DECL|function|_writeb
r_static
r_inline
r_void
id|_writeb
c_func
(paren
r_int
r_char
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
r_int
r_char
op_star
)paren
id|addr
op_assign
id|b
suffix:semicolon
)brace
DECL|function|_writew
r_static
r_inline
r_void
id|_writew
c_func
(paren
r_int
r_int
id|w
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
op_assign
id|w
suffix:semicolon
)brace
DECL|function|_writel
r_static
r_inline
r_void
id|_writel
c_func
(paren
r_int
r_int
id|l
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
op_assign
id|l
suffix:semicolon
)brace
DECL|macro|inb
mdefine_line|#define inb     _inb
DECL|macro|inw
mdefine_line|#define inw     _inw
DECL|macro|inl
mdefine_line|#define inl     _inl
DECL|macro|outb
mdefine_line|#define outb    _outb
DECL|macro|outw
mdefine_line|#define outw    _outw
DECL|macro|outl
mdefine_line|#define outl    _outl
DECL|macro|inb_p
mdefine_line|#define inb_p   _inb_p
DECL|macro|inw_p
mdefine_line|#define inw_p   _inw_p
DECL|macro|inl_p
mdefine_line|#define inl_p   _inl_p
DECL|macro|outb_p
mdefine_line|#define outb_p  _outb_p
DECL|macro|outw_p
mdefine_line|#define outw_p  _outw_p
DECL|macro|outl_p
mdefine_line|#define outl_p  _outl_p
DECL|macro|insb
mdefine_line|#define insb    _insb
DECL|macro|insw
mdefine_line|#define insw    _insw
DECL|macro|insl
mdefine_line|#define insl    _insl
DECL|macro|outsb
mdefine_line|#define outsb   _outsb
DECL|macro|outsw
mdefine_line|#define outsw   _outsw
DECL|macro|outsl
mdefine_line|#define outsl   _outsl
DECL|macro|readb
mdefine_line|#define readb(addr)   _readb((unsigned long)(addr))
DECL|macro|readw
mdefine_line|#define readw(addr)   _readw((unsigned long)(addr))
DECL|macro|readl
mdefine_line|#define readl(addr)   _readl((unsigned long)(addr))
DECL|macro|__raw_readb
mdefine_line|#define __raw_readb readb
DECL|macro|__raw_readw
mdefine_line|#define __raw_readw readw
DECL|macro|__raw_readl
mdefine_line|#define __raw_readl readl
DECL|macro|writeb
mdefine_line|#define writeb(val, addr)  _writeb((val), (unsigned long)(addr))
DECL|macro|writew
mdefine_line|#define writew(val, addr)  _writew((val), (unsigned long)(addr))
DECL|macro|writel
mdefine_line|#define writel(val, addr)  _writel((val), (unsigned long)(addr))
DECL|macro|__raw_writeb
mdefine_line|#define __raw_writeb writeb
DECL|macro|__raw_writew
mdefine_line|#define __raw_writew writew
DECL|macro|__raw_writel
mdefine_line|#define __raw_writel writel
DECL|macro|flush_write_buffers
mdefine_line|#define flush_write_buffers() do { } while (0)  /* M32R_FIXME */
multiline_comment|/**&n; *&t;isa_check_signature&t;&t;-&t;find BIOS signatures&n; *&t;@io_addr: mmio address to check&n; *&t;@signature:  signature block&n; *&t;@length: length of signature&n; *&n; *&t;Perform a signature comparison with the ISA mmio address io_addr.&n; *&t;Returns 1 on a match.&n; *&n; *&t;This function is deprecated. New drivers should use ioremap and&n; *&t;check_signature.&n; */
DECL|function|isa_check_signature
r_static
r_inline
r_int
id|isa_check_signature
c_func
(paren
r_int
r_int
id|io_addr
comma
r_const
r_int
r_char
op_star
id|signature
comma
r_int
id|length
)paren
(brace
r_int
id|retval
op_assign
l_int|0
suffix:semicolon
macro_line|#if 0
id|printk
c_func
(paren
l_string|&quot;isa_check_signature&bslash;n&quot;
)paren
suffix:semicolon
r_do
(brace
r_if
c_cond
(paren
id|isa_readb
c_func
(paren
id|io_addr
)paren
op_ne
op_star
id|signature
)paren
r_goto
id|out
suffix:semicolon
id|io_addr
op_increment
suffix:semicolon
id|signature
op_increment
suffix:semicolon
id|length
op_decrement
suffix:semicolon
)brace
r_while
c_loop
(paren
id|length
)paren
suffix:semicolon
id|retval
op_assign
l_int|1
suffix:semicolon
id|out
suffix:colon
macro_line|#endif
r_return
id|retval
suffix:semicolon
)brace
DECL|macro|memset_io
mdefine_line|#define memset_io(a, b, c)&t;memset((void *)(a), (b), (c))
DECL|macro|memcpy_fromio
mdefine_line|#define memcpy_fromio(a, b, c)&t;memcpy((a), (void *)(b), (c))
DECL|macro|memcpy_toio
mdefine_line|#define memcpy_toio(a, b, c)&t;memcpy((void *)(a), (b), (c))
macro_line|#endif  /* __KERNEL__ */
macro_line|#endif  /* _ASM_M32R_IO_H */
eof
