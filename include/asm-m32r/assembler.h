macro_line|#ifndef _ASM_M32R_ASSEMBLER_H
DECL|macro|_ASM_M32R_ASSEMBLER_H
mdefine_line|#define _ASM_M32R_ASSEMBLER_H
multiline_comment|/*&n; * linux/asm-m32r/assembler.h&n; *&n; * Copyright (C) 2004  Hirokazu Takata &lt;takata at linux-m32r.org&gt;&n; *&n; * This file contains M32R architecture specific macro definitions.&n; */
macro_line|#include &lt;linux/config.h&gt;
macro_line|#ifndef __STR
macro_line|#ifdef __ASSEMBLY__
DECL|macro|__STR
mdefine_line|#define __STR(x) x
macro_line|#else
DECL|macro|__STR
mdefine_line|#define __STR(x) #x
macro_line|#endif
macro_line|#endif /* __STR */
macro_line|#ifdef CONFIG_SMP
DECL|macro|M32R_LOCK
mdefine_line|#define M32R_LOCK&t;__STR(lock)
DECL|macro|M32R_UNLOCK
mdefine_line|#define M32R_UNLOCK&t;__STR(unlock)
macro_line|#else
DECL|macro|M32R_LOCK
mdefine_line|#define M32R_LOCK&t;__STR(ld)
DECL|macro|M32R_UNLOCK
mdefine_line|#define M32R_UNLOCK&t;__STR(st)
macro_line|#endif
macro_line|#ifdef __ASSEMBLY__
DECL|macro|ENTRY
macro_line|#undef ENTRY
DECL|macro|ENTRY
mdefine_line|#define ENTRY(name) ENTRY_M name
dot
id|macro
id|ENTRY_M
id|name
dot
id|global
"&bslash;"
id|name
id|ALIGN
"&bslash;"
id|name
suffix:colon
dot
id|endm
macro_line|#endif
multiline_comment|/**&n; * LDIMM - load immediate value&n; * STI - enable interruption&n; * CLI - disable interruption&n; */
macro_line|#ifdef __ASSEMBLY__
DECL|macro|LDIMM
mdefine_line|#define LDIMM(reg,x) LDIMM reg x
dot
id|macro
id|LDIMM
id|reg
id|x
id|seth
"&bslash;"
id|reg
comma
macro_line|#high(&bslash;x)
DECL|variable|reg
DECL|variable|reg
id|or3
"&bslash;"
id|reg
comma
"&bslash;"
id|reg
comma
macro_line|#low(&bslash;x)
dot
id|endm
macro_line|#if !defined(CONFIG_CHIP_M32102)
DECL|macro|STI
mdefine_line|#define STI(reg) STI_M reg
dot
id|macro
id|STI_M
id|reg
id|setpsw
macro_line|#0x40&t;    -&gt;&t;nop
suffix:semicolon
id|WORKAROUND
suffix:colon
l_string|&quot;-&gt; nop&quot;
id|is
id|a
id|workaround
r_for
c_loop
id|the
id|M32700
c_func
(paren
id|TS1
)paren
dot
dot
id|endm
DECL|macro|CLI
mdefine_line|#define CLI(reg) CLI_M reg
dot
id|macro
id|CLI_M
id|reg
id|clrpsw
macro_line|#0x40&t;    -&gt;&t;nop
suffix:semicolon
id|WORKAROUND
suffix:colon
l_string|&quot;-&gt; nop&quot;
id|is
id|a
id|workaround
r_for
c_loop
id|the
id|M32700
c_func
(paren
id|TS1
)paren
dot
dot
id|endm
macro_line|#else&t;/* CONFIG_CHIP_M32102 */
mdefine_line|#define STI(reg) STI_M reg
dot
id|macro
id|STI_M
id|reg
id|mvfc
"&bslash;"
id|reg
comma
id|psw
id|or3
"&bslash;"
id|reg
comma
"&bslash;"
id|reg
comma
macro_line|#0x0040
id|mvtc
"&bslash;"
id|reg
comma
id|psw
dot
id|endm
mdefine_line|#define CLI(reg) CLI_M reg
dot
id|macro
id|CLI_M
id|reg
id|mvfc
"&bslash;"
id|reg
comma
id|psw
id|and3
"&bslash;"
id|reg
comma
"&bslash;"
id|reg
comma
macro_line|#0xffbf
id|mvtc
"&bslash;"
id|reg
comma
id|psw
dot
id|endm
macro_line|#endif&t;/* CONFIG_CHIP_M32102 */
dot
id|macro
id|SAVE_ALL
id|push
id|r0
suffix:semicolon
id|orig_r0
DECL|variable|sp
id|push
id|sp
suffix:semicolon
id|spi
(paren
id|r15
)paren
id|push
id|lr
suffix:semicolon
id|r14
id|push
id|r13
DECL|variable|r13
DECL|variable|cr3
id|mvfc
id|r13
comma
id|cr3
suffix:semicolon
id|spu
id|push
id|r13
DECL|variable|r13
id|mvfc
id|r13
comma
id|bbpc
id|push
id|r13
DECL|variable|r13
id|mvfc
id|r13
comma
id|bbpsw
id|push
id|r13
DECL|variable|r13
id|mvfc
id|r13
comma
id|bpc
id|push
id|r13
DECL|variable|r13
id|mvfc
id|r13
comma
id|psw
id|push
id|r13
macro_line|#if defined(CONFIG_ISA_M32R2) &amp;&amp; defined(CONFIG_ISA_DSP_LEVEL2)
DECL|variable|r13
id|mvfaclo
id|r13
comma
id|a1
id|push
id|r13
DECL|variable|r13
id|mvfachi
id|r13
comma
id|a1
id|push
id|r13
DECL|variable|r13
id|mvfaclo
id|r13
comma
id|a0
id|push
id|r13
DECL|variable|r13
id|mvfachi
id|r13
comma
id|a0
id|push
id|r13
macro_line|#elif defined(CONFIG_ISA_M32R2) || defined(CONFIG_ISA_M32R)
id|mvfaclo
id|r13
id|push
id|r13
id|mvfachi
id|r13
id|push
id|r13
macro_line|#else
macro_line|#error unknown isa configuration
macro_line|#endif
DECL|variable|r13
id|ldi
id|r13
comma
macro_line|#-1
id|push
id|r13
suffix:semicolon
id|syscall_nr
(paren
r_default
suffix:colon
op_minus
l_int|1
)paren
id|push
id|r12
id|push
id|r11
id|push
id|r10
id|push
id|r9
id|push
id|r8
id|push
id|r7
id|push
id|r3
id|push
id|r2
id|push
id|r1
id|push
id|r0
DECL|variable|sp
id|addi
id|sp
comma
macro_line|#-4&t;&t;; room for implicit pt_regs parameter
id|push
id|r6
id|push
id|r5
id|push
id|r4
dot
id|endm
dot
id|macro
id|RESTORE_ALL
id|pop
id|r4
id|pop
id|r5
id|pop
id|r6
id|addi
id|sp
comma
macro_line|#4
id|pop
id|r0
id|pop
id|r1
id|pop
id|r2
id|pop
id|r3
id|pop
id|r7
id|pop
id|r8
id|pop
id|r9
id|pop
id|r10
id|pop
id|r11
id|pop
id|r12
DECL|variable|r15
id|addi
id|r15
comma
macro_line|#4&t;&t;; Skip syscall number
macro_line|#if defined(CONFIG_ISA_M32R2) &amp;&amp; defined(CONFIG_ISA_DSP_LEVEL2)
id|pop
id|r13
DECL|variable|r13
id|mvtachi
id|r13
comma
id|a0
id|pop
id|r13
DECL|variable|r13
id|mvtaclo
id|r13
comma
id|a0
id|pop
id|r13
DECL|variable|r13
id|mvtachi
id|r13
comma
id|a1
id|pop
id|r13
DECL|variable|r13
id|mvtaclo
id|r13
comma
id|a1
macro_line|#elif defined(CONFIG_ISA_M32R2) || defined(CONFIG_ISA_M32R)
id|pop
id|r13
id|mvtachi
id|r13
id|pop
id|r13
id|mvtaclo
id|r13
macro_line|#else
macro_line|#error unknown isa configuration
macro_line|#endif
id|pop
id|r14
DECL|variable|r14
id|mvtc
id|r14
comma
id|psw
id|pop
id|r14
DECL|variable|r14
id|mvtc
id|r14
comma
id|bpc
DECL|variable|sp
DECL|variable|bbpsw
id|addi
id|sp
comma
macro_line|#8&t;&t;; Skip bbpsw, bbpc
id|pop
id|r14
DECL|variable|r14
DECL|variable|cr3
id|mvtc
id|r14
comma
id|cr3
suffix:semicolon
id|spu
id|pop
id|r13
DECL|variable|lr
id|pop
id|lr
suffix:semicolon
id|r14
DECL|variable|sp
id|pop
id|sp
suffix:semicolon
id|spi
(paren
id|r15
)paren
id|addi
id|sp
comma
macro_line|#4&t;&t;; Skip orig_r0
dot
id|fillinsn
l_int|1
suffix:colon
id|rte
dot
id|section
dot
id|fixup
comma
l_string|&quot;ax&quot;
l_int|2
suffix:colon
id|bl
id|do_exit
dot
id|previous
dot
id|section
id|__ex_table
comma
l_string|&quot;a&quot;
id|ALIGN
dot
r_int
l_int|1
id|b
comma
l_int|2
id|b
dot
id|previous
dot
id|endm
DECL|macro|GET_CURRENT
mdefine_line|#define GET_CURRENT(reg)  get_current reg
dot
id|macro
id|get_current
id|reg
id|ldi
"&bslash;"
id|reg
comma
macro_line|#-8192
op_logical_and
"&bslash;"
id|reg
comma
id|sp
dot
id|endm
macro_line|#if !defined(CONFIG_CHIP_M32102)
dot
id|macro
id|SWITCH_TO_KERNEL_STACK
suffix:semicolon
r_switch
c_cond
id|to
id|kernel
id|stack
(paren
id|spi
)paren
id|clrpsw
macro_line|#0x80&t;    -&gt;&t;nop
dot
id|endm
macro_line|#else&t;/* CONFIG_CHIP_M32102 */
dot
id|macro
id|SWITCH_TO_KERNEL_STACK
id|push
id|r0
suffix:semicolon
id|save
id|r0
r_for
c_loop
id|working
id|mvfc
id|r0
comma
id|psw
id|and3
id|r0
comma
id|r0
comma
macro_line|#0x00ff7f
id|mvtc
id|r0
comma
id|psw
id|slli
id|r0
comma
macro_line|#16
id|bltz
id|r0
comma
l_float|1f
suffix:semicolon
id|check
id|BSM
op_minus
id|bit
suffix:semicolon
suffix:semicolon
suffix:semicolon
id|called
id|from
id|kernel
id|context
suffix:colon
id|previous
id|stack
op_assign
id|spi
id|pop
id|r0
suffix:semicolon
id|retrieve
id|r0
id|bra
l_float|2f
dot
id|fillinsn
l_int|1
suffix:colon
suffix:semicolon
suffix:semicolon
id|called
id|from
id|user
id|context
suffix:colon
id|previous
id|stack
op_assign
id|spu
id|mvfc
id|r0
comma
id|cr3
suffix:semicolon
id|spu
id|addi
id|r0
comma
macro_line|#4
id|mvtc
id|r0
comma
id|cr3
suffix:semicolon
id|spu
id|ld
id|r0
comma
"@"
(paren
op_minus
l_int|4
comma
id|r0
)paren
suffix:semicolon
id|retrieve
id|r0
dot
id|fillinsn
l_int|2
suffix:colon
dot
id|endm
macro_line|#endif&t;/* CONFIG_CHIP_M32102 */
macro_line|#endif&t;/* __ASSEMBLY__ */
macro_line|#endif&t;/* _ASM_M32R_ASSEMBLER_H */
eof
