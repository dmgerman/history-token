macro_line|#ifndef _ASM_M32R_BITOPS_H
DECL|macro|_ASM_M32R_BITOPS_H
mdefine_line|#define _ASM_M32R_BITOPS_H
multiline_comment|/*&n; *  linux/include/asm-m32r/bitops.h&n; *&n; *  Copyright 1992, Linus Torvalds.&n; *&n; *  M32R version:&n; *    Copyright (C) 2001, 2002  Hitoshi Yamamoto&n; *    Copyright (C) 2004  Hirokazu Takata &lt;takata at linux-m32r.org&gt;&n; */
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/compiler.h&gt;
macro_line|#include &lt;asm/assembler.h&gt;
macro_line|#include &lt;asm/system.h&gt;
macro_line|#include &lt;asm/byteorder.h&gt;
macro_line|#include &lt;asm/types.h&gt;
multiline_comment|/*&n; * These have to be done with inline assembly: that way the bit-setting&n; * is guaranteed to be atomic. All bit operations return 0 if the bit&n; * was cleared before the operation and != 0 if it was not.&n; *&n; * bit 0 is the LSB of addr; bit 32 is the LSB of (addr+1).&n; */
multiline_comment|/**&n; * set_bit - Atomically set a bit in memory&n; * @nr: the bit to set&n; * @addr: the address to start counting from&n; *&n; * This function is atomic and may not be reordered.  See __set_bit()&n; * if you do not require the atomic guarantees.&n; * Note that @nr may be almost arbitrarily large; this function is not&n; * restricted to acting on a single-word quantity.&n; */
DECL|function|set_bit
r_static
id|__inline__
r_void
id|set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
id|__u32
id|mask
suffix:semicolon
r_volatile
id|__u32
op_star
id|a
op_assign
id|addr
suffix:semicolon
r_int
r_int
id|flags
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1F
)paren
)paren
suffix:semicolon
id|local_irq_save
c_func
(paren
id|flags
)paren
suffix:semicolon
id|__asm__
id|__volatile__
(paren
id|DCACHE_CLEAR
c_func
(paren
l_string|&quot;%0&quot;
comma
l_string|&quot;r6&quot;
comma
l_string|&quot;%1&quot;
)paren
id|M32R_LOCK
l_string|&quot; %0, @%1;&t;&t;&bslash;n&bslash;t&quot;
l_string|&quot;or&t;%0, %2;&t;&t;&t;&bslash;n&bslash;t&quot;
id|M32R_UNLOCK
l_string|&quot; %0, @%1;&t;&t;&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|a
)paren
comma
l_string|&quot;r&quot;
(paren
id|mask
)paren
suffix:colon
l_string|&quot;memory&quot;
macro_line|#ifdef CONFIG_CHIP_M32700_TS1
comma
l_string|&quot;r6&quot;
macro_line|#endif&t;/* CONFIG_CHIP_M32700_TS1 */
)paren
suffix:semicolon
id|local_irq_restore
c_func
(paren
id|flags
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * __set_bit - Set a bit in memory&n; * @nr: the bit to set&n; * @addr: the address to start counting from&n; *&n; * Unlike set_bit(), this function is non-atomic and may be reordered.&n; * If it&squot;s called on the same region of memory simultaneously, the effect&n; * may be that only one operation succeeds.&n; */
DECL|function|__set_bit
r_static
id|__inline__
r_void
id|__set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
id|__u32
id|mask
suffix:semicolon
r_volatile
id|__u32
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1F
)paren
)paren
suffix:semicolon
op_star
id|a
op_or_assign
id|mask
suffix:semicolon
)brace
multiline_comment|/**&n; * clear_bit - Clears a bit in memory&n; * @nr: Bit to clear&n; * @addr: Address to start counting from&n; *&n; * clear_bit() is atomic and may not be reordered.  However, it does&n; * not contain a memory barrier, so if it is used for locking purposes,&n; * you should call smp_mb__before_clear_bit() and/or smp_mb__after_clear_bit()&n; * in order to ensure changes are visible on other processors.&n; */
DECL|function|clear_bit
r_static
id|__inline__
r_void
id|clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
id|__u32
id|mask
suffix:semicolon
r_volatile
id|__u32
op_star
id|a
op_assign
id|addr
suffix:semicolon
r_int
r_int
id|flags
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1F
)paren
)paren
suffix:semicolon
id|local_irq_save
c_func
(paren
id|flags
)paren
suffix:semicolon
id|__asm__
id|__volatile__
(paren
id|DCACHE_CLEAR
c_func
(paren
l_string|&quot;%0&quot;
comma
l_string|&quot;r6&quot;
comma
l_string|&quot;%1&quot;
)paren
id|M32R_LOCK
l_string|&quot; %0, @%1;&t;&t;&bslash;n&bslash;t&quot;
l_string|&quot;and&t;%0, %2;&t;&t;&t;&bslash;n&bslash;t&quot;
id|M32R_UNLOCK
l_string|&quot; %0, @%1;&t;&t;&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|a
)paren
comma
l_string|&quot;r&quot;
(paren
op_complement
id|mask
)paren
suffix:colon
l_string|&quot;memory&quot;
macro_line|#ifdef CONFIG_CHIP_M32700_TS1
comma
l_string|&quot;r6&quot;
macro_line|#endif&t;/* CONFIG_CHIP_M32700_TS1 */
)paren
suffix:semicolon
id|local_irq_restore
c_func
(paren
id|flags
)paren
suffix:semicolon
)brace
DECL|function|__clear_bit
r_static
id|__inline__
r_void
id|__clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
id|mask
suffix:semicolon
r_volatile
r_int
r_int
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1F
)paren
)paren
suffix:semicolon
op_star
id|a
op_and_assign
op_complement
id|mask
suffix:semicolon
)brace
DECL|macro|smp_mb__before_clear_bit
mdefine_line|#define smp_mb__before_clear_bit()&t;barrier()
DECL|macro|smp_mb__after_clear_bit
mdefine_line|#define smp_mb__after_clear_bit()&t;barrier()
multiline_comment|/**&n; * __change_bit - Toggle a bit in memory&n; * @nr: the bit to set&n; * @addr: the address to start counting from&n; *&n; * Unlike change_bit(), this function is non-atomic and may be reordered.&n; * If it&squot;s called on the same region of memory simultaneously, the effect&n; * may be that only one operation succeeds.&n; */
DECL|function|__change_bit
r_static
id|__inline__
r_void
id|__change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
id|__u32
id|mask
suffix:semicolon
r_volatile
id|__u32
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1F
)paren
)paren
suffix:semicolon
op_star
id|a
op_xor_assign
id|mask
suffix:semicolon
)brace
multiline_comment|/**&n; * change_bit - Toggle a bit in memory&n; * @nr: Bit to clear&n; * @addr: Address to start counting from&n; *&n; * change_bit() is atomic and may not be reordered.&n; * Note that @nr may be almost arbitrarily large; this function is not&n; * restricted to acting on a single-word quantity.&n; */
DECL|function|change_bit
r_static
id|__inline__
r_void
id|change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
id|__u32
id|mask
suffix:semicolon
r_volatile
id|__u32
op_star
id|a
op_assign
id|addr
suffix:semicolon
r_int
r_int
id|flags
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1F
)paren
)paren
suffix:semicolon
id|local_irq_save
c_func
(paren
id|flags
)paren
suffix:semicolon
id|__asm__
id|__volatile__
(paren
id|DCACHE_CLEAR
c_func
(paren
l_string|&quot;%0&quot;
comma
l_string|&quot;r6&quot;
comma
l_string|&quot;%1&quot;
)paren
id|M32R_LOCK
l_string|&quot; %0, @%1;&t;&t;&bslash;n&bslash;t&quot;
l_string|&quot;xor&t;%0, %2;&t;&t;&t;&bslash;n&bslash;t&quot;
id|M32R_UNLOCK
l_string|&quot; %0, @%1;&t;&t;&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|a
)paren
comma
l_string|&quot;r&quot;
(paren
id|mask
)paren
suffix:colon
l_string|&quot;memory&quot;
macro_line|#ifdef CONFIG_CHIP_M32700_TS1
comma
l_string|&quot;r6&quot;
macro_line|#endif&t;/* CONFIG_CHIP_M32700_TS1 */
)paren
suffix:semicolon
id|local_irq_restore
c_func
(paren
id|flags
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * test_and_set_bit - Set a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is atomic and cannot be reordered.&n; * It also implies a memory barrier.&n; */
DECL|function|test_and_set_bit
r_static
id|__inline__
r_int
id|test_and_set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
id|__u32
id|mask
comma
id|oldbit
suffix:semicolon
r_volatile
id|__u32
op_star
id|a
op_assign
id|addr
suffix:semicolon
r_int
r_int
id|flags
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1F
)paren
)paren
suffix:semicolon
id|local_irq_save
c_func
(paren
id|flags
)paren
suffix:semicolon
id|__asm__
id|__volatile__
(paren
id|DCACHE_CLEAR
c_func
(paren
l_string|&quot;%0&quot;
comma
l_string|&quot;%1&quot;
comma
l_string|&quot;%2&quot;
)paren
id|M32R_LOCK
l_string|&quot; %0, @%2;&t;&t;&bslash;n&bslash;t&quot;
l_string|&quot;mv&t;%1, %0;&t;&t;&t;&bslash;n&bslash;t&quot;
l_string|&quot;and&t;%0, %3;&t;&t;&t;&bslash;n&bslash;t&quot;
l_string|&quot;or&t;%1, %3;&t;&t;&t;&bslash;n&bslash;t&quot;
id|M32R_UNLOCK
l_string|&quot; %1, @%2;&t;&t;&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|oldbit
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|a
)paren
comma
l_string|&quot;r&quot;
(paren
id|mask
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
id|local_irq_restore
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
(paren
id|oldbit
op_ne
l_int|0
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * __test_and_set_bit - Set a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is non-atomic and can be reordered.&n; * If two examples of this operation race, one can appear to succeed&n; * but actually fail.  You must protect multiple accesses with a lock.&n; */
DECL|function|__test_and_set_bit
r_static
id|__inline__
r_int
id|__test_and_set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
id|__u32
id|mask
comma
id|oldbit
suffix:semicolon
r_volatile
id|__u32
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1F
)paren
)paren
suffix:semicolon
id|oldbit
op_assign
(paren
op_star
id|a
op_amp
id|mask
)paren
suffix:semicolon
op_star
id|a
op_or_assign
id|mask
suffix:semicolon
r_return
(paren
id|oldbit
op_ne
l_int|0
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * test_and_clear_bit - Clear a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is atomic and cannot be reordered.&n; * It also implies a memory barrier.&n; */
DECL|function|test_and_clear_bit
r_static
id|__inline__
r_int
id|test_and_clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
id|__u32
id|mask
comma
id|oldbit
suffix:semicolon
r_volatile
id|__u32
op_star
id|a
op_assign
id|addr
suffix:semicolon
r_int
r_int
id|flags
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1F
)paren
)paren
suffix:semicolon
id|local_irq_save
c_func
(paren
id|flags
)paren
suffix:semicolon
id|__asm__
id|__volatile__
(paren
id|DCACHE_CLEAR
c_func
(paren
l_string|&quot;%0&quot;
comma
l_string|&quot;%1&quot;
comma
l_string|&quot;%3&quot;
)paren
id|M32R_LOCK
l_string|&quot; %0, @%3;&t;&t;&bslash;n&bslash;t&quot;
l_string|&quot;mv&t;%1, %0;&t;&t;&t;&bslash;n&bslash;t&quot;
l_string|&quot;and&t;%0, %2;&t;&t;&t;&bslash;n&bslash;t&quot;
l_string|&quot;not&t;%2, %2;&t;&t;&t;&bslash;n&bslash;t&quot;
l_string|&quot;and&t;%1, %2;&t;&t;&t;&bslash;n&bslash;t&quot;
id|M32R_UNLOCK
l_string|&quot; %1, @%3;&t;&t;&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|oldbit
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
comma
l_string|&quot;+r&quot;
(paren
id|mask
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|a
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
id|local_irq_restore
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
(paren
id|oldbit
op_ne
l_int|0
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * __test_and_clear_bit - Clear a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is non-atomic and can be reordered.&n; * If two examples of this operation race, one can appear to succeed&n; * but actually fail.  You must protect multiple accesses with a lock.&n; */
DECL|function|__test_and_clear_bit
r_static
id|__inline__
r_int
id|__test_and_clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
id|__u32
id|mask
comma
id|oldbit
suffix:semicolon
r_volatile
id|__u32
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1F
)paren
)paren
suffix:semicolon
id|oldbit
op_assign
(paren
op_star
id|a
op_amp
id|mask
)paren
suffix:semicolon
op_star
id|a
op_and_assign
op_complement
id|mask
suffix:semicolon
r_return
(paren
id|oldbit
op_ne
l_int|0
)paren
suffix:semicolon
)brace
multiline_comment|/* WARNING: non atomic and it can be reordered! */
DECL|function|__test_and_change_bit
r_static
id|__inline__
r_int
id|__test_and_change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
id|__u32
id|mask
comma
id|oldbit
suffix:semicolon
r_volatile
id|__u32
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1F
)paren
)paren
suffix:semicolon
id|oldbit
op_assign
(paren
op_star
id|a
op_amp
id|mask
)paren
suffix:semicolon
op_star
id|a
op_xor_assign
id|mask
suffix:semicolon
r_return
(paren
id|oldbit
op_ne
l_int|0
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * test_and_change_bit - Change a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is atomic and cannot be reordered.&n; * It also implies a memory barrier.&n; */
DECL|function|test_and_change_bit
r_static
id|__inline__
r_int
id|test_and_change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
id|__u32
id|mask
comma
id|oldbit
suffix:semicolon
r_volatile
id|__u32
op_star
id|a
op_assign
id|addr
suffix:semicolon
r_int
r_int
id|flags
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1F
)paren
)paren
suffix:semicolon
id|local_irq_save
c_func
(paren
id|flags
)paren
suffix:semicolon
id|__asm__
id|__volatile__
(paren
id|DCACHE_CLEAR
c_func
(paren
l_string|&quot;%0&quot;
comma
l_string|&quot;%1&quot;
comma
l_string|&quot;%2&quot;
)paren
id|M32R_LOCK
l_string|&quot; %0, @%2;&t;&t;&bslash;n&bslash;t&quot;
l_string|&quot;mv&t;%1, %0;&t;&t;&t;&bslash;n&bslash;t&quot;
l_string|&quot;and&t;%0, %3;&t;&t;&t;&bslash;n&bslash;t&quot;
l_string|&quot;xor&t;%1, %3;&t;&t;&t;&bslash;n&bslash;t&quot;
id|M32R_UNLOCK
l_string|&quot; %1, @%2;&t;&t;&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|oldbit
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|a
)paren
comma
l_string|&quot;r&quot;
(paren
id|mask
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
id|local_irq_restore
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
(paren
id|oldbit
op_ne
l_int|0
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * test_bit - Determine whether a bit is set&n; * @nr: bit number to test&n; * @addr: Address to start counting from&n; */
DECL|function|test_bit
r_static
id|__inline__
r_int
id|test_bit
c_func
(paren
r_int
id|nr
comma
r_const
r_volatile
r_void
op_star
id|addr
)paren
(brace
id|__u32
id|mask
suffix:semicolon
r_const
r_volatile
id|__u32
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1F
)paren
)paren
suffix:semicolon
r_return
(paren
(paren
op_star
id|a
op_amp
id|mask
)paren
op_ne
l_int|0
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * ffz - find first zero in word.&n; * @word: The word to search&n; *&n; * Undefined if no zero exists, so code should check against ~0UL first.&n; */
DECL|function|ffz
r_static
id|__inline__
r_int
r_int
id|ffz
c_func
(paren
r_int
r_int
id|word
)paren
(brace
r_int
id|k
suffix:semicolon
id|word
op_assign
op_complement
id|word
suffix:semicolon
id|k
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|word
op_amp
l_int|0x0000ffff
)paren
)paren
(brace
id|k
op_add_assign
l_int|16
suffix:semicolon
id|word
op_rshift_assign
l_int|16
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
(paren
id|word
op_amp
l_int|0x000000ff
)paren
)paren
(brace
id|k
op_add_assign
l_int|8
suffix:semicolon
id|word
op_rshift_assign
l_int|8
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
(paren
id|word
op_amp
l_int|0x0000000f
)paren
)paren
(brace
id|k
op_add_assign
l_int|4
suffix:semicolon
id|word
op_rshift_assign
l_int|4
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
(paren
id|word
op_amp
l_int|0x00000003
)paren
)paren
(brace
id|k
op_add_assign
l_int|2
suffix:semicolon
id|word
op_rshift_assign
l_int|2
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
(paren
id|word
op_amp
l_int|0x00000001
)paren
)paren
(brace
id|k
op_add_assign
l_int|1
suffix:semicolon
)brace
r_return
id|k
suffix:semicolon
)brace
multiline_comment|/**&n; * find_first_zero_bit - find the first zero bit in a memory region&n; * @addr: The address to start the search at&n; * @size: The maximum size to search&n; *&n; * Returns the bit-number of the first zero bit, not the number of the byte&n; * containing a bit.&n; */
DECL|macro|find_first_zero_bit
mdefine_line|#define find_first_zero_bit(addr, size) &bslash;&n;&t;find_next_zero_bit((addr), (size), 0)
multiline_comment|/**&n; * find_next_zero_bit - find the first zero bit in a memory region&n; * @addr: The address to base the search on&n; * @offset: The bitnumber to start searching at&n; * @size: The maximum size to search&n; */
DECL|function|find_next_zero_bit
r_static
id|__inline__
r_int
id|find_next_zero_bit
c_func
(paren
r_const
r_int
r_int
op_star
id|addr
comma
r_int
id|size
comma
r_int
id|offset
)paren
(brace
r_const
r_int
r_int
op_star
id|p
op_assign
id|addr
op_plus
(paren
id|offset
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|31UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|31UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_rshift
(paren
l_int|32
op_minus
id|offset
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|32
)paren
r_goto
id|found_first
suffix:semicolon
r_if
c_cond
(paren
op_complement
id|tmp
)paren
r_goto
id|found_middle
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
l_int|31UL
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
r_goto
id|found_middle
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
r_return
id|result
suffix:semicolon
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_lshift
id|size
suffix:semicolon
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|tmp
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * __ffs - find first bit in word.&n; * @word: The word to search&n; *&n; * Undefined if no bit exists, so code should check against 0 first.&n; */
DECL|function|__ffs
r_static
id|__inline__
r_int
r_int
id|__ffs
c_func
(paren
r_int
r_int
id|word
)paren
(brace
r_int
id|k
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|word
op_amp
l_int|0x0000ffff
)paren
)paren
(brace
id|k
op_add_assign
l_int|16
suffix:semicolon
id|word
op_rshift_assign
l_int|16
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
(paren
id|word
op_amp
l_int|0x000000ff
)paren
)paren
(brace
id|k
op_add_assign
l_int|8
suffix:semicolon
id|word
op_rshift_assign
l_int|8
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
(paren
id|word
op_amp
l_int|0x0000000f
)paren
)paren
(brace
id|k
op_add_assign
l_int|4
suffix:semicolon
id|word
op_rshift_assign
l_int|4
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
(paren
id|word
op_amp
l_int|0x00000003
)paren
)paren
(brace
id|k
op_add_assign
l_int|2
suffix:semicolon
id|word
op_rshift_assign
l_int|2
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
(paren
id|word
op_amp
l_int|0x00000001
)paren
)paren
(brace
id|k
op_add_assign
l_int|1
suffix:semicolon
)brace
r_return
id|k
suffix:semicolon
)brace
multiline_comment|/*&n; * fls: find last bit set.&n; */
DECL|macro|fls
mdefine_line|#define fls(x) generic_fls(x)
macro_line|#ifdef __KERNEL__
multiline_comment|/*&n; * Every architecture must define this function. It&squot;s the fastest&n; * way of searching a 140-bit bitmap where the first 100 bits are&n; * unlikely to be set. It&squot;s guaranteed that at least one of the 140&n; * bits is cleared.&n; */
DECL|function|sched_find_first_bit
r_static
r_inline
r_int
id|sched_find_first_bit
c_func
(paren
r_int
r_int
op_star
id|b
)paren
(brace
r_if
c_cond
(paren
id|unlikely
c_func
(paren
id|b
(braket
l_int|0
)braket
)paren
)paren
r_return
id|__ffs
c_func
(paren
id|b
(braket
l_int|0
)braket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|unlikely
c_func
(paren
id|b
(braket
l_int|1
)braket
)paren
)paren
r_return
id|__ffs
c_func
(paren
id|b
(braket
l_int|1
)braket
)paren
op_plus
l_int|32
suffix:semicolon
r_if
c_cond
(paren
id|unlikely
c_func
(paren
id|b
(braket
l_int|2
)braket
)paren
)paren
r_return
id|__ffs
c_func
(paren
id|b
(braket
l_int|2
)braket
)paren
op_plus
l_int|64
suffix:semicolon
r_if
c_cond
(paren
id|b
(braket
l_int|3
)braket
)paren
r_return
id|__ffs
c_func
(paren
id|b
(braket
l_int|3
)braket
)paren
op_plus
l_int|96
suffix:semicolon
r_return
id|__ffs
c_func
(paren
id|b
(braket
l_int|4
)braket
)paren
op_plus
l_int|128
suffix:semicolon
)brace
multiline_comment|/**&n; * find_next_bit - find the first set bit in a memory region&n; * @addr: The address to base the search on&n; * @offset: The bitnumber to start searching at&n; * @size: The maximum size to search&n; */
DECL|function|find_next_bit
r_static
r_inline
r_int
r_int
id|find_next_bit
c_func
(paren
r_const
r_int
r_int
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|31UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|31UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
op_star
id|p
op_increment
suffix:semicolon
id|tmp
op_and_assign
op_complement
l_int|0UL
op_lshift
id|offset
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|32
)paren
r_goto
id|found_first
suffix:semicolon
r_if
c_cond
(paren
id|tmp
)paren
r_goto
id|found_middle
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_ge
l_int|32
)paren
(brace
r_if
c_cond
(paren
(paren
id|tmp
op_assign
op_star
id|p
op_increment
)paren
op_ne
l_int|0
)paren
r_goto
id|found_middle
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
r_return
id|result
suffix:semicolon
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
id|tmp
op_and_assign
op_complement
l_int|0UL
op_rshift
(paren
l_int|32
op_minus
id|size
)paren
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_eq
l_int|0UL
)paren
multiline_comment|/* Are any bits set? */
r_return
id|result
op_plus
id|size
suffix:semicolon
multiline_comment|/* Nope. */
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|__ffs
c_func
(paren
id|tmp
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; * find_first_bit - find the first set bit in a memory region&n; * @addr: The address to start the search at&n; * @size: The maximum size to search&n; *&n; * Returns the bit-number of the first set bit, not the number of the byte&n; * containing a bit.&n; */
DECL|macro|find_first_bit
mdefine_line|#define find_first_bit(addr, size) &bslash;&n;&t;find_next_bit((addr), (size), 0)
multiline_comment|/**&n; * ffs - find first bit set&n; * @x: the word to search&n; *&n; * This is defined the same way as&n; * the libc and compiler builtin ffs routines, therefore&n; * differs in spirit from the above ffz (man ffs).&n; */
DECL|macro|ffs
mdefine_line|#define ffs(x)&t;generic_ffs(x)
multiline_comment|/**&n; * hweightN - returns the hamming weight of a N-bit word&n; * @x: the word to weigh&n; *&n; * The Hamming Weight of a number is the total number of bits set in it.&n; */
DECL|macro|hweight32
mdefine_line|#define hweight32(x)&t;generic_hweight32(x)
DECL|macro|hweight16
mdefine_line|#define hweight16(x)&t;generic_hweight16(x)
DECL|macro|hweight8
mdefine_line|#define hweight8(x)&t;generic_hweight8(x)
macro_line|#endif /* __KERNEL__ */
macro_line|#ifdef __KERNEL__
multiline_comment|/*&n; * ext2_XXXX function&n; * orig: include/asm-sh/bitops.h&n; */
macro_line|#ifdef __LITTLE_ENDIAN__
DECL|macro|ext2_set_bit
mdefine_line|#define ext2_set_bit&t;&t;&t;test_and_set_bit
DECL|macro|ext2_clear_bit
mdefine_line|#define ext2_clear_bit&t;&t;&t;__test_and_clear_bit
DECL|macro|ext2_test_bit
mdefine_line|#define ext2_test_bit&t;&t;&t;test_bit
DECL|macro|ext2_find_first_zero_bit
mdefine_line|#define ext2_find_first_zero_bit&t;find_first_zero_bit
DECL|macro|ext2_find_next_zero_bit
mdefine_line|#define ext2_find_next_zero_bit&t;&t;find_next_zero_bit
macro_line|#else
DECL|function|ext2_set_bit
r_static
r_inline
r_int
id|ext2_set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
id|__u8
id|mask
comma
id|oldbit
suffix:semicolon
r_volatile
id|__u8
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|3
)paren
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
)paren
suffix:semicolon
id|oldbit
op_assign
(paren
op_star
id|a
op_amp
id|mask
)paren
suffix:semicolon
op_star
id|a
op_or_assign
id|mask
suffix:semicolon
r_return
(paren
id|oldbit
op_ne
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|ext2_clear_bit
r_static
r_inline
r_int
id|ext2_clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
id|__u8
id|mask
comma
id|oldbit
suffix:semicolon
r_volatile
id|__u8
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|3
)paren
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
)paren
suffix:semicolon
id|oldbit
op_assign
(paren
op_star
id|a
op_amp
id|mask
)paren
suffix:semicolon
op_star
id|a
op_and_assign
op_complement
id|mask
suffix:semicolon
r_return
(paren
id|oldbit
op_ne
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|ext2_test_bit
r_static
r_inline
r_int
id|ext2_test_bit
c_func
(paren
r_int
id|nr
comma
r_const
r_volatile
r_void
op_star
id|addr
)paren
(brace
id|__u32
id|mask
suffix:semicolon
r_const
r_volatile
id|__u8
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
(paren
id|nr
op_rshift
l_int|3
)paren
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
)paren
suffix:semicolon
r_return
(paren
(paren
id|mask
op_amp
op_star
id|a
)paren
op_ne
l_int|0
)paren
suffix:semicolon
)brace
DECL|macro|ext2_find_first_zero_bit
mdefine_line|#define ext2_find_first_zero_bit(addr, size) &bslash;&n;&t;ext2_find_next_zero_bit((addr), (size), 0)
DECL|function|ext2_find_next_zero_bit
r_static
r_inline
r_int
r_int
id|ext2_find_next_zero_bit
c_func
(paren
r_void
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|31UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|31UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
multiline_comment|/* We hold the little endian value in tmp, but then the&n;&t;&t; * shift is illegal. So we could keep a big endian value&n;&t;&t; * in tmp, like this:&n;&t;&t; *&n;&t;&t; * tmp = __swab32(*(p++));&n;&t;&t; * tmp |= ~0UL &gt;&gt; (32-offset);&n;&t;&t; *&n;&t;&t; * but this would decrease preformance, so we change the&n;&t;&t; * shift:&n;&t;&t; */
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
id|__swab32
c_func
(paren
op_complement
l_int|0UL
op_rshift
(paren
l_int|32
op_minus
id|offset
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|32
)paren
(brace
r_goto
id|found_first
suffix:semicolon
)brace
r_if
c_cond
(paren
op_complement
id|tmp
)paren
(brace
r_goto
id|found_middle
suffix:semicolon
)brace
id|size
op_sub_assign
l_int|32
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
l_int|31UL
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
(brace
r_goto
id|found_middle
suffix:semicolon
)brace
id|result
op_add_assign
l_int|32
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
(brace
r_return
id|result
suffix:semicolon
)brace
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
multiline_comment|/* tmp is little endian, so we would have to swab the shift,&n;&t; * see above. But then we have to swab tmp below for ffz, so&n;&t; * we might as well do this here.&n;&t; */
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|__swab32
c_func
(paren
id|tmp
)paren
op_or
(paren
op_complement
l_int|0UL
op_lshift
id|size
)paren
)paren
suffix:semicolon
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|__swab32
c_func
(paren
id|tmp
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif
DECL|macro|ext2_set_bit_atomic
mdefine_line|#define ext2_set_bit_atomic(lock, nr, addr)&t;&t;&bslash;&n;&t;({&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;int ret;&t;&t;&t;&t;&bslash;&n;&t;&t;spin_lock(lock);&t;&t;&t;&bslash;&n;&t;&t;ret = ext2_set_bit((nr), (addr));&t;&bslash;&n;&t;&t;spin_unlock(lock);&t;&t;&t;&bslash;&n;&t;&t;ret;&t;&t;&t;&t;&t;&bslash;&n;&t;})
DECL|macro|ext2_clear_bit_atomic
mdefine_line|#define ext2_clear_bit_atomic(lock, nr, addr)&t;&t;&bslash;&n;&t;({&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;int ret;&t;&t;&t;&t;&bslash;&n;&t;&t;spin_lock(lock);&t;&t;&t;&bslash;&n;&t;&t;ret = ext2_clear_bit((nr), (addr));&t;&bslash;&n;&t;&t;spin_unlock(lock);&t;&t;&t;&bslash;&n;&t;&t;ret;&t;&t;&t;&t;&t;&bslash;&n;&t;})
multiline_comment|/* Bitmap functions for the minix filesystem.  */
DECL|macro|minix_test_and_set_bit
mdefine_line|#define minix_test_and_set_bit(nr,addr)&t;&t;__test_and_set_bit(nr,addr)
DECL|macro|minix_set_bit
mdefine_line|#define minix_set_bit(nr,addr)&t;&t;&t;__set_bit(nr,addr)
DECL|macro|minix_test_and_clear_bit
mdefine_line|#define minix_test_and_clear_bit(nr,addr)&t;__test_and_clear_bit(nr,addr)
DECL|macro|minix_test_bit
mdefine_line|#define minix_test_bit(nr,addr) test_bit(nr,addr)
DECL|macro|minix_find_first_zero_bit
mdefine_line|#define minix_find_first_zero_bit(addr,size)&t;find_first_zero_bit(addr,size)
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _ASM_M32R_BITOPS_H */
eof
