multiline_comment|/*&n; * include/asm-v850/checksum.h -- Checksum ops&n; *&n; *  Copyright (C) 2001  NEC Corporation&n; *  Copyright (C) 2001  Miles Bader &lt;miles@gnu.org&gt;&n; *&n; * This file is subject to the terms and conditions of the GNU General&n; * Public License.  See the file COPYING in the main directory of this&n; * archive for more details.&n; *&n; * Written by Miles Bader &lt;miles@gnu.org&gt;&n; */
macro_line|#ifndef __V850_CHECKSUM_H__
DECL|macro|__V850_CHECKSUM_H__
mdefine_line|#define __V850_CHECKSUM_H__
multiline_comment|/*&n; * computes the checksum of a memory block at buff, length len,&n; * and adds in &quot;sum&quot; (32-bit)&n; *&n; * returns a 32-bit number suitable for feeding into itself&n; * or csum_tcpudp_magic&n; *&n; * this function must be called with even lengths, except&n; * for the last fragment, which may be odd&n; *&n; * it&squot;s best to have buff aligned on a 32-bit boundary&n; */
r_extern
r_int
r_int
id|csum_partial
(paren
r_const
r_int
r_char
op_star
id|buff
comma
r_int
id|len
comma
r_int
r_int
id|sum
)paren
suffix:semicolon
multiline_comment|/*&n; * the same as csum_partial, but copies from src while it&n; * checksums&n; *&n; * here even more important to align src and dst on a 32-bit (or even&n; * better 64-bit) boundary&n; */
r_extern
r_int
id|csum_partial_copy
(paren
r_const
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
id|sum
)paren
suffix:semicolon
multiline_comment|/*&n; * the same as csum_partial_copy, but copies from user space.&n; *&n; * here even more important to align src and dst on a 32-bit (or even&n; * better 64-bit) boundary&n; */
r_extern
r_int
id|csum_partial_copy_from_user
(paren
r_const
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
id|sum
comma
r_int
op_star
id|csum_err
)paren
suffix:semicolon
DECL|macro|csum_partial_copy_nocheck
mdefine_line|#define csum_partial_copy_nocheck(src, dst, len, sum)&t;&bslash;&n;&t;csum_partial_copy ((src), (dst), (len), (sum))
r_int
r_int
id|ip_fast_csum
(paren
r_int
r_char
op_star
id|iph
comma
r_int
r_int
id|ihl
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;Fold a partial checksum&n; */
DECL|function|csum_fold
r_static
r_inline
r_int
r_int
id|csum_fold
(paren
r_int
r_int
id|sum
)paren
(brace
r_int
r_int
id|result
suffix:semicolon
multiline_comment|/*&n;&t;&t;&t;        %0&t;&t;%1&n;&t;      hsw %1, %0&t;H     L&t;&t;L     H&n;&t;      add %1, %0&t;H     L&t;&t;H+L+C H+L&n;&t;*/
id|asm
(paren
l_string|&quot;hsw %1, %0; add %1, %0&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|result
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|sum
)paren
)paren
suffix:semicolon
r_return
(paren
op_complement
id|result
)paren
op_rshift
l_int|16
suffix:semicolon
)brace
multiline_comment|/*&n; * computes the checksum of the TCP/UDP pseudo-header&n; * returns a 16-bit checksum, already complemented&n; */
r_static
r_inline
r_int
r_int
DECL|function|csum_tcpudp_nofold
id|csum_tcpudp_nofold
(paren
r_int
r_int
id|saddr
comma
r_int
r_int
id|daddr
comma
r_int
r_int
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
r_int
id|__carry
suffix:semicolon
id|__asm__
(paren
l_string|&quot;add %2, %0;&quot;
l_string|&quot;setf c, %1;&quot;
l_string|&quot;add %1, %0;&quot;
l_string|&quot;add %3, %0;&quot;
l_string|&quot;setf c, %1;&quot;
l_string|&quot;add %1, %0;&quot;
l_string|&quot;add %4, %0;&quot;
l_string|&quot;setf c, %1;&quot;
l_string|&quot;add %1, %0&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|sum
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|__carry
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|daddr
)paren
comma
l_string|&quot;r&quot;
(paren
id|saddr
)paren
comma
l_string|&quot;r&quot;
(paren
id|ntohs
(paren
id|len
)paren
op_plus
(paren
id|proto
op_lshift
l_int|8
)paren
)paren
comma
l_string|&quot;0&quot;
(paren
id|sum
)paren
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
r_int
DECL|function|csum_tcpudp_magic
id|csum_tcpudp_magic
(paren
r_int
r_int
id|saddr
comma
r_int
r_int
id|daddr
comma
r_int
r_int
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
r_return
id|csum_fold
(paren
id|csum_tcpudp_nofold
(paren
id|saddr
comma
id|daddr
comma
id|len
comma
id|proto
comma
id|sum
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * this routine is used for miscellaneous IP-like checksums, mainly&n; * in icmp.c&n; */
r_extern
r_int
r_int
id|ip_compute_csum
(paren
r_const
r_int
r_char
op_star
id|buff
comma
r_int
id|len
)paren
suffix:semicolon
macro_line|#endif /* __V850_CHECKSUM_H__ */
eof
