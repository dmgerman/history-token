multiline_comment|/*&n; * include/asm-v850/pci.h -- PCI support&n; *&n; *  Copyright (C) 2001,02  NEC Corporation&n; *  Copyright (C) 2001,02  Miles Bader &lt;miles@gnu.org&gt;&n; *&n; * This file is subject to the terms and conditions of the GNU General&n; * Public License.  See the file COPYING in the main directory of this&n; * archive for more details.&n; *&n; * Written by Miles Bader &lt;miles@gnu.org&gt;&n; */
macro_line|#ifndef __V850_PCI_H__
DECL|macro|__V850_PCI_H__
mdefine_line|#define __V850_PCI_H__
multiline_comment|/* Get any platform-dependent definitions.  */
macro_line|#include &lt;asm/machdep.h&gt;
multiline_comment|/* Generic declarations.  */
r_struct
id|scatterlist
suffix:semicolon
r_extern
r_void
id|pcibios_set_master
(paren
r_struct
id|pci_dev
op_star
id|dev
)paren
suffix:semicolon
multiline_comment|/* `Grant&squot; to PDEV the memory block at CPU_ADDR, for doing DMA.  The&n;   32-bit PCI bus mastering address to use is returned.  the device owns&n;   this memory until either pci_unmap_single or pci_dma_sync_single is&n;   performed.  */
r_extern
id|dma_addr_t
id|pci_map_single
(paren
r_struct
id|pci_dev
op_star
id|pdev
comma
r_void
op_star
id|cpu_addr
comma
r_int
id|size
comma
r_int
id|dir
)paren
suffix:semicolon
multiline_comment|/* Return to the CPU the PCI DMA memory block previously `granted&squot; to&n;   PDEV, at DMA_ADDR.  */
r_extern
r_void
id|pci_unmap_single
(paren
r_struct
id|pci_dev
op_star
id|pdev
comma
id|dma_addr_t
id|dma_addr
comma
r_int
id|size
comma
r_int
id|dir
)paren
suffix:semicolon
multiline_comment|/* Make physical memory consistant for a single streaming mode DMA&n;   translation after a transfer.&n;&n;   If you perform a pci_map_single() but wish to interrogate the&n;   buffer using the cpu, yet do not wish to teardown the PCI dma&n;   mapping, you must call this function before doing so.  At the next&n;   point you give the PCI dma address back to the card, the device&n;   again owns the buffer.  */
r_extern
r_void
id|pci_dma_sync_single
(paren
r_struct
id|pci_dev
op_star
id|dev
comma
id|dma_addr_t
id|dma_addr
comma
r_int
id|size
comma
r_int
id|dir
)paren
suffix:semicolon
multiline_comment|/* Do multiple DMA mappings at once.  */
r_extern
r_int
id|pci_map_sg
(paren
r_struct
id|pci_dev
op_star
id|pdev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|sg_len
comma
r_int
id|dir
)paren
suffix:semicolon
multiline_comment|/* Unmap multiple DMA mappings at once.  */
r_extern
r_void
id|pci_unmap_sg
(paren
r_struct
id|pci_dev
op_star
id|pdev
comma
r_struct
id|scatterlist
op_star
id|sg
comma
r_int
id|sg_len
comma
r_int
id|dir
)paren
suffix:semicolon
multiline_comment|/* Allocate and map kernel buffer using consistent mode DMA for PCI&n;   device.  Returns non-NULL cpu-view pointer to the buffer if&n;   successful and sets *DMA_ADDR to the pci side dma address as well,&n;   else DMA_ADDR is undefined.  */
r_extern
r_void
op_star
id|pci_alloc_consistent
(paren
r_struct
id|pci_dev
op_star
id|pdev
comma
r_int
id|size
comma
id|dma_addr_t
op_star
id|dma_addr
)paren
suffix:semicolon
multiline_comment|/* Free and unmap a consistent DMA buffer.  CPU_ADDR and DMA_ADDR must&n;   be values that were returned from pci_alloc_consistent.  SIZE must be&n;   the same as what as passed into pci_alloc_consistent.  References to&n;   the memory and mappings assosciated with CPU_ADDR or DMA_ADDR past&n;   this call are illegal.  */
r_extern
r_void
id|pci_free_consistent
(paren
r_struct
id|pci_dev
op_star
id|pdev
comma
r_int
id|size
comma
r_void
op_star
id|cpu_addr
comma
id|dma_addr_t
id|dma_addr
)paren
suffix:semicolon
macro_line|#endif /* __V850_PCI_H__ */
eof
