multiline_comment|/*&n; * include/asm-v850/flat.h -- uClinux flat-format executables&n; *&n; *  Copyright (C) 2002,03  NEC Electronics Corporation&n; *  Copyright (C) 2002,03  Miles Bader &lt;miles@gnu.org&gt;&n; *&n; * This file is subject to the terms and conditions of the GNU General&n; * Public License.  See the file COPYING in the main directory of this&n; * archive for more details.&n; *&n; * Written by Miles Bader &lt;miles@gnu.org&gt;&n; */
macro_line|#ifndef __V850_FLAT_H__
DECL|macro|__V850_FLAT_H__
mdefine_line|#define __V850_FLAT_H__
multiline_comment|/* The amount by which a relocation can exceed the program image limits&n;   without being regarded as an error.  On the v850, the relocations of&n;   some base-pointers can be offset by 0x8000 (to allow better usage of the&n;   space offered by 16-bit signed offsets -- in most cases the offsets used&n;   with such a base-pointer will be negative).  */
DECL|macro|flat_reloc_valid
mdefine_line|#define&t;flat_reloc_valid(reloc, size)&t;((reloc) &lt;= (size + 0x8000))
DECL|macro|flat_stack_align
mdefine_line|#define&t;flat_stack_align(sp)&t;&t;/* nothing needed */
DECL|macro|flat_argvp_envp_on_stack
mdefine_line|#define&t;flat_argvp_envp_on_stack()&t;0
DECL|macro|flat_old_ram_flag
mdefine_line|#define&t;flat_old_ram_flag(flags)&t;(flags)
multiline_comment|/* We store the type of relocation in the top 4 bits of the `relval.&squot; */
multiline_comment|/* Convert a relocation entry into an address.  */
r_static
r_inline
r_int
r_int
DECL|function|flat_get_relocate_addr
id|flat_get_relocate_addr
(paren
r_int
r_int
id|relval
)paren
(brace
r_return
id|relval
op_amp
l_int|0x0fffffff
suffix:semicolon
multiline_comment|/* Mask out top 4-bits */
)brace
DECL|macro|flat_v850_get_reloc_type
mdefine_line|#define flat_v850_get_reloc_type(relval) ((relval) &gt;&gt; 28)
DECL|macro|FLAT_V850_R_32
mdefine_line|#define FLAT_V850_R_32&t;&t;0 /* Normal 32-bit reloc */
DECL|macro|FLAT_V850_R_HI16S_LO15
mdefine_line|#define FLAT_V850_R_HI16S_LO15&t;1 /* High 16-bits + signed 15-bit low field */
DECL|macro|FLAT_V850_R_HI16S_LO16
mdefine_line|#define FLAT_V850_R_HI16S_LO16&t;2 /* High 16-bits + signed 16-bit low field */
multiline_comment|/* Extract the address to be relocated from the symbol reference at RP;&n;   RELVAL is the raw relocation-table entry from which RP is derived.&n;   For the v850, RP should always be half-word aligned.  */
DECL|function|flat_get_addr_from_rp
r_static
r_inline
r_int
r_int
id|flat_get_addr_from_rp
(paren
r_int
r_int
op_star
id|rp
comma
r_int
r_int
id|relval
)paren
(brace
r_int
op_star
id|srp
op_assign
(paren
r_int
op_star
)paren
id|rp
suffix:semicolon
r_switch
c_cond
(paren
id|flat_v850_get_reloc_type
(paren
id|relval
)paren
)paren
(brace
r_case
id|FLAT_V850_R_32
suffix:colon
multiline_comment|/* Simple 32-bit address.  */
r_return
id|srp
(braket
l_int|0
)braket
op_or
(paren
id|srp
(braket
l_int|1
)braket
op_lshift
l_int|16
)paren
suffix:semicolon
r_case
id|FLAT_V850_R_HI16S_LO16
suffix:colon
multiline_comment|/* The high and low halves of the address are in the 16&n;&t;&t;   bits at RP, and the 2nd word of the 32-bit instruction&n;&t;&t;   following that, respectively.  The low half is _signed_&n;&t;&t;   so we have to sign-extend it and add it to the upper&n;&t;&t;   half instead of simply or-ing them together.&n;&n;&t;&t;   Unlike most relocated address, this one is stored in&n;&t;&t;   native (little-endian) byte-order to avoid problems with&n;&t;&t;   trashing the low-order bit, so we have to convert to&n;&t;&t;   network-byte-order before returning, as that&squot;s what the&n;&t;&t;   caller expects.  */
r_return
id|htonl
(paren
(paren
id|srp
(braket
l_int|0
)braket
op_lshift
l_int|16
)paren
op_plus
id|srp
(braket
l_int|2
)braket
)paren
suffix:semicolon
r_case
id|FLAT_V850_R_HI16S_LO15
suffix:colon
multiline_comment|/* The high and low halves of the address are in the 16&n;&t;&t;   bits at RP, and the upper 15 bits of the 2nd word of the&n;&t;&t;   32-bit instruction following that, respectively.  The&n;&t;&t;   low half is _signed_ so we have to sign-extend it and&n;&t;&t;   add it to the upper half instead of simply or-ing them&n;&t;&t;   together.  The lowest bit is always zero.&n;&n;&t;&t;   Unlike most relocated address, this one is stored in&n;&t;&t;   native (little-endian) byte-order to avoid problems with&n;&t;&t;   trashing the low-order bit, so we have to convert to&n;&t;&t;   network-byte-order before returning, as that&squot;s what the&n;&t;&t;   caller expects.  */
r_return
id|htonl
(paren
(paren
id|srp
(braket
l_int|0
)braket
op_lshift
l_int|16
)paren
op_plus
(paren
id|srp
(braket
l_int|2
)braket
op_amp
op_complement
l_int|0x1
)paren
)paren
suffix:semicolon
r_default
suffix:colon
r_return
op_complement
l_int|0
suffix:semicolon
multiline_comment|/* bogus value */
)brace
)brace
multiline_comment|/* Insert the address ADDR into the symbol reference at RP;&n;   RELVAL is the raw relocation-table entry from which RP is derived.&n;   For the v850, RP should always be half-word aligned.  */
DECL|function|flat_put_addr_at_rp
r_static
r_inline
r_void
id|flat_put_addr_at_rp
(paren
r_int
r_int
op_star
id|rp
comma
r_int
r_int
id|addr
comma
r_int
r_int
id|relval
)paren
(brace
r_int
op_star
id|srp
op_assign
(paren
r_int
op_star
)paren
id|rp
suffix:semicolon
r_switch
c_cond
(paren
id|flat_v850_get_reloc_type
(paren
id|relval
)paren
)paren
(brace
r_case
id|FLAT_V850_R_32
suffix:colon
multiline_comment|/* Simple 32-bit address.  */
id|srp
(braket
l_int|0
)braket
op_assign
id|addr
op_amp
l_int|0xFFFF
suffix:semicolon
id|srp
(braket
l_int|1
)braket
op_assign
(paren
id|addr
op_rshift
l_int|16
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|FLAT_V850_R_HI16S_LO16
suffix:colon
multiline_comment|/* The high and low halves of the address are in the 16&n;&t;&t;   bits at RP, and the 2nd word of the 32-bit instruction&n;&t;&t;   following that, respectively.  The low half is _signed_&n;&t;&t;   so we must carry its sign bit to the upper half before&n;&t;&t;   writing the upper half.  */
id|srp
(braket
l_int|0
)braket
op_assign
(paren
id|addr
op_rshift
l_int|16
)paren
op_plus
(paren
(paren
id|addr
op_rshift
l_int|15
)paren
op_amp
l_int|0x1
)paren
suffix:semicolon
id|srp
(braket
l_int|2
)braket
op_assign
id|addr
op_amp
l_int|0xFFFF
suffix:semicolon
r_break
suffix:semicolon
r_case
id|FLAT_V850_R_HI16S_LO15
suffix:colon
multiline_comment|/* The high and low halves of the address are in the 16&n;&t;&t;   bits at RP, and the upper 15 bits of the 2nd word of the&n;&t;&t;   32-bit instruction following that, respectively.  The&n;&t;&t;   low half is _signed_ so we must carry its sign bit to&n;&t;&t;   the upper half before writing the upper half.  The&n;&t;&t;   lowest bit we preserve from the existing instruction.  */
id|srp
(braket
l_int|0
)braket
op_assign
(paren
id|addr
op_rshift
l_int|16
)paren
op_plus
(paren
(paren
id|addr
op_rshift
l_int|15
)paren
op_amp
l_int|0x1
)paren
suffix:semicolon
id|srp
(braket
l_int|2
)braket
op_assign
(paren
id|addr
op_amp
l_int|0xFFFE
)paren
op_or
(paren
id|srp
(braket
l_int|2
)braket
op_amp
l_int|0x1
)paren
suffix:semicolon
r_break
suffix:semicolon
)brace
)brace
macro_line|#endif /* __V850_FLAT_H__ */
eof
