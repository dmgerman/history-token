multiline_comment|/* Copyright (C) 1998  Kenneth Albanowski &lt;kjahds@kjahds.com&gt;,&n; *         1997, 1998  D. Jeff Dionne &lt;jeff@lineo.ca&gt;,&n; */
macro_line|#ifndef _M68K_SHGLPORTS_H
DECL|macro|_M68K_SHGLPORTS_H
mdefine_line|#define _M68K_SHGLPORTS_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/sched.h&gt;
macro_line|#ifdef CONFIG_SHGLCORE
r_extern
r_struct
id|semaphore
id|porte_interlock
suffix:semicolon
DECL|struct|SHGLCORE_PORT_QS
r_struct
id|SHGLCORE_PORT_QS
(brace
r_int
r_char
DECL|member|nullqs
id|nullqs
suffix:colon
l_int|1
comma
multiline_comment|/* COM1TX */
DECL|member|sbin
id|sbin
suffix:colon
l_int|1
comma
multiline_comment|/* PQS6 (PCS3) */
DECL|member|sbclk
id|sbclk
suffix:colon
l_int|1
comma
multiline_comment|/* PQS5 (PCS2) */
DECL|member|sbout
id|sbout
suffix:colon
l_int|1
comma
multiline_comment|/* PQS4 (PCS1) */
DECL|member|null4
id|null4
suffix:colon
l_int|4
suffix:semicolon
multiline_comment|/* MISO, MOSI, SCLK, /SS=PCS0 */
)brace
suffix:semicolon
DECL|macro|PORT_QS
mdefine_line|#define PORT_QS ((volatile struct SHGLCORE_PORT_QS*)PORTQS_ADDR)
DECL|struct|SHGLCORE_PORT_E
r_struct
id|SHGLCORE_PORT_E
(brace
r_int
r_char
DECL|member|dead
id|dead
suffix:colon
l_int|1
comma
multiline_comment|/* LED */
DECL|member|sbirigb
id|sbirigb
suffix:colon
l_int|1
comma
multiline_comment|/* PE6 */
DECL|member|ds
id|ds
suffix:colon
l_int|1
comma
multiline_comment|/* /DS */
DECL|member|nulle1
id|nulle1
suffix:colon
l_int|1
comma
multiline_comment|/* na */
DECL|member|sbpll
id|sbpll
suffix:colon
l_int|1
comma
multiline_comment|/* PE3 */
DECL|member|avec
id|avec
suffix:colon
l_int|1
comma
multiline_comment|/* /AVEC */
DECL|member|sbsrom
id|sbsrom
suffix:colon
l_int|1
comma
multiline_comment|/* PE1 */
DECL|member|sbpanel
id|sbpanel
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* PE0 */
)brace
suffix:semicolon
DECL|macro|PORT_E
mdefine_line|#define PORT_E ((volatile struct SHGLCORE_PORT_E*)PORTE_ADDR)
DECL|struct|SHGLCORE_PORT_F
r_struct
id|SHGLCORE_PORT_F
(brace
r_int
r_char
DECL|member|nullf1
id|nullf1
suffix:colon
l_int|4
comma
DECL|member|nullf2
id|nullf2
suffix:colon
l_int|4
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|PORT_F
mdefine_line|#define PORT_F ((volatile struct SHGLCORE_PORT_F*)PORTF_ADDR)
r_extern
r_int
id|comm_status_led
comma
id|comm_error_led
comma
id|alarm_led
suffix:semicolon
DECL|function|SET_COMM_STATUS_LED
r_static
r_inline
r_void
id|SET_COMM_STATUS_LED
c_func
(paren
r_int
id|value
)paren
(brace
id|BYTE_REF
c_func
(paren
id|SHGLCORE_ACC_ADDR
op_plus
l_int|0x100
op_plus
l_int|0
)paren
op_assign
id|comm_status_led
op_assign
id|value
suffix:semicolon
)brace
DECL|function|GET_COMM_STATUS_LED
r_static
r_inline
r_int
id|GET_COMM_STATUS_LED
c_func
(paren
r_void
)paren
(brace
r_return
id|comm_status_led
suffix:semicolon
)brace
DECL|function|SET_COMM_ERROR_LED
r_static
r_inline
r_void
id|SET_COMM_ERROR_LED
c_func
(paren
r_int
id|value
)paren
(brace
id|BYTE_REF
c_func
(paren
id|SHGLCORE_ACC_ADDR
op_plus
l_int|0x100
op_plus
l_int|1
)paren
op_assign
id|comm_error_led
op_assign
id|value
suffix:semicolon
)brace
DECL|function|GET_COMM_ERROR_LED
r_static
r_inline
r_int
id|GET_COMM_ERROR_LED
c_func
(paren
r_void
)paren
(brace
r_return
id|comm_error_led
suffix:semicolon
)brace
DECL|function|SET_ALARM_LED
r_static
r_inline
r_void
id|SET_ALARM_LED
c_func
(paren
r_int
id|value
)paren
(brace
id|BYTE_REF
c_func
(paren
id|SHGLCORE_ACC_ADDR
op_plus
l_int|0x100
op_plus
l_int|2
)paren
op_assign
id|alarm_led
op_assign
id|value
suffix:semicolon
)brace
DECL|function|GET_ALARM_LED
r_static
r_inline
r_int
id|GET_ALARM_LED
c_func
(paren
r_void
)paren
(brace
r_return
id|alarm_led
suffix:semicolon
)brace
macro_line|#endif
macro_line|#endif /* _M68K_SHGLPORTS_H */
eof
