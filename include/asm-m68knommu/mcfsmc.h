multiline_comment|/****************************************************************************/
multiline_comment|/*&n; *&t;mcfsmc.h -- SMC ethernet support for ColdFire environments.&n; *&n; *&t;(C) Copyright 1999-2002, Greg Ungerer (gerg@snapgear.com)&n; *&t;(C) Copyright 2000, Lineo Inc. (www.lineo.com) &n; */
multiline_comment|/****************************************************************************/
macro_line|#ifndef&t;mcfsmc_h
DECL|macro|mcfsmc_h
mdefine_line|#define&t;mcfsmc_h
multiline_comment|/****************************************************************************/
multiline_comment|/*&n; *&t;None of the current ColdFire targets that use the SMC91x111&n; *&t;allow 8 bit accesses. So this code is 16bit access only.&n; */
macro_line|#include &lt;linux/config.h&gt;
DECL|macro|outb
macro_line|#undef&t;outb
DECL|macro|inb
macro_line|#undef&t;inb
multiline_comment|/*&n; *&t;Re-defines for ColdFire environment... The SMC part is&n; *&t;mapped into memory space, so remap the PC-style in/out&n; *&t;routines to handle that.&n; */
DECL|macro|outb
mdefine_line|#define&t;outb&t;smc_outb
DECL|macro|inb
mdefine_line|#define&t;inb&t;smc_inb
DECL|macro|outw
mdefine_line|#define&t;outw&t;smc_outw
DECL|macro|outwd
mdefine_line|#define&t;outwd&t;smc_outwd
DECL|macro|inw
mdefine_line|#define&t;inw&t;smc_inw
DECL|macro|outl
mdefine_line|#define&t;outl&t;smc_outl
DECL|macro|inl
mdefine_line|#define&t;inl&t;smc_inl
DECL|macro|outsb
mdefine_line|#define&t;outsb&t;smc_outsb
DECL|macro|outsw
mdefine_line|#define&t;outsw&t;smc_outsw
DECL|macro|outsl
mdefine_line|#define&t;outsl&t;smc_outsl
DECL|macro|insb
mdefine_line|#define&t;insb&t;smc_insb
DECL|macro|insw
mdefine_line|#define&t;insw&t;smc_insw
DECL|macro|insl
mdefine_line|#define&t;insl&t;smc_insl
DECL|function|smc_inb
r_static
r_inline
r_int
id|smc_inb
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_register
r_int
r_int
id|w
suffix:semicolon
id|w
op_assign
op_star
(paren
(paren
r_volatile
r_int
r_int
op_star
)paren
(paren
id|addr
op_amp
op_complement
l_int|0x1
)paren
)paren
suffix:semicolon
r_return
(paren
(paren
id|addr
op_amp
l_int|0x1
)paren
ques
c_cond
id|w
suffix:colon
(paren
id|w
op_rshift
l_int|8
)paren
)paren
op_amp
l_int|0xff
suffix:semicolon
)brace
DECL|function|smc_outw
r_static
r_inline
r_void
id|smc_outw
c_func
(paren
r_int
r_int
id|val
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
)paren
op_assign
(paren
id|val
op_lshift
l_int|8
)paren
op_or
(paren
id|val
op_rshift
l_int|8
)paren
suffix:semicolon
)brace
DECL|function|smc_inw
r_static
r_inline
r_int
id|smc_inw
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_register
r_int
r_int
id|w
suffix:semicolon
id|w
op_assign
op_star
(paren
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
)paren
suffix:semicolon
r_return
(paren
(paren
id|w
op_lshift
l_int|8
)paren
op_or
(paren
id|w
op_rshift
l_int|8
)paren
)paren
op_amp
l_int|0xffff
suffix:semicolon
)brace
DECL|function|smc_outl
r_static
r_inline
r_void
id|smc_outl
c_func
(paren
r_int
r_int
id|val
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
)paren
op_assign
(paren
(paren
id|val
op_lshift
l_int|8
)paren
op_amp
l_int|0xff000000
)paren
op_or
(paren
(paren
id|val
op_rshift
l_int|8
)paren
op_amp
l_int|0x00ff0000
)paren
op_or
(paren
(paren
id|val
op_lshift
l_int|8
)paren
op_amp
l_int|0x0000ff00
)paren
op_or
(paren
(paren
id|val
op_rshift
l_int|8
)paren
op_amp
l_int|0x000000ff
)paren
suffix:semicolon
)brace
DECL|function|smc_outwd
r_static
r_inline
r_void
id|smc_outwd
c_func
(paren
r_int
r_int
id|val
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
)paren
op_assign
id|val
suffix:semicolon
)brace
multiline_comment|/*&n; *&t;The rep* functions are used to feed the data port with&n; *&t;raw data. So we do not byte swap them when copying.&n; */
DECL|function|smc_insb
r_static
r_inline
r_void
id|smc_insb
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|vbuf
comma
r_int
r_int
r_int
id|len
)paren
(brace
r_volatile
r_int
r_int
op_star
id|rp
suffix:semicolon
r_int
r_int
op_star
id|buf
comma
op_star
id|ebuf
suffix:semicolon
id|buf
op_assign
(paren
r_int
r_int
op_star
)paren
id|vbuf
suffix:semicolon
id|rp
op_assign
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
multiline_comment|/* Copy as words for as long as possible */
r_for
c_loop
(paren
id|ebuf
op_assign
id|buf
op_plus
(paren
id|len
op_rshift
l_int|1
)paren
suffix:semicolon
(paren
id|buf
OL
id|ebuf
)paren
suffix:semicolon
)paren
op_star
id|buf
op_increment
op_assign
op_star
id|rp
suffix:semicolon
multiline_comment|/* Lastly, handle left over byte */
r_if
c_cond
(paren
id|len
op_amp
l_int|0x1
)paren
op_star
(paren
(paren
r_int
r_char
op_star
)paren
id|buf
)paren
op_assign
(paren
op_star
id|rp
op_rshift
l_int|8
)paren
op_amp
l_int|0xff
suffix:semicolon
)brace
DECL|function|smc_insw
r_static
r_inline
r_void
id|smc_insw
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|vbuf
comma
r_int
r_int
id|len
)paren
(brace
r_volatile
r_int
r_int
op_star
id|rp
suffix:semicolon
r_int
r_int
op_star
id|buf
comma
op_star
id|ebuf
suffix:semicolon
id|buf
op_assign
(paren
r_int
r_int
op_star
)paren
id|vbuf
suffix:semicolon
id|rp
op_assign
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
r_for
c_loop
(paren
id|ebuf
op_assign
id|buf
op_plus
id|len
suffix:semicolon
(paren
id|buf
OL
id|ebuf
)paren
suffix:semicolon
)paren
op_star
id|buf
op_increment
op_assign
op_star
id|rp
suffix:semicolon
)brace
DECL|function|smc_insl
r_static
r_inline
r_void
id|smc_insl
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|vbuf
comma
r_int
r_int
id|len
)paren
(brace
r_volatile
r_int
r_int
op_star
id|rp
suffix:semicolon
r_int
r_int
op_star
id|buf
comma
op_star
id|ebuf
suffix:semicolon
id|buf
op_assign
(paren
r_int
r_int
op_star
)paren
id|vbuf
suffix:semicolon
id|rp
op_assign
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
r_for
c_loop
(paren
id|ebuf
op_assign
id|buf
op_plus
id|len
suffix:semicolon
(paren
id|buf
OL
id|ebuf
)paren
suffix:semicolon
)paren
op_star
id|buf
op_increment
op_assign
op_star
id|rp
suffix:semicolon
)brace
DECL|function|smc_outsw
r_static
r_inline
r_void
id|smc_outsw
c_func
(paren
r_int
r_int
id|addr
comma
r_const
r_void
op_star
id|vbuf
comma
r_int
r_int
id|len
)paren
(brace
r_volatile
r_int
r_int
op_star
id|rp
suffix:semicolon
r_int
r_int
op_star
id|buf
comma
op_star
id|ebuf
suffix:semicolon
id|buf
op_assign
(paren
r_int
r_int
op_star
)paren
id|vbuf
suffix:semicolon
id|rp
op_assign
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
r_for
c_loop
(paren
id|ebuf
op_assign
id|buf
op_plus
id|len
suffix:semicolon
(paren
id|buf
OL
id|ebuf
)paren
suffix:semicolon
)paren
op_star
id|rp
op_assign
op_star
id|buf
op_increment
suffix:semicolon
)brace
DECL|function|smc_outsl
r_static
r_inline
r_void
id|smc_outsl
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|vbuf
comma
r_int
r_int
id|len
)paren
(brace
r_volatile
r_int
r_int
op_star
id|rp
suffix:semicolon
r_int
r_int
op_star
id|buf
comma
op_star
id|ebuf
suffix:semicolon
id|buf
op_assign
(paren
r_int
r_int
op_star
)paren
id|vbuf
suffix:semicolon
id|rp
op_assign
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
r_for
c_loop
(paren
id|ebuf
op_assign
id|buf
op_plus
id|len
suffix:semicolon
(paren
id|buf
OL
id|ebuf
)paren
suffix:semicolon
)paren
op_star
id|rp
op_assign
op_star
id|buf
op_increment
suffix:semicolon
)brace
macro_line|#ifdef CONFIG_NETtel
multiline_comment|/*&n; *&t;Re-map the address space of at least one of the SMC ethernet&n; *&t;parts. Both parts power up decoding the same address, so we&n; *&t;need to move one of them first, before doing enything else.&n; *&n; *&t;We also increase the number of wait states for this part by one.&n; */
DECL|function|smc_remap
r_void
id|smc_remap
c_func
(paren
r_int
r_int
id|ioaddr
)paren
(brace
r_static
r_int
id|once
op_assign
l_int|0
suffix:semicolon
r_extern
r_int
r_int
id|ppdata
suffix:semicolon
r_if
c_cond
(paren
id|once
op_increment
op_eq
l_int|0
)paren
(brace
op_star
(paren
(paren
r_volatile
r_int
r_int
op_star
)paren
(paren
id|MCF_MBAR
op_plus
id|MCFSIM_PADDR
)paren
)paren
op_assign
l_int|0x00ec
suffix:semicolon
id|ppdata
op_or_assign
l_int|0x0080
suffix:semicolon
op_star
(paren
(paren
r_volatile
r_int
r_int
op_star
)paren
(paren
id|MCF_MBAR
op_plus
id|MCFSIM_PADAT
)paren
)paren
op_assign
id|ppdata
suffix:semicolon
id|outw
c_func
(paren
l_int|0x0001
comma
id|ioaddr
op_plus
id|BANK_SELECT
)paren
suffix:semicolon
id|outw
c_func
(paren
l_int|0x0001
comma
id|ioaddr
op_plus
id|BANK_SELECT
)paren
suffix:semicolon
id|outw
c_func
(paren
l_int|0x0067
comma
id|ioaddr
op_plus
id|BASE
)paren
suffix:semicolon
id|ppdata
op_and_assign
op_complement
l_int|0x0080
suffix:semicolon
op_star
(paren
(paren
r_volatile
r_int
r_int
op_star
)paren
(paren
id|MCF_MBAR
op_plus
id|MCFSIM_PADAT
)paren
)paren
op_assign
id|ppdata
suffix:semicolon
)brace
op_star
(paren
(paren
r_volatile
r_int
r_int
op_star
)paren
(paren
id|MCF_MBAR
op_plus
id|MCFSIM_CSCR3
)paren
)paren
op_assign
l_int|0x1180
suffix:semicolon
)brace
macro_line|#endif
multiline_comment|/****************************************************************************/
macro_line|#endif&t;/* mcfsmc_h */
eof
