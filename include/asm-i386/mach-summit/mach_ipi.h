macro_line|#ifndef __ASM_MACH_IPI_H
DECL|macro|__ASM_MACH_IPI_H
mdefine_line|#define __ASM_MACH_IPI_H
r_static
r_inline
r_void
id|send_IPI_mask_sequence
c_func
(paren
r_int
id|mask
comma
r_int
id|vector
)paren
suffix:semicolon
DECL|function|send_IPI_mask
r_static
r_inline
r_void
id|send_IPI_mask
c_func
(paren
r_int
id|mask
comma
r_int
id|vector
)paren
(brace
id|send_IPI_mask_sequence
c_func
(paren
id|mask
comma
id|vector
)paren
suffix:semicolon
)brace
DECL|function|send_IPI_allbutself
r_static
r_inline
r_void
id|send_IPI_allbutself
c_func
(paren
r_int
id|vector
)paren
(brace
r_int
id|cpu
suffix:semicolon
multiline_comment|/*&n;&t; * if there are no other CPUs in the system then we get an APIC send &n;&t; * error if we try to broadcast, thus avoid sending IPIs in this case.&n;&t; */
r_if
c_cond
(paren
op_logical_neg
(paren
id|num_online_cpus
c_func
(paren
)paren
OG
l_int|1
)paren
)paren
r_return
suffix:semicolon
multiline_comment|/* Pointless. Use send_IPI_mask to do this instead */
r_for
c_loop
(paren
id|cpu
op_assign
l_int|0
suffix:semicolon
id|cpu
OL
id|NR_CPUS
suffix:semicolon
op_increment
id|cpu
)paren
r_if
c_cond
(paren
id|cpu_online
c_func
(paren
id|cpu
)paren
op_logical_and
id|cpu
op_ne
id|smp_processor_id
c_func
(paren
)paren
)paren
id|send_IPI_mask
c_func
(paren
l_int|1
op_lshift
id|cpu
comma
id|vector
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
DECL|function|send_IPI_all
r_static
r_inline
r_void
id|send_IPI_all
c_func
(paren
r_int
id|vector
)paren
(brace
r_int
id|cpu
suffix:semicolon
multiline_comment|/* Pointless. Use send_IPI_mask to do this instead */
r_for
c_loop
(paren
id|cpu
op_assign
l_int|0
suffix:semicolon
id|cpu
OL
id|NR_CPUS
suffix:semicolon
op_increment
id|cpu
)paren
r_if
c_cond
(paren
id|cpu_online
c_func
(paren
id|cpu
)paren
)paren
id|send_IPI_mask
c_func
(paren
l_int|1
op_lshift
id|cpu
comma
id|vector
)paren
suffix:semicolon
)brace
macro_line|#endif /* __ASM_MACH_IPI_H */
eof
