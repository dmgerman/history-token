macro_line|#ifndef _I386_PGALLOC_H
DECL|macro|_I386_PGALLOC_H
mdefine_line|#define _I386_PGALLOC_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;asm/processor.h&gt;
macro_line|#include &lt;asm/fixmap.h&gt;
macro_line|#include &lt;linux/threads.h&gt;
DECL|macro|pgd_quicklist
mdefine_line|#define pgd_quicklist (current_cpu_data.pgd_quick)
DECL|macro|pmd_quicklist
mdefine_line|#define pmd_quicklist (current_cpu_data.pmd_quick)
DECL|macro|pte_quicklist
mdefine_line|#define pte_quicklist (current_cpu_data.pte_quick)
DECL|macro|pgtable_cache_size
mdefine_line|#define pgtable_cache_size (current_cpu_data.pgtable_cache_sz)
DECL|macro|pmd_populate
mdefine_line|#define pmd_populate(mm, pmd, pte) &bslash;&n;&t;&t;set_pmd(pmd, __pmd(_PAGE_TABLE + __pa(pte)))
multiline_comment|/*&n; * Allocate and free page tables.&n; */
macro_line|#if defined (CONFIG_X86_PAE)
multiline_comment|/*&n; * We can&squot;t include &lt;linux/slab.h&gt; here, thus these uglinesses.&n; */
r_struct
id|kmem_cache_s
suffix:semicolon
r_extern
r_struct
id|kmem_cache_s
op_star
id|pae_pgd_cachep
suffix:semicolon
r_extern
r_void
op_star
id|kmem_cache_alloc
c_func
(paren
r_struct
id|kmem_cache_s
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|kmem_cache_free
c_func
(paren
r_struct
id|kmem_cache_s
op_star
comma
r_void
op_star
)paren
suffix:semicolon
DECL|function|get_pgd_slow
r_static
r_inline
id|pgd_t
op_star
id|get_pgd_slow
c_func
(paren
r_void
)paren
(brace
r_int
id|i
suffix:semicolon
id|pgd_t
op_star
id|pgd
op_assign
id|kmem_cache_alloc
c_func
(paren
id|pae_pgd_cachep
comma
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pgd
)paren
(brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|USER_PTRS_PER_PGD
suffix:semicolon
id|i
op_increment
)paren
(brace
r_int
r_int
id|pmd
op_assign
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|pmd
)paren
r_goto
id|out_oom
suffix:semicolon
id|clear_page
c_func
(paren
id|pmd
)paren
suffix:semicolon
id|set_pgd
c_func
(paren
id|pgd
op_plus
id|i
comma
id|__pgd
c_func
(paren
l_int|1
op_plus
id|__pa
c_func
(paren
id|pmd
)paren
)paren
)paren
suffix:semicolon
)brace
id|memcpy
c_func
(paren
id|pgd
op_plus
id|USER_PTRS_PER_PGD
comma
id|swapper_pg_dir
op_plus
id|USER_PTRS_PER_PGD
comma
(paren
id|PTRS_PER_PGD
op_minus
id|USER_PTRS_PER_PGD
)paren
op_star
r_sizeof
(paren
id|pgd_t
)paren
)paren
suffix:semicolon
)brace
r_return
id|pgd
suffix:semicolon
id|out_oom
suffix:colon
r_for
c_loop
(paren
id|i
op_decrement
suffix:semicolon
id|i
op_ge
l_int|0
suffix:semicolon
id|i
op_decrement
)paren
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|__va
c_func
(paren
id|pgd_val
c_func
(paren
id|pgd
(braket
id|i
)braket
)paren
op_minus
l_int|1
)paren
)paren
suffix:semicolon
id|kmem_cache_free
c_func
(paren
id|pae_pgd_cachep
comma
id|pgd
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
macro_line|#else
DECL|function|get_pgd_slow
r_static
r_inline
id|pgd_t
op_star
id|get_pgd_slow
c_func
(paren
r_void
)paren
(brace
id|pgd_t
op_star
id|pgd
op_assign
(paren
id|pgd_t
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pgd
)paren
(brace
id|memset
c_func
(paren
id|pgd
comma
l_int|0
comma
id|USER_PTRS_PER_PGD
op_star
r_sizeof
(paren
id|pgd_t
)paren
)paren
suffix:semicolon
id|memcpy
c_func
(paren
id|pgd
op_plus
id|USER_PTRS_PER_PGD
comma
id|swapper_pg_dir
op_plus
id|USER_PTRS_PER_PGD
comma
(paren
id|PTRS_PER_PGD
op_minus
id|USER_PTRS_PER_PGD
)paren
op_star
r_sizeof
(paren
id|pgd_t
)paren
)paren
suffix:semicolon
)brace
r_return
id|pgd
suffix:semicolon
)brace
macro_line|#endif /* CONFIG_X86_PAE */
DECL|function|get_pgd_fast
r_static
r_inline
id|pgd_t
op_star
id|get_pgd_fast
c_func
(paren
r_void
)paren
(brace
r_int
r_int
op_star
id|ret
suffix:semicolon
r_if
c_cond
(paren
(paren
id|ret
op_assign
id|pgd_quicklist
)paren
op_ne
l_int|NULL
)paren
(brace
id|pgd_quicklist
op_assign
(paren
r_int
r_int
op_star
)paren
(paren
op_star
id|ret
)paren
suffix:semicolon
id|ret
(braket
l_int|0
)braket
op_assign
l_int|0
suffix:semicolon
id|pgtable_cache_size
op_decrement
suffix:semicolon
)brace
r_else
id|ret
op_assign
(paren
r_int
r_int
op_star
)paren
id|get_pgd_slow
c_func
(paren
)paren
suffix:semicolon
r_return
(paren
id|pgd_t
op_star
)paren
id|ret
suffix:semicolon
)brace
DECL|function|free_pgd_fast
r_static
r_inline
r_void
id|free_pgd_fast
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
op_star
(paren
r_int
r_int
op_star
)paren
id|pgd
op_assign
(paren
r_int
r_int
)paren
id|pgd_quicklist
suffix:semicolon
id|pgd_quicklist
op_assign
(paren
r_int
r_int
op_star
)paren
id|pgd
suffix:semicolon
id|pgtable_cache_size
op_increment
suffix:semicolon
)brace
DECL|function|free_pgd_slow
r_static
r_inline
r_void
id|free_pgd_slow
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
macro_line|#if defined(CONFIG_X86_PAE)
r_int
id|i
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|USER_PTRS_PER_PGD
suffix:semicolon
id|i
op_increment
)paren
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|__va
c_func
(paren
id|pgd_val
c_func
(paren
id|pgd
(braket
id|i
)braket
)paren
op_minus
l_int|1
)paren
)paren
suffix:semicolon
id|kmem_cache_free
c_func
(paren
id|pae_pgd_cachep
comma
id|pgd
)paren
suffix:semicolon
macro_line|#else
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pgd
)paren
suffix:semicolon
macro_line|#endif
)brace
DECL|function|pte_alloc_one
r_static
r_inline
id|pte_t
op_star
id|pte_alloc_one
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|address
)paren
(brace
id|pte_t
op_star
id|pte
suffix:semicolon
id|pte
op_assign
(paren
id|pte_t
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pte
)paren
id|clear_page
c_func
(paren
id|pte
)paren
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pte_alloc_one_fast
r_static
r_inline
id|pte_t
op_star
id|pte_alloc_one_fast
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|address
)paren
(brace
r_int
r_int
op_star
id|ret
suffix:semicolon
r_if
c_cond
(paren
(paren
id|ret
op_assign
(paren
r_int
r_int
op_star
)paren
id|pte_quicklist
)paren
op_ne
l_int|NULL
)paren
(brace
id|pte_quicklist
op_assign
(paren
r_int
r_int
op_star
)paren
(paren
op_star
id|ret
)paren
suffix:semicolon
id|ret
(braket
l_int|0
)braket
op_assign
id|ret
(braket
l_int|1
)braket
suffix:semicolon
id|pgtable_cache_size
op_decrement
suffix:semicolon
)brace
r_return
(paren
id|pte_t
op_star
)paren
id|ret
suffix:semicolon
)brace
DECL|function|pte_free_fast
r_static
r_inline
r_void
id|pte_free_fast
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
op_star
(paren
r_int
r_int
op_star
)paren
id|pte
op_assign
(paren
r_int
r_int
)paren
id|pte_quicklist
suffix:semicolon
id|pte_quicklist
op_assign
(paren
r_int
r_int
op_star
)paren
id|pte
suffix:semicolon
id|pgtable_cache_size
op_increment
suffix:semicolon
)brace
DECL|function|pte_free_slow
r_static
id|__inline__
r_void
id|pte_free_slow
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
)brace
DECL|macro|pte_free
mdefine_line|#define pte_free(pte)&t;&t;pte_free_slow(pte)
DECL|macro|pgd_free
mdefine_line|#define pgd_free(pgd)&t;&t;free_pgd_slow(pgd)
DECL|macro|pgd_alloc
mdefine_line|#define pgd_alloc(mm)&t;&t;get_pgd_fast()
multiline_comment|/*&n; * allocating and freeing a pmd is trivial: the 1-entry pmd is&n; * inside the pgd, so has no extra memory associated with it.&n; * (In the PAE case we free the pmds as part of the pgd.)&n; */
DECL|macro|pmd_alloc_one_fast
mdefine_line|#define pmd_alloc_one_fast(mm, addr)&t;({ BUG(); ((pmd_t *)1); })
DECL|macro|pmd_alloc_one
mdefine_line|#define pmd_alloc_one(mm, addr)&t;&t;({ BUG(); ((pmd_t *)2); })
DECL|macro|pmd_free_slow
mdefine_line|#define pmd_free_slow(x)&t;&t;do { } while (0)
DECL|macro|pmd_free_fast
mdefine_line|#define pmd_free_fast(x)&t;&t;do { } while (0)
DECL|macro|pmd_free
mdefine_line|#define pmd_free(x)&t;&t;&t;do { } while (0)
DECL|macro|pgd_populate
mdefine_line|#define pgd_populate(mm, pmd, pte)&t;BUG()
r_extern
r_int
id|do_check_pgt_cache
c_func
(paren
r_int
comma
r_int
)paren
suffix:semicolon
multiline_comment|/*&n; * TLB flushing:&n; *&n; *  - flush_tlb() flushes the current mm struct TLBs&n; *  - flush_tlb_all() flushes all processes TLBs&n; *  - flush_tlb_mm(mm) flushes the specified mm context TLB&squot;s&n; *  - flush_tlb_page(vma, vmaddr) flushes one page&n; *  - flush_tlb_range(vma, start, end) flushes a range of pages&n; *  - flush_tlb_pgtables(mm, start, end) flushes a range of page tables&n; *&n; * ..but the i386 has somewhat limited tlb flushing capabilities,&n; * and page-granular flushes are available only on i486 and up.&n; */
macro_line|#ifndef CONFIG_SMP
DECL|macro|flush_tlb
mdefine_line|#define flush_tlb() __flush_tlb()
DECL|macro|flush_tlb_all
mdefine_line|#define flush_tlb_all() __flush_tlb_all()
DECL|macro|local_flush_tlb
mdefine_line|#define local_flush_tlb() __flush_tlb()
DECL|function|flush_tlb_mm
r_static
r_inline
r_void
id|flush_tlb_mm
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
r_if
c_cond
(paren
id|mm
op_eq
id|current-&gt;active_mm
)paren
id|__flush_tlb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|flush_tlb_page
r_static
r_inline
r_void
id|flush_tlb_page
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|addr
)paren
(brace
r_if
c_cond
(paren
id|vma-&gt;vm_mm
op_eq
id|current-&gt;active_mm
)paren
id|__flush_tlb_one
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|flush_tlb_range
r_static
r_inline
r_void
id|flush_tlb_range
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
(brace
r_if
c_cond
(paren
id|vma-&gt;vm_mm
op_eq
id|current-&gt;active_mm
)paren
id|__flush_tlb
c_func
(paren
)paren
suffix:semicolon
)brace
macro_line|#else
macro_line|#include &lt;asm/smp.h&gt;
DECL|macro|local_flush_tlb
mdefine_line|#define local_flush_tlb() &bslash;&n;&t;__flush_tlb()
r_extern
r_void
id|flush_tlb_all
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|flush_tlb_current_task
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|flush_tlb_mm
c_func
(paren
r_struct
id|mm_struct
op_star
)paren
suffix:semicolon
r_extern
r_void
id|flush_tlb_page
c_func
(paren
r_struct
id|vm_area_struct
op_star
comma
r_int
r_int
)paren
suffix:semicolon
DECL|macro|flush_tlb
mdefine_line|#define flush_tlb()&t;flush_tlb_current_task()
DECL|function|flush_tlb_range
r_static
r_inline
r_void
id|flush_tlb_range
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
(brace
id|flush_tlb_mm
c_func
(paren
id|vma-&gt;vm_mm
)paren
suffix:semicolon
)brace
DECL|macro|TLBSTATE_OK
mdefine_line|#define TLBSTATE_OK&t;1
DECL|macro|TLBSTATE_LAZY
mdefine_line|#define TLBSTATE_LAZY&t;2
DECL|struct|tlb_state
r_struct
id|tlb_state
(brace
DECL|member|active_mm
r_struct
id|mm_struct
op_star
id|active_mm
suffix:semicolon
DECL|member|state
r_int
id|state
suffix:semicolon
DECL|member|__cacheline_padding
r_char
id|__cacheline_padding
(braket
l_int|24
)braket
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|tlb_state
id|cpu_tlbstate
(braket
id|NR_CPUS
)braket
suffix:semicolon
macro_line|#endif
DECL|function|flush_tlb_pgtables
r_static
r_inline
r_void
id|flush_tlb_pgtables
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
(brace
multiline_comment|/* i386 does not keep any page table caches in TLB */
)brace
macro_line|#endif /* _I386_PGALLOC_H */
eof
