multiline_comment|/*&n; *  include/asm-i386/mach-pc9800/mach_time.h&n; *&n; *  Machine specific set RTC function for PC-9800.&n; *  Written by Osamu Tomita &lt;tomita@cinet.co.jp&gt;&n; */
macro_line|#ifndef _MACH_TIME_H
DECL|macro|_MACH_TIME_H
mdefine_line|#define _MACH_TIME_H
macro_line|#include &lt;linux/bcd.h&gt;
macro_line|#include &lt;linux/upd4990a.h&gt;
multiline_comment|/* for check timing call set_rtc_mmss() */
multiline_comment|/* used in arch/i386/time.c::do_timer_interrupt() */
multiline_comment|/*&n; * Because PC-9800&squot;s RTC (NEC uPD4990A) does not allow setting&n; * time partially, we always have to read-modify-write the&n; * entire time (including year) so that set_rtc_mmss() will&n; * take quite much time to execute.  You may want to relax&n; * RTC resetting interval (currently ~11 minuts)...&n; */
DECL|macro|USEC_AFTER
mdefine_line|#define USEC_AFTER&t;1000000
DECL|macro|USEC_BEFORE
mdefine_line|#define USEC_BEFORE&t;0
DECL|function|mach_set_rtc_mmss
r_static
r_inline
r_int
id|mach_set_rtc_mmss
c_func
(paren
r_int
r_int
id|nowtime
)paren
(brace
r_int
id|retval
op_assign
l_int|0
suffix:semicolon
r_int
id|real_seconds
comma
id|real_minutes
comma
id|cmos_minutes
suffix:semicolon
r_struct
id|upd4990a_raw_data
id|data
suffix:semicolon
id|upd4990a_get_time
c_func
(paren
op_amp
id|data
comma
l_int|1
)paren
suffix:semicolon
id|cmos_minutes
op_assign
id|BCD2BIN
c_func
(paren
id|data.min
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * since we&squot;re only adjusting minutes and seconds,&n;&t; * don&squot;t interfere with hour overflow. This avoids&n;&t; * messing with unknown time zones but requires your&n;&t; * RTC not to be off by more than 15 minutes&n;&t; */
id|real_seconds
op_assign
id|nowtime
op_mod
l_int|60
suffix:semicolon
id|real_minutes
op_assign
id|nowtime
op_div
l_int|60
suffix:semicolon
r_if
c_cond
(paren
(paren
(paren
id|abs
c_func
(paren
id|real_minutes
op_minus
id|cmos_minutes
)paren
op_plus
l_int|15
)paren
op_div
l_int|30
)paren
op_amp
l_int|1
)paren
id|real_minutes
op_add_assign
l_int|30
suffix:semicolon
multiline_comment|/* correct for half hour time zone */
id|real_minutes
op_mod_assign
l_int|60
suffix:semicolon
r_if
c_cond
(paren
id|abs
c_func
(paren
id|real_minutes
op_minus
id|cmos_minutes
)paren
OL
l_int|30
)paren
(brace
id|u8
id|temp_seconds
op_assign
(paren
id|real_seconds
op_div
l_int|10
)paren
op_star
l_int|16
op_plus
id|real_seconds
op_mod
l_int|10
suffix:semicolon
id|u8
id|temp_minutes
op_assign
(paren
id|real_minutes
op_div
l_int|10
)paren
op_star
l_int|16
op_plus
id|real_minutes
op_mod
l_int|10
suffix:semicolon
r_if
c_cond
(paren
id|data.sec
op_ne
id|temp_seconds
op_logical_or
id|data.min
op_ne
id|temp_minutes
)paren
(brace
id|data.sec
op_assign
id|temp_seconds
suffix:semicolon
id|data.min
op_assign
id|temp_minutes
suffix:semicolon
id|upd4990a_set_time
c_func
(paren
op_amp
id|data
comma
l_int|1
)paren
suffix:semicolon
)brace
)brace
r_else
(brace
id|printk
c_func
(paren
id|KERN_WARNING
l_string|&quot;set_rtc_mmss: can&squot;t update from %d to %d&bslash;n&quot;
comma
id|cmos_minutes
comma
id|real_minutes
)paren
suffix:semicolon
id|retval
op_assign
op_minus
l_int|1
suffix:semicolon
)brace
multiline_comment|/* uPD4990A users&squot; manual says we should issue Register Hold&n;&t; * command after reading time, or future Time Read command&n;&t; * may not work.  When we have set the time, this also starts&n;&t; * the clock.&n;&t; */
id|upd4990a_serial_command
c_func
(paren
id|UPD4990A_REGISTER_HOLD
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
DECL|function|mach_get_cmos_time
r_static
r_inline
r_int
r_int
id|mach_get_cmos_time
c_func
(paren
r_void
)paren
(brace
r_int
id|i
suffix:semicolon
id|u8
id|prev
comma
id|cur
suffix:semicolon
r_int
r_int
id|year
suffix:semicolon
r_struct
id|upd4990a_raw_data
id|data
suffix:semicolon
multiline_comment|/* Connect uPD4990A&squot;s DATA OUT pin to its 1Hz reference clock. */
id|upd4990a_serial_command
c_func
(paren
id|UPD4990A_REGISTER_HOLD
)paren
suffix:semicolon
multiline_comment|/* Catch rising edge of reference clock.  */
id|prev
op_assign
op_complement
id|UPD4990A_READ_DATA
c_func
(paren
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|1800000
suffix:semicolon
id|i
op_increment
)paren
(brace
multiline_comment|/* may take up to 1 second... */
id|__asm__
(paren
l_string|&quot;outb %%al,%0&quot;
suffix:colon
suffix:colon
l_string|&quot;N&quot;
(paren
l_int|0x5f
)paren
)paren
suffix:semicolon
multiline_comment|/* 0.6usec delay */
id|cur
op_assign
id|UPD4990A_READ_DATA
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|prev
op_amp
id|cur
op_amp
l_int|1
)paren
)paren
r_break
suffix:semicolon
id|prev
op_assign
op_complement
id|cur
suffix:semicolon
)brace
id|upd4990a_get_time
c_func
(paren
op_amp
id|data
comma
l_int|0
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|year
op_assign
id|BCD2BIN
c_func
(paren
id|data.year
)paren
op_plus
l_int|1900
)paren
OL
l_int|1995
)paren
id|year
op_add_assign
l_int|100
suffix:semicolon
r_return
id|mktime
c_func
(paren
id|year
comma
id|data.mon
comma
id|BCD2BIN
c_func
(paren
id|data.mday
)paren
comma
id|BCD2BIN
c_func
(paren
id|data.hour
)paren
comma
id|BCD2BIN
c_func
(paren
id|data.min
)paren
comma
id|BCD2BIN
c_func
(paren
id|data.sec
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif /* !_MACH_TIME_H */
eof
