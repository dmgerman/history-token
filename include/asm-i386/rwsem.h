multiline_comment|/* rwsem.h: R/W semaphores based on spinlocks&n; *&n; * Written by David Howells (dhowells@redhat.com).&n; *&n; * Derived from asm-i386/semaphore.h&n; */
macro_line|#ifndef _I386_RWSEM_H
DECL|macro|_I386_RWSEM_H
mdefine_line|#define _I386_RWSEM_H
macro_line|#include &lt;linux/linkage.h&gt;
DECL|macro|RWSEM_DEBUG
mdefine_line|#define RWSEM_DEBUG 0
DECL|macro|RWSEM_DEBUG_MAGIC
mdefine_line|#define RWSEM_DEBUG_MAGIC 0
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;asm/system.h&gt;
macro_line|#include &lt;asm/atomic.h&gt;
macro_line|#include &lt;asm/spinlock.h&gt;
macro_line|#include &lt;linux/wait.h&gt;
macro_line|#if RWSEM_DEBUG
DECL|macro|rwsemdebug
mdefine_line|#define rwsemdebug(FMT,...) do { if (sem-&gt;debug) printk(FMT,__VA_ARGS__); } while(0)
macro_line|#else
DECL|macro|rwsemdebug
mdefine_line|#define rwsemdebug(FMT,...)
macro_line|#endif
multiline_comment|/* old gcc */
macro_line|#if RWSEM_DEBUG
singleline_comment|//#define rwsemdebug(FMT, ARGS...) do { if (sem-&gt;debug) printk(FMT,##ARGS); } while(0)
macro_line|#else
singleline_comment|//#define rwsemdebug(FMT, ARGS...)
macro_line|#endif
macro_line|#ifdef CONFIG_X86_XADD
macro_line|#include &lt;asm/rwsem-xadd.h&gt; /* use XADD based semaphores if possible */
macro_line|#else
macro_line|#include &lt;asm/rwsem-spin.h&gt; /* use spinlock based semaphores otherwise */
macro_line|#endif
multiline_comment|/* we use FASTCALL convention for the helpers */
r_extern
r_struct
id|rw_semaphore
op_star
id|FASTCALL
c_func
(paren
id|__down_read_failed
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
)paren
suffix:semicolon
r_extern
r_struct
id|rw_semaphore
op_star
id|FASTCALL
c_func
(paren
id|__down_write_failed
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
)paren
suffix:semicolon
r_extern
r_struct
id|rw_semaphore
op_star
id|FASTCALL
c_func
(paren
id|__rwsem_wake
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
)paren
suffix:semicolon
multiline_comment|/*&n; * lock for reading&n; */
DECL|function|down_read
r_static
r_inline
r_void
id|down_read
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|rwsemdebug
c_func
(paren
l_string|&quot;Entering down_read(count=%08x)&bslash;n&quot;
comma
id|atomic_read
c_func
(paren
op_amp
id|sem-&gt;count
)paren
)paren
suffix:semicolon
macro_line|#if RWSEM_DEBUG_MAGIC
r_if
c_cond
(paren
id|sem-&gt;__magic
op_ne
(paren
r_int
)paren
op_amp
id|sem-&gt;__magic
)paren
id|BUG
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
id|__down_read
c_func
(paren
id|sem
)paren
suffix:semicolon
macro_line|#if RWSEM_DEBUG_MAGIC
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|sem-&gt;writers
)paren
)paren
id|BUG
c_func
(paren
)paren
suffix:semicolon
id|atomic_inc
c_func
(paren
op_amp
id|sem-&gt;readers
)paren
suffix:semicolon
macro_line|#endif
id|rwsemdebug
c_func
(paren
l_string|&quot;Leaving down_read(count=%08x)&bslash;n&quot;
comma
id|atomic_read
c_func
(paren
op_amp
id|sem-&gt;count
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * lock for writing&n; */
DECL|function|down_write
r_static
r_inline
r_void
id|down_write
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|rwsemdebug
c_func
(paren
l_string|&quot;Entering down_write(count=%08x)&bslash;n&quot;
comma
id|atomic_read
c_func
(paren
op_amp
id|sem-&gt;count
)paren
)paren
suffix:semicolon
macro_line|#if RWSEM_DEBUG_MAGIC
r_if
c_cond
(paren
id|sem-&gt;__magic
op_ne
(paren
r_int
)paren
op_amp
id|sem-&gt;__magic
)paren
id|BUG
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
id|__down_write
c_func
(paren
id|sem
)paren
suffix:semicolon
macro_line|#if RWSEM_DEBUG_MAGIC
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|sem-&gt;writers
)paren
)paren
id|BUG
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|sem-&gt;readers
)paren
)paren
id|BUG
c_func
(paren
)paren
suffix:semicolon
id|atomic_inc
c_func
(paren
op_amp
id|sem-&gt;writers
)paren
suffix:semicolon
macro_line|#endif
id|rwsemdebug
c_func
(paren
l_string|&quot;Leaving down_write(count=%08x)&bslash;n&quot;
comma
id|atomic_read
c_func
(paren
op_amp
id|sem-&gt;count
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * release a read lock&n; */
DECL|function|up_read
r_static
r_inline
r_void
id|up_read
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|rwsemdebug
c_func
(paren
l_string|&quot;Entering up_read(count=%08x)&bslash;n&quot;
comma
id|atomic_read
c_func
(paren
op_amp
id|sem-&gt;count
)paren
)paren
suffix:semicolon
macro_line|#if RWSEM_DEBUG_MAGIC
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|sem-&gt;writers
)paren
)paren
id|BUG
c_func
(paren
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|sem-&gt;readers
)paren
suffix:semicolon
macro_line|#endif
id|__up_read
c_func
(paren
id|sem
)paren
suffix:semicolon
id|rwsemdebug
c_func
(paren
l_string|&quot;Leaving up_read(count=%08x)&bslash;n&quot;
comma
id|atomic_read
c_func
(paren
op_amp
id|sem-&gt;count
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * release a write lock&n; */
DECL|function|up_write
r_static
r_inline
r_void
id|up_write
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|rwsemdebug
c_func
(paren
l_string|&quot;Entering up_write(count=%08x)&bslash;n&quot;
comma
id|atomic_read
c_func
(paren
op_amp
id|sem-&gt;count
)paren
)paren
suffix:semicolon
macro_line|#if RWSEM_DEBUG_MAGIC
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|sem-&gt;readers
)paren
)paren
id|BUG
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|sem-&gt;writers
)paren
op_ne
l_int|1
)paren
id|BUG
c_func
(paren
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|sem-&gt;writers
)paren
suffix:semicolon
macro_line|#endif
id|__up_write
c_func
(paren
id|sem
)paren
suffix:semicolon
id|rwsemdebug
c_func
(paren
l_string|&quot;Leaving up_write(count=%08x)&bslash;n&quot;
comma
id|atomic_read
c_func
(paren
op_amp
id|sem-&gt;count
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _I386_RWSEM_H */
eof
