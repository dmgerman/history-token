macro_line|#ifndef __ARCH_DESC_H
DECL|macro|__ARCH_DESC_H
mdefine_line|#define __ARCH_DESC_H
macro_line|#include &lt;asm/ldt.h&gt;
multiline_comment|/*&n; * The layout of the per-CPU GDT under Linux:&n; *&n; *   0 - null&n; *   1 - Thread-Local Storage (TLS) segment&n; *   2 - kernel code segment&n; *   3 - kernel data segment&n; *   4 - user code segment&t;&t;&lt;==== new cacheline&n; *   5 - user data segment&n; *   6 - TSS&n; *   7 - LDT&n; *   8 - APM BIOS support&t;&t;&lt;==== new cacheline&n; *   9 - APM BIOS support&n; *  10 - APM BIOS support&n; *  11 - APM BIOS support&n; *  12 - PNPBIOS support&t;&t;&lt;==== new cacheline&n; *  13 - PNPBIOS support&n; *  14 - PNPBIOS support&n; *  15 - PNPBIOS support&n; *  16 - PNPBIOS support&t;&t;&lt;==== new cacheline&n; *  17 - not used&n; *  18 - not used&n; *  19 - not used&n; */
DECL|macro|TLS_ENTRY
mdefine_line|#define TLS_ENTRY 1
DECL|macro|TSS_ENTRY
mdefine_line|#define TSS_ENTRY 6
DECL|macro|LDT_ENTRY
mdefine_line|#define LDT_ENTRY 7
multiline_comment|/*&n; * The interrupt descriptor table has room for 256 idt&squot;s,&n; * the global descriptor table is dependent on the number&n; * of tasks we can have..&n; *&n; * We pad the GDT to cacheline boundary.&n; */
DECL|macro|IDT_ENTRIES
mdefine_line|#define IDT_ENTRIES 256
DECL|macro|GDT_ENTRIES
mdefine_line|#define GDT_ENTRIES 20
macro_line|#ifndef __ASSEMBLY__
macro_line|#include &lt;asm/mmu.h&gt;
DECL|macro|GDT_SIZE
mdefine_line|#define GDT_SIZE (GDT_ENTRIES*sizeof(struct desc_struct))
r_extern
r_struct
id|desc_struct
id|cpu_gdt_table
(braket
id|NR_CPUS
)braket
(braket
id|GDT_ENTRIES
)braket
suffix:semicolon
DECL|struct|Xgt_desc_struct
r_struct
id|Xgt_desc_struct
(brace
DECL|member|size
r_int
r_int
id|size
suffix:semicolon
DECL|member|address
r_int
r_int
id|address
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
r_extern
r_struct
id|Xgt_desc_struct
id|idt_descr
comma
id|cpu_gdt_descr
(braket
id|NR_CPUS
)braket
suffix:semicolon
DECL|macro|load_TR_desc
mdefine_line|#define load_TR_desc() __asm__ __volatile__(&quot;ltr %%ax&quot;::&quot;a&quot; (TSS_ENTRY&lt;&lt;3))
DECL|macro|load_LDT_desc
mdefine_line|#define load_LDT_desc() __asm__ __volatile__(&quot;lldt %%ax&quot;::&quot;a&quot; (LDT_ENTRY&lt;&lt;3))
multiline_comment|/*&n; * This is the ldt that every process will get unless we need&n; * something other than this.&n; */
r_extern
r_struct
id|desc_struct
id|default_ldt
(braket
)braket
suffix:semicolon
r_extern
r_void
id|set_intr_gate
c_func
(paren
r_int
r_int
id|irq
comma
r_void
op_star
id|addr
)paren
suffix:semicolon
DECL|macro|_set_tssldt_desc
mdefine_line|#define _set_tssldt_desc(n,addr,limit,type) &bslash;&n;__asm__ __volatile__ (&quot;movw %w3,0(%2)&bslash;n&bslash;t&quot; &bslash;&n;&t;&quot;movw %%ax,2(%2)&bslash;n&bslash;t&quot; &bslash;&n;&t;&quot;rorl $16,%%eax&bslash;n&bslash;t&quot; &bslash;&n;&t;&quot;movb %%al,4(%2)&bslash;n&bslash;t&quot; &bslash;&n;&t;&quot;movb %4,5(%2)&bslash;n&bslash;t&quot; &bslash;&n;&t;&quot;movb $0,6(%2)&bslash;n&bslash;t&quot; &bslash;&n;&t;&quot;movb %%ah,7(%2)&bslash;n&bslash;t&quot; &bslash;&n;&t;&quot;rorl $16,%%eax&quot; &bslash;&n;&t;: &quot;=m&quot;(*(n)) : &quot;a&quot; (addr), &quot;r&quot;(n), &quot;ir&quot;(limit), &quot;i&quot;(type))
DECL|function|set_tss_desc
r_static
r_inline
r_void
id|set_tss_desc
c_func
(paren
r_int
r_int
id|cpu
comma
r_void
op_star
id|addr
)paren
(brace
id|_set_tssldt_desc
c_func
(paren
op_amp
id|cpu_gdt_table
(braket
id|cpu
)braket
(braket
id|TSS_ENTRY
)braket
comma
(paren
r_int
)paren
id|addr
comma
l_int|235
comma
l_int|0x89
)paren
suffix:semicolon
)brace
DECL|function|set_ldt_desc
r_static
r_inline
r_void
id|set_ldt_desc
c_func
(paren
r_int
r_int
id|cpu
comma
r_void
op_star
id|addr
comma
r_int
r_int
id|size
)paren
(brace
id|_set_tssldt_desc
c_func
(paren
op_amp
id|cpu_gdt_table
(braket
id|cpu
)braket
(braket
id|LDT_ENTRY
)braket
comma
(paren
r_int
)paren
id|addr
comma
(paren
(paren
id|size
op_lshift
l_int|3
)paren
op_minus
l_int|1
)paren
comma
l_int|0x82
)paren
suffix:semicolon
)brace
DECL|macro|TLS_FLAGS_MASK
mdefine_line|#define TLS_FLAGS_MASK&t;&t;&t;0x00000003
DECL|macro|TLS_FLAG_WRITABLE
mdefine_line|#define TLS_FLAG_WRITABLE&t;&t;0x00000001
DECL|macro|TLS_FLAG_CLEAR
mdefine_line|#define TLS_FLAG_CLEAR&t;&t;&t;0x00000002
DECL|function|load_TLS_desc
r_static
r_inline
r_void
id|load_TLS_desc
c_func
(paren
r_struct
id|thread_struct
op_star
id|t
comma
r_int
r_int
id|cpu
)paren
(brace
id|cpu_gdt_table
(braket
id|cpu
)braket
(braket
id|TLS_ENTRY
)braket
op_assign
id|t-&gt;tls_desc
suffix:semicolon
)brace
DECL|function|clear_LDT
r_static
r_inline
r_void
id|clear_LDT
c_func
(paren
r_void
)paren
(brace
id|set_ldt_desc
c_func
(paren
id|smp_processor_id
c_func
(paren
)paren
comma
op_amp
id|default_ldt
(braket
l_int|0
)braket
comma
l_int|5
)paren
suffix:semicolon
id|load_LDT_desc
c_func
(paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * load one particular LDT into the current CPU&n; */
DECL|function|load_LDT
r_static
r_inline
r_void
id|load_LDT
(paren
id|mm_context_t
op_star
id|pc
)paren
(brace
r_void
op_star
id|segments
op_assign
id|pc-&gt;ldt
suffix:semicolon
r_int
id|count
op_assign
id|pc-&gt;size
suffix:semicolon
r_if
c_cond
(paren
id|likely
c_func
(paren
op_logical_neg
id|count
)paren
)paren
(brace
id|segments
op_assign
op_amp
id|default_ldt
(braket
l_int|0
)braket
suffix:semicolon
id|count
op_assign
l_int|5
suffix:semicolon
)brace
id|set_ldt_desc
c_func
(paren
id|smp_processor_id
c_func
(paren
)paren
comma
id|segments
comma
id|count
)paren
suffix:semicolon
id|load_LDT_desc
c_func
(paren
)paren
suffix:semicolon
)brace
macro_line|#endif /* !__ASSEMBLY__ */
macro_line|#endif
eof
