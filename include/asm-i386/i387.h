multiline_comment|/*&n; * include/asm-i386/i387.h&n; *&n; * Copyright (C) 1994 Linus Torvalds&n; *&n; * Pentium III FXSR, SSE support&n; * General FPU state handling cleanups&n; *&t;Gareth Hughes &lt;gareth@valinux.com&gt;, May 2000&n; */
macro_line|#ifndef __ASM_I386_I387_H
DECL|macro|__ASM_I386_I387_H
mdefine_line|#define __ASM_I386_I387_H
macro_line|#include &lt;linux/sched.h&gt;
macro_line|#include &lt;linux/init.h&gt;
macro_line|#include &lt;asm/processor.h&gt;
macro_line|#include &lt;asm/sigcontext.h&gt;
macro_line|#include &lt;asm/user.h&gt;
r_extern
r_int
r_int
id|mxcsr_feature_mask
suffix:semicolon
r_extern
r_void
id|mxcsr_feature_mask_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|init_fpu
c_func
(paren
r_struct
id|task_struct
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * FPU lazy state save handling...&n; */
r_extern
r_void
id|restore_fpu
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
)paren
suffix:semicolon
r_extern
r_void
id|kernel_fpu_begin
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|macro|kernel_fpu_end
mdefine_line|#define kernel_fpu_end() do { stts(); preempt_enable(); } while(0)
multiline_comment|/*&n; * These must be called with preempt disabled&n; */
DECL|function|__save_init_fpu
r_static
r_inline
r_void
id|__save_init_fpu
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
)paren
(brace
r_if
c_cond
(paren
id|cpu_has_fxsr
)paren
(brace
id|asm
r_volatile
(paren
l_string|&quot;fxsave %0 ; fnclex&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|tsk-&gt;thread.i387.fxsave
)paren
)paren
suffix:semicolon
)brace
r_else
(brace
id|asm
r_volatile
(paren
l_string|&quot;fnsave %0 ; fwait&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|tsk-&gt;thread.i387.fsave
)paren
)paren
suffix:semicolon
)brace
id|tsk-&gt;thread_info-&gt;status
op_and_assign
op_complement
id|TS_USEDFPU
suffix:semicolon
)brace
DECL|macro|__unlazy_fpu
mdefine_line|#define __unlazy_fpu( tsk ) do { &bslash;&n;&t;if ((tsk)-&gt;thread_info-&gt;status &amp; TS_USEDFPU) &bslash;&n;&t;&t;save_init_fpu( tsk ); &bslash;&n;} while (0)
DECL|macro|__clear_fpu
mdefine_line|#define __clear_fpu( tsk )&t;&t;&t;&t;&t;&bslash;&n;do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if ((tsk)-&gt;thread_info-&gt;status &amp; TS_USEDFPU) {&t;&t;&bslash;&n;&t;&t;asm volatile(&quot;fwait&quot;);&t;&t;&t;&t;&bslash;&n;&t;&t;(tsk)-&gt;thread_info-&gt;status &amp;= ~TS_USEDFPU;&t;&bslash;&n;&t;&t;stts();&t;&t;&t;&t;&t;&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&t;&bslash;&n;} while (0)
multiline_comment|/*&n; * These disable preemption on their own and are safe&n; */
DECL|function|save_init_fpu
r_static
r_inline
r_void
id|save_init_fpu
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
)paren
(brace
id|preempt_disable
c_func
(paren
)paren
suffix:semicolon
id|__save_init_fpu
c_func
(paren
id|tsk
)paren
suffix:semicolon
id|stts
c_func
(paren
)paren
suffix:semicolon
id|preempt_enable
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|macro|unlazy_fpu
mdefine_line|#define unlazy_fpu( tsk ) do {&t;&bslash;&n;&t;preempt_disable();&t;&bslash;&n;&t;__unlazy_fpu(tsk);&t;&bslash;&n;&t;preempt_enable();&t;&bslash;&n;} while (0)
DECL|macro|clear_fpu
mdefine_line|#define clear_fpu( tsk ) do {&t;&bslash;&n;&t;preempt_disable();&t;&bslash;&n;&t;__clear_fpu( tsk );&t;&bslash;&n;&t;preempt_enable();&t;&bslash;&n;} while (0)
"&bslash;"
multiline_comment|/*&n; * FPU state interaction...&n; */
r_extern
r_int
r_int
id|get_fpu_cwd
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
)paren
suffix:semicolon
r_extern
r_int
r_int
id|get_fpu_swd
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
)paren
suffix:semicolon
r_extern
r_int
r_int
id|get_fpu_twd
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
)paren
suffix:semicolon
r_extern
r_int
r_int
id|get_fpu_mxcsr
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
)paren
suffix:semicolon
r_extern
r_void
id|set_fpu_cwd
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
comma
r_int
r_int
id|cwd
)paren
suffix:semicolon
r_extern
r_void
id|set_fpu_swd
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
comma
r_int
r_int
id|swd
)paren
suffix:semicolon
r_extern
r_void
id|set_fpu_twd
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
comma
r_int
r_int
id|twd
)paren
suffix:semicolon
multiline_comment|/*&n; * Signal frame handlers...&n; */
r_extern
r_int
id|save_i387
c_func
(paren
r_struct
id|_fpstate
id|__user
op_star
id|buf
)paren
suffix:semicolon
r_extern
r_int
id|restore_i387
c_func
(paren
r_struct
id|_fpstate
id|__user
op_star
id|buf
)paren
suffix:semicolon
multiline_comment|/*&n; * ptrace request handers...&n; */
r_extern
r_int
id|get_fpregs
c_func
(paren
r_struct
id|user_i387_struct
id|__user
op_star
id|buf
comma
r_struct
id|task_struct
op_star
id|tsk
)paren
suffix:semicolon
r_extern
r_int
id|set_fpregs
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
comma
r_struct
id|user_i387_struct
id|__user
op_star
id|buf
)paren
suffix:semicolon
r_extern
r_int
id|get_fpxregs
c_func
(paren
r_struct
id|user_fxsr_struct
id|__user
op_star
id|buf
comma
r_struct
id|task_struct
op_star
id|tsk
)paren
suffix:semicolon
r_extern
r_int
id|set_fpxregs
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
comma
r_struct
id|user_fxsr_struct
id|__user
op_star
id|buf
)paren
suffix:semicolon
multiline_comment|/*&n; * FPU state for core dumps...&n; */
r_extern
r_int
id|dump_fpu
c_func
(paren
r_struct
id|pt_regs
op_star
id|regs
comma
r_struct
id|user_i387_struct
op_star
id|fpu
)paren
suffix:semicolon
r_extern
r_int
id|dump_extended_fpu
c_func
(paren
r_struct
id|pt_regs
op_star
id|regs
comma
r_struct
id|user_fxsr_struct
op_star
id|fpu
)paren
suffix:semicolon
macro_line|#endif /* __ASM_I386_I387_H */
eof
