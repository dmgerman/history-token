macro_line|#ifndef _I386_PGTABLE_3LEVEL_H
DECL|macro|_I386_PGTABLE_3LEVEL_H
mdefine_line|#define _I386_PGTABLE_3LEVEL_H
macro_line|#include &lt;asm-generic/pgtable-nopud.h&gt;
multiline_comment|/*&n; * Intel Physical Address Extension (PAE) Mode - three-level page&n; * tables on PPro+ CPUs.&n; *&n; * Copyright (C) 1999 Ingo Molnar &lt;mingo@redhat.com&gt;&n; */
DECL|macro|pte_ERROR
mdefine_line|#define pte_ERROR(e) &bslash;&n;&t;printk(&quot;%s:%d: bad pte %p(%08lx%08lx).&bslash;n&quot;, __FILE__, __LINE__, &amp;(e), (e).pte_high, (e).pte_low)
DECL|macro|pmd_ERROR
mdefine_line|#define pmd_ERROR(e) &bslash;&n;&t;printk(&quot;%s:%d: bad pmd %p(%016Lx).&bslash;n&quot;, __FILE__, __LINE__, &amp;(e), pmd_val(e))
DECL|macro|pgd_ERROR
mdefine_line|#define pgd_ERROR(e) &bslash;&n;&t;printk(&quot;%s:%d: bad pgd %p(%016Lx).&bslash;n&quot;, __FILE__, __LINE__, &amp;(e), pgd_val(e))
DECL|macro|pud_none
mdefine_line|#define pud_none(pud)&t;&t;&t;&t;0
DECL|macro|pud_bad
mdefine_line|#define pud_bad(pud)&t;&t;&t;&t;0
DECL|macro|pud_present
mdefine_line|#define pud_present(pud)&t;&t;&t;1
multiline_comment|/*&n; * Is the pte executable?&n; */
DECL|function|pte_x
r_static
r_inline
r_int
id|pte_x
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
op_logical_neg
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_NX
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * All present user-pages with !NX bit are user-executable:&n; */
DECL|function|pte_exec
r_static
r_inline
r_int
id|pte_exec
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|pte_user
c_func
(paren
id|pte
)paren
op_logical_and
id|pte_x
c_func
(paren
id|pte
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * All present pages with !NX bit are kernel-executable:&n; */
DECL|function|pte_exec_kernel
r_static
r_inline
r_int
id|pte_exec_kernel
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|pte_x
c_func
(paren
id|pte
)paren
suffix:semicolon
)brace
multiline_comment|/* Rules for using set_pte: the pte being assigned *must* be&n; * either not present or in a state where the hardware will&n; * not attempt to update the pte.  In places where this is&n; * not possible, use pte_get_and_clear to obtain the old pte&n; * value and then use set_pte to update it.  -ben&n; */
DECL|function|set_pte
r_static
r_inline
r_void
id|set_pte
c_func
(paren
id|pte_t
op_star
id|ptep
comma
id|pte_t
id|pte
)paren
(brace
id|ptep-&gt;pte_high
op_assign
id|pte.pte_high
suffix:semicolon
id|smp_wmb
c_func
(paren
)paren
suffix:semicolon
id|ptep-&gt;pte_low
op_assign
id|pte.pte_low
suffix:semicolon
)brace
DECL|macro|__HAVE_ARCH_SET_PTE_ATOMIC
mdefine_line|#define __HAVE_ARCH_SET_PTE_ATOMIC
DECL|macro|set_pte_atomic
mdefine_line|#define set_pte_atomic(pteptr,pteval) &bslash;&n;&t;&t;set_64bit((unsigned long long *)(pteptr),pte_val(pteval))
DECL|macro|set_pmd
mdefine_line|#define set_pmd(pmdptr,pmdval) &bslash;&n;&t;&t;set_64bit((unsigned long long *)(pmdptr),pmd_val(pmdval))
DECL|macro|set_pud
mdefine_line|#define set_pud(pudptr,pudval) &bslash;&n;&t;&t;set_64bit((unsigned long long *)(pudptr),pud_val(pudval))
multiline_comment|/*&n; * Pentium-II erratum A13: in PAE mode we explicitly have to flush&n; * the TLB via cr3 if the top-level pgd is changed...&n; * We do not let the generic code free and clear pgd entries due to&n; * this erratum.&n; */
DECL|function|pud_clear
r_static
r_inline
r_void
id|pud_clear
(paren
id|pud_t
op_star
id|pud
)paren
(brace
)brace
DECL|macro|pmd_page
mdefine_line|#define pmd_page(pmd) (pfn_to_page(pmd_val(pmd) &gt;&gt; PAGE_SHIFT))
DECL|macro|pmd_page_kernel
mdefine_line|#define pmd_page_kernel(pmd) &bslash;&n;((unsigned long) __va(pmd_val(pmd) &amp; PAGE_MASK))
DECL|macro|pud_page
mdefine_line|#define pud_page(pud) &bslash;&n;((struct page *) __va(pud_val(pud) &amp; PAGE_MASK))
DECL|macro|pud_page_kernel
mdefine_line|#define pud_page_kernel(pud) &bslash;&n;((unsigned long) __va(pud_val(pud) &amp; PAGE_MASK))
multiline_comment|/* Find an entry in the second-level page table.. */
DECL|macro|pmd_offset
mdefine_line|#define pmd_offset(pud, address) ((pmd_t *) pud_page(*(pud)) + &bslash;&n;&t;&t;&t;pmd_index(address))
DECL|function|ptep_get_and_clear
r_static
r_inline
id|pte_t
id|ptep_get_and_clear
c_func
(paren
id|pte_t
op_star
id|ptep
)paren
(brace
id|pte_t
id|res
suffix:semicolon
multiline_comment|/* xchg acts as a barrier before the setting of the high bits */
id|res.pte_low
op_assign
id|xchg
c_func
(paren
op_amp
id|ptep-&gt;pte_low
comma
l_int|0
)paren
suffix:semicolon
id|res.pte_high
op_assign
id|ptep-&gt;pte_high
suffix:semicolon
id|ptep-&gt;pte_high
op_assign
l_int|0
suffix:semicolon
r_return
id|res
suffix:semicolon
)brace
DECL|function|pte_same
r_static
r_inline
r_int
id|pte_same
c_func
(paren
id|pte_t
id|a
comma
id|pte_t
id|b
)paren
(brace
r_return
id|a.pte_low
op_eq
id|b.pte_low
op_logical_and
id|a.pte_high
op_eq
id|b.pte_high
suffix:semicolon
)brace
DECL|macro|pte_page
mdefine_line|#define pte_page(x)&t;pfn_to_page(pte_pfn(x))
DECL|function|pte_none
r_static
r_inline
r_int
id|pte_none
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
op_logical_neg
id|pte.pte_low
op_logical_and
op_logical_neg
id|pte.pte_high
suffix:semicolon
)brace
DECL|function|pte_pfn
r_static
r_inline
r_int
r_int
id|pte_pfn
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
(paren
id|pte.pte_low
op_rshift
id|PAGE_SHIFT
)paren
op_or
(paren
id|pte.pte_high
op_lshift
(paren
l_int|32
op_minus
id|PAGE_SHIFT
)paren
)paren
suffix:semicolon
)brace
r_extern
r_int
r_int
r_int
id|__supported_pte_mask
suffix:semicolon
DECL|function|pfn_pte
r_static
r_inline
id|pte_t
id|pfn_pte
c_func
(paren
r_int
r_int
id|page_nr
comma
id|pgprot_t
id|pgprot
)paren
(brace
id|pte_t
id|pte
suffix:semicolon
id|pte.pte_high
op_assign
(paren
id|page_nr
op_rshift
(paren
l_int|32
op_minus
id|PAGE_SHIFT
)paren
)paren
op_or
"&bslash;"
(paren
id|pgprot_val
c_func
(paren
id|pgprot
)paren
op_rshift
l_int|32
)paren
suffix:semicolon
id|pte.pte_high
op_and_assign
(paren
id|__supported_pte_mask
op_rshift
l_int|32
)paren
suffix:semicolon
id|pte.pte_low
op_assign
(paren
(paren
id|page_nr
op_lshift
id|PAGE_SHIFT
)paren
op_or
id|pgprot_val
c_func
(paren
id|pgprot
)paren
)paren
op_amp
"&bslash;"
id|__supported_pte_mask
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pfn_pmd
r_static
r_inline
id|pmd_t
id|pfn_pmd
c_func
(paren
r_int
r_int
id|page_nr
comma
id|pgprot_t
id|pgprot
)paren
(brace
r_return
id|__pmd
c_func
(paren
(paren
(paren
(paren
r_int
r_int
r_int
)paren
id|page_nr
op_lshift
id|PAGE_SHIFT
)paren
op_or
"&bslash;"
id|pgprot_val
c_func
(paren
id|pgprot
)paren
)paren
op_amp
id|__supported_pte_mask
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Bits 0, 6 and 7 are taken in the low part of the pte,&n; * put the 32 bits of offset into the high part.&n; */
DECL|macro|pte_to_pgoff
mdefine_line|#define pte_to_pgoff(pte) ((pte).pte_high)
DECL|macro|pgoff_to_pte
mdefine_line|#define pgoff_to_pte(off) ((pte_t) { _PAGE_FILE, (off) })
DECL|macro|PTE_FILE_MAX_BITS
mdefine_line|#define PTE_FILE_MAX_BITS       32
multiline_comment|/* Encode and de-code a swap entry */
DECL|macro|__swp_type
mdefine_line|#define __swp_type(x)&t;&t;&t;(((x).val) &amp; 0x1f)
DECL|macro|__swp_offset
mdefine_line|#define __swp_offset(x)&t;&t;&t;((x).val &gt;&gt; 5)
DECL|macro|__swp_entry
mdefine_line|#define __swp_entry(type, offset)&t;((swp_entry_t){(type) | (offset) &lt;&lt; 5})
DECL|macro|__pte_to_swp_entry
mdefine_line|#define __pte_to_swp_entry(pte)&t;&t;((swp_entry_t){ (pte).pte_high })
DECL|macro|__swp_entry_to_pte
mdefine_line|#define __swp_entry_to_pte(x)&t;&t;((pte_t){ 0, (x).val })
DECL|macro|__pmd_free_tlb
mdefine_line|#define __pmd_free_tlb(tlb, x)&t;&t;do { } while (0)
macro_line|#endif /* _I386_PGTABLE_3LEVEL_H */
eof
