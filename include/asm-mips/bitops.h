multiline_comment|/*&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (c) 1994 - 1997, 1999, 2000  Ralf Baechle (ralf@gnu.org)&n; * Copyright (c) 2000  Silicon Graphics, Inc.&n; */
macro_line|#ifndef _ASM_BITOPS_H
DECL|macro|_ASM_BITOPS_H
mdefine_line|#define _ASM_BITOPS_H
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;asm/byteorder.h&gt;&t;&t;/* sigh ... */
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;asm/sgidefs.h&gt;
macro_line|#include &lt;asm/system.h&gt;
macro_line|#include &lt;linux/config.h&gt;
multiline_comment|/*&n; * clear_bit() doesn&squot;t provide any barrier for the compiler.&n; */
DECL|macro|smp_mb__before_clear_bit
mdefine_line|#define smp_mb__before_clear_bit()&t;barrier()
DECL|macro|smp_mb__after_clear_bit
mdefine_line|#define smp_mb__after_clear_bit()&t;barrier()
multiline_comment|/*&n; * Only disable interrupt for kernel mode stuff to keep usermode stuff&n; * that dares to use kernel include files alive.&n; */
DECL|macro|__bi_flags
mdefine_line|#define __bi_flags unsigned long flags
DECL|macro|__bi_cli
mdefine_line|#define __bi_cli() local_irq_disable()
DECL|macro|__bi_save_flags
mdefine_line|#define __bi_save_flags(x) local_save_flags(x)
DECL|macro|__bi_save_and_cli
mdefine_line|#define __bi_save_and_cli(x) local_irq_save(x)
DECL|macro|__bi_restore_flags
mdefine_line|#define __bi_restore_flags(x) local_irq_restore(x)
macro_line|#else
DECL|macro|__bi_flags
mdefine_line|#define __bi_flags
DECL|macro|__bi_cli
mdefine_line|#define __bi_cli()
DECL|macro|__bi_save_flags
mdefine_line|#define __bi_save_flags(x)
DECL|macro|__bi_save_and_cli
mdefine_line|#define __bi_save_and_cli(x)
DECL|macro|__bi_restore_flags
mdefine_line|#define __bi_restore_flags(x)
macro_line|#endif /* __KERNEL__ */
macro_line|#ifdef CONFIG_CPU_HAS_LLSC
macro_line|#include &lt;asm/mipsregs.h&gt;
multiline_comment|/*&n; * These functions for MIPS ISA &gt; 1 are interrupt and SMP proof and&n; * interrupt friendly&n; */
multiline_comment|/*&n; * set_bit - Atomically set a bit in memory&n; * @nr: the bit to set&n; * @addr: the address to start counting from&n; *&n; * This function is atomic and may not be reordered.  See __set_bit()&n; * if you do not require the atomic guarantees.&n; * Note that @nr may be almost arbitrarily large; this function is not&n; * restricted to acting on a single-word quantity.&n; */
r_extern
id|__inline__
r_void
DECL|function|set_bit
id|set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&bslash;tll&bslash;t%0, %1&bslash;t&bslash;t# set_bit&bslash;n&bslash;t&quot;
l_string|&quot;or&bslash;t%0, %2&bslash;n&bslash;t&quot;
l_string|&quot;sc&bslash;t%0, %1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%0, 1b&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;ir&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * __set_bit - Set a bit in memory&n; * @nr: the bit to set&n; * @addr: the address to start counting from&n; *&n; * Unlike set_bit(), this function is non-atomic and may be reordered.&n; * If it&squot;s called on the same region of memory simultaneously, the effect&n; * may be that only one operation succeeds.&n; */
DECL|function|__set_bit
r_extern
id|__inline__
r_void
id|__set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
op_star
id|m
op_or_assign
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * clear_bit - Clears a bit in memory&n; * @nr: Bit to clear&n; * @addr: Address to start counting from&n; *&n; * clear_bit() is atomic and may not be reordered.  However, it does&n; * not contain a memory barrier, so if it is used for locking purposes,&n; * you should call smp_mb__before_clear_bit() and/or smp_mb__after_clear_bit()&n; * in order to ensure changes are visible on other processors.&n; */
r_extern
id|__inline__
r_void
DECL|function|clear_bit
id|clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&bslash;tll&bslash;t%0, %1&bslash;t&bslash;t# clear_bit&bslash;n&bslash;t&quot;
l_string|&quot;and&bslash;t%0, %2&bslash;n&bslash;t&quot;
l_string|&quot;sc&bslash;t%0, %1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%0, 1b&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;ir&quot;
(paren
op_complement
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * change_bit - Toggle a bit in memory&n; * @nr: Bit to clear&n; * @addr: Address to start counting from&n; *&n; * change_bit() is atomic and may not be reordered.&n; * Note that @nr may be almost arbitrarily large; this function is not&n; * restricted to acting on a single-word quantity.&n; */
r_extern
id|__inline__
r_void
DECL|function|change_bit
id|change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&bslash;tll&bslash;t%0, %1&bslash;t&bslash;t# change_bit&bslash;n&bslash;t&quot;
l_string|&quot;xor&bslash;t%0, %2&bslash;n&bslash;t&quot;
l_string|&quot;sc&bslash;t%0, %1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%0, 1b&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;ir&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * __change_bit - Toggle a bit in memory&n; * @nr: the bit to set&n; * @addr: the address to start counting from&n; *&n; * Unlike change_bit(), this function is non-atomic and may be reordered.&n; * If it&squot;s called on the same region of memory simultaneously, the effect&n; * may be that only one operation succeeds.&n; */
DECL|function|__change_bit
r_extern
id|__inline__
r_void
id|__change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
op_star
id|m
op_xor_assign
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * test_and_set_bit - Set a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is atomic and cannot be reordered.  &n; * It also implies a memory barrier.&n; */
r_extern
id|__inline__
r_int
DECL|function|test_and_set_bit
id|test_and_set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|temp
comma
id|res
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set&bslash;tnoreorder&bslash;t&bslash;t# test_and_set_bit&bslash;n&quot;
l_string|&quot;1:&bslash;tll&bslash;t%0, %1&bslash;n&bslash;t&quot;
l_string|&quot;or&bslash;t%2, %0, %3&bslash;n&bslash;t&quot;
l_string|&quot;sc&bslash;t%2, %1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%2, 1b&bslash;n&bslash;t&quot;
l_string|&quot; and&bslash;t%2, %0, %3&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;treorder&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|res
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|res
op_ne
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * __test_and_set_bit - Set a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is non-atomic and can be reordered.  &n; * If two examples of this operation race, one can appear to succeed&n; * but actually fail.  You must protect multiple accesses with a lock.&n; */
DECL|function|__test_and_set_bit
r_extern
id|__inline__
r_int
id|__test_and_set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
comma
id|retval
suffix:semicolon
r_volatile
r_int
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|a
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|a
op_or_assign
id|mask
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
multiline_comment|/*&n; * test_and_clear_bit - Clear a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is atomic and cannot be reordered.  &n; * It also implies a memory barrier.&n; */
r_extern
id|__inline__
r_int
DECL|function|test_and_clear_bit
id|test_and_clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|temp
comma
id|res
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set&bslash;tnoreorder&bslash;t&bslash;t# test_and_clear_bit&bslash;n&quot;
l_string|&quot;1:&bslash;tll&bslash;t%0, %1&bslash;n&bslash;t&quot;
l_string|&quot;or&bslash;t%2, %0, %3&bslash;n&bslash;t&quot;
l_string|&quot;xor&bslash;t%2, %3&bslash;n&bslash;t&quot;
l_string|&quot;sc&bslash;t%2, %1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%2, 1b&bslash;n&bslash;t&quot;
l_string|&quot; and&bslash;t%2, %0, %3&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;treorder&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|res
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|res
op_ne
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * __test_and_clear_bit - Clear a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is non-atomic and can be reordered.  &n; * If two examples of this operation race, one can appear to succeed&n; * but actually fail.  You must protect multiple accesses with a lock.&n; */
DECL|function|__test_and_clear_bit
r_extern
id|__inline__
r_int
id|__test_and_clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
comma
id|retval
suffix:semicolon
r_volatile
r_int
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|a
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|a
op_and_assign
op_complement
id|mask
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
multiline_comment|/*&n; * test_and_change_bit - Change a bit and return its new value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is atomic and cannot be reordered.  &n; * It also implies a memory barrier.&n; */
r_extern
id|__inline__
r_int
DECL|function|test_and_change_bit
id|test_and_change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|temp
comma
id|res
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set&bslash;tnoreorder&bslash;t&bslash;t# test_and_change_bit&bslash;n&quot;
l_string|&quot;1:&bslash;tll&bslash;t%0, %1&bslash;n&bslash;t&quot;
l_string|&quot;xor&bslash;t%2, %0, %3&bslash;n&bslash;t&quot;
l_string|&quot;sc&bslash;t%2, %1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%2, 1b&bslash;n&bslash;t&quot;
l_string|&quot; and&bslash;t%2, %0, %3&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;treorder&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|res
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|res
op_ne
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * __test_and_change_bit - Change a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is non-atomic and can be reordered.  &n; * If two examples of this operation race, one can appear to succeed&n; * but actually fail.  You must protect multiple accesses with a lock.&n; */
DECL|function|__test_and_change_bit
r_extern
id|__inline__
r_int
id|__test_and_change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
comma
id|retval
suffix:semicolon
r_volatile
r_int
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|a
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|a
op_xor_assign
id|mask
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
macro_line|#else /* MIPS I */
multiline_comment|/*&n; * set_bit - Atomically set a bit in memory&n; * @nr: the bit to set&n; * @addr: the address to start counting from&n; *&n; * This function is atomic and may not be reordered.  See __set_bit()&n; * if you do not require the atomic guarantees.&n; * Note that @nr may be almost arbitrarily large; this function is not&n; * restricted to acting on a single-word quantity.&n; */
DECL|function|set_bit
r_extern
id|__inline__
r_void
id|set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
suffix:semicolon
r_volatile
r_int
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|__bi_flags
suffix:semicolon
id|a
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
id|__bi_save_and_cli
c_func
(paren
id|flags
)paren
suffix:semicolon
op_star
id|a
op_or_assign
id|mask
suffix:semicolon
id|__bi_restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * __set_bit - Set a bit in memory&n; * @nr: the bit to set&n; * @addr: the address to start counting from&n; *&n; * Unlike set_bit(), this function is non-atomic and may be reordered.&n; * If it&squot;s called on the same region of memory simultaneously, the effect&n; * may be that only one operation succeeds.&n; */
DECL|function|__set_bit
r_extern
id|__inline__
r_void
id|__set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
suffix:semicolon
r_volatile
r_int
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
op_star
id|a
op_or_assign
id|mask
suffix:semicolon
)brace
multiline_comment|/*&n; * clear_bit - Clears a bit in memory&n; * @nr: Bit to clear&n; * @addr: Address to start counting from&n; *&n; * clear_bit() is atomic and may not be reordered.  However, it does&n; * not contain a memory barrier, so if it is used for locking purposes,&n; * you should call smp_mb__before_clear_bit() and/or smp_mb__after_clear_bit()&n; * in order to ensure changes are visible on other processors.&n; */
DECL|function|clear_bit
r_extern
id|__inline__
r_void
id|clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
suffix:semicolon
r_volatile
r_int
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|__bi_flags
suffix:semicolon
id|a
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
id|__bi_save_and_cli
c_func
(paren
id|flags
)paren
suffix:semicolon
op_star
id|a
op_and_assign
op_complement
id|mask
suffix:semicolon
id|__bi_restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * change_bit - Toggle a bit in memory&n; * @nr: Bit to clear&n; * @addr: Address to start counting from&n; *&n; * change_bit() is atomic and may not be reordered.&n; * Note that @nr may be almost arbitrarily large; this function is not&n; * restricted to acting on a single-word quantity.&n; */
DECL|function|change_bit
r_extern
id|__inline__
r_void
id|change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
suffix:semicolon
r_volatile
r_int
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|__bi_flags
suffix:semicolon
id|a
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
id|__bi_save_and_cli
c_func
(paren
id|flags
)paren
suffix:semicolon
op_star
id|a
op_xor_assign
id|mask
suffix:semicolon
id|__bi_restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * __change_bit - Toggle a bit in memory&n; * @nr: the bit to set&n; * @addr: the address to start counting from&n; *&n; * Unlike change_bit(), this function is non-atomic and may be reordered.&n; * If it&squot;s called on the same region of memory simultaneously, the effect&n; * may be that only one operation succeeds.&n; */
DECL|function|__change_bit
r_extern
id|__inline__
r_void
id|__change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
op_star
id|m
op_xor_assign
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * test_and_set_bit - Set a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is atomic and cannot be reordered.  &n; * It also implies a memory barrier.&n; */
DECL|function|test_and_set_bit
r_extern
id|__inline__
r_int
id|test_and_set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
comma
id|retval
suffix:semicolon
r_volatile
r_int
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|__bi_flags
suffix:semicolon
id|a
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
id|__bi_save_and_cli
c_func
(paren
id|flags
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|a
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|a
op_or_assign
id|mask
suffix:semicolon
id|__bi_restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
multiline_comment|/*&n; * __test_and_set_bit - Set a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is non-atomic and can be reordered.  &n; * If two examples of this operation race, one can appear to succeed&n; * but actually fail.  You must protect multiple accesses with a lock.&n; */
DECL|function|__test_and_set_bit
r_extern
id|__inline__
r_int
id|__test_and_set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
comma
id|retval
suffix:semicolon
r_volatile
r_int
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|a
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|a
op_or_assign
id|mask
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
multiline_comment|/*&n; * test_and_clear_bit - Clear a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is atomic and cannot be reordered.  &n; * It also implies a memory barrier.&n; */
DECL|function|test_and_clear_bit
r_extern
id|__inline__
r_int
id|test_and_clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
comma
id|retval
suffix:semicolon
r_volatile
r_int
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|__bi_flags
suffix:semicolon
id|a
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
id|__bi_save_and_cli
c_func
(paren
id|flags
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|a
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|a
op_and_assign
op_complement
id|mask
suffix:semicolon
id|__bi_restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
multiline_comment|/*&n; * __test_and_clear_bit - Clear a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is non-atomic and can be reordered.  &n; * If two examples of this operation race, one can appear to succeed&n; * but actually fail.  You must protect multiple accesses with a lock.&n; */
DECL|function|__test_and_clear_bit
r_extern
id|__inline__
r_int
id|__test_and_clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
comma
id|retval
suffix:semicolon
r_volatile
r_int
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|a
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|a
op_and_assign
op_complement
id|mask
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
multiline_comment|/*&n; * test_and_change_bit - Change a bit and return its new value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is atomic and cannot be reordered.  &n; * It also implies a memory barrier.&n; */
DECL|function|test_and_change_bit
r_extern
id|__inline__
r_int
id|test_and_change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
comma
id|retval
suffix:semicolon
r_volatile
r_int
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|__bi_flags
suffix:semicolon
id|a
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
id|__bi_save_and_cli
c_func
(paren
id|flags
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|a
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|a
op_xor_assign
id|mask
suffix:semicolon
id|__bi_restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
multiline_comment|/*&n; * __test_and_change_bit - Change a bit and return its old value&n; * @nr: Bit to set&n; * @addr: Address to count from&n; *&n; * This operation is non-atomic and can be reordered.  &n; * If two examples of this operation race, one can appear to succeed&n; * but actually fail.  You must protect multiple accesses with a lock.&n; */
DECL|function|__test_and_change_bit
r_extern
id|__inline__
r_int
id|__test_and_change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
comma
id|retval
suffix:semicolon
r_volatile
r_int
op_star
id|a
op_assign
id|addr
suffix:semicolon
id|a
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|a
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|a
op_xor_assign
id|mask
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
DECL|macro|__bi_flags
macro_line|#undef __bi_flags
DECL|macro|__bi_cli
macro_line|#undef __bi_cli
DECL|macro|__bi_save_flags
macro_line|#undef __bi_save_flags
DECL|macro|__bi_restore_flags
macro_line|#undef __bi_restore_flags
macro_line|#endif /* MIPS I */
multiline_comment|/*&n; * test_bit - Determine whether a bit is set&n; * @nr: bit number to test&n; * @addr: Address to start counting from&n; */
DECL|function|test_bit
r_extern
id|__inline__
r_int
id|test_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_return
(paren
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
op_amp
(paren
(paren
(paren
r_const
r_int
r_int
op_star
)paren
id|addr
)paren
(braket
id|nr
op_rshift
l_int|5
)braket
)paren
)paren
op_ne
l_int|0
suffix:semicolon
)brace
macro_line|#ifndef __MIPSEB__
multiline_comment|/* Little endian versions. */
multiline_comment|/*&n; * find_first_zero_bit - find the first zero bit in a memory region&n; * @addr: The address to start the search at&n; * @size: The maximum size to search&n; *&n; * Returns the bit-number of the first zero bit, not the number of the byte&n; * containing a bit.&n; */
DECL|function|find_first_zero_bit
r_extern
id|__inline__
r_int
id|find_first_zero_bit
(paren
r_void
op_star
id|addr
comma
r_int
id|size
)paren
(brace
r_int
r_int
id|dummy
suffix:semicolon
r_int
id|res
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
r_return
l_int|0
suffix:semicolon
id|__asm__
(paren
l_string|&quot;.set&bslash;tnoreorder&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;tnoat&bslash;n&quot;
l_string|&quot;1:&bslash;tsubu&bslash;t$1,%6,%0&bslash;n&bslash;t&quot;
l_string|&quot;blez&bslash;t$1,2f&bslash;n&bslash;t&quot;
l_string|&quot;lw&bslash;t$1,(%5)&bslash;n&bslash;t&quot;
l_string|&quot;addiu&bslash;t%5,4&bslash;n&bslash;t&quot;
macro_line|#if (_MIPS_ISA == _MIPS_ISA_MIPS2 ) || (_MIPS_ISA == _MIPS_ISA_MIPS3 ) || &bslash;&n;    (_MIPS_ISA == _MIPS_ISA_MIPS4 ) || (_MIPS_ISA == _MIPS_ISA_MIPS5 ) || &bslash;&n;    (_MIPS_ISA == _MIPS_ISA_MIPS32) || (_MIPS_ISA == _MIPS_ISA_MIPS64)
l_string|&quot;beql&bslash;t%1,$1,1b&bslash;n&bslash;t&quot;
l_string|&quot;addiu&bslash;t%0,32&bslash;n&bslash;t&quot;
macro_line|#else
l_string|&quot;addiu&bslash;t%0,32&bslash;n&bslash;t&quot;
l_string|&quot;beq&bslash;t%1,$1,1b&bslash;n&bslash;t&quot;
l_string|&quot;nop&bslash;n&bslash;t&quot;
l_string|&quot;subu&bslash;t%0,32&bslash;n&bslash;t&quot;
macro_line|#endif
macro_line|#ifdef __MIPSEB__
macro_line|#error &quot;Fix this for big endian&quot;
macro_line|#endif /* __MIPSEB__ */
l_string|&quot;li&bslash;t%1,1&bslash;n&quot;
l_string|&quot;1:&bslash;tand&bslash;t%2,$1,%1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%2,2f&bslash;n&bslash;t&quot;
l_string|&quot;sll&bslash;t%1,%1,1&bslash;n&bslash;t&quot;
l_string|&quot;bnez&bslash;t%1,1b&bslash;n&bslash;t&quot;
l_string|&quot;add&bslash;t%0,%0,1&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;tat&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;treorder&bslash;n&quot;
l_string|&quot;2:&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|res
)paren
comma
l_string|&quot;=r&quot;
(paren
id|dummy
)paren
comma
l_string|&quot;=r&quot;
(paren
id|addr
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
(paren
r_int
r_int
)paren
l_int|0
)paren
comma
l_string|&quot;1&quot;
(paren
(paren
r_int
r_int
)paren
l_int|0xffffffff
)paren
comma
l_string|&quot;2&quot;
(paren
id|addr
)paren
comma
l_string|&quot;r&quot;
(paren
id|size
)paren
suffix:colon
l_string|&quot;$1&quot;
)paren
suffix:semicolon
r_return
id|res
suffix:semicolon
)brace
multiline_comment|/*&n; * find_next_zero_bit - find the first zero bit in a memory region&n; * @addr: The address to base the search on&n; * @offset: The bitnumber to start searching at&n; * @size: The maximum size to search&n; */
DECL|function|find_next_zero_bit
r_extern
id|__inline__
r_int
id|find_next_zero_bit
(paren
r_void
op_star
id|addr
comma
r_int
id|size
comma
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
id|set
op_assign
l_int|0
comma
id|bit
op_assign
id|offset
op_amp
l_int|31
comma
id|res
suffix:semicolon
r_int
r_int
id|dummy
suffix:semicolon
r_if
c_cond
(paren
id|bit
)paren
(brace
multiline_comment|/*&n;&t;&t; * Look for zero in first byte&n;&t;&t; */
macro_line|#ifdef __MIPSEB__
macro_line|#error &quot;Fix this for big endian byte order&quot;
macro_line|#endif
id|__asm__
c_func
(paren
l_string|&quot;.set&bslash;tnoreorder&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;tnoat&bslash;n&quot;
l_string|&quot;1:&bslash;tand&bslash;t$1,%4,%1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t$1,1f&bslash;n&bslash;t&quot;
l_string|&quot;sll&bslash;t%1,%1,1&bslash;n&bslash;t&quot;
l_string|&quot;bnez&bslash;t%1,1b&bslash;n&bslash;t&quot;
l_string|&quot;addiu&bslash;t%0,1&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;tat&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;treorder&bslash;n&quot;
l_string|&quot;1:&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|set
)paren
comma
l_string|&quot;=r&quot;
(paren
id|dummy
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
l_int|0
)paren
comma
l_string|&quot;1&quot;
(paren
l_int|1
op_lshift
id|bit
)paren
comma
l_string|&quot;r&quot;
(paren
op_star
id|p
)paren
suffix:colon
l_string|&quot;$1&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|set
OL
(paren
l_int|32
op_minus
id|bit
)paren
)paren
r_return
id|set
op_plus
id|offset
suffix:semicolon
id|set
op_assign
l_int|32
op_minus
id|bit
suffix:semicolon
id|p
op_increment
suffix:semicolon
)brace
multiline_comment|/*&n;&t; * No zero yet, search remaining full bytes for a zero&n;&t; */
id|res
op_assign
id|find_first_zero_bit
c_func
(paren
id|p
comma
id|size
op_minus
l_int|32
op_star
(paren
id|p
op_minus
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
)paren
suffix:semicolon
r_return
id|offset
op_plus
id|set
op_plus
id|res
suffix:semicolon
)brace
macro_line|#endif /* !(__MIPSEB__) */
multiline_comment|/*&n; * ffz - find first zero in word.&n; * @word: The word to search&n; *&n; * Undefined if no zero exists, so code should check against ~0UL first.&n; */
DECL|function|ffz
r_extern
id|__inline__
r_int
r_int
id|ffz
c_func
(paren
r_int
r_int
id|word
)paren
(brace
r_int
r_int
id|__res
suffix:semicolon
r_int
r_int
id|mask
op_assign
l_int|1
suffix:semicolon
id|__asm__
(paren
l_string|&quot;.set&bslash;tnoreorder&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;tnoat&bslash;n&bslash;t&quot;
l_string|&quot;move&bslash;t%0,$0&bslash;n&quot;
l_string|&quot;1:&bslash;tand&bslash;t$1,%2,%1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t$1,2f&bslash;n&bslash;t&quot;
l_string|&quot;sll&bslash;t%1,1&bslash;n&bslash;t&quot;
l_string|&quot;bnez&bslash;t%1,1b&bslash;n&bslash;t&quot;
l_string|&quot;addiu&bslash;t%0,1&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;tat&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;treorder&bslash;n&quot;
l_string|&quot;2:&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|__res
)paren
comma
l_string|&quot;=r&quot;
(paren
id|mask
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|word
)paren
comma
l_string|&quot;1&quot;
(paren
id|mask
)paren
suffix:colon
l_string|&quot;$1&quot;
)paren
suffix:semicolon
r_return
id|__res
suffix:semicolon
)brace
macro_line|#ifdef __KERNEL__
multiline_comment|/**&n; * ffs - find first bit set&n; * @x: the word to search&n; *&n; * This is defined the same way as&n; * the libc and compiler builtin ffs routines, therefore&n; * differs in spirit from the above ffz (man ffs).&n; */
DECL|macro|ffs
mdefine_line|#define ffs(x) generic_ffs(x)
multiline_comment|/*&n; * hweightN - returns the hamming weight of a N-bit word&n; * @x: the word to weigh&n; *&n; * The Hamming Weight of a number is the total number of bits set in it.&n; */
DECL|macro|hweight32
mdefine_line|#define hweight32(x) generic_hweight32(x)
DECL|macro|hweight16
mdefine_line|#define hweight16(x) generic_hweight16(x)
DECL|macro|hweight8
mdefine_line|#define hweight8(x) generic_hweight8(x)
macro_line|#endif /* __KERNEL__ */
macro_line|#ifdef __MIPSEB__
multiline_comment|/*&n; * find_next_zero_bit - find the first zero bit in a memory region&n; * @addr: The address to base the search on&n; * @offset: The bitnumber to start searching at&n; * @size: The maximum size to search&n; */
DECL|function|find_next_zero_bit
r_extern
id|__inline__
r_int
id|find_next_zero_bit
c_func
(paren
r_void
op_star
id|addr
comma
r_int
id|size
comma
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|31UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|31UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_rshift
(paren
l_int|32
op_minus
id|offset
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|32
)paren
r_goto
id|found_first
suffix:semicolon
r_if
c_cond
(paren
op_complement
id|tmp
)paren
r_goto
id|found_middle
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
l_int|31UL
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
r_goto
id|found_middle
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
r_return
id|result
suffix:semicolon
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_lshift
id|size
suffix:semicolon
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|tmp
)paren
suffix:semicolon
)brace
multiline_comment|/* Linus sez that gcc can optimize the following correctly, we&squot;ll see if this&n; * holds on the Sparc as it does for the ALPHA.&n; */
macro_line|#if 0 /* Fool kernel-doc since it doesn&squot;t do macros yet */
multiline_comment|/*&n; * find_first_zero_bit - find the first zero bit in a memory region&n; * @addr: The address to start the search at&n; * @size: The maximum size to search&n; *&n; * Returns the bit-number of the first zero bit, not the number of the byte&n; * containing a bit.&n; */
r_extern
r_int
id|find_first_zero_bit
(paren
r_void
op_star
id|addr
comma
r_int
id|size
)paren
suffix:semicolon
macro_line|#endif
DECL|macro|find_first_zero_bit
mdefine_line|#define find_first_zero_bit(addr, size) &bslash;&n;        find_next_zero_bit((addr), (size), 0)
macro_line|#endif /* (__MIPSEB__) */
multiline_comment|/* Now for the ext2 filesystem bit operations and helper routines. */
macro_line|#ifdef __MIPSEB__
DECL|function|ext2_set_bit
r_extern
id|__inline__
r_int
id|ext2_set_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
comma
id|retval
comma
id|flags
suffix:semicolon
r_int
r_char
op_star
id|ADDR
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
id|save_and_cli
c_func
(paren
id|flags
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|ADDR
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|ADDR
op_or_assign
id|mask
suffix:semicolon
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
DECL|function|ext2_clear_bit
r_extern
id|__inline__
r_int
id|ext2_clear_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
comma
id|retval
comma
id|flags
suffix:semicolon
r_int
r_char
op_star
id|ADDR
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
id|save_and_cli
c_func
(paren
id|flags
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|ADDR
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|ADDR
op_and_assign
op_complement
id|mask
suffix:semicolon
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
DECL|function|ext2_test_bit
r_extern
id|__inline__
r_int
id|ext2_test_bit
c_func
(paren
r_int
id|nr
comma
r_const
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
suffix:semicolon
r_const
r_int
r_char
op_star
id|ADDR
op_assign
(paren
r_const
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
r_return
(paren
(paren
id|mask
op_amp
op_star
id|ADDR
)paren
op_ne
l_int|0
)paren
suffix:semicolon
)brace
DECL|macro|ext2_find_first_zero_bit
mdefine_line|#define ext2_find_first_zero_bit(addr, size) &bslash;&n;        ext2_find_next_zero_bit((addr), (size), 0)
DECL|function|ext2_find_next_zero_bit
r_extern
id|__inline__
r_int
r_int
id|ext2_find_next_zero_bit
c_func
(paren
r_void
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|31UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|31UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
multiline_comment|/* We hold the little endian value in tmp, but then the&n;&t;&t; * shift is illegal. So we could keep a big endian value&n;&t;&t; * in tmp, like this:&n;&t;&t; *&n;&t;&t; * tmp = __swab32(*(p++));&n;&t;&t; * tmp |= ~0UL &gt;&gt; (32-offset);&n;&t;&t; *&n;&t;&t; * but this would decrease preformance, so we change the&n;&t;&t; * shift:&n;&t;&t; */
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
id|__swab32
c_func
(paren
op_complement
l_int|0UL
op_rshift
(paren
l_int|32
op_minus
id|offset
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|32
)paren
(brace
r_goto
id|found_first
suffix:semicolon
)brace
r_if
c_cond
(paren
op_complement
id|tmp
)paren
(brace
r_goto
id|found_middle
suffix:semicolon
)brace
id|size
op_sub_assign
l_int|32
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
l_int|31UL
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
(brace
r_goto
id|found_middle
suffix:semicolon
)brace
id|result
op_add_assign
l_int|32
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
(brace
r_return
id|result
suffix:semicolon
)brace
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
multiline_comment|/* tmp is little endian, so we would have to swab the shift,&n;&t; * see above. But then we have to swab tmp below for ffz, so&n;&t; * we might as well do this here.&n;&t; */
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|__swab32
c_func
(paren
id|tmp
)paren
op_or
(paren
op_complement
l_int|0UL
op_lshift
id|size
)paren
)paren
suffix:semicolon
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|__swab32
c_func
(paren
id|tmp
)paren
)paren
suffix:semicolon
)brace
macro_line|#else /* !(__MIPSEB__) */
multiline_comment|/* Native ext2 byte ordering, just collapse using defines. */
DECL|macro|ext2_set_bit
mdefine_line|#define ext2_set_bit(nr, addr) test_and_set_bit((nr), (addr))
DECL|macro|ext2_clear_bit
mdefine_line|#define ext2_clear_bit(nr, addr) test_and_clear_bit((nr), (addr))
DECL|macro|ext2_test_bit
mdefine_line|#define ext2_test_bit(nr, addr) test_bit((nr), (addr))
DECL|macro|ext2_find_first_zero_bit
mdefine_line|#define ext2_find_first_zero_bit(addr, size) find_first_zero_bit((addr), (size))
DECL|macro|ext2_find_next_zero_bit
mdefine_line|#define ext2_find_next_zero_bit(addr, size, offset) &bslash;&n;                find_next_zero_bit((addr), (size), (offset))
macro_line|#endif /* !(__MIPSEB__) */
multiline_comment|/*&n; * Bitmap functions for the minix filesystem.&n; * FIXME: These assume that Minix uses the native byte/bitorder.&n; * This limits the Minix filesystem&squot;s value for data exchange very much.&n; */
DECL|macro|minix_test_and_set_bit
mdefine_line|#define minix_test_and_set_bit(nr,addr) test_and_set_bit(nr,addr)
DECL|macro|minix_set_bit
mdefine_line|#define minix_set_bit(nr,addr) set_bit(nr,addr)
DECL|macro|minix_test_and_clear_bit
mdefine_line|#define minix_test_and_clear_bit(nr,addr) test_and_clear_bit(nr,addr)
DECL|macro|minix_test_bit
mdefine_line|#define minix_test_bit(nr,addr) test_bit(nr,addr)
DECL|macro|minix_find_first_zero_bit
mdefine_line|#define minix_find_first_zero_bit(addr,size) find_first_zero_bit(addr,size)
macro_line|#endif /* _ASM_BITOPS_H */
eof
