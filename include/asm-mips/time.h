multiline_comment|/*&n; * Copyright 2001 MontaVista Software Inc.&n; * Author: Jun Sun, jsun@mvista.com or jsun@junsun.net&n; *&n; * include/asm-mips/time.h&n; *     header file for the new style time.c file and time services.&n; *&n; * This program is free software; you can redistribute  it and/or modify it&n; * under  the terms of  the GNU General  Public License as published by the&n; * Free Software Foundation;  either version 2 of the  License, or (at your&n; * option) any later version.&n; *&n; * Please refer to Documentation/mips/time.README.&n; */
macro_line|#ifndef _ASM_TIME_H
DECL|macro|_ASM_TIME_H
mdefine_line|#define _ASM_TIME_H
macro_line|#include &lt;linux/interrupt.h&gt;
macro_line|#include &lt;linux/linkage.h&gt;
macro_line|#include &lt;linux/ptrace.h&gt;
macro_line|#include &lt;linux/rtc.h&gt;
multiline_comment|/*&n; * RTC ops.  By default, they point a no-RTC functions.&n; *&t;rtc_get_time - mktime(year, mon, day, hour, min, sec) in seconds.&n; *&t;rtc_set_time - reverse the above translation and set time to RTC.&n; */
r_extern
r_int
r_int
(paren
op_star
id|rtc_get_time
)paren
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
(paren
op_star
id|rtc_set_time
)paren
(paren
r_int
r_int
)paren
suffix:semicolon
multiline_comment|/*&n; * to_tm() converts system time back to (year, mon, day, hour, min, sec).&n; * It is intended to help implement rtc_set_time() functions.&n; * Copied from PPC implementation.&n; */
r_extern
r_void
id|to_tm
c_func
(paren
r_int
r_int
id|tim
comma
r_struct
id|rtc_time
op_star
id|tm
)paren
suffix:semicolon
multiline_comment|/*&n; * do_gettimeoffset(). By default, this func pointer points to&n; * do_null_gettimeoffset(), which leads to the same resolution as HZ.&n; * Higher resolution versions are vailable, which gives ~1us resolution.&n; */
r_extern
r_int
r_int
(paren
op_star
id|do_gettimeoffset
)paren
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
r_int
id|null_gettimeoffset
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
r_int
id|fixed_rate_gettimeoffset
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
r_int
id|calibrate_div32_gettimeoffset
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
r_int
id|calibrate_div64_gettimeoffset
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*&n; * high-level timer interrupt routines.&n; */
r_extern
id|irqreturn_t
id|timer_interrupt
c_func
(paren
r_int
id|irq
comma
r_void
op_star
id|dev_id
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
multiline_comment|/*&n; * the corresponding low-level timer interrupt routine.&n; */
id|asmlinkage
r_void
id|ll_timer_interrupt
c_func
(paren
r_int
id|irq
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
multiline_comment|/*&n; * board specific routines required by time_init().&n; * board_time_init is defaulted to NULL and can remains so.&n; * board_timer_setup must be setup properly in machine setup routine.&n; */
r_struct
id|irqaction
suffix:semicolon
r_extern
r_void
(paren
op_star
id|board_time_init
)paren
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
(paren
op_star
id|board_timer_setup
)paren
(paren
r_struct
id|irqaction
op_star
id|irq
)paren
suffix:semicolon
multiline_comment|/*&n; * mips_counter_frequency - must be set if you intend to use&n; * counter as timer interrupt source or use fixed_rate_gettimeoffset.&n; */
r_extern
r_int
r_int
id|mips_counter_frequency
suffix:semicolon
macro_line|#endif /* _ASM_TIME_H */
eof
