multiline_comment|/*&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 1998, 2003 by Ralf Baechle&n; */
macro_line|#ifndef __ASM_MACH_JAZZ_FLOPPY_H
DECL|macro|__ASM_MACH_JAZZ_FLOPPY_H
mdefine_line|#define __ASM_MACH_JAZZ_FLOPPY_H
macro_line|#include &lt;linux/delay.h&gt;
macro_line|#include &lt;linux/init.h&gt;
macro_line|#include &lt;linux/linkage.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/mm.h&gt;
macro_line|#include &lt;asm/addrspace.h&gt;
macro_line|#include &lt;asm/jazz.h&gt;
macro_line|#include &lt;asm/jazzdma.h&gt;
macro_line|#include &lt;asm/pgtable.h&gt;
DECL|function|fd_inb
r_static
r_inline
r_int
r_char
id|fd_inb
c_func
(paren
r_int
r_int
id|port
)paren
(brace
r_int
r_char
id|c
suffix:semicolon
id|c
op_assign
op_star
(paren
r_volatile
r_int
r_char
op_star
)paren
id|port
suffix:semicolon
id|udelay
c_func
(paren
l_int|1
)paren
suffix:semicolon
r_return
id|c
suffix:semicolon
)brace
DECL|function|fd_outb
r_static
r_inline
r_void
id|fd_outb
c_func
(paren
r_int
r_char
id|value
comma
r_int
r_int
id|port
)paren
(brace
op_star
(paren
r_volatile
r_int
r_char
op_star
)paren
id|port
op_assign
id|value
suffix:semicolon
)brace
multiline_comment|/*&n; * How to access the floppy DMA functions.&n; */
DECL|function|fd_enable_dma
r_static
r_inline
r_void
id|fd_enable_dma
c_func
(paren
r_void
)paren
(brace
id|vdma_enable
c_func
(paren
id|JAZZ_FLOPPY_DMA
)paren
suffix:semicolon
)brace
DECL|function|fd_disable_dma
r_static
r_inline
r_void
id|fd_disable_dma
c_func
(paren
r_void
)paren
(brace
id|vdma_disable
c_func
(paren
id|JAZZ_FLOPPY_DMA
)paren
suffix:semicolon
)brace
DECL|function|fd_request_dma
r_static
r_inline
r_int
id|fd_request_dma
c_func
(paren
r_void
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|fd_free_dma
r_static
r_inline
r_void
id|fd_free_dma
c_func
(paren
r_void
)paren
(brace
)brace
DECL|function|fd_clear_dma_ff
r_static
r_inline
r_void
id|fd_clear_dma_ff
c_func
(paren
r_void
)paren
(brace
)brace
DECL|function|fd_set_dma_mode
r_static
r_inline
r_void
id|fd_set_dma_mode
c_func
(paren
r_char
id|mode
)paren
(brace
id|vdma_set_mode
c_func
(paren
id|JAZZ_FLOPPY_DMA
comma
id|mode
)paren
suffix:semicolon
)brace
DECL|function|fd_set_dma_addr
r_static
r_inline
r_void
id|fd_set_dma_addr
c_func
(paren
r_char
op_star
id|a
)paren
(brace
id|vdma_set_addr
c_func
(paren
id|JAZZ_FLOPPY_DMA
comma
id|vdma_phys2log
c_func
(paren
id|CPHYSADDR
c_func
(paren
(paren
r_int
r_int
)paren
id|a
)paren
)paren
)paren
suffix:semicolon
)brace
DECL|function|fd_set_dma_count
r_static
r_inline
r_void
id|fd_set_dma_count
c_func
(paren
r_int
r_int
id|count
)paren
(brace
id|vdma_set_count
c_func
(paren
id|JAZZ_FLOPPY_DMA
comma
id|count
)paren
suffix:semicolon
)brace
DECL|function|fd_get_dma_residue
r_static
r_inline
r_int
id|fd_get_dma_residue
c_func
(paren
r_void
)paren
(brace
r_return
id|vdma_get_residue
c_func
(paren
id|JAZZ_FLOPPY_DMA
)paren
suffix:semicolon
)brace
DECL|function|fd_enable_irq
r_static
r_inline
r_void
id|fd_enable_irq
c_func
(paren
r_void
)paren
(brace
)brace
DECL|function|fd_disable_irq
r_static
r_inline
r_void
id|fd_disable_irq
c_func
(paren
r_void
)paren
(brace
)brace
DECL|function|fd_request_irq
r_static
r_inline
r_int
id|fd_request_irq
c_func
(paren
r_void
)paren
(brace
r_return
id|request_irq
c_func
(paren
id|FLOPPY_IRQ
comma
id|floppy_interrupt
comma
id|SA_INTERRUPT
op_or
id|SA_SAMPLE_RANDOM
comma
l_string|&quot;floppy&quot;
comma
l_int|NULL
)paren
suffix:semicolon
)brace
DECL|function|fd_free_irq
r_static
r_inline
r_void
id|fd_free_irq
c_func
(paren
r_void
)paren
(brace
id|free_irq
c_func
(paren
id|FLOPPY_IRQ
comma
l_int|NULL
)paren
suffix:semicolon
)brace
DECL|function|fd_getfdaddr1
r_static
r_inline
r_int
r_int
id|fd_getfdaddr1
c_func
(paren
r_void
)paren
(brace
r_return
id|JAZZ_FDC_BASE
suffix:semicolon
)brace
DECL|function|fd_dma_mem_alloc
r_static
r_inline
r_int
r_int
id|fd_dma_mem_alloc
c_func
(paren
r_int
r_int
id|size
)paren
(brace
r_int
r_int
id|mem
suffix:semicolon
id|mem
op_assign
id|__get_dma_pages
c_func
(paren
id|GFP_KERNEL
comma
id|get_order
c_func
(paren
id|size
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|mem
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
id|vdma_alloc
c_func
(paren
id|CPHYSADDR
c_func
(paren
id|mem
)paren
comma
id|size
)paren
suffix:semicolon
multiline_comment|/* XXX error checking */
r_return
id|mem
suffix:semicolon
)brace
DECL|function|fd_dma_mem_free
r_static
r_inline
r_void
id|fd_dma_mem_free
c_func
(paren
r_int
r_int
id|addr
comma
r_int
r_int
id|size
)paren
(brace
id|vdma_free
c_func
(paren
id|vdma_phys2log
c_func
(paren
id|CPHYSADDR
c_func
(paren
id|addr
)paren
)paren
)paren
suffix:semicolon
id|free_pages
c_func
(paren
id|addr
comma
id|get_order
c_func
(paren
id|size
)paren
)paren
suffix:semicolon
)brace
DECL|function|fd_drive_type
r_static
r_inline
r_int
r_int
id|fd_drive_type
c_func
(paren
r_int
r_int
id|n
)paren
(brace
multiline_comment|/* XXX This is wrong for machines with ED 2.88mb disk drives like the&n;&t;   Olivetti M700.  Anyway, we should suck this from the ARC&n;&t;   firmware.  */
r_if
c_cond
(paren
id|n
op_eq
l_int|0
)paren
r_return
l_int|4
suffix:semicolon
multiline_comment|/* 3,5&quot;, 1.44mb */
r_return
l_int|0
suffix:semicolon
)brace
macro_line|#endif /* __ASM_MACH_JAZZ_FLOPPY_H */
eof
