multiline_comment|/*&n; * Copyright (C) 2002 MontaVista Software Inc.&n; * Author: Jun Sun, jsun@mvista.com or jsun@junsun.net&n; *&n; * This program is free software; you can redistribute it and/or modify it&n; * under the terms of the GNU General Public License as published by the&n; * Free Software Foundation;  either version 2 of the  License, or (at your&n; * option) any later version.&n; */
macro_line|#ifndef _ASM_FPU_H
DECL|macro|_ASM_FPU_H
mdefine_line|#define _ASM_FPU_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/sched.h&gt;
macro_line|#include &lt;linux/thread_info.h&gt;
macro_line|#include &lt;asm/mipsregs.h&gt;
macro_line|#include &lt;asm/cpu.h&gt;
macro_line|#include &lt;asm/cpu-features.h&gt;
macro_line|#include &lt;asm/bitops.h&gt;
macro_line|#include &lt;asm/processor.h&gt;
macro_line|#include &lt;asm/current.h&gt;
r_struct
id|sigcontext
suffix:semicolon
r_struct
id|sigcontext32
suffix:semicolon
r_extern
id|asmlinkage
r_int
(paren
op_star
id|save_fp_context
)paren
(paren
r_struct
id|sigcontext
op_star
id|sc
)paren
suffix:semicolon
r_extern
id|asmlinkage
r_int
(paren
op_star
id|restore_fp_context
)paren
(paren
r_struct
id|sigcontext
op_star
id|sc
)paren
suffix:semicolon
r_extern
id|asmlinkage
r_int
(paren
op_star
id|save_fp_context32
)paren
(paren
r_struct
id|sigcontext32
op_star
id|sc
)paren
suffix:semicolon
r_extern
id|asmlinkage
r_int
(paren
op_star
id|restore_fp_context32
)paren
(paren
r_struct
id|sigcontext32
op_star
id|sc
)paren
suffix:semicolon
r_extern
r_void
id|fpu_emulator_init_fpu
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|_init_fpu
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|_save_fp
c_func
(paren
r_struct
id|task_struct
op_star
)paren
suffix:semicolon
r_extern
r_void
id|_restore_fp
c_func
(paren
r_struct
id|task_struct
op_star
)paren
suffix:semicolon
macro_line|#if defined(CONFIG_CPU_SB1)
DECL|macro|__enable_fpu_hazard
mdefine_line|#define __enable_fpu_hazard()&t;&t;&t;&t;&t;&t;&bslash;&n;do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;asm(&quot;.set&t;push&t;&t;&bslash;n&bslash;t&quot;&t;&t;&t;&t;&bslash;&n;&t;    &quot;.set&t;mips64&t;&t;&bslash;n&bslash;t&quot;&t;&t;&t;&t;&bslash;&n;&t;    &quot;.set&t;noreorder&t;&bslash;n&bslash;t&quot;&t;&t;&t;&t;&bslash;&n;&t;    &quot;ssnop&t;&t;&t;&bslash;n&bslash;t&quot;&t;&t;&t;&t;&bslash;&n;&t;    &quot;bnezl&t;$0, .+4&t;&t;&bslash;n&bslash;t&quot;&t;&t;&t;&t;&bslash;&n;&t;    &quot;ssnop&t;&t;&t;&bslash;n&bslash;t&quot;&t;&t;&t;&t;&bslash;&n;&t;    &quot;.set pop&quot;);&t;&t;&t;&t;&t;&t;&bslash;&n;} while (0)
macro_line|#else
DECL|macro|__enable_fpu_hazard
mdefine_line|#define __enable_fpu_hazard()&t;&t;&t;&t;&t;&t;&bslash;&n;do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;asm(&quot;nop;nop;nop;nop&quot;);&t;&t;/* max. hazard */&t;&t;&bslash;&n;} while (0)
macro_line|#endif
DECL|macro|__enable_fpu
mdefine_line|#define __enable_fpu()&t;&t;&t;&t;&t;&t;&t;&bslash;&n;do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;        set_c0_status(ST0_CU1);&t;&t;&t;&t;&t;&t;&bslash;&n;        __enable_fpu_hazard();&t;&t;&t;&t;&t;&t;&bslash;&n;} while (0)
DECL|macro|__disable_fpu
mdefine_line|#define __disable_fpu()&t;&t;&t;&t;&t;&t;&t;&bslash;&n;do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;clear_c0_status(ST0_CU1);&t;&t;&t;&t;&t;&bslash;&n;&t;/* We don&squot;t care about the c0 hazard here  */&t;&t;&t;&bslash;&n;} while (0)
DECL|macro|enable_fpu
mdefine_line|#define enable_fpu()&t;&t;&t;&t;&t;&t;&t;&bslash;&n;do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if (cpu_has_fpu)&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__enable_fpu();&t;&t;&t;&t;&t;&t;&bslash;&n;} while (0)
DECL|macro|disable_fpu
mdefine_line|#define disable_fpu()&t;&t;&t;&t;&t;&t;&t;&bslash;&n;do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if (cpu_has_fpu)&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__disable_fpu();&t;&t;&t;&t;&t;&bslash;&n;} while (0)
DECL|macro|clear_fpu_owner
mdefine_line|#define clear_fpu_owner()&t;clear_thread_flag(TIF_USEDFPU)
DECL|function|is_fpu_owner
r_static
r_inline
r_int
id|is_fpu_owner
c_func
(paren
r_void
)paren
(brace
r_return
id|cpu_has_fpu
op_logical_and
id|test_thread_flag
c_func
(paren
id|TIF_USEDFPU
)paren
suffix:semicolon
)brace
DECL|function|own_fpu
r_static
r_inline
r_void
id|own_fpu
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
id|cpu_has_fpu
)paren
(brace
id|__enable_fpu
c_func
(paren
)paren
suffix:semicolon
id|KSTK_STATUS
c_func
(paren
id|current
)paren
op_or_assign
id|ST0_CU1
suffix:semicolon
id|set_thread_flag
c_func
(paren
id|TIF_USEDFPU
)paren
suffix:semicolon
)brace
)brace
DECL|function|lose_fpu
r_static
r_inline
r_void
id|lose_fpu
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
id|cpu_has_fpu
)paren
(brace
id|KSTK_STATUS
c_func
(paren
id|current
)paren
op_and_assign
op_complement
id|ST0_CU1
suffix:semicolon
id|clear_thread_flag
c_func
(paren
id|TIF_USEDFPU
)paren
suffix:semicolon
id|__disable_fpu
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
DECL|function|init_fpu
r_static
r_inline
r_void
id|init_fpu
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
id|cpu_has_fpu
)paren
(brace
id|_init_fpu
c_func
(paren
)paren
suffix:semicolon
)brace
r_else
(brace
id|fpu_emulator_init_fpu
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
DECL|function|save_fp
r_static
r_inline
r_void
id|save_fp
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
)paren
(brace
r_if
c_cond
(paren
id|cpu_has_fpu
)paren
id|_save_fp
c_func
(paren
id|tsk
)paren
suffix:semicolon
)brace
DECL|function|restore_fp
r_static
r_inline
r_void
id|restore_fp
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
)paren
(brace
r_if
c_cond
(paren
id|cpu_has_fpu
)paren
id|_restore_fp
c_func
(paren
id|tsk
)paren
suffix:semicolon
)brace
DECL|function|get_fpu_regs
r_static
r_inline
id|fpureg_t
op_star
id|get_fpu_regs
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
)paren
(brace
r_if
c_cond
(paren
id|cpu_has_fpu
)paren
(brace
r_if
c_cond
(paren
(paren
id|tsk
op_eq
id|current
)paren
op_logical_and
id|is_fpu_owner
c_func
(paren
)paren
)paren
id|_save_fp
c_func
(paren
id|current
)paren
suffix:semicolon
r_return
id|tsk-&gt;thread.fpu.hard.fpr
suffix:semicolon
)brace
r_return
id|tsk-&gt;thread.fpu.soft.fpr
suffix:semicolon
)brace
macro_line|#endif /* _ASM_FPU_H */
eof
