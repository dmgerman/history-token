multiline_comment|/*&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 1996, 1999, 2000, 2001, 2003 by Ralf Baechle&n; * Copyright (C) 1999, 2000, 2001 Silicon Graphics, Inc.&n; */
macro_line|#ifndef _ASM_UNALIGNED_H
DECL|macro|_ASM_UNALIGNED_H
mdefine_line|#define _ASM_UNALIGNED_H
macro_line|#include &lt;linux/types.h&gt;
multiline_comment|/*&n; * get_unaligned - get value from possibly mis-aligned location&n; * @ptr: pointer to value&n; *&n; * This macro should be used for accessing values larger in size than&n; * single bytes at locations that are expected to be improperly aligned,&n; * e.g. retrieving a u16 value from a location not u16-aligned.&n; *&n; * Note that unaligned accesses can be very expensive on some architectures.&n; */
DECL|macro|get_unaligned
mdefine_line|#define get_unaligned(ptr) &bslash;&n;&t;((__typeof__(*(ptr)))__get_unaligned((ptr), sizeof(*(ptr))))
multiline_comment|/*&n; * put_unaligned - put value to a possibly mis-aligned location&n; * @val: value to place&n; * @ptr: pointer to location&n; *&n; * This macro should be used for placing values larger in size than&n; * single bytes at locations that are expected to be improperly aligned,&n; * e.g. writing a u16 value to a location not u16-aligned.&n; *&n; * Note that unaligned accesses can be very expensive on some architectures.&n; */
DECL|macro|put_unaligned
mdefine_line|#define put_unaligned(x,ptr) &bslash;&n;&t;__put_unaligned((__u64)(x), (ptr), sizeof(*(ptr)))
multiline_comment|/*&n; * This is a silly but good way to make sure that&n; * the get/put functions are indeed always optimized,&n; * and that we use the correct sizes.&n; */
r_extern
r_void
id|bad_unaligned_access_length
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*&n; * EGCS 1.1 knows about arbitrary unaligned loads.  Define some&n; * packed structures to talk about such things with.&n; */
DECL|struct|__una_u64
DECL|member|x
r_struct
id|__una_u64
(brace
id|__u64
id|x
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|__una_u32
DECL|member|x
r_struct
id|__una_u32
(brace
id|__u32
id|x
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|__una_u16
DECL|member|x
r_struct
id|__una_u16
(brace
id|__u16
id|x
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * Elemental unaligned loads &n; */
DECL|function|__uldq
r_extern
r_inline
id|__u64
id|__uldq
c_func
(paren
r_const
id|__u64
op_star
id|r11
)paren
(brace
r_const
r_struct
id|__una_u64
op_star
id|ptr
op_assign
(paren
r_const
r_struct
id|__una_u64
op_star
)paren
id|r11
suffix:semicolon
r_return
id|ptr-&gt;x
suffix:semicolon
)brace
DECL|function|__uldl
r_extern
r_inline
id|__u32
id|__uldl
c_func
(paren
r_const
id|__u32
op_star
id|r11
)paren
(brace
r_const
r_struct
id|__una_u32
op_star
id|ptr
op_assign
(paren
r_const
r_struct
id|__una_u32
op_star
)paren
id|r11
suffix:semicolon
r_return
id|ptr-&gt;x
suffix:semicolon
)brace
DECL|function|__uldw
r_extern
r_inline
id|__u16
id|__uldw
c_func
(paren
r_const
id|__u16
op_star
id|r11
)paren
(brace
r_const
r_struct
id|__una_u16
op_star
id|ptr
op_assign
(paren
r_const
r_struct
id|__una_u16
op_star
)paren
id|r11
suffix:semicolon
r_return
id|ptr-&gt;x
suffix:semicolon
)brace
multiline_comment|/*&n; * Elemental unaligned stores &n; */
DECL|function|__ustq
r_extern
r_inline
r_void
id|__ustq
c_func
(paren
id|__u64
id|r5
comma
id|__u64
op_star
id|r11
)paren
(brace
r_struct
id|__una_u64
op_star
id|ptr
op_assign
(paren
r_struct
id|__una_u64
op_star
)paren
id|r11
suffix:semicolon
id|ptr-&gt;x
op_assign
id|r5
suffix:semicolon
)brace
DECL|function|__ustl
r_extern
r_inline
r_void
id|__ustl
c_func
(paren
id|__u32
id|r5
comma
id|__u32
op_star
id|r11
)paren
(brace
r_struct
id|__una_u32
op_star
id|ptr
op_assign
(paren
r_struct
id|__una_u32
op_star
)paren
id|r11
suffix:semicolon
id|ptr-&gt;x
op_assign
id|r5
suffix:semicolon
)brace
DECL|function|__ustw
r_extern
r_inline
r_void
id|__ustw
c_func
(paren
id|__u16
id|r5
comma
id|__u16
op_star
id|r11
)paren
(brace
r_struct
id|__una_u16
op_star
id|ptr
op_assign
(paren
r_struct
id|__una_u16
op_star
)paren
id|r11
suffix:semicolon
id|ptr-&gt;x
op_assign
id|r5
suffix:semicolon
)brace
DECL|function|__get_unaligned
r_extern
r_inline
id|__u64
id|__get_unaligned
c_func
(paren
r_const
r_void
op_star
id|ptr
comma
r_int
id|size
)paren
(brace
id|__u64
id|val
suffix:semicolon
r_switch
c_cond
(paren
id|size
)paren
(brace
r_case
l_int|1
suffix:colon
id|val
op_assign
op_star
(paren
r_const
id|__u8
op_star
)paren
id|ptr
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|val
op_assign
id|__uldw
c_func
(paren
(paren
r_const
id|__u16
op_star
)paren
id|ptr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|4
suffix:colon
id|val
op_assign
id|__uldl
c_func
(paren
(paren
r_const
id|__u32
op_star
)paren
id|ptr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|8
suffix:colon
id|val
op_assign
id|__uldq
c_func
(paren
(paren
r_const
id|__u64
op_star
)paren
id|ptr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|bad_unaligned_access_length
c_func
(paren
)paren
suffix:semicolon
)brace
r_return
id|val
suffix:semicolon
)brace
DECL|function|__put_unaligned
r_extern
r_inline
r_void
id|__put_unaligned
c_func
(paren
id|__u64
id|val
comma
r_void
op_star
id|ptr
comma
r_int
id|size
)paren
(brace
r_switch
c_cond
(paren
id|size
)paren
(brace
r_case
l_int|1
suffix:colon
op_star
(paren
id|__u8
op_star
)paren
id|ptr
op_assign
(paren
id|val
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|__ustw
c_func
(paren
id|val
comma
(paren
id|__u16
op_star
)paren
id|ptr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|4
suffix:colon
id|__ustl
c_func
(paren
id|val
comma
(paren
id|__u32
op_star
)paren
id|ptr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|8
suffix:colon
id|__ustq
c_func
(paren
id|val
comma
(paren
id|__u64
op_star
)paren
id|ptr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|bad_unaligned_access_length
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
macro_line|#endif /* _ASM_UNALIGNED_H */
eof
