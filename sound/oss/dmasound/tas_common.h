macro_line|#ifndef _TAS_COMMON_H_
DECL|macro|_TAS_COMMON_H_
mdefine_line|#define _TAS_COMMON_H_
macro_line|#include &lt;linux/i2c.h&gt;
macro_line|#include &lt;linux/soundcard.h&gt;
macro_line|#include &lt;asm/string.h&gt;
DECL|macro|I2C_DRIVERID_TAS_BASE
mdefine_line|#define I2C_DRIVERID_TAS_BASE   (0xFEBA)
DECL|macro|SET_4_20
mdefine_line|#define SET_4_20(shadow, offset, val)                        &bslash;&n;&t;do {                                                 &bslash;&n;&t;&t;(shadow)[(offset)+0] = ((val) &gt;&gt; 16) &amp; 0xff; &bslash;&n;&t;&t;(shadow)[(offset)+1] = ((val) &gt;&gt; 8)  &amp; 0xff; &bslash;&n;&t;&t;(shadow)[(offset)+2] = ((val) &gt;&gt; 0)  &amp; 0xff; &bslash;&n;&t;} while (0)
DECL|macro|GET_4_20
mdefine_line|#define GET_4_20(shadow, offset)                             &bslash;&n;&t;(((u_int)((shadow)[(offset)+0]) &lt;&lt; 16) |             &bslash;&n;&t; ((u_int)((shadow)[(offset)+1]) &lt;&lt;  8) |             &bslash;&n;&t; ((u_int)((shadow)[(offset)+2]) &lt;&lt;  0))
DECL|macro|TAS_BIQUAD_FAST_LOAD
mdefine_line|#define TAS_BIQUAD_FAST_LOAD 0x01
DECL|macro|TAS_DRCE_ENABLE
mdefine_line|#define TAS_DRCE_ENABLE           0x01
DECL|macro|TAS_DRCE_ABOVE_RATIO
mdefine_line|#define TAS_DRCE_ABOVE_RATIO      0x02
DECL|macro|TAS_DRCE_BELOW_RATIO
mdefine_line|#define TAS_DRCE_BELOW_RATIO      0x04
DECL|macro|TAS_DRCE_THRESHOLD
mdefine_line|#define TAS_DRCE_THRESHOLD        0x08
DECL|macro|TAS_DRCE_ENERGY
mdefine_line|#define TAS_DRCE_ENERGY           0x10
DECL|macro|TAS_DRCE_ATTACK
mdefine_line|#define TAS_DRCE_ATTACK           0x20
DECL|macro|TAS_DRCE_DECAY
mdefine_line|#define TAS_DRCE_DECAY            0x40
DECL|macro|TAS_DRCE_ALL
mdefine_line|#define TAS_DRCE_ALL              0x7f
DECL|macro|TAS_OUTPUT_HEADPHONES
mdefine_line|#define TAS_OUTPUT_HEADPHONES     0x00
DECL|macro|TAS_OUTPUT_INTERNAL_SPKR
mdefine_line|#define TAS_OUTPUT_INTERNAL_SPKR  0x01
DECL|macro|TAS_OUTPUT_EXTERNAL_SPKR
mdefine_line|#define TAS_OUTPUT_EXTERNAL_SPKR  0x02
DECL|union|tas_biquad_t
r_union
id|tas_biquad_t
(brace
r_struct
(brace
DECL|member|b0
DECL|member|b1
DECL|member|b2
DECL|member|a1
DECL|member|a2
r_int
id|b0
comma
id|b1
comma
id|b2
comma
id|a1
comma
id|a2
suffix:semicolon
DECL|member|coeff
)brace
id|coeff
suffix:semicolon
DECL|member|buf
r_int
id|buf
(braket
l_int|5
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|tas_biquad_ctrl_t
r_struct
id|tas_biquad_ctrl_t
(brace
DECL|member|channel
id|u_int
id|channel
suffix:colon
l_int|4
suffix:semicolon
DECL|member|filter
id|u_int
id|filter
suffix:colon
l_int|4
suffix:semicolon
DECL|member|data
r_union
id|tas_biquad_t
id|data
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|tas_biquad_ctrl_list_t
r_struct
id|tas_biquad_ctrl_list_t
(brace
DECL|member|flags
r_int
id|flags
suffix:semicolon
DECL|member|filter_count
r_int
id|filter_count
suffix:semicolon
DECL|member|biquads
r_struct
id|tas_biquad_ctrl_t
id|biquads
(braket
l_int|0
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|tas_ratio_t
r_struct
id|tas_ratio_t
(brace
DECL|member|val
r_int
r_int
id|val
suffix:semicolon
multiline_comment|/* 8.8                        */
DECL|member|expand
r_int
r_int
id|expand
suffix:semicolon
multiline_comment|/* 0 = compress, !0 = expand. */
)brace
suffix:semicolon
DECL|struct|tas_drce_t
r_struct
id|tas_drce_t
(brace
DECL|member|enable
r_int
r_int
id|enable
suffix:semicolon
DECL|member|above
r_struct
id|tas_ratio_t
id|above
suffix:semicolon
DECL|member|below
r_struct
id|tas_ratio_t
id|below
suffix:semicolon
DECL|member|threshold
r_int
id|threshold
suffix:semicolon
multiline_comment|/* dB,       8.8 signed    */
DECL|member|energy
r_int
r_int
id|energy
suffix:semicolon
multiline_comment|/* seconds,  4.12 unsigned */
DECL|member|attack
r_int
r_int
id|attack
suffix:semicolon
multiline_comment|/* seconds,  4.12 unsigned */
DECL|member|decay
r_int
r_int
id|decay
suffix:semicolon
multiline_comment|/* seconds,  4.12 unsigned */
)brace
suffix:semicolon
DECL|struct|tas_drce_ctrl_t
r_struct
id|tas_drce_ctrl_t
(brace
DECL|member|flags
id|uint
id|flags
suffix:semicolon
DECL|member|data
r_struct
id|tas_drce_t
id|data
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|tas_gain_t
r_struct
id|tas_gain_t
(brace
DECL|member|master
r_int
r_int
op_star
id|master
suffix:semicolon
DECL|member|treble
r_int
r_int
op_star
id|treble
suffix:semicolon
DECL|member|bass
r_int
r_int
op_star
id|bass
suffix:semicolon
DECL|member|mixer
r_int
r_int
op_star
id|mixer
suffix:semicolon
)brace
suffix:semicolon
DECL|typedef|tas_shadow_t
r_typedef
r_char
id|tas_shadow_t
(braket
l_int|0x45
)braket
suffix:semicolon
DECL|struct|tas_data_t
r_struct
id|tas_data_t
(brace
DECL|member|client
r_struct
id|i2c_client
op_star
id|client
suffix:semicolon
DECL|member|shadow
id|tas_shadow_t
op_star
id|shadow
suffix:semicolon
DECL|member|mixer
id|uint
id|mixer
(braket
id|SOUND_MIXER_NRDEVICES
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|typedef|tas_hook_init_t
r_typedef
r_int
(paren
op_star
id|tas_hook_init_t
)paren
(paren
r_struct
id|i2c_client
op_star
)paren
suffix:semicolon
DECL|typedef|tas_hook_post_init_t
r_typedef
r_int
(paren
op_star
id|tas_hook_post_init_t
)paren
(paren
r_struct
id|tas_data_t
op_star
)paren
suffix:semicolon
DECL|typedef|tas_hook_uninit_t
r_typedef
r_void
(paren
op_star
id|tas_hook_uninit_t
)paren
(paren
r_struct
id|tas_data_t
op_star
)paren
suffix:semicolon
DECL|typedef|tas_hook_get_mixer_level_t
r_typedef
r_int
(paren
op_star
id|tas_hook_get_mixer_level_t
)paren
(paren
r_struct
id|tas_data_t
op_star
comma
r_int
comma
id|uint
op_star
)paren
suffix:semicolon
DECL|typedef|tas_hook_set_mixer_level_t
r_typedef
r_int
(paren
op_star
id|tas_hook_set_mixer_level_t
)paren
(paren
r_struct
id|tas_data_t
op_star
comma
r_int
comma
id|uint
)paren
suffix:semicolon
DECL|typedef|tas_hook_enter_sleep_t
r_typedef
r_int
(paren
op_star
id|tas_hook_enter_sleep_t
)paren
(paren
r_struct
id|tas_data_t
op_star
)paren
suffix:semicolon
DECL|typedef|tas_hook_leave_sleep_t
r_typedef
r_int
(paren
op_star
id|tas_hook_leave_sleep_t
)paren
(paren
r_struct
id|tas_data_t
op_star
)paren
suffix:semicolon
DECL|typedef|tas_hook_supported_mixers_t
r_typedef
r_int
(paren
op_star
id|tas_hook_supported_mixers_t
)paren
(paren
r_struct
id|tas_data_t
op_star
)paren
suffix:semicolon
DECL|typedef|tas_hook_mixer_is_stereo_t
r_typedef
r_int
(paren
op_star
id|tas_hook_mixer_is_stereo_t
)paren
(paren
r_struct
id|tas_data_t
op_star
comma
r_int
)paren
suffix:semicolon
DECL|typedef|tas_hook_stereo_mixers_t
r_typedef
r_int
(paren
op_star
id|tas_hook_stereo_mixers_t
)paren
(paren
r_struct
id|tas_data_t
op_star
)paren
suffix:semicolon
DECL|typedef|tas_hook_output_device_change_t
r_typedef
r_int
(paren
op_star
id|tas_hook_output_device_change_t
)paren
(paren
r_struct
id|tas_data_t
op_star
comma
r_int
comma
r_int
comma
r_int
)paren
suffix:semicolon
DECL|typedef|tas_hook_device_ioctl_t
r_typedef
r_int
(paren
op_star
id|tas_hook_device_ioctl_t
)paren
(paren
r_struct
id|tas_data_t
op_star
comma
id|u_int
comma
id|u_long
)paren
suffix:semicolon
DECL|struct|tas_driver_hooks_t
r_struct
id|tas_driver_hooks_t
(brace
multiline_comment|/*&n;&t; * All hardware initialisation must be performed in&n;&t; * post_init(), as tas_dmasound_init() does a hardware reset.&n;&t; *&n;&t; * init() is called before tas_dmasound_init() so that&n;&t; * ouput_device_change() is always called after i2c driver&n;&t; * initialisation. The implication is that&n;&t; * output_device_change() must cope with the fact that it&n;&t; * may be called before post_init().&n;&t; */
DECL|member|init
id|tas_hook_init_t
id|init
suffix:semicolon
DECL|member|post_init
id|tas_hook_post_init_t
id|post_init
suffix:semicolon
DECL|member|uninit
id|tas_hook_uninit_t
id|uninit
suffix:semicolon
DECL|member|get_mixer_level
id|tas_hook_get_mixer_level_t
id|get_mixer_level
suffix:semicolon
DECL|member|set_mixer_level
id|tas_hook_set_mixer_level_t
id|set_mixer_level
suffix:semicolon
DECL|member|enter_sleep
id|tas_hook_enter_sleep_t
id|enter_sleep
suffix:semicolon
DECL|member|leave_sleep
id|tas_hook_leave_sleep_t
id|leave_sleep
suffix:semicolon
DECL|member|supported_mixers
id|tas_hook_supported_mixers_t
id|supported_mixers
suffix:semicolon
DECL|member|mixer_is_stereo
id|tas_hook_mixer_is_stereo_t
id|mixer_is_stereo
suffix:semicolon
DECL|member|stereo_mixers
id|tas_hook_stereo_mixers_t
id|stereo_mixers
suffix:semicolon
DECL|member|output_device_change
id|tas_hook_output_device_change_t
id|output_device_change
suffix:semicolon
DECL|member|device_ioctl
id|tas_hook_device_ioctl_t
id|device_ioctl
suffix:semicolon
)brace
suffix:semicolon
DECL|enum|tas_write_mode_t
r_enum
id|tas_write_mode_t
(brace
DECL|enumerator|WRITE_HW
id|WRITE_HW
op_assign
l_int|0x01
comma
DECL|enumerator|WRITE_SHADOW
id|WRITE_SHADOW
op_assign
l_int|0x02
comma
DECL|enumerator|WRITE_NORMAL
id|WRITE_NORMAL
op_assign
l_int|0x03
comma
DECL|enumerator|FORCE_WRITE
id|FORCE_WRITE
op_assign
l_int|0x04
)brace
suffix:semicolon
r_static
r_inline
id|uint
DECL|function|tas_mono_to_stereo
id|tas_mono_to_stereo
c_func
(paren
id|uint
id|mono
)paren
(brace
id|mono
op_and_assign
l_int|0xff
suffix:semicolon
r_return
id|mono
op_or
(paren
id|mono
op_lshift
l_int|8
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Todo: make these functions a bit more efficient !&n; */
r_static
r_inline
r_int
DECL|function|tas_write_register
id|tas_write_register
c_func
(paren
r_struct
id|tas_data_t
op_star
id|self
comma
id|uint
id|reg_num
comma
id|uint
id|reg_width
comma
r_char
op_star
id|data
comma
id|uint
id|write_mode
)paren
(brace
r_int
id|rc
suffix:semicolon
r_if
c_cond
(paren
id|reg_width
op_eq
l_int|0
op_logical_or
id|data
op_eq
l_int|NULL
op_logical_or
id|self
op_eq
l_int|NULL
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|write_mode
op_amp
id|FORCE_WRITE
)paren
op_logical_and
op_logical_neg
id|memcmp
c_func
(paren
id|data
comma
id|self-&gt;shadow
(braket
id|reg_num
)braket
comma
id|reg_width
)paren
)paren
r_return
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|write_mode
op_amp
id|WRITE_SHADOW
)paren
id|memcpy
c_func
(paren
id|self-&gt;shadow
(braket
id|reg_num
)braket
comma
id|data
comma
id|reg_width
)paren
suffix:semicolon
r_if
c_cond
(paren
id|write_mode
op_amp
id|WRITE_HW
)paren
(brace
id|rc
op_assign
id|i2c_smbus_write_block_data
c_func
(paren
id|self-&gt;client
comma
id|reg_num
comma
id|reg_width
comma
id|data
)paren
suffix:semicolon
r_if
c_cond
(paren
id|rc
OL
l_int|0
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;tas: I2C block write failed &bslash;n&quot;
)paren
suffix:semicolon
r_return
id|rc
suffix:semicolon
)brace
)brace
r_return
l_int|0
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|tas_sync_register
id|tas_sync_register
c_func
(paren
r_struct
id|tas_data_t
op_star
id|self
comma
id|uint
id|reg_num
comma
id|uint
id|reg_width
)paren
(brace
r_int
id|rc
suffix:semicolon
r_if
c_cond
(paren
id|reg_width
op_eq
l_int|0
op_logical_or
id|self
op_eq
l_int|NULL
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
id|rc
op_assign
id|i2c_smbus_write_block_data
c_func
(paren
id|self-&gt;client
comma
id|reg_num
comma
id|reg_width
comma
id|self-&gt;shadow
(braket
id|reg_num
)braket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|rc
OL
l_int|0
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;tas: I2C block write failed &bslash;n&quot;
)paren
suffix:semicolon
r_return
id|rc
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|tas_write_byte_register
id|tas_write_byte_register
c_func
(paren
r_struct
id|tas_data_t
op_star
id|self
comma
id|uint
id|reg_num
comma
r_char
id|data
comma
id|uint
id|write_mode
)paren
(brace
r_if
c_cond
(paren
id|self
op_eq
l_int|NULL
)paren
r_return
op_minus
l_int|1
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|write_mode
op_amp
id|FORCE_WRITE
)paren
op_logical_and
id|data
op_ne
id|self-&gt;shadow
(braket
id|reg_num
)braket
(braket
l_int|0
)braket
)paren
r_return
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|write_mode
op_amp
id|WRITE_SHADOW
)paren
id|self-&gt;shadow
(braket
id|reg_num
)braket
(braket
l_int|0
)braket
op_assign
id|data
suffix:semicolon
r_if
c_cond
(paren
id|write_mode
op_amp
id|WRITE_HW
)paren
(brace
r_if
c_cond
(paren
id|i2c_smbus_write_byte_data
c_func
(paren
id|self-&gt;client
comma
id|reg_num
comma
id|data
)paren
OL
l_int|0
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;tas: I2C byte write failed &bslash;n&quot;
)paren
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
)brace
r_return
l_int|0
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|tas_sync_byte_register
id|tas_sync_byte_register
c_func
(paren
r_struct
id|tas_data_t
op_star
id|self
comma
id|uint
id|reg_num
comma
id|uint
id|reg_width
)paren
(brace
r_if
c_cond
(paren
id|reg_width
op_eq
l_int|0
op_logical_or
id|self
op_eq
l_int|NULL
)paren
r_return
op_minus
l_int|1
suffix:semicolon
r_if
c_cond
(paren
id|i2c_smbus_write_byte_data
c_func
(paren
id|self-&gt;client
comma
id|reg_num
comma
id|self-&gt;shadow
(braket
id|reg_num
)braket
(braket
l_int|0
)braket
)paren
OL
l_int|0
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;tas: I2C byte write failed &bslash;n&quot;
)paren
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
r_static
r_inline
r_int
DECL|function|tas_read_register
id|tas_read_register
c_func
(paren
r_struct
id|tas_data_t
op_star
id|self
comma
id|uint
id|reg_num
comma
id|uint
id|reg_width
comma
r_char
op_star
id|data
)paren
(brace
r_if
c_cond
(paren
id|reg_width
op_eq
l_int|0
op_logical_or
id|data
op_eq
l_int|NULL
op_logical_or
id|self
op_eq
l_int|NULL
)paren
r_return
op_minus
l_int|1
suffix:semicolon
id|memcpy
c_func
(paren
id|data
comma
id|self-&gt;shadow
(braket
id|reg_num
)braket
comma
id|reg_width
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
r_extern
r_int
id|tas_register_driver
c_func
(paren
r_struct
id|tas_driver_hooks_t
op_star
id|hooks
)paren
suffix:semicolon
r_extern
r_int
id|tas_get_mixer_level
c_func
(paren
r_int
id|mixer
comma
id|uint
op_star
id|level
)paren
suffix:semicolon
r_extern
r_int
id|tas_set_mixer_level
c_func
(paren
r_int
id|mixer
comma
id|uint
id|level
)paren
suffix:semicolon
r_extern
r_int
id|tas_enter_sleep
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|tas_leave_sleep
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|tas_supported_mixers
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|tas_mixer_is_stereo
c_func
(paren
r_int
id|mixer
)paren
suffix:semicolon
r_extern
r_int
id|tas_stereo_mixers
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|tas_output_device_change
c_func
(paren
r_int
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|tas_device_ioctl
c_func
(paren
id|u_int
comma
id|u_long
)paren
suffix:semicolon
r_extern
r_void
id|tas_cleanup
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|tas_init
c_func
(paren
r_int
id|driver_id
comma
r_const
r_char
op_star
id|driver_name
)paren
suffix:semicolon
r_extern
r_int
id|tas_post_init
c_func
(paren
r_void
)paren
suffix:semicolon
macro_line|#endif /* _TAS_COMMON_H_ */
multiline_comment|/*&n; * Local Variables:&n; * tab-width: 8&n; * indent-tabs-mode: t&n; * c-basic-offset: 8&n; * End:&n; */
eof
