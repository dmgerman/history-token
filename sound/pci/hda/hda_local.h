multiline_comment|/*&n; * Universal Interface for Intel High Definition Audio Codec&n; *&n; * Local helper functions&n; *&n; * Copyright (c) 2004 Takashi Iwai &lt;tiwai@suse.de&gt;&n; *&n; *  This program is free software; you can redistribute it and/or modify it&n; *  under the terms of the GNU General Public License as published by the Free&n; *  Software Foundation; either version 2 of the License, or (at your option)&n; *  any later version.&n; *&n; *  This program is distributed in the hope that it will be useful, but WITHOUT&n; *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or&n; *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for&n; *  more details.&n; *&n; *  You should have received a copy of the GNU General Public License along with&n; *  this program; if not, write to the Free Software Foundation, Inc., 59&n; *  Temple Place - Suite 330, Boston, MA  02111-1307, USA.&n; */
macro_line|#ifndef __SOUND_HDA_LOCAL_H
DECL|macro|__SOUND_HDA_LOCAL_H
mdefine_line|#define __SOUND_HDA_LOCAL_H
multiline_comment|/*&n; * for mixer controls&n; */
DECL|macro|HDA_COMPOSE_AMP_VAL
mdefine_line|#define HDA_COMPOSE_AMP_VAL(nid,chs,idx,dir) ((nid) | ((chs)&lt;&lt;16) | ((dir)&lt;&lt;18) | ((idx)&lt;&lt;19))
DECL|macro|HDA_CODEC_VOLUME_MONO_IDX
mdefine_line|#define HDA_CODEC_VOLUME_MONO_IDX(xname, xcidx, nid, channel, xindex, direction) &bslash;&n;&t;{ .iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, .index = xcidx,  &bslash;&n;&t;  .info = snd_hda_mixer_amp_volume_info, &bslash;&n;&t;  .get = snd_hda_mixer_amp_volume_get, &bslash;&n;&t;  .put = snd_hda_mixer_amp_volume_put, &bslash;&n;&t;  .private_value = HDA_COMPOSE_AMP_VAL(nid, channel, xindex, direction) }
DECL|macro|HDA_CODEC_VOLUME_IDX
mdefine_line|#define HDA_CODEC_VOLUME_IDX(xname, xcidx, nid, xindex, direction) &bslash;&n;&t;HDA_CODEC_VOLUME_MONO_IDX(xname, xcidx, nid, 3, xindex, direction)
DECL|macro|HDA_CODEC_VOLUME_MONO
mdefine_line|#define HDA_CODEC_VOLUME_MONO(xname, nid, channel, xindex, direction) &bslash;&n;&t;HDA_CODEC_VOLUME_MONO_IDX(xname, 0, nid, 3, xindex, direction)
DECL|macro|HDA_CODEC_VOLUME
mdefine_line|#define HDA_CODEC_VOLUME(xname, nid, xindex, direction) &bslash;&n;&t;HDA_CODEC_VOLUME_MONO(xname, nid, 3, xindex, direction)
DECL|macro|HDA_CODEC_MUTE_MONO_IDX
mdefine_line|#define HDA_CODEC_MUTE_MONO_IDX(xname, xcidx, nid, channel, xindex, direction) &bslash;&n;&t;{ .iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, .index = xcidx, &bslash;&n;&t;  .info = snd_hda_mixer_amp_switch_info, &bslash;&n;&t;  .get = snd_hda_mixer_amp_switch_get, &bslash;&n;&t;  .put = snd_hda_mixer_amp_switch_put, &bslash;&n;&t;  .private_value = HDA_COMPOSE_AMP_VAL(nid, channel, xindex, direction) }
DECL|macro|HDA_CODEC_MUTE_IDX
mdefine_line|#define HDA_CODEC_MUTE_IDX(xname, xcidx, nid, xindex, direction) &bslash;&n;&t;HDA_CODEC_MUTE_MONO_IDX(xname, xcidx, nid, 3, xindex, direction)
DECL|macro|HDA_CODEC_MUTE_MONO
mdefine_line|#define HDA_CODEC_MUTE_MONO(xname, nid, channel, xindex, direction) &bslash;&n;&t;HDA_CODEC_MUTE_MONO_IDX(xname, 0, nid, 3, xindex, direction)
DECL|macro|HDA_CODEC_MUTE
mdefine_line|#define HDA_CODEC_MUTE(xname, nid, xindex, direction) &bslash;&n;&t;HDA_CODEC_MUTE_MONO(xname, nid, 3, xindex, direction)
r_int
id|snd_hda_mixer_amp_volume_info
c_func
(paren
id|snd_kcontrol_t
op_star
id|kcontrol
comma
id|snd_ctl_elem_info_t
op_star
id|uinfo
)paren
suffix:semicolon
r_int
id|snd_hda_mixer_amp_volume_get
c_func
(paren
id|snd_kcontrol_t
op_star
id|kcontrol
comma
id|snd_ctl_elem_value_t
op_star
id|ucontrol
)paren
suffix:semicolon
r_int
id|snd_hda_mixer_amp_volume_put
c_func
(paren
id|snd_kcontrol_t
op_star
id|kcontrol
comma
id|snd_ctl_elem_value_t
op_star
id|ucontrol
)paren
suffix:semicolon
r_int
id|snd_hda_mixer_amp_switch_info
c_func
(paren
id|snd_kcontrol_t
op_star
id|kcontrol
comma
id|snd_ctl_elem_info_t
op_star
id|uinfo
)paren
suffix:semicolon
r_int
id|snd_hda_mixer_amp_switch_get
c_func
(paren
id|snd_kcontrol_t
op_star
id|kcontrol
comma
id|snd_ctl_elem_value_t
op_star
id|ucontrol
)paren
suffix:semicolon
r_int
id|snd_hda_mixer_amp_switch_put
c_func
(paren
id|snd_kcontrol_t
op_star
id|kcontrol
comma
id|snd_ctl_elem_value_t
op_star
id|ucontrol
)paren
suffix:semicolon
r_int
id|snd_hda_create_spdif_out_ctls
c_func
(paren
r_struct
id|hda_codec
op_star
id|codec
comma
id|hda_nid_t
id|nid
)paren
suffix:semicolon
multiline_comment|/*&n; * input MUX helper&n; */
DECL|macro|HDA_MAX_NUM_INPUTS
mdefine_line|#define HDA_MAX_NUM_INPUTS&t;8
DECL|struct|hda_input_mux_item
r_struct
id|hda_input_mux_item
(brace
DECL|member|label
r_const
r_char
op_star
id|label
suffix:semicolon
DECL|member|index
r_int
r_int
id|index
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|hda_input_mux
r_struct
id|hda_input_mux
(brace
DECL|member|num_items
r_int
r_int
id|num_items
suffix:semicolon
DECL|member|items
r_struct
id|hda_input_mux_item
id|items
(braket
id|HDA_MAX_NUM_INPUTS
)braket
suffix:semicolon
)brace
suffix:semicolon
r_int
id|snd_hda_input_mux_info
c_func
(paren
r_const
r_struct
id|hda_input_mux
op_star
id|imux
comma
id|snd_ctl_elem_info_t
op_star
id|uinfo
)paren
suffix:semicolon
r_int
id|snd_hda_input_mux_put
c_func
(paren
r_struct
id|hda_codec
op_star
id|codec
comma
r_const
r_struct
id|hda_input_mux
op_star
id|imux
comma
id|snd_ctl_elem_value_t
op_star
id|ucontrol
comma
id|hda_nid_t
id|nid
comma
r_int
r_int
op_star
id|cur_val
)paren
suffix:semicolon
multiline_comment|/*&n; * Multi-channel / digital-out PCM helper&n; */
DECL|enumerator|HDA_FRONT
DECL|enumerator|HDA_REAR
DECL|enumerator|HDA_CLFE
DECL|enumerator|HDA_SIDE
r_enum
(brace
id|HDA_FRONT
comma
id|HDA_REAR
comma
id|HDA_CLFE
comma
id|HDA_SIDE
)brace
suffix:semicolon
multiline_comment|/* index for dac_nidx */
DECL|enumerator|HDA_DIG_NONE
DECL|enumerator|HDA_DIG_EXCLUSIVE
DECL|enumerator|HDA_DIG_ANALOG_DUP
r_enum
(brace
id|HDA_DIG_NONE
comma
id|HDA_DIG_EXCLUSIVE
comma
id|HDA_DIG_ANALOG_DUP
)brace
suffix:semicolon
multiline_comment|/* dig_out_used */
DECL|struct|hda_multi_out
r_struct
id|hda_multi_out
(brace
DECL|member|num_dacs
r_int
id|num_dacs
suffix:semicolon
multiline_comment|/* # of DACs, must be more than 1 */
DECL|member|dac_nids
id|hda_nid_t
op_star
id|dac_nids
suffix:semicolon
multiline_comment|/* DAC list */
DECL|member|hp_nid
id|hda_nid_t
id|hp_nid
suffix:semicolon
multiline_comment|/* optional DAC for HP, 0 when not exists */
DECL|member|dig_out_nid
id|hda_nid_t
id|dig_out_nid
suffix:semicolon
multiline_comment|/* digital out audio widget */
DECL|member|max_channels
r_int
id|max_channels
suffix:semicolon
multiline_comment|/* currently supported analog channels */
DECL|member|dig_out_used
r_int
id|dig_out_used
suffix:semicolon
multiline_comment|/* current usage of digital out (HDA_DIG_XXX) */
)brace
suffix:semicolon
r_int
id|snd_hda_multi_out_dig_open
c_func
(paren
r_struct
id|hda_codec
op_star
id|codec
comma
r_struct
id|hda_multi_out
op_star
id|mout
)paren
suffix:semicolon
r_int
id|snd_hda_multi_out_dig_close
c_func
(paren
r_struct
id|hda_codec
op_star
id|codec
comma
r_struct
id|hda_multi_out
op_star
id|mout
)paren
suffix:semicolon
r_int
id|snd_hda_multi_out_analog_open
c_func
(paren
r_struct
id|hda_codec
op_star
id|codec
comma
r_struct
id|hda_multi_out
op_star
id|mout
comma
id|snd_pcm_substream_t
op_star
id|substream
)paren
suffix:semicolon
r_int
id|snd_hda_multi_out_analog_prepare
c_func
(paren
r_struct
id|hda_codec
op_star
id|codec
comma
r_struct
id|hda_multi_out
op_star
id|mout
comma
r_int
r_int
id|stream_tag
comma
r_int
r_int
id|format
comma
id|snd_pcm_substream_t
op_star
id|substream
)paren
suffix:semicolon
r_int
id|snd_hda_multi_out_analog_cleanup
c_func
(paren
r_struct
id|hda_codec
op_star
id|codec
comma
r_struct
id|hda_multi_out
op_star
id|mout
)paren
suffix:semicolon
multiline_comment|/*&n; * generic codec parser&n; */
r_int
id|snd_hda_parse_generic_codec
c_func
(paren
r_struct
id|hda_codec
op_star
id|codec
)paren
suffix:semicolon
multiline_comment|/*&n; * generic proc interface&n; */
macro_line|#ifdef CONFIG_PROC_FS
r_int
id|snd_hda_codec_proc_new
c_func
(paren
r_struct
id|hda_codec
op_star
id|codec
)paren
suffix:semicolon
macro_line|#else
DECL|function|snd_hda_codec_proc_new
r_static
r_inline
r_int
id|snd_hda_codec_proc_new
c_func
(paren
r_struct
id|hda_codec
op_star
id|codec
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
macro_line|#endif
multiline_comment|/*&n; * Misc&n; */
DECL|struct|hda_board_config
r_struct
id|hda_board_config
(brace
DECL|member|modelname
r_const
r_char
op_star
id|modelname
suffix:semicolon
DECL|member|config
r_int
id|config
suffix:semicolon
DECL|member|pci_vendor
r_int
r_int
id|pci_vendor
suffix:semicolon
DECL|member|pci_device
r_int
r_int
id|pci_device
suffix:semicolon
)brace
suffix:semicolon
r_int
id|snd_hda_check_board_config
c_func
(paren
r_struct
id|hda_codec
op_star
id|codec
comma
r_struct
id|hda_board_config
op_star
id|tbl
)paren
suffix:semicolon
r_int
id|snd_hda_add_new_ctls
c_func
(paren
r_struct
id|hda_codec
op_star
id|codec
comma
id|snd_kcontrol_new_t
op_star
id|knew
)paren
suffix:semicolon
multiline_comment|/*&n; * power management&n; */
macro_line|#ifdef CONFIG_PM
r_int
id|snd_hda_resume_ctls
c_func
(paren
r_struct
id|hda_codec
op_star
id|codec
comma
id|snd_kcontrol_new_t
op_star
id|knew
)paren
suffix:semicolon
r_int
id|snd_hda_resume_spdif_out
c_func
(paren
r_struct
id|hda_codec
op_star
id|codec
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/*&n; * unsolicited event handler&n; */
DECL|macro|HDA_UNSOL_QUEUE_SIZE
mdefine_line|#define HDA_UNSOL_QUEUE_SIZE&t;64
DECL|struct|hda_bus_unsolicited
r_struct
id|hda_bus_unsolicited
(brace
multiline_comment|/* ring buffer */
DECL|member|queue
id|u32
id|queue
(braket
id|HDA_UNSOL_QUEUE_SIZE
op_star
l_int|2
)braket
suffix:semicolon
DECL|member|rp
DECL|member|wp
r_int
r_int
id|rp
comma
id|wp
suffix:semicolon
multiline_comment|/* workqueue */
DECL|member|workq
r_struct
id|workqueue_struct
op_star
id|workq
suffix:semicolon
DECL|member|work
r_struct
id|work_struct
id|work
suffix:semicolon
)brace
suffix:semicolon
macro_line|#endif /* __SOUND_HDA_LOCAL_H */
eof
