multiline_comment|/*&n; *  ALSA sequencer Timer&n; *  Copyright (c) 1998-1999 by Frank van de Pol &lt;fvdpol@home.nl&gt;&n; *&n; *&n; *   This program is free software; you can redistribute it and/or modify&n; *   it under the terms of the GNU General Public License as published by&n; *   the Free Software Foundation; either version 2 of the License, or&n; *   (at your option) any later version.&n; *&n; *   This program is distributed in the hope that it will be useful,&n; *   but WITHOUT ANY WARRANTY; without even the implied warranty of&n; *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; *   GNU General Public License for more details.&n; *&n; *   You should have received a copy of the GNU General Public License&n; *   along with this program; if not, write to the Free Software&n; *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA&n; *&n; */
macro_line|#ifndef __SND_SEQ_TIMER_H
DECL|macro|__SND_SEQ_TIMER_H
mdefine_line|#define __SND_SEQ_TIMER_H
macro_line|#include &lt;sound/timer.h&gt;
macro_line|#include &lt;sound/seq_kernel.h&gt;
r_typedef
r_struct
(brace
DECL|member|cur_tick
id|snd_seq_tick_time_t
id|cur_tick
suffix:semicolon
multiline_comment|/* current tick */
DECL|member|resolution
r_int
r_int
id|resolution
suffix:semicolon
multiline_comment|/* time per tick in nsec */
DECL|member|fraction
r_int
r_int
id|fraction
suffix:semicolon
multiline_comment|/* current time per tick in nsec */
DECL|typedef|seq_timer_tick_t
)brace
id|seq_timer_tick_t
suffix:semicolon
r_typedef
r_struct
(brace
multiline_comment|/* ... tempo / offset / running state */
DECL|member|running
r_int
r_int
id|running
suffix:colon
l_int|1
comma
multiline_comment|/* running state of queue */
DECL|member|initialized
id|initialized
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* timer is initialized */
DECL|member|tempo
r_int
r_int
id|tempo
suffix:semicolon
multiline_comment|/* current tempo, us/tick */
DECL|member|ppq
r_int
id|ppq
suffix:semicolon
multiline_comment|/* time resolution, ticks/quarter */
DECL|member|cur_time
id|snd_seq_real_time_t
id|cur_time
suffix:semicolon
multiline_comment|/* current time */
DECL|member|tick
id|seq_timer_tick_t
id|tick
suffix:semicolon
multiline_comment|/* current tick */
DECL|member|tick_updated
r_int
id|tick_updated
suffix:semicolon
DECL|member|type
r_int
id|type
suffix:semicolon
multiline_comment|/* timer type */
DECL|member|alsa_id
id|snd_timer_id_t
id|alsa_id
suffix:semicolon
multiline_comment|/* ALSA&squot;s timer ID */
DECL|member|timeri
id|snd_timer_instance_t
op_star
id|timeri
suffix:semicolon
multiline_comment|/* timer instance */
DECL|member|ticks
r_int
r_int
id|ticks
suffix:semicolon
DECL|member|preferred_resolution
r_int
r_int
id|preferred_resolution
suffix:semicolon
multiline_comment|/* timer resolution */
DECL|member|skew
r_int
r_int
id|skew
suffix:semicolon
DECL|member|skew_base
r_int
r_int
id|skew_base
suffix:semicolon
DECL|member|last_update
r_struct
id|timeval
id|last_update
suffix:semicolon
multiline_comment|/* time of last clock update, used for interpolation */
DECL|member|lock
id|spinlock_t
id|lock
suffix:semicolon
DECL|typedef|seq_timer_t
)brace
id|seq_timer_t
suffix:semicolon
multiline_comment|/* create new timer (constructor) */
r_extern
id|seq_timer_t
op_star
id|snd_seq_timer_new
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/* delete timer (destructor) */
r_extern
r_void
id|snd_seq_timer_delete
c_func
(paren
id|seq_timer_t
op_star
op_star
id|tmr
)paren
suffix:semicolon
r_void
id|snd_seq_timer_set_tick_resolution
c_func
(paren
id|seq_timer_tick_t
op_star
id|tick
comma
r_int
id|tempo
comma
r_int
id|ppq
comma
r_int
id|nticks
)paren
suffix:semicolon
multiline_comment|/* */
DECL|function|snd_seq_timer_update_tick
r_static
r_inline
r_void
id|snd_seq_timer_update_tick
c_func
(paren
id|seq_timer_tick_t
op_star
id|tick
comma
r_int
r_int
id|resolution
)paren
(brace
r_if
c_cond
(paren
id|tick-&gt;resolution
OG
l_int|0
)paren
(brace
id|tick-&gt;fraction
op_add_assign
id|resolution
suffix:semicolon
id|tick-&gt;cur_tick
op_add_assign
(paren
r_int
r_int
)paren
(paren
id|tick-&gt;fraction
op_div
id|tick-&gt;resolution
)paren
suffix:semicolon
id|tick-&gt;fraction
op_mod_assign
id|tick-&gt;resolution
suffix:semicolon
)brace
)brace
multiline_comment|/* compare timestamp between events */
multiline_comment|/* return 1 if a &gt;= b; otherwise return 0 */
DECL|function|snd_seq_compare_tick_time
r_static
r_inline
r_int
id|snd_seq_compare_tick_time
c_func
(paren
id|snd_seq_tick_time_t
op_star
id|a
comma
id|snd_seq_tick_time_t
op_star
id|b
)paren
(brace
multiline_comment|/* compare ticks */
r_return
(paren
op_star
id|a
op_ge
op_star
id|b
)paren
suffix:semicolon
)brace
DECL|function|snd_seq_compare_real_time
r_static
r_inline
r_int
id|snd_seq_compare_real_time
c_func
(paren
id|snd_seq_real_time_t
op_star
id|a
comma
id|snd_seq_real_time_t
op_star
id|b
)paren
(brace
multiline_comment|/* compare real time */
r_if
c_cond
(paren
id|a-&gt;tv_sec
OG
id|b-&gt;tv_sec
)paren
r_return
l_int|1
suffix:semicolon
r_if
c_cond
(paren
(paren
id|a-&gt;tv_sec
op_eq
id|b-&gt;tv_sec
)paren
op_logical_and
(paren
id|a-&gt;tv_nsec
op_ge
id|b-&gt;tv_nsec
)paren
)paren
r_return
l_int|1
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|snd_seq_sanity_real_time
r_static
r_inline
r_void
id|snd_seq_sanity_real_time
c_func
(paren
id|snd_seq_real_time_t
op_star
id|tm
)paren
(brace
r_while
c_loop
(paren
id|tm-&gt;tv_nsec
op_ge
l_int|1000000000
)paren
(brace
multiline_comment|/* roll-over */
id|tm-&gt;tv_nsec
op_sub_assign
l_int|1000000000
suffix:semicolon
id|tm-&gt;tv_sec
op_increment
suffix:semicolon
)brace
)brace
multiline_comment|/* increment timestamp */
DECL|function|snd_seq_inc_real_time
r_static
r_inline
r_void
id|snd_seq_inc_real_time
c_func
(paren
id|snd_seq_real_time_t
op_star
id|tm
comma
id|snd_seq_real_time_t
op_star
id|inc
)paren
(brace
id|tm-&gt;tv_sec
op_add_assign
id|inc-&gt;tv_sec
suffix:semicolon
id|tm-&gt;tv_nsec
op_add_assign
id|inc-&gt;tv_nsec
suffix:semicolon
id|snd_seq_sanity_real_time
c_func
(paren
id|tm
)paren
suffix:semicolon
)brace
DECL|function|snd_seq_inc_time_nsec
r_static
r_inline
r_void
id|snd_seq_inc_time_nsec
c_func
(paren
id|snd_seq_real_time_t
op_star
id|tm
comma
r_int
r_int
id|nsec
)paren
(brace
id|tm-&gt;tv_nsec
op_add_assign
id|nsec
suffix:semicolon
id|snd_seq_sanity_real_time
c_func
(paren
id|tm
)paren
suffix:semicolon
)brace
multiline_comment|/* called by timer isr */
r_int
id|snd_seq_timer_open
c_func
(paren
id|queue_t
op_star
id|q
)paren
suffix:semicolon
r_int
id|snd_seq_timer_close
c_func
(paren
id|queue_t
op_star
id|q
)paren
suffix:semicolon
r_int
id|snd_seq_timer_midi_open
c_func
(paren
id|queue_t
op_star
id|q
)paren
suffix:semicolon
r_int
id|snd_seq_timer_midi_close
c_func
(paren
id|queue_t
op_star
id|q
)paren
suffix:semicolon
r_void
id|snd_seq_timer_defaults
c_func
(paren
id|seq_timer_t
op_star
id|tmr
)paren
suffix:semicolon
r_void
id|snd_seq_timer_reset
c_func
(paren
id|seq_timer_t
op_star
id|tmr
)paren
suffix:semicolon
r_void
id|snd_seq_timer_stop
c_func
(paren
id|seq_timer_t
op_star
id|tmr
)paren
suffix:semicolon
r_void
id|snd_seq_timer_start
c_func
(paren
id|seq_timer_t
op_star
id|tmr
)paren
suffix:semicolon
r_void
id|snd_seq_timer_continue
c_func
(paren
id|seq_timer_t
op_star
id|tmr
)paren
suffix:semicolon
r_int
id|snd_seq_timer_set_tempo
c_func
(paren
id|seq_timer_t
op_star
id|tmr
comma
r_int
id|tempo
)paren
suffix:semicolon
r_int
id|snd_seq_timer_set_ppq
c_func
(paren
id|seq_timer_t
op_star
id|tmr
comma
r_int
id|ppq
)paren
suffix:semicolon
r_int
id|snd_seq_timer_set_position_tick
c_func
(paren
id|seq_timer_t
op_star
id|tmr
comma
id|snd_seq_tick_time_t
id|position
)paren
suffix:semicolon
r_int
id|snd_seq_timer_set_position_time
c_func
(paren
id|seq_timer_t
op_star
id|tmr
comma
id|snd_seq_real_time_t
id|position
)paren
suffix:semicolon
r_int
id|snd_seq_timer_set_skew
c_func
(paren
id|seq_timer_t
op_star
id|tmr
comma
r_int
r_int
id|skew
comma
r_int
r_int
id|base
)paren
suffix:semicolon
id|snd_seq_real_time_t
id|snd_seq_timer_get_cur_time
c_func
(paren
id|seq_timer_t
op_star
id|tmr
)paren
suffix:semicolon
id|snd_seq_tick_time_t
id|snd_seq_timer_get_cur_tick
c_func
(paren
id|seq_timer_t
op_star
id|tmr
)paren
suffix:semicolon
macro_line|#endif
eof
