multiline_comment|/*&n; * OSS compatible sequencer driver&n; *&n; * seq_oss_event.h - OSS event queue record&n; *&n; * Copyright (C) 1998,99 Takashi Iwai &lt;tiwai@suse.de&gt;&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2 of the License, or&n; * (at your option) any later version.&n; *&n; * This program is distributed in the hope that it will be useful,&n; * but WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; * GNU General Public License for more details.&n; *&n; * You should have received a copy of the GNU General Public License&n; * along with this program; if not, write to the Free Software&n; * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA&n; */
macro_line|#ifndef __SEQ_OSS_EVENT_H
DECL|macro|__SEQ_OSS_EVENT_H
mdefine_line|#define __SEQ_OSS_EVENT_H
macro_line|#include &quot;seq_oss_device.h&quot;
DECL|macro|SHORT_EVENT_SIZE
mdefine_line|#define SHORT_EVENT_SIZE&t;4
DECL|macro|LONG_EVENT_SIZE
mdefine_line|#define LONG_EVENT_SIZE&t;&t;8
multiline_comment|/* short event (4bytes) */
DECL|struct|evrec_short_t
r_typedef
r_struct
id|evrec_short_t
(brace
DECL|member|code
r_int
r_char
id|code
suffix:semicolon
DECL|member|parm1
r_int
r_char
id|parm1
suffix:semicolon
DECL|member|dev
r_int
r_char
id|dev
suffix:semicolon
DECL|member|parm2
r_int
r_char
id|parm2
suffix:semicolon
DECL|typedef|evrec_short_t
)brace
id|evrec_short_t
suffix:semicolon
multiline_comment|/* short note events (4bytes) */
DECL|struct|evrec_note_t
r_typedef
r_struct
id|evrec_note_t
(brace
DECL|member|code
r_int
r_char
id|code
suffix:semicolon
DECL|member|chn
r_int
r_char
id|chn
suffix:semicolon
DECL|member|note
r_int
r_char
id|note
suffix:semicolon
DECL|member|vel
r_int
r_char
id|vel
suffix:semicolon
DECL|typedef|evrec_note_t
)brace
id|evrec_note_t
suffix:semicolon
multiline_comment|/* long timer events (8bytes) */
DECL|struct|evrec_timer_t
r_typedef
r_struct
id|evrec_timer_t
(brace
DECL|member|code
r_int
r_char
id|code
suffix:semicolon
DECL|member|cmd
r_int
r_char
id|cmd
suffix:semicolon
DECL|member|dummy1
DECL|member|dummy2
r_int
r_char
id|dummy1
comma
id|dummy2
suffix:semicolon
DECL|member|time
r_int
r_int
id|time
suffix:semicolon
DECL|typedef|evrec_timer_t
)brace
id|evrec_timer_t
suffix:semicolon
multiline_comment|/* long extended events (8bytes) */
DECL|struct|evrec_extended_t
r_typedef
r_struct
id|evrec_extended_t
(brace
DECL|member|code
r_int
r_char
id|code
suffix:semicolon
DECL|member|cmd
r_int
r_char
id|cmd
suffix:semicolon
DECL|member|dev
r_int
r_char
id|dev
suffix:semicolon
DECL|member|chn
r_int
r_char
id|chn
suffix:semicolon
DECL|member|p1
DECL|member|p2
DECL|member|p3
DECL|member|p4
r_int
r_char
id|p1
comma
id|p2
comma
id|p3
comma
id|p4
suffix:semicolon
DECL|typedef|evrec_extended_t
)brace
id|evrec_extended_t
suffix:semicolon
multiline_comment|/* long channel events (8bytes) */
DECL|struct|evrec_long_t
r_typedef
r_struct
id|evrec_long_t
(brace
DECL|member|code
r_int
r_char
id|code
suffix:semicolon
DECL|member|dev
r_int
r_char
id|dev
suffix:semicolon
DECL|member|cmd
r_int
r_char
id|cmd
suffix:semicolon
DECL|member|chn
r_int
r_char
id|chn
suffix:semicolon
DECL|member|p1
DECL|member|p2
r_int
r_char
id|p1
comma
id|p2
suffix:semicolon
DECL|member|val
r_int
r_int
id|val
suffix:semicolon
DECL|typedef|evrec_long_t
)brace
id|evrec_long_t
suffix:semicolon
multiline_comment|/* channel voice events (8bytes) */
DECL|struct|evrec_voice_t
r_typedef
r_struct
id|evrec_voice_t
(brace
DECL|member|code
r_int
r_char
id|code
suffix:semicolon
DECL|member|dev
r_int
r_char
id|dev
suffix:semicolon
DECL|member|cmd
r_int
r_char
id|cmd
suffix:semicolon
DECL|member|chn
r_int
r_char
id|chn
suffix:semicolon
DECL|member|note
DECL|member|parm
r_int
r_char
id|note
comma
id|parm
suffix:semicolon
DECL|member|dummy
r_int
r_int
id|dummy
suffix:semicolon
DECL|typedef|evrec_voice_t
)brace
id|evrec_voice_t
suffix:semicolon
multiline_comment|/* sysex events (8bytes) */
DECL|struct|evrec_sysex_t
r_typedef
r_struct
id|evrec_sysex_t
(brace
DECL|member|code
r_int
r_char
id|code
suffix:semicolon
DECL|member|dev
r_int
r_char
id|dev
suffix:semicolon
DECL|member|buf
r_int
r_char
id|buf
(braket
l_int|6
)braket
suffix:semicolon
DECL|typedef|evrec_sysex_t
)brace
id|evrec_sysex_t
suffix:semicolon
multiline_comment|/* event record */
DECL|union|evrec_t
r_union
id|evrec_t
(brace
DECL|member|s
id|evrec_short_t
id|s
suffix:semicolon
DECL|member|n
id|evrec_note_t
id|n
suffix:semicolon
DECL|member|l
id|evrec_long_t
id|l
suffix:semicolon
DECL|member|v
id|evrec_voice_t
id|v
suffix:semicolon
DECL|member|t
id|evrec_timer_t
id|t
suffix:semicolon
DECL|member|e
id|evrec_extended_t
id|e
suffix:semicolon
DECL|member|x
id|evrec_sysex_t
id|x
suffix:semicolon
DECL|member|echo
r_int
r_int
id|echo
suffix:semicolon
DECL|member|c
r_int
r_char
id|c
(braket
id|LONG_EVENT_SIZE
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|ev_is_long
mdefine_line|#define ev_is_long(ev) ((ev)-&gt;s.code &gt;= 128)
DECL|macro|ev_length
mdefine_line|#define ev_length(ev) ((ev)-&gt;s.code &gt;= 128 ? LONG_EVENT_SIZE : SHORT_EVENT_SIZE)
r_int
id|snd_seq_oss_process_event
c_func
(paren
id|seq_oss_devinfo_t
op_star
id|dp
comma
id|evrec_t
op_star
id|q
comma
id|snd_seq_event_t
op_star
id|ev
)paren
suffix:semicolon
r_int
id|snd_seq_oss_process_timer_event
c_func
(paren
id|seq_oss_timer_t
op_star
id|rec
comma
id|evrec_t
op_star
id|q
)paren
suffix:semicolon
r_int
id|snd_seq_oss_event_input
c_func
(paren
id|snd_seq_event_t
op_star
id|ev
comma
r_int
id|direct
comma
r_void
op_star
id|private_data
comma
r_int
id|atomic
comma
r_int
id|hop
)paren
suffix:semicolon
macro_line|#endif /* __SEQ_OSS_EVENT_H */
eof
