macro_line|#ifndef __EMUX_VOICE_H
DECL|macro|__EMUX_VOICE_H
mdefine_line|#define __EMUX_VOICE_H
multiline_comment|/*&n; * A structure to keep track of each hardware voice&n; *&n; *  Copyright (C) 1999 Steve Ratcliffe&n; *  Copyright (c) 1999-2000 Takashi Iwai &lt;tiwai@suse.de&gt;&n; *&n; *   This program is free software; you can redistribute it and/or modify&n; *   it under the terms of the GNU General Public License as published by&n; *   the Free Software Foundation; either version 2 of the License, or&n; *   (at your option) any later version.&n; *&n; *   This program is distributed in the hope that it will be useful,&n; *   but WITHOUT ANY WARRANTY; without even the implied warranty of&n; *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; *   GNU General Public License for more details.&n; *&n; *   You should have received a copy of the GNU General Public License&n; *   along with this program; if not, write to the Free Software&n; *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA&n; */
macro_line|#include &lt;sound/driver.h&gt;
macro_line|#include &lt;linux/wait.h&gt;
macro_line|#include &lt;linux/sched.h&gt;
macro_line|#include &lt;sound/core.h&gt;
macro_line|#include &lt;sound/emux_synth.h&gt;
multiline_comment|/* Prototypes for emux_seq.c */
r_int
id|snd_emux_init_seq
c_func
(paren
id|snd_emux_t
op_star
id|emu
comma
id|snd_card_t
op_star
id|card
comma
r_int
id|index
)paren
suffix:semicolon
r_void
id|snd_emux_detach_seq
c_func
(paren
id|snd_emux_t
op_star
id|emu
)paren
suffix:semicolon
id|snd_emux_port_t
op_star
id|snd_emux_create_port
c_func
(paren
id|snd_emux_t
op_star
id|emu
comma
r_char
op_star
id|name
comma
r_int
id|max_channels
comma
r_int
id|type
comma
id|snd_seq_port_callback_t
op_star
id|callback
)paren
suffix:semicolon
r_void
id|snd_emux_reset_port
c_func
(paren
id|snd_emux_port_t
op_star
id|port
)paren
suffix:semicolon
r_int
id|snd_emux_event_input
c_func
(paren
id|snd_seq_event_t
op_star
id|ev
comma
r_int
id|direct
comma
r_void
op_star
r_private
comma
r_int
id|atomic
comma
r_int
id|hop
)paren
suffix:semicolon
r_int
id|snd_emux_inc_count
c_func
(paren
id|snd_emux_t
op_star
id|emu
)paren
suffix:semicolon
r_void
id|snd_emux_dec_count
c_func
(paren
id|snd_emux_t
op_star
id|emu
)paren
suffix:semicolon
r_int
id|snd_emux_init_virmidi
c_func
(paren
id|snd_emux_t
op_star
id|emu
comma
id|snd_card_t
op_star
id|card
)paren
suffix:semicolon
r_int
id|snd_emux_delete_virmidi
c_func
(paren
id|snd_emux_t
op_star
id|emu
)paren
suffix:semicolon
multiline_comment|/* Prototypes for emux_synth.c */
r_void
id|snd_emux_init_voices
c_func
(paren
id|snd_emux_t
op_star
id|emu
)paren
suffix:semicolon
r_void
id|snd_emux_note_on
c_func
(paren
r_void
op_star
id|p
comma
r_int
id|note
comma
r_int
id|vel
comma
r_struct
id|snd_midi_channel
op_star
id|chan
)paren
suffix:semicolon
r_void
id|snd_emux_note_off
c_func
(paren
r_void
op_star
id|p
comma
r_int
id|note
comma
r_int
id|vel
comma
r_struct
id|snd_midi_channel
op_star
id|chan
)paren
suffix:semicolon
r_void
id|snd_emux_key_press
c_func
(paren
r_void
op_star
id|p
comma
r_int
id|note
comma
r_int
id|vel
comma
r_struct
id|snd_midi_channel
op_star
id|chan
)paren
suffix:semicolon
r_void
id|snd_emux_terminate_note
c_func
(paren
r_void
op_star
id|p
comma
r_int
id|note
comma
id|snd_midi_channel_t
op_star
id|chan
)paren
suffix:semicolon
r_void
id|snd_emux_control
c_func
(paren
r_void
op_star
id|p
comma
r_int
id|type
comma
r_struct
id|snd_midi_channel
op_star
id|chan
)paren
suffix:semicolon
r_void
id|snd_emux_sounds_off_all
c_func
(paren
id|snd_emux_port_t
op_star
id|port
)paren
suffix:semicolon
r_void
id|snd_emux_update_channel
c_func
(paren
id|snd_emux_port_t
op_star
id|port
comma
id|snd_midi_channel_t
op_star
id|chan
comma
r_int
id|update
)paren
suffix:semicolon
r_void
id|snd_emux_update_port
c_func
(paren
id|snd_emux_port_t
op_star
id|port
comma
r_int
id|update
)paren
suffix:semicolon
r_void
id|snd_emux_timer_callback
c_func
(paren
r_int
r_int
id|data
)paren
suffix:semicolon
multiline_comment|/* emux_effect.c */
macro_line|#ifdef SNDRV_EMUX_USE_RAW_EFFECT
r_void
id|snd_emux_create_effect
c_func
(paren
id|snd_emux_port_t
op_star
id|p
)paren
suffix:semicolon
r_void
id|snd_emux_delete_effect
c_func
(paren
id|snd_emux_port_t
op_star
id|p
)paren
suffix:semicolon
r_void
id|snd_emux_clear_effect
c_func
(paren
id|snd_emux_port_t
op_star
id|p
)paren
suffix:semicolon
r_void
id|snd_emux_setup_effect
c_func
(paren
id|snd_emux_voice_t
op_star
id|vp
)paren
suffix:semicolon
r_void
id|snd_emux_send_effect_oss
c_func
(paren
id|snd_emux_port_t
op_star
id|port
comma
id|snd_midi_channel_t
op_star
id|chan
comma
r_int
id|type
comma
r_int
id|val
)paren
suffix:semicolon
r_void
id|snd_emux_send_effect
c_func
(paren
id|snd_emux_port_t
op_star
id|port
comma
id|snd_midi_channel_t
op_star
id|chan
comma
r_int
id|type
comma
r_int
id|val
comma
r_int
id|mode
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/* emux_nrpn.c */
r_void
id|snd_emux_sysex
c_func
(paren
r_void
op_star
id|private_data
comma
r_int
r_char
op_star
id|buf
comma
r_int
id|len
comma
r_int
id|parsed
comma
id|snd_midi_channel_set_t
op_star
id|chset
)paren
suffix:semicolon
r_int
id|snd_emux_xg_control
c_func
(paren
id|snd_emux_port_t
op_star
id|port
comma
id|snd_midi_channel_t
op_star
id|chan
comma
r_int
id|param
)paren
suffix:semicolon
r_void
id|snd_emux_nrpn
c_func
(paren
r_void
op_star
id|private_data
comma
id|snd_midi_channel_t
op_star
id|chan
comma
id|snd_midi_channel_set_t
op_star
id|chset
)paren
suffix:semicolon
multiline_comment|/* emux_oss.c */
r_void
id|snd_emux_init_seq_oss
c_func
(paren
id|snd_emux_t
op_star
id|emu
)paren
suffix:semicolon
r_void
id|snd_emux_detach_seq_oss
c_func
(paren
id|snd_emux_t
op_star
id|emu
)paren
suffix:semicolon
multiline_comment|/* emux_proc.c */
macro_line|#ifdef CONFIG_PROC_FS
r_void
id|snd_emux_proc_init
c_func
(paren
id|snd_emux_t
op_star
id|emu
comma
id|snd_card_t
op_star
id|card
comma
r_int
id|device
)paren
suffix:semicolon
r_void
id|snd_emux_proc_free
c_func
(paren
id|snd_emux_t
op_star
id|emu
)paren
suffix:semicolon
macro_line|#endif
DECL|macro|STATE_IS_PLAYING
mdefine_line|#define STATE_IS_PLAYING(s) ((s) &amp; SNDRV_EMUX_ST_ON)
macro_line|#endif
eof
