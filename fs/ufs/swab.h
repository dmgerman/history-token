multiline_comment|/*&n; *  linux/fs/ufs/swab.h&n; *&n; * Copyright (C) 1997, 1998 Francois-Rene Rideau &lt;fare@tunes.org&gt;&n; * Copyright (C) 1998 Jakub Jelinek &lt;jj@ultra.linux.cz&gt;&n; * Copyright (C) 2001 Christoph Hellwig &lt;hch@infradead.org&gt;&n; */
macro_line|#ifndef _UFS_SWAB_H
DECL|macro|_UFS_SWAB_H
mdefine_line|#define _UFS_SWAB_H
multiline_comment|/*&n; * Notes:&n; *    HERE WE ASSUME EITHER BIG OR LITTLE ENDIAN UFSes&n; *    in case there are ufs implementations that have strange bytesexes,&n; *    you&squot;ll need to modify code here as well as in ufs_super.c and ufs_fs.h&n; *    to support them.&n; */
r_enum
(brace
DECL|enumerator|BYTESEX_LE
id|BYTESEX_LE
comma
DECL|enumerator|BYTESEX_BE
id|BYTESEX_BE
)brace
suffix:semicolon
r_static
r_inline
id|u64
DECL|function|fs64_to_cpu
id|fs64_to_cpu
c_func
(paren
r_struct
id|super_block
op_star
id|sbp
comma
id|__fs64
id|n
)paren
(brace
r_if
c_cond
(paren
id|UFS_SB
c_func
(paren
id|sbp
)paren
op_member_access_from_pointer
id|s_bytesex
op_eq
id|BYTESEX_LE
)paren
r_return
id|le64_to_cpu
c_func
(paren
(paren
id|__force
id|__le64
)paren
id|n
)paren
suffix:semicolon
r_else
r_return
id|be64_to_cpu
c_func
(paren
(paren
id|__force
id|__be64
)paren
id|n
)paren
suffix:semicolon
)brace
r_static
r_inline
id|__fs64
DECL|function|cpu_to_fs64
id|cpu_to_fs64
c_func
(paren
r_struct
id|super_block
op_star
id|sbp
comma
id|u64
id|n
)paren
(brace
r_if
c_cond
(paren
id|UFS_SB
c_func
(paren
id|sbp
)paren
op_member_access_from_pointer
id|s_bytesex
op_eq
id|BYTESEX_LE
)paren
r_return
(paren
id|__force
id|__fs64
)paren
id|cpu_to_le64
c_func
(paren
id|n
)paren
suffix:semicolon
r_else
r_return
(paren
id|__force
id|__fs64
)paren
id|cpu_to_be64
c_func
(paren
id|n
)paren
suffix:semicolon
)brace
r_static
id|__inline
id|u32
DECL|function|fs64_add
id|fs64_add
c_func
(paren
r_struct
id|super_block
op_star
id|sbp
comma
id|u32
op_star
id|n
comma
r_int
id|d
)paren
(brace
r_if
c_cond
(paren
id|UFS_SB
c_func
(paren
id|sbp
)paren
op_member_access_from_pointer
id|s_bytesex
op_eq
id|BYTESEX_LE
)paren
r_return
op_star
id|n
op_assign
id|cpu_to_le64
c_func
(paren
id|le64_to_cpu
c_func
(paren
op_star
id|n
)paren
op_plus
id|d
)paren
suffix:semicolon
r_else
r_return
op_star
id|n
op_assign
id|cpu_to_be64
c_func
(paren
id|be64_to_cpu
c_func
(paren
op_star
id|n
)paren
op_plus
id|d
)paren
suffix:semicolon
)brace
r_static
id|__inline
id|u32
DECL|function|fs64_sub
id|fs64_sub
c_func
(paren
r_struct
id|super_block
op_star
id|sbp
comma
id|u32
op_star
id|n
comma
r_int
id|d
)paren
(brace
r_if
c_cond
(paren
id|UFS_SB
c_func
(paren
id|sbp
)paren
op_member_access_from_pointer
id|s_bytesex
op_eq
id|BYTESEX_LE
)paren
r_return
op_star
id|n
op_assign
id|cpu_to_le64
c_func
(paren
id|le64_to_cpu
c_func
(paren
op_star
id|n
)paren
op_minus
id|d
)paren
suffix:semicolon
r_else
r_return
op_star
id|n
op_assign
id|cpu_to_be64
c_func
(paren
id|be64_to_cpu
c_func
(paren
op_star
id|n
)paren
op_minus
id|d
)paren
suffix:semicolon
)brace
r_static
id|__inline
id|u32
DECL|function|fs32_to_cpu
id|fs32_to_cpu
c_func
(paren
r_struct
id|super_block
op_star
id|sbp
comma
id|__fs32
id|n
)paren
(brace
r_if
c_cond
(paren
id|UFS_SB
c_func
(paren
id|sbp
)paren
op_member_access_from_pointer
id|s_bytesex
op_eq
id|BYTESEX_LE
)paren
r_return
id|le32_to_cpu
c_func
(paren
(paren
id|__force
id|__le32
)paren
id|n
)paren
suffix:semicolon
r_else
r_return
id|be32_to_cpu
c_func
(paren
(paren
id|__force
id|__be32
)paren
id|n
)paren
suffix:semicolon
)brace
r_static
r_inline
id|__fs32
DECL|function|cpu_to_fs32
id|cpu_to_fs32
c_func
(paren
r_struct
id|super_block
op_star
id|sbp
comma
id|u32
id|n
)paren
(brace
r_if
c_cond
(paren
id|UFS_SB
c_func
(paren
id|sbp
)paren
op_member_access_from_pointer
id|s_bytesex
op_eq
id|BYTESEX_LE
)paren
r_return
(paren
id|__force
id|__fs32
)paren
id|cpu_to_le32
c_func
(paren
id|n
)paren
suffix:semicolon
r_else
r_return
(paren
id|__force
id|__fs32
)paren
id|cpu_to_be32
c_func
(paren
id|n
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|fs32_add
id|fs32_add
c_func
(paren
r_struct
id|super_block
op_star
id|sbp
comma
id|__fs32
op_star
id|n
comma
r_int
id|d
)paren
(brace
r_if
c_cond
(paren
id|UFS_SB
c_func
(paren
id|sbp
)paren
op_member_access_from_pointer
id|s_bytesex
op_eq
id|BYTESEX_LE
)paren
op_star
(paren
id|__le32
op_star
)paren
id|n
op_assign
id|cpu_to_le32
c_func
(paren
id|le32_to_cpu
c_func
(paren
op_star
(paren
id|__le32
op_star
)paren
id|n
)paren
op_plus
id|d
)paren
suffix:semicolon
r_else
op_star
(paren
id|__be32
op_star
)paren
id|n
op_assign
id|cpu_to_be32
c_func
(paren
id|be32_to_cpu
c_func
(paren
op_star
(paren
id|__be32
op_star
)paren
id|n
)paren
op_plus
id|d
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|fs32_sub
id|fs32_sub
c_func
(paren
r_struct
id|super_block
op_star
id|sbp
comma
id|__fs32
op_star
id|n
comma
r_int
id|d
)paren
(brace
r_if
c_cond
(paren
id|UFS_SB
c_func
(paren
id|sbp
)paren
op_member_access_from_pointer
id|s_bytesex
op_eq
id|BYTESEX_LE
)paren
op_star
(paren
id|__le32
op_star
)paren
id|n
op_assign
id|cpu_to_le32
c_func
(paren
id|le32_to_cpu
c_func
(paren
op_star
(paren
id|__le32
op_star
)paren
id|n
)paren
op_minus
id|d
)paren
suffix:semicolon
r_else
op_star
(paren
id|__be32
op_star
)paren
id|n
op_assign
id|cpu_to_be32
c_func
(paren
id|be32_to_cpu
c_func
(paren
op_star
(paren
id|__be32
op_star
)paren
id|n
)paren
op_minus
id|d
)paren
suffix:semicolon
)brace
r_static
r_inline
id|u16
DECL|function|fs16_to_cpu
id|fs16_to_cpu
c_func
(paren
r_struct
id|super_block
op_star
id|sbp
comma
id|__fs16
id|n
)paren
(brace
r_if
c_cond
(paren
id|UFS_SB
c_func
(paren
id|sbp
)paren
op_member_access_from_pointer
id|s_bytesex
op_eq
id|BYTESEX_LE
)paren
r_return
id|le16_to_cpu
c_func
(paren
(paren
id|__force
id|__le16
)paren
id|n
)paren
suffix:semicolon
r_else
r_return
id|be16_to_cpu
c_func
(paren
(paren
id|__force
id|__be16
)paren
id|n
)paren
suffix:semicolon
)brace
r_static
r_inline
id|__fs16
DECL|function|cpu_to_fs16
id|cpu_to_fs16
c_func
(paren
r_struct
id|super_block
op_star
id|sbp
comma
id|u16
id|n
)paren
(brace
r_if
c_cond
(paren
id|UFS_SB
c_func
(paren
id|sbp
)paren
op_member_access_from_pointer
id|s_bytesex
op_eq
id|BYTESEX_LE
)paren
r_return
(paren
id|__force
id|__fs16
)paren
id|cpu_to_le16
c_func
(paren
id|n
)paren
suffix:semicolon
r_else
r_return
(paren
id|__force
id|__fs16
)paren
id|cpu_to_be16
c_func
(paren
id|n
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|fs16_add
id|fs16_add
c_func
(paren
r_struct
id|super_block
op_star
id|sbp
comma
id|__fs16
op_star
id|n
comma
r_int
id|d
)paren
(brace
r_if
c_cond
(paren
id|UFS_SB
c_func
(paren
id|sbp
)paren
op_member_access_from_pointer
id|s_bytesex
op_eq
id|BYTESEX_LE
)paren
op_star
(paren
id|__le16
op_star
)paren
id|n
op_assign
id|cpu_to_le16
c_func
(paren
id|le16_to_cpu
c_func
(paren
op_star
(paren
id|__le16
op_star
)paren
id|n
)paren
op_plus
id|d
)paren
suffix:semicolon
r_else
op_star
(paren
id|__be16
op_star
)paren
id|n
op_assign
id|cpu_to_be16
c_func
(paren
id|be16_to_cpu
c_func
(paren
op_star
(paren
id|__be16
op_star
)paren
id|n
)paren
op_plus
id|d
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|fs16_sub
id|fs16_sub
c_func
(paren
r_struct
id|super_block
op_star
id|sbp
comma
id|__fs16
op_star
id|n
comma
r_int
id|d
)paren
(brace
r_if
c_cond
(paren
id|UFS_SB
c_func
(paren
id|sbp
)paren
op_member_access_from_pointer
id|s_bytesex
op_eq
id|BYTESEX_LE
)paren
op_star
(paren
id|__le16
op_star
)paren
id|n
op_assign
id|cpu_to_le16
c_func
(paren
id|le16_to_cpu
c_func
(paren
op_star
(paren
id|__le16
op_star
)paren
id|n
)paren
op_minus
id|d
)paren
suffix:semicolon
r_else
op_star
(paren
id|__be16
op_star
)paren
id|n
op_assign
id|cpu_to_be16
c_func
(paren
id|be16_to_cpu
c_func
(paren
op_star
(paren
id|__be16
op_star
)paren
id|n
)paren
op_minus
id|d
)paren
suffix:semicolon
)brace
macro_line|#endif /* _UFS_SWAB_H */
eof
