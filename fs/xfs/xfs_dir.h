multiline_comment|/*&n; * Copyright (c) 2000 Silicon Graphics, Inc.  All Rights Reserved.&n; *&n; * This program is free software; you can redistribute it and/or modify it&n; * under the terms of version 2 of the GNU General Public License as&n; * published by the Free Software Foundation.&n; *&n; * This program is distributed in the hope that it would be useful, but&n; * WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&n; *&n; * Further, this software is distributed without any warranty that it is&n; * free of the rightful claim of any third person regarding infringement&n; * or the like.&t; Any license provided herein, whether implied or&n; * otherwise, applies only to this software file.  Patent licenses, if&n; * any, provided herein do not apply to combinations of this program with&n; * other software, or any other product whatsoever.&n; *&n; * You should have received a copy of the GNU General Public License along&n; * with this program; if not, write the Free Software Foundation, Inc., 59&n; * Temple Place - Suite 330, Boston MA 02111-1307, USA.&n; *&n; * Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,&n; * Mountain View, CA  94043, or:&n; *&n; * http://www.sgi.com&n; *&n; * For further information regarding this notice, see:&n; *&n; * http://oss.sgi.com/projects/GenInfo/SGIGPLNoticeExplan/&n; */
macro_line|#ifndef __XFS_DIR_H__
DECL|macro|__XFS_DIR_H__
mdefine_line|#define __XFS_DIR_H__
multiline_comment|/*&n; * Large directories are structured around Btrees where all the data&n; * elements are in the leaf nodes.  Filenames are hashed into an int,&n; * then that int is used as the index into the Btree.  Since the hashval&n; * of a filename may not be unique, we may have duplicate keys.&t; The&n; * internal links in the Btree are logical block offsets into the file.&n; *&n; * Small directories use a different format and are packed as tightly&n; * as possible so as to fit into the literal area of the inode.&n; */
macro_line|#ifdef XFS_ALL_TRACE
DECL|macro|XFS_DIR_TRACE
mdefine_line|#define XFS_DIR_TRACE
macro_line|#endif
macro_line|#if !defined(DEBUG)
DECL|macro|XFS_DIR_TRACE
macro_line|#undef XFS_DIR_TRACE
macro_line|#endif
multiline_comment|/*========================================================================&n; * Function prototypes for the kernel.&n; *========================================================================*/
r_struct
id|uio
suffix:semicolon
r_struct
id|xfs_bmap_free
suffix:semicolon
r_struct
id|xfs_da_args
suffix:semicolon
r_struct
id|xfs_dinode
suffix:semicolon
r_struct
id|xfs_inode
suffix:semicolon
r_struct
id|xfs_mount
suffix:semicolon
r_struct
id|xfs_trans
suffix:semicolon
multiline_comment|/*&n; * Directory function types.&n; * Put in structures (xfs_dirops_t) for v1 and v2 directories.&n; */
DECL|typedef|xfs_dir_mount_t
r_typedef
r_void
(paren
op_star
id|xfs_dir_mount_t
)paren
(paren
r_struct
id|xfs_mount
op_star
id|mp
)paren
suffix:semicolon
DECL|typedef|xfs_dir_isempty_t
r_typedef
r_int
(paren
op_star
id|xfs_dir_isempty_t
)paren
(paren
r_struct
id|xfs_inode
op_star
id|dp
)paren
suffix:semicolon
DECL|typedef|xfs_dir_init_t
r_typedef
r_int
(paren
op_star
id|xfs_dir_init_t
)paren
(paren
r_struct
id|xfs_trans
op_star
id|tp
comma
r_struct
id|xfs_inode
op_star
id|dp
comma
r_struct
id|xfs_inode
op_star
id|pdp
)paren
suffix:semicolon
DECL|typedef|xfs_dir_createname_t
r_typedef
r_int
(paren
op_star
id|xfs_dir_createname_t
)paren
(paren
r_struct
id|xfs_trans
op_star
id|tp
comma
r_struct
id|xfs_inode
op_star
id|dp
comma
r_char
op_star
id|name
comma
r_int
id|namelen
comma
id|xfs_ino_t
id|inum
comma
id|xfs_fsblock_t
op_star
id|first
comma
r_struct
id|xfs_bmap_free
op_star
id|flist
comma
id|xfs_extlen_t
id|total
)paren
suffix:semicolon
DECL|typedef|xfs_dir_lookup_t
r_typedef
r_int
(paren
op_star
id|xfs_dir_lookup_t
)paren
(paren
r_struct
id|xfs_trans
op_star
id|tp
comma
r_struct
id|xfs_inode
op_star
id|dp
comma
r_char
op_star
id|name
comma
r_int
id|namelen
comma
id|xfs_ino_t
op_star
id|inum
)paren
suffix:semicolon
DECL|typedef|xfs_dir_removename_t
r_typedef
r_int
(paren
op_star
id|xfs_dir_removename_t
)paren
(paren
r_struct
id|xfs_trans
op_star
id|tp
comma
r_struct
id|xfs_inode
op_star
id|dp
comma
r_char
op_star
id|name
comma
r_int
id|namelen
comma
id|xfs_ino_t
id|ino
comma
id|xfs_fsblock_t
op_star
id|first
comma
r_struct
id|xfs_bmap_free
op_star
id|flist
comma
id|xfs_extlen_t
id|total
)paren
suffix:semicolon
DECL|typedef|xfs_dir_getdents_t
r_typedef
r_int
(paren
op_star
id|xfs_dir_getdents_t
)paren
(paren
r_struct
id|xfs_trans
op_star
id|tp
comma
r_struct
id|xfs_inode
op_star
id|dp
comma
r_struct
id|uio
op_star
id|uio
comma
r_int
op_star
id|eofp
)paren
suffix:semicolon
DECL|typedef|xfs_dir_replace_t
r_typedef
r_int
(paren
op_star
id|xfs_dir_replace_t
)paren
(paren
r_struct
id|xfs_trans
op_star
id|tp
comma
r_struct
id|xfs_inode
op_star
id|dp
comma
r_char
op_star
id|name
comma
r_int
id|namelen
comma
id|xfs_ino_t
id|inum
comma
id|xfs_fsblock_t
op_star
id|first
comma
r_struct
id|xfs_bmap_free
op_star
id|flist
comma
id|xfs_extlen_t
id|total
)paren
suffix:semicolon
DECL|typedef|xfs_dir_canenter_t
r_typedef
r_int
(paren
op_star
id|xfs_dir_canenter_t
)paren
(paren
r_struct
id|xfs_trans
op_star
id|tp
comma
r_struct
id|xfs_inode
op_star
id|dp
comma
r_char
op_star
id|name
comma
r_int
id|namelen
)paren
suffix:semicolon
DECL|typedef|xfs_dir_shortform_validate_ondisk_t
r_typedef
r_int
(paren
op_star
id|xfs_dir_shortform_validate_ondisk_t
)paren
(paren
r_struct
id|xfs_mount
op_star
id|mp
comma
r_struct
id|xfs_dinode
op_star
id|dip
)paren
suffix:semicolon
DECL|typedef|xfs_dir_shortform_to_single_t
r_typedef
r_int
(paren
op_star
id|xfs_dir_shortform_to_single_t
)paren
(paren
r_struct
id|xfs_da_args
op_star
id|args
)paren
suffix:semicolon
DECL|struct|xfs_dirops
r_typedef
r_struct
id|xfs_dirops
(brace
DECL|member|xd_mount
id|xfs_dir_mount_t
id|xd_mount
suffix:semicolon
DECL|member|xd_isempty
id|xfs_dir_isempty_t
id|xd_isempty
suffix:semicolon
DECL|member|xd_init
id|xfs_dir_init_t
id|xd_init
suffix:semicolon
DECL|member|xd_createname
id|xfs_dir_createname_t
id|xd_createname
suffix:semicolon
DECL|member|xd_lookup
id|xfs_dir_lookup_t
id|xd_lookup
suffix:semicolon
DECL|member|xd_removename
id|xfs_dir_removename_t
id|xd_removename
suffix:semicolon
DECL|member|xd_getdents
id|xfs_dir_getdents_t
id|xd_getdents
suffix:semicolon
DECL|member|xd_replace
id|xfs_dir_replace_t
id|xd_replace
suffix:semicolon
DECL|member|xd_canenter
id|xfs_dir_canenter_t
id|xd_canenter
suffix:semicolon
DECL|member|xd_shortform_validate_ondisk
id|xfs_dir_shortform_validate_ondisk_t
id|xd_shortform_validate_ondisk
suffix:semicolon
DECL|member|xd_shortform_to_single
id|xfs_dir_shortform_to_single_t
id|xd_shortform_to_single
suffix:semicolon
DECL|typedef|xfs_dirops_t
)brace
id|xfs_dirops_t
suffix:semicolon
multiline_comment|/*&n; * Overall external interface routines.&n; */
r_void
id|xfs_dir_startup
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/* called exactly once */
DECL|macro|XFS_DIR_MOUNT
mdefine_line|#define XFS_DIR_MOUNT(mp)&t;&bslash;&n;&t;((mp)-&gt;m_dirops.xd_mount(mp))
DECL|macro|XFS_DIR_ISEMPTY
mdefine_line|#define XFS_DIR_ISEMPTY(mp,dp)&t;&bslash;&n;&t;((mp)-&gt;m_dirops.xd_isempty(dp))
DECL|macro|XFS_DIR_INIT
mdefine_line|#define XFS_DIR_INIT(mp,tp,dp,pdp)&t;&bslash;&n;&t;((mp)-&gt;m_dirops.xd_init(tp,dp,pdp))
DECL|macro|XFS_DIR_CREATENAME
mdefine_line|#define XFS_DIR_CREATENAME(mp,tp,dp,name,namelen,inum,first,flist,total) &bslash;&n;&t;((mp)-&gt;m_dirops.xd_createname(tp,dp,name,namelen,inum,first,flist,&bslash;&n;&t;&t;&t;&t;      total))
DECL|macro|XFS_DIR_LOOKUP
mdefine_line|#define XFS_DIR_LOOKUP(mp,tp,dp,name,namelen,inum)&t;&bslash;&n;&t;((mp)-&gt;m_dirops.xd_lookup(tp,dp,name,namelen,inum))
DECL|macro|XFS_DIR_REMOVENAME
mdefine_line|#define XFS_DIR_REMOVENAME(mp,tp,dp,name,namelen,ino,first,flist,total) &bslash;&n;&t;((mp)-&gt;m_dirops.xd_removename(tp,dp,name,namelen,ino,first,flist,total))
DECL|macro|XFS_DIR_GETDENTS
mdefine_line|#define XFS_DIR_GETDENTS(mp,tp,dp,uio,eofp)&t;&bslash;&n;&t;((mp)-&gt;m_dirops.xd_getdents(tp,dp,uio,eofp))
DECL|macro|XFS_DIR_REPLACE
mdefine_line|#define XFS_DIR_REPLACE(mp,tp,dp,name,namelen,inum,first,flist,total)&t;&bslash;&n;&t;((mp)-&gt;m_dirops.xd_replace(tp,dp,name,namelen,inum,first,flist,total))
DECL|macro|XFS_DIR_CANENTER
mdefine_line|#define XFS_DIR_CANENTER(mp,tp,dp,name,namelen) &bslash;&n;&t;((mp)-&gt;m_dirops.xd_canenter(tp,dp,name,namelen))
DECL|macro|XFS_DIR_SHORTFORM_VALIDATE_ONDISK
mdefine_line|#define XFS_DIR_SHORTFORM_VALIDATE_ONDISK(mp,dip)&t;&bslash;&n;&t;((mp)-&gt;m_dirops.xd_shortform_validate_ondisk(mp,dip))
DECL|macro|XFS_DIR_SHORTFORM_TO_SINGLE
mdefine_line|#define XFS_DIR_SHORTFORM_TO_SINGLE(mp,args)&t;&bslash;&n;&t;((mp)-&gt;m_dirops.xd_shortform_to_single(args))
DECL|macro|XFS_DIR_IS_V1
mdefine_line|#define XFS_DIR_IS_V1(mp)&t;((mp)-&gt;m_dirversion == 1)
r_extern
id|xfs_dirops_t
id|xfsv1_dirops
suffix:semicolon
macro_line|#endif&t;/* __XFS_DIR_H__ */
eof
