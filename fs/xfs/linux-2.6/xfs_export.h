multiline_comment|/*&n; * Copyright (c) 2005 Silicon Graphics, Inc.  All Rights Reserved.&n; *&n; * This program is free software; you can redistribute it and/or modify it&n; * under the terms of version 2 of the GNU General Public License as&n; * published by the Free Software Foundation.&n; *&n; * This program is distributed in the hope that it would be useful, but&n; * WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&n; *&n; * Further, this software is distributed without any warranty that it is&n; * free of the rightful claim of any third person regarding infringement&n; * or the like.  Any license provided herein, whether implied or&n; * otherwise, applies only to this software file.  Patent licenses, if&n; * any, provided herein do not apply to combinations of this program with&n; * other software, or any other product whatsoever.&n; *&n; * You should have received a copy of the GNU General Public License along&n; * with this program; if not, write the Free Software Foundation, Inc., 59&n; * Temple Place - Suite 330, Boston MA 02111-1307, USA.&n; *&n; * Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,&n; * Mountain View, CA  94043, or:&n; *&n; * http://www.sgi.com&n; *&n; * For further information regarding this notice, see:&n; *&n; * http://oss.sgi.com/projects/GenInfo/SGIGPLNoticeExplan/&n; */
macro_line|#ifndef __XFS_EXPORT_H__
DECL|macro|__XFS_EXPORT_H__
mdefine_line|#define __XFS_EXPORT_H__
multiline_comment|/*&n; * Common defines for code related to exporting XFS filesystems over NFS.&n; *&n; * The NFS fileid goes out on the wire as an array of&n; * 32bit unsigned ints in host order.  There are 5 possible&n; * formats.&n; *&n; * (1)&t;fileid_type=0x00&n; *&t;(no fileid data; handled by the generic code)&n; *&n; * (2)&t;fileid_type=0x01&n; *&t;inode-num&n; *&t;generation&n; *&n; * (3)&t;fileid_type=0x02&n; *&t;inode-num&n; *&t;generation&n; *&t;parent-inode-num&n; *&t;parent-generation&n; *&n; * (4)&t;fileid_type=0x81&n; *&t;inode-num-lo32&n; *&t;inode-num-hi32&n; *&t;generation&n; *&n; * (5)&t;fileid_type=0x82&n; *&t;inode-num-lo32&n; *&t;inode-num-hi32&n; *&t;generation&n; *&t;parent-inode-num-lo32&n; *&t;parent-inode-num-hi32&n; *&t;parent-generation&n; *&n; * Note, the NFS filehandle also includes an fsid portion which&n; * may have an inode number in it.  That number is hardcoded to&n; * 32bits and there is no way for XFS to intercept it.  In&n; * practice this means when exporting an XFS filesytem with 64bit&n; * inodes you should either export the mountpoint (rather than&n; * a subdirectory) or use the &quot;fsid&quot; export option.&n; */
multiline_comment|/* This flag goes on the wire.  Don&squot;t play with it. */
DECL|macro|XFS_FILEID_TYPE_64FLAG
mdefine_line|#define XFS_FILEID_TYPE_64FLAG&t;0x80&t;/* NFS fileid has 64bit inodes */
multiline_comment|/* Calculate the length in u32 units of the fileid data */
r_static
r_inline
r_int
DECL|function|xfs_fileid_length
id|xfs_fileid_length
c_func
(paren
r_int
id|hasparent
comma
r_int
id|is64
)paren
(brace
r_return
id|hasparent
ques
c_cond
(paren
id|is64
ques
c_cond
l_int|6
suffix:colon
l_int|4
)paren
suffix:colon
(paren
id|is64
ques
c_cond
l_int|3
suffix:colon
l_int|2
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Decode encoded inode information (either for the inode itself&n; * or the parent) into an xfs_fid2_t structure.  Advances and&n; * returns the new data pointer&n; */
r_static
r_inline
id|__u32
op_star
DECL|function|xfs_fileid_decode_fid2
id|xfs_fileid_decode_fid2
c_func
(paren
id|__u32
op_star
id|p
comma
id|xfs_fid2_t
op_star
id|fid
comma
r_int
id|is64
)paren
(brace
id|fid-&gt;fid_len
op_assign
r_sizeof
(paren
id|xfs_fid2_t
)paren
op_minus
r_sizeof
(paren
id|fid-&gt;fid_len
)paren
suffix:semicolon
id|fid-&gt;fid_pad
op_assign
l_int|0
suffix:semicolon
id|fid-&gt;fid_ino
op_assign
op_star
id|p
op_increment
suffix:semicolon
macro_line|#if XFS_BIG_INUMS
r_if
c_cond
(paren
id|is64
)paren
id|fid-&gt;fid_ino
op_or_assign
(paren
(paren
(paren
id|__u64
)paren
(paren
op_star
id|p
op_increment
)paren
)paren
op_lshift
l_int|32
)paren
suffix:semicolon
macro_line|#endif
id|fid-&gt;fid_gen
op_assign
op_star
id|p
op_increment
suffix:semicolon
r_return
id|p
suffix:semicolon
)brace
multiline_comment|/*&n; * Encode inode information (either for the inode itself or the&n; * parent) into a fileid buffer.  Advances and returns the new&n; * data pointer.&n; */
r_static
r_inline
id|__u32
op_star
DECL|function|xfs_fileid_encode_inode
id|xfs_fileid_encode_inode
c_func
(paren
id|__u32
op_star
id|p
comma
r_struct
id|inode
op_star
id|inode
comma
r_int
id|is64
)paren
(brace
op_star
id|p
op_increment
op_assign
(paren
id|__u32
)paren
id|inode-&gt;i_ino
suffix:semicolon
macro_line|#if XFS_BIG_INUMS
r_if
c_cond
(paren
id|is64
)paren
op_star
id|p
op_increment
op_assign
(paren
id|__u32
)paren
(paren
id|inode-&gt;i_ino
op_rshift
l_int|32
)paren
suffix:semicolon
macro_line|#endif
op_star
id|p
op_increment
op_assign
id|inode-&gt;i_generation
suffix:semicolon
r_return
id|p
suffix:semicolon
)brace
macro_line|#endif&t;/* __XFS_EXPORT_H__ */
eof
