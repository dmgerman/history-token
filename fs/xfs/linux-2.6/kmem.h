multiline_comment|/*&n; * Copyright (c) 2000-2004 Silicon Graphics, Inc.  All Rights Reserved.&n; *&n; * This program is free software; you can redistribute it and/or modify it&n; * under the terms of version 2 of the GNU General Public License as&n; * published by the Free Software Foundation.&n; *&n; * This program is distributed in the hope that it would be useful, but&n; * WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&n; *&n; * Further, this software is distributed without any warranty that it is&n; * free of the rightful claim of any third person regarding infringement&n; * or the like.  Any license provided herein, whether implied or&n; * otherwise, applies only to this software file.  Patent licenses, if&n; * any, provided herein do not apply to combinations of this program with&n; * other software, or any other product whatsoever.&n; *&n; * You should have received a copy of the GNU General Public License along&n; * with this program; if not, write the Free Software Foundation, Inc., 59&n; * Temple Place - Suite 330, Boston MA 02111-1307, USA.&n; *&n; * Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,&n; * Mountain View, CA  94043, or:&n; *&n; * http://www.sgi.com&n; *&n; * For further information regarding this notice, see:&n; *&n; * http://oss.sgi.com/projects/GenInfo/SGIGPLNoticeExplan/&n; */
macro_line|#ifndef __XFS_SUPPORT_KMEM_H__
DECL|macro|__XFS_SUPPORT_KMEM_H__
mdefine_line|#define __XFS_SUPPORT_KMEM_H__
macro_line|#include &lt;linux/slab.h&gt;
macro_line|#include &lt;linux/sched.h&gt;
macro_line|#include &lt;linux/mm.h&gt;
multiline_comment|/*&n; * memory management routines&n; */
DECL|macro|KM_SLEEP
mdefine_line|#define KM_SLEEP&t;0x0001
DECL|macro|KM_NOSLEEP
mdefine_line|#define KM_NOSLEEP&t;0x0002
DECL|macro|KM_NOFS
mdefine_line|#define KM_NOFS&t;&t;0x0004
DECL|macro|KM_MAYFAIL
mdefine_line|#define KM_MAYFAIL&t;0x0008
DECL|macro|kmem_zone
mdefine_line|#define&t;kmem_zone&t;kmem_cache_s
DECL|macro|kmem_zone_t
mdefine_line|#define kmem_zone_t&t;kmem_cache_t
DECL|typedef|xfs_pflags_t
r_typedef
r_int
r_int
id|xfs_pflags_t
suffix:semicolon
DECL|macro|PFLAGS_TEST_NOIO
mdefine_line|#define PFLAGS_TEST_NOIO()              (current-&gt;flags &amp; PF_NOIO)
DECL|macro|PFLAGS_TEST_FSTRANS
mdefine_line|#define PFLAGS_TEST_FSTRANS()           (current-&gt;flags &amp; PF_FSTRANS)
DECL|macro|PFLAGS_SET_NOIO
mdefine_line|#define PFLAGS_SET_NOIO() do {&t;&t;&bslash;&n;&t;current-&gt;flags |= PF_NOIO;&t;&bslash;&n;} while (0)
DECL|macro|PFLAGS_CLEAR_NOIO
mdefine_line|#define PFLAGS_CLEAR_NOIO() do {&t;&bslash;&n;&t;current-&gt;flags &amp;= ~PF_NOIO;&t;&bslash;&n;} while (0)
multiline_comment|/* these could be nested, so we save state */
DECL|macro|PFLAGS_SET_FSTRANS
mdefine_line|#define PFLAGS_SET_FSTRANS(STATEP) do {&t;&bslash;&n;&t;*(STATEP) = current-&gt;flags;&t;&bslash;&n;&t;current-&gt;flags |= PF_FSTRANS;&t;&bslash;&n;} while (0)
DECL|macro|PFLAGS_CLEAR_FSTRANS
mdefine_line|#define PFLAGS_CLEAR_FSTRANS(STATEP) do { &bslash;&n;&t;*(STATEP) = current-&gt;flags;&t;&bslash;&n;&t;current-&gt;flags &amp;= ~PF_FSTRANS;&t;&bslash;&n;} while (0)
multiline_comment|/* Restore the PF_FSTRANS state to what was saved in STATEP */
DECL|macro|PFLAGS_RESTORE_FSTRANS
mdefine_line|#define PFLAGS_RESTORE_FSTRANS(STATEP) do {     &t;&t;&bslash;&n;&t;current-&gt;flags = ((current-&gt;flags &amp; ~PF_FSTRANS) |&t;&bslash;&n;&t;&t;&t;  (*(STATEP) &amp; PF_FSTRANS));&t;&t;&bslash;&n;} while (0)
DECL|macro|PFLAGS_DUP
mdefine_line|#define PFLAGS_DUP(OSTATEP, NSTATEP) do { &bslash;&n;&t;*(NSTATEP) = *(OSTATEP);&t;&bslash;&n;} while (0)
DECL|function|kmem_flags_convert
r_static
id|__inline
r_int
r_int
id|kmem_flags_convert
c_func
(paren
r_int
id|flags
)paren
(brace
r_int
id|lflags
suffix:semicolon
macro_line|#ifdef DEBUG
r_if
c_cond
(paren
id|unlikely
c_func
(paren
id|flags
op_amp
op_complement
(paren
id|KM_SLEEP
op_or
id|KM_NOSLEEP
op_or
id|KM_NOFS
op_or
id|KM_MAYFAIL
)paren
)paren
)paren
(brace
id|printk
c_func
(paren
id|KERN_WARNING
l_string|&quot;XFS: memory allocation with wrong flags (%x)&bslash;n&quot;
comma
id|flags
)paren
suffix:semicolon
id|BUG
c_func
(paren
)paren
suffix:semicolon
)brace
macro_line|#endif
r_if
c_cond
(paren
id|flags
op_amp
id|KM_NOSLEEP
)paren
(brace
id|lflags
op_assign
id|GFP_ATOMIC
suffix:semicolon
)brace
r_else
(brace
id|lflags
op_assign
id|GFP_KERNEL
suffix:semicolon
multiline_comment|/* avoid recusive callbacks to filesystem during transactions */
r_if
c_cond
(paren
id|PFLAGS_TEST_FSTRANS
c_func
(paren
)paren
op_logical_or
(paren
id|flags
op_amp
id|KM_NOFS
)paren
)paren
id|lflags
op_and_assign
op_complement
id|__GFP_FS
suffix:semicolon
)brace
r_return
id|lflags
suffix:semicolon
)brace
r_static
id|__inline
id|kmem_zone_t
op_star
DECL|function|kmem_zone_init
id|kmem_zone_init
c_func
(paren
r_int
id|size
comma
r_char
op_star
id|zone_name
)paren
(brace
r_return
id|kmem_cache_create
c_func
(paren
id|zone_name
comma
id|size
comma
l_int|0
comma
l_int|0
comma
l_int|NULL
comma
l_int|NULL
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|kmem_zone_free
id|kmem_zone_free
c_func
(paren
id|kmem_zone_t
op_star
id|zone
comma
r_void
op_star
id|ptr
)paren
(brace
id|kmem_cache_free
c_func
(paren
id|zone
comma
id|ptr
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|kmem_zone_destroy
id|kmem_zone_destroy
c_func
(paren
id|kmem_zone_t
op_star
id|zone
)paren
(brace
r_if
c_cond
(paren
id|zone
op_logical_and
id|kmem_cache_destroy
c_func
(paren
id|zone
)paren
)paren
id|BUG
c_func
(paren
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_int
DECL|function|kmem_zone_shrink
id|kmem_zone_shrink
c_func
(paren
id|kmem_zone_t
op_star
id|zone
)paren
(brace
r_return
id|kmem_cache_shrink
c_func
(paren
id|zone
)paren
suffix:semicolon
)brace
r_extern
r_void
op_star
id|kmem_zone_zalloc
c_func
(paren
id|kmem_zone_t
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
op_star
id|kmem_zone_alloc
c_func
(paren
id|kmem_zone_t
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
op_star
id|kmem_alloc
c_func
(paren
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
op_star
id|kmem_realloc
c_func
(paren
r_void
op_star
comma
r_int
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
op_star
id|kmem_zalloc
c_func
(paren
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|kmem_free
c_func
(paren
r_void
op_star
comma
r_int
)paren
suffix:semicolon
DECL|typedef|kmem_shaker_t
r_typedef
r_struct
id|shrinker
op_star
id|kmem_shaker_t
suffix:semicolon
DECL|typedef|kmem_shake_func_t
r_typedef
r_int
(paren
op_star
id|kmem_shake_func_t
)paren
(paren
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_static
id|__inline
id|kmem_shaker_t
DECL|function|kmem_shake_register
id|kmem_shake_register
c_func
(paren
id|kmem_shake_func_t
id|sfunc
)paren
(brace
r_return
id|set_shrinker
c_func
(paren
id|DEFAULT_SEEKS
comma
id|sfunc
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_void
DECL|function|kmem_shake_deregister
id|kmem_shake_deregister
c_func
(paren
id|kmem_shaker_t
id|shrinker
)paren
(brace
id|remove_shrinker
c_func
(paren
id|shrinker
)paren
suffix:semicolon
)brace
r_static
id|__inline
r_int
DECL|function|kmem_shake_allow
id|kmem_shake_allow
c_func
(paren
r_int
r_int
id|gfp_mask
)paren
(brace
r_return
(paren
id|gfp_mask
op_amp
id|__GFP_WAIT
)paren
suffix:semicolon
)brace
macro_line|#endif /* __XFS_SUPPORT_KMEM_H__ */
eof
