multiline_comment|/*&n; * struct.h - Structure definitions&n; *&n; * Copyright (C) 1997 R&#xfffd;gis Duchesne&n; * Copyright (C) 2000-2001 Anton Altaparmakov (AIA)&n; */
macro_line|#include &lt;linux/ntfs_fs.h&gt;
multiline_comment|/* Necessary forward definition. */
r_struct
id|ntfs_inode
suffix:semicolon
multiline_comment|/* Which files should be returned from a director listing. */
DECL|macro|ngt_dos
mdefine_line|#define ngt_dos   1&t;/* only short names, no system files */
DECL|macro|ngt_nt
mdefine_line|#define ngt_nt    2&t;/* only long names, all-uppercase becomes &n;&t;&t;&t; * all-lowercase, no system files */
DECL|macro|ngt_posix
mdefine_line|#define ngt_posix 3&t;/* all names except system files */
DECL|macro|ngt_full
mdefine_line|#define ngt_full  4&t;/* all entries */
DECL|typedef|ntfs_volume
r_typedef
r_struct
id|ntfs_sb_info
id|ntfs_volume
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|lcn
id|ntfs_cluster_t
id|lcn
suffix:semicolon
DECL|member|len
id|ntfs_cluster_t
id|len
suffix:semicolon
DECL|typedef|ntfs_runlist
)brace
id|ntfs_runlist
suffix:semicolon
DECL|struct|ntfs_attribute
r_typedef
r_struct
id|ntfs_attribute
(brace
DECL|member|type
r_int
id|type
suffix:semicolon
DECL|member|name
id|ntfs_u16
op_star
id|name
suffix:semicolon
DECL|member|namelen
r_int
id|namelen
suffix:semicolon
DECL|member|attrno
r_int
id|attrno
suffix:semicolon
DECL|member|size
DECL|member|allocated
DECL|member|initialized
DECL|member|compsize
id|__s64
id|size
comma
id|allocated
comma
id|initialized
comma
id|compsize
suffix:semicolon
DECL|member|flags
id|ATTR_FLAGS
id|flags
suffix:semicolon
DECL|member|resident
DECL|member|indexed
id|__u8
id|resident
comma
id|indexed
suffix:semicolon
DECL|member|cengine
r_int
id|cengine
suffix:semicolon
r_union
(brace
DECL|member|data
r_void
op_star
id|data
suffix:semicolon
multiline_comment|/* if resident */
r_struct
(brace
DECL|member|runlist
id|ntfs_runlist
op_star
id|runlist
suffix:semicolon
DECL|member|len
r_int
r_int
id|len
suffix:semicolon
DECL|member|r
)brace
id|r
suffix:semicolon
DECL|member|d
)brace
id|d
suffix:semicolon
DECL|typedef|ntfs_attribute
)brace
id|ntfs_attribute
suffix:semicolon
DECL|typedef|ntfs_inode
r_typedef
r_struct
id|ntfs_inode_info
id|ntfs_inode
suffix:semicolon
multiline_comment|/* Structure to define IO to user buffer. do_read means that the destination&n; * has to be written using fn_put, do_write means that the destination has to&n; * read using fn_get. So, do_read is from a user&squot;s point of view, while put and&n; * get are from the driver&squot;s point of view. The first argument is always the&n; * destination of the IO. */
DECL|struct|ntfs_io
r_typedef
r_struct
id|ntfs_io
(brace
DECL|member|do_read
r_int
id|do_read
suffix:semicolon
DECL|member|fn_put
r_void
(paren
op_star
id|fn_put
)paren
(paren
r_struct
id|ntfs_io
op_star
id|dest
comma
r_void
op_star
id|buf
comma
id|ntfs_size_t
)paren
suffix:semicolon
DECL|member|fn_get
r_void
(paren
op_star
id|fn_get
)paren
(paren
r_void
op_star
id|buf
comma
r_struct
id|ntfs_io
op_star
id|src
comma
id|ntfs_size_t
id|len
)paren
suffix:semicolon
DECL|member|param
r_void
op_star
id|param
suffix:semicolon
DECL|member|size
r_int
r_int
id|size
suffix:semicolon
DECL|typedef|ntfs_io
)brace
id|ntfs_io
suffix:semicolon
macro_line|#if 0
r_typedef
r_struct
(brace
id|ntfs_volume
op_star
id|vol
suffix:semicolon
id|ntfs_inode
op_star
id|ino
suffix:semicolon
r_int
id|type
suffix:semicolon
r_char
op_star
id|name
suffix:semicolon
r_int
id|mftno
suffix:semicolon
r_int
id|start_vcn
suffix:semicolon
)brace
id|ntfs_attrlist_item
suffix:semicolon
macro_line|#endif
eof
