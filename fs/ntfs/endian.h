multiline_comment|/*&n; * endian.h - Defines for endianness handling in NTFS Linux kernel driver.&n; *&t;      Part of the Linux-NTFS project.&n; *&n; * Copyright (c) 2001-2004 Anton Altaparmakov&n; *&n; * This program/include file is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License as published&n; * by the Free Software Foundation; either version 2 of the License, or&n; * (at your option) any later version.&n; *&n; * This program/include file is distributed in the hope that it will be&n; * useful, but WITHOUT ANY WARRANTY; without even the implied warranty&n; * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; * GNU General Public License for more details.&n; *&n; * You should have received a copy of the GNU General Public License&n; * along with this program (in the main directory of the Linux-NTFS&n; * distribution in the file COPYING); if not, write to the Free Software&n; * Foundation,Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA&n; */
macro_line|#ifndef _LINUX_NTFS_ENDIAN_H
DECL|macro|_LINUX_NTFS_ENDIAN_H
mdefine_line|#define _LINUX_NTFS_ENDIAN_H
macro_line|#include &lt;asm/byteorder.h&gt;
macro_line|#include &quot;types.h&quot;
multiline_comment|/*&n; * Signed endianness conversion functions.&n; */
DECL|function|sle16_to_cpu
r_static
r_inline
id|s16
id|sle16_to_cpu
c_func
(paren
id|sle16
id|x
)paren
(brace
r_return
id|le16_to_cpu
c_func
(paren
(paren
id|__force
id|le16
)paren
id|x
)paren
suffix:semicolon
)brace
DECL|function|sle32_to_cpu
r_static
r_inline
id|s32
id|sle32_to_cpu
c_func
(paren
id|sle32
id|x
)paren
(brace
r_return
id|le32_to_cpu
c_func
(paren
(paren
id|__force
id|le32
)paren
id|x
)paren
suffix:semicolon
)brace
DECL|function|sle64_to_cpu
r_static
r_inline
id|s64
id|sle64_to_cpu
c_func
(paren
id|sle64
id|x
)paren
(brace
r_return
id|le64_to_cpu
c_func
(paren
(paren
id|__force
id|le64
)paren
id|x
)paren
suffix:semicolon
)brace
DECL|function|sle16_to_cpup
r_static
r_inline
id|s16
id|sle16_to_cpup
c_func
(paren
id|sle16
op_star
id|x
)paren
(brace
r_return
id|le16_to_cpu
c_func
(paren
op_star
(paren
id|__force
id|le16
op_star
)paren
id|x
)paren
suffix:semicolon
)brace
DECL|function|sle32_to_cpup
r_static
r_inline
id|s32
id|sle32_to_cpup
c_func
(paren
id|sle32
op_star
id|x
)paren
(brace
r_return
id|le32_to_cpu
c_func
(paren
op_star
(paren
id|__force
id|le32
op_star
)paren
id|x
)paren
suffix:semicolon
)brace
DECL|function|sle64_to_cpup
r_static
r_inline
id|s64
id|sle64_to_cpup
c_func
(paren
id|sle64
op_star
id|x
)paren
(brace
r_return
id|le64_to_cpu
c_func
(paren
op_star
(paren
id|__force
id|le64
op_star
)paren
id|x
)paren
suffix:semicolon
)brace
DECL|function|cpu_to_sle16
r_static
r_inline
id|sle16
id|cpu_to_sle16
c_func
(paren
id|s16
id|x
)paren
(brace
r_return
(paren
id|__force
id|sle16
)paren
id|cpu_to_le16
c_func
(paren
id|x
)paren
suffix:semicolon
)brace
DECL|function|cpu_to_sle32
r_static
r_inline
id|sle32
id|cpu_to_sle32
c_func
(paren
id|s32
id|x
)paren
(brace
r_return
(paren
id|__force
id|sle32
)paren
id|cpu_to_le32
c_func
(paren
id|x
)paren
suffix:semicolon
)brace
DECL|function|cpu_to_sle64
r_static
r_inline
id|sle64
id|cpu_to_sle64
c_func
(paren
id|s64
id|x
)paren
(brace
r_return
(paren
id|__force
id|sle64
)paren
id|cpu_to_le64
c_func
(paren
id|x
)paren
suffix:semicolon
)brace
DECL|function|cpu_to_sle16p
r_static
r_inline
id|sle16
id|cpu_to_sle16p
c_func
(paren
id|s16
op_star
id|x
)paren
(brace
r_return
(paren
id|__force
id|sle16
)paren
id|cpu_to_le16
c_func
(paren
op_star
id|x
)paren
suffix:semicolon
)brace
DECL|function|cpu_to_sle32p
r_static
r_inline
id|sle32
id|cpu_to_sle32p
c_func
(paren
id|s32
op_star
id|x
)paren
(brace
r_return
(paren
id|__force
id|sle32
)paren
id|cpu_to_le32
c_func
(paren
op_star
id|x
)paren
suffix:semicolon
)brace
DECL|function|cpu_to_sle64p
r_static
r_inline
id|sle64
id|cpu_to_sle64p
c_func
(paren
id|s64
op_star
id|x
)paren
(brace
r_return
(paren
id|__force
id|sle64
)paren
id|cpu_to_le64
c_func
(paren
op_star
id|x
)paren
suffix:semicolon
)brace
macro_line|#endif /* _LINUX_NTFS_ENDIAN_H */
eof
