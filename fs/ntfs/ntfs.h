multiline_comment|/*&n; * ntfs.h - Defines for NTFS Linux kernel driver. Part of the Linux-NTFS&n; *&t;    project.&n; *&n; * Copyright (c) 2001-2004 Anton Altaparmakov&n; * Copyright (C) 2002 Richard Russon&n; *&n; * This program/include file is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License as published&n; * by the Free Software Foundation; either version 2 of the License, or&n; * (at your option) any later version.&n; *&n; * This program/include file is distributed in the hope that it will be&n; * useful, but WITHOUT ANY WARRANTY; without even the implied warranty&n; * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; * GNU General Public License for more details.&n; *&n; * You should have received a copy of the GNU General Public License&n; * along with this program (in the main directory of the Linux-NTFS&n; * distribution in the file COPYING); if not, write to the Free Software&n; * Foundation,Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA&n; */
macro_line|#ifndef _LINUX_NTFS_H
DECL|macro|_LINUX_NTFS_H
mdefine_line|#define _LINUX_NTFS_H
macro_line|#include &lt;linux/stddef.h&gt;
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;linux/module.h&gt;
macro_line|#include &lt;linux/compiler.h&gt;
macro_line|#include &lt;linux/fs.h&gt;
macro_line|#include &lt;linux/nls.h&gt;
macro_line|#include &lt;linux/smp.h&gt;
macro_line|#include &quot;types.h&quot;
macro_line|#include &quot;volume.h&quot;
macro_line|#include &quot;layout.h&quot;
r_typedef
r_enum
(brace
DECL|enumerator|NTFS_BLOCK_SIZE
id|NTFS_BLOCK_SIZE
op_assign
l_int|512
comma
DECL|enumerator|NTFS_BLOCK_SIZE_BITS
id|NTFS_BLOCK_SIZE_BITS
op_assign
l_int|9
comma
DECL|enumerator|NTFS_SB_MAGIC
id|NTFS_SB_MAGIC
op_assign
l_int|0x5346544e
comma
multiline_comment|/* &squot;NTFS&squot; */
DECL|enumerator|NTFS_MAX_NAME_LEN
id|NTFS_MAX_NAME_LEN
op_assign
l_int|255
comma
DECL|typedef|NTFS_CONSTANTS
)brace
id|NTFS_CONSTANTS
suffix:semicolon
multiline_comment|/* Global variables. */
multiline_comment|/* Slab caches (from super.c). */
r_extern
id|kmem_cache_t
op_star
id|ntfs_name_cache
suffix:semicolon
r_extern
id|kmem_cache_t
op_star
id|ntfs_inode_cache
suffix:semicolon
r_extern
id|kmem_cache_t
op_star
id|ntfs_big_inode_cache
suffix:semicolon
r_extern
id|kmem_cache_t
op_star
id|ntfs_attr_ctx_cache
suffix:semicolon
r_extern
id|kmem_cache_t
op_star
id|ntfs_index_ctx_cache
suffix:semicolon
multiline_comment|/* The various operations structs defined throughout the driver files. */
r_extern
r_struct
id|address_space_operations
id|ntfs_aops
suffix:semicolon
r_extern
r_struct
id|address_space_operations
id|ntfs_mst_aops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|ntfs_file_ops
suffix:semicolon
r_extern
r_struct
id|inode_operations
id|ntfs_file_inode_ops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|ntfs_dir_ops
suffix:semicolon
r_extern
r_struct
id|inode_operations
id|ntfs_dir_inode_ops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|ntfs_empty_file_ops
suffix:semicolon
r_extern
r_struct
id|inode_operations
id|ntfs_empty_inode_ops
suffix:semicolon
multiline_comment|/**&n; * NTFS_SB - return the ntfs volume given a vfs super block&n; * @sb:&t;&t;VFS super block&n; *&n; * NTFS_SB() returns the ntfs volume associated with the VFS super block @sb.&n; */
DECL|function|NTFS_SB
r_static
r_inline
id|ntfs_volume
op_star
id|NTFS_SB
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
(brace
r_return
id|sb-&gt;s_fs_info
suffix:semicolon
)brace
multiline_comment|/* Declarations of functions and global variables. */
multiline_comment|/* From fs/ntfs/compress.c */
r_extern
r_int
id|ntfs_read_compressed_block
c_func
(paren
r_struct
id|page
op_star
id|page
)paren
suffix:semicolon
r_extern
r_int
id|allocate_compression_buffers
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|free_compression_buffers
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/* From fs/ntfs/super.c */
DECL|macro|default_upcase_len
mdefine_line|#define default_upcase_len 0x10000
r_extern
r_struct
id|semaphore
id|ntfs_lock
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|val
r_int
id|val
suffix:semicolon
DECL|member|str
r_char
op_star
id|str
suffix:semicolon
DECL|typedef|option_t
)brace
id|option_t
suffix:semicolon
r_extern
r_const
id|option_t
id|on_errors_arr
(braket
)braket
suffix:semicolon
multiline_comment|/* From fs/ntfs/mst.c */
r_extern
r_int
id|post_read_mst_fixup
c_func
(paren
id|NTFS_RECORD
op_star
id|b
comma
r_const
id|u32
id|size
)paren
suffix:semicolon
r_extern
r_int
id|pre_write_mst_fixup
c_func
(paren
id|NTFS_RECORD
op_star
id|b
comma
r_const
id|u32
id|size
)paren
suffix:semicolon
r_extern
r_void
id|post_write_mst_fixup
c_func
(paren
id|NTFS_RECORD
op_star
id|b
)paren
suffix:semicolon
multiline_comment|/* From fs/ntfs/unistr.c */
r_extern
id|BOOL
id|ntfs_are_names_equal
c_func
(paren
r_const
id|ntfschar
op_star
id|s1
comma
r_int
id|s1_len
comma
r_const
id|ntfschar
op_star
id|s2
comma
r_int
id|s2_len
comma
r_const
id|IGNORE_CASE_BOOL
id|ic
comma
r_const
id|ntfschar
op_star
id|upcase
comma
r_const
id|u32
id|upcase_size
)paren
suffix:semicolon
r_extern
r_int
id|ntfs_collate_names
c_func
(paren
r_const
id|ntfschar
op_star
id|name1
comma
r_const
id|u32
id|name1_len
comma
r_const
id|ntfschar
op_star
id|name2
comma
r_const
id|u32
id|name2_len
comma
r_const
r_int
id|err_val
comma
r_const
id|IGNORE_CASE_BOOL
id|ic
comma
r_const
id|ntfschar
op_star
id|upcase
comma
r_const
id|u32
id|upcase_len
)paren
suffix:semicolon
r_extern
r_int
id|ntfs_ucsncmp
c_func
(paren
r_const
id|ntfschar
op_star
id|s1
comma
r_const
id|ntfschar
op_star
id|s2
comma
r_int
id|n
)paren
suffix:semicolon
r_extern
r_int
id|ntfs_ucsncasecmp
c_func
(paren
r_const
id|ntfschar
op_star
id|s1
comma
r_const
id|ntfschar
op_star
id|s2
comma
r_int
id|n
comma
r_const
id|ntfschar
op_star
id|upcase
comma
r_const
id|u32
id|upcase_size
)paren
suffix:semicolon
r_extern
r_void
id|ntfs_upcase_name
c_func
(paren
id|ntfschar
op_star
id|name
comma
id|u32
id|name_len
comma
r_const
id|ntfschar
op_star
id|upcase
comma
r_const
id|u32
id|upcase_len
)paren
suffix:semicolon
r_extern
r_void
id|ntfs_file_upcase_value
c_func
(paren
id|FILE_NAME_ATTR
op_star
id|file_name_attr
comma
r_const
id|ntfschar
op_star
id|upcase
comma
r_const
id|u32
id|upcase_len
)paren
suffix:semicolon
r_extern
r_int
id|ntfs_file_compare_values
c_func
(paren
id|FILE_NAME_ATTR
op_star
id|file_name_attr1
comma
id|FILE_NAME_ATTR
op_star
id|file_name_attr2
comma
r_const
r_int
id|err_val
comma
r_const
id|IGNORE_CASE_BOOL
id|ic
comma
r_const
id|ntfschar
op_star
id|upcase
comma
r_const
id|u32
id|upcase_len
)paren
suffix:semicolon
r_extern
r_int
id|ntfs_nlstoucs
c_func
(paren
r_const
id|ntfs_volume
op_star
id|vol
comma
r_const
r_char
op_star
id|ins
comma
r_const
r_int
id|ins_len
comma
id|ntfschar
op_star
op_star
id|outs
)paren
suffix:semicolon
r_extern
r_int
id|ntfs_ucstonls
c_func
(paren
r_const
id|ntfs_volume
op_star
id|vol
comma
r_const
id|ntfschar
op_star
id|ins
comma
r_const
r_int
id|ins_len
comma
r_int
r_char
op_star
op_star
id|outs
comma
r_int
id|outs_len
)paren
suffix:semicolon
multiline_comment|/* From fs/ntfs/upcase.c */
r_extern
id|ntfschar
op_star
id|generate_default_upcase
c_func
(paren
r_void
)paren
suffix:semicolon
macro_line|#endif /* _LINUX_NTFS_H */
eof
