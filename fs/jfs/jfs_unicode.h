multiline_comment|/*&n; * unistrk:  Unicode kernel case support&n; *&n; * Function:&n; *     Convert a unicode character to upper or lower case using&n; *     compressed tables.&n; *&n; *   Copyright (c) International Business Machines  Corp., 2000&n; *&n; *   This program is free software;  you can redistribute it and/or modify&n; *   it under the terms of the GNU General Public License as published by&n; *   the Free Software Foundation; either version 2 of the License, or &n; *   (at your option) any later version.&n; * &n; *   This program is distributed in the hope that it will be useful,&n; *   but WITHOUT ANY WARRANTY;  without even the implied warranty of&n; *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See&n; *   the GNU General Public License for more details.&n; *&n; *   You should have received a copy of the GNU General Public License&n; *   along with this program;  if not, write to the Free Software &n; *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA&n; *&n; *&n; */
macro_line|#include &lt;asm/byteorder.h&gt;
macro_line|#include &quot;jfs_types.h&quot;
r_typedef
r_struct
(brace
DECL|member|start
m_wchar_t
id|start
suffix:semicolon
DECL|member|end
m_wchar_t
id|end
suffix:semicolon
DECL|member|table
r_int
r_char
op_star
id|table
suffix:semicolon
DECL|typedef|UNICASERANGE
)brace
id|UNICASERANGE
suffix:semicolon
r_extern
r_int
r_char
id|UniUpperTable
(braket
l_int|512
)braket
suffix:semicolon
r_extern
id|UNICASERANGE
id|UniUpperRange
(braket
)braket
suffix:semicolon
r_extern
r_int
id|get_UCSname
c_func
(paren
id|component_t
op_star
comma
r_struct
id|dentry
op_star
comma
r_struct
id|nls_table
op_star
)paren
suffix:semicolon
r_extern
r_int
id|jfs_strfromUCS_le
c_func
(paren
r_char
op_star
comma
r_const
m_wchar_t
op_star
comma
r_int
comma
r_struct
id|nls_table
op_star
)paren
suffix:semicolon
DECL|macro|free_UCSname
mdefine_line|#define free_UCSname(COMP) kfree((COMP)-&gt;name)
multiline_comment|/*&n; * UniStrcpy:  Copy a string&n; */
DECL|function|UniStrcpy
r_static
r_inline
m_wchar_t
op_star
id|UniStrcpy
c_func
(paren
m_wchar_t
op_star
id|ucs1
comma
r_const
m_wchar_t
op_star
id|ucs2
)paren
(brace
m_wchar_t
op_star
id|anchor
op_assign
id|ucs1
suffix:semicolon
multiline_comment|/* save the start of result string */
r_while
c_loop
(paren
(paren
op_star
id|ucs1
op_increment
op_assign
op_star
id|ucs2
op_increment
)paren
)paren
suffix:semicolon
r_return
id|anchor
suffix:semicolon
)brace
multiline_comment|/*&n; * UniStrncpy:  Copy length limited string with pad&n; */
DECL|function|UniStrncpy
r_static
r_inline
m_wchar_t
op_star
id|UniStrncpy
c_func
(paren
m_wchar_t
op_star
id|ucs1
comma
r_const
m_wchar_t
op_star
id|ucs2
comma
r_int
id|n
)paren
(brace
m_wchar_t
op_star
id|anchor
op_assign
id|ucs1
suffix:semicolon
r_while
c_loop
(paren
id|n
op_decrement
op_logical_and
op_star
id|ucs2
)paren
multiline_comment|/* Copy the strings */
op_star
id|ucs1
op_increment
op_assign
op_star
id|ucs2
op_increment
suffix:semicolon
id|n
op_increment
suffix:semicolon
r_while
c_loop
(paren
id|n
op_decrement
)paren
multiline_comment|/* Pad with nulls */
op_star
id|ucs1
op_increment
op_assign
l_int|0
suffix:semicolon
r_return
id|anchor
suffix:semicolon
)brace
multiline_comment|/*&n; * UniStrncmp_le:  Compare length limited string - native to little-endian&n; */
DECL|function|UniStrncmp_le
r_static
r_inline
r_int
id|UniStrncmp_le
c_func
(paren
r_const
m_wchar_t
op_star
id|ucs1
comma
r_const
m_wchar_t
op_star
id|ucs2
comma
r_int
id|n
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|n
)paren
r_return
l_int|0
suffix:semicolon
multiline_comment|/* Null strings are equal */
r_while
c_loop
(paren
(paren
op_star
id|ucs1
op_eq
id|__le16_to_cpu
c_func
(paren
op_star
id|ucs2
)paren
)paren
op_logical_and
op_star
id|ucs1
op_logical_and
op_decrement
id|n
)paren
(brace
id|ucs1
op_increment
suffix:semicolon
id|ucs2
op_increment
suffix:semicolon
)brace
r_return
(paren
r_int
)paren
op_star
id|ucs1
op_minus
(paren
r_int
)paren
id|__le16_to_cpu
c_func
(paren
op_star
id|ucs2
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * UniStrncpy_le:  Copy length limited string with pad to little-endian&n; */
DECL|function|UniStrncpy_le
r_static
r_inline
m_wchar_t
op_star
id|UniStrncpy_le
c_func
(paren
m_wchar_t
op_star
id|ucs1
comma
r_const
m_wchar_t
op_star
id|ucs2
comma
r_int
id|n
)paren
(brace
m_wchar_t
op_star
id|anchor
op_assign
id|ucs1
suffix:semicolon
r_while
c_loop
(paren
id|n
op_decrement
op_logical_and
op_star
id|ucs2
)paren
multiline_comment|/* Copy the strings */
op_star
id|ucs1
op_increment
op_assign
id|__le16_to_cpu
c_func
(paren
op_star
id|ucs2
op_increment
)paren
suffix:semicolon
id|n
op_increment
suffix:semicolon
r_while
c_loop
(paren
id|n
op_decrement
)paren
multiline_comment|/* Pad with nulls */
op_star
id|ucs1
op_increment
op_assign
l_int|0
suffix:semicolon
r_return
id|anchor
suffix:semicolon
)brace
multiline_comment|/*&n; * UniToupper:  Convert a unicode character to upper case&n; */
DECL|function|UniToupper
r_static
r_inline
m_wchar_t
id|UniToupper
c_func
(paren
m_wchar_t
id|uc
)paren
(brace
id|UNICASERANGE
op_star
id|rp
suffix:semicolon
r_if
c_cond
(paren
id|uc
OL
r_sizeof
(paren
id|UniUpperTable
)paren
)paren
(brace
multiline_comment|/* Latin characters */
r_return
id|uc
op_plus
id|UniUpperTable
(braket
id|uc
)braket
suffix:semicolon
multiline_comment|/* Use base tables */
)brace
r_else
(brace
id|rp
op_assign
id|UniUpperRange
suffix:semicolon
multiline_comment|/* Use range tables */
r_while
c_loop
(paren
id|rp-&gt;start
)paren
(brace
r_if
c_cond
(paren
id|uc
OL
id|rp-&gt;start
)paren
multiline_comment|/* Before start of range */
r_return
id|uc
suffix:semicolon
multiline_comment|/* Uppercase = input */
r_if
c_cond
(paren
id|uc
op_le
id|rp-&gt;end
)paren
multiline_comment|/* In range */
r_return
id|uc
op_plus
id|rp-&gt;table
(braket
id|uc
op_minus
id|rp-&gt;start
)braket
suffix:semicolon
id|rp
op_increment
suffix:semicolon
multiline_comment|/* Try next range */
)brace
)brace
r_return
id|uc
suffix:semicolon
multiline_comment|/* Past last range */
)brace
multiline_comment|/*&n; * UniStrupr:  Upper case a unicode string&n; */
DECL|function|UniStrupr
r_static
r_inline
m_wchar_t
op_star
id|UniStrupr
c_func
(paren
m_wchar_t
op_star
id|upin
)paren
(brace
m_wchar_t
op_star
id|up
suffix:semicolon
id|up
op_assign
id|upin
suffix:semicolon
r_while
c_loop
(paren
op_star
id|up
)paren
(brace
multiline_comment|/* For all characters */
op_star
id|up
op_assign
id|UniToupper
c_func
(paren
op_star
id|up
)paren
suffix:semicolon
id|up
op_increment
suffix:semicolon
)brace
r_return
id|upin
suffix:semicolon
multiline_comment|/* Return input pointer */
)brace
eof
