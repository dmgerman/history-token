multiline_comment|/*&n; *   Copyright (c) International Business Machines Corp., 2000-2001&n; *   Portions Copyright (c) Christoph Hellwig, 2001-2002&n; *&n; *   This program is free software;  you can redistribute it and/or modify&n; *   it under the terms of the GNU General Public License as published by&n; *   the Free Software Foundation; either version 2 of the License, or &n; *   (at your option) any later version.&n; * &n; *   This program is distributed in the hope that it will be useful,&n; *   but WITHOUT ANY WARRANTY;  without even the implied warranty of&n; *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See&n; *   the GNU General Public License for more details.&n; *&n; *   You should have received a copy of the GNU General Public License&n; *   along with this program;  if not, write to the Free Software &n; *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA&n; */
macro_line|#ifndef _H_JFS_LOCK
DECL|macro|_H_JFS_LOCK
mdefine_line|#define _H_JFS_LOCK
macro_line|#include &lt;linux/spinlock.h&gt;
macro_line|#include &lt;linux/sched.h&gt;
multiline_comment|/*&n; *&t;jfs_lock.h&n; *&n; * JFS lock definition for globally referenced locks&n; */
multiline_comment|/* readers/writer lock: thread-thread */
multiline_comment|/*&n; * RW semaphores do not currently have a trylock function.  Since the&n; * implementation varies by platform, I have implemented a platform-independent&n; * wrapper around the rw_semaphore routines.  If this turns out to be the best&n; * way of avoiding our locking problems, I will push to get a trylock&n; * implemented in the kernel, but I&squot;d rather find a way to avoid having to&n; * use it.&n; */
DECL|macro|RDWRLOCK_T
mdefine_line|#define RDWRLOCK_T jfs_rwlock_t
DECL|function|RDWRLOCK_INIT
r_static
r_inline
r_void
id|RDWRLOCK_INIT
c_func
(paren
id|jfs_rwlock_t
op_star
id|Lock
)paren
(brace
id|init_rwsem
c_func
(paren
op_amp
id|Lock-&gt;rw_sem
)paren
suffix:semicolon
id|atomic_set
c_func
(paren
op_amp
id|Lock-&gt;in_use
comma
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|READ_LOCK
r_static
r_inline
r_void
id|READ_LOCK
c_func
(paren
id|jfs_rwlock_t
op_star
id|Lock
)paren
(brace
id|atomic_inc
c_func
(paren
op_amp
id|Lock-&gt;in_use
)paren
suffix:semicolon
id|down_read
c_func
(paren
op_amp
id|Lock-&gt;rw_sem
)paren
suffix:semicolon
)brace
DECL|function|READ_UNLOCK
r_static
r_inline
r_void
id|READ_UNLOCK
c_func
(paren
id|jfs_rwlock_t
op_star
id|Lock
)paren
(brace
id|up_read
c_func
(paren
op_amp
id|Lock-&gt;rw_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|Lock-&gt;in_use
)paren
suffix:semicolon
)brace
DECL|function|WRITE_LOCK
r_static
r_inline
r_void
id|WRITE_LOCK
c_func
(paren
id|jfs_rwlock_t
op_star
id|Lock
)paren
(brace
id|atomic_inc
c_func
(paren
op_amp
id|Lock-&gt;in_use
)paren
suffix:semicolon
id|down_write
c_func
(paren
op_amp
id|Lock-&gt;rw_sem
)paren
suffix:semicolon
)brace
DECL|function|WRITE_TRYLOCK
r_static
r_inline
r_int
id|WRITE_TRYLOCK
c_func
(paren
id|jfs_rwlock_t
op_star
id|Lock
)paren
(brace
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|Lock-&gt;in_use
)paren
)paren
r_return
l_int|0
suffix:semicolon
id|WRITE_LOCK
c_func
(paren
id|Lock
)paren
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|WRITE_UNLOCK
r_static
r_inline
r_void
id|WRITE_UNLOCK
c_func
(paren
id|jfs_rwlock_t
op_star
id|Lock
)paren
(brace
id|up_write
c_func
(paren
op_amp
id|Lock-&gt;rw_sem
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|Lock-&gt;in_use
)paren
suffix:semicolon
)brace
DECL|macro|IREAD_LOCK
mdefine_line|#define IREAD_LOCK(ip)&t;&t;READ_LOCK(&amp;JFS_IP(ip)-&gt;rdwrlock)
DECL|macro|IREAD_UNLOCK
mdefine_line|#define IREAD_UNLOCK(ip)&t;READ_UNLOCK(&amp;JFS_IP(ip)-&gt;rdwrlock)
DECL|macro|IWRITE_LOCK
mdefine_line|#define IWRITE_LOCK(ip)&t;&t;WRITE_LOCK(&amp;JFS_IP(ip)-&gt;rdwrlock)
DECL|macro|IWRITE_TRYLOCK
mdefine_line|#define IWRITE_TRYLOCK(ip)&t;WRITE_TRYLOCK(&amp;JFS_IP(ip)-&gt;rdwrlock)
DECL|macro|IWRITE_UNLOCK
mdefine_line|#define IWRITE_UNLOCK(ip)&t;WRITE_UNLOCK(&amp;JFS_IP(ip)-&gt;rdwrlock)
DECL|macro|IWRITE_LOCK_LIST
mdefine_line|#define IWRITE_LOCK_LIST&t;iwritelocklist
r_extern
r_void
id|iwritelocklist
c_func
(paren
r_int
comma
dot
dot
dot
)paren
suffix:semicolon
multiline_comment|/*&n; * Conditional sleep where condition is protected by spinlock&n; *&n; * lock_cmd and unlock_cmd take and release the spinlock&n; */
DECL|macro|__SLEEP_COND
mdefine_line|#define __SLEEP_COND(wq, cond, lock_cmd, unlock_cmd)&t;&bslash;&n;do {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;DECLARE_WAITQUEUE(__wait, current);&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;add_wait_queue(&amp;wq, &amp;__wait);&t;&t;&t;&bslash;&n;&t;for (;;) {&t;&t;&t;&t;&t;&bslash;&n;&t;&t;set_current_state(TASK_UNINTERRUPTIBLE);&bslash;&n;&t;&t;if (cond)&t;&t;&t;&t;&bslash;&n;&t;&t;&t;break;&t;&t;&t;&t;&bslash;&n;&t;&t;unlock_cmd;&t;&t;&t;&t;&bslash;&n;&t;&t;schedule();&t;&t;&t;&t;&bslash;&n;&t;&t;lock_cmd;&t;&t;&t;&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&bslash;&n;&t;current-&gt;state = TASK_RUNNING;&t;&t;&t;&bslash;&n;&t;remove_wait_queue(&amp;wq, &amp;__wait);&t;&t;&bslash;&n;} while (0)
macro_line|#endif&t;&t;&t;&t;/* _H_JFS_LOCK */
eof
