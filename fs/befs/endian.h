multiline_comment|/*&n; * linux/fs/befs/endian.h&n; *&n; * Copyright (C) 2001 Will Dyson &lt;will_dyson@pobox.com&gt;&n; *&n; * Partially based on similar funtions in the sysv driver.&n; */
macro_line|#ifndef LINUX_BEFS_ENDIAN
DECL|macro|LINUX_BEFS_ENDIAN
mdefine_line|#define LINUX_BEFS_ENDIAN
macro_line|#include &lt;linux/byteorder/generic.h&gt;
macro_line|#include &quot;befs.h&quot;
r_static
r_inline
id|u64
DECL|function|fs64_to_cpu
id|fs64_to_cpu
c_func
(paren
r_const
r_struct
id|super_block
op_star
id|sb
comma
id|u64
id|n
)paren
(brace
r_if
c_cond
(paren
id|BEFS_SB
c_func
(paren
id|sb
)paren
op_member_access_from_pointer
id|byte_order
op_eq
id|BEFS_BYTESEX_LE
)paren
r_return
id|le64_to_cpu
c_func
(paren
id|n
)paren
suffix:semicolon
r_else
r_return
id|be64_to_cpu
c_func
(paren
id|n
)paren
suffix:semicolon
)brace
r_static
r_inline
id|u64
DECL|function|cpu_to_fs64
id|cpu_to_fs64
c_func
(paren
r_const
r_struct
id|super_block
op_star
id|sb
comma
id|u64
id|n
)paren
(brace
r_if
c_cond
(paren
id|BEFS_SB
c_func
(paren
id|sb
)paren
op_member_access_from_pointer
id|byte_order
op_eq
id|BEFS_BYTESEX_LE
)paren
r_return
id|cpu_to_le64
c_func
(paren
id|n
)paren
suffix:semicolon
r_else
r_return
id|cpu_to_be64
c_func
(paren
id|n
)paren
suffix:semicolon
)brace
r_static
r_inline
id|u32
DECL|function|fs32_to_cpu
id|fs32_to_cpu
c_func
(paren
r_const
r_struct
id|super_block
op_star
id|sb
comma
id|u32
id|n
)paren
(brace
r_if
c_cond
(paren
id|BEFS_SB
c_func
(paren
id|sb
)paren
op_member_access_from_pointer
id|byte_order
op_eq
id|BEFS_BYTESEX_LE
)paren
r_return
id|le32_to_cpu
c_func
(paren
id|n
)paren
suffix:semicolon
r_else
r_return
id|be32_to_cpu
c_func
(paren
id|n
)paren
suffix:semicolon
)brace
r_static
r_inline
id|u32
DECL|function|cpu_to_fs32
id|cpu_to_fs32
c_func
(paren
r_const
r_struct
id|super_block
op_star
id|sb
comma
id|u32
id|n
)paren
(brace
r_if
c_cond
(paren
id|BEFS_SB
c_func
(paren
id|sb
)paren
op_member_access_from_pointer
id|byte_order
op_eq
id|BEFS_BYTESEX_LE
)paren
r_return
id|cpu_to_le32
c_func
(paren
id|n
)paren
suffix:semicolon
r_else
r_return
id|cpu_to_be32
c_func
(paren
id|n
)paren
suffix:semicolon
)brace
r_static
r_inline
id|u16
DECL|function|fs16_to_cpu
id|fs16_to_cpu
c_func
(paren
r_const
r_struct
id|super_block
op_star
id|sb
comma
id|u16
id|n
)paren
(brace
r_if
c_cond
(paren
id|BEFS_SB
c_func
(paren
id|sb
)paren
op_member_access_from_pointer
id|byte_order
op_eq
id|BEFS_BYTESEX_LE
)paren
r_return
id|le16_to_cpu
c_func
(paren
id|n
)paren
suffix:semicolon
r_else
r_return
id|be16_to_cpu
c_func
(paren
id|n
)paren
suffix:semicolon
)brace
r_static
r_inline
id|u16
DECL|function|cpu_to_fs16
id|cpu_to_fs16
c_func
(paren
r_const
r_struct
id|super_block
op_star
id|sb
comma
id|u16
id|n
)paren
(brace
r_if
c_cond
(paren
id|BEFS_SB
c_func
(paren
id|sb
)paren
op_member_access_from_pointer
id|byte_order
op_eq
id|BEFS_BYTESEX_LE
)paren
r_return
id|cpu_to_le16
c_func
(paren
id|n
)paren
suffix:semicolon
r_else
r_return
id|cpu_to_be16
c_func
(paren
id|n
)paren
suffix:semicolon
)brace
multiline_comment|/* Composite types below here */
r_static
r_inline
id|befs_block_run
DECL|function|fsrun_to_cpu
id|fsrun_to_cpu
c_func
(paren
r_const
r_struct
id|super_block
op_star
id|sb
comma
id|befs_block_run
id|n
)paren
(brace
id|befs_block_run
id|run
suffix:semicolon
r_if
c_cond
(paren
id|BEFS_SB
c_func
(paren
id|sb
)paren
op_member_access_from_pointer
id|byte_order
op_eq
id|BEFS_BYTESEX_LE
)paren
(brace
id|run.allocation_group
op_assign
id|le32_to_cpu
c_func
(paren
id|n.allocation_group
)paren
suffix:semicolon
id|run.start
op_assign
id|le16_to_cpu
c_func
(paren
id|n.start
)paren
suffix:semicolon
id|run.len
op_assign
id|le16_to_cpu
c_func
(paren
id|n.len
)paren
suffix:semicolon
)brace
r_else
(brace
id|run.allocation_group
op_assign
id|be32_to_cpu
c_func
(paren
id|n.allocation_group
)paren
suffix:semicolon
id|run.start
op_assign
id|be16_to_cpu
c_func
(paren
id|n.start
)paren
suffix:semicolon
id|run.len
op_assign
id|be16_to_cpu
c_func
(paren
id|n.len
)paren
suffix:semicolon
)brace
r_return
id|run
suffix:semicolon
)brace
r_static
r_inline
id|befs_block_run
DECL|function|cpu_to_fsrun
id|cpu_to_fsrun
c_func
(paren
r_const
r_struct
id|super_block
op_star
id|sb
comma
id|befs_block_run
id|n
)paren
(brace
id|befs_block_run
id|run
suffix:semicolon
r_if
c_cond
(paren
id|BEFS_SB
c_func
(paren
id|sb
)paren
op_member_access_from_pointer
id|byte_order
op_eq
id|BEFS_BYTESEX_LE
)paren
(brace
id|run.allocation_group
op_assign
id|cpu_to_le32
c_func
(paren
id|n.allocation_group
)paren
suffix:semicolon
id|run.start
op_assign
id|cpu_to_le16
c_func
(paren
id|n.start
)paren
suffix:semicolon
id|run.len
op_assign
id|cpu_to_le16
c_func
(paren
id|n.len
)paren
suffix:semicolon
)brace
r_else
(brace
id|run.allocation_group
op_assign
id|cpu_to_be32
c_func
(paren
id|n.allocation_group
)paren
suffix:semicolon
id|run.start
op_assign
id|cpu_to_be16
c_func
(paren
id|n.start
)paren
suffix:semicolon
id|run.len
op_assign
id|cpu_to_be16
c_func
(paren
id|n.len
)paren
suffix:semicolon
)brace
r_return
id|run
suffix:semicolon
)brace
r_static
r_inline
id|befs_data_stream
DECL|function|fsds_to_cpu
id|fsds_to_cpu
c_func
(paren
r_const
r_struct
id|super_block
op_star
id|sb
comma
id|befs_data_stream
id|n
)paren
(brace
id|befs_data_stream
id|data
suffix:semicolon
r_int
id|i
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|BEFS_NUM_DIRECT_BLOCKS
suffix:semicolon
op_increment
id|i
)paren
id|data.direct
(braket
id|i
)braket
op_assign
id|fsrun_to_cpu
c_func
(paren
id|sb
comma
id|n.direct
(braket
id|i
)braket
)paren
suffix:semicolon
id|data.max_direct_range
op_assign
id|fs64_to_cpu
c_func
(paren
id|sb
comma
id|n.max_direct_range
)paren
suffix:semicolon
id|data.indirect
op_assign
id|fsrun_to_cpu
c_func
(paren
id|sb
comma
id|n.indirect
)paren
suffix:semicolon
id|data.max_indirect_range
op_assign
id|fs64_to_cpu
c_func
(paren
id|sb
comma
id|n.max_indirect_range
)paren
suffix:semicolon
id|data.double_indirect
op_assign
id|fsrun_to_cpu
c_func
(paren
id|sb
comma
id|n.double_indirect
)paren
suffix:semicolon
id|data.max_double_indirect_range
op_assign
id|fs64_to_cpu
c_func
(paren
id|sb
comma
id|n
dot
id|max_double_indirect_range
)paren
suffix:semicolon
id|data.size
op_assign
id|fs64_to_cpu
c_func
(paren
id|sb
comma
id|n.size
)paren
suffix:semicolon
r_return
id|data
suffix:semicolon
)brace
macro_line|#endif&t;&t;&t;&t;
singleline_comment|//LINUX_BEFS_ENDIAN
eof
